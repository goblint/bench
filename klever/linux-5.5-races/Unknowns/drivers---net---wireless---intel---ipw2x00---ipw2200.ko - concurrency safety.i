/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned char u_char;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_13 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_142 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_142 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_143 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_143 kgid_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_152 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_152 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_205 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_205 nodemask_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ldt_struct;
#line 194 
struct vdso_image;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct __anonstruct_mm_context_t_206 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
typedef struct __anonstruct_mm_context_t_206 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_222 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_223 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_221 {
   struct __anonstruct_222 __anonCompField___anonunion_221_29 ;
   struct __anonstruct_223 __anonCompField___anonunion_221_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_221 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_225 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_226 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_229 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_228 {
   struct list_head slab_list ;
   struct __anonstruct_229 __anonCompField___anonunion_228_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_231 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_230 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_231 __anonCompField___anonunion_230_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_227 {
   union __anonunion_228 __anonCompField___anonstruct_227_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_230 __anonCompField___anonstruct_227_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_232 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_233 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_235 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_234 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_235 __anonCompField___anonstruct_234_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_236 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_224 {
   struct __anonstruct_225 __anonCompField___anonunion_224_32 ;
   struct __anonstruct_226 __anonCompField___anonunion_224_33 ;
   struct __anonstruct_227 __anonCompField___anonunion_224_38 ;
   struct __anonstruct_232 __anonCompField___anonunion_224_39 ;
   struct __anonstruct_233 __anonCompField___anonunion_224_40 ;
   struct __anonstruct_234 __anonCompField___anonunion_224_42 ;
   struct __anonstruct_236 __anonCompField___anonunion_224_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_237 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_224 __anonCompField_page_44 ;
   union __anonunion_237 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_238 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_238 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_239 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_239 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_252 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_252 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_253 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_254 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_255 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_256 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_259 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_260 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_258 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_259 _addr_bnd ;
   struct __anonstruct__addr_pkey_260 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_257 {
   void *_addr ;
   union __anonunion_258 __anonCompField___anonstruct__sigfault_257_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_261 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_262 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_253 _kill ;
   struct __anonstruct__timer_254 _timer ;
   struct __anonstruct__rt_255 _rt ;
   struct __anonstruct__sigchld_256 _sigchld ;
   struct __anonstruct__sigfault_257 _sigfault ;
   struct __anonstruct__sigpoll_261 _sigpoll ;
   struct __anonstruct__sigsys_262 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_267 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_267 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_272 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_272 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_274 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_274 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 288 
struct export_operations;
#line 290 
struct kobject;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_438 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_437 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_438 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_437 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9120 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9120 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *, char *) ;
   ssize_t (*store)(struct device_driver *, char *, size_t ) ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14506 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14507 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14506 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14507 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_param {
   __s32 value ;
   __u8 fixed ;
   __u8 disabled ;
   __u16 flags ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_point {
   void *pointer ;
   __u16 length ;
   __u16 flags ;
};
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_freq {
   __s32 m ;
   __s16 e ;
   __u8 i ;
   __u8 flags ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_quality {
   __u8 qual ;
   __u8 level ;
   __u8 noise ;
   __u8 updated ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_discarded {
   __u32 nwid ;
   __u32 code ;
   __u32 fragment ;
   __u32 retries ;
   __u32 misc ;
};
#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_missed {
   __u32 beacon ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_scan_req {
   __u8 scan_type ;
   __u8 essid_len ;
   __u8 num_channels ;
   __u8 flags ;
   struct sockaddr bssid ;
   __u8 essid[32U] ;
   __u32 min_channel_time ;
   __u32 max_channel_time ;
   struct iw_freq channel_list[32U] ;
};
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_encode_ext {
   __u32 ext_flags ;
   __u8 tx_seq[8U] ;
   __u8 rx_seq[8U] ;
   struct sockaddr addr ;
   __u16 alg ;
   __u16 key_len ;
   __u8 key[0U] ;
};
#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_mlme {
   __u16 cmd ;
   __u16 reason_code ;
   struct sockaddr addr ;
};
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_statistics {
   __u16 status ;
   struct iw_quality qual ;
   struct iw_discarded discard ;
   struct iw_missed miss ;
};
#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
union iwreq_data {
   char name[16U] ;
   struct iw_point essid ;
   struct iw_param nwid ;
   struct iw_freq freq ;
   struct iw_param sens ;
   struct iw_param bitrate ;
   struct iw_param txpower ;
   struct iw_param rts ;
   struct iw_param frag ;
   __u32 mode ;
   struct iw_param retry ;
   struct iw_point encoding ;
   struct iw_param power ;
   struct iw_quality qual ;
   struct sockaddr ap_addr ;
   struct sockaddr addr ;
   struct iw_param param ;
   struct iw_point data ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_range {
   __u32 throughput ;
   __u32 min_nwid ;
   __u32 max_nwid ;
   __u16 old_num_channels ;
   __u8 old_num_frequency ;
   __u8 scan_capa ;
   __u32 event_capa[6U] ;
   __s32 sensitivity ;
   struct iw_quality max_qual ;
   struct iw_quality avg_qual ;
   __u8 num_bitrates ;
   __s32 bitrate[32U] ;
   __s32 min_rts ;
   __s32 max_rts ;
   __s32 min_frag ;
   __s32 max_frag ;
   __s32 min_pmp ;
   __s32 max_pmp ;
   __s32 min_pmt ;
   __s32 max_pmt ;
   __u16 pmp_flags ;
   __u16 pmt_flags ;
   __u16 pm_capa ;
   __u16 encoding_size[8U] ;
   __u8 num_encoding_sizes ;
   __u8 max_encoding_tokens ;
   __u8 encoding_login_index ;
   __u16 txpower_capa ;
   __u8 num_txpower ;
   __s32 txpower[8U] ;
   __u8 we_version_compiled ;
   __u8 we_version_source ;
   __u16 retry_capa ;
   __u16 retry_flags ;
   __u16 r_time_flags ;
   __s32 min_retry ;
   __s32 max_retry ;
   __s32 min_r_time ;
   __s32 max_r_time ;
   __u16 num_channels ;
   __u8 num_frequency ;
   struct iw_freq freq[32U] ;
   __u32 enc_capa ;
};
#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_priv_args {
   __u32 cmd ;
   __u16 set_args ;
   __u16 get_args ;
   char name[16U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_request_info {
   __u16 cmd ;
   __u16 flags ;
};
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
typedef int (*iw_handler)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_handler_def {
   iw_handler *standard ;
   __u16 num_standard ;
   __u16 num_private ;
   __u16 num_private_args ;
   iw_handler *private ;
   struct iw_priv_args *private_args ;
   struct iw_statistics *(*get_wireless_stats)(struct net_device *) ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_spy_data {
   int spy_number ;
   u_char spy_address[8U][6U] ;
   struct iw_quality spy_stat[8U] ;
   struct iw_quality spy_thr_low ;
   struct iw_quality spy_thr_high ;
   u_char spy_thr_under[8U] ;
};
#line 406 
struct libipw_device;
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_public_data {
   struct iw_spy_data *spy_data ;
   struct libipw_device *libipw ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_691 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_691 __anonCompField_kernel_param_160 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_693 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_693 __anonCompField_pci_dev_161 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dmapool.h"
struct dma_pool;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypto_ops {
   char *name ;
   struct list_head list ;
   void *(*init)(int ) ;
   void (*deinit)(void *) ;
   int (*encrypt_mpdu)(struct sk_buff *, int , void *) ;
   int (*decrypt_mpdu)(struct sk_buff *, int , void *) ;
   int (*encrypt_msdu)(struct sk_buff *, int , void *) ;
   int (*decrypt_msdu)(struct sk_buff *, int , int , void *) ;
   int (*set_key)(void *, int , u8 *, void *) ;
   int (*get_key)(void *, int , u8 *, void *) ;
   void (*print_stats)(struct seq_file *, void *) ;
   unsigned long (*get_flags)(void *) ;
   unsigned long (*set_flags)(unsigned long , void *) ;
   int extra_mpdu_prefix_len ;
   int extra_mpdu_postfix_len ;
   int extra_msdu_prefix_len ;
   int extra_msdu_postfix_len ;
   struct module *owner ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypt_data {
   struct list_head list ;
   struct lib80211_crypto_ops *ops ;
   void *priv ;
   atomic_t refcnt ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypt_info {
   char *name ;
   spinlock_t *lock ;
   struct lib80211_crypt_data *crypt[4U] ;
   int tx_keyidx ;
   struct list_head crypt_deinit_list ;
   struct timer_list crypt_deinit_timer ;
   int crypt_quiesced ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ieee80211_radiotap.h"
struct ieee80211_radiotap_header {
   uint8_t it_version ;
   uint8_t it_pad ;
   __le16 it_len ;
   __le32 it_present ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_740 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_740 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_742 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_742 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_743 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_743 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_rx_stats {
   u32 mac_time ;
   s8 rssi ;
   u8 signal ;
   u8 noise ;
   u16 rate ;
   u8 received_channel ;
   u8 control ;
   u8 mask ;
   u8 freq ;
   u16 len ;
   u64 tsf ;
   u32 beacon_time ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_frag_entry {
   unsigned long first_frag_time ;
   unsigned int seq ;
   unsigned int last_frag ;
   struct sk_buff *skb ;
   u8 src_addr[6U] ;
   u8 dst_addr[6U] ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_stats {
   unsigned int tx_unicast_frames ;
   unsigned int tx_multicast_frames ;
   unsigned int tx_fragments ;
   unsigned int tx_unicast_octets ;
   unsigned int tx_multicast_octets ;
   unsigned int tx_deferred_transmissions ;
   unsigned int tx_single_retry_frames ;
   unsigned int tx_multiple_retry_frames ;
   unsigned int tx_retry_limit_exceeded ;
   unsigned int tx_discards ;
   unsigned int rx_unicast_frames ;
   unsigned int rx_multicast_frames ;
   unsigned int rx_fragments ;
   unsigned int rx_unicast_octets ;
   unsigned int rx_multicast_octets ;
   unsigned int rx_fcs_errors ;
   unsigned int rx_discards_no_buffer ;
   unsigned int tx_discards_wrong_sa ;
   unsigned int rx_discards_undecryptable ;
   unsigned int rx_message_in_msg_fragments ;
   unsigned int rx_message_in_bad_msg_fragments ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_security {
   u16 active_key : 2 ;
   u16 enabled : 1 ;
   u16 unicast_uses_group : 1 ;
   u16 encrypt : 1 ;
   u8 auth_mode ;
   u8 encode_alg[4U] ;
   u8 key_sizes[4U] ;
   u8 keys[4U][32U] ;
   u8 level ;
   u16 flags ;
} __attribute__((__packed__));
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_hdr_3addr {
   __le16 frame_ctl ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctl ;
   u8 payload[0U] ;
} __attribute__((__packed__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_hdr_4addr {
   __le16 frame_ctl ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctl ;
   u8 addr4[6U] ;
   u8 payload[0U] ;
} __attribute__((__packed__));
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_hdr_3addrqos {
   __le16 frame_ctl ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctl ;
   u8 payload[0U] ;
   __le16 qos_ctl ;
} __attribute__((__packed__));
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_info_element {
   u8 id ;
   u8 len ;
   u8 data[0U] ;
} __attribute__((__packed__));
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_auth {
   struct libipw_hdr_3addr header ;
   __le16 algorithm ;
   __le16 transaction ;
   __le16 status ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_channel_switch {
   u8 id ;
   u8 len ;
   u8 mode ;
   u8 channel ;
   u8 count ;
} __attribute__((__packed__));
#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_action_exchange {
   u8 token ;
   struct libipw_info_element info_element[0U] ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
union __anonunion_format_744 {
   struct libipw_action_exchange exchange ;
   struct libipw_channel_switch channel_switch ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_action {
   struct libipw_hdr_3addr header ;
   u8 category ;
   u8 action ;
   union __anonunion_format_744 format ;
} __attribute__((__packed__));
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_disassoc {
   struct libipw_hdr_3addr header ;
   __le16 reason ;
} __attribute__((__packed__));
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_probe_request {
   struct libipw_hdr_3addr header ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_probe_response {
   struct libipw_hdr_3addr header ;
   __le32 time_stamp[2U] ;
   __le16 beacon_interval ;
   __le16 capability ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_reassoc_request {
   struct libipw_hdr_3addr header ;
   __le16 capability ;
   __le16 listen_interval ;
   u8 current_ap[6U] ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_assoc_response {
   struct libipw_hdr_3addr header ;
   __le16 capability ;
   __le16 status ;
   __le16 aid ;
   struct libipw_info_element info_element[0U] ;
} __attribute__((__packed__));
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_txb {
   u8 nr_frags ;
   u8 encrypted ;
   u8 rts_included ;
   u8 reserved ;
   u16 frag_size ;
   u16 payload_size ;
   struct sk_buff *fragments[0U] ;
};
#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_qos_information_element {
   u8 elementID ;
   u8 length ;
   u8 qui[3U] ;
   u8 qui_type ;
   u8 qui_subtype ;
   u8 version ;
   u8 ac_info ;
} __attribute__((__packed__));
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_qos_parameters {
   __le16 cw_min[4U] ;
   __le16 cw_max[4U] ;
   u8 aifs[4U] ;
   u8 flag[4U] ;
   __le16 tx_op_limit[4U] ;
} __attribute__((__packed__));
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_qos_data {
   struct libipw_qos_parameters parameters ;
   int active ;
   int supported ;
   u8 param_count ;
   u8 old_param_count ;
};
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_tim_parameters {
   u8 tim_count ;
   u8 tim_period ;
} __attribute__((__packed__));
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_tpc_report {
   u8 transmit_power ;
   u8 link_margin ;
} __attribute__((__packed__));
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_csa {
   u8 mode ;
   u8 channel ;
   u8 count ;
} __attribute__((__packed__));
#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_quiet {
   u8 count ;
   u8 period ;
   u8 duration ;
   u8 offset ;
} __attribute__((__packed__));
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_network {
   u8 bssid[6U] ;
   u8 channel ;
   u8 ssid[33U] ;
   u8 ssid_len ;
   struct libipw_qos_data qos_data ;
   struct libipw_rx_stats stats ;
   u16 capability ;
   u8 rates[12U] ;
   u8 rates_len ;
   u8 rates_ex[16U] ;
   u8 rates_ex_len ;
   unsigned long last_scanned ;
   u8 mode ;
   u32 flags ;
   u32 last_associate ;
   u32 time_stamp[2U] ;
   u16 beacon_interval ;
   u16 listen_interval ;
   u16 atim_window ;
   u8 erp_value ;
   u8 wpa_ie[64U] ;
   size_t wpa_ie_len ;
   u8 rsn_ie[64U] ;
   size_t rsn_ie_len ;
   struct libipw_tim_parameters tim ;
   u8 power_constraint ;
   struct libipw_tpc_report tpc_report ;
   struct libipw_csa csa ;
   struct libipw_quiet quiet ;
   struct list_head list ;
};
#line 661 
enum libipw_state {
    LIBIPW_UNINITIALIZED = 0,
    LIBIPW_INITIALIZED = 1,
    LIBIPW_ASSOCIATING = 2,
    LIBIPW_ASSOCIATED = 3,
    LIBIPW_AUTHENTICATING = 4,
    LIBIPW_AUTHENTICATED = 5,
    LIBIPW_SHUTDOWN = 6
};
#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_channel {
   u32 freq ;
   u8 channel ;
   u8 flags ;
   u8 max_power ;
};
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_geo {
   u8 name[4U] ;
   u8 bg_channels ;
   u8 a_channels ;
   struct libipw_channel bg[14U] ;
   struct libipw_channel a[132U] ;
};
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
struct libipw_device {
   struct net_device *dev ;
   struct wireless_dev wdev ;
   struct libipw_security sec ;
   struct libipw_stats ieee_stats ;
   struct libipw_geo geo ;
   struct ieee80211_supported_band bg_band ;
   struct ieee80211_supported_band a_band ;
   struct list_head network_free_list ;
   struct list_head network_list ;
   struct libipw_network *networks[128U] ;
   int scans ;
   int scan_age ;
   int iw_mode ;
   struct iw_spy_data spy_data ;
   spinlock_t lock ;
   int tx_headroom ;
   u32 config ;
   int open_wep ;
   int host_encrypt ;
   int host_encrypt_msdu ;
   int host_decrypt ;
   int host_mc_decrypt ;
   int host_strip_iv_icv ;
   int host_open_frag ;
   int ieee802_1x ;
   int wpa_enabled ;
   int drop_unencrypted ;
   int privacy_invoked ;
   size_t wpa_ie_len ;
   u8 *wpa_ie ;
   struct lib80211_crypt_info crypt_info ;
   int bcrx_sta_key ;
   struct libipw_frag_entry frag_cache[4U] ;
   unsigned int frag_next_idx ;
   u16 fts ;
   u16 rts ;
   u8 bssid[6U] ;
   enum libipw_state state ;
   int mode ;
   int modulation ;
   int freq_band ;
   int abg_true ;
   int perfect_rssi ;
   int worst_rssi ;
   u16 prev_seq_ctl ;
   void (*set_security)(struct net_device *, struct libipw_security *) ;
   netdev_tx_t (*hard_start_xmit)(struct libipw_txb *, struct net_device *, int ) ;
   int (*is_queue_full)(struct net_device *, int ) ;
   int (*handle_management)(struct net_device *, struct libipw_network *, u16 ) ;
   int (*is_qos_active)(struct net_device *, struct sk_buff *) ;
   int (*handle_auth)(struct net_device *, struct libipw_auth *) ;
   int (*handle_deauth)(struct net_device *, struct libipw_disassoc *) ;
   int (*handle_action)(struct net_device *, struct libipw_action *, struct libipw_rx_stats *) ;
   int (*handle_disassoc)(struct net_device *, struct libipw_disassoc *) ;
   int (*handle_beacon)(struct net_device *, struct libipw_probe_response *, struct libipw_network *) ;
   int (*handle_probe_response)(struct net_device *, struct libipw_probe_response *, struct libipw_network *) ;
   int (*handle_probe_request)(struct net_device *, struct libipw_probe_request *, struct libipw_rx_stats *) ;
   int (*handle_assoc_response)(struct net_device *, struct libipw_assoc_response *, struct libipw_network *) ;
   int (*handle_assoc_request)(struct net_device *) ;
   int (*handle_reassoc_request)(struct net_device *, struct libipw_reassoc_request *) ;
   u8 priv[0U] ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_qos_info {
   int qos_enable ;
   struct libipw_qos_parameters *def_qos_parm_OFDM ;
   struct libipw_qos_parameters *def_qos_parm_CCK ;
   u32 burst_duration_CCK ;
   u32 burst_duration_OFDM ;
   u16 qos_no_ack_mask ;
   int burst_enable ;
};
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct clx2_queue {
   int n_bd ;
   int first_empty ;
   int last_used ;
   u32 reg_w ;
   u32 reg_r ;
   dma_addr_t dma_addr ;
   int low_mark ;
   int high_mark ;
} __attribute__((__packed__));
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct machdr32 {
   __le16 frame_ctl ;
   __le16 duration ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
   __le16 qos_ctrl ;
} __attribute__((__packed__));
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct machdr30 {
   __le16 frame_ctl ;
   __le16 duration ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__));
#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct machdr26 {
   __le16 frame_ctl ;
   __le16 duration ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   __le16 qos_ctrl ;
} __attribute__((__packed__));
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct machdr24 {
   __le16 frame_ctl ;
   __le16 duration ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
} __attribute__((__packed__));
#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct tx_tfd_32 {
   struct machdr32 mchdr ;
   __le32 uivplaceholder[2U] ;
} __attribute__((__packed__));
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct tx_tfd_30 {
   struct machdr30 mchdr ;
   u8 reserved[2U] ;
   __le32 uivplaceholder[2U] ;
} __attribute__((__packed__));
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct tx_tfd_26 {
   struct machdr26 mchdr ;
   u8 reserved1[2U] ;
   __le32 uivplaceholder[2U] ;
   u8 reserved2[4U] ;
} __attribute__((__packed__));
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct tx_tfd_24 {
   struct machdr24 mchdr ;
   __le32 uivplaceholder[2U] ;
   u8 reserved[8U] ;
} __attribute__((__packed__));
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct tfd_command {
   u8 index ;
   u8 length ;
   __le16 reserved ;
   u8 payload[0U] ;
} __attribute__((__packed__));
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
union __anonunion_tfd_745 {
   struct tx_tfd_24 tfd_24 ;
   struct tx_tfd_26 tfd_26 ;
   struct tx_tfd_30 tfd_30 ;
   struct tx_tfd_32 tfd_32 ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct tfd_data {
   __le32 work_area_ptr ;
   u8 station_number ;
   u8 reserved1 ;
   __le16 reserved2 ;
   u8 cmd_id ;
   u8 seq_num ;
   __le16 len ;
   u8 priority ;
   u8 tx_flags ;
   u8 tx_flags_ext ;
   u8 key_index ;
   u8 wepkey[16U] ;
   u8 rate ;
   u8 antenna ;
   __le16 next_packet_duration ;
   __le16 next_frag_len ;
   __le16 back_off_counter ;
   u8 retrylimit ;
   __le16 cwcurrent ;
   u8 reserved3 ;
   union __anonunion_tfd_745 tfd ;
   __le32 num_chunks ;
   __le32 chunk_ptr[6U] ;
   __le16 chunk_len[6U] ;
} __attribute__((__packed__));
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct txrx_control_flags {
   u8 message_type ;
   u8 rx_seq_num ;
   u8 control_bits ;
   u8 reserved ;
} __attribute__((__packed__));
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
union __anonunion_u_746 {
   struct tfd_data data ;
   struct tfd_command cmd ;
   u8 raw[124U] ;
};
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct tfd_frame {
   struct txrx_control_flags control_flags ;
   union __anonunion_u_746 u ;
} __attribute__((__packed__));
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct clx2_tx_queue {
   struct clx2_queue q ;
   struct tfd_frame *bd ;
   struct libipw_txb **txb ;
};
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
union __anonunion_success_747 {
   __le32 a[8U] ;
   __le32 b[4U] ;
   __le32 g[12U] ;
};
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
union __anonunion_failed_748 {
   __le32 a[8U] ;
   __le32 b[4U] ;
   __le32 g[12U] ;
};
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct rate_histogram {
   union __anonunion_success_747 success ;
   union __anonunion_failed_748 failed ;
} __attribute__((__packed__));
#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_cmd_stats {
   u8 cmd_id ;
   u8 seq_num ;
   __le16 good_sfd ;
   __le16 bad_plcp ;
   __le16 wrong_bssid ;
   __le16 valid_mpdu ;
   __le16 bad_mac_header ;
   __le16 reserved_frame_types ;
   __le16 rx_ina ;
   __le16 bad_crc32 ;
   __le16 invalid_cts ;
   __le16 invalid_acks ;
   __le16 long_distance_ina_fina ;
   __le16 dsp_silence_unreachable ;
   __le16 accumulated_rssi ;
   __le16 rx_ovfl_frame_tossed ;
   __le16 rssi_silence_threshold ;
   __le16 rx_ovfl_frame_supplied ;
   __le16 last_rx_frame_signal ;
   __le16 last_rx_frame_noise ;
   __le16 rx_autodetec_no_ofdm ;
   __le16 rx_autodetec_no_barker ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_channel_result {
   u8 channel_num ;
   struct ipw_cmd_stats stats ;
   u8 uReserved ;
} __attribute__((__packed__));
#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_scan_complete {
   u8 scan_type ;
   u8 num_channels ;
   u8 status ;
   u8 reserved ;
} __attribute__((__packed__));
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_frag_length {
   __le16 frag_length ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_beacon_state {
   __le32 state ;
   __le32 number ;
} __attribute__((__packed__));
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_tgi_tx_key {
   u8 key_state ;
   u8 security_type ;
   u8 station_index ;
   u8 reserved ;
} __attribute__((__packed__));
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_link_deterioration {
   struct ipw_cmd_stats stats ;
   u8 rate ;
   u8 modulation ;
   struct rate_histogram histogram ;
   u8 silence_notification_type ;
   __le16 silence_count ;
} __attribute__((__packed__));
#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_association {
   u8 state ;
} __attribute__((__packed__));
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_authenticate {
   u8 state ;
   struct machdr24 addr ;
   __le16 status ;
} __attribute__((__packed__));
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_calibration {
   u8 data[104U] ;
} __attribute__((__packed__));
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct notif_noise {
   __le32 value ;
} __attribute__((__packed__));
#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
union __anonunion_u_749 {
   struct notif_association assoc ;
   struct notif_authenticate auth ;
   struct notif_channel_result channel_result ;
   struct notif_scan_complete scan_complete ;
   struct notif_frag_length frag_len ;
   struct notif_beacon_state beacon_state ;
   struct notif_tgi_tx_key tgi_tx_key ;
   struct notif_link_deterioration link_deterioration ;
   struct notif_calibration calibration ;
   struct notif_noise noise ;
   u8 raw[0U] ;
};
#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rx_notification {
   u8 reserved[8U] ;
   u8 subtype ;
   u8 flags ;
   __le16 size ;
   union __anonunion_u_749 u ;
} __attribute__((__packed__));
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rx_frame {
   __le32 reserved1 ;
   u8 parent_tsf[4U] ;
   u8 received_channel ;
   u8 frameStatus ;
   u8 rate ;
   u8 rssi ;
   u8 agc ;
   u8 rssi_dbm ;
   __le16 signal ;
   __le16 noise ;
   u8 antennaAndPhy ;
   u8 control ;
   u8 rtscts_rate ;
   u8 rtscts_seen ;
   __le16 length ;
   u8 data[0U] ;
} __attribute__((__packed__));
#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rx_header {
   u8 message_type ;
   u8 rx_seq_num ;
   u8 control_bits ;
   u8 reserved ;
} __attribute__((__packed__));
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
union __anonunion_u_750 {
   struct ipw_rx_frame frame ;
   struct ipw_rx_notification notification ;
};
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rx_packet {
   struct ipw_rx_header header ;
   union __anonunion_u_750 u ;
} __attribute__((__packed__));
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rx_mem_buffer {
   dma_addr_t dma_addr ;
   struct sk_buff *skb ;
   struct list_head list ;
};
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rx_queue {
   struct ipw_rx_mem_buffer pool[64U] ;
   struct ipw_rx_mem_buffer *queue[32U] ;
   u32 processed ;
   u32 read ;
   u32 write ;
   u32 free_count ;
   struct list_head rx_free ;
   struct list_head rx_used ;
   spinlock_t lock ;
};
#line 719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct alive_command_responce {
   u8 alive_command ;
   u8 sequence_number ;
   __le16 software_revision ;
   u8 device_identifier ;
   u8 reserved1[5U] ;
   __le16 reserved2 ;
   __le16 reserved3 ;
   __le16 clock_settle_time ;
   __le16 powerup_settle_time ;
   __le16 reserved4 ;
   u8 time_stamp[5U] ;
   u8 ucode_valid ;
} __attribute__((__packed__));
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rates {
   u8 num_rates ;
   u8 rates[12U] ;
} __attribute__((__packed__));
#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct command_block {
   unsigned int control ;
   u32 source_addr ;
   u32 dest_addr ;
   unsigned int status ;
} __attribute__((__packed__));
#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct fw_image_desc {
   unsigned long last_cb_index ;
   unsigned long current_cb_index ;
   struct command_block cb_list[64U] ;
   void *v_addr ;
   unsigned long p_addr ;
   unsigned long len ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_sys_config {
   u8 bt_coexistence ;
   u8 reserved1 ;
   u8 answer_broadcast_ssid_probe ;
   u8 accept_all_data_frames ;
   u8 accept_non_directed_frames ;
   u8 exclude_unicast_unencrypted ;
   u8 disable_unicast_decryption ;
   u8 exclude_multicast_unencrypted ;
   u8 disable_multicast_decryption ;
   u8 antenna_diversity ;
   u8 pass_crc_to_host ;
   u8 dot11g_auto_detection ;
   u8 enable_cts_to_self ;
   u8 enable_multicast_filtering ;
   u8 bt_coexist_collision_thr ;
   u8 silence_threshold ;
   u8 accept_all_mgmt_bcpr ;
   u8 accept_all_mgmt_frames ;
   u8 pass_noise_stats_to_host ;
   u8 reserved3 ;
} __attribute__((__packed__));
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_wep_key {
   u8 cmd_id ;
   u8 seq_num ;
   u8 key_index ;
   u8 key_size ;
   u8 key[16U] ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_tgi_tx_key {
   u8 key_id ;
   u8 security_type ;
   u8 station_index ;
   u8 flags ;
   u8 key[16U] ;
   __le32 tx_counter[2U] ;
} __attribute__((__packed__));
#line 838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_scan_request_ext {
   __le32 full_scan_index ;
   u8 channels_list[54U] ;
   u8 scan_type[27U] ;
   u8 reserved ;
   __le16 dwell_time[5U] ;
} __attribute__((__packed__));
#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_associate {
   u8 channel ;
   u8 auth_type : 4 ;
   u8 auth_key : 4 ;
   u8 assoc_type ;
   u8 reserved ;
   __le16 policy_support ;
   u8 preamble_length ;
   u8 ieee_mode ;
   u8 bssid[6U] ;
   __le32 assoc_tsf_msw ;
   __le32 assoc_tsf_lsw ;
   __le16 capability ;
   __le16 listen_interval ;
   __le16 beacon_interval ;
   u8 dest[6U] ;
   __le16 atim_window ;
   u8 smr ;
   u8 reserved1 ;
   __le16 reserved2 ;
} __attribute__((__packed__));
#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_supported_rates {
   u8 ieee_mode ;
   u8 num_rates ;
   u8 purpose ;
   u8 reserved ;
   u8 supported_rates[12U] ;
} __attribute__((__packed__));
#line 899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rts_threshold {
   __le16 rts_threshold ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_frag_threshold {
   __le16 frag_threshold ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_retry_limit {
   u8 short_retry_limit ;
   u8 long_retry_limit ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_channel_tx_power {
   u8 channel_number ;
   s8 tx_power ;
} __attribute__((__packed__));
#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_tx_power {
   u8 num_channels ;
   u8 ieee_mode ;
   struct ipw_channel_tx_power channels_tx_power[37U] ;
} __attribute__((__packed__));
#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_sensitivity_calib {
   __le16 beacon_rssi_raw ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_cmd {
   u32 cmd ;
   u32 status ;
   u32 status_len ;
   u32 len ;
   u32 param[0U] ;
} __attribute__((__packed__));
#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_station_entry {
   u8 mac_addr[6U] ;
   u8 reserved ;
   u8 support_mode ;
};
#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct average {
   s16 entries[8U] ;
   u8 pos ;
   u8 init ;
   s32 sum ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_ibss_seq {
   u8 mac[6U] ;
   u16 seq_num ;
   u16 frag_num ;
   unsigned long packet_time ;
   struct list_head list ;
};
#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_error_elem {
   u32 desc ;
   u32 time ;
   u32 blink1 ;
   u32 blink2 ;
   u32 link1 ;
   u32 link2 ;
   u32 data ;
};
#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_event {
   u32 event ;
   u32 time ;
   u32 data ;
} __attribute__((__packed__));
#line 1103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_fw_error {
   unsigned long jiffies ;
   u32 status ;
   u32 config ;
   u32 elem_len ;
   u32 log_len ;
   struct ipw_error_elem *elem ;
   struct ipw_event *log ;
   u8 payload[0U] ;
} __attribute__((__packed__));
#line 1113 
enum ipw_prom_filter {
    IPW_PROM_CTL_HEADER_ONLY = 1,
    IPW_PROM_MGMT_HEADER_ONLY = 2,
    IPW_PROM_DATA_HEADER_ONLY = 4,
    IPW_PROM_ALL_HEADER_ONLY = 15,
    IPW_PROM_NO_TX = 16,
    IPW_PROM_NO_RX = 32,
    IPW_PROM_NO_CTL = 64,
    IPW_PROM_NO_MGMT = 128,
    IPW_PROM_NO_DATA = 256
};
#line 1125 
struct ipw_priv;
#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_prom_priv {
   struct ipw_priv *priv ;
   struct libipw_device *ieee ;
   enum ipw_prom_filter filter ;
   int tx_packets ;
   int rx_packets ;
};
#line 1146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_rt_hdr {
   struct ieee80211_radiotap_header rt_hdr ;
   u64 rt_tsf ;
   u8 rt_flags ;
   u8 rt_rate ;
   __le16 rt_channel ;
   __le16 rt_chbitmask ;
   s8 rt_dbmsignal ;
   s8 rt_dbmnoise ;
   u8 rt_antenna ;
   u8 payload[0U] ;
} __attribute__((__packed__));
#line 1160 
struct ipw_cmd_log;
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_priv {
   struct libipw_device *ieee ;
   spinlock_t lock ;
   spinlock_t irq_lock ;
   struct mutex mutex ;
   struct pci_dev *pci_dev ;
   struct net_device *net_dev ;
   struct ipw_prom_priv *prom_priv ;
   struct net_device *prom_net_dev ;
   void *hw_base ;
   unsigned long hw_len ;
   struct fw_image_desc sram_desc ;
   struct alive_command_responce dino_alive ;
   wait_queue_head_t wait_command_queue ;
   wait_queue_head_t wait_state ;
   struct ipw_rx_queue *rxq ;
   struct clx2_tx_queue txq_cmd ;
   struct clx2_tx_queue txq[4U] ;
   u32 status ;
   u32 config ;
   u32 capability ;
   struct average average_missed_beacons ;
   s16 exp_avg_rssi ;
   s16 exp_avg_noise ;
   u32 port_type ;
   int rx_bufs_min ;
   int rx_pend_max ;
   u32 hcmd_seq ;
   u32 disassociate_threshold ;
   u32 roaming_threshold ;
   struct ipw_associate assoc_request ;
   struct libipw_network *assoc_network ;
   unsigned long ts_scan_abort ;
   struct ipw_supported_rates rates ;
   struct ipw_rates phy[3U] ;
   struct ipw_rates supp ;
   struct ipw_rates extended ;
   struct notif_link_deterioration last_link_deterioration ;
   struct ipw_cmd *hcmd ;
   wait_queue_head_t hcmd_wq ;
   u32 tsf_bcn[2U] ;
   struct notif_calibration calib ;
   u32 table0_addr ;
   u32 table0_len ;
   u32 table1_addr ;
   u32 table1_len ;
   u32 table2_addr ;
   u32 table2_len ;
   u8 essid[32U] ;
   u8 essid_len ;
   u8 nick[32U] ;
   u16 rates_mask ;
   u8 channel ;
   struct ipw_sys_config sys_config ;
   u32 power_mode ;
   u8 bssid[6U] ;
   u16 rts_threshold ;
   u8 mac_addr[6U] ;
   u8 num_stations ;
   u8 stations[32U][6U] ;
   u8 short_retry_limit ;
   u8 long_retry_limit ;
   u32 notif_missed_beacons ;
   u32 last_missed_beacons ;
   u32 last_tx_packets ;
   u32 last_rx_packets ;
   u32 last_tx_failures ;
   u32 last_rx_err ;
   u32 last_rate ;
   u32 missed_adhoc_beacons ;
   u32 missed_beacons ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 quality ;
   u8 speed_scan[100U] ;
   u8 speed_scan_pos ;
   u16 last_seq_num ;
   u16 last_frag_num ;
   unsigned long last_packet_time ;
   struct list_head ibss_mac_hash[31U] ;
   u8 eeprom[256U] ;
   u8 country[4U] ;
   int eeprom_delay ;
   struct iw_statistics wstats ;
   struct iw_public_data wireless_data ;
   int user_requested_scan ;
   u8 direct_scan_ssid[32U] ;
   u8 direct_scan_ssid_len ;
   struct delayed_work adhoc_check ;
   struct work_struct associate ;
   struct work_struct disassociate ;
   struct work_struct system_config ;
   struct work_struct rx_replenish ;
   struct delayed_work request_scan ;
   struct delayed_work request_direct_scan ;
   struct delayed_work request_passive_scan ;
   struct delayed_work scan_event ;
   struct work_struct adapter_restart ;
   struct delayed_work rf_kill ;
   struct work_struct up ;
   struct work_struct down ;
   struct delayed_work gather_stats ;
   struct work_struct abort_scan ;
   struct work_struct roam ;
   struct delayed_work scan_check ;
   struct work_struct link_up ;
   struct work_struct link_down ;
   struct tasklet_struct irq_tasklet ;
   u8 nic_type ;
   u32 led_activity_on ;
   u32 led_activity_off ;
   u32 led_association_on ;
   u32 led_association_off ;
   u32 led_ofdm_on ;
   u32 led_ofdm_off ;
   struct delayed_work led_link_on ;
   struct delayed_work led_link_off ;
   struct delayed_work led_act_off ;
   struct work_struct merge_networks ;
   struct ipw_cmd_log *cmdlog ;
   int cmdlog_len ;
   int cmdlog_pos ;
   u8 adapter ;
   s8 tx_power ;
   time64_t suspend_at ;
   time64_t suspend_time ;
   u32 pm_state[16U] ;
   struct ipw_fw_error *error ;
   u32 isr_inta ;
   struct ipw_qos_info qos_data ;
   struct work_struct qos_activate ;
   u32 indirect_dword ;
   u32 direct_dword ;
   u32 indirect_byte ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_fixed_rate {
   __le16 tx_rates ;
   __le16 reserved ;
} __attribute__((__packed__));
#line 1946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct host_cmd {
   u8 cmd ;
   u8 len ;
   u16 reserved ;
   u32 *param ;
} __attribute__((__packed__));
#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct cmdlog_host_cmd {
   u8 cmd ;
   u8 len ;
   __le16 reserved ;
   char param[124U] ;
} __attribute__((__packed__));
#line 1960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
struct ipw_cmd_log {
   unsigned long jiffies ;
   int retcode ;
   struct cmdlog_host_cmd cmd ;
};
#line 3068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
struct fw_chunk {
   __le32 address ;
   __le32 length ;
};
#line 3383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
struct ipw_fw {
   __le32 ver ;
   __le32 boot_size ;
   __le32 ucode_size ;
   __le32 fw_size ;
   u8 data[0U] ;
};
#line 4010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
struct ipw_status_code {
   u16 status ;
   char *reason ;
};
#line 5472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
struct ipw_network_match {
   struct libipw_network *network ;
   struct ipw_supported_rates rates ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2534 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2534 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2535 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2535 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2551 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2551 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2555 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2555 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2556 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2557 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2556 __anonCompField_media_link_90 ;
   union __anonunion_2557 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2559 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2558 {
   struct __anonstruct_dev_2559 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2558 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2573 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2574 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2572 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2573 i2c ;
   struct __anonstruct_custom_2574 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2572 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3475 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3475 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_3 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_ipw_isr_12 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_ipw_net_set_mac_address_13 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_ipw_driver_14 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/byteorder/generic.h"
__inline static void le32_add_cpu(__le32 *var, u32 val)
{
  #line 151 
  *var += val;
  #line 152 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 459 
#line 459 
unsigned long simple_strtoul(char *, char **, unsigned int);
#line 460 
#line 460 
long simple_strtol(char *, char **, unsigned int);
#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 487 
#line 487 
int sscanf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_13 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_15 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_17 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 59 
#line 59 
void *__memmove(void *, void *, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 59 
#line 59 
char *strchr(char *, int);
#line 88 
#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static size_t cif_strlen(char *s);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 89 
__kernel_size_t strnlen(char *, __kernel_size_t);
#line 186 
#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_lock_irq_lock_of_ipw_priv(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irq_lock_of_ipw_priv(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 753  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_irq_lock_of_ipw_priv(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_ipw_priv(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_libipw_device(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_ipw_rx_queue(spinlock_t *lock, unsigned long flags);
#line 26 
#line 788 
static void cif_mutex_lock_mutex_of_ipw_priv(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 744 
static void cif___ldv_spin_lock_irq_lock_of_ipw_priv(spinlock_t *lock);
#line 35 
#line 762 
static void cif___ldv_spin_lock_lock_of_ipw_priv(spinlock_t *lock);
#line 35 
#line 810 
static void cif___ldv_spin_lock_lock_of_libipw_device(spinlock_t *lock);
#line 35 
#line 835 
static void cif___ldv_spin_lock_lock_of_ipw_rx_queue(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23 
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 25 
#line 25 
size_t ldv_strlen(char *s);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 200 
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 795  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_mutex_unlock_mutex_of_ipw_priv(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 291 
#line 291 
unsigned int jiffies_to_msecs(unsigned long);
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_divns(ktime_t kt, s64 div)
{
  {
    #line 171 
    int __ret_warn_on = div < 0LL;
    #line 171 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 172 
      ldv_inline_asm();
      #line 173 
      ldv_inline_asm();
    }
    #line 171 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 172 
  return kt / div;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 69 
ktime_t ktime_get_coarse_with_offset(enum tk_offsets);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_coarse_boottime(void)
{
  #line 100 
  return ktime_get_coarse_with_offset((enum tk_offsets)TK_OFFS_BOOT);
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static time64_t ktime_get_boottime_seconds(void)
{
  #line 199 
  return ktime_divns(ktime_get_coarse_boottime(),1000000000LL);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 211 
#line 211 
unsigned long round_jiffies_relative(unsigned long);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 385 
#line 385 
extern struct workqueue_struct *system_wq;
#line 450 
#line 450 
bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 465 
#line 465 
bool cancel_delayed_work(struct delayed_work *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
__inline static bool mod_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 524 
  return mod_delayed_work_on(8192,wq,dwork,delay);
}

#line 554 
#line 802  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 771  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void *addr)
{
  #line 57 
  unsigned char ret;
  #line 58 
  ldv_inline_asm();
  #line 57 
  return ret;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val, void *addr)
{
  #line 67 
  ldv_inline_asm();
  #line 68 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val, void *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 209 
#line 209 
void iounmap(void *);
#line 217 
#line 217 
void memcpy_toio(void *, void *, size_t);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 416  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 423  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 430  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 451  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 276 
int sysfs_create_group(struct kobject *, struct attribute_group *);
#line 284 
#line 284 
void sysfs_remove_group(struct kobject *, struct attribute_group *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 436 
int driver_create_file(struct device_driver *, struct driver_attribute *);
#line 438 
#line 438 
void driver_remove_file(struct device_driver *, struct driver_attribute *);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1107 
#line 1107 
struct sk_buff *skb_copy(struct sk_buff *, gfp_t);
#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  #line 2513 
  skb->mac_header = (unsigned short)(skb->data - skb->head);
  #line 2514 
  return;
}

#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3660 
#line 3660 
int netif_rx(struct sk_buff *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4131 
#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
#line 441 
void wireless_send_event(struct net_device *, unsigned int, union iwreq_data *, char *);
#line 454 
#line 454 
int iw_handler_set_spy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 457 
#line 457 
int iw_handler_get_spy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 460 
#line 460 
int iw_handler_set_thrspy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 463 
#line 463 
int iw_handler_get_thrspy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211-wext.h"
#line 20 
int cfg80211_wext_giwname(struct net_device *, struct iw_request_info *, char *, char *);
#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1234 
#line 1234 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dmapool.h"
#line 21 
struct dma_pool *dma_pool_create(char *, struct device *, size_t, size_t, size_t);
#line 24 
#line 24 
void dma_pool_destroy(struct dma_pool *);
#line 26 
#line 26 
void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);
#line 28 
#line 28 
void dma_pool_free(struct dma_pool *, void *, dma_addr_t);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  #line 20 
  return dma_alloc_coherent(& hwdev->dev,size,dma_handle,2592U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  #line 34 
  dma_free_coherent(& hwdev->dev,size,vaddr,dma_handle);
  #line 35 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 45 
int eth_mac_addr(struct net_device *, void *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 4738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
  #line 4740 
  wiphy->dev.parent = dev;
  #line 4741 
  return;
}

#line 4807 
#line 4807 
int wiphy_register(struct wiphy *);
#line 4818 
#line 4818 
void wiphy_unregister(struct wiphy *);
#line 6082 
#line 6082 
void wiphy_rfkill_set_hw_state(struct wiphy *, bool);
#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
__inline static void *libipw_priv(struct net_device *dev)
{
  #line 843 
  return (void *)(& ((struct libipw_device *)netdev_priv(dev))->priv);
}

#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
__inline static int libipw_is_valid_mode(struct libipw_device *ieee, int mode)
{
  #line 855 
  if (((mode & 1) != 0 && (ieee->modulation & 2) != 0) && (ieee->freq_band & 2) != 0) 
    #line 858 
    return 1;
  #line 860 
  if (((mode & 4) != 0 && (ieee->modulation & 2) != 0) && (ieee->freq_band & 1) != 0) 
    #line 863 
    return 1;
  #line 865 
  if (((mode & 2) != 0 && (ieee->modulation & 1) != 0) && (ieee->freq_band & 1) != 0) 
    #line 868 
    return 1;
  #line 870 
  return 0;
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
__inline static int libipw_get_hdrlen(u16 fc)
{
  #line 875 
  int hdrlen = 24;
  #line 876 
  u16 stype = (unsigned short)((unsigned int)fc & 240U);
  #line 878 
  switch ((int)fc & 12) {
    #line 879 
    case 8: 
            #line 879 
    ;
    #line 880 
    if (((int)fc & 512) != 0 && ((int)fc & 256) != 0) 
                                                      #line 881 
                                                      hdrlen = 30;
    #line 882 
    if (((int)stype & 128) != 0) 
                                 #line 883 
                                 hdrlen += 2;
    #line 884 
    break;
    #line 885 
    case 4: 
            #line 885 
    ;
    #line 886 
    switch ((int)fc & 240) {
      #line 887 
      case 192: 
                #line 887 
      ;
      #line 888 
      case 208: 
                #line 888 
      ;
      #line 889 
      hdrlen = 10;
      #line 890 
      break;
      #line 891 
      default: 
               #line 891 
      ;
      #line 892 
      hdrlen = 16;
      #line 893 
      break;
    }
    #line 895 
    break;
  }
  #line 898 
  return hdrlen;
}

#line 945 
#line 945 
void free_libipw(struct net_device *, int);
#line 946 
#line 946 
struct net_device *alloc_libipw(int, int);
#line 948 
#line 948 
void libipw_networks_age(struct libipw_device *, unsigned long);
#line 953 
#line 953 
netdev_tx_t libipw_xmit(struct sk_buff *, struct net_device *);
#line 954 
#line 954 
void libipw_txb_free(struct libipw_txb *);
#line 959 
#line 959 
int libipw_rx(struct libipw_device *, struct sk_buff *, struct libipw_rx_stats *);
#line 962 
#line 962 
void libipw_rx_mgt(struct libipw_device *, struct libipw_hdr_4addr *, struct libipw_rx_stats *);
#line 966 
#line 966 
struct libipw_geo *libipw_get_geo(struct libipw_device *);
#line 967 
#line 967 
void libipw_set_geo(struct libipw_device *, struct libipw_geo *);
#line 969 
#line 969 
int libipw_is_valid_channel(struct libipw_device *, u8);
#line 970 
#line 970 
int libipw_channel_to_index(struct libipw_device *, u8);
#line 971 
#line 971 
u8 libipw_freq_to_channel(struct libipw_device *, u32);
#line 978 
#line 978 
int libipw_wx_get_scan(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 980 
#line 980 
int libipw_wx_set_encode(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 983 
#line 983 
int libipw_wx_get_encode(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 986 
#line 986 
int libipw_wx_set_encodeext(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 989 
#line 989 
int libipw_wx_get_encodeext(struct libipw_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/libipw.h"
__inline static int libipw_get_scans(struct libipw_device *ieee)
{
  #line 1000 
  return ieee->scans;
}

#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.h"
__inline static void ipw_set_scan_type(struct ipw_scan_request_ext *scan, u8 index, u8 scan_type)
{
  #line 857 
  if (((unsigned int)index & 1U) != 0U) 
                                        #line 858 
                                        scan->scan_type[(int)((unsigned int)index / 2U)] = (unsigned char)(((int)scan->scan_type[(int)((unsigned int)index / 2U)] & -16) | ((int)scan_type & 15)); else 
                                                                    #line 861 
                                                                    scan->scan_type[(int)((unsigned int)index / 2U)] = (unsigned char)(((int)scan->scan_type[(int)((unsigned int)index / 2U)] & 15) | ((int)scan_type << 4));
  #line 864 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ctype.h"
#line 19 
extern unsigned char _ctype[];
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw.h"
static u32 ipw_cipher_suites[4U] = {1027073U, 1027077U, 1027074U, 1027076U};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int cmdlog = 0;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int debug = 0;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int default_channel = 0;
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int network_mode = 0;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u32 ipw_debug_level;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int associate;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int auto_create = 1;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int led_support = 1;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int disable = 0;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int bt_coexist = 0;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int hwcrypto = 0;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int roaming = 1;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static char ipw_modes[4U] = {(char)97, (char)98, (char)103, (char)63};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int antenna = 0;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int rtap_iface = 0;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct ieee80211_rate ipw2200_rates[12U] = {{.bitrate = (unsigned short)10U}, {.flags = 1U, .bitrate = (unsigned short)20U}, {.flags = 1U, .bitrate = (unsigned short)55U}, {.flags = 1U, .bitrate = (unsigned short)110U}, {.bitrate = (unsigned short)60U}, {.bitrate = (unsigned short)90U}, {.bitrate = (unsigned short)120U}, {.bitrate = (unsigned short)180U}, {.bitrate = (unsigned short)240U}, {.bitrate = (unsigned short)360U}, {.bitrate = (unsigned short)480U}, {.bitrate = (unsigned short)540U}};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int qos_enable = 0;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int qos_burst_enable = 0;
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int burst_duration_CCK = 0;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int burst_duration_OFDM = 0;
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct libipw_qos_parameters def_qos_parameters_OFDM = {.cw_min = {(unsigned short)15U, (unsigned short)15U, (unsigned short)7U, (unsigned short)3U}, .cw_max = {(unsigned short)1023U, (unsigned short)1023U, (unsigned short)15U, (unsigned short)7U}, .aifs = {(unsigned char)1U, (unsigned char)5U}, .tx_op_limit = {[2] = (unsigned short)3008U, (unsigned short)1504U}};
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct libipw_qos_parameters def_qos_parameters_CCK = {.cw_min = {(unsigned short)31U, (unsigned short)31U, (unsigned short)15U, (unsigned short)7U}, .cw_max = {(unsigned short)1023U, (unsigned short)1023U, (unsigned short)31U, (unsigned short)15U}, .aifs = {(unsigned char)1U, (unsigned char)5U}, .tx_op_limit = {[2] = (unsigned short)6016U, (unsigned short)3264U}};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct libipw_qos_parameters def_parameters_OFDM = {.cw_min = {(unsigned short)15U, (unsigned short)15U, (unsigned short)15U, (unsigned short)15U}, .cw_max = {(unsigned short)1023U, (unsigned short)1023U, (unsigned short)1023U, (unsigned short)1023U}};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct libipw_qos_parameters def_parameters_CCK = {.cw_min = {(unsigned short)31U, (unsigned short)31U, (unsigned short)31U, (unsigned short)31U}, .cw_max = {(unsigned short)1023U, (unsigned short)1023U, (unsigned short)1023U, (unsigned short)1023U}};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u8 qos_oui[3U] = {[1] = (unsigned char)80U, (unsigned char)242U};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int from_priority_to_tx_queue[8U] = {1, 2, 2, 1, 3, 3, 4, 4};
#line 187 
#line 7094 
static u32 ipw_qos_get_burst_duration(struct ipw_priv *priv);
#line 189 
#line 7252 
static int ipw_send_qos_params_command(struct ipw_priv *priv, struct libipw_qos_parameters *qos_param);
#line 191 
#line 7259 
static int ipw_send_qos_info_command(struct ipw_priv *priv, struct libipw_qos_information_element *qos_param);
#line 195 
#line 10002 
static struct iw_statistics *ipw_get_wireless_stats(struct net_device *dev);
#line 196 
#line 2983 
static void ipw_remove_current_network(struct ipw_priv *priv);
#line 197 
#line 8246 
static void ipw_rx(struct ipw_priv *priv);
#line 198 
#line 5005 
static int ipw_queue_tx_reclaim(struct ipw_priv *priv, struct clx2_tx_queue *txq, int qindex);
#line 200 
#line 4933 
static int ipw_queue_reset(struct ipw_priv *priv);
#line 202 
#line 5035 
static int ipw_queue_tx_hcmd(struct ipw_priv *priv, int hcmd, void *buf, int len, int sync);
#line 205 
#line 3867 
static void ipw_tx_queue_free(struct ipw_priv *priv);
#line 207 
#line 5243 
static struct ipw_rx_queue *ipw_rx_queue_alloc(struct ipw_priv *priv);
#line 208 
#line 5225 
static void ipw_rx_queue_free(struct ipw_priv *priv, struct ipw_rx_queue *rxq);
#line 209 
#line 5176 
static void ipw_rx_queue_replenish(void *data);
#line 210 
#line 11159 
static int ipw_up(struct ipw_priv *priv);
#line 211 
#line 11238 
static void ipw_bg_up(struct work_struct *work);
#line 212 
#line 11283 
static void ipw_down(struct ipw_priv *priv);
#line 213 
#line 11309 
static void ipw_bg_down(struct work_struct *work);
#line 214 
#line 10793 
static int ipw_config(struct ipw_priv *priv);
#line 215 
#line 10763 
static int init_supported_rates(struct ipw_priv *priv, struct ipw_supported_rates *rates);
#line 217 
#line 5985 
static void ipw_set_hwcrypto_keys(struct ipw_priv *priv);
#line 218 
#line 5912 
static void ipw_send_wep_keys(struct ipw_priv *priv, int type);
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int snprint_line(char *buf, size_t count, u8 *data, u32 len, u32 ofs)
{
  #line 223 
  int out;
  #line 223 
  int i;
  #line 223 
  int j;
  #line 223 
  int l;
  #line 224 
  char c;
  #line 226 
  out = snprintf(buf,count,(char *)"%08X",ofs);
  #line 228 
  l = 0;
  #line 228 
  i = 0;
  #line 228 
  while (i <= 1) {
    {
      #line 229 
      out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
               (char *)" ") + out;
      #line 230 
      j = 0;
      #line 230 
      while (j <= 7 && (unsigned int)l < len) {
        #line 232 
        out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)"%02X ",(int)*(data + (unsigned long)(i * 8 + j))) + out;
        #line 230 
        j ++;
        #line 230 
        l ++;
      }
      #line 233 
      while (j <= 7) {
        #line 234 
        out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)"   ") + out;
        #line 233 
        j ++;
      }
    }
    #line 228 
    i ++;
  }
  #line 237 
  out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)" ") + out;
  #line 238 
  l = 0;
  #line 238 
  i = 0;
  #line 238 
  while (i <= 1) {
    {
      #line 239 
      out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)" ") + out;
      #line 240 
      j = 0;
      #line 240 
      while (j <= 7 && (unsigned int)l < len) {
        {
          #line 241 
          c = (char)*(data + (unsigned long)(i * 8 + j));
          #line 242 
          if ((int)c < 0 || ((int)_ctype[(int)((unsigned char)c)] & 151) == 0) 
            #line 243 
            c = (char)46;
          #line 245 
          out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)"%c",(int)c) + out;
        }
        #line 240 
        j ++;
        #line 240 
        l ++;
      }
      #line 248 
      while (j <= 7) {
        #line 249 
        out = snprintf(buf + (unsigned long)out,count - (unsigned long)out,
                 (char *)" ") + out;
        #line 248 
        j ++;
      }
    }
    #line 238 
    i ++;
  }
  #line 252 
  return out;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void printk_buf(int level, u8 *data, u32 len)
{
  #line 257 
  char line[81U];
  #line 258 
  u32 ofs = 0U;
  #line 259 
  if ((ipw_debug_level & (unsigned int)level) == 0U) 
                                                     #line 260 
                                                     return;
  #line 262 
  while (len != 0U) {
    #line 267 
    u32 tmp_1;
    #line 264 
    u32 __UNIQUE_ID___x453;
    #line 264 
    u32 tmp;
    #line 267 
    u32 __UNIQUE_ID___x455;
    #line 263 
    ;
    {
      #line 264 
      __UNIQUE_ID___x453 = len;
      #line 264 
      unsigned int __UNIQUE_ID___y454 = 16U;
      #line 264 
      if (__UNIQUE_ID___x453 < __UNIQUE_ID___y454) 
                                                   #line 264 
                                                   tmp = __UNIQUE_ID___x453; else 
                                                                    #line 264 
                                                                    tmp = __UNIQUE_ID___y454;
      }
    #line 263 
    ;
    #line 263 
    snprint_line((char *)(& line),81UL,data + (unsigned long)ofs,tmp,ofs);
    #line 265 
    printk((char *)"\001",(char *)(& line));
    #line 266 
    ofs += 16U;
    {
      #line 267 
      __UNIQUE_ID___x455 = len;
      #line 267 
      unsigned int __UNIQUE_ID___y456 = 16U;
      #line 267 
      if (__UNIQUE_ID___x455 < __UNIQUE_ID___y456) 
                                                   #line 267 
                                                   tmp_1 = __UNIQUE_ID___x455; else 
                                                                    #line 267 
                                                                    tmp_1 = __UNIQUE_ID___y456;
      }
    #line 267 
    len -= tmp_1;
  }
  #line 270 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int snprintk_buf(u8 *output, size_t size, u8 *data, size_t len)
{
  #line 273 
  size_t out = size;
  #line 274 
  u32 ofs = 0U;
  #line 275 
  int total = 0;
  #line 277 
  while (size != 0UL && len != 0UL) {
    #line 279 
    unsigned long tmp;
    #line 284 
    unsigned long __UNIQUE_ID___x459;
    #line 284 
    unsigned long tmp_2;
    #line 279 
    unsigned long __UNIQUE_ID___x457;
    #line 278 
    ;
    {
      #line 279 
      __UNIQUE_ID___x457 = len;
      #line 279 
      unsigned long __UNIQUE_ID___y458 = 16UL;
      #line 279 
      if (__UNIQUE_ID___x457 < __UNIQUE_ID___y458) 
                                                   #line 279 
                                                   tmp = __UNIQUE_ID___x457; else 
                                                                    #line 279 
                                                                    tmp = __UNIQUE_ID___y458;
      }
    #line 278 
    ;
    #line 278 
    ;
    #line 278 
    ;
    #line 278 
    out = (unsigned long)snprint_line((char *)output,size,data + (unsigned long)ofs,
                     (unsigned int)tmp,ofs);
    #line 281 
    ofs += 16U;
    #line 282 
    output += out;
    #line 283 
    size -= out;
    {
      #line 284 
      __UNIQUE_ID___x459 = len;
      #line 284 
      unsigned long __UNIQUE_ID___y460 = 16UL;
      #line 284 
      if (__UNIQUE_ID___x459 < __UNIQUE_ID___y460) 
                                                   #line 284 
                                                   tmp_2 = __UNIQUE_ID___x459; else 
                                                                    #line 284 
                                                                    tmp_2 = __UNIQUE_ID___y460;
      }
    #line 284 
    len -= tmp_2;
    #line 285 
    total = (int)(out + (size_t)total);
  }
  #line 287 
  return total;
}

#line 291 
#line 464 
static u32 _ipw_read_reg32(struct ipw_priv *priv, u32 reg);
#line 295 
#line 454 
static u8 _ipw_read_reg8(struct ipw_priv *priv, u32 reg);
#line 299 
#line 432 
static void _ipw_write_reg8(struct ipw_priv *priv, u32 reg, u8 value);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_write_reg8(struct ipw_priv *a, u32 b, u8 c)
{
  #line 302 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 302 
    int tmp_0;
    #line 302 
    ;
    #line 302 
    ;
    #line 302 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 302 
                                                             tmp_0 = 73; else 
                                                                    #line 302 
                                                                    tmp_0 = 85;
    #line 302 
    printk((char *)"\001",tmp_0,(char *)"ipw_write_reg8",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",302,b,(unsigned int)c);
  }
  #line 304 
  _ipw_write_reg8(a,b,(unsigned char)((int)c));
  #line 305 
  return;
}

#line 308 
#line 443 
static void _ipw_write_reg16(struct ipw_priv *priv, u32 reg, u16 value);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_write_reg16(struct ipw_priv *a, u32 b, u16 c)
{
  #line 311 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 311 
    int tmp_0;
    #line 311 
    ;
    #line 311 
    ;
    #line 311 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 311 
                                                             tmp_0 = 73; else 
                                                                    #line 311 
                                                                    tmp_0 = 85;
    #line 311 
    printk((char *)"\001",tmp_0,(char *)"ipw_write_reg16",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",311,b,(unsigned int)c);
  }
  #line 313 
  _ipw_write_reg16(a,b,(unsigned short)((int)c));
  #line 314 
  return;
}

#line 317 
#line 424 
static void _ipw_write_reg32(struct ipw_priv *priv, u32 reg, u32 value);
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_write_reg32(struct ipw_priv *a, u32 b, u32 c)
{
  #line 320 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 320 
    int tmp_0;
    #line 320 
    ;
    #line 320 
    ;
    #line 320 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 320 
                                                             tmp_0 = 73; else 
                                                                    #line 320 
                                                                    tmp_0 = 85;
    #line 320 
    printk((char *)"\001",tmp_0,(char *)"ipw_write_reg32",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",320,b,c);
  }
  #line 322 
  _ipw_write_reg32(a,b,c);
  #line 323 
  return;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void _ipw_write8(struct ipw_priv *ipw, unsigned long ofs, u8 val)
{
  #line 329 
  writeb((unsigned char)((int)val),ipw->hw_base + ofs);
  #line 330 
  return;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void _ipw_write16(struct ipw_priv *ipw, unsigned long ofs, u16 val)
{
  #line 343 
  writew((unsigned short)((int)val),ipw->hw_base + ofs);
  #line 344 
  return;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void _ipw_write32(struct ipw_priv *ipw, unsigned long ofs, u32 val)
{
  #line 357 
  writel(val,ipw->hw_base + ofs);
  #line 358 
  return;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static u8 _ipw_read8(struct ipw_priv *ipw, unsigned long ofs)
{
  #line 370 
  return readb(ipw->hw_base + ofs);
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static u32 _ipw_read32(struct ipw_priv *ipw, unsigned long ofs)
{
  #line 396 
  return readl(ipw->hw_base + ofs);
}

#line 406 
#line 478 
static void _ipw_read_indirect(struct ipw_priv *priv, u32 addr, u8 *buf, int num);
#line 415 
#line 515 
static void _ipw_write_indirect(struct ipw_priv *priv, u32 addr, u8 *buf, int num);
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void _ipw_write_reg32(struct ipw_priv *priv, u32 reg, u32 value)
{
  #line 426 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 426 
    int tmp_0;
    #line 426 
    ;
    #line 426 
    ;
    #line 426 
    ;
    #line 426 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 426 
                                                             tmp_0 = 73; else 
                                                                    #line 426 
                                                                    tmp_0 = 85;
    #line 426 
    printk((char *)"\001",tmp_0,(char *)"_ipw_write_reg32",priv,reg,value);
  }
  #line 427 
  _ipw_write32(priv,16UL,reg);
  #line 428 
  _ipw_write32(priv,20UL,value);
  #line 429 
  return;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void _ipw_write_reg8(struct ipw_priv *priv, u32 reg, u8 value)
{
  #line 434 
  u32 aligned_addr = reg & 4294967292U;
  #line 435 
  u32 dif_len = reg - aligned_addr;
  #line 437 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 437 
    int tmp_0;
    #line 437 
    ;
    #line 437 
    ;
    #line 437 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 437 
                                                             tmp_0 = 73; else 
                                                                    #line 437 
                                                                    tmp_0 = 85;
    #line 437 
    printk((char *)"\001",tmp_0,(char *)"_ipw_write_reg8",reg,(int)value);
  }
  #line 438 
  _ipw_write32(priv,16UL,aligned_addr);
  #line 439 
  _ipw_write8(priv,(unsigned long)(dif_len + 20U),(unsigned char)((int)value));
  #line 440 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void _ipw_write_reg16(struct ipw_priv *priv, u32 reg, u16 value)
{
  #line 445 
  u32 aligned_addr = reg & 4294967292U;
  #line 446 
  u32 dif_len = (reg - aligned_addr) & 4294967294U;
  #line 448 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 448 
    int tmp_0;
    #line 448 
    ;
    #line 448 
    ;
    #line 448 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 448 
                                                             tmp_0 = 73; else 
                                                                    #line 448 
                                                                    tmp_0 = 85;
    #line 448 
    printk((char *)"\001",tmp_0,(char *)"_ipw_write_reg16",reg,(int)value);
  }
  #line 449 
  _ipw_write32(priv,16UL,aligned_addr);
  #line 450 
  _ipw_write16(priv,(unsigned long)(dif_len + 20U),(unsigned short)((int)value));
  #line 451 
  return;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u8 _ipw_read_reg8(struct ipw_priv *priv, u32 reg)
{
  #line 456 
  u32 word;
  #line 457 
  _ipw_write32(priv,16UL,reg & 4294967292U);
  #line 458 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 458 
    int tmp_0;
    #line 458 
    ;
    #line 458 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 458 
                                                             tmp_0 = 73; else 
                                                                    #line 458 
                                                                    tmp_0 = 85;
    #line 458 
    printk((char *)"\001",tmp_0,(char *)"_ipw_read_reg8",reg);
  }
  #line 459 
  word = _ipw_read32(priv,20UL);
  #line 460 
  return (unsigned char)(word >> (reg & 3U) * 8U);
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u32 _ipw_read_reg32(struct ipw_priv *priv, u32 reg)
{
  #line 466 
  u32 value;
  #line 468 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 468 
    int tmp_0;
    #line 468 
    ;
    #line 468 
    ;
    #line 468 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 468 
                                                             tmp_0 = 73; else 
                                                                    #line 468 
                                                                    tmp_0 = 85;
    #line 468 
    printk((char *)"\001",tmp_0,(char *)"_ipw_read_reg32",priv,reg);
  }
  #line 470 
  _ipw_write32(priv,16UL,reg);
  #line 471 
  value = _ipw_read32(priv,20UL);
  #line 472 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 472 
    int tmp_2;
    #line 472 
    ;
    #line 472 
    ;
    #line 472 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 472 
                                                             tmp_2 = 73; else 
                                                                    #line 472 
                                                                    tmp_2 = 85;
    #line 472 
    printk((char *)"\001",tmp_2,(char *)"_ipw_read_reg32",reg,value);
  }
  #line 473 
  return value;
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void _ipw_read_indirect(struct ipw_priv *priv, u32 addr, u8 *buf, int num)
{
  #line 483 
  u32 i;
  #line 481 
  u32 aligned_addr = addr & 4294967292U;
  #line 482 
  u32 dif_len = addr - aligned_addr;
  #line 485 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 485 
    int tmp_0;
    #line 485 
    ;
    #line 485 
    ;
    #line 485 
    ;
    #line 485 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 485 
                                                             tmp_0 = 73; else 
                                                                    #line 485 
                                                                    tmp_0 = 85;
    #line 485 
    printk((char *)"\001",tmp_0,(char *)"_ipw_read_indirect",addr,buf,num);
  }
  #line 487 
  if (num <= 0) 
                #line 488 
                return;
  #line 492 
  if ((long)(dif_len != 0U) != 0L) {
    #line 493 
    _ipw_write32(priv,16UL,aligned_addr);
    #line 495 
    i = dif_len;
    #line 495 
    while (i <= 3U && num > 0) {
      #line 496 
      u8 *tmp_1;
      #line 496 
      tmp_1 = buf;
      #line 496 
      buf ++;
      #line 496 
      *tmp_1 = _ipw_read8(priv,(unsigned long)(i + 20U));
      #line 495 
      i ++;
      #line 495 
      num --;
    }
    #line 497 
    aligned_addr += 4U;
  }
  #line 501 
  _ipw_write32(priv,24UL,aligned_addr);
  #line 502 
  while (num > 3) {
    #line 503 
    *((u32 *)buf) = _ipw_read32(priv,28UL);
    #line 502 
    buf += 4U;
    #line 502 
    aligned_addr += 4U;
    #line 502 
    num += -4;
  }
  #line 506 
  if ((long)(num != 0) != 0L) {
    #line 507 
    _ipw_write32(priv,16UL,aligned_addr);
    #line 508 
    i = 0U;
    #line 508 
    while (num > 0) {
      #line 509 
      u8 *tmp_2;
      #line 509 
      tmp_2 = buf;
      #line 509 
      buf ++;
      #line 509 
      if ((ipw_debug_level & 134217728U) != 0U) {
        #line 509 
        int tmp_4;
        #line 509 
        ;
        #line 509 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 509 
                                                                 tmp_4 = 73; else 
                                                                    #line 509 
                                                                    tmp_4 = 85;
        #line 509 
        printk((char *)"\001",tmp_4,(char *)"_ipw_read_indirect",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",509,i + 20U);
      }
      #line 509 
      *tmp_2 = _ipw_read8(priv,(unsigned long)(i + 20U));
      #line 508 
      i ++;
      #line 508 
      num --;
    }
  }
  #line 512 
  return;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void _ipw_write_indirect(struct ipw_priv *priv, u32 addr, u8 *buf, int num)
{
  #line 520 
  u32 i;
  #line 518 
  u32 aligned_addr = addr & 4294967292U;
  #line 519 
  u32 dif_len = addr - aligned_addr;
  #line 522 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 522 
    int tmp_0;
    #line 522 
    ;
    #line 522 
    ;
    #line 522 
    ;
    #line 522 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 522 
                                                             tmp_0 = 73; else 
                                                                    #line 522 
                                                                    tmp_0 = 85;
    #line 522 
    printk((char *)"\001",tmp_0,(char *)"_ipw_write_indirect",addr,buf,num);
  }
  #line 524 
  if (num <= 0) 
                #line 525 
                return;
  #line 529 
  if ((long)(dif_len != 0U) != 0L) {
    #line 530 
    _ipw_write32(priv,16UL,aligned_addr);
    #line 532 
    i = dif_len;
    #line 532 
    while (i <= 3U && num > 0) {
      #line 533 
      _ipw_write8(priv,(unsigned long)(i + 20U),(unsigned char)((int)*buf));
      #line 532 
      i ++;
      #line 532 
      num --;
      #line 532 
      buf ++;
    }
    #line 534 
    aligned_addr += 4U;
  }
  #line 538 
  _ipw_write32(priv,24UL,aligned_addr);
  #line 539 
  while (num > 3) {
    #line 540 
    _ipw_write32(priv,28UL,*((u32 *)buf));
    #line 539 
    buf += 4U;
    #line 539 
    aligned_addr += 4U;
    #line 539 
    num += -4;
  }
  #line 543 
  if ((long)(num != 0) != 0L) {
    #line 544 
    _ipw_write32(priv,16UL,aligned_addr);
    #line 545 
    i = 0U;
    #line 545 
    while (num > 0) {
      #line 546 
      _ipw_write8(priv,(unsigned long)(i + 20U),(unsigned char)((int)*buf));
      #line 545 
      i ++;
      #line 545 
      num --;
      #line 545 
      buf ++;
    }
  }
  #line 548 
  return;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_write_direct(struct ipw_priv *priv, u32 addr, void *buf, int num)
{
  #line 555 
  memcpy_toio(priv->hw_base + (unsigned long)addr,buf,(unsigned long)num);
  #line 556 
  return;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_set_bit(struct ipw_priv *priv, u32 reg, u32 mask)
{
  #line 561 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 561 
    u32 tmp_2;
    #line 561 
    int tmp_4;
    #line 561 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 561 
      int tmp_0;
      #line 561 
      ;
      #line 561 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 561 
                                                               tmp_0 = 73; else 
                                                                    #line 561 
                                                                    tmp_0 = 85;
      #line 561 
      printk((char *)"\001",tmp_0,(char *)"ipw_set_bit",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",561,reg);
    }
    #line 561 
    tmp_2 = _ipw_read32(priv,(unsigned long)reg);
    #line 561 
    ;
    #line 561 
    ;
    #line 561 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 561 
                                                             tmp_4 = 73; else 
                                                                    #line 561 
                                                                    tmp_4 = 85;
    #line 561 
    printk((char *)"\001",tmp_4,(char *)"ipw_set_bit",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",561,reg,tmp_2 | mask);
  }
  #line 561 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 561 
    int tmp_6;
    #line 561 
    ;
    #line 561 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 561 
                                                             tmp_6 = 73; else 
                                                                    #line 561 
                                                                    tmp_6 = 85;
    #line 561 
    printk((char *)"\001",tmp_6,(char *)"ipw_set_bit",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",561,reg);
  }
  #line 561 
  ;
  #line 561 
  ;
  #line 561 
  ;
  #line 561 
  _ipw_write32(priv,(unsigned long)reg,_ipw_read32(priv,(unsigned long)reg) | mask);
  #line 563 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_clear_bit(struct ipw_priv *priv, u32 reg, u32 mask)
{
  #line 567 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 567 
    u32 tmp_2;
    #line 567 
    int tmp_4;
    #line 567 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 567 
      int tmp_0;
      #line 567 
      ;
      #line 567 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 567 
                                                               tmp_0 = 73; else 
                                                                    #line 567 
                                                                    tmp_0 = 85;
      #line 567 
      printk((char *)"\001",tmp_0,(char *)"ipw_clear_bit",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",567,reg);
    }
    #line 567 
    tmp_2 = _ipw_read32(priv,(unsigned long)reg);
    #line 567 
    ;
    #line 567 
    ;
    #line 567 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 567 
                                                             tmp_4 = 73; else 
                                                                    #line 567 
                                                                    tmp_4 = 85;
    #line 567 
    printk((char *)"\001",tmp_4,(char *)"ipw_clear_bit",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",567,reg,tmp_2 & ~ mask);
  }
  #line 567 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 567 
    int tmp_6;
    #line 567 
    ;
    #line 567 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 567 
                                                             tmp_6 = 73; else 
                                                                    #line 567 
                                                                    tmp_6 = 85;
    #line 567 
    printk((char *)"\001",tmp_6,(char *)"ipw_clear_bit",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",567,reg);
  }
  #line 567 
  ;
  #line 567 
  ;
  #line 567 
  ;
  #line 567 
  _ipw_write32(priv,(unsigned long)reg,_ipw_read32(priv,(unsigned long)reg) & ~ mask);
  #line 569 
  return;
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void __ipw_enable_interrupts(struct ipw_priv *priv)
{
  #line 572 
  if ((priv->status & 2U) != 0U) 
                                 #line 573 
                                 return;
  #line 574 
  priv->status |= 2U;
  #line 575 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 575 
    int tmp_0;
    #line 575 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 575 
                                                             tmp_0 = 73; else 
                                                                    #line 575 
                                                                    tmp_0 = 85;
    #line 575 
    printk((char *)"\001",tmp_0,(char *)"__ipw_enable_interrupts",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",575,12U,3308386354U);
  }
  #line 575 
  _ipw_write32(priv,12UL,3308386354U);
  #line 577 
  return;
}

#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void __ipw_disable_interrupts(struct ipw_priv *priv)
{
  #line 580 
  if ((priv->status & 2U) == 0U) 
                                 #line 581 
                                 return;
  #line 582 
  priv->status &= 4294967293U;
  #line 583 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 583 
    int tmp_0;
    #line 583 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 583 
                                                             tmp_0 = 73; else 
                                                                    #line 583 
                                                                    tmp_0 = 85;
    #line 583 
    printk((char *)"\001",tmp_0,(char *)"__ipw_disable_interrupts",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",583,12U,986580941U);
  }
  #line 583 
  _ipw_write32(priv,12UL,986580941U);
  #line 585 
  return;
}

#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_enable_interrupts(struct ipw_priv *priv)
{
  #line 588 
  unsigned long flags;
  #line 590 
  cif___ldv_spin_lock_irq_lock_of_ipw_priv(& priv->irq_lock);
  #line 591 
  __ipw_enable_interrupts(priv);
  #line 592 
  cif_spin_unlock_irqrestore_irq_lock_of_ipw_priv(& priv->irq_lock,flags);
  #line 593 
  return;
}

#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_disable_interrupts(struct ipw_priv *priv)
{
  #line 597 
  unsigned long flags;
  #line 599 
  cif___ldv_spin_lock_irq_lock_of_ipw_priv(& priv->irq_lock);
  #line 600 
  __ipw_disable_interrupts(priv);
  #line 601 
  cif_spin_unlock_irqrestore_irq_lock_of_ipw_priv(& priv->irq_lock,flags);
  #line 602 
  return;
}

#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static char *ipw_error_desc(u32 val)
{
  #line 606 
  switch (val) {
    #line 607 
    case (u32)0: 
                 #line 607 
    ;
    #line 608 
    return (char *)"ERROR_OK";
    #line 609 
    case (u32)1: 
                 #line 609 
    ;
    #line 610 
    return (char *)"ERROR_FAIL";
    #line 611 
    case (u32)2: 
                 #line 611 
    ;
    #line 612 
    return (char *)"MEMORY_UNDERFLOW";
    #line 613 
    case (u32)3: 
                 #line 613 
    ;
    #line 614 
    return (char *)"MEMORY_OVERFLOW";
    #line 615 
    case (u32)4: 
                 #line 615 
    ;
    #line 616 
    return (char *)"BAD_PARAM";
    #line 617 
    case (u32)5: 
                 #line 617 
    ;
    #line 618 
    return (char *)"BAD_CHECKSUM";
    #line 619 
    case (u32)6: 
                 #line 619 
    ;
    #line 620 
    return (char *)"NMI_INTERRUPT";
    #line 621 
    case (u32)7: 
                 #line 621 
    ;
    #line 622 
    return (char *)"BAD_DATABASE";
    #line 623 
    case (u32)8: 
                 #line 623 
    ;
    #line 624 
    return (char *)"ALLOC_FAIL";
    #line 625 
    case (u32)9: 
                 #line 625 
    ;
    #line 626 
    return (char *)"DMA_UNDERRUN";
    #line 627 
    case (u32)10: 
                  #line 627 
    ;
    #line 628 
    return (char *)"DMA_STATUS";
    #line 629 
    case (u32)11: 
                  #line 629 
    ;
    #line 630 
    return (char *)"DINO_ERROR";
    #line 631 
    case (u32)12: 
                  #line 631 
    ;
    #line 632 
    return (char *)"EEPROM_ERROR";
    #line 633 
    case (u32)13: 
                  #line 633 
    ;
    #line 634 
    return (char *)"SYSASSERT";
    #line 635 
    case (u32)14: 
                  #line 635 
    ;
    #line 636 
    return (char *)"FATAL_ERROR";
    #line 637 
    default: 
             #line 637 
    ;
    #line 638 
    return (char *)"UNKNOWN_ERROR";
  }
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_dump_error_log(struct ipw_priv *priv, struct ipw_fw_error *error)
{
  #line 645 
  u32 i;
  #line 647 
  if (error == (struct ipw_fw_error *)0) {
    #line 648 
    printk((char *)"\001");
    #line 650 
    return;
  }
  #line 653 
  printk((char *)"\001");
  #line 654 
  printk((char *)"\001",error->status,error->config);
  #line 657 
  i = 0U;
  #line 657 
  while (error->elem_len > i) {
    #line 658 
    ;
    #line 658 
    ;
    #line 658 
    ;
    #line 658 
    ;
    #line 658 
    ;
    #line 658 
    ;
    #line 658 
    printk((char *)"\001",ipw_error_desc((error->elem + (unsigned long)i)->desc),(error->elem + (unsigned long)i)->time,(error->elem + (unsigned long)i)->blink1,(error->elem + (unsigned long)i)->blink2,(error->elem + (unsigned long)i)->link1,(error->elem + (unsigned long)i)->link2,(error->elem + (unsigned long)i)->data);
    #line 657 
    i ++;
  }
  #line 665 
  i = 0U;
  #line 665 
  while (error->log_len > i) {
    #line 666 
    printk((char *)"\001",(error->log + (unsigned long)i)->time,(error->log + (unsigned long)i)->data,(error->log + (unsigned long)i)->event);
    #line 665 
    i ++;
  }
  #line 667 
  return;
}

#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static int ipw_is_init(struct ipw_priv *priv)
{
  #line 673 
  return (int)(priv->status >> 5) & 1;
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_get_ordinal(struct ipw_priv *priv, u32 ord, void *val, u32 *len)
{
  #line 678 
  u32 addr;
  #line 678 
  u32 field_info;
  #line 678 
  u32 field_len;
  #line 678 
  u32 field_count;
  #line 678 
  u32 total_len;
  #line 680 
  if ((ipw_debug_level & 1048576U) != 0U) {
    #line 680 
    int tmp_0;
    #line 680 
    ;
    #line 680 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 680 
                                                             tmp_0 = 73; else 
                                                                    #line 680 
                                                                    tmp_0 = 85;
    #line 680 
    printk((char *)"\001",tmp_0,(char *)"ipw_get_ordinal",ord);
  }
  #line 682 
  if ((priv == (struct ipw_priv *)0 || val == (void *)0) || len == (u32 *)0U) {
    #line 683 
    if ((ipw_debug_level & 1048576U) != 0U) {
      #line 683 
      int tmp_2;
      #line 683 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 683 
                                                               tmp_2 = 73; else 
                                                                    #line 683 
                                                                    tmp_2 = 85;
      #line 683 
      printk((char *)"\001",tmp_2,(char *)"ipw_get_ordinal");
    }
    #line 684 
    return -22;
  }
  #line 688 
  if ((priv->table0_addr == 0U || priv->table1_addr == 0U) || priv->table2_addr == 0U) {
    #line 689 
    if ((ipw_debug_level & 1048576U) != 0U) {
      #line 689 
      int tmp_4;
      #line 689 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 689 
                                                               tmp_4 = 73; else 
                                                                    #line 689 
                                                                    tmp_4 = 85;
      #line 689 
      printk((char *)"\001",tmp_4,(char *)"ipw_get_ordinal");
    }
    #line 690 
    return -22;
  }
  #line 693 
  switch (ord & 65280U) {
    #line 694 
    case (unsigned int)61440: 
                              #line 694 
    ;
    #line 703 
    ord &= 255U;
    #line 706 
    if (priv->table0_len < ord) {
      #line 707 
      if ((ipw_debug_level & 1048576U) != 0U) {
        #line 707 
        int tmp_6;
        #line 707 
        ;
        #line 707 
        ;
        #line 707 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 707 
                                                                 tmp_6 = 73; else 
                                                                    #line 707 
                                                                    tmp_6 = 85;
        #line 707 
        printk((char *)"\001",tmp_6,(char *)"ipw_get_ordinal",ord,priv->table0_len);
      }
      #line 709 
      return -22;
    }
    #line 713 
    if (*len <= 3U) {
      #line 714 
      if ((ipw_debug_level & 1048576U) != 0U) {
        #line 714 
        int tmp_8;
        #line 714 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 714 
                                                                 tmp_8 = 73; else 
                                                                    #line 714 
                                                                    tmp_8 = 85;
        #line 714 
        printk((char *)"\001",tmp_8,(char *)"ipw_get_ordinal",4UL);
      }
      #line 716 
      return -22;
    }
    #line 719 
    if ((ipw_debug_level & 1048576U) != 0U) {
      #line 719 
      int tmp_10;
      #line 719 
      ;
      #line 719 
      ;
      #line 719 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 719 
                                                               tmp_10 = 73; else 
                                                                    #line 719 
                                                                    tmp_10 = 85;
      #line 719 
      printk((char *)"\001",tmp_10,(char *)"ipw_get_ordinal",ord,priv->table0_addr + (ord << 2));
    }
    #line 722 
    *len = 4U;
    #line 723 
    ord <<= 2;
    #line 724 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 724 
      int tmp_12;
      #line 724 
      ;
      #line 724 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 724 
                                                               tmp_12 = 73; else 
                                                                    #line 724 
                                                                    tmp_12 = 85;
      #line 724 
      printk((char *)"\001",tmp_12,(char *)"ipw_get_ordinal",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",724,priv->table0_addr + ord);
    }
    #line 724 
    *((u32 *)val) = _ipw_read32(priv,(unsigned long)(priv->table0_addr + ord));
    #line 725 
    break;
    #line 727 
    case (unsigned int)61696: 
                              #line 727 
    ;
    #line 737 
    ord &= 255U;
    #line 740 
    if (priv->table1_len < ord) {
      #line 741 
      if ((ipw_debug_level & 1048576U) != 0U) {
        #line 741 
        int tmp_16;
        #line 741 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 741 
                                                                 tmp_16 = 73; else 
                                                                    #line 741 
                                                                    tmp_16 = 85;
        #line 741 
        printk((char *)"\001",tmp_16,(char *)"ipw_get_ordinal");
      }
      #line 742 
      return -22;
    }
    #line 746 
    if (*len <= 3U) {
      #line 747 
      if ((ipw_debug_level & 1048576U) != 0U) {
        #line 747 
        int tmp_18;
        #line 747 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 747 
                                                                 tmp_18 = 73; else 
                                                                    #line 747 
                                                                    tmp_18 = 85;
        #line 747 
        printk((char *)"\001",tmp_18,(char *)"ipw_get_ordinal",4UL);
      }
      #line 749 
      return -22;
    }
    #line 752 
    *((u32 *)val) = _ipw_read_reg32(priv,priv->table1_addr + (ord << 2));
    #line 754 
    *len = 4U;
    #line 755 
    break;
    #line 757 
    case (unsigned int)61952: 
                              #line 757 
    ;
    #line 768 
    ord &= 255U;
    #line 771 
    if (priv->table2_len < ord) {
      #line 772 
      if ((ipw_debug_level & 1048576U) != 0U) {
        #line 772 
        int tmp_20;
        #line 772 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 772 
                                                                 tmp_20 = 73; else 
                                                                    #line 772 
                                                                    tmp_20 = 85;
        #line 772 
        printk((char *)"\001",tmp_20,(char *)"ipw_get_ordinal");
      }
      #line 773 
      return -22;
    }
    #line 777 
    addr = _ipw_read_reg32(priv,priv->table2_addr + (ord << 3));
    #line 781 
    field_info = _ipw_read_reg32(priv,(priv->table2_addr + (ord << 3)) + 4U);
    #line 787 
    field_len = (unsigned int)*((u16 *)(& field_info));
    #line 790 
    field_count = (unsigned int)*((u16 *)(& field_info) + 1U);
    #line 793 
    total_len = field_len * field_count;
    #line 794 
    if (*len < total_len) {
      #line 795 
      *len = total_len;
      #line 796 
      return -22;
    }
    #line 799 
    *len = total_len;
    #line 800 
    if (total_len == 0U) 
                         #line 801 
                         return 0;
    #line 803 
    if ((ipw_debug_level & 1048576U) != 0U) {
      #line 803 
      int tmp_22;
      #line 803 
      ;
      #line 803 
      ;
      #line 803 
      ;
      #line 803 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 803 
                                                               tmp_22 = 73; else 
                                                                    #line 803 
                                                                    tmp_22 = 85;
      #line 803 
      printk((char *)"\001",tmp_22,(char *)"ipw_get_ordinal",addr,total_len,field_info);
    }
    #line 806 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 806 
      int tmp_24;
      #line 806 
      ;
      #line 806 
      ;
      #line 806 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 806 
                                                               tmp_24 = 73; else 
                                                                    #line 806 
                                                                    tmp_24 = 85;
      #line 806 
      printk((char *)"\001",tmp_24,(char *)"ipw_get_ordinal",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",806,addr,total_len);
    }
    #line 806 
    _ipw_read_indirect(priv,addr,(u8 *)val,(int)total_len);
    #line 807 
    break;
    #line 809 
    default: 
             #line 809 
    ;
    #line 810 
    if ((ipw_debug_level & 1048576U) != 0U) {
      #line 810 
      int tmp_26;
      #line 810 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 810 
                                                               tmp_26 = 73; else 
                                                                    #line 810 
                                                                    tmp_26 = 85;
      #line 810 
      printk((char *)"\001",tmp_26,(char *)"ipw_get_ordinal");
    }
    #line 811 
    return -22;
  }
  #line 815 
  return 0;
}

#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_init_ordinals(struct ipw_priv *priv)
{
  #line 820 
  priv->table0_addr = 1792U;
  #line 821 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 821 
    int tmp_0;
    #line 821 
    ;
    #line 821 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 821 
                                                             tmp_0 = 73; else 
                                                                    #line 821 
                                                                    tmp_0 = 85;
    #line 821 
    printk((char *)"\001",tmp_0,(char *)"ipw_init_ordinals",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",821,priv->table0_addr);
  }
  #line 821 
  priv->table0_len = _ipw_read32(priv,(unsigned long)priv->table0_addr);
  #line 823 
  if ((ipw_debug_level & 1048576U) != 0U) {
    #line 823 
    int tmp_4;
    #line 823 
    ;
    #line 823 
    ;
    #line 823 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 823 
                                                             tmp_4 = 73; else 
                                                                    #line 823 
                                                                    tmp_4 = 85;
    #line 823 
    printk((char *)"\001",tmp_4,(char *)"ipw_init_ordinals",priv->table0_addr,priv->table0_len);
  }
  #line 826 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 826 
    int tmp_6;
    #line 826 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 826 
                                                             tmp_6 = 73; else 
                                                                    #line 826 
                                                                    tmp_6 = 85;
    #line 826 
    printk((char *)"\001",tmp_6,(char *)"ipw_init_ordinals",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",826,900U);
  }
  #line 826 
  priv->table1_addr = _ipw_read32(priv,900UL);
  #line 827 
  priv->table1_len = _ipw_read_reg32(priv,priv->table1_addr);
  #line 829 
  if ((ipw_debug_level & 1048576U) != 0U) {
    #line 829 
    int tmp_10;
    #line 829 
    ;
    #line 829 
    ;
    #line 829 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 829 
                                                             tmp_10 = 73; else 
                                                                    #line 829 
                                                                    tmp_10 = 85;
    #line 829 
    printk((char *)"\001",tmp_10,(char *)"ipw_init_ordinals",priv->table1_addr,priv->table1_len);
  }
  #line 832 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 832 
    int tmp_12;
    #line 832 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 832 
                                                             tmp_12 = 73; else 
                                                                    #line 832 
                                                                    tmp_12 = 85;
    #line 832 
    printk((char *)"\001",tmp_12,(char *)"ipw_init_ordinals",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",832,904U);
  }
  #line 832 
  priv->table2_addr = _ipw_read32(priv,904UL);
  #line 833 
  priv->table2_len = _ipw_read_reg32(priv,priv->table2_addr);
  #line 834 
  priv->table2_len &= 65535U;
  #line 836 
  if ((ipw_debug_level & 1048576U) != 0U) {
    #line 836 
    int tmp_16;
    #line 836 
    ;
    #line 836 
    ;
    #line 836 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 836 
                                                             tmp_16 = 73; else 
                                                                    #line 836 
                                                                    tmp_16 = 85;
    #line 836 
    printk((char *)"\001",tmp_16,(char *)"ipw_init_ordinals",priv->table2_addr,priv->table2_len);
  }
  #line 837 
  return;
}

#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u32 ipw_register_toggle(u32 reg)
{
  #line 843 
  reg &= 4294967291U;
  #line 844 
  if ((reg & 33554432U) != 0U) 
                               #line 845 
                               reg &= 4261412863U;
  #line 846 
  if ((reg & 67108864U) != 0U) 
                               #line 847 
                               reg &= 4227858431U;
  #line 848 
  if ((reg & 536870912U) != 0U) 
                                #line 849 
                                reg &= 3758096383U;
  #line 850 
  return reg;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_link_on(struct ipw_priv *priv)
{
  #line 868 
  unsigned long flags;
  #line 869 
  u32 led;
  #line 873 
  if ((priv->config & 512U) != 0U || (unsigned int)priv->nic_type == 1U) 
    #line 874 
    return;
  #line 876 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 878 
  if ((priv->status & 12U) == 0U && (priv->status & 16777216U) == 0U) {
    #line 880 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 880 
      int tmp_0;
      #line 880 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 880 
                                                               tmp_0 = 73; else 
                                                                    #line 880 
                                                                    tmp_0 = 85;
      #line 880 
      printk((char *)"\001",tmp_0,(char *)"ipw_led_link_on");
    }
    #line 881 
    led = _ipw_read_reg32(priv,3145732U);
    #line 882 
    led = priv->led_association_on | led;
    #line 884 
    led = ipw_register_toggle(led);
    #line 886 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 886 
      int tmp_2;
      #line 886 
      ;
      #line 886 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 886 
                                                               tmp_2 = 73; else 
                                                                    #line 886 
                                                                    tmp_2 = 85;
      #line 886 
      printk((char *)"\001",tmp_2,(char *)"ipw_led_link_on",led);
    }
    #line 887 
    ipw_write_reg32(priv,3145732U,led);
    #line 889 
    priv->status |= 16777216U;
    #line 892 
    if ((priv->status & 128U) == 0U) {
      #line 893 
      ;
      #line 893 
      cif_schedule_delayed_work(& priv->led_link_off,msecs_to_jiffies(300U));
    }
  }
  #line 897 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 898 
  return;
}

#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_led_link_on(struct work_struct *work)
{
  #line 903 
  void *__mptr;
  #line 903 
  __mptr = (void *)work;
  #line 902 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545368U));
  #line 904 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 905 
  ipw_led_link_on(priv);
  #line 906 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 907 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_link_off(struct ipw_priv *priv)
{
  #line 911 
  unsigned long flags;
  #line 912 
  u32 led;
  #line 916 
  if ((priv->config & 512U) != 0U || (unsigned int)priv->nic_type == 1U) 
    #line 917 
    return;
  #line 919 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 921 
  if ((priv->status & 16777216U) != 0U) {
    #line 922 
    led = _ipw_read_reg32(priv,3145732U);
    #line 923 
    led = priv->led_association_off & led;
    #line 924 
    led = ipw_register_toggle(led);
    #line 926 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 926 
      int tmp_0;
      #line 926 
      ;
      #line 926 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 926 
                                                               tmp_0 = 73; else 
                                                                    #line 926 
                                                                    tmp_0 = 85;
      #line 926 
      printk((char *)"\001",tmp_0,(char *)"ipw_led_link_off",led);
    }
    #line 927 
    ipw_write_reg32(priv,3145732U,led);
    #line 929 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 929 
      int tmp_2;
      #line 929 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 929 
                                                               tmp_2 = 73; else 
                                                                    #line 929 
                                                                    tmp_2 = 85;
      #line 929 
      printk((char *)"\001",tmp_2,(char *)"ipw_led_link_off");
    }
    #line 931 
    priv->status &= 4278190079U;
    #line 935 
    if ((priv->status & 12U) == 0U && (priv->status & 128U) == 0U) {
      #line 937 
      ;
      #line 937 
      cif_schedule_delayed_work(& priv->led_link_on,msecs_to_jiffies(2700U));
    }
  }
  #line 942 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 943 
  return;
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_led_link_off(struct work_struct *work)
{
  #line 948 
  void *__mptr;
  #line 948 
  __mptr = (void *)work;
  #line 947 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545184U));
  #line 949 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 950 
  ipw_led_link_off(priv);
  #line 951 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 952 
  return;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void __ipw_led_activity_on(struct ipw_priv *priv)
{
  #line 956 
  u32 led;
  #line 958 
  if ((priv->config & 512U) != 0U) 
                                   #line 959 
                                   return;
  #line 961 
  if ((priv->status & 12U) != 0U) 
                                  #line 962 
                                  return;
  #line 964 
  if ((priv->status & 33554432U) == 0U) {
    #line 965 
    led = _ipw_read_reg32(priv,3145732U);
    #line 966 
    led = priv->led_activity_on | led;
    #line 968 
    led = ipw_register_toggle(led);
    #line 970 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 970 
      int tmp_0;
      #line 970 
      ;
      #line 970 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 970 
                                                               tmp_0 = 73; else 
                                                                    #line 970 
                                                                    tmp_0 = 85;
      #line 970 
      printk((char *)"\001",tmp_0,(char *)"__ipw_led_activity_on",led);
    }
    #line 971 
    ipw_write_reg32(priv,3145732U,led);
    #line 973 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 973 
      int tmp_2;
      #line 973 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 973 
                                                               tmp_2 = 73; else 
                                                                    #line 973 
                                                                    tmp_2 = 85;
      #line 973 
      printk((char *)"\001",tmp_2,(char *)"__ipw_led_activity_on");
    }
    #line 975 
    priv->status |= 33554432U;
    #line 977 
    cancel_delayed_work(& priv->led_act_off);
    #line 978 
    ;
    #line 978 
    cif_schedule_delayed_work(& priv->led_act_off,msecs_to_jiffies(250U));
  }
  else {
    #line 981 
    cancel_delayed_work(& priv->led_act_off);
    #line 982 
    ;
    #line 982 
    cif_schedule_delayed_work(& priv->led_act_off,msecs_to_jiffies(250U));
  }
  #line 984 
  return;
}

#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_activity_off(struct ipw_priv *priv)
{
  #line 998 
  unsigned long flags;
  #line 999 
  u32 led;
  #line 1001 
  if ((priv->config & 512U) != 0U) 
                                   #line 1002 
                                   return;
  #line 1004 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 1006 
  if ((priv->status & 33554432U) != 0U) {
    #line 1007 
    led = _ipw_read_reg32(priv,3145732U);
    #line 1008 
    led = priv->led_activity_off & led;
    #line 1010 
    led = ipw_register_toggle(led);
    #line 1012 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 1012 
      int tmp_0;
      #line 1012 
      ;
      #line 1012 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1012 
                                                               tmp_0 = 73; else 
                                                                    #line 1012 
                                                                    tmp_0 = 85;
      #line 1012 
      printk((char *)"\001",tmp_0,(char *)"ipw_led_activity_off",led);
    }
    #line 1013 
    ipw_write_reg32(priv,3145732U,led);
    #line 1015 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 1015 
      int tmp_2;
      #line 1015 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1015 
                                                               tmp_2 = 73; else 
                                                                    #line 1015 
                                                                    tmp_2 = 85;
      #line 1015 
      printk((char *)"\001",tmp_2,(char *)"ipw_led_activity_off");
    }
    #line 1017 
    priv->status &= 4261412863U;
  }
  #line 1020 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 1021 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_led_activity_off(struct work_struct *work)
{
  #line 1026 
  void *__mptr;
  #line 1026 
  __mptr = (void *)work;
  #line 1025 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545000U));
  #line 1027 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 1028 
  ipw_led_activity_off(priv);
  #line 1029 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 1030 
  return;
}

#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_band_on(struct ipw_priv *priv)
{
  #line 1034 
  unsigned long flags;
  #line 1035 
  u32 led;
  #line 1038 
  if (((priv->config & 512U) != 0U || (unsigned int)priv->nic_type != 1U) || priv->assoc_network == (struct libipw_network *)0) 
    #line 1040 
    return;
  #line 1042 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 1044 
  led = _ipw_read_reg32(priv,3145732U);
  #line 1045 
  if ((unsigned int)(priv->assoc_network)->mode == 1U) {
    #line 1046 
    led = priv->led_ofdm_on | led;
    #line 1047 
    led = priv->led_association_off & led;
    #line 1048 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 1048 
      int tmp_0;
      #line 1048 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1048 
                                                               tmp_0 = 73; else 
                                                                    #line 1048 
                                                                    tmp_0 = 85;
      #line 1048 
      printk((char *)"\001",tmp_0,(char *)"ipw_led_band_on");
    }
  }
  else 
    #line 1049 
    if ((unsigned int)(priv->assoc_network)->mode == 4U) {
      #line 1050 
      led = priv->led_ofdm_on | led;
      #line 1051 
      led = priv->led_association_on | led;
      #line 1052 
      if ((ipw_debug_level & 524288U) != 0U) {
        #line 1052 
        int tmp_2;
        #line 1052 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1052 
                                                                 tmp_2 = 73; else 
                                                                    #line 1052 
                                                                    tmp_2 = 85;
        #line 1052 
        printk((char *)"\001",tmp_2,(char *)"ipw_led_band_on");
      }
    }
    else {
      #line 1054 
      led = priv->led_ofdm_off & led;
      #line 1055 
      led = priv->led_association_on | led;
      #line 1056 
      if ((ipw_debug_level & 524288U) != 0U) {
        #line 1056 
        int tmp_4;
        #line 1056 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1056 
                                                                 tmp_4 = 73; else 
                                                                    #line 1056 
                                                                    tmp_4 = 85;
        #line 1056 
        printk((char *)"\001",tmp_4,(char *)"ipw_led_band_on");
      }
    }
  #line 1059 
  led = ipw_register_toggle(led);
  #line 1061 
  if ((ipw_debug_level & 524288U) != 0U) {
    #line 1061 
    int tmp_6;
    #line 1061 
    ;
    #line 1061 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1061 
                                                             tmp_6 = 73; else 
                                                                    #line 1061 
                                                                    tmp_6 = 85;
    #line 1061 
    printk((char *)"\001",tmp_6,(char *)"ipw_led_band_on",led);
  }
  #line 1062 
  ipw_write_reg32(priv,3145732U,led);
  #line 1064 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 1065 
  return;
}

#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_band_off(struct ipw_priv *priv)
{
  #line 1069 
  unsigned long flags;
  #line 1070 
  u32 led;
  #line 1073 
  if ((priv->config & 512U) != 0U || (unsigned int)priv->nic_type != 1U) 
    #line 1074 
    return;
  #line 1076 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 1078 
  led = _ipw_read_reg32(priv,3145732U);
  #line 1079 
  led = priv->led_ofdm_off & led;
  #line 1080 
  led = priv->led_association_off & led;
  #line 1082 
  led = ipw_register_toggle(led);
  #line 1084 
  if ((ipw_debug_level & 524288U) != 0U) {
    #line 1084 
    int tmp_0;
    #line 1084 
    ;
    #line 1084 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1084 
                                                             tmp_0 = 73; else 
                                                                    #line 1084 
                                                                    tmp_0 = 85;
    #line 1084 
    printk((char *)"\001",tmp_0,(char *)"ipw_led_band_off",led);
  }
  #line 1085 
  ipw_write_reg32(priv,3145732U,led);
  #line 1087 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 1088 
  return;
}

#line 1090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_radio_on(struct ipw_priv *priv)
{
  #line 1092 
  ipw_led_link_on(priv);
  #line 1093 
  return;
}

#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_radio_off(struct ipw_priv *priv)
{
  #line 1097 
  ipw_led_activity_off(priv);
  #line 1098 
  ipw_led_link_off(priv);
  #line 1099 
  return;
}

#line 1101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_link_up(struct ipw_priv *priv)
{
  #line 1104 
  ipw_led_link_on(priv);
  #line 1105 
  return;
}

#line 1107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_link_down(struct ipw_priv *priv)
{
  #line 1109 
  ipw_led_activity_off(priv);
  #line 1110 
  ipw_led_link_off(priv);
  #line 1112 
  if ((priv->status & 12U) != 0U) 
                                  #line 1113 
                                  ipw_led_radio_off(priv);
  #line 1114 
  return;
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_init(struct ipw_priv *priv)
{
  #line 1118 
  priv->nic_type = priv->eeprom[74UL];
  #line 1121 
  priv->led_activity_on = 16U;
  #line 1122 
  priv->led_activity_off = 4294967279U;
  #line 1124 
  priv->led_association_on = 32U;
  #line 1125 
  priv->led_association_off = 4294967263U;
  #line 1128 
  priv->led_ofdm_on = 64U;
  #line 1129 
  priv->led_ofdm_off = 4294967231U;
  #line 1131 
  switch ((int)priv->nic_type) {
    #line 1132 
    case 1: 
            #line 1132 
    ;
    #line 1134 
    priv->led_activity_on = 32U;
    #line 1135 
    priv->led_activity_off = 4294967263U;
    #line 1136 
    priv->led_association_on = 16U;
    #line 1137 
    priv->led_association_off = 4294967279U;
    #line 1139 
    if ((priv->config & 512U) == 0U) 
                                     #line 1140 
                                     ipw_led_band_on(priv);
    #line 1144 
    return;
    #line 1146 
    case 3: 
            #line 1146 
    ;
    #line 1147 
    case 2: 
            #line 1147 
    ;
    #line 1148 
    case 4: 
            #line 1148 
    ;
    #line 1149 
    case 0: 
            #line 1149 
    ;
    #line 1150 
    break;
    #line 1152 
    default: 
             #line 1152 
    ;
    #line 1153 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 1153 
      int tmp_0;
      #line 1153 
      ;
      #line 1153 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1153 
                                                               tmp_0 = 73; else 
                                                                    #line 1153 
                                                                    tmp_0 = 85;
      #line 1153 
      printk((char *)"\001",tmp_0,(char *)"ipw_led_init",(int)priv->nic_type);
    }
    #line 1155 
    priv->nic_type = (unsigned char)0U;
    #line 1156 
    break;
  }
  #line 1159 
  if ((priv->config & 512U) == 0U) 
    #line 1160 
    if ((priv->status & 128U) != 0U) 
                                     #line 1161 
                                     ipw_led_link_on(priv); else 
                                                                 #line 1163 
                                                                 ipw_led_link_off(priv);
  #line 1164 
  return;
}

#line 1167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_led_shutdown(struct ipw_priv *priv)
{
  #line 1169 
  ipw_led_activity_off(priv);
  #line 1170 
  ipw_led_link_off(priv);
  #line 1171 
  ipw_led_band_off(priv);
  #line 1172 
  cancel_delayed_work(& priv->led_link_on);
  #line 1173 
  cancel_delayed_work(& priv->led_link_off);
  #line 1174 
  cancel_delayed_work(& priv->led_act_off);
  #line 1175 
  return;
}

#line 1184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t debug_level_show(struct device_driver *d, char *buf)
{
  #line 1186 
  return (long)sprintf(buf,(char *)"0x%08X\n",ipw_debug_level);
}

#line 1189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t debug_level_store(struct device_driver *d, char *buf, size_t count)
{
  #line 1193 
  u32 val;
  #line 1192 
  char *p = buf;
  #line 1195 
  if ((((int)*(p + 1U) == 120 || (int)*(p + 1U) == 88) || (int)*p == 120) || (int)*p == 88) {
    #line 1196 
    p ++;
    #line 1197 
    if ((int)*p == 120 || (int)*p == 88) 
                                         #line 1198 
                                         p ++;
    #line 1199 
    val = (unsigned int)simple_strtoul(p,& p,16U);
  }
  else {
    #line 1201 
    val = (unsigned int)simple_strtoul(p,& p,10U);
  }
  #line 1202 
  if (p == buf) 
                #line 1203 
                printk((char *)"\001",buf); else 
                                                 #line 1206 
                                                 ipw_debug_level = val;
  #line 1208 
  return (long)strnlen(buf,count);
}

#line 1210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct driver_attribute driver_attr_debug_level = {.attr = {.name = (char *)"debug_level", .mode = (unsigned short)420U}, .show = & debug_level_show, .store = & debug_level_store};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static u32 ipw_get_event_log_len(struct ipw_priv *priv)
{
  #line 1215 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 1215 
    int tmp_0;
    #line 1215 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1215 
                                                             tmp_0 = 73; else 
                                                                    #line 1215 
                                                                    tmp_0 = 85;
    #line 1215 
    printk((char *)"\001",tmp_0,(char *)"ipw_get_event_log_len",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1215,1556U);
  }
  #line 1215 
  ;
  #line 1215 
  return _ipw_read_reg32(priv,_ipw_read32(priv,1556UL));
}

#line 1218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_capture_event_log(struct ipw_priv *priv, u32 log_len, struct ipw_event *log)
{
  #line 1221 
  u32 base;
  #line 1223 
  if (log_len != 0U) {
    #line 1224 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 1224 
      int tmp_0;
      #line 1224 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1224 
                                                               tmp_0 = 73; else 
                                                                    #line 1224 
                                                                    tmp_0 = 85;
      #line 1224 
      printk((char *)"\001",tmp_0,(char *)"ipw_capture_event_log",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1224,1556U);
    }
    #line 1224 
    base = _ipw_read32(priv,1556UL);
    #line 1225 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 1225 
      int tmp_4;
      #line 1225 
      ;
      #line 1225 
      ;
      #line 1225 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1225 
                                                               tmp_4 = 73; else 
                                                                    #line 1225 
                                                                    tmp_4 = 85;
      #line 1225 
      printk((char *)"\001",tmp_4,(char *)"ipw_capture_event_log",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1225,base + 8U,log_len * 12U);
    }
    #line 1225 
    _ipw_read_indirect(priv,base + 8U,(u8 *)log,(int)(log_len * 12U));
  }
  #line 1228 
  return;
}

#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct ipw_fw_error *ipw_alloc_error_log(struct ipw_priv *priv)
{
  #line 1232 
  struct ipw_fw_error *error;
  #line 1233 
  u32 log_len = ipw_get_event_log_len(priv);
  #line 1234 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 1234 
    int tmp_1;
    #line 1234 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1234 
                                                             tmp_1 = 73; else 
                                                                    #line 1234 
                                                                    tmp_1 = 85;
    #line 1234 
    printk((char *)"\001",tmp_1,(char *)"ipw_alloc_error_log",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1234,1552U);
  }
  #line 1234 
  u32 base = _ipw_read32(priv,1552UL);
  #line 1235 
  u32 elem_len = _ipw_read_reg32(priv,base);
  #line 1237 
  error = (struct ipw_fw_error *)kmalloc(((unsigned long)elem_len * 28UL + (unsigned long)log_len * 12UL) + 40UL,2592U);
  #line 1240 
  if (error == (struct ipw_fw_error *)0) {
    #line 1241 
    printk((char *)"\001");
    #line 1243 
    return (struct ipw_fw_error *)0;
  }
  #line 1245 
  error->jiffies = jiffies;
  #line 1246 
  error->status = priv->status;
  #line 1247 
  error->config = priv->config;
  #line 1248 
  error->elem_len = elem_len;
  #line 1249 
  error->log_len = log_len;
  #line 1250 
  error->elem = (struct ipw_error_elem *)(& error->payload);
  #line 1251 
  error->log = (struct ipw_event *)(error->elem + (unsigned long)elem_len);
  #line 1253 
  ipw_capture_event_log(priv,log_len,error->log);
  #line 1255 
  if (elem_len != 0U) {
    #line 1256 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 1256 
      int tmp_7;
      #line 1256 
      ;
      #line 1256 
      ;
      #line 1256 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1256 
                                                               tmp_7 = 73; else 
                                                                    #line 1256 
                                                                    tmp_7 = 85;
      #line 1256 
      printk((char *)"\001",tmp_7,(char *)"ipw_alloc_error_log",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1256,base + 4U,elem_len * 28U);
    }
    #line 1256 
    _ipw_read_indirect(priv,base + 4U,(u8 *)error->elem,(int)(elem_len * 28U));
  }
  #line 1259 
  return error;
}

#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_event_log(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1267 
  u32 log_size;
  #line 1268 
  struct ipw_event *log;
  #line 1269 
  u32 i;
  #line 1265 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1266 
  u32 log_len = ipw_get_event_log_len(priv);
  #line 1269 
  u32 len = 0U;
  #line 1272 
  if (log_len <= 340U) 
                       #line 1272 
                       log_size = log_len * 12U; else 
                                                      #line 1272 
                                                      log_size = 4096U;
  #line 1274 
  log = (struct ipw_event *)kzalloc((unsigned long)log_size,3264U);
  #line 1275 
  if (log == (struct ipw_event *)0) {
    #line 1276 
    printk((char *)"\001");
    #line 1277 
    return 0L;
  }
  #line 1279 
  log_len = log_size / 12U;
  #line 1280 
  ipw_capture_event_log(priv,log_len,log);
  #line 1282 
  len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"%08X",log_len) + len;
  #line 1283 
  i = 0U;
  #line 1283 
  while (i < log_len) {
    #line 1286 
    len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n%08X%08X%08X",(log + (unsigned long)i)->time,
                 (log + (unsigned long)i)->event,
                 (log + (unsigned long)i)->data) + len;
    #line 1283 
    i ++;
  }
  #line 1287 
  len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n") + len;
  #line 1288 
  kfree((void *)log);
  #line 1289 
  return (long)len;
}

#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_event_log = {.attr = {.name = (char *)"event_log", .mode = (unsigned short)292U}, .show = & show_event_log};
#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_error(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1298 
  u32 i;
  #line 1297 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1298 
  u32 len = 0U;
  #line 1299 
  if (priv->error == (struct ipw_fw_error *)0) 
                                               #line 1300 
                                               return 0L;
  #line 1305 
  len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"%08lX%08X%08X%08X",(priv->error)->jiffies,
                 (priv->error)->status,(priv->error)->config,
                 (priv->error)->elem_len) + len;
  #line 1306 
  i = 0U;
  #line 1306 
  while ((priv->error)->elem_len > i) {
    #line 1315 
    len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n%08X%08X%08X%08X%08X%08X%08X",
                 ((priv->error)->elem + (unsigned long)i)->time,
                 ((priv->error)->elem + (unsigned long)i)->desc,
                 ((priv->error)->elem + (unsigned long)i)->blink1,
                 ((priv->error)->elem + (unsigned long)i)->blink2,
                 ((priv->error)->elem + (unsigned long)i)->link1,
                 ((priv->error)->elem + (unsigned long)i)->link2,
                 ((priv->error)->elem + (unsigned long)i)->data) + len;
    #line 1306 
    i ++;
  }
  #line 1318 
  len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n%08X",(priv->error)->log_len) + len;
  #line 1319 
  i = 0U;
  #line 1319 
  while ((priv->error)->log_len > i) {
    #line 1324 
    len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n%08X%08X%08X",
                 ((priv->error)->log + (unsigned long)i)->time,
                 ((priv->error)->log + (unsigned long)i)->event,
                 ((priv->error)->log + (unsigned long)i)->data) + len;
    #line 1319 
    i ++;
  }
  #line 1325 
  len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n") + len;
  #line 1326 
  return (long)len;
}

#line 1329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t clear_error(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1333 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1335 
  kfree((void *)priv->error);
  #line 1336 
  priv->error = (struct ipw_fw_error *)0;
  #line 1337 
  return (long)count;
}

#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_error = {.attr = {.name = (char *)"error", .mode = (unsigned short)420U}, .show = & show_error, .store = & clear_error};
#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_cmd_log(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1346 
  u32 i;
  #line 1345 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1346 
  u32 len = 0U;
  #line 1347 
  if (priv->cmdlog == (struct ipw_cmd_log *)0) 
                                               #line 1348 
                                               return 0L;
  #line 1349 
  i = (unsigned int)((priv->cmdlog_pos + 1) % priv->cmdlog_len);
  #line 1349 
  while ((unsigned int)priv->cmdlog_pos != i && len <= 4095U) {
    {
      #line 1356 
      len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n%08lX%08X%08X%08X\n",
                 (priv->cmdlog + (unsigned long)i)->jiffies,
                 (priv->cmdlog + (unsigned long)i)->retcode,
                 (int)(priv->cmdlog + (unsigned long)i)->cmd.cmd,
                 (int)(priv->cmdlog + (unsigned long)i)->cmd.len) + len;
      #line 1360 
      len = (unsigned int)snprintk_buf((u8 *)(buf + (unsigned long)len),
                     4096UL - (unsigned long)len,
                     (u8 *)(& (priv->cmdlog + (unsigned long)i)->cmd.param),
                     (unsigned long)(priv->cmdlog + (unsigned long)i)->cmd.len) + len;
      #line 1361 
      len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n") + len;
    }
    #line 1350 
    i = (i + 1U) % (unsigned int)priv->cmdlog_len;
  }
  #line 1363 
  len = (unsigned int)snprintf(buf + (unsigned long)len,4096UL - (unsigned long)len,
                 (char *)"\n") + len;
  #line 1364 
  return (long)len;
}

#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_cmd_log = {.attr = {.name = (char *)"cmd_log", .mode = (unsigned short)292U}, .show = & show_cmd_log};
#line 1370 
#line 11574 
static void ipw_prom_free(struct ipw_priv *priv);
#line 1371 
#line 11537 
static int ipw_prom_alloc(struct ipw_priv *priv);
#line 1372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_rtap_iface(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1376 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1377 
  int rc = 0;
  #line 1379 
  if (count == 0UL) 
                    #line 1380 
                    return -22L;
  #line 1382 
  switch ((int)*buf) {
    #line 1383 
    case 48: 
             #line 1383 
    ;
    #line 1384 
    if (rtap_iface == 0) 
                         #line 1385 
                         return (long)count;
    #line 1387 
    if ((int)netif_running(priv->prom_net_dev) != 0) {
      #line 1388 
      printk((char *)"\001");
      #line 1389 
      return (long)count;
    }
    #line 1392 
    ipw_prom_free(priv);
    #line 1393 
    rtap_iface = 0;
    #line 1394 
    break;
    #line 1396 
    case 49: 
             #line 1396 
    ;
    #line 1397 
    if (rtap_iface != 0) 
                         #line 1398 
                         return (long)count;
    #line 1400 
    rc = ipw_prom_alloc(priv);
    #line 1401 
    if (rc == 0) 
                 #line 1402 
                 rtap_iface = 1;
    #line 1403 
    break;
    #line 1405 
    default: 
             #line 1405 
    ;
    #line 1406 
    return -22L;
  }
  #line 1409 
  if (rc != 0) 
               #line 1410 
               printk((char *)"\001",rc);
  #line 1414 
  return (long)count;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_rtap_iface(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1421 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1422 
  if (rtap_iface != 0) {
    #line 1423 
    return (long)sprintf(buf,(char *)"%s",(char *)(& (priv->prom_net_dev)->name));
  }
  else {
    #line 1425 
    *buf = (char)45;
    #line 1426 
    *(buf + 1U) = (char)49;
    #line 1427 
    *(buf + 2U) = (char)0;
    #line 1428 
    return 3L;
  }
}

#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_rtap_iface = {.attr = {.name = (char *)"rtap_iface", .mode = (unsigned short)384U}, .show = & show_rtap_iface, .store = & store_rtap_iface};
#line 1434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_rtap_filter(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1438 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1440 
  if (priv->prom_priv == (struct ipw_prom_priv *)0) {
    #line 1441 
    printk((char *)"\001");
    #line 1443 
    return -1L;
  }
  #line 1446 
  (priv->prom_priv)->filter = (enum ipw_prom_filter)simple_strtol(buf,(char **)0,0U);
  #line 1448 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 1448 
    int tmp_1;
    #line 1448 
    int tmp_2;
    #line 1448 
    int tmp_3;
    #line 1448 
    int tmp_4;
    #line 1448 
    int tmp_5;
    #line 1448 
    int tmp_6;
    #line 1448 
    int tmp_7;
    #line 1448 
    int tmp_8;
    #line 1448 
    int tmp_9;
    #line 1448 
    int tmp_10;
    #line 1448 
    int tmp_11;
    #line 1448 
    int tmp_12;
    #line 1448 
    int tmp_13;
    #line 1448 
    int tmp_14;
    #line 1448 
    int tmp_15;
    #line 1448 
    int tmp_16;
    #line 1448 
    int tmp_18;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 1U) != 0U) 
                                                              #line 1448 
                                                              tmp_1 = 49; else 
                                                                    #line 1448 
                                                                    tmp_1 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 2U) != 0U) 
                                                              #line 1448 
                                                              tmp_2 = 49; else 
                                                                    #line 1448 
                                                                    tmp_2 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 4U) != 0U) 
                                                              #line 1448 
                                                              tmp_3 = 49; else 
                                                                    #line 1448 
                                                                    tmp_3 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 8U) != 0U) 
                                                              #line 1448 
                                                              tmp_4 = 49; else 
                                                                    #line 1448 
                                                                    tmp_4 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 16U) != 0U) 
                                                               #line 1448 
                                                               tmp_5 = 49; else 
                                                                    #line 1448 
                                                                    tmp_5 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 32U) != 0U) 
                                                               #line 1448 
                                                               tmp_6 = 49; else 
                                                                    #line 1448 
                                                                    tmp_6 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 64U) != 0U) 
                                                               #line 1448 
                                                               tmp_7 = 49; else 
                                                                    #line 1448 
                                                                    tmp_7 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 128U) != 0U) 
                                                                #line 1448 
                                                                tmp_8 = 49; else 
                                                                    #line 1448 
                                                                    tmp_8 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 256U) != 0U) 
                                                                #line 1448 
                                                                tmp_9 = 49; else 
                                                                    #line 1448 
                                                                    tmp_9 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 512U) != 0U) 
                                                                #line 1448 
                                                                tmp_10 = 49; else 
                                                                    #line 1448 
                                                                    tmp_10 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 1024U) != 0U) 
                                                                 #line 1448 
                                                                 tmp_11 = 49; else 
                                                                    #line 1448 
                                                                    tmp_11 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 2048U) != 0U) 
                                                                 #line 1448 
                                                                 tmp_12 = 49; else 
                                                                    #line 1448 
                                                                    tmp_12 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 4096U) != 0U) 
                                                                 #line 1448 
                                                                 tmp_13 = 49; else 
                                                                    #line 1448 
                                                                    tmp_13 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 8192U) != 0U) 
                                                                 #line 1448 
                                                                 tmp_14 = 49; else 
                                                                    #line 1448 
                                                                    tmp_14 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 16384U) != 0U) 
                                                                  #line 1448 
                                                                  tmp_15 = 49; else 
                                                                    #line 1448 
                                                                    tmp_15 = 48;
    #line 1448 
    if (((unsigned int)(priv->prom_priv)->filter & 32768U) != 0U) 
                                                                  #line 1448 
                                                                  tmp_16 = 49; else 
                                                                    #line 1448 
                                                                    tmp_16 = 48;
    #line 1448 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1448 
                                                             tmp_18 = 73; else 
                                                                    #line 1448 
                                                                    tmp_18 = 85;
    #line 1448 
    printk((char *)"\001",tmp_18,(char *)"store_rtap_filter",tmp_16,tmp_15,tmp_14,tmp_13,tmp_12,tmp_11,tmp_10,tmp_9,tmp_8,tmp_7,tmp_6,tmp_5,tmp_4,tmp_3,tmp_2,tmp_1);
  }
  #line 1451 
  return (long)count;
}

#line 1454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_rtap_filter(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1459 
  unsigned int tmp_0;
  #line 1458 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1459 
  if (priv->prom_priv != (struct ipw_prom_priv *)0) 
                                                    #line 1459 
                                                    tmp_0 = (unsigned int)(priv->prom_priv)->filter; else 
                                                                    #line 1459 
                                                                    tmp_0 = 0U;
  #line 1459 
  ;
  #line 1459 
  return (long)sprintf(buf,(char *)"0x%04X",tmp_0);
}

#line 1463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_rtap_filter = {.attr = {.name = (char *)"rtap_filter", .mode = (unsigned short)384U}, .show = & show_rtap_filter, .store = & store_rtap_filter};
#line 1466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_scan_age(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1469 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1470 
  return (long)sprintf(buf,(char *)"%d\n",(priv->ieee)->scan_age);
}

#line 1473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_scan_age(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1480 
  unsigned long tmp_0;
  #line 1481 
  unsigned long val;
  #line 1476 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1477 
  struct net_device *dev = priv->net_dev;
  #line 1478 
  char buffer[9U] = {(char)'0', (char)'0', (char)'0', (char)'0', (char)'0', (char)'0', (char)'0', (char)'0', (char)'\000'};
  #line 1480 
  if (8UL < count) 
                   #line 1480 
                   tmp_0 = 8UL; else 
                                     #line 1480 
                                     tmp_0 = count;
  #line 1479 
  unsigned long len = tmp_0;
  #line 1482 
  char *p = (char *)(& buffer);
  #line 1484 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 1484 
    int tmp_2;
    #line 1484 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1484 
                                                             tmp_2 = 73; else 
                                                                    #line 1484 
                                                                    tmp_2 = 85;
    #line 1484 
    printk((char *)"\001",tmp_2,(char *)"store_scan_age");
  }
  #line 1486 
  strncpy((char *)(& buffer),buf,len);
  #line 1487 
  buffer[len] = (char)0;
  #line 1489 
  if ((((int)*(p + 1U) == 120 || (int)*(p + 1U) == 88) || (int)*p == 120) || (int)*p == 88) {
    #line 1490 
    p ++;
    #line 1491 
    if ((int)*p == 120 || (int)*p == 88) 
                                         #line 1492 
                                         p ++;
    #line 1493 
    val = simple_strtoul(p,& p,16U);
  }
  else 
       #line 1495 
       val = simple_strtoul(p,& p,10U);
  #line 1496 
  if ((char *)(& buffer) == p) {
    #line 1497 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 1497 
      int tmp_4;
      #line 1497 
      ;
      #line 1497 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1497 
                                                               tmp_4 = 73; else 
                                                                    #line 1497 
                                                                    tmp_4 = 85;
      #line 1497 
      printk((char *)"\001",tmp_4,(char *)"store_scan_age",(char *)(& dev->name));
    }
  }
  else {
    #line 1499 
    (priv->ieee)->scan_age = (int)val;
    #line 1500 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 1500 
      int tmp_6;
      #line 1500 
      ;
      #line 1500 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1500 
                                                               tmp_6 = 73; else 
                                                                    #line 1500 
                                                                    tmp_6 = 85;
      #line 1500 
      printk((char *)"\001",tmp_6,(char *)"store_scan_age",(priv->ieee)->scan_age);
    }
  }
  #line 1503 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 1503 
    int tmp_8;
    #line 1503 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1503 
                                                             tmp_8 = 73; else 
                                                                    #line 1503 
                                                                    tmp_8 = 85;
    #line 1503 
    printk((char *)"\001",tmp_8,(char *)"store_scan_age");
  }
  #line 1504 
  return (long)len;
}

#line 1507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_scan_age = {.attr = {.name = (char *)"scan_age", .mode = (unsigned short)420U}, .show = & show_scan_age, .store = & store_scan_age};
#line 1509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_led(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1512 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1513 
  return (long)sprintf(buf,(char *)"%d\n",(priv->config & 512U) == 0U);
}

#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_led(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1519 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1521 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 1521 
    int tmp_1;
    #line 1521 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1521 
                                                             tmp_1 = 73; else 
                                                                    #line 1521 
                                                                    tmp_1 = 85;
    #line 1521 
    printk((char *)"\001",tmp_1,(char *)"store_led");
  }
  #line 1523 
  if (count == 0UL) 
                    #line 1524 
                    return 0L;
  #line 1526 
  if ((int)*buf == 0) {
    #line 1527 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 1527 
      int tmp_3;
      #line 1527 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1527 
                                                               tmp_3 = 73; else 
                                                                    #line 1527 
                                                                    tmp_3 = 85;
      #line 1527 
      printk((char *)"\001",tmp_3,(char *)"store_led");
    }
    #line 1528 
    priv->config |= 512U;
    #line 1529 
    ipw_led_shutdown(priv);
  }
  else {
    #line 1531 
    if ((ipw_debug_level & 524288U) != 0U) {
      #line 1531 
      int tmp_5;
      #line 1531 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1531 
                                                               tmp_5 = 73; else 
                                                                    #line 1531 
                                                                    tmp_5 = 85;
      #line 1531 
      printk((char *)"\001",tmp_5,(char *)"store_led");
    }
    #line 1532 
    priv->config &= 4294966783U;
    #line 1533 
    ipw_led_init(priv);
  }
  #line 1536 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 1536 
    int tmp_7;
    #line 1536 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1536 
                                                             tmp_7 = 73; else 
                                                                    #line 1536 
                                                                    tmp_7 = 85;
    #line 1536 
    printk((char *)"\001",tmp_7,(char *)"store_led");
  }
  #line 1537 
  return (long)count;
}

#line 1540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_led = {.attr = {.name = (char *)"led", .mode = (unsigned short)420U}, .show = & show_led, .store = & store_led};
#line 1542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_status(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1545 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1546 
  return (long)sprintf(buf,(char *)"0x%08x\n",(int)p->status);
}

#line 1549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_status = {.attr = {.name = (char *)"status", .mode = (unsigned short)292U}, .show = & show_status};
#line 1551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_cfg(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1554 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1555 
  return (long)sprintf(buf,(char *)"0x%08x\n",(int)p->config);
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_cfg = {.attr = {.name = (char *)"cfg", .mode = (unsigned short)292U}, .show = & show_cfg};
#line 1560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_nic_type(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1563 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1564 
  return (long)sprintf(buf,(char *)"TYPE: %d\n",(int)priv->nic_type);
}

#line 1567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_nic_type = {.attr = {.name = (char *)"nic_type", .mode = (unsigned short)292U}, .show = & show_nic_type};
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_ucode_version(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1572 
  u32 len = 4U;
  #line 1572 
  u32 tmp = 0U;
  #line 1573 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1575 
  if (ipw_get_ordinal(p,61955U,(void *)(& tmp),& len) != 0) 
                                                            #line 1576 
                                                            return 0L;
  #line 1578 
  return (long)sprintf(buf,(char *)"0x%08x\n",tmp);
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_ucode_version = {.attr = {.name = (char *)"ucode_version", .mode = (unsigned short)420U}, .show = & show_ucode_version};
#line 1583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_rtc(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1586 
  u32 len = 4U;
  #line 1586 
  u32 tmp = 0U;
  #line 1587 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1589 
  if (ipw_get_ordinal(p,61958U,(void *)(& tmp),& len) != 0) 
                                                            #line 1590 
                                                            return 0L;
  #line 1592 
  return (long)sprintf(buf,(char *)"0x%08x\n",tmp);
}

#line 1595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_rtc = {.attr = {.name = (char *)"rtc", .mode = (unsigned short)420U}, .show = & show_rtc};
#line 1601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_eeprom_delay(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1604 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1605 
  int n = p->eeprom_delay;
  #line 1606 
  return (long)sprintf(buf,(char *)"%i\n",n);
}

#line 1608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_eeprom_delay(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1612 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1613 
  sscanf(buf,(char *)"%i",& p->eeprom_delay);
  #line 1614 
  return (long)strnlen(buf,count);
}

#line 1617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_eeprom_delay = {.attr = {.name = (char *)"eeprom_delay", .mode = (unsigned short)420U}, .show = & show_eeprom_delay, .store = & store_eeprom_delay};
#line 1619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_command_event_reg(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1622 
  u32 reg = 0U;
  #line 1623 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1625 
  reg = _ipw_read_reg32(p,3145732U);
  #line 1626 
  return (long)sprintf(buf,(char *)"0x%08x\n",reg);
}

#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_command_event_reg(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1632 
  u32 reg;
  #line 1633 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1635 
  sscanf(buf,(char *)"%x",& reg);
  #line 1636 
  ipw_write_reg32(p,3145732U,reg);
  #line 1637 
  return (long)strnlen(buf,count);
}

#line 1640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_command_event_reg = {.attr = {.name = (char *)"command_event_reg", .mode = (unsigned short)420U}, .show = & show_command_event_reg, .store = & store_command_event_reg};
#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_mem_gpio_reg(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1646 
  u32 reg = 0U;
  #line 1647 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1649 
  reg = _ipw_read_reg32(p,3150080U);
  #line 1650 
  return (long)sprintf(buf,(char *)"0x%08x\n",reg);
}

#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_mem_gpio_reg(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1656 
  u32 reg;
  #line 1657 
  struct ipw_priv *p = dev_get_drvdata(d);
  #line 1659 
  sscanf(buf,(char *)"%x",& reg);
  #line 1660 
  ipw_write_reg32(p,3150080U,reg);
  #line 1661 
  return (long)strnlen(buf,count);
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_mem_gpio_reg = {.attr = {.name = (char *)"mem_gpio_reg", .mode = (unsigned short)420U}, .show = & show_mem_gpio_reg, .store = & store_mem_gpio_reg};
#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_indirect_dword(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1669 
  u32 reg = 0U;
  #line 1670 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1672 
  if ((priv->status & 536870912U) != 0U) 
                                         #line 1673 
                                         reg = _ipw_read_reg32(priv,priv->indirect_dword); else 
                                                                    #line 1675 
                                                                    reg = 0U;
  #line 1677 
  return (long)sprintf(buf,(char *)"0x%08x\n",reg);
}

#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_indirect_dword(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1683 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1685 
  sscanf(buf,(char *)"%x",& priv->indirect_dword);
  #line 1686 
  priv->status |= 536870912U;
  #line 1687 
  return (long)strnlen(buf,count);
}

#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_indirect_dword = {.attr = {.name = (char *)"indirect_dword", .mode = (unsigned short)420U}, .show = & show_indirect_dword, .store = & store_indirect_dword};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_indirect_byte(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1696 
  u8 reg = (unsigned char)0U;
  #line 1697 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1699 
  if ((priv->status & 268435456U) != 0U) 
                                         #line 1700 
                                         reg = _ipw_read_reg8(priv,priv->indirect_byte); else 
                                                                    #line 1702 
                                                                    reg = (unsigned char)0U;
  #line 1704 
  return (long)sprintf(buf,(char *)"0x%02x\n",(int)reg);
}

#line 1706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_indirect_byte(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1710 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1712 
  sscanf(buf,(char *)"%x",& priv->indirect_byte);
  #line 1713 
  priv->status |= 268435456U;
  #line 1714 
  return (long)strnlen(buf,count);
}

#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_indirect_byte = {.attr = {.name = (char *)"indirect_byte", .mode = (unsigned short)420U}, .show = & show_indirect_byte, .store = & store_indirect_byte};
#line 1720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_direct_dword(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1723 
  u32 reg = 0U;
  #line 1724 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1726 
  if ((priv->status & 1073741824U) != 0U) {
    #line 1727 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 1727 
      int tmp_1;
      #line 1727 
      ;
      #line 1727 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1727 
                                                               tmp_1 = 73; else 
                                                                    #line 1727 
                                                                    tmp_1 = 85;
      #line 1727 
      printk((char *)"\001",tmp_1,(char *)"show_direct_dword",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1727,priv->direct_dword);
    }
    #line 1727 
    reg = _ipw_read32(priv,(unsigned long)priv->direct_dword);
  }
  else 
       #line 1729 
       reg = 0U;
  #line 1731 
  return (long)sprintf(buf,(char *)"0x%08x\n",reg);
}

#line 1733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_direct_dword(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1737 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1739 
  sscanf(buf,(char *)"%x",& priv->direct_dword);
  #line 1740 
  priv->status |= 1073741824U;
  #line 1741 
  return (long)strnlen(buf,count);
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_direct_dword = {.attr = {.name = (char *)"direct_dword", .mode = (unsigned short)420U}, .show = & show_direct_dword, .store = & store_direct_dword};
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int rf_kill_active(struct ipw_priv *priv)
{
  #line 1748 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 1748 
    int tmp_0;
    #line 1748 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1748 
                                                             tmp_0 = 73; else 
                                                                    #line 1748 
                                                                    tmp_0 = 85;
    #line 1748 
    printk((char *)"\001",tmp_0,(char *)"rf_kill_active",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1748,48U);
  }
  #line 1748 
  if ((_ipw_read32(priv,48UL) & 65536U) == 0U) {
    #line 1749 
    priv->status |= 4U;
    #line 1750 
    wiphy_rfkill_set_hw_state((priv->ieee)->wdev.wiphy,(_Bool)1);
  }
  else {
    #line 1752 
    priv->status &= 4294967291U;
    #line 1753 
    wiphy_rfkill_set_hw_state((priv->ieee)->wdev.wiphy,(_Bool)0);
  }
  #line 1756 
  return (int)(priv->status >> 2) & 1;
}

#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_rf_kill(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1767 
  int tmp_1;
  #line 1766 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1767 
  if (rf_kill_active(priv) != 0) 
                                 #line 1767 
                                 tmp_1 = 2; else 
                                                 #line 1767 
                                                 tmp_1 = 0;
  #line 1767 
  int val = ((int)(priv->status >> 3) & 1) | tmp_1;
  #line 1769 
  return (long)sprintf(buf,(char *)"%i\n",val);
}

#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_radio_kill_sw(struct ipw_priv *priv, int disable_radio)
{
  #line 1774 
  if ((disable_radio == 0) ^ (int)((_Bool)(priv->status >> 3 != 0))) 
    #line 1776 
    return 0;
  #line 1778 
  if ((ipw_debug_level & 131072U) != 0U) {
    #line 1778 
    char *tmp;
    #line 1778 
    int tmp_1;
    #line 1778 
    if (disable_radio != 0) 
                            #line 1778 
                            tmp = (char *)"OFF"; else 
                                                      #line 1778 
                                                      tmp = (char *)"ON";
    #line 1778 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1778 
                                                             tmp_1 = 73; else 
                                                                    #line 1778 
                                                                    tmp_1 = 85;
    #line 1778 
    printk((char *)"\001",tmp_1,(char *)"ipw_radio_kill_sw",tmp);
  }
  #line 1781 
  if (disable_radio != 0) {
    #line 1782 
    priv->status |= 8U;
    #line 1784 
    cancel_delayed_work(& priv->request_scan);
    #line 1785 
    cancel_delayed_work(& priv->request_direct_scan);
    #line 1786 
    cancel_delayed_work(& priv->request_passive_scan);
    #line 1787 
    cancel_delayed_work(& priv->scan_event);
    #line 1788 
    cif_schedule_work(& priv->down);
  }
  else {
    #line 1790 
    priv->status &= 4294967287U;
    #line 1791 
    if (rf_kill_active(priv) != 0) {
      #line 1792 
      if ((ipw_debug_level & 131072U) != 0U) {
        #line 1792 
        int tmp_3;
        #line 1792 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 1792 
                                                                 tmp_3 = 73; else 
                                                                    #line 1792 
                                                                    tmp_3 = 85;
        #line 1792 
        printk((char *)"\001",tmp_3,(char *)"ipw_radio_kill_sw");
      }
      #line 1795 
      cancel_delayed_work(& priv->rf_kill);
      #line 1796 
      ;
      #line 1796 
      cif_schedule_delayed_work(& priv->rf_kill,round_jiffies_relative(500UL));
    }
    else 
         #line 1799 
         cif_schedule_work(& priv->up);
  }
  #line 1802 
  return 1;
}

#line 1805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_rf_kill(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1808 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1810 
  ipw_radio_kill_sw(priv,(int)*buf == 49);
  #line 1812 
  return (long)count;
}

#line 1815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_rf_kill = {.attr = {.name = (char *)"rf_kill", .mode = (unsigned short)420U}, .show = & show_rf_kill, .store = & store_rf_kill};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_speed_scan(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1820 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1821 
  int pos = 0;
  #line 1821 
  int len = 0;
  #line 1822 
  if ((priv->config & 2048U) != 0U) {
    #line 1823 
    while ((unsigned int)priv->speed_scan[pos] != 0U) {
      #line 1825 
      int tmp_0;
      #line 1825 
      tmp_0 = pos;
      #line 1825 
      pos ++;
      #line 1824 
      ;
      #line 1824 
      ;
      #line 1825 
      len = sprintf(buf + (unsigned long)len,(char *)"%d ",
                (int)priv->speed_scan[tmp_0]) + len;
    }
    #line 1826 
    ;
    #line 1826 
    return (long)(sprintf(buf + (unsigned long)len,(char *)"\n") + len);
  }
  #line 1829 
  return (long)sprintf(buf,(char *)"0\n");
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_speed_scan(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1836 
  int channel;
  #line 1835 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1836 
  int pos = 0;
  #line 1837 
  char *p = buf;
  #line 1840 
  while (1) {
    #line 1840 
    channel = (int)simple_strtol(p,(char **)0,0U);
    #line 1840 
    if (! (channel != 0)) 
                          #line 1840 
                          break;
    {
      #line 1841 
      if (pos == 99) {
        #line 1842 
        priv->speed_scan[pos] = (unsigned char)0U;
        #line 1843 
        break;
      }
      #line 1846 
      if (libipw_is_valid_channel(priv->ieee,
                                (unsigned char)((int)((unsigned char)channel))) != 0) {
        #line 1847 
        int tmp_0;
        #line 1847 
        tmp_0 = pos;
        #line 1847 
        pos ++;
        #line 1847 
        priv->speed_scan[tmp_0] = (unsigned char)channel;
      }
      else 
           #line 1849 
           printk((char *)"\001",channel);
      #line 1851 
      p = strchr(p,32);
      #line 1852 
      if (p == (char *)0) 
                          #line 1853 
                          break;
      #line 1854 
      while ((int)*p == 32 || (int)*p == 9) 
                                            #line 1855 
                                            p ++;
    }
  }
  #line 1858 
  if (pos == 0) 
                #line 1859 
                priv->config &= 4294965247U;
  else {
    #line 1861 
    priv->speed_scan_pos = (unsigned char)0U;
    #line 1862 
    priv->config |= 2048U;
  }
  #line 1865 
  return (long)count;
}

#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_speed_scan = {.attr = {.name = (char *)"speed_scan", .mode = (unsigned short)420U}, .show = & show_speed_scan, .store = & store_speed_scan};
#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_net_stats(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1874 
  int tmp_0;
  #line 1873 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1874 
  if ((priv->config & 4096U) != 0U) 
                                    #line 1874 
                                    tmp_0 = 49; else 
                                                     #line 1874 
                                                     tmp_0 = 48;
  #line 1874 
  ;
  #line 1874 
  return (long)sprintf(buf,(char *)"%c\n",tmp_0);
}

#line 1877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t store_net_stats(struct device *d, struct device_attribute *attr, char *buf, size_t count)
{
  #line 1880 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1881 
  if ((int)*buf == 49) 
                       #line 1882 
                       priv->config |= 4096U; else 
                                                   #line 1884 
                                                   priv->config &= 4294963199U;
  #line 1886 
  return (long)count;
}

#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_net_stats = {.attr = {.name = (char *)"net_stats", .mode = (unsigned short)420U}, .show = & show_net_stats, .store = & store_net_stats};
#line 1891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static ssize_t show_channels(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 1897 
  int i;
  #line 1895 
  struct ipw_priv *priv = dev_get_drvdata(d);
  #line 1896 
  struct libipw_geo *geo = libipw_get_geo(priv->ieee);
  #line 1897 
  int len = 0;
  #line 1899 
  len = sprintf(buf + (unsigned long)len,(char *)"Displaying %d channels in 2.4Ghz band ",(int)geo->bg_channels);
  #line 1903 
  i = 0;
  #line 1903 
  while ((int)geo->bg_channels > i) {
    #line 1912 
    char *tmp_1;
    #line 1910 
    char *tmp_2;
    #line 1907 
    char *tmp_3;
    #line 1905 
    char *tmp_4;
    #line 1912 
    if (((int)geo->bg[i].flags & 4) != 0) 
                                          #line 1912 
                                          tmp_1 = (char *)"B"; else 
                                                                    #line 1912 
                                                                    tmp_1 = (char *)"B/G";
    #line 1910 
    if (((int)geo->bg[i].flags & 1) != 0) 
                                          #line 1910 
                                          tmp_2 = (char *)"passive only"; else 
                                                                    #line 1910 
                                                                    tmp_2 = (char *)"active/passive";
    #line 1907 
    if (((int)geo->bg[i].flags & 8) != 0 || ((int)geo->bg[i].flags & 32) != 0) 
      #line 1907 
      tmp_3 = (char *)""; else 
                               #line 1907 
                               tmp_3 = (char *)", IBSS";
    #line 1905 
    if (((int)geo->bg[i].flags & 32) != 0) 
                                           #line 1905 
                                           tmp_4 = (char *)" (radar spectrum)"; else 
                                                                    #line 1905 
                                                                    tmp_4 = (char *)"";
    #line 1904 
    ;
    #line 1904 
    ;
    #line 1914 
    len = sprintf(buf + (unsigned long)len,
                (char *)"%d: BSS%s%s, %s, Band %s.\n",
                (int)geo->bg[i].channel,tmp_4,tmp_3,tmp_2,tmp_1) + len;
    #line 1903 
    i ++;
  }
  #line 1919 
  len = sprintf(buf + (unsigned long)len,
                (char *)"Displaying %d channels in 5.2Ghz band ",
                (int)geo->a_channels) + len;
  #line 1920 
  i = 0;
  #line 1920 
  while ((int)geo->a_channels > i) {
    #line 1927 
    char *tmp_7;
    #line 1924 
    char *tmp_8;
    #line 1922 
    char *tmp_9;
    #line 1927 
    if (((int)geo->a[i].flags & 1) != 0) 
                                         #line 1927 
                                         tmp_7 = (char *)"passive only"; else 
                                                                    #line 1927 
                                                                    tmp_7 = (char *)"active/passive";
    #line 1924 
    if (((int)geo->a[i].flags & 8) != 0 || ((int)geo->a[i].flags & 32) != 0) 
      #line 1924 
      tmp_8 = (char *)""; else 
                               #line 1924 
                               tmp_8 = (char *)", IBSS";
    #line 1922 
    if (((int)geo->a[i].flags & 32) != 0) 
                                          #line 1922 
                                          tmp_9 = (char *)" (radar spectrum)"; else 
                                                                    #line 1922 
                                                                    tmp_9 = (char *)"";
    #line 1921 
    ;
    #line 1921 
    ;
    #line 1929 
    len = sprintf(buf + (unsigned long)len,(char *)"%d: BSS%s%s, %s.\n",
                 (int)geo->a[i].channel,tmp_9,tmp_8,tmp_7) + len;
    #line 1920 
    i ++;
  }
  #line 1932 
  return (long)len;
}

#line 1935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct device_attribute dev_attr_channels = {.attr = {.name = (char *)"channels", .mode = (unsigned short)256U}, .show = & show_channels};
#line 1937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void notify_wx_assoc_event(struct ipw_priv *priv)
{
  #line 1939 
  union iwreq_data wrqu;
  #line 1940 
  wrqu.ap_addr.sa_family = (unsigned short)1U;
  #line 1941 
  if ((priv->status & 128U) != 0U) 
                                   #line 1942 
                                   memcpy((void *)(& wrqu.ap_addr.sa_data),(void *)(& priv->bssid),6UL); else 
                                                                    #line 1944 
                                                                    eth_zero_addr((u8 *)(& wrqu.ap_addr.sa_data));
  #line 1945 
  wireless_send_event(priv->net_dev,35605U,& wrqu,(char *)0);
  #line 1946 
  return;
}

#line 1948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_irq_tasklet(struct ipw_priv *priv)
{
  #line 1950 
  u32 inta;
  #line 1950 
  u32 inta_mask;
  #line 1951 
  unsigned long flags;
  #line 1950 
  u32 handled = 0U;
  #line 1952 
  int rc = 0;
  #line 1954 
  cif___ldv_spin_lock_irq_lock_of_ipw_priv(& priv->irq_lock);
  #line 1956 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 1956 
    int tmp_0;
    #line 1956 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1956 
                                                             tmp_0 = 73; else 
                                                                    #line 1956 
                                                                    tmp_0 = 85;
    #line 1956 
    printk((char *)"\001",tmp_0,(char *)"ipw_irq_tasklet",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1956,8U);
  }
  #line 1956 
  inta = _ipw_read32(priv,8UL);
  #line 1957 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 1957 
    int tmp_4;
    #line 1957 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 1957 
                                                             tmp_4 = 73; else 
                                                                    #line 1957 
                                                                    tmp_4 = 85;
    #line 1957 
    printk((char *)"\001",tmp_4,(char *)"ipw_irq_tasklet",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",1957,12U);
  }
  #line 1957 
  inta_mask = _ipw_read32(priv,12UL);
  #line 1959 
  if (inta == 4294967295U) {
    #line 1961 
    printk((char *)"\001");
    #line 1963 
    inta = 0U;
  }
  #line 1965 
  inta = (inta_mask & inta) & 3308386354U;
  #line 1968 
  inta = priv->isr_inta | inta;
  #line 1970 
  cif_spin_unlock_irqrestore_irq_lock_of_ipw_priv(& priv->irq_lock,flags);
  #line 1972 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 1975 
  if ((inta & 2U) != 0U) {
    #line 1976 
    ipw_rx(priv);
    #line 1977 
    handled |= 2U;
  }
  #line 1980 
  if ((inta & 2048U) != 0U) {
    #line 1981 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 1981 
      int tmp_8;
      #line 1981 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1981 
                                                               tmp_8 = 73; else 
                                                                    #line 1981 
                                                                    tmp_8 = 85;
      #line 1981 
      printk((char *)"\001",tmp_8,(char *)"ipw_irq_tasklet");
    }
    #line 1982 
    rc = ipw_queue_tx_reclaim(priv,& priv->txq_cmd,-1);
    #line 1983 
    priv->status &= 4294967294U;
    #line 1984 
    __wake_up(& priv->wait_command_queue,1U,1,(void *)0);
    #line 1985 
    handled |= 2048U;
  }
  #line 1988 
  if ((inta & 4096U) != 0U) {
    #line 1989 
    if ((ipw_debug_level & 8388608U) != 0U) {
      #line 1989 
      int tmp_10;
      #line 1989 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1989 
                                                               tmp_10 = 73; else 
                                                                    #line 1989 
                                                                    tmp_10 = 85;
      #line 1989 
      printk((char *)"\001",tmp_10,(char *)"ipw_irq_tasklet");
    }
    #line 1990 
    rc = ipw_queue_tx_reclaim(priv,& priv->txq[0],0);
    #line 1991 
    handled |= 4096U;
  }
  #line 1994 
  if ((inta & 8192U) != 0U) {
    #line 1995 
    if ((ipw_debug_level & 8388608U) != 0U) {
      #line 1995 
      int tmp_12;
      #line 1995 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 1995 
                                                               tmp_12 = 73; else 
                                                                    #line 1995 
                                                                    tmp_12 = 85;
      #line 1995 
      printk((char *)"\001",tmp_12,(char *)"ipw_irq_tasklet");
    }
    #line 1996 
    rc = ipw_queue_tx_reclaim(priv,& priv->txq[1],1);
    #line 1997 
    handled |= 8192U;
  }
  #line 2000 
  if ((inta & 16384U) != 0U) {
    #line 2001 
    if ((ipw_debug_level & 8388608U) != 0U) {
      #line 2001 
      int tmp_14;
      #line 2001 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2001 
                                                               tmp_14 = 73; else 
                                                                    #line 2001 
                                                                    tmp_14 = 85;
      #line 2001 
      printk((char *)"\001",tmp_14,(char *)"ipw_irq_tasklet");
    }
    #line 2002 
    rc = ipw_queue_tx_reclaim(priv,& priv->txq[2],2);
    #line 2003 
    handled |= 16384U;
  }
  #line 2006 
  if ((inta & 32768U) != 0U) {
    #line 2007 
    if ((ipw_debug_level & 8388608U) != 0U) {
      #line 2007 
      int tmp_16;
      #line 2007 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2007 
                                                               tmp_16 = 73; else 
                                                                    #line 2007 
                                                                    tmp_16 = 85;
      #line 2007 
      printk((char *)"\001",tmp_16,(char *)"ipw_irq_tasklet");
    }
    #line 2008 
    rc = ipw_queue_tx_reclaim(priv,& priv->txq[3],3);
    #line 2009 
    handled |= 32768U;
  }
  #line 2012 
  if ((inta & 16U) != 0U) {
    #line 2013 
    printk((char *)"\001");
    #line 2014 
    handled |= 16U;
  }
  #line 2017 
  if ((inta & 32U) != 0U) {
    #line 2018 
    printk((char *)"\001");
    #line 2019 
    handled |= 32U;
  }
  #line 2022 
  if ((inta & 65536U) != 0U) {
    #line 2023 
    printk((char *)"\001");
    #line 2024 
    handled |= 65536U;
  }
  #line 2027 
  if ((inta & 16777216U) != 0U) {
    #line 2028 
    printk((char *)"\001");
    #line 2029 
    handled |= 16777216U;
  }
  #line 2032 
  if ((inta & 33554432U) != 0U) {
    #line 2033 
    printk((char *)"\001");
    #line 2034 
    handled |= 33554432U;
  }
  #line 2037 
  if ((inta & 67108864U) != 0U) {
    #line 2038 
    if ((ipw_debug_level & 131072U) != 0U) {
      #line 2038 
      int tmp_18;
      #line 2038 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2038 
                                                               tmp_18 = 73; else 
                                                                    #line 2038 
                                                                    tmp_18 = 85;
      #line 2038 
      printk((char *)"\001",tmp_18,(char *)"ipw_irq_tasklet");
    }
    #line 2039 
    priv->status |= 4U;
    #line 2040 
    wiphy_rfkill_set_hw_state((priv->ieee)->wdev.wiphy,(_Bool)1);
    #line 2041 
    __wake_up(& priv->wait_command_queue,1U,1,(void *)0);
    #line 2042 
    priv->status &= 4294966911U;
    #line 2043 
    cancel_delayed_work(& priv->request_scan);
    #line 2044 
    cancel_delayed_work(& priv->request_direct_scan);
    #line 2045 
    cancel_delayed_work(& priv->request_passive_scan);
    #line 2046 
    cancel_delayed_work(& priv->scan_event);
    #line 2047 
    cif_schedule_work(& priv->link_down);
    #line 2048 
    cif_schedule_delayed_work(& priv->rf_kill,500UL);
    #line 2049 
    handled |= 67108864U;
  }
  #line 2052 
  if ((inta & 1073741824U) != 0U) {
    #line 2053 
    printk((char *)"\001");
    #line 2054 
    if (priv->error != (struct ipw_fw_error *)0) {
      #line 2055 
      if ((ipw_debug_level & 65536U) != 0U) {
        #line 2055 
        int tmp_20;
        #line 2055 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 2055 
                                                                 tmp_20 = 73; else 
                                                                    #line 2055 
                                                                    tmp_20 = 85;
        #line 2055 
        printk((char *)"\001",tmp_20,(char *)"ipw_irq_tasklet");
      }
      #line 2056 
      if ((ipw_debug_level & 262144U) != 0U) {
        #line 2057 
        struct ipw_fw_error *error = ipw_alloc_error_log(priv);
        #line 2059 
        ipw_dump_error_log(priv,error);
        #line 2060 
        kfree((void *)error);
      }
    }
    else {
      #line 2063 
      priv->error = ipw_alloc_error_log(priv);
      #line 2064 
      if (priv->error != (struct ipw_fw_error *)0) {
        #line 2065 
        if ((ipw_debug_level & 65536U) != 0U) {
          #line 2065 
          int tmp_23;
          #line 2065 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 2065 
                                                                   tmp_23 = 73; else 
                                                                    #line 2065 
                                                                    tmp_23 = 85;
          #line 2065 
          printk((char *)"\001",tmp_23,(char *)"ipw_irq_tasklet");
        }
      }
      else 
        #line 2067 
        if ((ipw_debug_level & 65536U) != 0U) {
          #line 2067 
          int tmp_25;
          #line 2067 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 2067 
                                                                   tmp_25 = 73; else 
                                                                    #line 2067 
                                                                    tmp_25 = 85;
          #line 2067 
          printk((char *)"\001",tmp_25,(char *)"ipw_irq_tasklet");
        }
      #line 2069 
      if ((ipw_debug_level & 262144U) != 0U) 
                                             #line 2070 
                                             ipw_dump_error_log(priv,priv->error);
    }
    #line 2075 
    if ((unsigned int)(priv->ieee)->sec.encrypt != 0U) {
      #line 2076 
      priv->status &= 4294967167U;
      #line 2077 
      notify_wx_assoc_event(priv);
    }
    #line 2082 
    priv->status &= 4294967263U;
    #line 2085 
    priv->status &= 4294967294U;
    #line 2086 
    __wake_up(& priv->wait_command_queue,1U,1,(void *)0);
    #line 2088 
    cif_schedule_work(& priv->adapter_restart);
    #line 2089 
    handled |= 1073741824U;
  }
  #line 2092 
  if ((inta & 2147483648U) != 0U) {
    #line 2093 
    printk((char *)"\001");
    #line 2094 
    handled |= 2147483648U;
  }
  #line 2097 
  if (handled != inta) 
                       #line 2098 
                       printk((char *)"\001",~ handled & inta);
  #line 2101 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 2104 
  ipw_enable_interrupts(priv);
  #line 2105 
  return;
}

#line 2108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static char *get_cmd_string(u8 cmd)
{
  #line 2110 
  switch ((int)cmd) {
    #line 2111 
    case 2: 
            #line 2111 
    ;
    #line 2111 
    return (char *)"HOST_COMPLETE";
    #line 2112 
    case 4: 
            #line 2112 
    ;
    #line 2112 
    return (char *)"POWER_DOWN";
    #line 2113 
    case 6: 
            #line 2113 
    ;
    #line 2113 
    return (char *)"SYSTEM_CONFIG";
    #line 2114 
    case 7: 
            #line 2114 
    ;
    #line 2114 
    return (char *)"MULTICAST_ADDRESS";
    #line 2115 
    case 8: 
            #line 2115 
    ;
    #line 2115 
    return (char *)"SSID";
    #line 2116 
    case 11: 
             #line 2116 
    ;
    #line 2116 
    return (char *)"ADAPTER_ADDRESS";
    #line 2117 
    case 12: 
             #line 2117 
    ;
    #line 2117 
    return (char *)"PORT_TYPE";
    #line 2118 
    case 15: 
             #line 2118 
    ;
    #line 2118 
    return (char *)"RTS_THRESHOLD";
    #line 2119 
    case 16: 
             #line 2119 
    ;
    #line 2119 
    return (char *)"FRAG_THRESHOLD";
    #line 2120 
    case 17: 
             #line 2120 
    ;
    #line 2120 
    return (char *)"POWER_MODE";
    #line 2121 
    case 18: 
             #line 2121 
    ;
    #line 2121 
    return (char *)"WEP_KEY";
    #line 2122 
    case 19: 
             #line 2122 
    ;
    #line 2122 
    return (char *)"TGI_TX_KEY";
    #line 2123 
    case 20: 
             #line 2123 
    ;
    #line 2123 
    return (char *)"SCAN_REQUEST";
    #line 2124 
    case 26: 
             #line 2124 
    ;
    #line 2124 
    return (char *)"SCAN_REQUEST_EXT";
    #line 2125 
    case 21: 
             #line 2125 
    ;
    #line 2125 
    return (char *)"ASSOCIATE";
    #line 2126 
    case 22: 
             #line 2126 
    ;
    #line 2126 
    return (char *)"SUPPORTED_RATES";
    #line 2127 
    case 23: 
             #line 2127 
    ;
    #line 2127 
    return (char *)"SCAN_ABORT";
    #line 2128 
    case 24: 
             #line 2128 
    ;
    #line 2128 
    return (char *)"TX_FLUSH";
    #line 2129 
    case 25: 
             #line 2129 
    ;
    #line 2129 
    return (char *)"QOS_PARAMETERS";
    #line 2130 
    case 30: 
             #line 2130 
    ;
    #line 2130 
    return (char *)"DINO_CONFIG";
    #line 2131 
    case 31: 
             #line 2131 
    ;
    #line 2131 
    return (char *)"RSN_CAPABILITIES";
    #line 2132 
    case 32: 
             #line 2132 
    ;
    #line 2132 
    return (char *)"RX_KEY";
    #line 2133 
    case 33: 
             #line 2133 
    ;
    #line 2133 
    return (char *)"CARD_DISABLE";
    #line 2134 
    case 34: 
             #line 2134 
    ;
    #line 2134 
    return (char *)"SEED_NUMBER";
    #line 2135 
    case 35: 
             #line 2135 
    ;
    #line 2135 
    return (char *)"TX_POWER";
    #line 2136 
    case 36: 
             #line 2136 
    ;
    #line 2136 
    return (char *)"COUNTRY_INFO";
    #line 2137 
    case 37: 
             #line 2137 
    ;
    #line 2137 
    return (char *)"AIRONET_INFO";
    #line 2138 
    case 38: 
             #line 2138 
    ;
    #line 2138 
    return (char *)"AP_TX_POWER";
    #line 2139 
    case 39: 
             #line 2139 
    ;
    #line 2139 
    return (char *)"CCKM_INFO";
    #line 2140 
    case 40: 
             #line 2140 
    ;
    #line 2140 
    return (char *)"CCX_VER_INFO";
    #line 2141 
    case 41: 
             #line 2141 
    ;
    #line 2141 
    return (char *)"SET_CALIBRATION";
    #line 2142 
    case 42: 
             #line 2142 
    ;
    #line 2142 
    return (char *)"SENSITIVITY_CALIB";
    #line 2143 
    case 51: 
             #line 2143 
    ;
    #line 2143 
    return (char *)"RETRY_LIMIT";
    #line 2144 
    case 58: 
             #line 2144 
    ;
    #line 2144 
    return (char *)"IPW_PRE_POWER_DOWN";
    #line 2145 
    case 60: 
             #line 2145 
    ;
    #line 2145 
    return (char *)"VAP_BEACON_TEMPLATE";
    #line 2146 
    case 61: 
             #line 2146 
    ;
    #line 2146 
    return (char *)"VAP_DTIM_PERIOD";
    #line 2147 
    case 62: 
             #line 2147 
    ;
    #line 2147 
    return (char *)"EXT_SUPPORTED_RATES";
    #line 2148 
    case 63: 
             #line 2148 
    ;
    #line 2148 
    return (char *)"VAP_LOCAL_TX_PWR_CONSTRAINT";
    #line 2149 
    case 64: 
             #line 2149 
    ;
    #line 2149 
    return (char *)"VAP_QUIET_INTERVALS";
    #line 2150 
    case 65: 
             #line 2150 
    ;
    #line 2150 
    return (char *)"VAP_CHANNEL_SWITCH";
    #line 2151 
    case 66: 
             #line 2151 
    ;
    #line 2151 
    return (char *)"VAP_MANDATORY_CHANNELS";
    #line 2152 
    case 67: 
             #line 2152 
    ;
    #line 2152 
    return (char *)"VAP_CELL_PWR_LIMIT";
    #line 2153 
    case 68: 
             #line 2153 
    ;
    #line 2153 
    return (char *)"VAP_CF_PARAM_SET";
    #line 2154 
    case 69: 
             #line 2154 
    ;
    #line 2154 
    return (char *)"VAP_SET_BEACONING_STATE";
    #line 2155 
    case 80: 
             #line 2155 
    ;
    #line 2155 
    return (char *)"MEASUREMENT";
    #line 2156 
    case 81: 
             #line 2156 
    ;
    #line 2156 
    return (char *)"POWER_CAPABILITY";
    #line 2157 
    case 82: 
             #line 2157 
    ;
    #line 2157 
    return (char *)"SUPPORTED_CHANNELS";
    #line 2158 
    case 83: 
             #line 2158 
    ;
    #line 2158 
    return (char *)"TPC_REPORT";
    #line 2159 
    case 84: 
             #line 2159 
    ;
    #line 2159 
    return (char *)"WME_INFO";
    #line 2160 
    case 85: 
             #line 2160 
    ;
    #line 2160 
    return (char *)"PRODUCTION_COMMAND";
    #line 2161 
    default: 
             #line 2161 
    ;
    #line 2162 
    return (char *)"UNKNOWN";
  }
}

#line 2168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int __ipw_send_cmd(struct ipw_priv *priv, struct host_cmd *cmd)
{
  #line 2217 
  long __ret;
  #line 2171 
  unsigned long flags;
  #line 2172 
  unsigned long now;
  #line 2172 
  unsigned long end;
  #line 2170 
  int rc = 0;
  #line 2174 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 2175 
  if ((priv->status & 1U) != 0U) {
    #line 2176 
    printk((char *)"\001",get_cmd_string((unsigned char)((int)cmd->cmd)));
    #line 2178 
    cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
    #line 2179 
    return -11;
  }
  #line 2182 
  priv->status |= 1U;
  #line 2184 
  if (priv->cmdlog != (struct ipw_cmd_log *)0) {
    #line 2185 
    (priv->cmdlog + (unsigned long)priv->cmdlog_pos)->jiffies = jiffies;
    #line 2186 
    (priv->cmdlog + (unsigned long)priv->cmdlog_pos)->cmd.cmd = cmd->cmd;
    #line 2187 
    (priv->cmdlog + (unsigned long)priv->cmdlog_pos)->cmd.len = cmd->len;
    #line 2188 
    memcpy((void *)(& (priv->cmdlog + (unsigned long)priv->cmdlog_pos)->cmd.param),(void *)cmd->param,(unsigned long)cmd->len);
    #line 2190 
    (priv->cmdlog + (unsigned long)priv->cmdlog_pos)->retcode = -1;
  }
  #line 2193 
  if ((ipw_debug_level & 32U) != 0U) {
    #line 2193 
    char *tmp_0;
    #line 2193 
    int tmp_2;
    #line 2193 
    ;
    #line 2193 
    ;
    #line 2193 
    ;
    #line 2193 
    tmp_0 = get_cmd_string((unsigned char)((int)cmd->cmd));
    #line 2193 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2193 
                                                             tmp_2 = 73; else 
                                                                    #line 2193 
                                                                    tmp_2 = 85;
    #line 2193 
    printk((char *)"\001",tmp_2,(char *)"__ipw_send_cmd",tmp_0,(int)cmd->cmd,(int)cmd->len,priv->status);
  }
  #line 2198 
  if ((unsigned int)cmd->cmd == 18U) {
    #line 2199 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 2199 
      int tmp_4;
      #line 2199 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2199 
                                                               tmp_4 = 73; else 
                                                                    #line 2199 
                                                                    tmp_4 = 85;
      #line 2199 
      printk((char *)"\001",tmp_4,(char *)"__ipw_send_cmd");
    }
  }
  else 
       #line 2202 
       printk_buf(32,(u8 *)cmd->param,(unsigned int)cmd->len);
  #line 2204 
  rc = ipw_queue_tx_hcmd(priv,(int)cmd->cmd,(void *)cmd->param,(int)cmd->len,0);
  #line 2205 
  if (rc != 0) {
    #line 2206 
    priv->status &= 4294967294U;
    #line 2207 
    ;
    #line 2207 
    printk((char *)"\001",get_cmd_string((unsigned char)((int)cmd->cmd)),rc);
    #line 2209 
    cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
    #line 2210 
    goto exit;
  }
  #line 2212 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 2214 
  now = jiffies;
  #line 2215 
  end = now + 250UL;
  #line 2216 
  again: 
         #line 2216 
  ;
  #line 2217 
  __ret = (long)(end - now);
  #line 2217 
  __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",2217,0);
  {
    #line 2217 
    bool __cond_0;
    #line 2217 
    __cond_0 = (_Bool)((priv->status & 1U) == 0U);
    #line 2217 
    if ((int)__cond_0 != 0 && __ret == 0L) 
                                           #line 2217 
                                           __ret = 1L;
    #line 2217 
    if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
      #line 2217 
      long __ret_0;
      {
        #line 2217 
        struct wait_queue_entry __wq_entry;
        #line 2217 
        __ret_0 = (long)(end - now);
        #line 2217 
        init_wait_entry(& __wq_entry,0);
        #line 2217 
        while (1) {
          #line 2217 
          bool __cond;
          #line 2217 
          long __int = prepare_to_wait_event(& priv->wait_command_queue,& __wq_entry,1);
          #line 2217 
          __cond = (_Bool)((priv->status & 1U) == 0U);
          #line 2217 
          if ((int)__cond != 0 && __ret_0 == 0L) 
                                                 #line 2217 
                                                 __ret_0 = 1L;
          #line 2217 
          if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                               #line 2217 
                                                               break;
          #line 2217 
          if (__int != 0L) {
            #line 2217 
            __ret_0 = __int;
            #line 2217 
            goto __out_0;
          }
          #line 2217 
          __ret_0 = schedule_timeout(__ret_0);
        }
        #line 2217 
        finish_wait(& priv->wait_command_queue,& __wq_entry);
        #line 2217 
        __out_0: 
                 #line 2217 
        ;
        }
      #line 2217 
      __ret = __ret_0;
    }
  }
  #line 2217 
  rc = (int)__ret;
  #line 2221 
  if (rc < 0) {
    #line 2222 
    now = jiffies;
    {
      #line 2223 
      unsigned long __dummy;
      #line 2223 
      unsigned long __dummy2;
      }
    #line 2223 
    if (1 != 0) {
      {
        #line 2223 
        unsigned long __dummy_0;
        #line 2223 
        unsigned long __dummy2_0;
        }
      #line 2223 
      if (1 != 0) 
        #line 2223 
        if ((long)(now - end) < 0L) 
                                    #line 2224 
                                    goto again;
    }
    #line 2225 
    rc = 0;
  }
  #line 2228 
  if (rc == 0) {
    #line 2229 
    cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
    #line 2230 
    if ((priv->status & 1U) != 0U) {
      #line 2231 
      printk((char *)"\001",get_cmd_string((unsigned char)((int)cmd->cmd)));
      #line 2233 
      priv->status &= 4294967294U;
      #line 2234 
      cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
      #line 2235 
      rc = -5;
      #line 2236 
      goto exit;
    }
    #line 2238 
    cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  }
  else 
       #line 2240 
       rc = 0;
  #line 2242 
  if ((priv->status & 4U) != 0U) {
    #line 2243 
    printk((char *)"\001",get_cmd_string((unsigned char)((int)cmd->cmd)));
    #line 2245 
    rc = -5;
    #line 2246 
    goto exit;
  }
  #line 2249 
  exit: 
        #line 2249 
  ;
  #line 2250 
  if (priv->cmdlog != (struct ipw_cmd_log *)0) {
    #line 2251 
    int tmp_15;
    #line 2251 
    tmp_15 = priv->cmdlog_pos;
    #line 2251 
    (priv->cmdlog_pos) ++;
    #line 2251 
    (priv->cmdlog + (unsigned long)tmp_15)->retcode = rc;
    #line 2252 
    priv->cmdlog_pos %= priv->cmdlog_len;
  }
  #line 2254 
  return rc;
}

#line 2257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_cmd_simple(struct ipw_priv *priv, u8 command)
{
  #line 2259 
  struct host_cmd cmd = {.cmd = command, .len = (unsigned char)0, .reserved = (unsigned short)0, .param = (u32 *)0};
  #line 2263 
  return __ipw_send_cmd(priv,& cmd);
}

#line 2266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_cmd_pdu(struct ipw_priv *priv, u8 command, u8 len, void *data)
{
  #line 2269 
  struct host_cmd cmd = {.cmd = command, .len = len, .reserved = (unsigned short)0, .param = (u32 *)data};
  #line 2275 
  return __ipw_send_cmd(priv,& cmd);
}

#line 2278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_host_complete(struct ipw_priv *priv)
{
  #line 2280 
  if (priv == (struct ipw_priv *)0) {
    #line 2281 
    printk((char *)"\001");
    #line 2282 
    return -1;
  }
  #line 2285 
  return ipw_send_cmd_simple(priv,(unsigned char)2);
}

#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_system_config(struct ipw_priv *priv)
{
  #line 2290 
  return ipw_send_cmd_pdu(priv,(unsigned char)6,(unsigned char)20,
                       (void *)(& priv->sys_config));
}

#line 2295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_ssid(struct ipw_priv *priv, u8 *ssid, int len)
{
  #line 2302 
  int __UNIQUE_ID___x461;
  #line 2302 
  int tmp;
  #line 2297 
  if (priv == (struct ipw_priv *)0 || ssid == (u8 *)0U) {
    #line 2298 
    printk((char *)"\001");
    #line 2299 
    return -1;
  }
  #line 2302 
  ;
  {
    #line 2302 
    __UNIQUE_ID___x461 = len;
    #line 2302 
    int __UNIQUE_ID___y462 = 32;
    #line 2302 
    if (__UNIQUE_ID___x461 < __UNIQUE_ID___y462) 
                                                 #line 2302 
                                                 tmp = __UNIQUE_ID___x461; else 
                                                                    #line 2302 
                                                                    tmp = __UNIQUE_ID___y462;
    }
  #line 2302 
  ;
  #line 2302 
  return ipw_send_cmd_pdu(priv,(unsigned char)8,
                         (unsigned char)((int)((unsigned char)tmp)),
                         (void *)ssid);
}

#line 2306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_adapter_address(struct ipw_priv *priv, u8 *mac)
{
  #line 2308 
  if (priv == (struct ipw_priv *)0 || mac == (u8 *)0U) {
    #line 2309 
    printk((char *)"\001");
    #line 2310 
    return -1;
  }
  #line 2313 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 2313 
    int tmp_0;
    #line 2313 
    ;
    #line 2313 
    ;
    #line 2313 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2313 
                                                             tmp_0 = 73; else 
                                                                    #line 2313 
                                                                    tmp_0 = 85;
    #line 2313 
    printk((char *)"\001",tmp_0,(char *)"ipw_send_adapter_address",(char *)(& (priv->net_dev)->name),mac);
  }
  #line 2316 
  return ipw_send_cmd_pdu(priv,(unsigned char)11,(unsigned char)6,(void *)mac);
}

#line 2319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_adapter_restart(void *adapter)
{
  #line 2321 
  struct ipw_priv *priv = (struct ipw_priv *)adapter;
  #line 2323 
  if ((priv->status & 12U) != 0U) 
                                  #line 2324 
                                  return;
  #line 2326 
  ipw_down(priv);
  #line 2328 
  if (priv->assoc_network != (struct libipw_network *)0 && ((int)(priv->assoc_network)->capability & 2) != 0) 
    #line 2330 
    ipw_remove_current_network(priv);
  #line 2332 
  if (ipw_up(priv) != 0) {
    #line 2333 
    printk((char *)"\001");
    #line 2334 
    return;
  }
  #line 2336 
  return;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_adapter_restart(struct work_struct *work)
{
  #line 2341 
  void *__mptr;
  #line 2341 
  __mptr = (void *)work;
  #line 2340 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709546552U));
  #line 2342 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 2343 
  ipw_adapter_restart((void *)priv);
  #line 2344 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 2345 
  return;
}

#line 2347 
#line 6138 
static void ipw_abort_scan(struct ipw_priv *priv);
#line 2351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_scan_check(void *data)
{
  #line 2353 
  struct ipw_priv *priv = (struct ipw_priv *)data;
  #line 2355 
  if ((priv->status & 4194304U) != 0U) {
    #line 2356 
    if ((ipw_debug_level & 2048U) != 0U) {
      #line 2356 
      unsigned int tmp;
      #line 2356 
      int tmp_1;
      #line 2356 
      tmp = jiffies_to_msecs(1250UL);
      #line 2356 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2356 
                                                               tmp_1 = 73; else 
                                                                    #line 2356 
                                                                    tmp_1 = 85;
      #line 2356 
      printk((char *)"\001",tmp_1,(char *)"ipw_scan_check",tmp);
    }
    #line 2359 
    cif_schedule_work(& priv->adapter_restart);
  }
  else 
    #line 2360 
    if ((priv->status & 2097152U) != 0U) {
      #line 2361 
      if ((ipw_debug_level & 2048U) != 0U) {
        #line 2361 
        unsigned int tmp_2;
        #line 2361 
        int tmp_4;
        #line 2361 
        tmp_2 = jiffies_to_msecs(1250UL);
        #line 2361 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 2361 
                                                                 tmp_4 = 73; else 
                                                                    #line 2361 
                                                                    tmp_4 = 85;
        #line 2361 
        printk((char *)"\001",tmp_4,(char *)"ipw_scan_check",tmp_2);
      }
      #line 2364 
      ipw_abort_scan(priv);
      #line 2365 
      cif_schedule_delayed_work(& priv->scan_check,250UL);
    }
  #line 2367 
  return;
}

#line 2369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_scan_check(struct work_struct *work)
{
  #line 2372 
  void *__mptr;
  #line 2372 
  __mptr = (void *)work;
  #line 2371 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545784U));
  #line 2373 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 2374 
  ipw_scan_check((void *)priv);
  #line 2375 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 2376 
  return;
}

#line 2378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_scan_request_ext(struct ipw_priv *priv, struct ipw_scan_request_ext *request)
{
  #line 2381 
  return ipw_send_cmd_pdu(priv,(unsigned char)26,(unsigned char)96,
                       (void *)request);
}

#line 2385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_scan_abort(struct ipw_priv *priv)
{
  #line 2387 
  if (priv == (struct ipw_priv *)0) {
    #line 2388 
    printk((char *)"\001");
    #line 2389 
    return -1;
  }
  #line 2392 
  return ipw_send_cmd_simple(priv,(unsigned char)23);
}

#line 2395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_set_sensitivity(struct ipw_priv *priv, u16 sens)
{
  #line 2397 
  struct ipw_sensitivity_calib calib = {.beacon_rssi_raw = sens, .reserved = (unsigned short)0};
  #line 2401 
  return ipw_send_cmd_pdu(priv,(unsigned char)42,(unsigned char)4,
                       (void *)(& calib));
}

#line 2405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_associate(struct ipw_priv *priv, struct ipw_associate *associate_0)
{
  #line 2408 
  if (priv == (struct ipw_priv *)0 || associate_0 == (struct ipw_associate *)0) {
    #line 2409 
    printk((char *)"\001");
    #line 2410 
    return -1;
  }
  #line 2413 
  return ipw_send_cmd_pdu(priv,(unsigned char)21,(unsigned char)40,
                       (void *)associate_0);
}

#line 2417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_supported_rates(struct ipw_priv *priv, struct ipw_supported_rates *rates)
{
  #line 2420 
  if (priv == (struct ipw_priv *)0 || rates == (struct ipw_supported_rates *)0) {
    #line 2421 
    printk((char *)"\001");
    #line 2422 
    return -1;
  }
  #line 2425 
  return ipw_send_cmd_pdu(priv,(unsigned char)22,(unsigned char)16,
                       (void *)rates);
}

#line 2429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_set_random_seed(struct ipw_priv *priv)
{
  #line 2431 
  u32 val;
  #line 2433 
  if (priv == (struct ipw_priv *)0) {
    #line 2434 
    printk((char *)"\001");
    #line 2435 
    return -1;
  }
  #line 2438 
  get_random_bytes((void *)(& val),4);
  #line 2440 
  return ipw_send_cmd_pdu(priv,(unsigned char)34,(unsigned char)4,
                       (void *)(& val));
}

#line 2443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_card_disable(struct ipw_priv *priv, u32 phy_off)
{
  #line 2445 
  __le32 v = phy_off;
  #line 2446 
  if (priv == (struct ipw_priv *)0) {
    #line 2447 
    printk((char *)"\001");
    #line 2448 
    return -1;
  }
  #line 2451 
  return ipw_send_cmd_pdu(priv,(unsigned char)33,(unsigned char)4,(void *)(& v));
}

#line 2454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_tx_power(struct ipw_priv *priv, struct ipw_tx_power *power)
{
  #line 2456 
  if (priv == (struct ipw_priv *)0 || power == (struct ipw_tx_power *)0) {
    #line 2457 
    printk((char *)"\001");
    #line 2458 
    return -1;
  }
  #line 2461 
  return ipw_send_cmd_pdu(priv,(unsigned char)35,(unsigned char)76,
                       (void *)power);
}

#line 2464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_set_tx_power(struct ipw_priv *priv)
{
  #line 2467 
  struct ipw_tx_power tx_power;
  #line 2468 
  s8 max_power;
  #line 2469 
  int i;
  #line 2466 
  struct libipw_geo *geo = libipw_get_geo(priv->ieee);
  #line 2471 
  memset((void *)(& tx_power),0,76UL);
  #line 2474 
  tx_power.ieee_mode = (unsigned char)2U;
  #line 2475 
  tx_power.num_channels = geo->bg_channels;
  #line 2476 
  i = 0;
  #line 2476 
  while ((int)geo->bg_channels > i) {
    #line 2477 
    max_power = (signed char)geo->bg[i].max_power;
    #line 2478 
    tx_power.channels_tx_power[i].channel_number = geo->bg[i].channel;
    #line 2480 
    if ((int)max_power != 0) {
      #line 2481 
      s8 __UNIQUE_ID___x463;
      #line 2481 
      int tmp_0;
      {
        #line 2481 
        __UNIQUE_ID___x463 = max_power;
        #line 2481 
        s8 __UNIQUE_ID___y464 = priv->tx_power;
        #line 2481 
        if ((int)__UNIQUE_ID___x463 < (int)__UNIQUE_ID___y464) 
                                                               #line 2481 
                                                               tmp_0 = (int)__UNIQUE_ID___x463; else 
                                                                    #line 2481 
                                                                    tmp_0 = (int)__UNIQUE_ID___y464;
        }
      #line 2480 
      tx_power.channels_tx_power[i].tx_power = (signed char)tmp_0;
    }
    else 
         #line 2480 
         tx_power.channels_tx_power[i].tx_power = priv->tx_power;
    #line 2476 
    i ++;
  }
  #line 2483 
  if (ipw_send_tx_power(priv,& tx_power) != 0) 
                                               #line 2484 
                                               return -5;
  #line 2487 
  tx_power.ieee_mode = (unsigned char)1U;
  #line 2488 
  if (ipw_send_tx_power(priv,& tx_power) != 0) 
                                               #line 2489 
                                               return -5;
  #line 2492 
  if ((priv->ieee)->abg_true != 0) {
    #line 2493 
    tx_power.ieee_mode = (unsigned char)0U;
    #line 2494 
    tx_power.num_channels = geo->a_channels;
    #line 2495 
    i = 0;
    #line 2495 
    while ((int)tx_power.num_channels > i) {
      #line 2496 
      max_power = (signed char)geo->a[i].max_power;
      #line 2497 
      tx_power.channels_tx_power[i].channel_number = geo->a[i].channel;
      #line 2499 
      if ((int)max_power != 0) {
        #line 2500 
        s8 __UNIQUE_ID___x465;
        #line 2500 
        int tmp_4;
        {
          #line 2500 
          __UNIQUE_ID___x465 = max_power;
          #line 2500 
          s8 __UNIQUE_ID___y466 = priv->tx_power;
          #line 2500 
          if ((int)__UNIQUE_ID___x465 < (int)__UNIQUE_ID___y466) 
                                                                 #line 2500 
                                                                 tmp_4 = (int)__UNIQUE_ID___x465; else 
                                                                    #line 2500 
                                                                    tmp_4 = (int)__UNIQUE_ID___y466;
          }
        #line 2499 
        tx_power.channels_tx_power[i].tx_power = (signed char)tmp_4;
      }
      else 
           #line 2499 
           tx_power.channels_tx_power[i].tx_power = priv->tx_power;
      #line 2495 
      i ++;
    }
    #line 2502 
    if (ipw_send_tx_power(priv,& tx_power) != 0) 
                                                 #line 2503 
                                                 return -5;
  }
  #line 2505 
  return 0;
}

#line 2508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_rts_threshold(struct ipw_priv *priv, u16 rts)
{
  #line 2510 
  struct ipw_rts_threshold rts_threshold = {.rts_threshold = rts, .reserved = (unsigned short)0};
  #line 2514 
  if (priv == (struct ipw_priv *)0) {
    #line 2515 
    printk((char *)"\001");
    #line 2516 
    return -1;
  }
  #line 2519 
  return ipw_send_cmd_pdu(priv,(unsigned char)15,(unsigned char)4,
                       (void *)(& rts_threshold));
}

#line 2523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_frag_threshold(struct ipw_priv *priv, u16 frag)
{
  #line 2525 
  struct ipw_frag_threshold frag_threshold = {.frag_threshold = frag, .reserved = (unsigned short)0};
  #line 2529 
  if (priv == (struct ipw_priv *)0) {
    #line 2530 
    printk((char *)"\001");
    #line 2531 
    return -1;
  }
  #line 2534 
  return ipw_send_cmd_pdu(priv,(unsigned char)16,(unsigned char)4,
                       (void *)(& frag_threshold));
}

#line 2538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_power_mode(struct ipw_priv *priv, u32 mode)
{
  #line 2540 
  __le32 param;
  #line 2542 
  if (priv == (struct ipw_priv *)0) {
    #line 2543 
    printk((char *)"\001");
    #line 2544 
    return -1;
  }
  #line 2549 
  switch (mode) {
    #line 2550 
    case (u32)7: 
                 #line 2550 
    ;
    #line 2551 
    param = 3U;
    #line 2552 
    break;
    #line 2553 
    case (u32)6: 
                 #line 2553 
    ;
    #line 2554 
    param = 0U;
    #line 2555 
    break;
    #line 2556 
    default: 
             #line 2556 
    ;
    #line 2557 
    param = mode;
    #line 2558 
    break;
  }
  #line 2561 
  return ipw_send_cmd_pdu(priv,(unsigned char)17,(unsigned char)4,
                       (void *)(& param));
}

#line 2565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_retry_limit(struct ipw_priv *priv, u8 slimit, u8 llimit)
{
  #line 2567 
  struct ipw_retry_limit retry_limit = {.short_retry_limit = slimit, .long_retry_limit = llimit, .reserved = (unsigned short)0};
  #line 2572 
  if (priv == (struct ipw_priv *)0) {
    #line 2573 
    printk((char *)"\001");
    #line 2574 
    return -1;
  }
  #line 2577 
  return ipw_send_cmd_pdu(priv,(unsigned char)51,(unsigned char)4,
                       (void *)(& retry_limit));
}

#line 2599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void eeprom_write_reg(struct ipw_priv *p, u32 data)
{
  #line 2601 
  ipw_write_reg32(p,3145792U,data);
  #line 2604 
  if (0 != 0) 
    #line 2604 
    if (p->eeprom_delay > 19999) 
                                 #line 2604 
                                 __bad_udelay(); else 
                                                      #line 2604 
                                                      __const_udelay((unsigned long)p->eeprom_delay * 4295UL);
  else 
       #line 2604 
       __udelay((unsigned long)p->eeprom_delay);
  #line 2606 
  return;
}

#line 2608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void eeprom_cs(struct ipw_priv *priv)
{
  #line 2610 
  eeprom_write_reg(priv,0U);
  #line 2611 
  eeprom_write_reg(priv,2U);
  #line 2612 
  eeprom_write_reg(priv,3U);
  #line 2613 
  eeprom_write_reg(priv,2U);
  #line 2614 
  return;
}

#line 2617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void eeprom_disable_cs(struct ipw_priv *priv)
{
  #line 2619 
  eeprom_write_reg(priv,2U);
  #line 2620 
  eeprom_write_reg(priv,0U);
  #line 2621 
  eeprom_write_reg(priv,1U);
  #line 2622 
  return;
}

#line 2625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void eeprom_write_bit(struct ipw_priv *p, u8 bit)
{
  #line 2627 
  int tmp;
  #line 2627 
  if ((unsigned int)bit != 0U) 
                               #line 2627 
                               tmp = 4; else 
                                             #line 2627 
                                             tmp = 0;
  #line 2627 
  int d = tmp;
  #line 2628 
  eeprom_write_reg(p,(unsigned int)(d | 2));
  #line 2629 
  eeprom_write_reg(p,(unsigned int)(d | 3));
  #line 2630 
  return;
}

#line 2633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void eeprom_op(struct ipw_priv *priv, u8 op, u8 addr)
{
  #line 2635 
  int i;
  #line 2637 
  eeprom_cs(priv);
  #line 2638 
  eeprom_write_bit(priv,(unsigned char)1);
  #line 2639 
  eeprom_write_bit(priv,(unsigned char)((int)op & 2));
  #line 2640 
  eeprom_write_bit(priv,(unsigned char)((int)op & 1));
  #line 2641 
  i = 7;
  #line 2641 
  while (i >= 0) {
    #line 2642 
    eeprom_write_bit(priv,(unsigned char)((int)((unsigned char)((1 << i) & (int)addr))));
    #line 2641 
    i --;
  }
  #line 2643 
  return;
}

#line 2647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u16 eeprom_read_u16(struct ipw_priv *priv, u8 addr)
{
  #line 2649 
  int i;
  #line 2650 
  u16 r = (unsigned short)0U;
  #line 2653 
  eeprom_op(priv,(unsigned char)2,(unsigned char)((int)addr));
  #line 2656 
  eeprom_write_reg(priv,2U);
  #line 2659 
  i = 0;
  #line 2659 
  while (i <= 15) {
    {
      #line 2660 
      u32 data = 0U;
      #line 2661 
      eeprom_write_reg(priv,3U);
      #line 2662 
      eeprom_write_reg(priv,2U);
      #line 2663 
      data = _ipw_read_reg32(priv,3145792U);
      #line 2664 
      r = (unsigned short)((unsigned int)((int)r << 1) | ((data >> 4) & (unsigned int)1));
    }
    #line 2659 
    i ++;
  }
  #line 2668 
  eeprom_write_reg(priv,0U);
  #line 2669 
  eeprom_disable_cs(priv);
  #line 2671 
  return r;
}

#line 2676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void eeprom_parse_mac(struct ipw_priv *priv, u8 *mac)
{
  #line 2678 
  memcpy((void *)mac,(void *)(& priv->eeprom[66UL]),6UL);
  #line 2679 
  return;
}

#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_read_eeprom(struct ipw_priv *priv)
{
  #line 2683 
  int i;
  #line 2684 
  __le16 *eeprom = (__le16 *)(& priv->eeprom);
  #line 2686 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 2686 
    int tmp_0;
    #line 2686 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2686 
                                                             tmp_0 = 73; else 
                                                                    #line 2686 
                                                                    tmp_0 = 85;
    #line 2686 
    printk((char *)"\001",tmp_0,(char *)"ipw_read_eeprom");
  }
  #line 2689 
  i = 0;
  #line 2689 
  while (i <= 127) {
    #line 2690 
    *(eeprom + (unsigned long)i) = eeprom_read_u16(priv,(unsigned char)((int)((unsigned char)i)));
    #line 2689 
    i ++;
  }
  #line 2692 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 2692 
    int tmp_3;
    #line 2692 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2692 
                                                             tmp_3 = 73; else 
                                                                    #line 2692 
                                                                    tmp_3 = 85;
    #line 2692 
    printk((char *)"\001",tmp_3,(char *)"ipw_read_eeprom");
  }
  #line 2693 
  return;
}

#line 2703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_eeprom_init_sram(struct ipw_priv *priv)
{
  #line 2705 
  int i;
  #line 2707 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 2707 
    int tmp_0;
    #line 2707 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2707 
                                                             tmp_0 = 73; else 
                                                                    #line 2707 
                                                                    tmp_0 = 85;
    #line 2707 
    printk((char *)"\001",tmp_0,(char *)"ipw_eeprom_init_sram");
  }
  #line 2714 
  if ((unsigned int)priv->eeprom[73UL] != 0U) {
    #line 2715 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 2715 
      int tmp_2;
      #line 2715 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2715 
                                                               tmp_2 = 73; else 
                                                                    #line 2715 
                                                                    tmp_2 = 85;
      #line 2715 
      printk((char *)"\001",tmp_2,(char *)"ipw_eeprom_init_sram");
    }
    #line 2718 
    i = 0;
    #line 2718 
    while (i <= 255) {
      #line 2719 
      if ((ipw_debug_level & 134217728U) != 0U) {
        #line 2719 
        int tmp_4;
        #line 2719 
        ;
        #line 2719 
        ;
        #line 2719 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 2719 
                                                                 tmp_4 = 73; else 
                                                                    #line 2719 
                                                                    tmp_4 = 85;
        #line 2719 
        printk((char *)"\001",tmp_4,(char *)"ipw_eeprom_init_sram",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",2719,(unsigned int)(i + 2592),(unsigned int)priv->eeprom[i]);
      }
      #line 2719 
      _ipw_write8(priv,(unsigned long)(i + 2592),(unsigned char)((int)priv->eeprom[i]));
      #line 2718 
      i ++;
    }
    #line 2722 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 2722 
      int tmp_6;
      #line 2722 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2722 
                                                               tmp_6 = 73; else 
                                                                    #line 2722 
                                                                    tmp_6 = 85;
      #line 2722 
      printk((char *)"\001",tmp_6,(char *)"ipw_eeprom_init_sram",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",2722,2588U,0U);
    }
    #line 2722 
    _ipw_write32(priv,2588UL,0U);
  }
  else {
    #line 2724 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 2724 
      int tmp_8;
      #line 2724 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2724 
                                                               tmp_8 = 73; else 
                                                                    #line 2724 
                                                                    tmp_8 = 85;
      #line 2724 
      printk((char *)"\001",tmp_8,(char *)"ipw_eeprom_init_sram");
    }
    #line 2727 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 2727 
      int tmp_10;
      #line 2727 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 2727 
                                                               tmp_10 = 73; else 
                                                                    #line 2727 
                                                                    tmp_10 = 85;
      #line 2727 
      printk((char *)"\001",tmp_10,(char *)"ipw_eeprom_init_sram",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",2727,2588U,1U);
    }
    #line 2727 
    _ipw_write32(priv,2588UL,1U);
  }
  #line 2730 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 2730 
    int tmp_12;
    #line 2730 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2730 
                                                             tmp_12 = 73; else 
                                                                    #line 2730 
                                                                    tmp_12 = 85;
    #line 2730 
    printk((char *)"\001",tmp_12,(char *)"ipw_eeprom_init_sram");
  }
  #line 2731 
  return;
}

#line 2733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_zero_memory(struct ipw_priv *priv, u32 start, u32 count)
{
  #line 2735 
  count >>= 2;
  #line 2736 
  if (count == 0U) 
                   #line 2737 
                   return;
  #line 2738 
  _ipw_write32(priv,24UL,start);
  #line 2739 
  while (1) {
    #line 2739 
    u32 tmp;
    #line 2739 
    tmp = count;
    #line 2739 
    count --;
    #line 2739 
    ;
    #line 2739 
    if (! (tmp != 0U)) 
                       #line 2739 
                       break;
    #line 2740 
    _ipw_write32(priv,28UL,0U);
  }
  #line 2741 
  return;
}

#line 2743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void ipw_fw_dma_reset_command_blocks(struct ipw_priv *priv)
{
  #line 2745 
  ipw_zero_memory(priv,159744U,1024U);
  #line 2746 
  return;
}

#line 2750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_fw_dma_enable(struct ipw_priv *priv)
{
  #line 2753 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2753 
    int tmp_0;
    #line 2753 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2753 
                                                             tmp_0 = 73; else 
                                                                    #line 2753 
                                                                    tmp_0 = 85;
    #line 2753 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_enable");
  }
  #line 2756 
  ipw_fw_dma_reset_command_blocks(priv);
  #line 2759 
  ipw_write_reg32(priv,3145888U,159744U);
  #line 2761 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2761 
    int tmp_2;
    #line 2761 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2761 
                                                             tmp_2 = 73; else 
                                                                    #line 2761 
                                                                    tmp_2 = 85;
    #line 2761 
    printk((char *)"\001",tmp_2,(char *)"ipw_fw_dma_enable");
  }
  #line 2762 
  return 0;
}

#line 2765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_fw_dma_abort(struct ipw_priv *priv)
{
  #line 2767 
  u32 control = 0U;
  #line 2769 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2769 
    int tmp_0;
    #line 2769 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2769 
                                                             tmp_0 = 73; else 
                                                                    #line 2769 
                                                                    tmp_0 = 85;
    #line 2769 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_abort");
  }
  #line 2772 
  control = 5508096U;
  #line 2773 
  ipw_write_reg32(priv,3145892U,control);
  #line 2774 
  priv->sram_desc.last_cb_index = 0UL;
  #line 2776 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2776 
    int tmp_2;
    #line 2776 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2776 
                                                             tmp_2 = 73; else 
                                                                    #line 2776 
                                                                    tmp_2 = 85;
    #line 2776 
    printk((char *)"\001",tmp_2,(char *)"ipw_fw_dma_abort");
  }
  #line 2777 
  return;
}

#line 2779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_fw_dma_write_command_block(struct ipw_priv *priv, int index, struct command_block *cb)
{
  #line 2782 
  u32 address = (unsigned int)((unsigned long)index + 9984UL) * 16U;
  #line 2785 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2785 
    int tmp_0;
    #line 2785 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2785 
                                                             tmp_0 = 73; else 
                                                                    #line 2785 
                                                                    tmp_0 = 85;
    #line 2785 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_write_command_block");
  }
  #line 2787 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 2787 
    int tmp_2;
    #line 2787 
    ;
    #line 2787 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2787 
                                                             tmp_2 = 73; else 
                                                                    #line 2787 
                                                                    tmp_2 = 85;
    #line 2787 
    printk((char *)"\001",tmp_2,(char *)"ipw_fw_dma_write_command_block",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",2787,address,16U);
  }
  #line 2787 
  _ipw_write_indirect(priv,address,(u8 *)cb,16);
  #line 2790 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2790 
    int tmp_4;
    #line 2790 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2790 
                                                             tmp_4 = 73; else 
                                                                    #line 2790 
                                                                    tmp_4 = 85;
    #line 2790 
    printk((char *)"\001",tmp_4,(char *)"ipw_fw_dma_write_command_block");
  }
  #line 2791 
  return 0;
}

#line 2795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_fw_dma_kick(struct ipw_priv *priv)
{
  #line 2797 
  u32 control = 0U;
  #line 2798 
  u32 index = 0U;
  #line 2800 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2800 
    int tmp_0;
    #line 2800 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2800 
                                                             tmp_0 = 73; else 
                                                                    #line 2800 
                                                                    tmp_0 = 85;
    #line 2800 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_kick");
  }
  #line 2802 
  index = 0U;
  #line 2802 
  while ((unsigned long)index < priv->sram_desc.last_cb_index) {
    #line 2803 
    ipw_fw_dma_write_command_block(priv,(int)index,& priv->sram_desc.cb_list[index]);
    #line 2802 
    index ++;
  }
  #line 2807 
  ipw_clear_bit(priv,32U,768U);
  #line 2812 
  control = 5505280U;
  #line 2813 
  ipw_write_reg32(priv,3145892U,control);
  #line 2815 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2815 
    int tmp_2;
    #line 2815 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2815 
                                                             tmp_2 = 73; else 
                                                                    #line 2815 
                                                                    tmp_2 = 85;
    #line 2815 
    printk((char *)"\001",tmp_2,(char *)"ipw_fw_dma_kick");
  }
  #line 2816 
  return 0;
}

#line 2819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_fw_dma_dump_command_block(struct ipw_priv *priv)
{
  #line 2821 
  u32 address;
  #line 2822 
  u32 register_value = 0U;
  #line 2823 
  u32 cb_fields_address = 0U;
  #line 2825 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2825 
    int tmp_0;
    #line 2825 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2825 
                                                             tmp_0 = 73; else 
                                                                    #line 2825 
                                                                    tmp_0 = 85;
    #line 2825 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_dump_command_block");
  }
  #line 2826 
  address = _ipw_read_reg32(priv,3145936U);
  #line 2827 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2827 
    int tmp_2;
    #line 2827 
    ;
    #line 2827 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2827 
                                                             tmp_2 = 73; else 
                                                                    #line 2827 
                                                                    tmp_2 = 85;
    #line 2827 
    printk((char *)"\001",tmp_2,(char *)"ipw_fw_dma_dump_command_block",address);
  }
  #line 2830 
  register_value = _ipw_read_reg32(priv,3145892U);
  #line 2831 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2831 
    int tmp_4;
    #line 2831 
    ;
    #line 2831 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2831 
                                                             tmp_4 = 73; else 
                                                                    #line 2831 
                                                                    tmp_4 = 85;
    #line 2831 
    printk((char *)"\001",tmp_4,(char *)"ipw_fw_dma_dump_command_block",register_value);
  }
  #line 2834 
  cb_fields_address = address;
  #line 2835 
  register_value = _ipw_read_reg32(priv,cb_fields_address);
  #line 2836 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2836 
    int tmp_6;
    #line 2836 
    ;
    #line 2836 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2836 
                                                             tmp_6 = 73; else 
                                                                    #line 2836 
                                                                    tmp_6 = 85;
    #line 2836 
    printk((char *)"\001",tmp_6,(char *)"ipw_fw_dma_dump_command_block",register_value);
  }
  #line 2838 
  cb_fields_address += 4U;
  #line 2839 
  register_value = _ipw_read_reg32(priv,cb_fields_address);
  #line 2840 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2840 
    int tmp_8;
    #line 2840 
    ;
    #line 2840 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2840 
                                                             tmp_8 = 73; else 
                                                                    #line 2840 
                                                                    tmp_8 = 85;
    #line 2840 
    printk((char *)"\001",tmp_8,(char *)"ipw_fw_dma_dump_command_block",register_value);
  }
  #line 2842 
  cb_fields_address += 4U;
  #line 2843 
  register_value = _ipw_read_reg32(priv,cb_fields_address);
  #line 2844 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2844 
    int tmp_10;
    #line 2844 
    ;
    #line 2844 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2844 
                                                             tmp_10 = 73; else 
                                                                    #line 2844 
                                                                    tmp_10 = 85;
    #line 2844 
    printk((char *)"\001",tmp_10,(char *)"ipw_fw_dma_dump_command_block",register_value);
  }
  #line 2847 
  cb_fields_address += 4U;
  #line 2848 
  register_value = _ipw_read_reg32(priv,cb_fields_address);
  #line 2849 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2849 
    int tmp_12;
    #line 2849 
    ;
    #line 2849 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2849 
                                                             tmp_12 = 73; else 
                                                                    #line 2849 
                                                                    tmp_12 = 85;
    #line 2849 
    printk((char *)"\001",tmp_12,(char *)"ipw_fw_dma_dump_command_block",register_value);
  }
  #line 2851 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2851 
    int tmp_14;
    #line 2851 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2851 
                                                             tmp_14 = 73; else 
                                                                    #line 2851 
                                                                    tmp_14 = 85;
    #line 2851 
    printk((char *)"\001",tmp_14,(char *)"ipw_fw_dma_dump_command_block");
  }
  #line 2852 
  return;
}

#line 2854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_fw_dma_command_block_index(struct ipw_priv *priv)
{
  #line 2856 
  u32 current_cb_address = 0U;
  #line 2857 
  u32 current_cb_index = 0U;
  #line 2859 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2859 
    int tmp_0;
    #line 2859 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2859 
                                                             tmp_0 = 73; else 
                                                                    #line 2859 
                                                                    tmp_0 = 85;
    #line 2859 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_command_block_index");
  }
  #line 2860 
  current_cb_address = _ipw_read_reg32(priv,3145936U);
  #line 2862 
  current_cb_index = (current_cb_address + 4294807552U) / 16U;
  #line 2865 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2865 
    int tmp_2;
    #line 2865 
    ;
    #line 2865 
    ;
    #line 2865 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2865 
                                                             tmp_2 = 73; else 
                                                                    #line 2865 
                                                                    tmp_2 = 85;
    #line 2865 
    printk((char *)"\001",tmp_2,(char *)"ipw_fw_dma_command_block_index",current_cb_index,current_cb_address);
  }
  #line 2868 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2868 
    int tmp_4;
    #line 2868 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2868 
                                                             tmp_4 = 73; else 
                                                                    #line 2868 
                                                                    tmp_4 = 85;
    #line 2868 
    printk((char *)"\001",tmp_4,(char *)"ipw_fw_dma_command_block_index");
  }
  #line 2869 
  return (int)current_cb_index;
}

#line 2873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_fw_dma_add_command_block(struct ipw_priv *priv, u32 src_address, u32 dest_address, u32 length, int interrupt_enabled, int is_last)
{
  #line 2883 
  struct command_block *cb;
  #line 2880 
  u32 control = 2364145664U;
  #line 2884 
  u32 last_cb_element = 0U;
  #line 2886 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2886 
    int tmp_0;
    #line 2886 
    ;
    #line 2886 
    ;
    #line 2886 
    ;
    #line 2886 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2886 
                                                             tmp_0 = 73; else 
                                                                    #line 2886 
                                                                    tmp_0 = 85;
    #line 2886 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_add_command_block",src_address,dest_address,length);
  }
  #line 2889 
  if (priv->sram_desc.last_cb_index > 63UL) 
                                            #line 2890 
                                            return -1;
  #line 2892 
  last_cb_element = (unsigned int)priv->sram_desc.last_cb_index;
  #line 2893 
  cb = & priv->sram_desc.cb_list[last_cb_element];
  #line 2894 
  (priv->sram_desc.last_cb_index) ++;
  #line 2897 
  if (interrupt_enabled != 0) 
                              #line 2898 
                              control |= 1073741824U;
  #line 2900 
  if (is_last != 0) 
                    #line 2901 
                    control |= 536870912U;
  #line 2903 
  control |= length;
  #line 2906 
  cb->status = (control ^ src_address) ^ dest_address;
  #line 2909 
  cb->dest_addr = dest_address;
  #line 2910 
  cb->source_addr = src_address;
  #line 2913 
  cb->control = control;
  #line 2915 
  return 0;
}

#line 2918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_fw_dma_add_buffer(struct ipw_priv *priv, dma_addr_t *src_address, int nr, u32 dest_address, u32 len)
{
  #line 2921 
  int ret;
  #line 2921 
  int i;
  #line 2922 
  u32 size;
  #line 2924 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2924 
    int tmp_0;
    #line 2924 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2924 
                                                             tmp_0 = 73; else 
                                                                    #line 2924 
                                                                    tmp_0 = 85;
    #line 2924 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_add_buffer");
  }
  #line 2925 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2925 
    int tmp_2;
    #line 2925 
    ;
    #line 2925 
    ;
    #line 2925 
    ;
    #line 2925 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2925 
                                                             tmp_2 = 73; else 
                                                                    #line 2925 
                                                                    tmp_2 = 85;
    #line 2925 
    printk((char *)"\001",tmp_2,(char *)"ipw_fw_dma_add_buffer",nr,dest_address,len);
  }
  #line 2928 
  i = 0;
  #line 2928 
  while (i < nr) {
    {
      #line 2929 
      unsigned int __UNIQUE_ID___x467;
      #line 2929 
      unsigned int tmp_3;
      {
        #line 2929 
        __UNIQUE_ID___x467 = len - (unsigned int)(i * 8191);
        #line 2929 
        unsigned int __UNIQUE_ID___y468 = 8191U;
        #line 2929 
        if (__UNIQUE_ID___x467 < __UNIQUE_ID___y468) 
                                                     #line 2929 
                                                     tmp_3 = __UNIQUE_ID___x467; else 
                                                                    #line 2929 
                                                                    tmp_3 = __UNIQUE_ID___y468;
        }
      #line 2929 
      size = tmp_3;
      #line 2930 
      ret = ipw_fw_dma_add_command_block(priv,(unsigned int)*(src_address + (unsigned long)i),(unsigned int)(i * 8191) + dest_address,size,0,0);
      #line 2934 
      if (ret != 0) {
        #line 2935 
        if ((ipw_debug_level & 67108864U) != 0U) {
          #line 2935 
          int tmp_6;
          #line 2935 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 2935 
                                                                   tmp_6 = 73; else 
                                                                    #line 2935 
                                                                    tmp_6 = 85;
          #line 2935 
          printk((char *)"\001",tmp_6,(char *)"ipw_fw_dma_add_buffer");
        }
        #line 2936 
        return -1;
      }
      else 
        #line 2938 
        if ((ipw_debug_level & 67108864U) != 0U) {
          #line 2938 
          int tmp_8;
          #line 2938 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 2938 
                                                                   tmp_8 = 73; else 
                                                                    #line 2938 
                                                                    tmp_8 = 85;
          #line 2938 
          printk((char *)"\001",tmp_8,(char *)"ipw_fw_dma_add_buffer");
        }
    }
    #line 2928 
    i ++;
  }
  #line 2941 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2941 
    int tmp_10;
    #line 2941 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2941 
                                                             tmp_10 = 73; else 
                                                                    #line 2941 
                                                                    tmp_10 = 85;
    #line 2941 
    printk((char *)"\001",tmp_10,(char *)"ipw_fw_dma_add_buffer");
  }
  #line 2942 
  return 0;
}

#line 2945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_fw_dma_wait(struct ipw_priv *priv)
{
  #line 2947 
  u32 previous_index;
  #line 2947 
  u32 current_index = 0U;
  #line 2948 
  u32 watchdog = 0U;
  #line 2950 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2950 
    int tmp_0;
    #line 2950 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2950 
                                                             tmp_0 = 73; else 
                                                                    #line 2950 
                                                                    tmp_0 = 85;
    #line 2950 
    printk((char *)"\001",tmp_0,(char *)"ipw_fw_dma_wait");
  }
  #line 2952 
  current_index = (unsigned int)ipw_fw_dma_command_block_index(priv);
  #line 2953 
  if ((ipw_debug_level & 67108864U) != 0U) {
    #line 2953 
    int tmp_3;
    #line 2953 
    ;
    #line 2953 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2953 
                                                             tmp_3 = 73; else 
                                                                    #line 2953 
                                                                    tmp_3 = 85;
    #line 2953 
    printk((char *)"\001",tmp_3,(char *)"ipw_fw_dma_wait",(int)priv->sram_desc.last_cb_index);
  }
  #line 2956 
  while ((unsigned long)current_index < priv->sram_desc.last_cb_index) {
    #line 2957 
    __const_udelay(214750UL);
    #line 2958 
    previous_index = current_index;
    #line 2959 
    current_index = (unsigned int)ipw_fw_dma_command_block_index(priv);
    #line 2961 
    if (previous_index < current_index) {
      #line 2962 
      watchdog = 0U;
      #line 2963 
      continue;
    }
    #line 2965 
    watchdog ++;
    #line 2965 
    if (watchdog > 400U) {
      #line 2966 
      if ((ipw_debug_level & 67108864U) != 0U) {
        #line 2966 
        int tmp_6;
        #line 2966 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 2966 
                                                                 tmp_6 = 73; else 
                                                                    #line 2966 
                                                                    tmp_6 = 85;
        #line 2966 
        printk((char *)"\001",tmp_6,(char *)"ipw_fw_dma_wait");
      }
      #line 2967 
      ipw_fw_dma_dump_command_block(priv);
      #line 2968 
      ipw_fw_dma_abort(priv);
      #line 2969 
      return -1;
    }
  }
  #line 2973 
  ipw_fw_dma_abort(priv);
  #line 2976 
  ipw_set_bit(priv,32U,768U);
  #line 2979 
  if ((ipw_debug_level & 65536U) != 0U) {
    #line 2979 
    int tmp_8;
    #line 2979 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 2979 
                                                             tmp_8 = 73; else 
                                                                    #line 2979 
                                                                    tmp_8 = 85;
    #line 2979 
    printk((char *)"\001",tmp_8,(char *)"ipw_fw_dma_wait");
  }
  #line 2980 
  return 0;
}

#line 2983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_remove_current_network(struct ipw_priv *priv)
{
  #line 2985 
  struct list_head *element;
  #line 2985 
  struct list_head *safe;
  #line 2987 
  unsigned long flags;
  #line 2986 
  struct libipw_network *network = (struct libipw_network *)0;
  #line 2989 
  cif___ldv_spin_lock_lock_of_libipw_device(& (priv->ieee)->lock);
  #line 2990 
  element = (priv->ieee)->network_list.next;
  #line 2990 
  safe = element->next;
  #line 2990 
  while (& (priv->ieee)->network_list != element) {
    {
      #line 2991 
      void *__mptr;
      #line 2991 
      __mptr = (void *)element;
      #line 2991 
      network = ((struct libipw_network *)(__mptr + 18446744073709551264U));
      #line 2992 
      if ((int)ether_addr_equal((u8 *)(& network->bssid),(u8 *)(& priv->bssid)) != 0) {
        #line 2993 
        list_del(element);
        #line 2994 
        list_add_tail(& network->list,& (priv->ieee)->network_free_list);
      }
    }
    #line 2990 
    element = safe;
    #line 2990 
    safe = element->next;
  }
  #line 2998 
  cif_spin_unlock_irqrestore_lock_of_libipw_device(& (priv->ieee)->lock,flags);
  #line 2999 
  return;
}

#line 3016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_poll_bit(struct ipw_priv *priv, u32 addr, u32 mask, int timeout)
{
  #line 3019 
  int i = 0;
  #line 3021 
  while (1) {
    {
      #line 3022 
      if ((ipw_debug_level & 134217728U) != 0U) {
        #line 3022 
        int tmp_0;
        #line 3022 
        ;
        #line 3022 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 3022 
                                                                 tmp_0 = 73; else 
                                                                    #line 3022 
                                                                    tmp_0 = 85;
        #line 3022 
        printk((char *)"\001",tmp_0,(char *)"ipw_poll_bit",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3022,addr);
      }
      #line 3022 
      ;
      #line 3022 
      if ((_ipw_read32(priv,(unsigned long)addr) & mask) == mask) 
                                                                  #line 3023 
                                                                  return i;
      {
        #line 3024 
        unsigned long __ms = 10UL;
        #line 3024 
        while (1) {
          #line 3024 
          unsigned long tmp_3;
          #line 3024 
          tmp_3 = __ms;
          #line 3024 
          __ms --;
          #line 3024 
          ;
          #line 3024 
          if (! (tmp_3 != 0UL)) 
                                #line 3024 
                                break;
          #line 3024 
          __const_udelay(4295000UL);
        }
      }
      #line 3025 
      i += 10;
    }
    #line 3026 
    if (! (i < timeout)) 
                         #line 3021 
                         break;
  }
  #line 3028 
  return -62;
}

#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_stop_master(struct ipw_priv *priv)
{
  #line 3038 
  int rc;
  #line 3040 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3040 
    int tmp_0;
    #line 3040 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3040 
                                                             tmp_0 = 73; else 
                                                                    #line 3040 
                                                                    tmp_0 = 85;
    #line 3040 
    printk((char *)"\001",tmp_0,(char *)"ipw_stop_master");
  }
  #line 3042 
  ipw_set_bit(priv,32U,512U);
  #line 3045 
  rc = ipw_poll_bit(priv,32U,256U,100);
  #line 3047 
  if (rc < 0) {
    #line 3048 
    printk((char *)"\001");
    #line 3049 
    return -1;
  }
  #line 3052 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 3052 
    int tmp_2;
    #line 3052 
    ;
    #line 3052 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3052 
                                                             tmp_2 = 73; else 
                                                                    #line 3052 
                                                                    tmp_2 = 85;
    #line 3052 
    printk((char *)"\001",tmp_2,(char *)"ipw_stop_master",rc);
  }
  #line 3054 
  return rc;
}

#line 3057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_arc_release(struct ipw_priv *priv)
{
  #line 3059 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3059 
    int tmp_0;
    #line 3059 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3059 
                                                             tmp_0 = 73; else 
                                                                    #line 3059 
                                                                    tmp_0 = 85;
    #line 3059 
    printk((char *)"\001",tmp_0,(char *)"ipw_arc_release");
  }
  #line 3060 
  __const_udelay(21475000UL);
  #line 3062 
  ipw_clear_bit(priv,32U,1U);
  #line 3065 
  __const_udelay(21475000UL);
  #line 3067 
  return;
}

#line 3073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_load_ucode(struct ipw_priv *priv, u8 *data, size_t len)
{
  #line 3075 
  int i;
  #line 3075 
  int addr;
  #line 3077 
  __le16 *image;
  #line 3075 
  int rc = 0;
  #line 3076 
  u8 cr = (unsigned char)0U;
  #line 3079 
  image = (__le16 *)data;
  #line 3081 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3081 
    int tmp_0;
    #line 3081 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3081 
                                                             tmp_0 = 73; else 
                                                                    #line 3081 
                                                                    tmp_0 = 85;
    #line 3081 
    printk((char *)"\001",tmp_0,(char *)"ipw_load_ucode");
  }
  #line 3083 
  rc = ipw_stop_master(priv);
  #line 3085 
  if (rc < 0) 
              #line 3086 
              return rc;
  #line 3088 
  addr = 512;
  #line 3088 
  while (addr <= 4095) {
    #line 3090 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 3090 
      int tmp_2;
      #line 3090 
      ;
      #line 3090 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3090 
                                                               tmp_2 = 73; else 
                                                                    #line 3090 
                                                                    tmp_2 = 85;
      #line 3090 
      printk((char *)"\001",tmp_2,(char *)"ipw_load_ucode",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3090,(unsigned int)addr,0U);
    }
    #line 3090 
    _ipw_write32(priv,(unsigned long)addr,0U);
    #line 3089 
    addr += 4;
  }
  #line 3094 
  memset((void *)(& priv->dino_alive),0,26UL);
  #line 3098 
  ipw_write_reg32(priv,3145952U,2147483648U);
  #line 3099 
  ipw_arc_release(priv);
  #line 3100 
  ipw_write_reg32(priv,3145952U,0U);
  #line 3101 
  __const_udelay(4295000UL);
  #line 3104 
  ipw_write_reg32(priv,3145732U,1U);
  #line 3105 
  __const_udelay(4295000UL);
  #line 3107 
  ipw_write_reg32(priv,3145732U,0U);
  #line 3108 
  __const_udelay(4295000UL);
  #line 3111 
  ipw_write_reg8(priv,2097152U,(unsigned char)0);
  #line 3112 
  ipw_write_reg8(priv,2097152U,(unsigned char)64);
  #line 3113 
  __const_udelay(4295000UL);
  #line 3124 
  i = 0;
  #line 3124 
  while ((unsigned long)i < len / 2UL) {
    #line 3125 
    ipw_write_reg16(priv,2097168U,(unsigned short)((int)*(image + (unsigned long)i)));
    #line 3124 
    i ++;
  }
  #line 3129 
  ipw_write_reg8(priv,2097152U,(unsigned char)0);
  #line 3130 
  ipw_write_reg8(priv,2097152U,(unsigned char)128);
  #line 3135 
  i = 0;
  #line 3135 
  while (i <= 99) {
    #line 3137 
    cr = _ipw_read_reg8(priv,2097152U);
    #line 3138 
    if (((int)cr & 1) != 0) 
                            #line 3139 
                            break;
    #line 3140 
    __const_udelay(4295000UL);
    #line 3135 
    i ++;
  }
  #line 3143 
  if (((int)cr & 1) != 0) {
    #line 3145 
    __le32 response_buffer[7U];
    #line 3147 
    i = 0;
    #line 3147 
    while ((unsigned int)i <= 6U) {
      #line 3149 
      response_buffer[i] = _ipw_read_reg32(priv,2097156U);
      #line 3147 
      i ++;
    }
    #line 3151 
    memcpy((void *)(& priv->dino_alive),(void *)(& response_buffer),26UL);
    #line 3153 
    if ((unsigned int)priv->dino_alive.alive_command == 1U && (unsigned int)priv->dino_alive.ucode_valid == 1U) {
      #line 3155 
      rc = 0;
      #line 3156 
      if ((ipw_debug_level & 4U) != 0U) {
        #line 3156 
        int tmp_5;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        ;
        #line 3156 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 3156 
                                                                 tmp_5 = 73; else 
                                                                    #line 3156 
                                                                    tmp_5 = 85;
        #line 3156 
        printk((char *)"\001",tmp_5,(char *)"ipw_load_ucode",(int)priv->dino_alive.software_revision,(int)priv->dino_alive.software_revision,(int)priv->dino_alive.device_identifier,(int)priv->dino_alive.device_identifier,(int)priv->dino_alive.time_stamp[0],(int)priv->dino_alive.time_stamp[1],(int)priv->dino_alive.time_stamp[2],(int)priv->dino_alive.time_stamp[3],(int)priv->dino_alive.time_stamp[4]);
      }
    }
    else {
      #line 3169 
      if ((ipw_debug_level & 4U) != 0U) {
        #line 3169 
        int tmp_7;
        #line 3169 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 3169 
                                                                 tmp_7 = 73; else 
                                                                    #line 3169 
                                                                    tmp_7 = 85;
        #line 3169 
        printk((char *)"\001",tmp_7,(char *)"ipw_load_ucode");
      }
      #line 3170 
      rc = -22;
    }
  }
  else {
    #line 3173 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 3173 
      int tmp_9;
      #line 3173 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3173 
                                                               tmp_9 = 73; else 
                                                                    #line 3173 
                                                                    tmp_9 = 85;
      #line 3173 
      printk((char *)"\001",tmp_9,(char *)"ipw_load_ucode");
    }
    #line 3174 
    rc = -62;
  }
  #line 3179 
  ipw_write_reg8(priv,2097152U,(unsigned char)0);
  #line 3181 
  return rc;
}

#line 3184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_load_firmware(struct ipw_priv *priv, u8 *data, size_t len)
{
  #line 3188 
  struct fw_chunk *chunk;
  #line 3190 
  int i;
  #line 3191 
  struct dma_pool *pool;
  #line 3192 
  void **virts;
  #line 3193 
  dma_addr_t *phys;
  #line 3186 
  int ret = -1;
  #line 3187 
  int offset = 0;
  #line 3189 
  int total_nr = 0;
  #line 3195 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3195 
    int tmp_0;
    #line 3195 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3195 
                                                             tmp_0 = 73; else 
                                                                    #line 3195 
                                                                    tmp_0 = 85;
    #line 3195 
    printk((char *)"\001",tmp_0,(char *)"ipw_load_firmware");
  }
  #line 3197 
  virts = (void **)kmalloc_array(64UL,8UL,3264U);
  #line 3199 
  if (virts == (void **)0) 
                           #line 3200 
                           return -12;
  #line 3202 
  phys = (dma_addr_t *)kmalloc_array(64UL,8UL,3264U);
  #line 3204 
  if (phys == (dma_addr_t *)0ULL) {
    #line 3205 
    kfree((void *)virts);
    #line 3206 
    return -12;
  }
  #line 3208 
  pool = dma_pool_create((char *)"ipw2200",& (priv->pci_dev)->dev,8191UL,0UL,0UL);
  #line 3210 
  if (pool == (struct dma_pool *)0) {
    #line 3211 
    printk((char *)"\001");
    #line 3212 
    kfree((void *)phys);
    #line 3213 
    kfree((void *)virts);
    #line 3214 
    return -12;
  }
  #line 3218 
  ret = ipw_fw_dma_enable(priv);
  #line 3221 
  if ((long)(priv->sram_desc.last_cb_index != 0UL) != 0L) {
    #line 3222 
    ldv_inline_asm();
    #line 3223 
    ldv_inline_asm();
    #line 3224 
    ldv_inline_asm();
    #line 3221 
    ;
  }
  #line 3223 
  while (1) {
    {
      #line 3224 
      u32 chunk_len;
      #line 3225 
      u8 *start;
      #line 3226 
      int size;
      #line 3227 
      int nr = 0;
      #line 3229 
      chunk = (struct fw_chunk *)(data + (unsigned long)offset);
      #line 3230 
      offset = (int)((unsigned int)offset + 8U);
      #line 3231 
      chunk_len = chunk->length;
      #line 3232 
      start = data + (unsigned long)offset;
      #line 3234 
      nr = (int)((chunk_len + 8190U) / 8191U);
      #line 3235 
      i = 0;
      #line 3235 
      while (i < nr) {
        {
          #line 3242 
          unsigned int __UNIQUE_ID___x470;
          #line 3242 
          unsigned int tmp_3;
          #line 3236 
          *(virts + (unsigned long)total_nr) = dma_pool_alloc(pool,3264U,phys + (unsigned long)total_nr);
          #line 3238 
          if (*(virts + (unsigned long)total_nr) == (void *)0) {
            #line 3239 
            ret = -12;
            #line 3240 
            goto out;
          }
          {
            #line 3242 
            __UNIQUE_ID___x470 = chunk_len - (unsigned int)(i * 8191);
            #line 3242 
            unsigned int __UNIQUE_ID___y471 = 8191U;
            #line 3242 
            if (__UNIQUE_ID___x470 < __UNIQUE_ID___y471) 
                                                         #line 3242 
                                                         tmp_3 = __UNIQUE_ID___x470; else 
                                                                    #line 3242 
                                                                    tmp_3 = __UNIQUE_ID___y471;
            }
          #line 3242 
          size = (int)tmp_3;
          #line 3244 
          memcpy(*(virts + (unsigned long)total_nr),(void *)start,(unsigned long)size);
          #line 3245 
          start += (unsigned long)size;
          #line 3246 
          total_nr ++;
          #line 3248 
          if ((long)(total_nr > 64) != 0L) {
            #line 3249 
            ldv_inline_asm();
            #line 3250 
            ldv_inline_asm();
            #line 3251 
            ldv_inline_asm();
            #line 3248 
            ;
          }
        }
        #line 3235 
        i ++;
      }
      #line 3255 
      ret = ipw_fw_dma_add_buffer(priv,phys + (unsigned long)(total_nr - nr),nr,chunk->address,chunk_len);
      #line 3258 
      if (ret != 0) {
        #line 3259 
        if ((ipw_debug_level & 4U) != 0U) {
          #line 3259 
          int tmp_6;
          #line 3259 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 3259 
                                                                   tmp_6 = 73; else 
                                                                    #line 3259 
                                                                    tmp_6 = 85;
          #line 3259 
          printk((char *)"\001",tmp_6,(char *)"ipw_load_firmware");
        }
        #line 3260 
        goto out;
      }
      #line 3263 
      offset = (int)((unsigned int)offset + chunk_len);
    }
    #line 3264 
    if (! ((unsigned long)offset < len)) 
                                         #line 3223 
                                         break;
  }
  #line 3267 
  ret = ipw_fw_dma_kick(priv);
  #line 3268 
  if (ret != 0) {
    #line 3269 
    printk((char *)"\001");
    #line 3270 
    goto out;
  }
  #line 3273 
  ret = ipw_fw_dma_wait(priv);
  #line 3274 
  if (ret != 0) {
    #line 3275 
    printk((char *)"\001");
    #line 3276 
    goto out;
  }
  #line 3278 
  out: 
       #line 3278 
  ;
  #line 3279 
  i = 0;
  #line 3279 
  while (i < total_nr) {
    #line 3280 
    dma_pool_free(pool,*(virts + (unsigned long)i),*(phys + (unsigned long)i));
    #line 3279 
    i ++;
  }
  #line 3282 
  dma_pool_destroy(pool);
  #line 3283 
  kfree((void *)phys);
  #line 3284 
  kfree((void *)virts);
  #line 3286 
  return ret;
}

#line 3290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_stop_nic(struct ipw_priv *priv)
{
  #line 3292 
  int rc = 0;
  #line 3295 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3295 
    int tmp_0;
    #line 3295 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3295 
                                                             tmp_0 = 73; else 
                                                                    #line 3295 
                                                                    tmp_0 = 85;
    #line 3295 
    printk((char *)"\001",tmp_0,(char *)"ipw_stop_nic",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3295,32U,512U);
  }
  #line 3295 
  _ipw_write32(priv,32UL,512U);
  #line 3297 
  rc = ipw_poll_bit(priv,32U,256U,500);
  #line 3299 
  if (rc < 0) {
    #line 3300 
    printk((char *)"\001");
    #line 3301 
    return rc;
  }
  #line 3304 
  ipw_set_bit(priv,32U,1U);
  #line 3306 
  return rc;
}

#line 3309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_start_nic(struct ipw_priv *priv)
{
  #line 3311 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3311 
    int tmp_0;
    #line 3311 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3311 
                                                             tmp_0 = 73; else 
                                                                    #line 3311 
                                                                    tmp_0 = 85;
    #line 3311 
    printk((char *)"\001",tmp_0,(char *)"ipw_start_nic");
  }
  #line 3314 
  ipw_clear_bit(priv,32U,769U);
  #line 3320 
  ipw_set_bit(priv,36U,2U);
  #line 3323 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3323 
    int tmp_2;
    #line 3323 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3323 
                                                             tmp_2 = 73; else 
                                                                    #line 3323 
                                                                    tmp_2 = 85;
    #line 3323 
    printk((char *)"\001",tmp_2,(char *)"ipw_start_nic");
  }
  #line 3324 
  return;
}

#line 3326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_init_nic(struct ipw_priv *priv)
{
  #line 3328 
  int rc;
  #line 3330 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3330 
    int tmp_0;
    #line 3330 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3330 
                                                             tmp_0 = 73; else 
                                                                    #line 3330 
                                                                    tmp_0 = 85;
    #line 3330 
    printk((char *)"\001",tmp_0,(char *)"ipw_init_nic");
  }
  #line 3334 
  ipw_set_bit(priv,36U,4U);
  #line 3337 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3337 
    int tmp_2;
    #line 3337 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3337 
                                                             tmp_2 = 73; else 
                                                                    #line 3337 
                                                                    tmp_2 = 85;
    #line 3337 
    printk((char *)"\001",tmp_2,(char *)"ipw_init_nic",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3337,4084U,536870912U);
  }
  #line 3337 
  _ipw_write32(priv,4084UL,536870912U);
  #line 3341 
  rc = ipw_poll_bit(priv,36U,1U,250);
  #line 3343 
  if (rc < 0) 
    #line 3344 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 3344 
      int tmp_4;
      #line 3344 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3344 
                                                               tmp_4 = 73; else 
                                                                    #line 3344 
                                                                    tmp_4 = 85;
      #line 3344 
      printk((char *)"\001",tmp_4,(char *)"ipw_init_nic");
    }
  #line 3347 
  ipw_set_bit(priv,32U,128U);
  #line 3349 
  __const_udelay(42950UL);
  #line 3352 
  ipw_set_bit(priv,36U,4U);
  #line 3354 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3354 
    int tmp_6;
    #line 3354 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3354 
                                                             tmp_6 = 73; else 
                                                                    #line 3354 
                                                                    tmp_6 = 85;
    #line 3354 
    printk((char *)"\001",tmp_6,(char *)"ipw_init_nic");
  }
  #line 3355 
  return 0;
}

#line 3361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_reset_nic(struct ipw_priv *priv)
{
  #line 3364 
  unsigned long flags;
  #line 3363 
  int rc = 0;
  #line 3366 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3366 
    int tmp_0;
    #line 3366 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3366 
                                                             tmp_0 = 73; else 
                                                                    #line 3366 
                                                                    tmp_0 = 85;
    #line 3366 
    printk((char *)"\001",tmp_0,(char *)"ipw_reset_nic");
  }
  #line 3368 
  rc = ipw_init_nic(priv);
  #line 3370 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 3372 
  priv->status &= 4294967294U;
  #line 3373 
  __wake_up(& priv->wait_command_queue,1U,1,(void *)0);
  #line 3374 
  priv->status &= 4288675839U;
  #line 3375 
  __wake_up(& priv->wait_state,1U,1,(void *)0);
  #line 3376 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 3378 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 3378 
    int tmp_2;
    #line 3378 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3378 
                                                             tmp_2 = 73; else 
                                                                    #line 3378 
                                                                    tmp_2 = 85;
    #line 3378 
    printk((char *)"\001",tmp_2,(char *)"ipw_reset_nic");
  }
  #line 3379 
  return rc;
}

#line 3391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_get_fw(struct ipw_priv *priv, struct firmware **raw_0, char *name)
{
  #line 3394 
  struct ipw_fw *fw;
  #line 3395 
  int rc;
  #line 3398 
  rc = cif_request_firmware(raw_0,name,& (priv->pci_dev)->dev);
  #line 3399 
  if (rc < 0) {
    #line 3400 
    printk((char *)"\001",name,rc);
    #line 3401 
    return rc;
  }
  #line 3404 
  if ((*raw_0)->size <= 15UL) {
    #line 3405 
    printk((char *)"\001",name,(*raw_0)->size);
    #line 3406 
    return -22;
  }
  #line 3409 
  fw = (struct ipw_fw *)(*raw_0)->data;
  #line 3411 
  if ((*raw_0)->size < (((unsigned long)fw->boot_size + (unsigned long)fw->ucode_size) + (unsigned long)fw->fw_size) + 16UL) {
    #line 3413 
    printk((char *)"\001",name,(*raw_0)->size);
    #line 3415 
    return -22;
  }
  #line 3418 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 3418 
    int tmp_0;
    #line 3418 
    ;
    #line 3418 
    ;
    #line 3418 
    ;
    #line 3418 
    ;
    #line 3418 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3418 
                                                             tmp_0 = 73; else 
                                                                    #line 3418 
                                                                    tmp_0 = 85;
    #line 3418 
    printk((char *)"\001",tmp_0,(char *)"ipw_get_fw",name,fw->ver >> 16,fw->ver & 255U,(*raw_0)->size + 18446744073709551600UL);
  }
  #line 3423 
  return 0;
}

#line 3428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rx_queue_reset(struct ipw_priv *priv, struct ipw_rx_queue *rxq)
{
  #line 3431 
  unsigned long flags;
  #line 3432 
  int i;
  #line 3434 
  cif___ldv_spin_lock_lock_of_ipw_rx_queue(& rxq->lock);
  #line 3436 
  INIT_LIST_HEAD(& rxq->rx_free);
  #line 3437 
  INIT_LIST_HEAD(& rxq->rx_used);
  #line 3440 
  i = 0;
  #line 3440 
  while (i <= 63) {
    #line 3443 
    if (rxq->pool[i].skb != (struct sk_buff *)0) {
      #line 3444 
      pci_unmap_single(priv->pci_dev,rxq->pool[i].dma_addr,3000UL,2);
      #line 3446 
      consume_skb(rxq->pool[i].skb);
      #line 3447 
      rxq->pool[i].skb = (struct sk_buff *)0;
    }
    #line 3449 
    list_add_tail(& rxq->pool[i].list,& rxq->rx_used);
    #line 3440 
    i ++;
  }
  #line 3454 
  rxq->write = 0U;
  #line 3454 
  rxq->read = 0U;
  #line 3455 
  rxq->free_count = 0U;
  #line 3456 
  cif_spin_unlock_irqrestore_lock_of_ipw_rx_queue(& rxq->lock,flags);
  #line 3457 
  return;
}

#line 3460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int fw_loaded = 0;
#line 3461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct firmware *raw = (struct firmware *)0;
#line 3463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void free_firmware(void)
{
  #line 3465 
  if (fw_loaded != 0) {
    #line 3466 
    cif_release_firmware(raw);
    #line 3467 
    raw = (struct firmware *)0;
    #line 3468 
    fw_loaded = 0;
  }
  #line 3470 
  return;
}

#line 3475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_load(struct ipw_priv *priv)
{
  #line 3480 
  struct ipw_fw *fw;
  #line 3481 
  u8 *boot_img;
  #line 3481 
  u8 *ucode_img;
  #line 3481 
  u8 *fw_img;
  #line 3482 
  u8 *name = (u8 *)0U;
  #line 3483 
  int rc = 0;
  #line 3483 
  int retries = 3;
  #line 3485 
  switch ((priv->ieee)->iw_mode) {
    #line 3486 
    case 1: 
            #line 3486 
    ;
    #line 3487 
    name = (u8 *)"ipw2200-ibss.fw";
    #line 3488 
    break;
    #line 3490 
    case 6: 
            #line 3490 
    ;
    #line 3491 
    name = (u8 *)"ipw2200-sniffer.fw";
    #line 3492 
    break;
    #line 3494 
    case 2: 
            #line 3494 
    ;
    #line 3495 
    name = (u8 *)"ipw2200-bss.fw";
    #line 3496 
    break;
  }
  #line 3499 
  if (name == (u8 *)0U) {
    #line 3500 
    rc = -22;
    #line 3501 
    goto error;
  }
  #line 3505 
  if (fw_loaded == 0) {
    #line 3507 
    rc = ipw_get_fw(priv,& raw,(char *)name);
    #line 3508 
    if (rc < 0) 
                #line 3509 
                goto error;
  }
  #line 3514 
  fw = (struct ipw_fw *)raw->data;
  #line 3515 
  boot_img = & fw->data[0];
  #line 3516 
  ucode_img = & fw->data[fw->boot_size];
  #line 3517 
  fw_img = & fw->data[fw->boot_size + fw->ucode_size];
  #line 3520 
  if (priv->rxq == (struct ipw_rx_queue *)0) 
                                             #line 3521 
                                             priv->rxq = ipw_rx_queue_alloc(priv); else 
                                                                    #line 3523 
                                                                    ipw_rx_queue_reset(priv,priv->rxq);
  #line 3524 
  if (priv->rxq == (struct ipw_rx_queue *)0) {
    #line 3525 
    printk((char *)"\001");
    #line 3526 
    rc = -12;
    #line 3527 
    goto error;
  }
  #line 3530 
  retry: 
         #line 3530 
  ;
  #line 3532 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3532 
    int tmp_0;
    #line 3532 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3532 
                                                             tmp_0 = 73; else 
                                                                    #line 3532 
                                                                    tmp_0 = 85;
    #line 3532 
    printk((char *)"\001",tmp_0,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3532,12U,986580941U);
  }
  #line 3532 
  _ipw_write32(priv,12UL,986580941U);
  #line 3533 
  priv->status &= 4294967293U;
  #line 3536 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3536 
    int tmp_2;
    #line 3536 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3536 
                                                             tmp_2 = 73; else 
                                                                    #line 3536 
                                                                    tmp_2 = 85;
    #line 3536 
    printk((char *)"\001",tmp_2,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3536,8U,3308386354U);
  }
  #line 3536 
  _ipw_write32(priv,8UL,3308386354U);
  #line 3538 
  ipw_stop_nic(priv);
  #line 3540 
  rc = ipw_reset_nic(priv);
  #line 3541 
  if (rc < 0) {
    #line 3542 
    printk((char *)"\001");
    #line 3543 
    goto error;
  }
  #line 3546 
  ipw_zero_memory(priv,0U,196608U);
  #line 3550 
  rc = ipw_load_firmware(priv,boot_img,(unsigned long)fw->boot_size);
  #line 3551 
  if (rc < 0) {
    #line 3552 
    printk((char *)"\001",rc);
    #line 3553 
    goto error;
  }
  #line 3557 
  ipw_start_nic(priv);
  #line 3560 
  rc = ipw_poll_bit(priv,8U,16777216U,500);
  #line 3562 
  if (rc < 0) {
    #line 3563 
    printk((char *)"\001");
    #line 3564 
    goto error;
  }
  #line 3566 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 3566 
    int tmp_4;
    #line 3566 
    ;
    #line 3566 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3566 
                                                             tmp_4 = 73; else 
                                                                    #line 3566 
                                                                    tmp_4 = 85;
    #line 3566 
    printk((char *)"\001",tmp_4,(char *)"ipw_load",rc);
  }
  #line 3569 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3569 
    int tmp_6;
    #line 3569 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3569 
                                                             tmp_6 = 73; else 
                                                                    #line 3569 
                                                                    tmp_6 = 85;
    #line 3569 
    printk((char *)"\001",tmp_6,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3569,8U,16777216U);
  }
  #line 3569 
  _ipw_write32(priv,8UL,16777216U);
  #line 3572 
  rc = ipw_load_ucode(priv,ucode_img,(unsigned long)fw->ucode_size);
  #line 3573 
  if (rc < 0) {
    #line 3574 
    printk((char *)"\001",rc);
    #line 3575 
    goto error;
  }
  #line 3579 
  ipw_stop_nic(priv);
  #line 3582 
  rc = ipw_load_firmware(priv,fw_img,(unsigned long)fw->fw_size);
  #line 3583 
  if (rc < 0) {
    #line 3584 
    printk((char *)"\001",rc);
    #line 3585 
    goto error;
  }
  #line 3588 
  fw_loaded = 1;
  #line 3591 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3591 
    int tmp_8;
    #line 3591 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3591 
                                                             tmp_8 = 73; else 
                                                                    #line 3591 
                                                                    tmp_8 = 85;
    #line 3591 
    printk((char *)"\001",tmp_8,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3591,2588U,0U);
  }
  #line 3591 
  _ipw_write32(priv,2588UL,0U);
  #line 3593 
  rc = ipw_queue_reset(priv);
  #line 3594 
  if (rc < 0) {
    #line 3595 
    printk((char *)"\001");
    #line 3596 
    goto error;
  }
  #line 3600 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3600 
    int tmp_10;
    #line 3600 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3600 
                                                             tmp_10 = 73; else 
                                                                    #line 3600 
                                                                    tmp_10 = 85;
    #line 3600 
    printk((char *)"\001",tmp_10,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3600,12U,986580941U);
  }
  #line 3600 
  _ipw_write32(priv,12UL,986580941U);
  #line 3602 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3602 
    int tmp_12;
    #line 3602 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3602 
                                                             tmp_12 = 73; else 
                                                                    #line 3602 
                                                                    tmp_12 = 85;
    #line 3602 
    printk((char *)"\001",tmp_12,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3602,8U,3308386354U);
  }
  #line 3602 
  _ipw_write32(priv,8UL,3308386354U);
  #line 3605 
  ipw_start_nic(priv);
  #line 3607 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3607 
    int tmp_14;
    #line 3607 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3607 
                                                             tmp_14 = 73; else 
                                                                    #line 3607 
                                                                    tmp_14 = 85;
    #line 3607 
    printk((char *)"\001",tmp_14,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3607,8U);
  }
  #line 3607 
  if ((_ipw_read32(priv,8UL) & 2147483648U) != 0U) {
    #line 3608 
    if (retries > 0) {
      #line 3609 
      printk((char *)"\001");
      #line 3610 
      retries --;
      #line 3611 
      goto retry;
    }
    #line 3614 
    printk((char *)"\001");
    #line 3615 
    rc = -5;
    #line 3616 
    goto error;
  }
  #line 3620 
  rc = ipw_poll_bit(priv,8U,16777216U,500);
  #line 3622 
  if (rc < 0) {
    #line 3623 
    printk((char *)"\001");
    #line 3624 
    goto error;
  }
  #line 3626 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 3626 
    int tmp_18;
    #line 3626 
    ;
    #line 3626 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3626 
                                                             tmp_18 = 73; else 
                                                                    #line 3626 
                                                                    tmp_18 = 85;
    #line 3626 
    printk((char *)"\001",tmp_18,(char *)"ipw_load",rc);
  }
  #line 3629 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3629 
    int tmp_20;
    #line 3629 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3629 
                                                             tmp_20 = 73; else 
                                                                    #line 3629 
                                                                    tmp_20 = 85;
    #line 3629 
    printk((char *)"\001",tmp_20,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3629,8U,16777216U);
  }
  #line 3629 
  _ipw_write32(priv,8UL,16777216U);
  #line 3632 
  priv->eeprom_delay = 1;
  #line 3633 
  ipw_read_eeprom(priv);
  #line 3635 
  ipw_eeprom_init_sram(priv);
  #line 3638 
  ipw_enable_interrupts(priv);
  #line 3641 
  ipw_rx_queue_replenish((void *)priv);
  #line 3643 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3643 
    int tmp_22;
    #line 3643 
    ;
    #line 3643 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3643 
                                                             tmp_22 = 73; else 
                                                                    #line 3643 
                                                                    tmp_22 = 85;
    #line 3643 
    printk((char *)"\001",tmp_22,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3643,672U,(priv->rxq)->read);
  }
  #line 3643 
  _ipw_write32(priv,672UL,(priv->rxq)->read);
  #line 3646 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3646 
    int tmp_24;
    #line 3646 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3646 
                                                             tmp_24 = 73; else 
                                                                    #line 3646 
                                                                    tmp_24 = 85;
    #line 3646 
    printk((char *)"\001",tmp_24,(char *)"ipw_load",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3646,8U,3308386354U);
  }
  #line 3646 
  _ipw_write32(priv,8UL,3308386354U);
  #line 3651 
  return 0;
  #line 3653 
  error: 
         #line 3653 
  ;
  #line 3654 
  if (priv->rxq != (struct ipw_rx_queue *)0) {
    #line 3655 
    ipw_rx_queue_free(priv,priv->rxq);
    #line 3656 
    priv->rxq = (struct ipw_rx_queue *)0;
  }
  #line 3658 
  ipw_tx_queue_free(priv);
  #line 3659 
  cif_release_firmware(raw);
  #line 3661 
  fw_loaded = 0;
  #line 3662 
  raw = (struct firmware *)0;
  #line 3665 
  return rc;
}

#line 3698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_rx_queue_space(struct ipw_rx_queue *q)
{
  #line 3700 
  int s = (int)(q->read - q->write);
  #line 3701 
  if (s <= 0) 
              #line 3702 
              s += 32;
  #line 3704 
  s += -2;
  #line 3705 
  if (s < 0) 
             #line 3706 
             s = 0;
  #line 3707 
  return s;
}

#line 3710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static int ipw_tx_queue_space(struct clx2_queue *q)
{
  #line 3712 
  int s = q->last_used - q->first_empty;
  #line 3713 
  if (s <= 0) 
              #line 3714 
              s = q->n_bd + s;
  #line 3715 
  s += -2;
  #line 3716 
  if (s < 0) 
             #line 3717 
             s = 0;
  #line 3718 
  return s;
}

#line 3721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static int ipw_queue_inc_wrap(int index, int n_bd)
{
  #line 3723 
  int tmp;
  #line 3723 
  index ++;
  #line 3723 
  ;
  #line 3723 
  if (index != n_bd) 
                     #line 3723 
                     tmp = index; else 
                                       #line 3723 
                                       tmp = 0;
  #line 3723 
  return tmp;
}

#line 3740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_queue_init(struct ipw_priv *priv, struct clx2_queue *q, int count, u32 read, u32 write, u32 base, u32 size)
{
  #line 3743 
  q->n_bd = count;
  #line 3745 
  q->low_mark = q->n_bd / 4;
  #line 3746 
  if (q->low_mark <= 3) 
                        #line 3747 
                        q->low_mark = 4;
  #line 3749 
  q->high_mark = q->n_bd / 8;
  #line 3750 
  if (q->high_mark <= 1) 
                         #line 3751 
                         q->high_mark = 2;
  #line 3753 
  q->last_used = 0;
  #line 3753 
  q->first_empty = 0;
  #line 3754 
  q->reg_r = read;
  #line 3755 
  q->reg_w = write;
  #line 3757 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3757 
    int tmp_1;
    #line 3757 
    ;
    #line 3757 
    ;
    #line 3757 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3757 
                                                             tmp_1 = 73; else 
                                                                    #line 3757 
                                                                    tmp_1 = 85;
    #line 3757 
    printk((char *)"\001",tmp_1,(char *)"ipw_queue_init",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3757,base,(unsigned int)q->dma_addr);
  }
  #line 3757 
  _ipw_write32(priv,(unsigned long)base,(unsigned int)q->dma_addr);
  #line 3758 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3758 
    int tmp_3;
    #line 3758 
    ;
    #line 3758 
    ;
    #line 3758 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3758 
                                                             tmp_3 = 73; else 
                                                                    #line 3758 
                                                                    tmp_3 = 85;
    #line 3758 
    printk((char *)"\001",tmp_3,(char *)"ipw_queue_init",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3758,size,(unsigned int)count);
  }
  #line 3758 
  _ipw_write32(priv,(unsigned long)size,(unsigned int)count);
  #line 3759 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3759 
    int tmp_5;
    #line 3759 
    ;
    #line 3759 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3759 
                                                             tmp_5 = 73; else 
                                                                    #line 3759 
                                                                    tmp_5 = 85;
    #line 3759 
    printk((char *)"\001",tmp_5,(char *)"ipw_queue_init",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3759,read,0U);
  }
  #line 3759 
  _ipw_write32(priv,(unsigned long)read,0U);
  #line 3760 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 3760 
    int tmp_7;
    #line 3760 
    ;
    #line 3760 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3760 
                                                             tmp_7 = 73; else 
                                                                    #line 3760 
                                                                    tmp_7 = 85;
    #line 3760 
    printk((char *)"\001",tmp_7,(char *)"ipw_queue_init",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",3760,write,0U);
  }
  #line 3760 
  _ipw_write32(priv,(unsigned long)write,0U);
  #line 3762 
  _ipw_read32(priv,144UL);
  #line 3763 
  return;
}

#line 3765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_queue_tx_init(struct ipw_priv *priv, struct clx2_tx_queue *q, int count, u32 read, u32 write, u32 base, u32 size)
{
  #line 3769 
  struct pci_dev *dev = priv->pci_dev;
  #line 3771 
  q->txb = (struct libipw_txb **)kmalloc_array((unsigned long)count,8UL,3264U);
  #line 3772 
  if (q->txb == (struct libipw_txb **)0) {
    #line 3773 
    printk((char *)"\001");
    #line 3774 
    return -12;
  }
  #line 3778 
  q->bd = (struct tfd_frame *)pci_alloc_consistent(dev,(unsigned long)count * 128UL,& q->q.dma_addr);
  #line 3779 
  if (q->bd == (struct tfd_frame *)0) {
    #line 3780 
    printk((char *)"\001",(unsigned long)count * 128UL);
    #line 3782 
    kfree((void *)q->txb);
    #line 3783 
    q->txb = (struct libipw_txb **)0;
    #line 3784 
    return -12;
  }
  #line 3787 
  ipw_queue_init(priv,& q->q,count,read,write,base,size);
  #line 3788 
  return 0;
}

#line 3798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_queue_tx_free_tfd(struct ipw_priv *priv, struct clx2_tx_queue *txq)
{
  #line 3803 
  int i;
  #line 3801 
  struct tfd_frame *bd = txq->bd + (unsigned long)txq->q.last_used;
  #line 3802 
  struct pci_dev *dev = priv->pci_dev;
  #line 3806 
  if ((unsigned int)bd->control_flags.message_type == 1U) 
                                                          #line 3808 
                                                          return;
  #line 3811 
  if (bd->u.data.num_chunks > 6U) {
    #line 3812 
    printk((char *)"\001",bd->u.data.num_chunks);
    #line 3815 
    return;
  }
  #line 3819 
  i = 0;
  #line 3819 
  while (bd->u.data.num_chunks > (unsigned int)i) {
    #line 3820 
    pci_unmap_single(dev,(unsigned long long)bd->u.data.chunk_ptr[i],(unsigned long)bd->u.data.chunk_len[i],1);
    #line 3823 
    if (*(txq->txb + (unsigned long)txq->q.last_used) != (struct libipw_txb *)0) {
      #line 3824 
      libipw_txb_free(*(txq->txb + (unsigned long)txq->q.last_used));
      #line 3825 
      *(txq->txb + (unsigned long)txq->q.last_used) = (struct libipw_txb *)0;
    }
    #line 3819 
    i ++;
  }
  #line 3828 
  return;
}

#line 3839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_queue_tx_free(struct ipw_priv *priv, struct clx2_tx_queue *txq)
{
  #line 3841 
  struct clx2_queue *q = & txq->q;
  #line 3842 
  struct pci_dev *dev = priv->pci_dev;
  #line 3844 
  if (q->n_bd == 0) 
                    #line 3845 
                    return;
  #line 3848 
  while (q->first_empty != q->last_used) {
    #line 3850 
    ipw_queue_tx_free_tfd(priv,txq);
    #line 3849 
    q->last_used = ipw_queue_inc_wrap(q->last_used,q->n_bd);
  }
  #line 3854 
  pci_free_consistent(dev,(unsigned long)q->n_bd * 128UL,(void *)txq->bd,q->dma_addr);
  #line 3856 
  kfree((void *)txq->txb);
  #line 3859 
  memset((void *)txq,0,56UL);
  #line 3860 
  return;
}

#line 3867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_tx_queue_free(struct ipw_priv *priv)
{
  #line 3870 
  ipw_queue_tx_free(priv,& priv->txq_cmd);
  #line 3873 
  ipw_queue_tx_free(priv,& priv->txq[0]);
  #line 3874 
  ipw_queue_tx_free(priv,& priv->txq[1]);
  #line 3875 
  ipw_queue_tx_free(priv,& priv->txq[2]);
  #line 3876 
  ipw_queue_tx_free(priv,& priv->txq[3]);
  #line 3877 
  return;
}

#line 3879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_create_bssid(struct ipw_priv *priv, u8 *bssid)
{
  #line 3882 
  *bssid = priv->mac_addr[0];
  #line 3883 
  *(bssid + 1U) = priv->mac_addr[1];
  #line 3884 
  *(bssid + 2U) = priv->mac_addr[2];
  #line 3887 
  get_random_bytes((void *)(bssid + 3U),3);
  #line 3889 
  *bssid = (unsigned char)((unsigned int)*bssid & 254U);
  #line 3890 
  *bssid = (unsigned char)((unsigned int)*bssid | 2U);
  #line 3891 
  return;
}

#line 3893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u8 ipw_add_station(struct ipw_priv *priv, u8 *bssid)
{
  #line 3895 
  struct ipw_station_entry entry;
  #line 3896 
  int i;
  #line 3898 
  i = 0;
  #line 3898 
  while ((int)priv->num_stations > i) {
    #line 3899 
    if ((int)ether_addr_equal((u8 *)(& priv->stations[i]),bssid) != 0) {
      #line 3901 
      priv->missed_adhoc_beacons = 0U;
      #line 3902 
      if ((priv->config & 1U) == 0U) 
                                     #line 3904 
                                     priv->config &= 4294967263U;
      #line 3906 
      return (unsigned char)i;
    }
    #line 3898 
    i ++;
  }
  #line 3910 
  if (i == 32) 
               #line 3911 
               return (unsigned char)255U;
  #line 3913 
  if ((ipw_debug_level & 2048U) != 0U) {
    #line 3913 
    int tmp_1;
    #line 3913 
    ;
    #line 3913 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3913 
                                                             tmp_1 = 73; else 
                                                                    #line 3913 
                                                                    tmp_1 = 85;
    #line 3913 
    printk((char *)"\001",tmp_1,(char *)"ipw_add_station",bssid);
  }
  #line 3915 
  entry.reserved = (unsigned char)0U;
  #line 3916 
  entry.support_mode = (unsigned char)0U;
  #line 3917 
  memcpy((void *)(& entry.mac_addr),(void *)bssid,6UL);
  #line 3918 
  memcpy((void *)(& priv->stations[i]),(void *)bssid,6UL);
  #line 3919 
  ipw_write_direct(priv,(unsigned int)((unsigned long)i) * 8U + 3084U,(void *)(& entry),8);
  #line 3921 
  priv->num_stations = (u8)((int)priv->num_stations + 1);
  #line 3923 
  return (unsigned char)i;
}

#line 3926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u8 ipw_find_station(struct ipw_priv *priv, u8 *bssid)
{
  #line 3928 
  int i;
  #line 3930 
  i = 0;
  #line 3930 
  while ((int)priv->num_stations > i) {
    #line 3931 
    if ((int)ether_addr_equal((u8 *)(& priv->stations[i]),bssid) != 0) 
      #line 3932 
      return (unsigned char)i;
    #line 3930 
    i ++;
  }
  #line 3934 
  return (unsigned char)255U;
}

#line 3937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_send_disassociate(struct ipw_priv *priv, int quiet)
{
  #line 3939 
  int err;
  #line 3941 
  if ((priv->status & 256U) != 0U) {
    #line 3942 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 3942 
      int tmp_0;
      #line 3942 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3942 
                                                               tmp_0 = 73; else 
                                                                    #line 3942 
                                                                    tmp_0 = 85;
      #line 3942 
      printk((char *)"\001",tmp_0,(char *)"ipw_send_disassociate");
    }
    #line 3943 
    cif_schedule_work(& priv->disassociate);
    #line 3944 
    return;
  }
  #line 3947 
  if ((priv->status & 128U) == 0U) {
    #line 3948 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 3948 
      int tmp_2;
      #line 3948 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3948 
                                                               tmp_2 = 73; else 
                                                                    #line 3948 
                                                                    tmp_2 = 85;
      #line 3948 
      printk((char *)"\001",tmp_2,(char *)"ipw_send_disassociate");
    }
    #line 3949 
    return;
  }
  #line 3952 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 3952 
    int tmp_4;
    #line 3952 
    ;
    #line 3952 
    ;
    #line 3952 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 3952 
                                                             tmp_4 = 73; else 
                                                                    #line 3952 
                                                                    tmp_4 = 85;
    #line 3952 
    printk((char *)"\001",tmp_4,(char *)"ipw_send_disassociate",(u8 *)(& priv->assoc_request.bssid),(int)priv->assoc_request.channel);
  }
  #line 3957 
  priv->status &= 4294966911U;
  #line 3958 
  priv->status |= 512U;
  #line 3960 
  if (quiet != 0) 
                  #line 3961 
                  priv->assoc_request.assoc_type = (unsigned char)5U; else 
                                                                    #line 3963 
                                                                    priv->assoc_request.assoc_type = (unsigned char)2U;
  #line 3965 
  err = ipw_send_associate(priv,& priv->assoc_request);
  #line 3966 
  if (err != 0) {
    #line 3967 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 3967 
      int tmp_6;
      #line 3967 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 3967 
                                                               tmp_6 = 73; else 
                                                                    #line 3967 
                                                                    tmp_6 = 85;
      #line 3967 
      printk((char *)"\001",tmp_6,(char *)"ipw_send_disassociate");
    }
    #line 3969 
    return;
  }
  #line 3971 
  return;
}

#line 3974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_disassociate(void *data)
{
  #line 3976 
  struct ipw_priv *priv = (struct ipw_priv *)data;
  #line 3977 
  if ((priv->status & 384U) == 0U) 
                                   #line 3978 
                                   return 0;
  #line 3979 
  ipw_send_disassociate((struct ipw_priv *)data,0);
  #line 3980 
  netif_carrier_off(priv->net_dev);
  #line 3981 
  return 1;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_disassociate(struct work_struct *work)
{
  #line 3987 
  void *__mptr;
  #line 3987 
  __mptr = (void *)work;
  #line 3986 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709547528U));
  #line 3988 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 3989 
  ipw_disassociate((void *)priv);
  #line 3990 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 3991 
  return;
}

#line 3993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_system_config(struct work_struct *work)
{
  #line 3996 
  void *__mptr;
  #line 3996 
  __mptr = (void *)work;
  #line 3995 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709547448U));
  #line 3999 
  if (priv->prom_net_dev != (struct net_device *)0) {
    #line 3999 
    if ((int)netif_running(priv->prom_net_dev) != 0) {
      #line 4000 
      priv->sys_config.accept_all_data_frames = (unsigned char)1U;
      #line 4001 
      priv->sys_config.accept_non_directed_frames = (unsigned char)1U;
      #line 4002 
      priv->sys_config.accept_all_mgmt_bcpr = (unsigned char)1U;
      #line 4003 
      priv->sys_config.accept_all_mgmt_frames = (unsigned char)1U;
    }
  }
  #line 4007 
  ipw_send_system_config(priv);
  #line 4008 
  return;
}

#line 4015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct ipw_status_code ipw_status_codes[23U] = {{.reason = (char *)"Successful"}, {.status = (unsigned short)1U, .reason = (char *)"Unspecified failure"}, {.status = (unsigned short)10U, .reason = (char *)"Cannot support all requested capabilities in the "}, {.status = (unsigned short)11U, .reason = (char *)"Reassociation denied due to inability to confirm that "}, {.status = (unsigned short)12U, .reason = (char *)"Association denied due to reason outside the scope of this "}, {.status = (unsigned short)13U, .reason = (char *)"Responding station does not support the specified authentication "}, {.status = (unsigned short)14U, .reason = (char *)"Received an Authentication frame with authentication sequence "}, {.status = (unsigned short)15U, .reason = (char *)"Authentication rejected because of challenge failure"}, {.status = (unsigned short)16U, .reason = (char *)"Authentication rejected due to timeout waiting for next "}, {.status = (unsigned short)17U, .reason = (char *)"Association denied because AP is unable to handle additional "}, {.status = (unsigned short)18U, .reason = (char *)"Association denied due to requesting station not supporting all "}, {.status = (unsigned short)19U, .reason = (char *)"Association denied due to requesting station not supporting "}, {.status = (unsigned short)20U, .reason = (char *)"Association denied due to requesting station not supporting "}, {.status = (unsigned short)21U, .reason = (char *)"Association denied due to requesting station not supporting "}, {.status = (unsigned short)25U, .reason = (char *)"Association denied due to requesting station not supporting "}, {.status = (unsigned short)26U, .reason = (char *)"Association denied due to requesting station not supporting "}, {.status = (unsigned short)40U, .reason = (char *)"Invalid Information Element"}, {.status = (unsigned short)41U, .reason = (char *)"Group Cipher is not valid"}, {.status = (unsigned short)42U, .reason = (char *)"Pairwise Cipher is not valid"}, {.status = (unsigned short)43U, .reason = (char *)"AKMP is not valid"}, {.status = (unsigned short)44U, .reason = (char *)"Unsupported RSN IE version"}, {.status = (unsigned short)45U, .reason = (char *)"Invalid RSN IE Capabilities"}, {.status = (unsigned short)46U, .reason = (char *)"Cipher suite is rejected per security policy"}};
#line 4062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static char *ipw_get_status_code(u16 status)
{
  #line 4064 
  int i;
  #line 4065 
  i = 0;
  #line 4065 
  while ((unsigned int)i <= 22U) {
    #line 4066 
    if ((int)ipw_status_codes[i].status == ((int)status & 255)) 
                                                                #line 4067 
                                                                return ipw_status_codes[i].reason;
    #line 4065 
    i ++;
  }
  #line 4068 
  return (char *)"Unknown status value.";
}

#line 4071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
__inline static void average_init(struct average *avg)
{
  #line 4073 
  memset((void *)avg,0,24UL);
  #line 4074 
  return;
}

#line 4078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static s16 exponential_average(s16 prev_avg, s16 val, u8 depth)
{
  #line 4080 
  return (short)((((int)depth + -1) * (int)prev_avg + (int)val) / (int)depth);
}

#line 4083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void average_add(struct average *avg, s16 val)
{
  #line 4087 
  u8 tmp;
  #line 4085 
  avg->sum -= (int)avg->entries[(int)avg->pos];
  #line 4086 
  avg->sum += (int)val;
  #line 4087 
  tmp = avg->pos;
  #line 4087 
  avg->pos = (u8)((int)avg->pos + 1);
  #line 4087 
  avg->entries[(int)tmp] = val;
  #line 4088 
  if ((long)((unsigned int)avg->pos == 8U) != 0L) {
    #line 4089 
    avg->init = (unsigned char)1U;
    #line 4090 
    avg->pos = (unsigned char)0U;
  }
  #line 4092 
  return;
}

#line 4094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static s16 average_value(struct average *avg)
{
  #line 4096 
  if ((long)((unsigned int)avg->init != 0U) == 0L) {
    #line 4097 
    if ((unsigned int)avg->pos != 0U) 
                                      #line 4098 
                                      return (short)(avg->sum / (int)avg->pos);
    #line 4099 
    return (short)0;
  }
  #line 4102 
  return (short)(avg->sum / 8);
}

#line 4105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_reset_stats(struct ipw_priv *priv)
{
  #line 4107 
  u32 len = 4U;
  #line 4109 
  priv->quality = 0U;
  #line 4111 
  average_init(& priv->average_missed_beacons);
  #line 4112 
  priv->exp_avg_rssi = (short)(-60);
  #line 4113 
  priv->exp_avg_noise = (short)171;
  #line 4115 
  priv->last_rate = 0U;
  #line 4116 
  priv->last_missed_beacons = 0U;
  #line 4117 
  priv->last_rx_packets = 0U;
  #line 4118 
  priv->last_tx_packets = 0U;
  #line 4119 
  priv->last_tx_failures = 0U;
  #line 4123 
  ipw_get_ordinal(priv,61498U,(void *)(& priv->last_rx_err),& len);
  #line 4125 
  ipw_get_ordinal(priv,61497U,(void *)(& priv->last_tx_failures),& len);
  #line 4129 
  priv->missed_adhoc_beacons = 0U;
  #line 4130 
  priv->missed_beacons = 0U;
  #line 4131 
  priv->tx_packets = 0U;
  #line 4132 
  priv->rx_packets = 0U;
  #line 4133 
  return;
}

#line 4136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u32 ipw_get_max_rate(struct ipw_priv *priv)
{
  #line 4138 
  u32 i = 2147483648U;
  #line 4139 
  u32 mask = (unsigned int)priv->rates_mask;
  #line 4142 
  if ((unsigned int)priv->assoc_request.ieee_mode == 1U) 
                                                         #line 4143 
                                                         mask &= 15U;
  #line 4148 
  while (i != 0U && (mask & i) == 0U) 
                                      #line 4149 
                                      i >>= 1;
  #line 4150 
  switch (i) {
    #line 4151 
    case (u32)1: 
                 #line 4151 
    ;
    #line 4152 
    return 1000000U;
    #line 4153 
    case (u32)2: 
                 #line 4153 
    ;
    #line 4154 
    return 2000000U;
    #line 4155 
    case (u32)4: 
                 #line 4155 
    ;
    #line 4156 
    return 5500000U;
    #line 4157 
    case (u32)16: 
                  #line 4157 
    ;
    #line 4158 
    return 6000000U;
    #line 4159 
    case (u32)32: 
                  #line 4159 
    ;
    #line 4160 
    return 9000000U;
    #line 4161 
    case (u32)8: 
                 #line 4161 
    ;
    #line 4162 
    return 11000000U;
    #line 4163 
    case (u32)64: 
                  #line 4163 
    ;
    #line 4164 
    return 12000000U;
    #line 4165 
    case (u32)128: 
                   #line 4165 
    ;
    #line 4166 
    return 18000000U;
    #line 4167 
    case (u32)256: 
                   #line 4167 
    ;
    #line 4168 
    return 24000000U;
    #line 4169 
    case (u32)512: 
                   #line 4169 
    ;
    #line 4170 
    return 36000000U;
    #line 4171 
    case (u32)1024: 
                    #line 4171 
    ;
    #line 4172 
    return 48000000U;
    #line 4173 
    case (u32)2048: 
                    #line 4173 
    ;
    #line 4174 
    return 54000000U;
  }
  #line 4177 
  if ((priv->ieee)->mode == 2) 
                               #line 4178 
                               return 11000000U; else 
                                                      #line 4180 
                                                      return 54000000U;
}

#line 4183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u32 ipw_get_current_rate(struct ipw_priv *priv)
{
  #line 4185 
  u32 rate;
  #line 4186 
  int err;
  #line 4185 
  u32 len = 4U;
  #line 4188 
  if ((priv->status & 128U) == 0U) 
                                   #line 4189 
                                   return 0U;
  #line 4191 
  if (priv->tx_packets > 300U) {
    #line 4192 
    err = ipw_get_ordinal(priv,61441U,(void *)(& rate),& len);
    #line 4194 
    if (err != 0) {
      #line 4195 
      if ((ipw_debug_level & 4U) != 0U) {
        #line 4195 
        int tmp_0;
        #line 4195 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 4195 
                                                                 tmp_0 = 73; else 
                                                                    #line 4195 
                                                                    tmp_0 = 85;
        #line 4195 
        printk((char *)"\001",tmp_0,(char *)"ipw_get_current_rate");
      }
      #line 4196 
      return 0U;
    }
  }
  else {
    #line 4199 
    return ipw_get_max_rate(priv);
  }
  #line 4201 
  switch (rate) {
    #line 4202 
    case (u32)10: 
                  #line 4202 
    ;
    #line 4203 
    return 1000000U;
    #line 4204 
    case (u32)20: 
                  #line 4204 
    ;
    #line 4205 
    return 2000000U;
    #line 4206 
    case (u32)55: 
                  #line 4206 
    ;
    #line 4207 
    return 5500000U;
    #line 4208 
    case (u32)13: 
                  #line 4208 
    ;
    #line 4209 
    return 6000000U;
    #line 4210 
    case (u32)15: 
                  #line 4210 
    ;
    #line 4211 
    return 9000000U;
    #line 4212 
    case (u32)110: 
                   #line 4212 
    ;
    #line 4213 
    return 11000000U;
    #line 4214 
    case (u32)5: 
                 #line 4214 
    ;
    #line 4215 
    return 12000000U;
    #line 4216 
    case (u32)7: 
                 #line 4216 
    ;
    #line 4217 
    return 18000000U;
    #line 4218 
    case (u32)9: 
                 #line 4218 
    ;
    #line 4219 
    return 24000000U;
    #line 4220 
    case (u32)11: 
                  #line 4220 
    ;
    #line 4221 
    return 36000000U;
    #line 4222 
    case (u32)1: 
                 #line 4222 
    ;
    #line 4223 
    return 48000000U;
    #line 4224 
    case (u32)3: 
                 #line 4224 
    ;
    #line 4225 
    return 54000000U;
  }
  #line 4228 
  return 0U;
}

#line 4232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_gather_stats(struct ipw_priv *priv)
{
  #line 4340 
  u32 tmp_13;
  #line 4341 
  u32 __UNIQUE_ID___x479;
  #line 4341 
  u32 tmp_15;
  #line 4338 
  u32 __UNIQUE_ID___x473;
  #line 4338 
  u32 tmp_9;
  #line 4339 
  u32 __UNIQUE_ID___x475;
  #line 4339 
  u32 tmp_11;
  #line 4340 
  u32 __UNIQUE_ID___x477;
  #line 4234 
  u32 rx_err;
  #line 4234 
  u32 rx_err_delta;
  #line 4234 
  u32 rx_packets_delta;
  #line 4235 
  u32 tx_failures;
  #line 4235 
  u32 tx_failures_delta;
  #line 4235 
  u32 tx_packets_delta;
  #line 4236 
  u32 missed_beacons_percent;
  #line 4236 
  u32 missed_beacons_delta;
  #line 4239 
  s16 rssi;
  #line 4240 
  u32 beacon_quality;
  #line 4240 
  u32 signal_quality;
  #line 4240 
  u32 tx_quality;
  #line 4240 
  u32 rx_quality;
  #line 4241 
  u32 rate_quality;
  #line 4242 
  u32 max_rate;
  #line 4237 
  u32 quality = 0U;
  #line 4238 
  u32 len = 4U;
  #line 4244 
  if ((priv->status & 128U) == 0U) {
    #line 4245 
    priv->quality = 0U;
    #line 4246 
    return;
  }
  #line 4250 
  ipw_get_ordinal(priv,61507U,(void *)(& priv->missed_beacons),& len);
  #line 4252 
  missed_beacons_delta = priv->missed_beacons - priv->last_missed_beacons;
  #line 4253 
  priv->last_missed_beacons = priv->missed_beacons;
  #line 4254 
  if ((unsigned int)priv->assoc_request.beacon_interval != 0U) 
                                                               #line 4255 
                                                               missed_beacons_percent = (((unsigned int)priv->assoc_request.beacon_interval * missed_beacons_delta) * 250U) / 5000U; else 
                                                                    #line 4259 
                                                                    missed_beacons_percent = 0U;
  #line 4261 
  average_add(& priv->average_missed_beacons,(short)((int)((short)missed_beacons_percent)));
  #line 4263 
  ipw_get_ordinal(priv,61498U,(void *)(& rx_err),& len);
  #line 4264 
  rx_err_delta = rx_err - priv->last_rx_err;
  #line 4265 
  priv->last_rx_err = rx_err;
  #line 4267 
  ipw_get_ordinal(priv,61497U,(void *)(& tx_failures),& len);
  #line 4268 
  tx_failures_delta = tx_failures - priv->last_tx_failures;
  #line 4269 
  priv->last_tx_failures = tx_failures;
  #line 4271 
  rx_packets_delta = priv->rx_packets - priv->last_rx_packets;
  #line 4272 
  priv->last_rx_packets = priv->rx_packets;
  #line 4274 
  tx_packets_delta = priv->tx_packets - priv->last_tx_packets;
  #line 4275 
  priv->last_tx_packets = priv->tx_packets;
  #line 4289 
  beacon_quality = 100U - missed_beacons_percent;
  #line 4290 
  if (beacon_quality <= 4U) 
                            #line 4291 
                            beacon_quality = 0U; else 
                                                      #line 4293 
                                                      beacon_quality = (beacon_quality * 100U + 4294966796U) / 95U;
  #line 4295 
  if ((ipw_debug_level & 536870912U) != 0U) {
    #line 4295 
    int tmp_0;
    #line 4295 
    ;
    #line 4295 
    ;
    #line 4295 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4295 
                                                             tmp_0 = 73; else 
                                                                    #line 4295 
                                                                    tmp_0 = 85;
    #line 4295 
    printk((char *)"\001",tmp_0,(char *)"ipw_gather_stats",beacon_quality,missed_beacons_percent);
  }
  #line 4298 
  priv->last_rate = ipw_get_current_rate(priv);
  #line 4299 
  max_rate = ipw_get_max_rate(priv);
  #line 4300 
  rate_quality = (priv->last_rate * 40U) / max_rate + 60U;
  #line 4301 
  if ((ipw_debug_level & 536870912U) != 0U) {
    #line 4301 
    int tmp_2;
    #line 4301 
    ;
    #line 4301 
    ;
    #line 4301 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4301 
                                                             tmp_2 = 73; else 
                                                                    #line 4301 
                                                                    tmp_2 = 85;
    #line 4301 
    printk((char *)"\001",tmp_2,(char *)"ipw_gather_stats",rate_quality,priv->last_rate / 1000000U);
  }
  #line 4304 
  if (rx_packets_delta > 100U && rx_packets_delta + rx_err_delta != 0U) 
    #line 4305 
    rx_quality = 100U - (rx_err_delta * 100U) / (rx_packets_delta + rx_err_delta); else 
                                                                    #line 4308 
                                                                    rx_quality = 100U;
  #line 4309 
  if ((ipw_debug_level & 536870912U) != 0U) {
    #line 4309 
    int tmp_4;
    #line 4309 
    ;
    #line 4309 
    ;
    #line 4309 
    ;
    #line 4309 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4309 
                                                             tmp_4 = 73; else 
                                                                    #line 4309 
                                                                    tmp_4 = 85;
    #line 4309 
    printk((char *)"\001",tmp_4,(char *)"ipw_gather_stats",rx_quality,rx_err_delta,rx_packets_delta);
  }
  #line 4312 
  if (tx_packets_delta > 100U && tx_packets_delta + tx_failures_delta != 0U) 
    #line 4313 
    tx_quality = 100U - (tx_failures_delta * 100U) / (tx_packets_delta + tx_failures_delta); else 
                                                                    #line 4316 
                                                                    tx_quality = 100U;
  #line 4317 
  if ((ipw_debug_level & 536870912U) != 0U) {
    #line 4317 
    int tmp_6;
    #line 4317 
    ;
    #line 4317 
    ;
    #line 4317 
    ;
    #line 4317 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4317 
                                                             tmp_6 = 73; else 
                                                                    #line 4317 
                                                                    tmp_6 = 85;
    #line 4317 
    printk((char *)"\001",tmp_6,(char *)"ipw_gather_stats",tx_quality,tx_failures_delta,tx_packets_delta);
  }
  #line 4320 
  rssi = priv->exp_avg_rssi;
  #line 4321 
  signal_quality = (unsigned int)(((((priv->ieee)->perfect_rssi - (priv->ieee)->worst_rssi) * ((priv->ieee)->perfect_rssi - (priv->ieee)->worst_rssi)) * 100 - ((priv->ieee)->perfect_rssi - (int)rssi) * (((priv->ieee)->perfect_rssi - (priv->ieee)->worst_rssi) * 15 + ((priv->ieee)->perfect_rssi - (int)rssi) * 62)) / (((priv->ieee)->perfect_rssi - (priv->ieee)->worst_rssi) * ((priv->ieee)->perfect_rssi - (priv->ieee)->worst_rssi)));
  #line 4330 
  if (signal_quality > 100U) 
                             #line 4331 
                             signal_quality = 100U;
  else 
    #line 4332 
    if (signal_quality == 0U) 
                              #line 4333 
                              signal_quality = 0U;
  #line 4335 
  if ((ipw_debug_level & 536870912U) != 0U) {
    #line 4335 
    int tmp_8;
    #line 4335 
    ;
    #line 4335 
    ;
    #line 4335 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4335 
                                                             tmp_8 = 73; else 
                                                                    #line 4335 
                                                                    tmp_8 = 85;
    #line 4335 
    printk((char *)"\001",tmp_8,(char *)"ipw_gather_stats",signal_quality,(int)rssi);
  }
  {
    #line 4338 
    __UNIQUE_ID___x473 = rx_quality;
    #line 4338 
    u32 __UNIQUE_ID___y474 = signal_quality;
    #line 4338 
    if (__UNIQUE_ID___x473 < __UNIQUE_ID___y474) 
                                                 #line 4338 
                                                 tmp_9 = __UNIQUE_ID___x473; else 
                                                                    #line 4338 
                                                                    tmp_9 = __UNIQUE_ID___y474;
    }
  #line 4338 
  quality = tmp_9;
  {
    #line 4339 
    __UNIQUE_ID___x475 = tx_quality;
    #line 4339 
    u32 __UNIQUE_ID___y476 = quality;
    #line 4339 
    if (__UNIQUE_ID___x475 < __UNIQUE_ID___y476) 
                                                 #line 4339 
                                                 tmp_11 = __UNIQUE_ID___x475; else 
                                                                    #line 4339 
                                                                    tmp_11 = __UNIQUE_ID___y476;
    }
  #line 4339 
  quality = tmp_11;
  {
    #line 4340 
    __UNIQUE_ID___x477 = rate_quality;
    #line 4340 
    u32 __UNIQUE_ID___y478 = quality;
    #line 4340 
    if (__UNIQUE_ID___x477 < __UNIQUE_ID___y478) 
                                                 #line 4340 
                                                 tmp_13 = __UNIQUE_ID___x477; else 
                                                                    #line 4340 
                                                                    tmp_13 = __UNIQUE_ID___y478;
    }
  #line 4340 
  quality = tmp_13;
  {
    #line 4341 
    __UNIQUE_ID___x479 = beacon_quality;
    #line 4341 
    u32 __UNIQUE_ID___y480 = quality;
    #line 4341 
    if (__UNIQUE_ID___x479 < __UNIQUE_ID___y480) 
                                                 #line 4341 
                                                 tmp_15 = __UNIQUE_ID___x479; else 
                                                                    #line 4341 
                                                                    tmp_15 = __UNIQUE_ID___y480;
    }
  #line 4341 
  quality = tmp_15;
  #line 4342 
  if (quality == beacon_quality) 
    #line 4343 
    if ((ipw_debug_level & 536870912U) != 0U) {
      #line 4343 
      int tmp_18;
      #line 4343 
      ;
      #line 4343 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4343 
                                                               tmp_18 = 73; else 
                                                                    #line 4343 
                                                                    tmp_18 = 85;
      #line 4343 
      printk((char *)"\001",tmp_18,(char *)"ipw_gather_stats",quality);
    }
  #line 4345 
  if (quality == rate_quality) 
    #line 4346 
    if ((ipw_debug_level & 536870912U) != 0U) {
      #line 4346 
      int tmp_20;
      #line 4346 
      ;
      #line 4346 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4346 
                                                               tmp_20 = 73; else 
                                                                    #line 4346 
                                                                    tmp_20 = 85;
      #line 4346 
      printk((char *)"\001",tmp_20,(char *)"ipw_gather_stats",quality);
    }
  #line 4348 
  if (quality == tx_quality) 
    #line 4349 
    if ((ipw_debug_level & 536870912U) != 0U) {
      #line 4349 
      int tmp_22;
      #line 4349 
      ;
      #line 4349 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4349 
                                                               tmp_22 = 73; else 
                                                                    #line 4349 
                                                                    tmp_22 = 85;
      #line 4349 
      printk((char *)"\001",tmp_22,(char *)"ipw_gather_stats",quality);
    }
  #line 4351 
  if (quality == rx_quality) 
    #line 4352 
    if ((ipw_debug_level & 536870912U) != 0U) {
      #line 4352 
      int tmp_24;
      #line 4352 
      ;
      #line 4352 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4352 
                                                               tmp_24 = 73; else 
                                                                    #line 4352 
                                                                    tmp_24 = 85;
      #line 4352 
      printk((char *)"\001",tmp_24,(char *)"ipw_gather_stats",quality);
    }
  #line 4354 
  if (quality == signal_quality) 
    #line 4355 
    if ((ipw_debug_level & 536870912U) != 0U) {
      #line 4355 
      int tmp_26;
      #line 4355 
      ;
      #line 4355 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4355 
                                                               tmp_26 = 73; else 
                                                                    #line 4355 
                                                                    tmp_26 = 85;
      #line 4355 
      printk((char *)"\001",tmp_26,(char *)"ipw_gather_stats",quality);
    }
  #line 4358 
  priv->quality = quality;
  #line 4360 
  cif_schedule_delayed_work(& priv->gather_stats,500UL);
  #line 4361 
  return;
}

#line 4363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_gather_stats(struct work_struct *work)
{
  #line 4366 
  void *__mptr;
  #line 4366 
  __mptr = (void *)work;
  #line 4365 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709546128U));
  #line 4367 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 4368 
  ipw_gather_stats(priv);
  #line 4369 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 4370 
  return;
}

#line 4377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_handle_missed_beacon(struct ipw_priv *priv, int missed_count)
{
  #line 4380 
  priv->notif_missed_beacons = (unsigned int)missed_count;
  #line 4382 
  if (priv->disassociate_threshold < (unsigned int)missed_count && (priv->status & 128U) != 0U) {
    #line 4387 
    if ((ipw_debug_level & 5188U) != 0U) {
      #line 4387 
      int tmp_0;
      #line 4387 
      ;
      #line 4387 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4387 
                                                               tmp_0 = 73; else 
                                                                    #line 4387 
                                                                    tmp_0 = 85;
      #line 4387 
      printk((char *)"\001",tmp_0,(char *)"ipw_handle_missed_beacon",missed_count);
    }
    #line 4390 
    priv->status &= 4294966271U;
    #line 4391 
    if ((priv->status & 2097152U) != 0U) {
      #line 4392 
      if ((ipw_debug_level & 1092U) != 0U) {
        #line 4392 
        int tmp_2;
        #line 4392 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 4392 
                                                                 tmp_2 = 73; else 
                                                                    #line 4392 
                                                                    tmp_2 = 85;
        #line 4392 
        printk((char *)"\001",tmp_2,(char *)"ipw_handle_missed_beacon");
      }
      #line 4395 
      cif_schedule_work(& priv->abort_scan);
    }
    #line 4398 
    cif_schedule_work(& priv->disassociate);
    #line 4399 
    return;
  }
  #line 4402 
  if ((priv->status & 1024U) != 0U) {
    #line 4405 
    if ((ipw_debug_level & 1088U) != 0U) {
      #line 4405 
      int tmp_4;
      #line 4405 
      ;
      #line 4405 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4405 
                                                               tmp_4 = 73; else 
                                                                    #line 4405 
                                                                    tmp_4 = 85;
      #line 4405 
      printk((char *)"\001",tmp_4,(char *)"ipw_handle_missed_beacon",missed_count);
    }
    #line 4408 
    return;
  }
  #line 4411 
  if ((priv->roaming_threshold < (unsigned int)missed_count && priv->disassociate_threshold >= (unsigned int)missed_count) && roaming != 0) {
    #line 4418 
    if ((ipw_debug_level & 1088U) != 0U) {
      #line 4418 
      int tmp_6;
      #line 4418 
      ;
      #line 4418 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4418 
                                                               tmp_6 = 73; else 
                                                                    #line 4418 
                                                                    tmp_6 = 85;
      #line 4418 
      printk((char *)"\001",tmp_6,(char *)"ipw_handle_missed_beacon",missed_count);
    }
    #line 4421 
    if ((priv->status & 1024U) == 0U) {
      #line 4422 
      priv->status |= 1024U;
      #line 4423 
      if ((priv->status & 2097152U) == 0U) 
                                           #line 4424 
                                           cif_schedule_delayed_work(& priv->request_scan,0UL);
    }
    #line 4426 
    return;
  }
  #line 4429 
  if ((priv->status & 2097152U) != 0U && missed_count > 3) {
    #line 4435 
    if ((ipw_debug_level & 1092U) != 0U) {
      #line 4435 
      int tmp_8;
      #line 4435 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4435 
                                                               tmp_8 = 73; else 
                                                                    #line 4435 
                                                                    tmp_8 = 85;
      #line 4435 
      printk((char *)"\001",tmp_8,(char *)"ipw_handle_missed_beacon");
    }
    #line 4437 
    cif_schedule_work(& priv->abort_scan);
  }
  #line 4440 
  if ((ipw_debug_level & 1024U) != 0U) {
    #line 4440 
    int tmp_10;
    #line 4440 
    ;
    #line 4440 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4440 
                                                             tmp_10 = 73; else 
                                                                    #line 4440 
                                                                    tmp_10 = 85;
    #line 4440 
    printk((char *)"\001",tmp_10,(char *)"ipw_handle_missed_beacon",missed_count);
  }
  #line 4441 
  return;
}

#line 4443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_scan_event(struct work_struct *work)
{
  #line 4448 
  void *__mptr;
  #line 4445 
  union iwreq_data wrqu;
  #line 4448 
  __mptr = (void *)work;
  #line 4447 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709546736U));
  #line 4450 
  wrqu.data.length = (unsigned short)0U;
  #line 4451 
  wrqu.data.flags = (unsigned short)0U;
  #line 4452 
  wireless_send_event(priv->net_dev,35609U,& wrqu,(char *)0);
  #line 4453 
  return;
}

#line 4455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void handle_scan_event(struct ipw_priv *priv)
{
  #line 4458 
  if (priv->user_requested_scan == 0) {
    #line 4459 
    ;
    #line 4459 
    cif_schedule_delayed_work(& priv->scan_event,round_jiffies_relative(msecs_to_jiffies(4000U)));
  }
  else {
    #line 4462 
    priv->user_requested_scan = 0;
    #line 4463 
    mod_delayed_work(system_wq,& priv->scan_event,0UL);
  }
  #line 4465 
  return;
}

#line 4471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rx_notification(struct ipw_priv *priv, struct ipw_rx_notification *notif)
{
  #line 4474 
  u16 size = notif->size;
  #line 4476 
  if ((ipw_debug_level & 1024U) != 0U) {
    #line 4476 
    int tmp_0;
    #line 4476 
    ;
    #line 4476 
    ;
    #line 4476 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 4476 
                                                             tmp_0 = 73; else 
                                                                    #line 4476 
                                                                    tmp_0 = 85;
    #line 4476 
    printk((char *)"\001",tmp_0,(char *)"ipw_rx_notification",(int)notif->subtype,(int)size);
  }
  #line 4478 
  switch ((int)notif->subtype) {
    #line 4479 
    case 10: 
             #line 4479 
    ;
    {
      #line 4480 
      struct notif_association *assoc = & notif->u.assoc;
      #line 4482 
      switch ((int)assoc->state) {
        #line 4483 
        case 12: 
                 #line 4483 
        ;
        #line 4484 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4484 
          int tmp_2;
          #line 4484 
          ;
          #line 4484 
          ;
          #line 4484 
          ;
          #line 4484 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4484 
                                                                   tmp_2 = 73; else 
                                                                    #line 4484 
                                                                    tmp_2 = 85;
          #line 4484 
          printk((char *)"\001",tmp_2,(char *)"ipw_rx_notification",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid));
        }
        #line 4490 
        switch ((priv->ieee)->iw_mode) {
          #line 4491 
          case 2: 
                  #line 4491 
          ;
          #line 4492 
          memcpy((void *)(& (priv->ieee)->bssid),(void *)(& priv->bssid),6UL);
          #line 4494 
          break;
          #line 4496 
          case 1: 
                  #line 4496 
          ;
          #line 4497 
          memcpy((void *)(& (priv->ieee)->bssid),(void *)(& priv->bssid),6UL);
          #line 4501 
          priv->num_stations = (unsigned char)0U;
          #line 4503 
          if ((ipw_debug_level & 4100U) != 0U) {
            #line 4503 
            int tmp_4;
            #line 4503 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 4503 
              tmp_4 = 73; else 
                               #line 4503 
                               tmp_4 = 85;
            #line 4503 
            printk((char *)"\001",tmp_4,(char *)"ipw_rx_notification");
          }
          #line 4505 
          cif_schedule_delayed_work(& priv->adhoc_check,(unsigned long)priv->assoc_request.beacon_interval);
          #line 4510 
          break;
        }
        #line 4513 
        priv->status &= 4294967039U;
        #line 4514 
        priv->status |= 128U;
        #line 4515 
        cif_schedule_work(& priv->system_config);
        #line 4520 
        if ((priv->status & 64U) != 0U && ((int)((struct ieee80211_hdr *)(& notif->u.raw))->frame_control & 240) == 16) 
          #line 4523 
          if ((unsigned int)size + 65506U <= 2284U) {
            #line 4530 
            struct libipw_rx_stats stats = {.mac_time = 0U, .rssi = (signed char)0, .signal = (unsigned char)0, .noise = (unsigned char)0, .rate = (unsigned short)0, .received_channel = (unsigned char)0, .control = (unsigned char)0, .mask = (unsigned char)0, .freq = (unsigned char)0, .len = (unsigned short)((unsigned int)size + 65535U), .tsf = 0ULL, .beacon_time = 0U};
            #line 4534 
            if ((ipw_debug_level & 2147483648U) != 0U) {
              #line 4534 
              int tmp_6;
              #line 4534 
              ;
              #line 4534 
              if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                #line 4534 
                tmp_6 = 73; else 
                                 #line 4534 
                                 tmp_6 = 85;
              #line 4534 
              printk((char *)"\001",tmp_6,(char *)"ipw_rx_notification",(int)size);
            }
            #line 4537 
            libipw_rx_mgt(priv->ieee,(struct libipw_hdr_4addr *)(& notif->u.raw),& stats);
          }
        #line 4547 
        cif_schedule_work(& priv->link_up);
        #line 4549 
        break;
        #line 4552 
        case 9: 
                #line 4552 
        ;
        #line 4553 
        if ((priv->status & 192U) != 0U) {
          #line 4556 
          struct notif_authenticate *auth = & notif->u.auth;
          #line 4558 
          if ((ipw_debug_level & 5184U) != 0U) {
            #line 4558 
            char *tmp_7;
            #line 4558 
            int tmp_9;
            #line 4558 
            tmp_7 = ipw_get_status_code((unsigned short)((int)auth->status));
            #line 4558 
            ;
            #line 4558 
            ;
            #line 4558 
            ;
            #line 4558 
            ;
            #line 4558 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 4558 
              tmp_9 = 73; else 
                               #line 4558 
                               tmp_9 = 85;
            #line 4558 
            printk((char *)"\001",tmp_9,(char *)"ipw_rx_notification",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid),(int)auth->status,tmp_7);
          }
          #line 4570 
          priv->status &= 4294966847U;
          #line 4575 
          cif_schedule_work(& priv->link_down);
          #line 4576 
          break;
        }
        #line 4579 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4579 
          int tmp_11;
          #line 4579 
          ;
          #line 4579 
          ;
          #line 4579 
          ;
          #line 4579 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4579 
                                                                   tmp_11 = 73; else 
                                                                    #line 4579 
                                                                    tmp_11 = 85;
          #line 4579 
          printk((char *)"\001",tmp_11,(char *)"ipw_rx_notification",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid));
        }
        #line 4584 
        break;
        #line 4587 
        case 0: 
                #line 4587 
        ;
        #line 4588 
        if ((priv->status & 64U) != 0U) {
          #line 4591 
          struct libipw_assoc_response *resp;
          #line 4592 
          resp = (struct libipw_assoc_response *)(& notif->u.raw);
          #line 4596 
          if ((ipw_debug_level & 5184U) != 0U) {
            #line 4596 
            char *tmp_12;
            #line 4596 
            int tmp_14;
            #line 4596 
            tmp_12 = ipw_get_status_code((unsigned short)((int)resp->status));
            #line 4596 
            ;
            #line 4596 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 4596 
              tmp_14 = 73; else 
                                #line 4596 
                                tmp_14 = 85;
            #line 4596 
            printk((char *)"\001",tmp_14,(char *)"ipw_rx_notification",(int)resp->status,tmp_12);
          }
        }
        #line 4606 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4606 
          int tmp_16;
          #line 4606 
          ;
          #line 4606 
          ;
          #line 4606 
          ;
          #line 4606 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4606 
                                                                   tmp_16 = 73; else 
                                                                    #line 4606 
                                                                    tmp_16 = 85;
          #line 4606 
          printk((char *)"\001",tmp_16,(char *)"ipw_rx_notification",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid));
        }
        #line 4612 
        priv->status &= 4294966335U;
        #line 4616 
        if (priv->assoc_network != (struct libipw_network *)0 && ((int)(priv->assoc_network)->capability & 2) != 0) 
          #line 4620 
          ipw_remove_current_network(priv);
        #line 4623 
        cif_schedule_work(& priv->link_down);
        #line 4625 
        break;
        #line 4628 
        case 11: 
                 #line 4628 
        ;
        #line 4629 
        break;
        #line 4631 
        default: 
                 #line 4631 
        ;
        #line 4632 
        printk((char *)"\001",(int)assoc->state);
        #line 4634 
        break;
      }
      #line 4637 
      break;
    }
    #line 4640 
    case 11: 
             #line 4640 
    ;
    {
      #line 4641 
      struct notif_authenticate *auth_0 = & notif->u.auth;
      #line 4642 
      switch ((int)auth_0->state) {
        #line 4643 
        case 9: 
                #line 4643 
        ;
        #line 4644 
        if ((ipw_debug_level & 1088U) != 0U) {
          #line 4644 
          int tmp_18;
          #line 4644 
          ;
          #line 4644 
          ;
          #line 4644 
          ;
          #line 4644 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4644 
                                                                   tmp_18 = 73; else 
                                                                    #line 4644 
                                                                    tmp_18 = 85;
          #line 4644 
          printk((char *)"\001",tmp_18,(char *)"ipw_rx_notification",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid));
        }
        #line 4648 
        priv->status |= 64U;
        #line 4649 
        break;
        #line 4651 
        case 0: 
                #line 4651 
        ;
        #line 4652 
        if ((priv->status & 64U) != 0U) 
          #line 4653 
          if ((ipw_debug_level & 5184U) != 0U) {
            #line 4653 
            char *tmp_19;
            #line 4653 
            int tmp_21;
            #line 4653 
            tmp_19 = ipw_get_status_code((unsigned short)((int)auth_0->status));
            #line 4653 
            ;
            #line 4653 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 4653 
              tmp_21 = 73; else 
                                #line 4653 
                                tmp_21 = 85;
            #line 4653 
            printk((char *)"\001",tmp_21,(char *)"ipw_rx_notification",(int)auth_0->status,tmp_19);
          }
        #line 4661 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4661 
          int tmp_23;
          #line 4661 
          ;
          #line 4661 
          ;
          #line 4661 
          ;
          #line 4661 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4661 
                                                                   tmp_23 = 73; else 
                                                                    #line 4661 
                                                                    tmp_23 = 85;
          #line 4661 
          printk((char *)"\001",tmp_23,(char *)"ipw_rx_notification",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid));
        }
        #line 4667 
        priv->status &= 4294966847U;
        #line 4671 
        cif_schedule_work(& priv->link_down);
        #line 4672 
        break;
        #line 4674 
        case 1: 
                #line 4674 
        ;
        #line 4675 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4675 
          int tmp_25;
          #line 4675 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4675 
                                                                   tmp_25 = 73; else 
                                                                    #line 4675 
                                                                    tmp_25 = 85;
          #line 4675 
          printk((char *)"\001",tmp_25,(char *)"ipw_rx_notification");
        }
        #line 4677 
        break;
        #line 4678 
        case 2: 
                #line 4678 
        ;
        #line 4679 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4679 
          int tmp_27;
          #line 4679 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4679 
                                                                   tmp_27 = 73; else 
                                                                    #line 4679 
                                                                    tmp_27 = 85;
          #line 4679 
          printk((char *)"\001",tmp_27,(char *)"ipw_rx_notification");
        }
        #line 4681 
        break;
        #line 4682 
        case 3: 
                #line 4682 
        ;
        #line 4683 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4683 
          int tmp_29;
          #line 4683 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4683 
                                                                   tmp_29 = 73; else 
                                                                    #line 4683 
                                                                    tmp_29 = 85;
          #line 4683 
          printk((char *)"\001",tmp_29,(char *)"ipw_rx_notification");
        }
        #line 4685 
        break;
        #line 4686 
        case 4: 
                #line 4686 
        ;
        #line 4687 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4687 
          int tmp_31;
          #line 4687 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4687 
                                                                   tmp_31 = 73; else 
                                                                    #line 4687 
                                                                    tmp_31 = 85;
          #line 4687 
          printk((char *)"\001",tmp_31,(char *)"ipw_rx_notification");
        }
        #line 4689 
        break;
        #line 4690 
        case 5: 
                #line 4690 
        ;
        #line 4691 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4691 
          int tmp_33;
          #line 4691 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4691 
                                                                   tmp_33 = 73; else 
                                                                    #line 4691 
                                                                    tmp_33 = 85;
          #line 4691 
          printk((char *)"\001",tmp_33,(char *)"ipw_rx_notification");
        }
        #line 4693 
        break;
        #line 4694 
        case 6: 
                #line 4694 
        ;
        #line 4695 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4695 
          int tmp_35;
          #line 4695 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4695 
                                                                   tmp_35 = 73; else 
                                                                    #line 4695 
                                                                    tmp_35 = 85;
          #line 4695 
          printk((char *)"\001",tmp_35,(char *)"ipw_rx_notification");
        }
        #line 4697 
        break;
        #line 4698 
        case 7: 
                #line 4698 
        ;
        #line 4699 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4699 
          int tmp_37;
          #line 4699 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4699 
                                                                   tmp_37 = 73; else 
                                                                    #line 4699 
                                                                    tmp_37 = 85;
          #line 4699 
          printk((char *)"\001",tmp_37,(char *)"ipw_rx_notification");
        }
        #line 4701 
        break;
        #line 4702 
        case 8: 
                #line 4702 
        ;
        #line 4703 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4703 
          int tmp_39;
          #line 4703 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4703 
                                                                   tmp_39 = 73; else 
                                                                    #line 4703 
                                                                    tmp_39 = 85;
          #line 4703 
          printk((char *)"\001",tmp_39,(char *)"ipw_rx_notification");
        }
        #line 4705 
        break;
        #line 4706 
        case 10: 
                 #line 4706 
        ;
        #line 4707 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4707 
          int tmp_41;
          #line 4707 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4707 
                                                                   tmp_41 = 73; else 
                                                                    #line 4707 
                                                                    tmp_41 = 85;
          #line 4707 
          printk((char *)"\001",tmp_41,(char *)"ipw_rx_notification");
        }
        #line 4709 
        break;
        #line 4710 
        case 11: 
                 #line 4710 
        ;
        #line 4711 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4711 
          int tmp_43;
          #line 4711 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4711 
                                                                   tmp_43 = 73; else 
                                                                    #line 4711 
                                                                    tmp_43 = 85;
          #line 4711 
          printk((char *)"\001",tmp_43,(char *)"ipw_rx_notification");
        }
        #line 4714 
        break;
        #line 4715 
        case 12: 
                 #line 4715 
        ;
        #line 4716 
        if ((ipw_debug_level & 5184U) != 0U) {
          #line 4716 
          int tmp_45;
          #line 4716 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4716 
                                                                   tmp_45 = 73; else 
                                                                    #line 4716 
                                                                    tmp_45 = 85;
          #line 4716 
          printk((char *)"\001",tmp_45,(char *)"ipw_rx_notification");
        }
        #line 4718 
        break;
        #line 4719 
        default: 
                 #line 4719 
        ;
        #line 4720 
        if ((ipw_debug_level & 1024U) != 0U) {
          #line 4720 
          int tmp_47;
          #line 4720 
          ;
          #line 4720 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4720 
                                                                   tmp_47 = 73; else 
                                                                    #line 4720 
                                                                    tmp_47 = 85;
          #line 4720 
          printk((char *)"\001",tmp_47,(char *)"ipw_rx_notification",(int)auth_0->state);
        }
        #line 4722 
        break;
      }
      #line 4724 
      break;
    }
    #line 4727 
    case 12: 
             #line 4727 
    ;
    {
      #line 4728 
      struct notif_channel_result *x = & notif->u.channel_result;
      #line 4731 
      if ((unsigned int)size == 46U) {
        #line 4732 
        if ((ipw_debug_level & 2048U) != 0U) {
          #line 4732 
          int tmp_49;
          #line 4732 
          ;
          #line 4732 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4732 
                                                                   tmp_49 = 73; else 
                                                                    #line 4732 
                                                                    tmp_49 = 85;
          #line 4732 
          printk((char *)"\001",tmp_49,(char *)"ipw_rx_notification",(int)x->channel_num);
        }
      }
      else 
        #line 4735 
        if ((ipw_debug_level & 2048U) != 0U) {
          #line 4735 
          int tmp_51;
          #line 4735 
          ;
          #line 4735 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4735 
                                                                   tmp_51 = 73; else 
                                                                    #line 4735 
                                                                    tmp_51 = 85;
          #line 4735 
          printk((char *)"\001",tmp_51,(char *)"ipw_rx_notification",(int)size,46UL);
        }
      #line 4739 
      break;
    }
    #line 4742 
    case 13: 
             #line 4742 
    ;
    {
      #line 4743 
      struct notif_scan_complete *x_0 = & notif->u.scan_complete;
      #line 4744 
      if ((unsigned int)size == 4U) {
        #line 4745 
        if ((ipw_debug_level & 2048U) != 0U) {
          #line 4745 
          int tmp_53;
          #line 4745 
          ;
          #line 4745 
          ;
          #line 4745 
          ;
          #line 4745 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4745 
                                                                   tmp_53 = 73; else 
                                                                    #line 4745 
                                                                    tmp_53 = 85;
          #line 4745 
          printk((char *)"\001",tmp_53,(char *)"ipw_rx_notification",(int)x_0->scan_type,(int)x_0->num_channels,(int)x_0->status);
        }
      }
      else 
           #line 4750 
           printk((char *)"\001",(int)size,4UL);
      #line 4755 
      priv->status &= 4288675839U;
      #line 4758 
      __wake_up(& priv->wait_state,1U,1,(void *)0);
      #line 4759 
      cancel_delayed_work(& priv->scan_check);
      #line 4761 
      if ((priv->status & 2048U) != 0U) 
                                        #line 4762 
                                        break;
      #line 4764 
      ((priv->ieee)->scans) ++;
      #line 4767 
      if ((priv->ieee)->iw_mode == 6) {
        #line 4768 
        priv->status |= 8388608U;
        #line 4769 
        cif_schedule_delayed_work(& priv->request_scan,0UL);
        #line 4770 
        break;
      }
      #line 4772 
      priv->status &= 4286578687U;
      #line 4776 
      if ((priv->status & 524288U) != 0U) 
                                          #line 4777 
                                          cif_schedule_delayed_work(& priv->request_direct_scan,0UL);
      #line 4779 
      if ((priv->status & 1920U) == 0U) 
                                        #line 4783 
                                        cif_schedule_work(& priv->associate);
      else 
        #line 4784 
        if ((priv->status & 1024U) != 0U) 
          #line 4785 
          if ((unsigned int)x_0->status == 1U) 
                                               #line 4790 
                                               cif_schedule_work(& priv->roam); else 
                                                                    #line 4793 
                                                                    priv->status &= 4294966271U;
        else 
          #line 4794 
          if ((priv->status & 1048576U) != 0U) 
                                               #line 4795 
                                               cif_schedule_delayed_work(& priv->request_scan,0UL);
          else 
            #line 4796 
            if ((priv->config & 1024U) != 0U && (priv->status & 128U) != 0U) {
              #line 4798 
              ;
              #line 4798 
              cif_schedule_delayed_work(& priv->request_scan,round_jiffies_relative(250UL));
            }
      #line 4810 
      if ((unsigned int)x_0->status == 1U) 
                                           #line 4811 
                                           handle_scan_event(priv);
      #line 4812 
      break;
    }
    #line 4815 
    case 14: 
             #line 4815 
    ;
    {
      #line 4816 
      struct notif_frag_length *x_1 = & notif->u.frag_len;
      #line 4818 
      if ((unsigned int)size == 4U) 
                                    #line 4819 
                                    printk((char *)"\001",(int)x_1->frag_length); else 
                                                                    #line 4822 
                                                                    printk((char *)"\001",(int)size,4UL);
      #line 4825 
      break;
    }
    #line 4828 
    case 15: 
             #line 4828 
    ;
    {
      #line 4829 
      struct notif_link_deterioration *x_2 = & notif->u.link_deterioration;
      #line 4832 
      if ((unsigned int)size == 145U) {
        #line 4833 
        if ((ipw_debug_level & 1088U) != 0U) {
          #line 4833 
          int tmp_56;
          #line 4833 
          ;
          #line 4833 
          ;
          #line 4833 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4833 
                                                                   tmp_56 = 73; else 
                                                                    #line 4833 
                                                                    tmp_56 = 85;
          #line 4833 
          printk((char *)"\001",tmp_56,(char *)"ipw_rx_notification",(int)x_2->silence_notification_type,(int)x_2->silence_count);
        }
        #line 4837 
        memcpy((void *)(& priv->last_link_deterioration),(void *)x_2,145UL);
      }
      else 
           #line 4840 
           printk((char *)"\001",(int)size,145UL);
      #line 4844 
      break;
    }
    #line 4847 
    case 16: 
             #line 4847 
    ;
    #line 4848 
    printk((char *)"\001");
    #line 4849 
    if (priv->hcmd != (struct ipw_cmd *)0 && (priv->hcmd)->cmd != 30U) 
      #line 4851 
      printk((char *)"\001");
    #line 4853 
    break;
    #line 4856 
    case 17: 
             #line 4856 
    ;
    {
      #line 4857 
      struct notif_beacon_state *x_3 = & notif->u.beacon_state;
      #line 4858 
      if ((unsigned int)size != 8U) {
        #line 4859 
        printk((char *)"\001",(int)size,8UL);
        #line 4862 
        break;
      }
      #line 4865 
      if (x_3->state == 1U) 
                            #line 4867 
                            ipw_handle_missed_beacon(priv,(int)x_3->number);
      #line 4871 
      break;
    }
    #line 4874 
    case 18: 
             #line 4874 
    ;
    {
      #line 4875 
      struct notif_tgi_tx_key *x_4 = & notif->u.tgi_tx_key;
      #line 4876 
      if ((unsigned int)size == 4U) {
        #line 4877 
        printk((char *)"\001",(int)x_4->key_state,(int)x_4->security_type,(int)x_4->station_index);
        #line 4881 
        break;
      }
      #line 4884 
      printk((char *)"\001",(int)size,4UL);
      #line 4887 
      break;
    }
    #line 4890 
    case 20: 
             #line 4890 
    ;
    {
      #line 4891 
      struct notif_calibration *x_5 = & notif->u.calibration;
      #line 4893 
      if ((unsigned int)size == 104U) {
        #line 4894 
        memcpy((void *)(& priv->calib),(void *)x_5,104UL);
        #line 4895 
        if ((ipw_debug_level & 4U) != 0U) {
          #line 4895 
          int tmp_58;
          #line 4895 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 4895 
                                                                   tmp_58 = 73; else 
                                                                    #line 4895 
                                                                    tmp_58 = 85;
          #line 4895 
          printk((char *)"\001",tmp_58,(char *)"ipw_rx_notification");
        }
        #line 4896 
        break;
      }
      #line 4899 
      printk((char *)"\001",(int)size,104UL);
      #line 4902 
      break;
    }
    #line 4905 
    case 25: 
             #line 4905 
    ;
    #line 4906 
    if ((unsigned int)size == 4U) {
      #line 4907 
      priv->exp_avg_noise = exponential_average((short)((int)priv->exp_avg_noise),(short)((int)((unsigned char)notif->u.noise.value)),(unsigned char)16);
      #line 4911 
      break;
    }
    #line 4914 
    printk((char *)"\001",(int)size,4UL);
    #line 4917 
    break;
    #line 4920 
    default: 
             #line 4920 
    ;
    #line 4921 
    if ((ipw_debug_level & 1024U) != 0U) {
      #line 4921 
      int tmp_60;
      #line 4921 
      ;
      #line 4921 
      ;
      #line 4921 
      ;
      #line 4921 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 4921 
                                                               tmp_60 = 73; else 
                                                                    #line 4921 
                                                                    tmp_60 = 85;
      #line 4921 
      printk((char *)"\001",tmp_60,(char *)"ipw_rx_notification",(int)notif->subtype,(int)notif->flags,(int)size);
    }
  }
  #line 4923 
  return;
}

#line 4933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_queue_reset(struct ipw_priv *priv)
{
  #line 4935 
  int rc = 0;
  #line 4937 
  int nTx = 64;
  #line 4937 
  int nTxCmd = 8;
  #line 4938 
  ipw_tx_queue_free(priv);
  #line 4940 
  rc = ipw_queue_tx_init(priv,& priv->txq_cmd,nTxCmd,640U,3968U,512U,516U);
  #line 4945 
  if (rc != 0) {
    #line 4946 
    printk((char *)"\001");
    #line 4947 
    goto error;
  }
  #line 4950 
  rc = ipw_queue_tx_init(priv,& priv->txq[0],nTx,644U,3972U,520U,524U);
  #line 4954 
  if (rc != 0) {
    #line 4955 
    printk((char *)"\001");
    #line 4956 
    goto error;
  }
  #line 4958 
  rc = ipw_queue_tx_init(priv,& priv->txq[1],nTx,648U,3976U,528U,532U);
  #line 4962 
  if (rc != 0) {
    #line 4963 
    printk((char *)"\001");
    #line 4964 
    goto error;
  }
  #line 4966 
  rc = ipw_queue_tx_init(priv,& priv->txq[2],nTx,652U,3980U,536U,540U);
  #line 4970 
  if (rc != 0) {
    #line 4971 
    printk((char *)"\001");
    #line 4972 
    goto error;
  }
  #line 4974 
  rc = ipw_queue_tx_init(priv,& priv->txq[3],nTx,656U,3984U,544U,548U);
  #line 4978 
  if (rc != 0) {
    #line 4979 
    printk((char *)"\001");
    #line 4980 
    goto error;
  }
  #line 4983 
  priv->rx_bufs_min = 0;
  #line 4984 
  priv->rx_pend_max = 0;
  #line 4985 
  return rc;
  #line 4987 
  error: 
         #line 4987 
  ;
  #line 4988 
  ipw_tx_queue_free(priv);
  #line 4989 
  return rc;
}

#line 5005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_queue_tx_reclaim(struct ipw_priv *priv, struct clx2_tx_queue *txq, int qindex)
{
  #line 5008 
  u32 hw_tail;
  #line 5009 
  int used;
  #line 5010 
  struct clx2_queue *q = & txq->q;
  #line 5012 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 5012 
    int tmp_0;
    #line 5012 
    ;
    #line 5012 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5012 
                                                             tmp_0 = 73; else 
                                                                    #line 5012 
                                                                    tmp_0 = 85;
    #line 5012 
    printk((char *)"\001",tmp_0,(char *)"ipw_queue_tx_reclaim",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",5012,q->reg_r);
  }
  #line 5012 
  hw_tail = _ipw_read32(priv,(unsigned long)q->reg_r);
  #line 5013 
  if ((unsigned int)q->n_bd <= hw_tail) {
    #line 5014 
    printk((char *)"\001",hw_tail,q->n_bd);
    #line 5017 
    goto done;
  }
  #line 5019 
  while ((unsigned int)q->last_used != hw_tail) {
    #line 5021 
    ipw_queue_tx_free_tfd(priv,txq);
    #line 5022 
    (priv->tx_packets) ++;
    #line 5020 
    q->last_used = ipw_queue_inc_wrap(q->last_used,q->n_bd);
  }
  #line 5024 
  done: 
        #line 5024 
  ;
  #line 5025 
  ;
  #line 5025 
  if (ipw_tx_queue_space(q) > q->low_mark) 
    #line 5025 
    if (qindex >= 0) 
                     #line 5027 
                     netif_wake_queue(priv->net_dev);
  #line 5028 
  used = q->first_empty - q->last_used;
  #line 5029 
  if (used < 0) 
                #line 5030 
                used = q->n_bd + used;
  #line 5032 
  return used;
}

#line 5035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_queue_tx_hcmd(struct ipw_priv *priv, int hcmd, void *buf, int len, int sync)
{
  #line 5040 
  struct tfd_frame *tfd;
  #line 5042 
  int tmp;
  #line 5042 
  int tmp_0;
  #line 5038 
  struct clx2_tx_queue *txq = & priv->txq_cmd;
  #line 5039 
  struct clx2_queue *q = & txq->q;
  #line 5042 
  tmp = ipw_tx_queue_space(q);
  #line 5042 
  if (sync != 0) 
                 #line 5042 
                 tmp_0 = 1; else 
                                 #line 5042 
                                 tmp_0 = 2;
  #line 5042 
  if (tmp < tmp_0) {
    #line 5043 
    printk((char *)"\001");
    #line 5044 
    return -16;
  }
  #line 5047 
  tfd = txq->bd + (unsigned long)q->first_empty;
  #line 5048 
  *(txq->txb + (unsigned long)q->first_empty) = (struct libipw_txb *)0;
  #line 5050 
  memset((void *)tfd,0,128UL);
  #line 5051 
  tfd->control_flags.message_type = (unsigned char)1U;
  #line 5052 
  tfd->control_flags.control_bits = (unsigned char)4U;
  #line 5053 
  (priv->hcmd_seq) ++;
  #line 5054 
  tfd->u.cmd.index = (unsigned char)hcmd;
  #line 5055 
  tfd->u.cmd.length = (unsigned char)len;
  #line 5056 
  memcpy((void *)(& tfd->u.cmd.payload),buf,(unsigned long)len);
  #line 5057 
  q->first_empty = ipw_queue_inc_wrap(q->first_empty,q->n_bd);
  #line 5058 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 5058 
    int tmp_2;
    #line 5058 
    ;
    #line 5058 
    ;
    #line 5058 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5058 
                                                             tmp_2 = 73; else 
                                                                    #line 5058 
                                                                    tmp_2 = 85;
    #line 5058 
    printk((char *)"\001",tmp_2,(char *)"ipw_queue_tx_hcmd",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",5058,q->reg_w,(unsigned int)q->first_empty);
  }
  #line 5058 
  _ipw_write32(priv,(unsigned long)q->reg_w,(unsigned int)q->first_empty);
  #line 5059 
  _ipw_read32(priv,144UL);
  #line 5061 
  return 0;
}

#line 5137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rx_queue_restock(struct ipw_priv *priv)
{
  #line 5140 
  struct list_head *element;
  #line 5141 
  struct ipw_rx_mem_buffer *rxb;
  #line 5142 
  unsigned long flags;
  #line 5143 
  int write;
  #line 5139 
  struct ipw_rx_queue *rxq = priv->rxq;
  #line 5145 
  cif___ldv_spin_lock_lock_of_ipw_rx_queue(& rxq->lock);
  #line 5146 
  write = (int)rxq->write;
  #line 5147 
  while (1) {
    #line 5147 
    if (ipw_rx_queue_space(rxq) > 0) {
      #line 5147 
      if (! (rxq->free_count != 0U)) 
                                     #line 5147 
                                     break;
    }
    else 
         #line 5147 
         break;
    {
      #line 5149 
      void *__mptr;
      #line 5148 
      element = rxq->rx_free.next;
      #line 5149 
      __mptr = (void *)element;
      #line 5149 
      rxb = ((struct ipw_rx_mem_buffer *)(__mptr + 18446744073709551600U));
      #line 5150 
      list_del(element);
      #line 5152 
      if ((ipw_debug_level & 134217728U) != 0U) {
        #line 5152 
        int tmp_1;
        #line 5152 
        ;
        #line 5152 
        ;
        #line 5152 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 5152 
                                                                 tmp_1 = 73; else 
                                                                    #line 5152 
                                                                    tmp_1 = 85;
        #line 5152 
        printk((char *)"\001",tmp_1,(char *)"ipw_rx_queue_restock",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",5152,(rxq->write + 320U) * 4U,(unsigned int)rxb->dma_addr);
      }
      #line 5152 
      _ipw_write32(priv,(unsigned long)((rxq->write + 320U) * 4U),(unsigned int)rxb->dma_addr);
      #line 5154 
      rxq->queue[rxq->write] = rxb;
      #line 5155 
      rxq->write = (rxq->write + 1U) & 31U;
      #line 5156 
      (rxq->free_count) --;
    }
  }
  #line 5158 
  cif_spin_unlock_irqrestore_lock_of_ipw_rx_queue(& rxq->lock,flags);
  #line 5162 
  if (rxq->free_count <= 8U) 
                             #line 5163 
                             cif_schedule_work(& priv->rx_replenish);
  #line 5166 
  if (rxq->write != (unsigned int)write) {
    #line 5167 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 5167 
      int tmp_4;
      #line 5167 
      ;
      #line 5167 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5167 
                                                               tmp_4 = 73; else 
                                                                    #line 5167 
                                                                    tmp_4 = 85;
      #line 5167 
      printk((char *)"\001",tmp_4,(char *)"ipw_rx_queue_restock",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",5167,4000U,rxq->write);
    }
    #line 5167 
    _ipw_write32(priv,4000UL,rxq->write);
  }
  #line 5169 
  return;
}

#line 5176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rx_queue_replenish(void *data)
{
  #line 5180 
  struct list_head *element;
  #line 5181 
  struct ipw_rx_mem_buffer *rxb;
  #line 5182 
  unsigned long flags;
  #line 5178 
  struct ipw_priv *priv = (struct ipw_priv *)data;
  #line 5179 
  struct ipw_rx_queue *rxq = priv->rxq;
  #line 5184 
  cif___ldv_spin_lock_lock_of_ipw_rx_queue(& rxq->lock);
  #line 5185 
  while (1) {
    #line 5185 
    if (! (list_empty(& rxq->rx_used) == 0)) 
                                             #line 5185 
                                             break;
    {
      #line 5187 
      void *__mptr;
      #line 5186 
      element = rxq->rx_used.next;
      #line 5187 
      __mptr = (void *)element;
      #line 5187 
      rxb = ((struct ipw_rx_mem_buffer *)(__mptr + 18446744073709551600U));
      #line 5188 
      rxb->skb = alloc_skb(3000U,2592U);
      #line 5189 
      if (rxb->skb == (struct sk_buff *)0) {
        #line 5190 
        printk((char *)"\001",(char *)(& (priv->net_dev)->name));
        #line 5195 
        break;
      }
      #line 5197 
      list_del(element);
      #line 5199 
      rxb->dma_addr = pci_map_single(priv->pci_dev,(void *)(rxb->skb)->data,3000UL,2);
      #line 5203 
      list_add_tail(& rxb->list,& rxq->rx_free);
      #line 5204 
      (rxq->free_count) ++;
    }
  }
  #line 5206 
  cif_spin_unlock_irqrestore_lock_of_ipw_rx_queue(& rxq->lock,flags);
  #line 5208 
  ipw_rx_queue_restock(priv);
  #line 5209 
  return;
}

#line 5211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_rx_queue_replenish(struct work_struct *work)
{
  #line 5214 
  void *__mptr;
  #line 5214 
  __mptr = (void *)work;
  #line 5213 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709547368U));
  #line 5215 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 5216 
  ipw_rx_queue_replenish((void *)priv);
  #line 5217 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 5218 
  return;
}

#line 5225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rx_queue_free(struct ipw_priv *priv, struct ipw_rx_queue *rxq)
{
  #line 5227 
  int i;
  #line 5229 
  if (rxq == (struct ipw_rx_queue *)0) 
                                       #line 5230 
                                       return;
  #line 5232 
  i = 0;
  #line 5232 
  while (i <= 63) {
    #line 5233 
    if (rxq->pool[i].skb != (struct sk_buff *)0) {
      #line 5234 
      pci_unmap_single(priv->pci_dev,rxq->pool[i].dma_addr,3000UL,2);
      #line 5236 
      consume_skb(rxq->pool[i].skb);
    }
    #line 5232 
    i ++;
  }
  #line 5240 
  kfree((void *)rxq);
  #line 5241 
  return;
}

#line 5243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct ipw_rx_queue *ipw_rx_queue_alloc(struct ipw_priv *priv)
{
  #line 5245 
  struct ipw_rx_queue *rxq;
  #line 5246 
  int i;
  #line 5248 
  rxq = (struct ipw_rx_queue *)kzalloc(2424UL,3264U);
  #line 5249 
  if ((long)(rxq == (struct ipw_rx_queue *)0) != 0L) {
    #line 5250 
    printk((char *)"\001");
    #line 5251 
    return (struct ipw_rx_queue *)0;
  }
  #line 5253 
  spinlock_check(& rxq->lock);
  {
    #line 5253 
    struct lock_class_key __key;
    #line 5253 
    __raw_spin_lock_init(& rxq->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&rxq->lock)->rlock",& __key);
  }
  #line 5254 
  INIT_LIST_HEAD(& rxq->rx_free);
  #line 5255 
  INIT_LIST_HEAD(& rxq->rx_used);
  #line 5258 
  i = 0;
  #line 5258 
  while (i <= 63) {
    #line 5259 
    list_add_tail(& rxq->pool[i].list,& rxq->rx_used);
    #line 5258 
    i ++;
  }
  #line 5263 
  rxq->write = 0U;
  #line 5263 
  rxq->read = 0U;
  #line 5264 
  rxq->free_count = 0U;
  #line 5266 
  return rxq;
}

#line 5269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_is_rate_in_mask(struct ipw_priv *priv, int ieee_mode, u8 rate)
{
  #line 5271 
  rate = (unsigned char)((unsigned int)rate & 127U);
  #line 5272 
  if (ieee_mode == 1) 
    #line 5273 
    switch ((int)rate) {
      #line 5274 
      case 12: 
               #line 5274 
      ;
      #line 5276 
      return ((int)priv->rates_mask >> 4) & 1;
      #line 5277 
      case 18: 
               #line 5277 
      ;
      #line 5279 
      return ((int)priv->rates_mask >> 5) & 1;
      #line 5280 
      case 24: 
               #line 5280 
      ;
      #line 5282 
      return ((int)priv->rates_mask >> 6) & 1;
      #line 5283 
      case 36: 
               #line 5283 
      ;
      #line 5285 
      return ((int)priv->rates_mask >> 7) & 1;
      #line 5286 
      case 48: 
               #line 5286 
      ;
      #line 5288 
      return ((int)priv->rates_mask >> 8) & 1;
      #line 5289 
      case 72: 
               #line 5289 
      ;
      #line 5291 
      return ((int)priv->rates_mask >> 9) & 1;
      #line 5292 
      case 96: 
               #line 5292 
      ;
      #line 5294 
      return ((int)priv->rates_mask >> 10) & 1;
      #line 5295 
      case 108: 
                #line 5295 
      ;
      #line 5297 
      return ((int)priv->rates_mask >> 11) & 1;
      #line 5298 
      default: 
               #line 5298 
      ;
      #line 5299 
      return 0;
    }
  #line 5304 
  switch ((int)rate) {
    #line 5305 
    case 2: 
            #line 5305 
    ;
    #line 5306 
    return (int)priv->rates_mask & 1;
    #line 5307 
    case 4: 
            #line 5307 
    ;
    #line 5308 
    return ((int)priv->rates_mask >> 1) & 1;
    #line 5309 
    case 11: 
             #line 5309 
    ;
    #line 5310 
    return ((int)priv->rates_mask >> 2) & 1;
    #line 5311 
    case 22: 
             #line 5311 
    ;
    #line 5312 
    return ((int)priv->rates_mask >> 3) & 1;
  }
  #line 5316 
  if (ieee_mode == 2) 
                      #line 5317 
                      return 0;
  #line 5320 
  switch ((int)rate) {
    #line 5321 
    case 12: 
             #line 5321 
    ;
    #line 5322 
    return ((int)priv->rates_mask >> 4) & 1;
    #line 5323 
    case 18: 
             #line 5323 
    ;
    #line 5324 
    return ((int)priv->rates_mask >> 5) & 1;
    #line 5325 
    case 24: 
             #line 5325 
    ;
    #line 5326 
    return ((int)priv->rates_mask >> 6) & 1;
    #line 5327 
    case 36: 
             #line 5327 
    ;
    #line 5328 
    return ((int)priv->rates_mask >> 7) & 1;
    #line 5329 
    case 48: 
             #line 5329 
    ;
    #line 5330 
    return ((int)priv->rates_mask >> 8) & 1;
    #line 5331 
    case 72: 
             #line 5331 
    ;
    #line 5332 
    return ((int)priv->rates_mask >> 9) & 1;
    #line 5333 
    case 96: 
             #line 5333 
    ;
    #line 5334 
    return ((int)priv->rates_mask >> 10) & 1;
    #line 5335 
    case 108: 
              #line 5335 
    ;
    #line 5336 
    return ((int)priv->rates_mask >> 11) & 1;
  }
  #line 5339 
  return 0;
}

#line 5342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_compatible_rates(struct ipw_priv *priv, struct libipw_network *network, struct ipw_supported_rates *rates)
{
  #line 5372 
  u8 __UNIQUE_ID___x483;
  #line 5372 
  int tmp_8;
  #line 5349 
  u8 __UNIQUE_ID___x481;
  #line 5349 
  int tmp;
  #line 5346 
  int num_rates;
  #line 5346 
  int i;
  #line 5348 
  memset((void *)rates,0,16UL);
  {
    #line 5349 
    __UNIQUE_ID___x481 = network->rates_len;
    #line 5349 
    unsigned char __UNIQUE_ID___y482 = (unsigned char)12U;
    #line 5349 
    if ((int)__UNIQUE_ID___x481 < (int)__UNIQUE_ID___y482) 
                                                           #line 5349 
                                                           tmp = (int)__UNIQUE_ID___x481; else 
                                                                    #line 5349 
                                                                    tmp = (int)__UNIQUE_ID___y482;
    }
  #line 5349 
  num_rates = tmp;
  #line 5350 
  rates->num_rates = (unsigned char)0U;
  #line 5351 
  i = 0;
  #line 5351 
  while (i < num_rates) {
    {
      #line 5369 
      u8 tmp_7;
      #line 5352 
      if (ipw_is_rate_in_mask(priv,(int)network->mode,
                            (unsigned char)((int)network->rates[i])) == 0) {
        #line 5355 
        if (((int)network->rates[i] & 128) != 0) {
          #line 5359 
          u8 tmp_3;
          #line 5356 
          if ((ipw_debug_level & 2048U) != 0U) {
            #line 5356 
            int tmp_2;
            #line 5356 
            ;
            #line 5356 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 5356 
              tmp_2 = 73; else 
                               #line 5356 
                               tmp_2 = 85;
            #line 5356 
            printk((char *)"\001",tmp_2,(char *)"ipw_compatible_rates",(int)network->rates[i]);
          }
          #line 5359 
          tmp_3 = rates->num_rates;
          #line 5359 
          rates->num_rates = (u8)((int)rates->num_rates + 1);
          #line 5359 
          rates->supported_rates[(int)tmp_3] = network->rates[i];
          #line 5361 
          goto __Cont;
        }
        #line 5364 
        if ((ipw_debug_level & 2048U) != 0U) {
          #line 5364 
          int tmp_5;
          #line 5364 
          ;
          #line 5364 
          ;
          #line 5364 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 5364 
                                                                   tmp_5 = 73; else 
                                                                    #line 5364 
                                                                    tmp_5 = 85;
          #line 5364 
          printk((char *)"\001",tmp_5,(char *)"ipw_compatible_rates",(int)network->rates[i],(int)priv->rates_mask);
        }
        #line 5366 
        goto __Cont;
      }
      #line 5369 
      tmp_7 = rates->num_rates;
      #line 5369 
      rates->num_rates = (u8)((int)rates->num_rates + 1);
      #line 5369 
      rates->supported_rates[(int)tmp_7] = network->rates[i];
    }
    #line 5351 
    __Cont: 
            #line 5351 
    i ++;
  }
  {
    #line 5372 
    __UNIQUE_ID___x483 = network->rates_ex_len;
    #line 5372 
    unsigned char __UNIQUE_ID___y484 = (unsigned char)(12U - (unsigned int)((unsigned char)num_rates));
    #line 5372 
    if ((int)__UNIQUE_ID___x483 < (int)__UNIQUE_ID___y484) 
                                                           #line 5372 
                                                           tmp_8 = (int)__UNIQUE_ID___x483; else 
                                                                    #line 5372 
                                                                    tmp_8 = (int)__UNIQUE_ID___y484;
    }
  #line 5372 
  num_rates = tmp_8;
  #line 5374 
  i = 0;
  #line 5374 
  while (i < num_rates) {
    {
      #line 5391 
      u8 tmp_16;
      #line 5375 
      if (ipw_is_rate_in_mask(priv,(int)network->mode,
                             (unsigned char)((int)network->rates_ex[i])) == 0) {
        #line 5377 
        if (((int)network->rates_ex[i] & 128) != 0) {
          #line 5381 
          u8 tmp_12;
          #line 5378 
          if ((ipw_debug_level & 2048U) != 0U) {
            #line 5378 
            int tmp_11;
            #line 5378 
            ;
            #line 5378 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 5378 
              tmp_11 = 73; else 
                                #line 5378 
                                tmp_11 = 85;
            #line 5378 
            printk((char *)"\001",tmp_11,(char *)"ipw_compatible_rates",(int)network->rates_ex[i]);
          }
          #line 5381 
          tmp_12 = rates->num_rates;
          #line 5381 
          rates->num_rates = (u8)((int)rates->num_rates + 1);
          #line 5381 
          rates->supported_rates[(int)tmp_12] = network->rates[i];
          #line 5383 
          goto __Cont_0;
        }
        #line 5386 
        if ((ipw_debug_level & 2048U) != 0U) {
          #line 5386 
          int tmp_14;
          #line 5386 
          ;
          #line 5386 
          ;
          #line 5386 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 5386 
                                                                   tmp_14 = 73; else 
                                                                    #line 5386 
                                                                    tmp_14 = 85;
          #line 5386 
          printk((char *)"\001",tmp_14,(char *)"ipw_compatible_rates",(int)network->rates_ex[i],(int)priv->rates_mask);
        }
        #line 5388 
        goto __Cont_0;
      }
      #line 5391 
      tmp_16 = rates->num_rates;
      #line 5391 
      rates->num_rates = (u8)((int)rates->num_rates + 1);
      #line 5391 
      rates->supported_rates[(int)tmp_16] = network->rates_ex[i];
    }
    #line 5374 
    __Cont_0: 
              #line 5374 
    i ++;
  }
  #line 5395 
  return 1;
}

#line 5398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_copy_rates(struct ipw_supported_rates *dest, struct ipw_supported_rates *src)
{
  #line 5401 
  u8 i;
  #line 5402 
  i = (unsigned char)0U;
  #line 5402 
  while ((int)src->num_rates > (int)i) {
    #line 5403 
    dest->supported_rates[(int)i] = src->supported_rates[(int)i];
    #line 5402 
    i = (u8)((int)i + 1);
  }
  #line 5404 
  dest->num_rates = src->num_rates;
  #line 5405 
  return;
}

#line 5410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_add_cck_scan_rates(struct ipw_supported_rates *rates, u8 modulation, u32 rate_mask)
{
  #line 5413 
  unsigned int tmp;
  #line 5413 
  if ((unsigned int)modulation == 2U) 
                                      #line 5413 
                                      tmp = 128U; else 
                                                       #line 5413 
                                                       tmp = 0U;
  #line 5413 
  u8 basic_mask = (unsigned char)tmp;
  #line 5416 
  if ((rate_mask & 1U) != 0U) {
    #line 5417 
    u8 tmp_0;
    #line 5417 
    tmp_0 = rates->num_rates;
    #line 5417 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5417 
    rates->supported_rates[(int)tmp_0] = (unsigned char)130U;
  }
  #line 5420 
  if ((rate_mask & 2U) != 0U) {
    #line 5421 
    u8 tmp_1;
    #line 5421 
    tmp_1 = rates->num_rates;
    #line 5421 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5421 
    rates->supported_rates[(int)tmp_1] = (unsigned char)132U;
  }
  #line 5424 
  if ((rate_mask & 4U) != 0U) {
    #line 5425 
    u8 tmp_2;
    #line 5425 
    tmp_2 = rates->num_rates;
    #line 5425 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5425 
    rates->supported_rates[(int)tmp_2] = (unsigned char)((unsigned int)basic_mask | 11U);
  }
  #line 5428 
  if ((rate_mask & 8U) != 0U) {
    #line 5429 
    u8 tmp_3;
    #line 5429 
    tmp_3 = rates->num_rates;
    #line 5429 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5429 
    rates->supported_rates[(int)tmp_3] = (unsigned char)((unsigned int)basic_mask | 22U);
  }
  #line 5430 
  return;
}

#line 5433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_add_ofdm_scan_rates(struct ipw_supported_rates *rates, u8 modulation, u32 rate_mask)
{
  #line 5436 
  unsigned int tmp;
  #line 5436 
  if ((unsigned int)modulation == 2U) 
                                      #line 5436 
                                      tmp = 128U; else 
                                                       #line 5436 
                                                       tmp = 0U;
  #line 5436 
  u8 basic_mask = (unsigned char)tmp;
  #line 5439 
  if ((rate_mask & 16U) != 0U) {
    #line 5440 
    u8 tmp_0;
    #line 5440 
    tmp_0 = rates->num_rates;
    #line 5440 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5440 
    rates->supported_rates[(int)tmp_0] = (unsigned char)((unsigned int)basic_mask | 12U);
  }
  #line 5443 
  if ((rate_mask & 32U) != 0U) {
    #line 5444 
    u8 tmp_1;
    #line 5444 
    tmp_1 = rates->num_rates;
    #line 5444 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5444 
    rates->supported_rates[(int)tmp_1] = (unsigned char)18U;
  }
  #line 5447 
  if ((rate_mask & 64U) != 0U) {
    #line 5448 
    u8 tmp_2;
    #line 5448 
    tmp_2 = rates->num_rates;
    #line 5448 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5448 
    rates->supported_rates[(int)tmp_2] = (unsigned char)((unsigned int)basic_mask | 24U);
  }
  #line 5451 
  if ((rate_mask & 128U) != 0U) {
    #line 5452 
    u8 tmp_3;
    #line 5452 
    tmp_3 = rates->num_rates;
    #line 5452 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5452 
    rates->supported_rates[(int)tmp_3] = (unsigned char)36U;
  }
  #line 5455 
  if ((rate_mask & 256U) != 0U) {
    #line 5456 
    u8 tmp_4;
    #line 5456 
    tmp_4 = rates->num_rates;
    #line 5456 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5456 
    rates->supported_rates[(int)tmp_4] = (unsigned char)((unsigned int)basic_mask | 48U);
  }
  #line 5459 
  if ((rate_mask & 512U) != 0U) {
    #line 5460 
    u8 tmp_5;
    #line 5460 
    tmp_5 = rates->num_rates;
    #line 5460 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5460 
    rates->supported_rates[(int)tmp_5] = (unsigned char)72U;
  }
  #line 5463 
  if ((rate_mask & 1024U) != 0U) {
    #line 5464 
    u8 tmp_6;
    #line 5464 
    tmp_6 = rates->num_rates;
    #line 5464 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5464 
    rates->supported_rates[(int)tmp_6] = (unsigned char)96U;
  }
  #line 5467 
  if ((rate_mask & 2048U) != 0U) {
    #line 5468 
    u8 tmp_7;
    #line 5468 
    tmp_7 = rates->num_rates;
    #line 5468 
    rates->num_rates = (u8)((int)rates->num_rates + 1);
    #line 5468 
    rates->supported_rates[(int)tmp_7] = (unsigned char)108U;
  }
  #line 5469 
  return;
}

#line 5477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_find_adhoc_network(struct ipw_priv *priv, struct ipw_network_match *match, struct libipw_network *network, int roaming_0)
{
  #line 5482 
  struct ipw_supported_rates rates;
  #line 5486 
  if ((priv->ieee)->iw_mode == 1 && ((int)network->capability & 2) == 0) {
    #line 5488 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5488 
      int tmp_0;
      #line 5488 
      ;
      #line 5488 
      ;
      #line 5488 
      ;
      #line 5488 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5488 
                                                               tmp_0 = 73; else 
                                                                    #line 5488 
                                                                    tmp_0 = 85;
      #line 5488 
      printk((char *)"\001",tmp_0,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5491 
    return 0;
  }
  #line 5494 
  if ((long)(roaming_0 != 0) != 0L) {
    #line 5497 
    if ((int)network->ssid_len != (int)(match->network)->ssid_len) 
                                                                   #line 5497 
                                                                   goto _LOR;
    else {
      #line 5497 
      if (memcmp((void *)(& network->ssid),(void *)(& (match->network)->ssid),
               (unsigned long)network->ssid_len) != 0) {
        #line 5497 
        _LOR: {
                #line 5500 
                if ((ipw_debug_level & 1073741824U) != 0U) {
                  #line 5500 
                  int tmp_2;
                  #line 5500 
                  ;
                  #line 5500 
                  ;
                  #line 5500 
                  ;
                  #line 5500 
                  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                    #line 5500 
                    tmp_2 = 73; else 
                                     #line 5500 
                                     tmp_2 = 85;
                  #line 5500 
                  printk((char *)"\001",tmp_2,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
                }
                #line 5503 
                return 0;
              }
      }
    }
  }
  else 
    #line 5508 
    if ((priv->config & 2U) != 0U) 
      #line 5508 
      if ((int)network->ssid_len != (int)priv->essid_len) 
                                                          #line 5508 
                                                          goto _LOR_0;
      else {
        #line 5511 
        u8 __UNIQUE_ID___x485;
        #line 5511 
        int tmp_6;
        {
          #line 5511 
          __UNIQUE_ID___x485 = network->ssid_len;
          #line 5511 
          u8 __UNIQUE_ID___y486 = priv->essid_len;
          #line 5511 
          if ((int)__UNIQUE_ID___x485 < (int)__UNIQUE_ID___y486) 
                                                                 #line 5511 
                                                                 tmp_6 = (int)__UNIQUE_ID___x485; else 
                                                                    #line 5511 
                                                                    tmp_6 = (int)__UNIQUE_ID___y486;
          }
        #line 5509 
        ;
        #line 5509 
        ;
        #line 5509 
        if (memcmp((void *)(& network->ssid),(void *)(& priv->essid),
               (unsigned long)tmp_6) != 0) {
          #line 5508 
          _LOR_0: {
                    #line 5512 
                    if ((ipw_debug_level & 1073741824U) != 0U) {
                      #line 5512 
                      int tmp_5;
                      #line 5512 
                      ;
                      #line 5512 
                      ;
                      #line 5512 
                      ;
                      #line 5512 
                      ;
                      #line 5512 
                      ;
                      #line 5512 
                      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                        #line 5512 
                        tmp_5 = 73; else 
                                         #line 5512 
                                         tmp_5 = 85;
                      #line 5512 
                      printk((char *)"\001",tmp_5,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),(int)priv->essid_len,(u8 *)(& priv->essid));
                    }
                    #line 5516 
                    return 0;
                  }
        }
      }
  #line 5523 
  if (network->time_stamp[0] < (match->network)->time_stamp[0]) {
    #line 5524 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5524 
      int tmp_10;
      #line 5524 
      ;
      #line 5524 
      ;
      #line 5524 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5524 
                                                               tmp_10 = 73; else 
                                                                    #line 5524 
                                                                    tmp_10 = 85;
      #line 5524 
      printk((char *)"\001",tmp_10,(char *)"ipw_find_adhoc_network",(int)(match->network)->ssid_len,(u8 *)(& (match->network)->ssid));
    }
    #line 5526 
    return 0;
  }
  else 
    #line 5527 
    if (network->time_stamp[1] < (match->network)->time_stamp[1]) {
      #line 5528 
      if ((ipw_debug_level & 1073741824U) != 0U) {
        #line 5528 
        int tmp_12;
        #line 5528 
        ;
        #line 5528 
        ;
        #line 5528 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 5528 
                                                                 tmp_12 = 73; else 
                                                                    #line 5528 
                                                                    tmp_12 = 85;
        #line 5528 
        printk((char *)"\001",tmp_12,(char *)"ipw_find_adhoc_network",(int)(match->network)->ssid_len,(u8 *)(& (match->network)->ssid));
      }
      #line 5530 
      return 0;
    }
  {
    #line 5535 
    unsigned long __dummy;
    #line 5535 
    unsigned long __dummy2;
    }
  #line 5534 
  if (1 != 0) {
    {
      #line 5535 
      unsigned long __dummy_0;
      #line 5535 
      unsigned long __dummy2_0;
      }
    #line 5535 
    if (1 != 0) 
      #line 5535 
      if ((long)((network->last_scanned + (unsigned long)(priv->ieee)->scan_age) - jiffies) < 0L) 
        #line 5534 
        if ((priv->ieee)->scan_age != 0) {
          #line 5536 
          if ((ipw_debug_level & 1073741824U) != 0U) {
            #line 5536 
            unsigned int tmp_13;
            #line 5536 
            int tmp_15;
            #line 5536 
            tmp_13 = jiffies_to_msecs(jiffies - network->last_scanned);
            #line 5536 
            ;
            #line 5536 
            ;
            #line 5536 
            ;
            #line 5536 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 5536 
              tmp_15 = 73; else 
                                #line 5536 
                                tmp_15 = 85;
            #line 5536 
            printk((char *)"\001",tmp_15,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),tmp_13);
          }
          #line 5541 
          return 0;
        }
  }
  #line 5544 
  if ((priv->config & 1U) != 0U && (int)network->channel != (int)priv->channel) {
    #line 5546 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5546 
      int tmp_19;
      #line 5546 
      ;
      #line 5546 
      ;
      #line 5546 
      ;
      #line 5546 
      ;
      #line 5546 
      ;
      #line 5546 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5546 
                                                               tmp_19 = 73; else 
                                                                    #line 5546 
                                                                    tmp_19 = 85;
      #line 5546 
      printk((char *)"\001",tmp_19,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),(int)network->channel,(int)priv->channel);
    }
    #line 5550 
    return 0;
  }
  #line 5554 
  if ((((int)(priv->capability >> 1) ^ ((int)network->capability >> 4)) & 1) != 0) {
    #line 5556 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5556 
      char *tmp_20;
      #line 5556 
      char *tmp_21;
      #line 5556 
      int tmp_23;
      #line 5556 
      if (((int)network->capability & 16) != 0) 
                                                #line 5556 
                                                tmp_20 = (char *)"on"; else 
                                                                    #line 5556 
                                                                    tmp_20 = (char *)"off";
      #line 5556 
      if ((priv->capability & 2U) != 0U) 
                                         #line 5556 
                                         tmp_21 = (char *)"on"; else 
                                                                  #line 5556 
                                                                  tmp_21 = (char *)"off";
      #line 5556 
      ;
      #line 5556 
      ;
      #line 5556 
      ;
      #line 5556 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5556 
                                                               tmp_23 = 73; else 
                                                                    #line 5556 
                                                                    tmp_23 = 85;
      #line 5556 
      printk((char *)"\001",tmp_23,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),tmp_21,tmp_20);
    }
    #line 5564 
    return 0;
  }
  #line 5567 
  if ((int)ether_addr_equal((u8 *)(& network->bssid),(u8 *)(& priv->bssid)) != 0) {
    #line 5568 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5568 
      int tmp_25;
      #line 5568 
      ;
      #line 5568 
      ;
      #line 5568 
      ;
      #line 5568 
      ;
      #line 5568 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5568 
                                                               tmp_25 = 73; else 
                                                                    #line 5568 
                                                                    tmp_25 = 85;
      #line 5568 
      printk((char *)"\001",tmp_25,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),(u8 *)(& priv->bssid));
    }
    #line 5571 
    return 0;
  }
  #line 5575 
  if (libipw_is_valid_mode(priv->ieee,(int)network->mode) == 0) {
    #line 5576 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5576 
      int tmp_28;
      #line 5576 
      ;
      #line 5576 
      ;
      #line 5576 
      ;
      #line 5576 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5576 
                                                               tmp_28 = 73; else 
                                                                    #line 5576 
                                                                    tmp_28 = 85;
      #line 5576 
      printk((char *)"\001",tmp_28,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5579 
    return 0;
  }
  #line 5584 
  if (ipw_compatible_rates(priv,network,& rates) == 0) {
    #line 5585 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5585 
      int tmp_31;
      #line 5585 
      ;
      #line 5585 
      ;
      #line 5585 
      ;
      #line 5585 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5585 
                                                               tmp_31 = 73; else 
                                                                    #line 5585 
                                                                    tmp_31 = 85;
      #line 5585 
      printk((char *)"\001",tmp_31,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5588 
    return 0;
  }
  #line 5591 
  if ((unsigned int)rates.num_rates == 0U) {
    #line 5592 
    if ((ipw_debug_level & 1073741824U) != 0U) {
      #line 5592 
      int tmp_34;
      #line 5592 
      ;
      #line 5592 
      ;
      #line 5592 
      ;
      #line 5592 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5592 
                                                               tmp_34 = 73; else 
                                                                    #line 5592 
                                                                    tmp_34 = 85;
      #line 5592 
      printk((char *)"\001",tmp_34,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5595 
    return 0;
  }
  #line 5603 
  ipw_copy_rates(& match->rates,& rates);
  #line 5604 
  match->network = network;
  #line 5605 
  if ((ipw_debug_level & 1073741824U) != 0U) {
    #line 5605 
    int tmp_36;
    #line 5605 
    ;
    #line 5605 
    ;
    #line 5605 
    ;
    #line 5605 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5605 
                                                             tmp_36 = 73; else 
                                                                    #line 5605 
                                                                    tmp_36 = 85;
    #line 5605 
    printk((char *)"\001",tmp_36,(char *)"ipw_find_adhoc_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
  }
  #line 5608 
  return 1;
}

#line 5611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_merge_adhoc_network(struct work_struct *work)
{
  #line 5614 
  void *__mptr;
  #line 5614 
  __mptr = (void *)work;
  #line 5613 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709544816U));
  #line 5615 
  struct libipw_network *network = (struct libipw_network *)0;
  #line 5616 
  struct ipw_network_match match = {.network = priv->assoc_network, .rates = {.ieee_mode = (unsigned char)0, .num_rates = (unsigned char)0, .purpose = (unsigned char)0, .reserved = (unsigned char)0, .supported_rates = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 5620 
  if ((priv->status & 128U) != 0U && (priv->ieee)->iw_mode == 1) {
    #line 5627 
    void *__mptr_0;
    #line 5624 
    unsigned long flags;
    #line 5626 
    cif___ldv_spin_lock_lock_of_libipw_device(& (priv->ieee)->lock);
    #line 5627 
    __mptr_0 = (void *)(priv->ieee)->network_list.next;
    #line 5627 
    network = ((struct libipw_network *)(__mptr_0 + 18446744073709551264U));
    #line 5627 
    while (& network->list != & (priv->ieee)->network_list) {
      #line 5627 
      void *__mptr_1;
      #line 5628 
      if (priv->assoc_network != network) 
                                          #line 5629 
                                          ipw_find_adhoc_network(priv,& match,network,1);
      #line 5627 
      __mptr_1 = (void *)network->list.next;
      #line 5627 
      network = ((struct libipw_network *)(__mptr_1 + 18446744073709551264U));
    }
    #line 5632 
    cif_spin_unlock_irqrestore_lock_of_libipw_device(& (priv->ieee)->lock,flags);
    #line 5634 
    if (match.network == priv->assoc_network) {
      #line 5635 
      if ((ipw_debug_level & 1073741824U) != 0U) {
        #line 5635 
        int tmp_3;
        #line 5635 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 5635 
                                                                 tmp_3 = 73; else 
                                                                    #line 5635 
                                                                    tmp_3 = 85;
        #line 5635 
        printk((char *)"\001",tmp_3,(char *)"ipw_merge_adhoc_network");
      }
      #line 5637 
      return;
    }
    #line 5640 
    cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
    #line 5641 
    if ((priv->ieee)->iw_mode == 1) {
      #line 5642 
      if ((ipw_debug_level & 1073741824U) != 0U) {
        #line 5642 
        int tmp_5;
        #line 5642 
        ;
        #line 5642 
        ;
        #line 5642 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 5642 
                                                                 tmp_5 = 73; else 
                                                                    #line 5642 
                                                                    tmp_5 = 85;
        #line 5642 
        printk((char *)"\001",tmp_5,(char *)"ipw_merge_adhoc_network",(int)priv->essid_len,(u8 *)(& priv->essid));
      }
      #line 5644 
      ipw_remove_current_network(priv);
    }
    #line 5647 
    ipw_disassociate((void *)priv);
    #line 5648 
    priv->assoc_network = match.network;
    #line 5649 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 5650 
    return;
  }
  #line 5652 
  return;
}

#line 5654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_best_network(struct ipw_priv *priv, struct ipw_network_match *match, struct libipw_network *network, int roaming_0)
{
  #line 5658 
  struct ipw_supported_rates rates;
  #line 5662 
  if ((priv->ieee)->iw_mode == 2 && ((int)network->capability & 1) == 0 || (priv->ieee)->iw_mode == 1 && ((int)network->capability & 2) == 0) {
    #line 5666 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5666 
      int tmp_0;
      #line 5666 
      ;
      #line 5666 
      ;
      #line 5666 
      ;
      #line 5666 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5666 
                                                               tmp_0 = 73; else 
                                                                    #line 5666 
                                                                    tmp_0 = 85;
      #line 5666 
      printk((char *)"\001",tmp_0,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5669 
    return 0;
  }
  #line 5672 
  if ((long)(roaming_0 != 0) != 0L) {
    #line 5675 
    if ((int)network->ssid_len != (int)(match->network)->ssid_len) 
                                                                   #line 5675 
                                                                   goto _LOR;
    else {
      #line 5675 
      if (memcmp((void *)(& network->ssid),(void *)(& (match->network)->ssid),
               (unsigned long)network->ssid_len) != 0) {
        #line 5675 
        _LOR: {
                #line 5678 
                if ((ipw_debug_level & 4100U) != 0U) {
                  #line 5678 
                  int tmp_2;
                  #line 5678 
                  ;
                  #line 5678 
                  ;
                  #line 5678 
                  ;
                  #line 5678 
                  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                    #line 5678 
                    tmp_2 = 73; else 
                                     #line 5678 
                                     tmp_2 = 85;
                  #line 5678 
                  printk((char *)"\001",tmp_2,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
                }
                #line 5681 
                return 0;
              }
      }
    }
  }
  else 
    #line 5686 
    if ((priv->config & 2U) != 0U) 
      #line 5686 
      if ((int)network->ssid_len != (int)priv->essid_len) 
                                                          #line 5686 
                                                          goto _LOR_0;
      else {
        #line 5689 
        u8 __UNIQUE_ID___x487;
        #line 5689 
        int tmp_6;
        {
          #line 5689 
          __UNIQUE_ID___x487 = network->ssid_len;
          #line 5689 
          u8 __UNIQUE_ID___y488 = priv->essid_len;
          #line 5689 
          if ((int)__UNIQUE_ID___x487 < (int)__UNIQUE_ID___y488) 
                                                                 #line 5689 
                                                                 tmp_6 = (int)__UNIQUE_ID___x487; else 
                                                                    #line 5689 
                                                                    tmp_6 = (int)__UNIQUE_ID___y488;
          }
        #line 5687 
        ;
        #line 5687 
        ;
        #line 5687 
        if (memcmp((void *)(& network->ssid),(void *)(& priv->essid),
               (unsigned long)tmp_6) != 0) {
          #line 5686 
          _LOR_0: {
                    #line 5690 
                    if ((ipw_debug_level & 4100U) != 0U) {
                      #line 5690 
                      int tmp_5;
                      #line 5690 
                      ;
                      #line 5690 
                      ;
                      #line 5690 
                      ;
                      #line 5690 
                      ;
                      #line 5690 
                      ;
                      #line 5690 
                      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                        #line 5690 
                        tmp_5 = 73; else 
                                         #line 5690 
                                         tmp_5 = 85;
                      #line 5690 
                      printk((char *)"\001",tmp_5,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),(int)priv->essid_len,(u8 *)(& priv->essid));
                    }
                    #line 5694 
                    return 0;
                  }
        }
      }
  #line 5700 
  if (match->network != (struct libipw_network *)0 && (int)(match->network)->stats.rssi > (int)network->stats.rssi) {
    #line 5701 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5701 
      int tmp_10;
      #line 5701 
      ;
      #line 5701 
      ;
      #line 5701 
      ;
      #line 5701 
      ;
      #line 5701 
      ;
      #line 5701 
      ;
      #line 5701 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5701 
                                                               tmp_10 = 73; else 
                                                                    #line 5701 
                                                                    tmp_10 = 85;
      #line 5701 
      printk((char *)"\001",tmp_10,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),(int)(match->network)->ssid_len,(u8 *)(& (match->network)->ssid),(u8 *)(& (match->network)->bssid));
    }
    #line 5705 
    return 0;
  }
  {
    #line 5711 
    unsigned long __dummy;
    #line 5711 
    unsigned long __dummy2;
    }
  #line 5710 
  if (1 != 0) {
    {
      #line 5711 
      unsigned long __dummy_0;
      #line 5711 
      unsigned long __dummy2_0;
      }
    #line 5711 
    if (1 != 0) 
      #line 5711 
      if ((long)((jiffies - (unsigned long)network->last_associate) + 18446744073709550866UL) < 0L) 
        #line 5710 
        if (network->last_associate != 0U) {
          #line 5712 
          if ((ipw_debug_level & 4100U) != 0U) {
            #line 5712 
            unsigned int tmp_11;
            #line 5712 
            int tmp_13;
            #line 5712 
            tmp_11 = jiffies_to_msecs(jiffies - (unsigned long)network->last_associate);
            #line 5712 
            ;
            #line 5712 
            ;
            #line 5712 
            ;
            #line 5712 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 5712 
              tmp_13 = 73; else 
                                #line 5712 
                                tmp_13 = 85;
            #line 5712 
            printk((char *)"\001",tmp_13,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),tmp_11);
          }
          #line 5717 
          return 0;
        }
  }
  {
    #line 5722 
    unsigned long __dummy_1;
    #line 5722 
    unsigned long __dummy2_1;
    }
  #line 5721 
  if (1 != 0) {
    {
      #line 5722 
      unsigned long __dummy_2;
      #line 5722 
      unsigned long __dummy2_2;
      }
    #line 5722 
    if (1 != 0) 
      #line 5722 
      if ((long)((network->last_scanned + (unsigned long)(priv->ieee)->scan_age) - jiffies) < 0L) 
        #line 5721 
        if ((priv->ieee)->scan_age != 0) {
          #line 5723 
          if ((ipw_debug_level & 4100U) != 0U) {
            #line 5723 
            unsigned int tmp_16;
            #line 5723 
            int tmp_18;
            #line 5723 
            tmp_16 = jiffies_to_msecs(jiffies - network->last_scanned);
            #line 5723 
            ;
            #line 5723 
            ;
            #line 5723 
            ;
            #line 5723 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 5723 
              tmp_18 = 73; else 
                                #line 5723 
                                tmp_18 = 85;
            #line 5723 
            printk((char *)"\001",tmp_18,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),tmp_16);
          }
          #line 5728 
          return 0;
        }
  }
  #line 5731 
  if ((priv->config & 1U) != 0U && (int)network->channel != (int)priv->channel) {
    #line 5733 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5733 
      int tmp_22;
      #line 5733 
      ;
      #line 5733 
      ;
      #line 5733 
      ;
      #line 5733 
      ;
      #line 5733 
      ;
      #line 5733 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5733 
                                                               tmp_22 = 73; else 
                                                                    #line 5733 
                                                                    tmp_22 = 85;
      #line 5733 
      printk((char *)"\001",tmp_22,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),(int)network->channel,(int)priv->channel);
    }
    #line 5737 
    return 0;
  }
  #line 5741 
  if ((((int)(priv->capability >> 1) ^ ((int)network->capability >> 4)) & 1) != 0) {
    #line 5743 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5743 
      char *tmp_23;
      #line 5743 
      char *tmp_24;
      #line 5743 
      int tmp_26;
      #line 5743 
      if (((int)network->capability & 16) != 0) 
                                                #line 5743 
                                                tmp_23 = (char *)"on"; else 
                                                                    #line 5743 
                                                                    tmp_23 = (char *)"off";
      #line 5743 
      if ((priv->capability & 2U) != 0U) 
                                         #line 5743 
                                         tmp_24 = (char *)"on"; else 
                                                                  #line 5743 
                                                                  tmp_24 = (char *)"off";
      #line 5743 
      ;
      #line 5743 
      ;
      #line 5743 
      ;
      #line 5743 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5743 
                                                               tmp_26 = 73; else 
                                                                    #line 5743 
                                                                    tmp_26 = 85;
      #line 5743 
      printk((char *)"\001",tmp_26,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),tmp_24,tmp_23);
    }
    #line 5750 
    return 0;
  }
  #line 5753 
  if ((priv->config & 4U) != 0U) {
    #line 5754 
    if (! ether_addr_equal((u8 *)(& network->bssid),(u8 *)(& priv->bssid))) {
      #line 5755 
      if ((ipw_debug_level & 4100U) != 0U) {
        #line 5755 
        int tmp_28;
        #line 5755 
        ;
        #line 5755 
        ;
        #line 5755 
        ;
        #line 5755 
        ;
        #line 5755 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 5755 
                                                                 tmp_28 = 73; else 
                                                                    #line 5755 
                                                                    tmp_28 = 85;
        #line 5755 
        printk((char *)"\001",tmp_28,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid),(u8 *)(& priv->bssid));
      }
      #line 5758 
      return 0;
    }
  }
  #line 5762 
  if (libipw_is_valid_mode(priv->ieee,(int)network->mode) == 0) {
    #line 5763 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5763 
      int tmp_31;
      #line 5763 
      ;
      #line 5763 
      ;
      #line 5763 
      ;
      #line 5763 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5763 
                                                               tmp_31 = 73; else 
                                                                    #line 5763 
                                                                    tmp_31 = 85;
      #line 5763 
      printk((char *)"\001",tmp_31,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5766 
    return 0;
  }
  #line 5770 
  if (libipw_is_valid_channel(priv->ieee,
                                 (unsigned char)((int)network->channel)) == 0) {
    #line 5771 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5771 
      int tmp_34;
      #line 5771 
      ;
      #line 5771 
      ;
      #line 5771 
      ;
      #line 5771 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5771 
                                                               tmp_34 = 73; else 
                                                                    #line 5771 
                                                                    tmp_34 = 85;
      #line 5771 
      printk((char *)"\001",tmp_34,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5774 
    return 0;
  }
  #line 5779 
  if (ipw_compatible_rates(priv,network,& rates) == 0) {
    #line 5780 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5780 
      int tmp_37;
      #line 5780 
      ;
      #line 5780 
      ;
      #line 5780 
      ;
      #line 5780 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5780 
                                                               tmp_37 = 73; else 
                                                                    #line 5780 
                                                                    tmp_37 = 85;
      #line 5780 
      printk((char *)"\001",tmp_37,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5783 
    return 0;
  }
  #line 5786 
  if ((unsigned int)rates.num_rates == 0U) {
    #line 5787 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 5787 
      int tmp_40;
      #line 5787 
      ;
      #line 5787 
      ;
      #line 5787 
      ;
      #line 5787 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 5787 
                                                               tmp_40 = 73; else 
                                                                    #line 5787 
                                                                    tmp_40 = 85;
      #line 5787 
      printk((char *)"\001",tmp_40,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
    }
    #line 5790 
    return 0;
  }
  #line 5798 
  ipw_copy_rates(& match->rates,& rates);
  #line 5799 
  match->network = network;
  #line 5801 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 5801 
    int tmp_42;
    #line 5801 
    ;
    #line 5801 
    ;
    #line 5801 
    ;
    #line 5801 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 5801 
                                                             tmp_42 = 73; else 
                                                                    #line 5801 
                                                                    tmp_42 = 85;
    #line 5801 
    printk((char *)"\001",tmp_42,(char *)"ipw_best_network",(int)network->ssid_len,(u8 *)(& network->ssid),(u8 *)(& network->bssid));
  }
  #line 5804 
  return 1;
}

#line 5807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_adhoc_create(struct ipw_priv *priv, struct libipw_network *network)
{
  #line 5875 
  int tmp_1;
  #line 5875 
  u8 __UNIQUE_ID___x491;
  #line 5811 
  int i;
  #line 5810 
  struct libipw_geo *geo = libipw_get_geo(priv->ieee);
  #line 5825 
  switch (libipw_is_valid_channel(priv->ieee,
                                (unsigned char)((int)priv->channel))) {
    #line 5826 
    case 2: 
            #line 5826 
    ;
    #line 5827 
    network->mode = (unsigned char)1U;
    #line 5828 
    i = libipw_channel_to_index(priv->ieee,(unsigned char)((int)priv->channel));
    #line 5829 
    if ((long)(i == -1) != 0L) {
      #line 5830 
      ldv_inline_asm();
      #line 5831 
      ldv_inline_asm();
      #line 5832 
      ldv_inline_asm();
      #line 5829 
      ;
    }
    #line 5830 
    if (((int)geo->a[i].flags & 1) != 0) {
      #line 5831 
      printk((char *)"\001");
      #line 5832 
      priv->channel = geo->a[0].channel;
    }
    #line 5834 
    break;
    #line 5836 
    case 1: 
            #line 5836 
    ;
    #line 5837 
    if (((priv->ieee)->mode & 4) != 0) 
                                       #line 5838 
                                       network->mode = (unsigned char)4U; else 
                                                                    #line 5840 
                                                                    network->mode = (unsigned char)2U;
    #line 5841 
    i = libipw_channel_to_index(priv->ieee,(unsigned char)((int)priv->channel));
    #line 5842 
    if ((long)(i == -1) != 0L) {
      #line 5843 
      ldv_inline_asm();
      #line 5844 
      ldv_inline_asm();
      #line 5845 
      ldv_inline_asm();
      #line 5842 
      ;
    }
    #line 5843 
    if (((int)geo->bg[i].flags & 1) != 0) {
      #line 5844 
      printk((char *)"\001");
      #line 5845 
      priv->channel = geo->bg[0].channel;
    }
    #line 5847 
    break;
    #line 5849 
    default: 
             #line 5849 
    ;
    #line 5850 
    printk((char *)"\001");
    #line 5851 
    if (((priv->ieee)->mode & 1) != 0) {
      #line 5852 
      network->mode = (unsigned char)1U;
      #line 5853 
      priv->channel = geo->a[0].channel;
    }
    else 
      #line 5854 
      if (((priv->ieee)->mode & 4) != 0) {
        #line 5855 
        network->mode = (unsigned char)4U;
        #line 5856 
        priv->channel = geo->bg[0].channel;
      }
      else {
        #line 5858 
        network->mode = (unsigned char)2U;
        #line 5859 
        priv->channel = geo->bg[0].channel;
      }
    #line 5861 
    break;
  }
  #line 5864 
  network->channel = priv->channel;
  #line 5865 
  priv->config |= 32U;
  #line 5866 
  ipw_create_bssid(priv,(u8 *)(& network->bssid));
  #line 5867 
  network->ssid_len = priv->essid_len;
  #line 5868 
  memcpy((void *)(& network->ssid),(void *)(& priv->essid),(unsigned long)priv->essid_len);
  #line 5869 
  memset((void *)(& network->stats),0,32UL);
  #line 5870 
  network->capability = (unsigned short)2U;
  #line 5871 
  if ((priv->config & 16U) == 0U) 
                                  #line 5872 
                                  network->capability = (unsigned short)((unsigned int)network->capability | 32U);
  #line 5873 
  if ((priv->capability & 2U) != 0U) 
                                     #line 5874 
                                     network->capability = (unsigned short)((unsigned int)network->capability | 16U);
  {
    #line 5875 
    __UNIQUE_ID___x491 = priv->rates.num_rates;
    #line 5875 
    unsigned char __UNIQUE_ID___y492 = (unsigned char)12U;
    #line 5875 
    if ((int)__UNIQUE_ID___x491 < (int)__UNIQUE_ID___y492) 
                                                           #line 5875 
                                                           tmp_1 = (int)__UNIQUE_ID___x491; else 
                                                                    #line 5875 
                                                                    tmp_1 = (int)__UNIQUE_ID___y492;
    }
  #line 5875 
  network->rates_len = (unsigned char)tmp_1;
  #line 5876 
  memcpy((void *)(& network->rates),(void *)(& priv->rates.supported_rates),(unsigned long)network->rates_len);
  #line 5877 
  network->rates_ex_len = (unsigned char)((int)priv->rates.num_rates - (int)network->rates_len);
  #line 5878 
  memcpy((void *)(& network->rates_ex),(void *)(& priv->rates.supported_rates[(int)network->rates_len]),(unsigned long)network->rates_ex_len);
  #line 5881 
  network->last_scanned = 0UL;
  #line 5882 
  network->flags = 0U;
  #line 5883 
  network->last_associate = 0U;
  #line 5884 
  network->time_stamp[0] = 0U;
  #line 5885 
  network->time_stamp[1] = 0U;
  #line 5886 
  network->beacon_interval = (unsigned short)100U;
  #line 5887 
  network->listen_interval = (unsigned short)10U;
  #line 5888 
  network->atim_window = (unsigned short)0U;
  #line 5889 
  network->wpa_ie_len = 0UL;
  #line 5890 
  network->rsn_ie_len = 0UL;
  #line 5891 
  return;
}

#line 5893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_send_tgi_tx_key(struct ipw_priv *priv, int type, int index)
{
  #line 5895 
  struct ipw_tgi_tx_key key;
  #line 5897 
  if ((((int)(priv->ieee)->sec.flags >> index) & 1) == 0) 
                                                          #line 5898 
                                                          return;
  #line 5900 
  key.key_id = (unsigned char)index;
  #line 5901 
  memcpy((void *)(& key.key),(void *)(& (priv->ieee)->sec.keys[index]),16UL);
  #line 5902 
  key.security_type = (unsigned char)type;
  #line 5903 
  key.station_index = (unsigned char)0U;
  #line 5904 
  key.flags = (unsigned char)0U;
  #line 5906 
  key.tx_counter[0] = 0U;
  #line 5907 
  key.tx_counter[1] = 0U;
  #line 5909 
  ipw_send_cmd_pdu(priv,(unsigned char)19,(unsigned char)28,(void *)(& key));
  #line 5910 
  return;
}

#line 5912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_send_wep_keys(struct ipw_priv *priv, int type)
{
  #line 5914 
  struct ipw_wep_key key;
  #line 5915 
  int i;
  #line 5917 
  key.cmd_id = (unsigned char)8U;
  #line 5918 
  key.seq_num = (unsigned char)0U;
  #line 5922 
  i = 0;
  #line 5922 
  while (i <= 3) {
    #line 5923 
    key.key_index = (unsigned char)(i | type);
    #line 5924 
    if ((((int)(priv->ieee)->sec.flags >> i) & 1) == 0) {
      #line 5925 
      key.key_size = (unsigned char)0U;
      #line 5926 
      goto __Cont;
    }
    #line 5929 
    key.key_size = (priv->ieee)->sec.key_sizes[i];
    #line 5930 
    memcpy((void *)(& key.key),(void *)(& (priv->ieee)->sec.keys[i]),(unsigned long)key.key_size);
    #line 5932 
    ipw_send_cmd_pdu(priv,(unsigned char)18,(unsigned char)20,(void *)(& key));
    #line 5922 
    __Cont: 
            #line 5922 
    i ++;
  }
  #line 5934 
  return;
}

#line 5936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_set_hw_decrypt_unicast(struct ipw_priv *priv, int level)
{
  #line 5938 
  if ((priv->ieee)->host_encrypt != 0) 
                                       #line 5939 
                                       return;
  #line 5941 
  switch (level) {
    #line 5942 
    case 4: 
            #line 5942 
    ;
    #line 5943 
    priv->sys_config.disable_unicast_decryption = (unsigned char)0U;
    #line 5944 
    (priv->ieee)->host_decrypt = 0;
    #line 5945 
    break;
    #line 5946 
    case 2: 
            #line 5946 
    ;
    #line 5947 
    priv->sys_config.disable_unicast_decryption = (unsigned char)1U;
    #line 5948 
    (priv->ieee)->host_decrypt = 1;
    #line 5949 
    break;
    #line 5950 
    case 1: 
            #line 5950 
    ;
    #line 5951 
    priv->sys_config.disable_unicast_decryption = (unsigned char)0U;
    #line 5952 
    (priv->ieee)->host_decrypt = 0;
    #line 5953 
    break;
    #line 5954 
    case 0: 
            #line 5954 
    ;
    #line 5955 
    priv->sys_config.disable_unicast_decryption = (unsigned char)1U;
    #line 5956 
    break;
    #line 5957 
    default: 
             #line 5957 
    ;
    #line 5958 
    break;
  }
  #line 5960 
  return;
}

#line 5962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_set_hw_decrypt_multicast(struct ipw_priv *priv, int level)
{
  #line 5964 
  if ((priv->ieee)->host_encrypt != 0) 
                                       #line 5965 
                                       return;
  #line 5967 
  switch (level) {
    #line 5968 
    case 4: 
            #line 5968 
    ;
    #line 5969 
    priv->sys_config.disable_multicast_decryption = (unsigned char)0U;
    #line 5970 
    break;
    #line 5971 
    case 2: 
            #line 5971 
    ;
    #line 5972 
    priv->sys_config.disable_multicast_decryption = (unsigned char)1U;
    #line 5973 
    break;
    #line 5974 
    case 1: 
            #line 5974 
    ;
    #line 5975 
    priv->sys_config.disable_multicast_decryption = (unsigned char)0U;
    #line 5976 
    break;
    #line 5977 
    case 0: 
            #line 5977 
    ;
    #line 5978 
    priv->sys_config.disable_multicast_decryption = (unsigned char)1U;
    #line 5979 
    break;
    #line 5980 
    default: 
             #line 5980 
    ;
    #line 5981 
    break;
  }
  #line 5983 
  return;
}

#line 5985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_set_hwcrypto_keys(struct ipw_priv *priv)
{
  #line 5987 
  switch ((int)(priv->ieee)->sec.level) {
    #line 5988 
    case 4: 
            #line 5988 
    ;
    #line 5989 
    if (((int)(priv->ieee)->sec.flags & 16) != 0) 
                                                  #line 5990 
                                                  ipw_send_tgi_tx_key(priv,8,(int)(priv->ieee)->sec.active_key);
    #line 5994 
    if ((priv->ieee)->host_mc_decrypt == 0) 
                                            #line 5995 
                                            ipw_send_wep_keys(priv,32);
    #line 5996 
    break;
    #line 5997 
    case 2: 
            #line 5997 
    ;
    #line 5998 
    if (((int)(priv->ieee)->sec.flags & 16) != 0) 
                                                  #line 5999 
                                                  ipw_send_tgi_tx_key(priv,12,(int)(priv->ieee)->sec.active_key);
    #line 6002 
    break;
    #line 6003 
    case 1: 
            #line 6003 
    ;
    #line 6004 
    ipw_send_wep_keys(priv,0);
    #line 6005 
    ipw_set_hw_decrypt_unicast(priv,(int)(priv->ieee)->sec.level);
    #line 6006 
    ipw_set_hw_decrypt_multicast(priv,(int)(priv->ieee)->sec.level);
    #line 6007 
    break;
    #line 6008 
    case 0: 
            #line 6008 
    ;
    #line 6009 
    default: 
             #line 6009 
    ;
    #line 6010 
    break;
  }
  #line 6012 
  return;
}

#line 6014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_adhoc_check(void *data)
{
  #line 6018 
  u32 tmp_1;
  #line 6016 
  struct ipw_priv *priv = (struct ipw_priv *)data;
  #line 6018 
  tmp_1 = priv->missed_adhoc_beacons;
  #line 6018 
  (priv->missed_adhoc_beacons) ++;
  #line 6018 
  ;
  #line 6018 
  if (tmp_1 > priv->disassociate_threshold) 
    #line 6018 
    if ((priv->config & 32U) == 0U) {
      #line 6020 
      if ((ipw_debug_level & 5188U) != 0U) {
        #line 6020 
        int tmp_0;
        #line 6020 
        ;
        #line 6020 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 6020 
                                                                 tmp_0 = 73; else 
                                                                    #line 6020 
                                                                    tmp_0 = 85;
        #line 6020 
        printk((char *)"\001",tmp_0,(char *)"ipw_adhoc_check",priv->missed_adhoc_beacons);
      }
      #line 6024 
      ipw_remove_current_network(priv);
      #line 6025 
      ipw_disassociate((void *)priv);
      #line 6026 
      return;
    }
  #line 6029 
  cif_schedule_delayed_work(& priv->adhoc_check,(unsigned long)priv->assoc_request.beacon_interval);
  #line 6031 
  return;
}

#line 6033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_adhoc_check(struct work_struct *work)
{
  #line 6036 
  void *__mptr;
  #line 6036 
  __mptr = (void *)work;
  #line 6035 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709547792U));
  #line 6037 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 6038 
  ipw_adhoc_check((void *)priv);
  #line 6039 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 6040 
  return;
}

#line 6042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_debug_config(struct ipw_priv *priv)
{
  #line 6044 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 6044 
    int tmp_0;
    #line 6044 
    ;
    #line 6044 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6044 
                                                             tmp_0 = 73; else 
                                                                    #line 6044 
                                                                    tmp_0 = 85;
    #line 6044 
    printk((char *)"\001",tmp_0,(char *)"ipw_debug_config",priv->config);
  }
  #line 6046 
  if ((priv->config & 1U) != 0U) {
    #line 6047 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6047 
      int tmp_2;
      #line 6047 
      ;
      #line 6047 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6047 
                                                               tmp_2 = 73; else 
                                                                    #line 6047 
                                                                    tmp_2 = 85;
      #line 6047 
      printk((char *)"\001",tmp_2,(char *)"ipw_debug_config",(int)priv->channel);
    }
  }
  else 
    #line 6049 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6049 
      int tmp_4;
      #line 6049 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6049 
                                                               tmp_4 = 73; else 
                                                                    #line 6049 
                                                                    tmp_4 = 85;
      #line 6049 
      printk((char *)"\001",tmp_4,(char *)"ipw_debug_config");
    }
  #line 6050 
  if ((priv->config & 2U) != 0U) {
    #line 6051 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6051 
      int tmp_6;
      #line 6051 
      ;
      #line 6051 
      ;
      #line 6051 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6051 
                                                               tmp_6 = 73; else 
                                                                    #line 6051 
                                                                    tmp_6 = 85;
      #line 6051 
      printk((char *)"\001",tmp_6,(char *)"ipw_debug_config",(int)priv->essid_len,(u8 *)(& priv->essid));
    }
  }
  else 
    #line 6054 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6054 
      int tmp_8;
      #line 6054 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6054 
                                                               tmp_8 = 73; else 
                                                                    #line 6054 
                                                                    tmp_8 = 85;
      #line 6054 
      printk((char *)"\001",tmp_8,(char *)"ipw_debug_config");
    }
  #line 6055 
  if ((priv->config & 4U) != 0U) {
    #line 6056 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6056 
      int tmp_10;
      #line 6056 
      ;
      #line 6056 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6056 
                                                               tmp_10 = 73; else 
                                                                    #line 6056 
                                                                    tmp_10 = 85;
      #line 6056 
      printk((char *)"\001",tmp_10,(char *)"ipw_debug_config",(u8 *)(& priv->bssid));
    }
  }
  else 
    #line 6058 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6058 
      int tmp_12;
      #line 6058 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6058 
                                                               tmp_12 = 73; else 
                                                                    #line 6058 
                                                                    tmp_12 = 85;
      #line 6058 
      printk((char *)"\001",tmp_12,(char *)"ipw_debug_config");
    }
  #line 6059 
  if ((priv->capability & 2U) != 0U) {
    #line 6060 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6060 
      int tmp_14;
      #line 6060 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6060 
                                                               tmp_14 = 73; else 
                                                                    #line 6060 
                                                                    tmp_14 = 85;
      #line 6060 
      printk((char *)"\001",tmp_14,(char *)"ipw_debug_config");
    }
  }
  else 
    #line 6062 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 6062 
      int tmp_16;
      #line 6062 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6062 
                                                               tmp_16 = 73; else 
                                                                    #line 6062 
                                                                    tmp_16 = 85;
      #line 6062 
      printk((char *)"\001",tmp_16,(char *)"ipw_debug_config");
    }
  #line 6063 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 6063 
    int tmp_18;
    #line 6063 
    ;
    #line 6063 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6063 
                                                             tmp_18 = 73; else 
                                                                    #line 6063 
                                                                    tmp_18 = 85;
    #line 6063 
    printk((char *)"\001",tmp_18,(char *)"ipw_debug_config",(int)priv->rates_mask);
  }
  #line 6064 
  return;
}

#line 6066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_set_fixed_rate(struct ipw_priv *priv, int mode)
{
  #line 6069 
  struct ipw_fixed_rate fr;
  #line 6070 
  u32 reg;
  #line 6071 
  u16 mask = (unsigned short)0U;
  #line 6072 
  u16 new_tx_rates = priv->rates_mask;
  #line 6077 
  switch ((priv->ieee)->freq_band) {
    #line 6078 
    case 2: 
            #line 6078 
    ;
    #line 6080 
    if (((int)priv->rates_mask & -4081) != 0) {
      #line 6082 
      if ((ipw_debug_level & 8U) != 0U) {
        #line 6082 
        int tmp_0;
        #line 6082 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 6082 
                                                                 tmp_0 = 73; else 
                                                                    #line 6082 
                                                                    tmp_0 = 85;
        #line 6082 
        printk((char *)"\001",tmp_0,(char *)"ipw_set_fixed_rate");
      }
      #line 6084 
      new_tx_rates = (unsigned short)0U;
      #line 6085 
      break;
    }
    #line 6088 
    new_tx_rates = (unsigned short)((int)new_tx_rates >> 4);
    #line 6089 
    break;
    #line 6091 
    default: 
             #line 6091 
    ;
    #line 6093 
    if (mode == 2) {
      #line 6094 
      if (((int)new_tx_rates & -16) != 0) {
        #line 6096 
        if ((ipw_debug_level & 8U) != 0U) {
          #line 6096 
          int tmp_2;
          #line 6096 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 6096 
                                                                   tmp_2 = 73; else 
                                                                    #line 6096 
                                                                    tmp_2 = 85;
          #line 6096 
          printk((char *)"\001",tmp_2,(char *)"ipw_set_fixed_rate");
        }
        #line 6098 
        new_tx_rates = (unsigned short)0U;
      }
      #line 6100 
      break;
    }
    #line 6104 
    if (((int)new_tx_rates & -4096) != 0) {
      #line 6107 
      if ((ipw_debug_level & 8U) != 0U) {
        #line 6107 
        int tmp_4;
        #line 6107 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 6107 
                                                                 tmp_4 = 73; else 
                                                                    #line 6107 
                                                                    tmp_4 = 85;
        #line 6107 
        printk((char *)"\001",tmp_4,(char *)"ipw_set_fixed_rate");
      }
      #line 6109 
      new_tx_rates = (unsigned short)0U;
      #line 6110 
      break;
    }
    #line 6113 
    if (((unsigned int)new_tx_rates & 16U) != 0U) {
      #line 6114 
      mask = (unsigned short)((unsigned int)mask | 8U);
      #line 6115 
      new_tx_rates = (unsigned short)((unsigned int)new_tx_rates & 65519U);
    }
    #line 6118 
    if (((unsigned int)new_tx_rates & 32U) != 0U) {
      #line 6119 
      mask = (unsigned short)((unsigned int)mask | 16U);
      #line 6120 
      new_tx_rates = (unsigned short)((unsigned int)new_tx_rates & 65503U);
    }
    #line 6123 
    if (((unsigned int)new_tx_rates & 64U) != 0U) {
      #line 6124 
      mask = (unsigned short)((unsigned int)mask | 32U);
      #line 6125 
      new_tx_rates = (unsigned short)((unsigned int)new_tx_rates & 65471U);
    }
    #line 6128 
    new_tx_rates = (unsigned short)((int)new_tx_rates | (int)mask);
    #line 6129 
    break;
  }
  #line 6132 
  fr.tx_rates = new_tx_rates;
  #line 6134 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 6134 
    int tmp_6;
    #line 6134 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6134 
                                                             tmp_6 = 73; else 
                                                                    #line 6134 
                                                                    tmp_6 = 85;
    #line 6134 
    printk((char *)"\001",tmp_6,(char *)"ipw_set_fixed_rate",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",6134,1564U);
  }
  #line 6134 
  reg = _ipw_read32(priv,1564UL);
  #line 6135 
  ipw_write_reg32(priv,reg,*((u32 *)(& fr)));
  #line 6136 
  return;
}

#line 6138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_abort_scan(struct ipw_priv *priv)
{
  #line 6140 
  int err;
  #line 6142 
  if ((priv->status & 4194304U) != 0U) {
    #line 6143 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 6143 
      int tmp_0;
      #line 6143 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6143 
                                                               tmp_0 = 73; else 
                                                                    #line 6143 
                                                                    tmp_0 = 85;
      #line 6143 
      printk((char *)"\001",tmp_0,(char *)"ipw_abort_scan");
    }
    #line 6144 
    return;
  }
  #line 6146 
  priv->status |= 4194304U;
  #line 6148 
  err = ipw_send_scan_abort(priv);
  #line 6149 
  if (err != 0) 
    #line 6150 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 6150 
      int tmp_2;
      #line 6150 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6150 
                                                               tmp_2 = 73; else 
                                                                    #line 6150 
                                                                    tmp_2 = 85;
      #line 6150 
      printk((char *)"\001",tmp_2,(char *)"ipw_abort_scan");
    }
  #line 6151 
  return;
}

#line 6153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_add_scan_channels(struct ipw_priv *priv, struct ipw_scan_request_ext *scan, int scan_type)
{
  #line 6158 
  struct libipw_geo *geo;
  #line 6159 
  int i;
  #line 6157 
  int channel_index = 0;
  #line 6161 
  geo = libipw_get_geo(priv->ieee);
  #line 6163 
  if (((priv->ieee)->freq_band & 2) != 0) {
    #line 6164 
    int start = channel_index;
    #line 6165 
    i = 0;
    #line 6165 
    while ((int)geo->a_channels > i) {
      {
        #line 6171 
        int tmp;
        #line 6166 
        if ((priv->status & 128U) != 0U && (int)geo->a[i].channel == (int)priv->channel) 
          #line 6168 
          goto __Cont;
        #line 6169 
        channel_index ++;
        #line 6170 
        scan->channels_list[channel_index] = geo->a[i].channel;
        #line 6171 
        if (((int)geo->a[i].flags & 1) == 0) 
                                             #line 6171 
                                             tmp = (int)((unsigned char)scan_type); else 
                                                                    #line 6171 
                                                                    tmp = 1;
        #line 6171 
        ;
        #line 6171 
        ;
        #line 6171 
        ipw_set_scan_type(scan,(unsigned char)((int)((unsigned char)channel_index)),(unsigned char)tmp);
      }
      #line 6165 
      __Cont: 
              #line 6165 
      i ++;
    }
    #line 6178 
    if (start != channel_index) {
      #line 6179 
      scan->channels_list[start] = (unsigned char)((int)((unsigned char)channel_index) - (int)((unsigned char)start));
      #line 6181 
      channel_index ++;
    }
  }
  #line 6185 
  if (((priv->ieee)->freq_band & 1) != 0) {
    #line 6186 
    int start_0 = channel_index;
    #line 6187 
    if ((priv->config & 2048U) != 0U) {
      #line 6188 
      int index;
      #line 6194 
      u8 channel;
      #line 6189 
      u8 channels[14U] = {(unsigned char)0U};
      #line 6195 
      while (channel_index <= 52) {
        #line 6222 
        int tmp_0;
        #line 6196 
        channel = priv->speed_scan[(int)priv->speed_scan_pos];
        #line 6198 
        if ((unsigned int)channel == 0U) {
          #line 6199 
          priv->speed_scan_pos = (unsigned char)0U;
          #line 6200 
          channel = priv->speed_scan[0];
        }
        #line 6202 
        if ((priv->status & 128U) != 0U && (int)priv->channel == (int)channel) {
          #line 6204 
          priv->speed_scan_pos = (u8)((int)priv->speed_scan_pos + 1);
          #line 6205 
          continue;
        }
        #line 6213 
        if ((unsigned int)channels[(int)channel + -1] != 0U) 
                                                             #line 6214 
                                                             break;
        #line 6216 
        channels[(int)channel + -1] = (unsigned char)1U;
        #line 6217 
        priv->speed_scan_pos = (u8)((int)priv->speed_scan_pos + 1);
        #line 6218 
        channel_index ++;
        #line 6219 
        scan->channels_list[channel_index] = channel;
        #line 6220 
        index = libipw_channel_to_index(priv->ieee,(unsigned char)((int)channel));
        #line 6222 
        if (((int)geo->bg[index].flags & 1) == 0) 
                                                  #line 6222 
                                                  tmp_0 = (int)((unsigned char)scan_type); else 
                                                                    #line 6222 
                                                                    tmp_0 = 1;
        #line 6222 
        ;
        #line 6222 
        ;
        #line 6222 
        ipw_set_scan_type(scan,(unsigned char)((int)((unsigned char)channel_index)),(unsigned char)tmp_0);
      }
    }
    else {
      #line 6230 
      i = 0;
      #line 6230 
      while ((int)geo->bg_channels > i) {
        {
          #line 6237 
          int tmp_1;
          #line 6231 
          if ((priv->status & 128U) != 0U && (int)geo->bg[i].channel == (int)priv->channel) 
            #line 6233 
            goto __Cont_0;
          #line 6234 
          channel_index ++;
          #line 6235 
          scan->channels_list[channel_index] = geo->bg[i].channel;
          #line 6237 
          if (((int)geo->bg[i].flags & 1) == 0) 
                                                #line 6237 
                                                tmp_1 = (int)((unsigned char)scan_type); else 
                                                                    #line 6237 
                                                                    tmp_1 = 1;
          #line 6237 
          ;
          #line 6237 
          ;
          #line 6237 
          ipw_set_scan_type(scan,(unsigned char)((int)((unsigned char)channel_index)),(unsigned char)tmp_1);
        }
        #line 6230 
        __Cont_0: 
                  #line 6230 
        i ++;
      }
    }
    #line 6246 
    if (start_0 != channel_index) 
                                  #line 6247 
                                  scan->channels_list[start_0] = (unsigned char)((channel_index - start_0) | 64);
  }
  #line 6249 
  return;
}

#line 6253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_passive_dwell_time(struct ipw_priv *priv)
{
  #line 6260 
  if ((priv->status & 128U) != 0U && (unsigned int)(priv->assoc_network)->beacon_interval > 10U) 
    #line 6262 
    return (int)(priv->assoc_network)->beacon_interval + -10; else 
                                                                   #line 6264 
                                                                   return 120;
}

#line 6267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_request_scan_helper(struct ipw_priv *priv, int type, int direct)
{
  #line 6269 
  struct ipw_scan_request_ext scan;
  #line 6270 
  int scan_type;
  #line 6270 
  int err = 0;
  #line 6272 
  if ((priv->status & 32U) == 0U || (priv->status & 2048U) != 0U) 
                                                                  #line 6274 
                                                                  return 0;
  #line 6276 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 6278 
  if (direct != 0 && (unsigned int)priv->direct_scan_ssid_len == 0U) {
    #line 6279 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 6279 
      int tmp_0;
      #line 6279 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6279 
                                                               tmp_0 = 73; else 
                                                                    #line 6279 
                                                                    tmp_0 = 85;
      #line 6279 
      printk((char *)"\001",tmp_0,(char *)"ipw_request_scan_helper");
    }
    #line 6280 
    priv->status &= 4294443007U;
    #line 6281 
    goto done;
  }
  #line 6284 
  if ((priv->status & 2097152U) != 0U) {
    #line 6286 
    unsigned int tmp_3;
    #line 6285 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 6285 
      int tmp_2;
      #line 6285 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6285 
                                                               tmp_2 = 73; else 
                                                                    #line 6285 
                                                                    tmp_2 = 85;
      #line 6285 
      printk((char *)"\001",tmp_2,(char *)"ipw_request_scan_helper");
    }
    #line 6286 
    if (direct != 0) 
                     #line 6286 
                     tmp_3 = 524288U; else 
                                           #line 6286 
                                           tmp_3 = 1048576U;
    #line 6286 
    priv->status |= tmp_3;
    #line 6288 
    goto done;
  }
  #line 6291 
  if ((priv->status & 8388608U) == 0U && (priv->status & 4194304U) != 0U) {
    #line 6294 
    unsigned int tmp_6;
    #line 6293 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 6293 
      int tmp_5;
      #line 6293 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6293 
                                                               tmp_5 = 73; else 
                                                                    #line 6293 
                                                                    tmp_5 = 85;
      #line 6293 
      printk((char *)"\001",tmp_5,(char *)"ipw_request_scan_helper");
    }
    #line 6294 
    if (direct != 0) 
                     #line 6294 
                     tmp_6 = 524288U; else 
                                           #line 6294 
                                           tmp_6 = 1048576U;
    #line 6294 
    priv->status |= tmp_6;
    #line 6296 
    goto done;
  }
  #line 6299 
  if ((priv->status & 12U) != 0U) {
    #line 6301 
    unsigned int tmp_9;
    #line 6300 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 6300 
      int tmp_8;
      #line 6300 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6300 
                                                               tmp_8 = 73; else 
                                                                    #line 6300 
                                                                    tmp_8 = 85;
      #line 6300 
      printk((char *)"\001",tmp_8,(char *)"ipw_request_scan_helper");
    }
    #line 6301 
    if (direct != 0) 
                     #line 6301 
                     tmp_9 = 524288U; else 
                                           #line 6301 
                                           tmp_9 = 1048576U;
    #line 6301 
    priv->status |= tmp_9;
    #line 6303 
    goto done;
  }
  #line 6306 
  memset((void *)(& scan),0,96UL);
  #line 6307 
  scan.full_scan_index = (unsigned int)libipw_get_scans(priv->ieee);
  #line 6309 
  if (type == 1) {
    #line 6310 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 6310 
      int tmp_12;
      #line 6310 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6310 
                                                               tmp_12 = 73; else 
                                                                    #line 6310 
                                                                    tmp_12 = 85;
      #line 6310 
      printk((char *)"\001",tmp_12,(char *)"ipw_request_scan_helper");
    }
    #line 6311 
    scan_type = 1;
    #line 6312 
    scan.dwell_time[1] = (unsigned short)ipw_passive_dwell_time(priv);
    #line 6314 
    ipw_add_scan_channels(priv,& scan,scan_type);
    #line 6315 
    goto send_request;
  }
  #line 6319 
  if ((priv->config & 2048U) != 0U) 
                                    #line 6320 
                                    scan.dwell_time[3] = (unsigned short)30U; else 
                                                                    #line 6323 
                                                                    scan.dwell_time[3] = (unsigned short)20U;
  #line 6326 
  scan.dwell_time[4] = (unsigned short)20U;
  #line 6329 
  scan.dwell_time[1] = (unsigned short)ipw_passive_dwell_time(priv);
  #line 6331 
  scan.dwell_time[2] = (unsigned short)20U;
  #line 6334 
  if ((priv->ieee)->iw_mode == 6) {
    #line 6335 
    u8 channel;
    #line 6336 
    u8 band = (unsigned char)0U;
    #line 6338 
    switch (libipw_is_valid_channel(priv->ieee,
                                 (unsigned char)((int)priv->channel))) {
      #line 6339 
      case 2: 
              #line 6339 
      ;
      #line 6340 
      band = (unsigned char)1U;
      #line 6341 
      channel = priv->channel;
      #line 6342 
      break;
      #line 6344 
      case 1: 
              #line 6344 
      ;
      #line 6345 
      band = (unsigned char)65U;
      #line 6346 
      channel = priv->channel;
      #line 6347 
      break;
      #line 6349 
      default: 
               #line 6349 
      ;
      #line 6350 
      band = (unsigned char)65U;
      #line 6351 
      channel = (unsigned char)9U;
      #line 6352 
      break;
    }
    #line 6355 
    scan.channels_list[0] = band;
    #line 6356 
    scan.channels_list[1] = channel;
    #line 6357 
    ipw_set_scan_type(& scan,(unsigned char)1,(unsigned char)1);
    #line 6367 
    scan.dwell_time[1] = (unsigned short)2000U;
  }
  else {
    #line 6374 
    if (direct != 0) {
      #line 6375 
      err = ipw_send_ssid(priv,(u8 *)(& priv->direct_scan_ssid),(int)priv->direct_scan_ssid_len);
      #line 6377 
      if (err != 0) {
        #line 6378 
        if ((ipw_debug_level & 32U) != 0U) {
          #line 6378 
          int tmp_17;
          #line 6378 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 6378 
                                                                   tmp_17 = 73; else 
                                                                    #line 6378 
                                                                    tmp_17 = 85;
          #line 6378 
          printk((char *)"\001",tmp_17,(char *)"ipw_request_scan_helper");
        }
        #line 6380 
        goto done;
      }
      #line 6383 
      scan_type = 4;
    }
    else 
      #line 6384 
      if ((priv->status & 1024U) != 0U || ((priv->status & 128U) == 0U && (priv->config & 2U) != 0U) && (scan.full_scan_index & 1U) != 0U) {
        #line 6388 
        err = ipw_send_ssid(priv,(u8 *)(& priv->essid),(int)priv->essid_len);
        #line 6389 
        if (err != 0) {
          #line 6390 
          if ((ipw_debug_level & 32U) != 0U) {
            #line 6390 
            int tmp_19;
            #line 6390 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 6390 
              tmp_19 = 73; else 
                                #line 6390 
                                tmp_19 = 85;
            #line 6390 
            printk((char *)"\001",tmp_19,(char *)"ipw_request_scan_helper");
          }
          #line 6392 
          goto done;
        }
        #line 6395 
        scan_type = 4;
      }
      else 
           #line 6397 
           scan_type = 3;
    #line 6399 
    ipw_add_scan_channels(priv,& scan,scan_type);
  }
  #line 6404 
  send_request: 
                #line 6404 
  ;
  #line 6405 
  err = ipw_send_scan_request_ext(priv,& scan);
  #line 6406 
  if (err != 0) {
    #line 6407 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 6407 
      int tmp_21;
      #line 6407 
      ;
      #line 6407 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6407 
                                                               tmp_21 = 73; else 
                                                                    #line 6407 
                                                                    tmp_21 = 85;
      #line 6407 
      printk((char *)"\001",tmp_21,(char *)"ipw_request_scan_helper",err);
    }
    #line 6408 
    goto done;
  }
  #line 6411 
  priv->status |= 2097152U;
  #line 6412 
  if (direct != 0) {
    #line 6413 
    priv->status &= 4294443007U;
    #line 6414 
    priv->direct_scan_ssid_len = (unsigned char)0U;
  }
  else 
       #line 6416 
       priv->status &= 4293918719U;
  #line 6418 
  cif_schedule_delayed_work(& priv->scan_check,1250UL);
  #line 6419 
  done: 
        #line 6419 
  ;
  #line 6420 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 6421 
  return err;
}

#line 6424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_request_passive_scan(struct work_struct *work)
{
  #line 6427 
  void *__mptr;
  #line 6427 
  __mptr = (void *)work;
  #line 6426 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709546920U));
  #line 6428 
  ipw_request_scan_helper(priv,1,0);
  #line 6429 
  return;
}

#line 6431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_request_scan(struct work_struct *work)
{
  #line 6434 
  void *__mptr;
  #line 6434 
  __mptr = (void *)work;
  #line 6433 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709547288U));
  #line 6435 
  ipw_request_scan_helper(priv,0,0);
  #line 6436 
  return;
}

#line 6438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_request_direct_scan(struct work_struct *work)
{
  #line 6441 
  void *__mptr;
  #line 6441 
  __mptr = (void *)work;
  #line 6440 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709547104U));
  #line 6442 
  ipw_request_scan_helper(priv,0,1);
  #line 6443 
  return;
}

#line 6445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_abort_scan(struct work_struct *work)
{
  #line 6448 
  void *__mptr;
  #line 6448 
  __mptr = (void *)work;
  #line 6447 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545944U));
  #line 6449 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 6450 
  ipw_abort_scan(priv);
  #line 6451 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 6452 
  return;
}

#line 6454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wpa_enable(struct ipw_priv *priv, int value)
{
  #line 6458 
  (priv->ieee)->wpa_enabled = value;
  #line 6459 
  return 0;
}

#line 6462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wpa_set_auth_algs(struct ipw_priv *priv, int value)
{
  #line 6464 
  struct libipw_device *ieee = priv->ieee;
  #line 6465 
  struct libipw_security sec = {.active_key = (unsigned short)0, .enabled = (unsigned short)0, .unicast_uses_group = (unsigned short)0, .encrypt = (unsigned short)0, .auth_mode = (unsigned char)0, .encode_alg = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .key_sizes = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .keys = {{(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}, .level = (unsigned char)0, .flags = (unsigned short)32U};
  #line 6468 
  int ret = 0;
  #line 6470 
  if ((value & 2) != 0) {
    #line 6471 
    sec.auth_mode = (unsigned char)1U;
    #line 6472 
    ieee->open_wep = 0;
  }
  else 
    #line 6473 
    if ((value & 1) != 0) {
      #line 6474 
      sec.auth_mode = (unsigned char)0U;
      #line 6475 
      ieee->open_wep = 1;
    }
    else 
      #line 6476 
      if ((value & 4) != 0) {
        #line 6477 
        sec.auth_mode = (unsigned char)128U;
        #line 6478 
        ieee->open_wep = 1;
      }
      else 
           #line 6480 
           return -22;
  #line 6482 
  if (ieee->set_security != (void (*)(struct net_device *, struct libipw_security *))0) 
    #line 6483 
    (*(ieee->set_security))(ieee->dev,& sec); else 
                                                   #line 6485 
                                                   ret = -95;
  #line 6487 
  return ret;
}

#line 6490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_wpa_assoc_frame(struct ipw_priv *priv, char *wpa_ie, int wpa_ie_len)
{
  #line 6494 
  ipw_wpa_enable(priv,1);
  #line 6495 
  return;
}

#line 6497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_set_rsn_capa(struct ipw_priv *priv, char *capabilities, int length)
{
  #line 6500 
  if ((ipw_debug_level & 32U) != 0U) {
    #line 6500 
    int tmp_0;
    #line 6500 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6500 
                                                             tmp_0 = 73; else 
                                                                    #line 6500 
                                                                    tmp_0 = 85;
    #line 6500 
    printk((char *)"\001",tmp_0,(char *)"ipw_set_rsn_capa");
  }
  #line 6502 
  return ipw_send_cmd_pdu(priv,(unsigned char)31,
                         (unsigned char)((int)((unsigned char)length)),
                         (void *)capabilities);
}

#line 6511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_genie(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6517 
  u8 *buf;
  #line 6515 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 6516 
  struct libipw_device *ieee = priv->ieee;
  #line 6518 
  int err = 0;
  #line 6520 
  if ((unsigned int)wrqu->data.length > 64U || (unsigned int)wrqu->data.length != 0U && extra == (char *)0) 
    #line 6522 
    return -22;
  #line 6524 
  if ((unsigned int)wrqu->data.length != 0U) {
    #line 6525 
    buf = (u8 *)cif_kmemdup((void *)extra,(unsigned long)wrqu->data.length,3264U);
    #line 6526 
    if (buf == (u8 *)0U) {
      #line 6527 
      err = -12;
      #line 6528 
      goto out;
    }
    #line 6531 
    kfree((void *)ieee->wpa_ie);
    #line 6532 
    ieee->wpa_ie = buf;
    #line 6533 
    ieee->wpa_ie_len = (unsigned long)wrqu->data.length;
  }
  else {
    #line 6535 
    kfree((void *)ieee->wpa_ie);
    #line 6536 
    ieee->wpa_ie = (u8 *)0U;
    #line 6537 
    ieee->wpa_ie_len = 0UL;
  }
  #line 6540 
  ipw_wpa_assoc_frame(priv,(char *)ieee->wpa_ie,(int)ieee->wpa_ie_len);
  #line 6541 
  out: 
       #line 6541 
  ;
  #line 6542 
  return err;
}

#line 6546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_genie(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6550 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 6551 
  struct libipw_device *ieee = priv->ieee;
  #line 6552 
  int err = 0;
  #line 6554 
  if (ieee->wpa_ie_len == 0UL || ieee->wpa_ie == (u8 *)0U) {
    #line 6555 
    wrqu->data.length = (unsigned short)0U;
    #line 6556 
    goto out;
  }
  #line 6559 
  if ((unsigned long)wrqu->data.length < ieee->wpa_ie_len) {
    #line 6560 
    err = -7;
    #line 6561 
    goto out;
  }
  #line 6564 
  wrqu->data.length = (unsigned short)ieee->wpa_ie_len;
  #line 6565 
  memcpy((void *)extra,(void *)ieee->wpa_ie,ieee->wpa_ie_len);
  #line 6567 
  out: 
       #line 6567 
  ;
  #line 6568 
  return err;
}

#line 6571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int wext_cipher2level(int cipher)
{
  #line 6573 
  switch (cipher) {
    #line 6574 
    case 1: 
            #line 6574 
    ;
    #line 6575 
    return 0;
    #line 6576 
    case 2: 
            #line 6576 
    ;
    #line 6577 
    case 16: 
             #line 6577 
    ;
    #line 6578 
    return 1;
    #line 6579 
    case 4: 
            #line 6579 
    ;
    #line 6580 
    return 2;
    #line 6581 
    case 8: 
            #line 6581 
    ;
    #line 6582 
    return 4;
    #line 6583 
    default: 
             #line 6583 
    ;
    #line 6584 
    return -1;
  }
}

#line 6589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_auth(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6596 
  struct lib80211_crypt_data *crypt;
  #line 6597 
  unsigned long flags;
  #line 6593 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 6594 
  struct libipw_device *ieee = priv->ieee;
  #line 6595 
  struct iw_param *param = & wrqu->param;
  #line 6598 
  int ret = 0;
  #line 6600 
  switch ((int)param->flags & 4095) {
    #line 6601 
    case 0: 
            #line 6601 
    ;
    #line 6602 
    break;
    #line 6603 
    case 1: 
            #line 6603 
    ;
    #line 6604 
    ;
    #line 6604 
    ipw_set_hw_decrypt_unicast(priv,wext_cipher2level(param->value));
    #line 6606 
    break;
    #line 6607 
    case 2: 
            #line 6607 
    ;
    #line 6608 
    ;
    #line 6608 
    ipw_set_hw_decrypt_multicast(priv,wext_cipher2level(param->value));
    #line 6610 
    break;
    #line 6611 
    case 3: 
            #line 6611 
    ;
    #line 6615 
    break;
    #line 6617 
    case 4: 
            #line 6617 
    ;
    #line 6618 
    crypt = (priv->ieee)->crypt_info.crypt[(priv->ieee)->crypt_info.tx_keyidx];
    #line 6619 
    if ((crypt == (struct lib80211_crypt_data *)0 || (crypt->ops)->set_flags == (unsigned long (*)(unsigned long , void *))0) || (crypt->ops)->get_flags == (unsigned long (*)(void *))0) 
      #line 6620 
      break;
    #line 6622 
    flags = (*((crypt->ops)->get_flags))(crypt->priv);
    #line 6624 
    if (param->value != 0) 
                           #line 6625 
                           flags |= 1UL; else 
                                              #line 6627 
                                              flags &= 18446744073709551614UL;
    #line 6629 
    (*((crypt->ops)->set_flags))(flags,crypt->priv);
    #line 6631 
    break;
    #line 6633 
    case 5: 
            #line 6633 
    ;
    {
      #line 6645 
      struct libipw_security sec = {.active_key = (unsigned short)0, .enabled = (unsigned short)param->value, .unicast_uses_group = (unsigned short)0, .encrypt = (unsigned short)0, .auth_mode = (unsigned char)0, .encode_alg = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .key_sizes = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .keys = {{(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}, .level = (unsigned char)0, .flags = (unsigned short)256U};
      #line 6649 
      (priv->ieee)->drop_unencrypted = param->value;
      #line 6653 
      if (param->value == 0) {
        #line 6654 
        sec.flags = (unsigned short)((unsigned int)sec.flags | 128U);
        #line 6655 
        sec.level = (unsigned char)0U;
      }
      else {
        #line 6657 
        sec.flags = (unsigned short)((unsigned int)sec.flags | 128U);
        #line 6658 
        sec.level = (unsigned char)1U;
      }
      #line 6660 
      if ((priv->ieee)->set_security != (void (*)(struct net_device *, struct libipw_security *))0) 
        #line 6661 
        (*((priv->ieee)->set_security))((priv->ieee)->dev,& sec);
      #line 6662 
      break;
    }
    #line 6665 
    case 6: 
            #line 6665 
    ;
    #line 6666 
    ret = ipw_wpa_set_auth_algs(priv,param->value);
    #line 6667 
    break;
    #line 6669 
    case 7: 
            #line 6669 
    ;
    #line 6670 
    ret = ipw_wpa_enable(priv,param->value);
    #line 6671 
    ipw_disassociate((void *)priv);
    #line 6672 
    break;
    #line 6674 
    case 8: 
            #line 6674 
    ;
    #line 6675 
    ieee->ieee802_1x = param->value;
    #line 6676 
    break;
    #line 6678 
    case 10: 
             #line 6678 
    ;
    #line 6679 
    ieee->privacy_invoked = param->value;
    #line 6680 
    break;
    #line 6682 
    default: 
             #line 6682 
    ;
    #line 6683 
    return -95;
  }
  #line 6685 
  return ret;
}

#line 6689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_auth(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6695 
  struct lib80211_crypt_data *crypt;
  #line 6693 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 6694 
  struct libipw_device *ieee = priv->ieee;
  #line 6696 
  struct iw_param *param = & wrqu->param;
  #line 6698 
  switch ((int)param->flags & 4095) {
    #line 6699 
    case 0: 
            #line 6699 
    ;
    #line 6700 
    case 1: 
            #line 6700 
    ;
    #line 6701 
    case 2: 
            #line 6701 
    ;
    #line 6702 
    case 3: 
            #line 6702 
    ;
    #line 6706 
    return -95;
    #line 6708 
    case 4: 
            #line 6708 
    ;
    #line 6709 
    crypt = (priv->ieee)->crypt_info.crypt[(priv->ieee)->crypt_info.tx_keyidx];
    #line 6710 
    if (crypt == (struct lib80211_crypt_data *)0 || (crypt->ops)->get_flags == (unsigned long (*)(void *))0) 
      #line 6711 
      break;
    #line 6713 
    param->value = ((*((crypt->ops)->get_flags))(crypt->priv) & 1UL) != 0UL;
    #line 6716 
    break;
    #line 6718 
    case 5: 
            #line 6718 
    ;
    #line 6719 
    param->value = ieee->drop_unencrypted;
    #line 6720 
    break;
    #line 6722 
    case 6: 
            #line 6722 
    ;
    #line 6723 
    param->value = (int)ieee->sec.auth_mode;
    #line 6724 
    break;
    #line 6726 
    case 7: 
            #line 6726 
    ;
    #line 6727 
    param->value = ieee->wpa_enabled;
    #line 6728 
    break;
    #line 6730 
    case 8: 
            #line 6730 
    ;
    #line 6731 
    param->value = ieee->ieee802_1x;
    #line 6732 
    break;
    #line 6734 
    case 9: 
            #line 6734 
    ;
    #line 6735 
    case 10: 
             #line 6735 
    ;
    #line 6736 
    param->value = ieee->privacy_invoked;
    #line 6737 
    break;
    #line 6739 
    default: 
             #line 6739 
    ;
    #line 6740 
    return -95;
  }
  #line 6742 
  return 0;
}

#line 6746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_encodeext(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6750 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 6751 
  struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
  #line 6753 
  if (hwcrypto != 0) 
    #line 6754 
    if ((unsigned int)ext->alg == 2U) 
      #line 6757 
      if ((ext->ext_flags & 4U) != 0U) 
                                       #line 6758 
                                       (priv->ieee)->host_mc_decrypt = 1;
      else {
        #line 6760 
        (priv->ieee)->host_encrypt = 0;
        #line 6761 
        (priv->ieee)->host_encrypt_msdu = 1;
        #line 6762 
        (priv->ieee)->host_decrypt = 1;
      }
    else {
      #line 6765 
      (priv->ieee)->host_encrypt = 0;
      #line 6766 
      (priv->ieee)->host_encrypt_msdu = 0;
      #line 6767 
      (priv->ieee)->host_decrypt = 0;
      #line 6768 
      (priv->ieee)->host_mc_decrypt = 0;
    }
  #line 6772 
  return libipw_wx_set_encodeext(priv->ieee,info,wrqu,extra);
}

#line 6776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_encodeext(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6780 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 6781 
  return libipw_wx_get_encodeext(priv->ieee,info,wrqu,extra);
}

#line 6785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_mlme(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 6789 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 6790 
  struct iw_mlme *mlme = (struct iw_mlme *)extra;
  #line 6792 
  switch ((int)mlme->cmd) {
    #line 6793 
    case 0: 
            #line 6793 
    ;
    #line 6795 
    break;
    #line 6797 
    case 1: 
            #line 6797 
    ;
    #line 6798 
    ipw_disassociate((void *)priv);
    #line 6799 
    break;
    #line 6801 
    default: 
             #line 6801 
    ;
    #line 6802 
    return -95;
  }
  #line 6804 
  return 0;
}

#line 6814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u8 ipw_qos_current_mode(struct ipw_priv *priv)
{
  #line 6816 
  u8 mode = (unsigned char)0U;
  #line 6818 
  if ((priv->status & 128U) != 0U) {
    #line 6819 
    unsigned long flags;
    #line 6821 
    cif___ldv_spin_lock_lock_of_libipw_device(& (priv->ieee)->lock);
    #line 6822 
    mode = (priv->assoc_network)->mode;
    #line 6823 
    cif_spin_unlock_irqrestore_lock_of_libipw_device(& (priv->ieee)->lock,flags);
  }
  else 
       #line 6825 
       mode = (unsigned char)(priv->ieee)->mode;
  #line 6827 
  if ((ipw_debug_level & 2147483648U) != 0U) {
    #line 6827 
    int tmp_0;
    #line 6827 
    ;
    #line 6827 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6827 
                                                             tmp_0 = 73; else 
                                                                    #line 6827 
                                                                    tmp_0 = 85;
    #line 6827 
    printk((char *)"\001",tmp_0,(char *)"ipw_qos_current_mode",(int)mode);
  }
  #line 6828 
  return mode;
}

#line 6834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_qos_handle_probe_response(struct ipw_priv *priv, int active_network, struct libipw_network *network)
{
  #line 6838 
  u32 size = 32U;
  #line 6840 
  if (((int)network->capability & 2) != 0) 
                                           #line 6841 
                                           network->qos_data.active = network->qos_data.supported;
  #line 6843 
  if ((network->flags & 24U) != 0U) {
    #line 6844 
    if (active_network != 0 && (network->flags & 8U) != 0U) 
                                                            #line 6846 
                                                            network->qos_data.active = network->qos_data.supported;
    #line 6848 
    if (((network->qos_data.active == 1 && active_network == 1) && (network->flags & 8U) != 0U) && (int)network->qos_data.old_param_count != (int)network->qos_data.param_count) {
      #line 6852 
      network->qos_data.old_param_count = network->qos_data.param_count;
      #line 6854 
      cif_schedule_work(& priv->qos_activate);
      #line 6855 
      if ((ipw_debug_level & 2147483648U) != 0U) {
        #line 6855 
        int tmp_0;
        #line 6855 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 6855 
                                                                 tmp_0 = 73; else 
                                                                    #line 6855 
                                                                    tmp_0 = 85;
        #line 6855 
        printk((char *)"\001",tmp_0,(char *)"ipw_qos_handle_probe_response");
      }
    }
  }
  else {
    #line 6859 
    if ((priv->ieee)->mode == 2 || (unsigned int)network->mode == 2U) 
      #line 6860 
      memcpy((void *)(& network->qos_data.parameters),(void *)(& def_parameters_CCK),(unsigned long)size); else 
                                                                    #line 6863 
                                                                    memcpy((void *)(& network->qos_data.parameters),(void *)(& def_parameters_OFDM),(unsigned long)size);
    #line 6866 
    if (network->qos_data.active == 1 && active_network == 1) {
      #line 6867 
      if ((ipw_debug_level & 2147483648U) != 0U) {
        #line 6867 
        int tmp_2;
        #line 6867 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 6867 
                                                                 tmp_2 = 73; else 
                                                                    #line 6867 
                                                                    tmp_2 = 85;
        #line 6867 
        printk((char *)"\001",tmp_2,(char *)"ipw_qos_handle_probe_response");
      }
      #line 6868 
      cif_schedule_work(& priv->qos_activate);
    }
    #line 6871 
    network->qos_data.active = 0;
    #line 6872 
    network->qos_data.supported = 0;
  }
  #line 6874 
  if (((priv->status & 128U) != 0U && (priv->ieee)->iw_mode == 1) && active_network == 0) {
    #line 6876 
    if (! ether_addr_equal((u8 *)(& network->bssid),(u8 *)(& priv->bssid))) 
      #line 6877 
      if (((int)network->capability & 2) != 0) 
        #line 6878 
        if ((int)network->ssid_len == (int)(priv->assoc_network)->ssid_len) {
          #line 6879 
          if (memcmp((void *)(& network->ssid),
               (void *)(& (priv->assoc_network)->ssid),
               (unsigned long)network->ssid_len) == 0) 
            #line 6883 
            cif_schedule_work(& priv->merge_networks);
        }
  }
  #line 6887 
  return 0;
}

#line 6894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_qos_activate(struct ipw_priv *priv, struct libipw_qos_data *qos_network_data)
{
  #line 6897 
  int err;
  #line 6898 
  struct libipw_qos_parameters qos_parameters[3U];
  #line 6901 
  u32 burst_duration;
  #line 6902 
  int i;
  #line 6903 
  u8 type;
  #line 6899 
  struct libipw_qos_parameters *active_one = (struct libipw_qos_parameters *)0;
  #line 6900 
  u32 size = 32U;
  #line 6905 
  type = ipw_qos_current_mode(priv);
  #line 6907 
  active_one = & qos_parameters[1];
  #line 6908 
  memcpy((void *)active_one,(void *)priv->qos_data.def_qos_parm_CCK,(unsigned long)size);
  #line 6909 
  active_one = & qos_parameters[2];
  #line 6910 
  memcpy((void *)active_one,(void *)priv->qos_data.def_qos_parm_OFDM,(unsigned long)size);
  #line 6912 
  if (qos_network_data == (struct libipw_qos_data *)0) {
    #line 6913 
    if ((unsigned int)type == 2U) {
      #line 6914 
      if ((ipw_debug_level & 2147483648U) != 0U) {
        #line 6914 
        int tmp_0;
        #line 6914 
        ;
        #line 6914 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 6914 
                                                                 tmp_0 = 73; else 
                                                                    #line 6914 
                                                                    tmp_0 = 85;
        #line 6914 
        printk((char *)"\001",tmp_0,(char *)"ipw_qos_activate",(int)type);
      }
      #line 6915 
      active_one = & def_parameters_CCK;
    }
    else 
         #line 6917 
         active_one = & def_parameters_OFDM;
    #line 6919 
    memcpy((void *)(qos_parameters),(void *)active_one,(unsigned long)size);
    #line 6920 
    burst_duration = ipw_qos_get_burst_duration(priv);
    #line 6921 
    i = 0;
    #line 6921 
    while (i <= 3) {
      #line 6922 
      qos_parameters[0].tx_op_limit[i] = (unsigned short)burst_duration;
      #line 6921 
      i ++;
    }
  }
  else 
    #line 6924 
    if ((priv->ieee)->iw_mode == 1) {
      #line 6925 
      if ((unsigned int)type == 2U) {
        #line 6926 
        if ((ipw_debug_level & 2147483648U) != 0U) {
          #line 6926 
          int tmp_2;
          #line 6926 
          ;
          #line 6926 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 6926 
                                                                   tmp_2 = 73; else 
                                                                    #line 6926 
                                                                    tmp_2 = 85;
          #line 6926 
          printk((char *)"\001",tmp_2,(char *)"ipw_qos_activate",(int)type);
        }
        #line 6928 
        if (priv->qos_data.qos_enable == 0) 
                                            #line 6929 
                                            active_one = & def_parameters_CCK; else 
                                                                    #line 6931 
                                                                    active_one = priv->qos_data.def_qos_parm_CCK;
      }
      else 
        #line 6933 
        if (priv->qos_data.qos_enable == 0) 
                                            #line 6934 
                                            active_one = & def_parameters_OFDM; else 
                                                                    #line 6936 
                                                                    active_one = priv->qos_data.def_qos_parm_OFDM;
      #line 6938 
      memcpy((void *)(qos_parameters),(void *)active_one,(unsigned long)size);
    }
    else {
      #line 6940 
      unsigned long flags;
      #line 6941 
      int active;
      #line 6943 
      cif___ldv_spin_lock_lock_of_libipw_device(& (priv->ieee)->lock);
      #line 6944 
      active_one = & qos_network_data->parameters;
      #line 6945 
      qos_network_data->old_param_count = qos_network_data->param_count;
      #line 6947 
      memcpy((void *)(qos_parameters),(void *)active_one,(unsigned long)size);
      #line 6948 
      active = qos_network_data->supported;
      #line 6949 
      cif_spin_unlock_irqrestore_lock_of_libipw_device(& (priv->ieee)->lock,flags);
      #line 6951 
      if (active == 0) {
        #line 6952 
        burst_duration = ipw_qos_get_burst_duration(priv);
        #line 6953 
        i = 0;
        #line 6953 
        while (i <= 3) {
          #line 6955 
          qos_parameters[0].tx_op_limit[i] = (unsigned short)burst_duration;
          #line 6953 
          i ++;
        }
      }
    }
  #line 6959 
  if ((ipw_debug_level & 2147483648U) != 0U) {
    #line 6959 
    int tmp_4;
    #line 6959 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 6959 
                                                             tmp_4 = 73; else 
                                                                    #line 6959 
                                                                    tmp_4 = 85;
    #line 6959 
    printk((char *)"\001",tmp_4,(char *)"ipw_qos_activate");
  }
  #line 6960 
  err = ipw_send_qos_params_command(priv,qos_parameters);
  #line 6961 
  if (err != 0) 
    #line 6962 
    if ((ipw_debug_level & 2147483648U) != 0U) {
      #line 6962 
      int tmp_6;
      #line 6962 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6962 
                                                               tmp_6 = 73; else 
                                                                    #line 6962 
                                                                    tmp_6 = 85;
      #line 6962 
      printk((char *)"\001",tmp_6,(char *)"ipw_qos_activate");
    }
  #line 6964 
  return err;
}

#line 6970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_qos_set_info_element(struct ipw_priv *priv)
{
  #line 6973 
  struct libipw_qos_information_element qos_info;
  #line 6972 
  int ret = 0;
  #line 6975 
  if (priv == (struct ipw_priv *)0) 
                                    #line 6976 
                                    return -1;
  #line 6978 
  qos_info.elementID = (unsigned char)221U;
  #line 6979 
  qos_info.length = (unsigned char)7U;
  #line 6981 
  qos_info.version = (unsigned char)1U;
  #line 6982 
  qos_info.ac_info = (unsigned char)0U;
  #line 6984 
  memcpy((void *)(& qos_info.qui),(void *)(& qos_oui),3UL);
  #line 6985 
  qos_info.qui_type = (unsigned char)2U;
  #line 6986 
  qos_info.qui_subtype = (unsigned char)0U;
  #line 6988 
  ret = ipw_send_qos_info_command(priv,& qos_info);
  #line 6989 
  if (ret != 0) 
    #line 6990 
    if ((ipw_debug_level & 2147483648U) != 0U) {
      #line 6990 
      int tmp_0;
      #line 6990 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 6990 
                                                               tmp_0 = 73; else 
                                                                    #line 6990 
                                                                    tmp_0 = 85;
      #line 6990 
      printk((char *)"\001",tmp_0,(char *)"ipw_qos_set_info_element");
    }
  #line 6992 
  return ret;
}

#line 6998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_qos_association(struct ipw_priv *priv, struct libipw_network *network)
{
  #line 7001 
  int err = 0;
  #line 7002 
  struct libipw_qos_data *qos_data = (struct libipw_qos_data *)0;
  #line 7003 
  struct libipw_qos_data ibss_data = {.parameters = {.cw_min = {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0}, .cw_max = {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0}, .aifs = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .flag = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tx_op_limit = {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0}}, .active = 1, .supported = 1, .param_count = (unsigned char)0, .old_param_count = (unsigned char)0};
  #line 7008 
  switch ((priv->ieee)->iw_mode) {
    #line 7009 
    case 1: 
            #line 7009 
    ;
    #line 7010 
    if ((long)(((int)network->capability & 2) == 0) != 0L) {
      #line 7011 
      ldv_inline_asm();
      #line 7012 
      ldv_inline_asm();
      #line 7013 
      ldv_inline_asm();
      #line 7010 
      ;
    }
    #line 7012 
    qos_data = & ibss_data;
    #line 7013 
    break;
    #line 7015 
    case 2: 
            #line 7015 
    ;
    #line 7016 
    qos_data = & network->qos_data;
    #line 7017 
    break;
    #line 7019 
    default: 
             #line 7019 
    ;
    #line 7021 
    ldv_inline_asm();
    #line 7022 
    ldv_inline_asm();
    #line 7023 
    ldv_inline_asm();
    #line 7020 
    ;
    #line 7021 
    break;
  }
  #line 7024 
  err = ipw_qos_activate(priv,qos_data);
  #line 7025 
  if (err != 0) {
    #line 7026 
    priv->assoc_request.policy_support = (unsigned short)((unsigned int)priv->assoc_request.policy_support & 65534U);
    #line 7027 
    return err;
  }
  #line 7030 
  if (priv->qos_data.qos_enable != 0 && qos_data->supported != 0) {
    #line 7031 
    if ((ipw_debug_level & 2147483648U) != 0U) {
      #line 7031 
      int tmp_0;
      #line 7031 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7031 
                                                               tmp_0 = 73; else 
                                                                    #line 7031 
                                                                    tmp_0 = 85;
      #line 7031 
      printk((char *)"\001",tmp_0,(char *)"ipw_qos_association");
    }
    #line 7032 
    priv->assoc_request.policy_support = (unsigned short)((unsigned int)priv->assoc_request.policy_support | 1U);
    #line 7033 
    return ipw_qos_set_info_element(priv);
  }
  #line 7036 
  return 0;
}

#line 7044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_qos_association_resp(struct ipw_priv *priv, struct libipw_network *network)
{
  #line 7048 
  unsigned long flags;
  #line 7047 
  int ret = 0;
  #line 7049 
  u32 size = 32U;
  #line 7050 
  int set_qos_param = 0;
  #line 7052 
  if ((priv == (struct ipw_priv *)0 || network == (struct libipw_network *)0) || priv->assoc_network == (struct libipw_network *)0) 
    #line 7054 
    return ret;
  #line 7056 
  if ((priv->status & 128U) == 0U) 
                                   #line 7057 
                                   return ret;
  #line 7059 
  if ((priv->ieee)->iw_mode != 2) 
                                  #line 7060 
                                  return ret;
  #line 7062 
  cif___ldv_spin_lock_lock_of_libipw_device(& (priv->ieee)->lock);
  #line 7063 
  if ((network->flags & 8U) != 0U) {
    #line 7064 
    memcpy((void *)(& (priv->assoc_network)->qos_data),(void *)(& network->qos_data),44UL);
    #line 7066 
    (priv->assoc_network)->qos_data.active = 1;
    #line 7067 
    if ((int)network->qos_data.old_param_count != (int)network->qos_data.param_count) {
      #line 7069 
      set_qos_param = 1;
      #line 7070 
      network->qos_data.old_param_count = network->qos_data.param_count;
    }
  }
  else {
    #line 7075 
    if ((unsigned int)network->mode == 2U || (priv->ieee)->mode == 2) 
      #line 7076 
      memcpy((void *)(& (priv->assoc_network)->qos_data.parameters),(void *)(& def_parameters_CCK),(unsigned long)size); else 
                                                                    #line 7079 
                                                                    memcpy((void *)(& (priv->assoc_network)->qos_data.parameters),(void *)(& def_parameters_OFDM),(unsigned long)size);
    #line 7081 
    (priv->assoc_network)->qos_data.active = 0;
    #line 7082 
    (priv->assoc_network)->qos_data.supported = 0;
    #line 7083 
    set_qos_param = 1;
  }
  #line 7086 
  cif_spin_unlock_irqrestore_lock_of_libipw_device(& (priv->ieee)->lock,flags);
  #line 7088 
  if (set_qos_param == 1) 
                          #line 7089 
                          cif_schedule_work(& priv->qos_activate);
  #line 7091 
  return ret;
}

#line 7094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u32 ipw_qos_get_burst_duration(struct ipw_priv *priv)
{
  #line 7096 
  u32 ret = 0U;
  #line 7098 
  if (priv == (struct ipw_priv *)0) 
                                    #line 7099 
                                    return 0U;
  #line 7101 
  if (((priv->ieee)->modulation & 2) == 0) 
                                           #line 7102 
                                           ret = priv->qos_data.burst_duration_CCK; else 
                                                                    #line 7104 
                                                                    ret = priv->qos_data.burst_duration_OFDM;
  #line 7106 
  return ret;
}

#line 7112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_qos_init(struct ipw_priv *priv, int enable, int burst_enable, u32 burst_duration_CCK_0, u32 burst_duration_OFDM_0)
{
  #line 7116 
  priv->qos_data.qos_enable = enable;
  #line 7118 
  if (priv->qos_data.qos_enable != 0) {
    #line 7119 
    priv->qos_data.def_qos_parm_CCK = & def_qos_parameters_CCK;
    #line 7120 
    priv->qos_data.def_qos_parm_OFDM = & def_qos_parameters_OFDM;
    #line 7121 
    if ((ipw_debug_level & 2147483648U) != 0U) {
      #line 7121 
      int tmp_0;
      #line 7121 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7121 
                                                               tmp_0 = 73; else 
                                                                    #line 7121 
                                                                    tmp_0 = 85;
      #line 7121 
      printk((char *)"\001",tmp_0,(char *)"ipw_qos_init");
    }
  }
  else {
    #line 7123 
    priv->qos_data.def_qos_parm_CCK = & def_parameters_CCK;
    #line 7124 
    priv->qos_data.def_qos_parm_OFDM = & def_parameters_OFDM;
    #line 7125 
    if ((ipw_debug_level & 2147483648U) != 0U) {
      #line 7125 
      int tmp_2;
      #line 7125 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7125 
                                                               tmp_2 = 73; else 
                                                                    #line 7125 
                                                                    tmp_2 = 85;
      #line 7125 
      printk((char *)"\001",tmp_2,(char *)"ipw_qos_init");
    }
  }
  #line 7128 
  priv->qos_data.burst_enable = burst_enable;
  #line 7130 
  if (burst_enable != 0) {
    #line 7131 
    priv->qos_data.burst_duration_CCK = burst_duration_CCK_0;
    #line 7132 
    priv->qos_data.burst_duration_OFDM = burst_duration_OFDM_0;
  }
  else {
    #line 7134 
    priv->qos_data.burst_duration_CCK = 0U;
    #line 7135 
    priv->qos_data.burst_duration_OFDM = 0U;
  }
  #line 7137 
  return;
}

#line 7142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_get_tx_queue_number(struct ipw_priv *priv, u16 priority)
{
  #line 7144 
  if ((unsigned int)priority > 7U || priv->qos_data.qos_enable == 0) 
    #line 7145 
    priority = (unsigned short)0U;
  #line 7147 
  return from_priority_to_tx_queue[(int)priority] + -1;
}

#line 7150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_is_qos_active(struct net_device *dev, struct sk_buff *skb)
{
  #line 7155 
  int active;
  #line 7155 
  int supported;
  #line 7157 
  int tmp_1;
  #line 7153 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 7154 
  struct libipw_qos_data *qos_data = (struct libipw_qos_data *)0;
  #line 7156 
  u8 *daddr = skb->data + 6U;
  #line 7157 
  if (is_multicast_ether_addr(daddr)) 
                                      #line 7157 
                                      tmp_1 = 0; else 
                                                      #line 7157 
                                                      tmp_1 = 1;
  #line 7157 
  int unicast = tmp_1;
  #line 7159 
  if ((priv->status & 128U) == 0U) 
                                   #line 7160 
                                   return 0;
  #line 7162 
  qos_data = & (priv->assoc_network)->qos_data;
  #line 7164 
  if ((priv->ieee)->iw_mode == 1) 
    #line 7165 
    if (unicast == 0) 
                      #line 7166 
                      qos_data->active = 0; else 
                                                 #line 7168 
                                                 qos_data->active = qos_data->supported;
  #line 7170 
  active = qos_data->active;
  #line 7171 
  supported = qos_data->supported;
  #line 7172 
  if ((ipw_debug_level & 2147483648U) != 0U) {
    #line 7172 
    int tmp_3;
    #line 7172 
    ;
    #line 7172 
    ;
    #line 7172 
    ;
    #line 7172 
    ;
    #line 7172 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7172 
                                                             tmp_3 = 73; else 
                                                                    #line 7172 
                                                                    tmp_3 = 85;
    #line 7172 
    printk((char *)"\001",tmp_3,(char *)"ipw_is_qos_active",priv->qos_data.qos_enable,active,supported,unicast);
  }
  #line 7175 
  if (active != 0 && priv->qos_data.qos_enable != 0) 
                                                     #line 7176 
                                                     return 1;
  #line 7178 
  return 0;
}

#line 7184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_qos_set_tx_queue_command(struct ipw_priv *priv, u16 priority, struct tfd_data *tfd)
{
  #line 7188 
  int tx_queue_id = 0;
  #line 7191 
  tx_queue_id = from_priority_to_tx_queue[(int)priority] + -1;
  #line 7192 
  tfd->tx_flags_ext = (unsigned char)((unsigned int)tfd->tx_flags_ext | 16U);
  #line 7194 
  if ((((unsigned long)priv->qos_data.qos_no_ack_mask >> tx_queue_id) & 1UL) != 0UL) {
    #line 7195 
    tfd->tx_flags = (unsigned char)((unsigned int)tfd->tx_flags & 127U);
    #line 7196 
    tfd->tfd.tfd_26.mchdr.qos_ctrl = (unsigned short)((unsigned int)tfd->tfd.tfd_26.mchdr.qos_ctrl | 32U);
  }
  #line 7198 
  return 0;
}

#line 7204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_qos_activate(struct work_struct *work)
{
  #line 7207 
  void *__mptr;
  #line 7207 
  __mptr = (void *)work;
  #line 7206 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709544576U));
  #line 7209 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 7211 
  if ((priv->status & 128U) != 0U) 
                                   #line 7212 
                                   ipw_qos_activate(priv,& (priv->assoc_network)->qos_data);
  #line 7214 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 7215 
  return;
}

#line 7217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_handle_probe_response(struct net_device *dev, struct libipw_probe_response *resp, struct libipw_network *network)
{
  #line 7221 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 7222 
  int active_network = ((priv->status & 128U) != 0U && priv->assoc_network == network) != 0;
  #line 7225 
  ipw_qos_handle_probe_response(priv,active_network,network);
  #line 7227 
  return 0;
}

#line 7230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_handle_beacon(struct net_device *dev, struct libipw_probe_response *resp, struct libipw_network *network)
{
  #line 7234 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 7235 
  int active_network = ((priv->status & 128U) != 0U && priv->assoc_network == network) != 0;
  #line 7238 
  ipw_qos_handle_probe_response(priv,active_network,network);
  #line 7240 
  return 0;
}

#line 7243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_handle_assoc_response(struct net_device *dev, struct libipw_assoc_response *resp, struct libipw_network *network)
{
  #line 7247 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 7248 
  ipw_qos_association_resp(priv,network);
  #line 7249 
  return 0;
}

#line 7252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_qos_params_command(struct ipw_priv *priv, struct libipw_qos_parameters *qos_param)
{
  #line 7255 
  return ipw_send_cmd_pdu(priv,(unsigned char)25,(unsigned char)96,
                       (void *)qos_param);
}

#line 7259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_send_qos_info_command(struct ipw_priv *priv, struct libipw_qos_information_element *qos_param)
{
  #line 7262 
  return ipw_send_cmd_pdu(priv,(unsigned char)84,(unsigned char)9,
                       (void *)qos_param);
}

#line 7268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_associate_network(struct ipw_priv *priv, struct libipw_network *network, struct ipw_supported_rates *rates, int roaming_0)
{
  #line 7272 
  int err;
  #line 7274 
  if ((priv->config & 128U) != 0U) 
                                   #line 7275 
                                   ipw_set_fixed_rate(priv,(int)network->mode);
  #line 7277 
  if ((priv->config & 2U) == 0U) {
    #line 7278 
    u8 __UNIQUE_ID___x495;
    #line 7278 
    int tmp;
    {
      #line 7278 
      __UNIQUE_ID___x495 = network->ssid_len;
      #line 7278 
      unsigned char __UNIQUE_ID___y496 = (unsigned char)32U;
      #line 7278 
      if ((int)__UNIQUE_ID___x495 < (int)__UNIQUE_ID___y496) 
                                                             #line 7278 
                                                             tmp = (int)__UNIQUE_ID___x495; else 
                                                                    #line 7278 
                                                                    tmp = (int)__UNIQUE_ID___y496;
      }
    #line 7278 
    priv->essid_len = (unsigned char)tmp;
    #line 7280 
    memcpy((void *)(& priv->essid),(void *)(& network->ssid),(unsigned long)priv->essid_len);
  }
  #line 7283 
  network->last_associate = (unsigned int)jiffies;
  #line 7285 
  memset((void *)(& priv->assoc_request),0,40UL);
  #line 7286 
  priv->assoc_request.channel = network->channel;
  #line 7287 
  priv->assoc_request.auth_key = (unsigned char)0U;
  #line 7289 
  if ((priv->capability & 2U) != 0U && (unsigned int)(priv->ieee)->sec.auth_mode == 1U) {
    #line 7291 
    priv->assoc_request.auth_type = (unsigned char)1U;
    #line 7292 
    priv->assoc_request.auth_key = (unsigned char)(priv->ieee)->sec.active_key;
    #line 7294 
    if ((unsigned int)(priv->ieee)->sec.level == 1U) 
                                                     #line 7295 
                                                     ipw_send_wep_keys(priv,0);
  }
  else 
    #line 7297 
    if ((priv->capability & 2U) != 0U && (unsigned int)(priv->ieee)->sec.auth_mode == 128U) 
      #line 7299 
      priv->assoc_request.auth_type = (unsigned char)2U; else 
                                                              #line 7301 
                                                              priv->assoc_request.auth_type = (unsigned char)0U;
  #line 7303 
  if ((priv->ieee)->wpa_ie_len != 0UL) {
    #line 7304 
    priv->assoc_request.policy_support = (unsigned short)2U;
    #line 7305 
    ipw_set_rsn_capa(priv,(char *)(priv->ieee)->wpa_ie,(int)(priv->ieee)->wpa_ie_len);
  }
  #line 7314 
  if ((((int)network->mode & (priv->ieee)->mode) & 1) != 0) 
                                                            #line 7315 
                                                            priv->assoc_request.ieee_mode = (unsigned char)0U;
  else 
    #line 7316 
    if ((((int)network->mode & (priv->ieee)->mode) & 4) != 0) 
                                                              #line 7317 
                                                              priv->assoc_request.ieee_mode = (unsigned char)2U;
    else 
      #line 7318 
      if ((((int)network->mode & (priv->ieee)->mode) & 2) != 0) 
                                                                #line 7319 
                                                                priv->assoc_request.ieee_mode = (unsigned char)1U;
  #line 7321 
  priv->assoc_request.capability = network->capability;
  #line 7322 
  if (((int)network->capability & 32) != 0 && (priv->config & 16U) == 0U) 
    #line 7324 
    priv->assoc_request.preamble_length = (unsigned char)4U;
  else {
    #line 7326 
    priv->assoc_request.preamble_length = (unsigned char)0U;
    #line 7329 
    priv->assoc_request.capability = (unsigned short)((unsigned int)priv->assoc_request.capability & 65503U);
  }
  #line 7334 
  if ((priv->ieee)->iw_mode == 1) 
                                  #line 7335 
                                  priv->assoc_request.capability = (unsigned short)((unsigned int)priv->assoc_request.capability & 64511U);
  #line 7338 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 7338 
    char *tmp_4;
    #line 7338 
    int tmp_1;
    #line 7338 
    int tmp_2;
    #line 7338 
    char *tmp_3;
    #line 7338 
    char *tmp_5;
    #line 7338 
    char *tmp_6;
    #line 7338 
    char *tmp_7;
    #line 7338 
    char *tmp_8;
    #line 7338 
    char *tmp_9;
    #line 7338 
    int tmp_11;
    #line 7338 
    if ((priv->capability & 2U) != 0U) 
                                       #line 7338 
                                       tmp_1 = 46; else 
                                                        #line 7338 
                                                        tmp_1 = 32;
    #line 7338 
    if ((priv->capability & 2U) != 0U) 
                                       #line 7338 
                                       tmp_2 = (int)(priv->ieee)->sec.active_key + 49; else 
                                                                    #line 7338 
                                                                    tmp_2 = 46;
    #line 7338 
    if ((priv->capability & 2U) != 0U) 
                                       #line 7338 
                                       tmp_3 = (char *)" key="; else 
                                                                  #line 7338 
                                                                  tmp_3 = (char *)"";
    #line 7338 
    if ((priv->capability & 2U) != 0U) {
      #line 7338 
      if ((priv->capability & 1U) != 0U) 
                                         #line 7338 
                                         tmp_4 = (char *)"(shared)"; else 
                                                                    #line 7338 
                                                                    tmp_4 = (char *)"(open)";
      #line 7338 
      tmp_5 = tmp_4;
    }
    else 
         #line 7338 
         tmp_5 = (char *)"";
    #line 7338 
    if ((priv->capability & 2U) != 0U) 
                                       #line 7338 
                                       tmp_6 = (char *)"on "; else 
                                                                   #line 7338 
                                                                   tmp_6 = (char *)"off";
    #line 7338 
    if (((int)network->capability & 32) != 0) 
                                              #line 7338 
                                              tmp_7 = (char *)"short"; else 
                                                                    #line 7338 
                                                                    tmp_7 = (char *)"long";
    #line 7338 
    if ((unsigned int)priv->assoc_request.preamble_length == 0U) 
                                                                 #line 7338 
                                                                 tmp_8 = (char *)"long"; else 
                                                                    #line 7338 
                                                                    tmp_8 = (char *)"short";
    #line 7338 
    ;
    #line 7338 
    ;
    #line 7338 
    ;
    #line 7338 
    ;
    #line 7338 
    ;
    #line 7338 
    if (roaming_0 != 0) 
                        #line 7338 
                        tmp_9 = (char *)"Rea"; else 
                                                    #line 7338 
                                                    tmp_9 = (char *)"A";
    #line 7338 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7338 
                                                             tmp_11 = 73; else 
                                                                    #line 7338 
                                                                    tmp_11 = 85;
    #line 7338 
    printk((char *)"\001",tmp_11,(char *)"ipw_associate_network",tmp_9,(int)priv->essid_len,(u8 *)(& priv->essid),(int)network->channel,(int)ipw_modes[(int)priv->assoc_request.ieee_mode],(int)rates->num_rates,tmp_8,tmp_7,tmp_6,tmp_5,tmp_3,tmp_2,tmp_1);
  }
  #line 7357 
  priv->assoc_request.beacon_interval = network->beacon_interval;
  #line 7358 
  if (((priv->ieee)->iw_mode == 1 && network->time_stamp[0] == 0U) && network->time_stamp[1] == 0U) {
    #line 7360 
    priv->assoc_request.assoc_type = (unsigned char)3U;
    #line 7361 
    priv->assoc_request.assoc_tsf_msw = 0U;
    #line 7362 
    priv->assoc_request.assoc_tsf_lsw = 0U;
  }
  else {
    #line 7364 
    if ((long)(roaming_0 != 0) != 0L) 
                                      #line 7365 
                                      priv->assoc_request.assoc_type = (unsigned char)1U; else 
                                                                    #line 7367 
                                                                    priv->assoc_request.assoc_type = (unsigned char)0U;
    #line 7368 
    priv->assoc_request.assoc_tsf_msw = network->time_stamp[1];
    #line 7369 
    priv->assoc_request.assoc_tsf_lsw = network->time_stamp[0];
  }
  #line 7372 
  memcpy((void *)(& priv->assoc_request.bssid),(void *)(& network->bssid),6UL);
  #line 7374 
  if ((priv->ieee)->iw_mode == 1) {
    #line 7375 
    eth_broadcast_addr((u8 *)(& priv->assoc_request.dest));
    #line 7376 
    priv->assoc_request.atim_window = network->atim_window;
  }
  else {
    #line 7378 
    memcpy((void *)(& priv->assoc_request.dest),(void *)(& network->bssid),6UL);
    #line 7379 
    priv->assoc_request.atim_window = (unsigned short)0U;
  }
  #line 7382 
  priv->assoc_request.listen_interval = network->listen_interval;
  #line 7384 
  err = ipw_send_ssid(priv,(u8 *)(& priv->essid),(int)priv->essid_len);
  #line 7385 
  if (err != 0) {
    #line 7386 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 7386 
      int tmp_13;
      #line 7386 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7386 
                                                               tmp_13 = 73; else 
                                                                    #line 7386 
                                                                    tmp_13 = 85;
      #line 7386 
      printk((char *)"\001",tmp_13,(char *)"ipw_associate_network");
    }
    #line 7387 
    return err;
  }
  #line 7390 
  rates->ieee_mode = priv->assoc_request.ieee_mode;
  #line 7391 
  rates->purpose = (unsigned char)0U;
  #line 7392 
  ipw_send_supported_rates(priv,rates);
  #line 7394 
  if ((unsigned int)priv->assoc_request.ieee_mode == 2U) 
                                                         #line 7395 
                                                         priv->sys_config.dot11g_auto_detection = (unsigned char)1U; else 
                                                                    #line 7397 
                                                                    priv->sys_config.dot11g_auto_detection = (unsigned char)0U;
  #line 7399 
  if ((priv->ieee)->iw_mode == 1) 
                                  #line 7400 
                                  priv->sys_config.answer_broadcast_ssid_probe = (unsigned char)1U; else 
                                                                    #line 7402 
                                                                    priv->sys_config.answer_broadcast_ssid_probe = (unsigned char)0U;
  #line 7404 
  err = ipw_send_system_config(priv);
  #line 7405 
  if (err != 0) {
    #line 7406 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 7406 
      int tmp_15;
      #line 7406 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7406 
                                                               tmp_15 = 73; else 
                                                                    #line 7406 
                                                                    tmp_15 = 85;
      #line 7406 
      printk((char *)"\001",tmp_15,(char *)"ipw_associate_network");
    }
    #line 7407 
    return err;
  }
  #line 7410 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 7410 
    int tmp_17;
    #line 7410 
    ;
    #line 7410 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7410 
                                                             tmp_17 = 73; else 
                                                                    #line 7410 
                                                                    tmp_17 = 85;
    #line 7410 
    printk((char *)"\001",tmp_17,(char *)"ipw_associate_network",(int)network->stats.rssi);
  }
  #line 7411 
  err = ipw_set_sensitivity(priv,(unsigned short)((int)((unsigned int)((unsigned short)network->stats.rssi) + 112U)));
  #line 7412 
  if (err != 0) {
    #line 7413 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 7413 
      int tmp_19;
      #line 7413 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7413 
                                                               tmp_19 = 73; else 
                                                                    #line 7413 
                                                                    tmp_19 = 85;
      #line 7413 
      printk((char *)"\001",tmp_19,(char *)"ipw_associate_network");
    }
    #line 7414 
    return err;
  }
  #line 7422 
  priv->channel = network->channel;
  #line 7423 
  memcpy((void *)(& priv->bssid),(void *)(& network->bssid),6UL);
  #line 7424 
  priv->status |= 256U;
  #line 7425 
  priv->status &= 2147483647U;
  #line 7427 
  priv->assoc_network = network;
  #line 7430 
  ipw_qos_association(priv,network);
  #line 7433 
  err = ipw_send_associate(priv,& priv->assoc_request);
  #line 7434 
  if (err != 0) {
    #line 7435 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 7435 
      int tmp_21;
      #line 7435 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7435 
                                                               tmp_21 = 73; else 
                                                                    #line 7435 
                                                                    tmp_21 = 85;
      #line 7435 
      printk((char *)"\001",tmp_21,(char *)"ipw_associate_network");
    }
    #line 7436 
    return err;
  }
  #line 7439 
  if ((ipw_debug_level & 64U) != 0U) {
    #line 7439 
    int tmp_23;
    #line 7439 
    ;
    #line 7439 
    ;
    #line 7439 
    ;
    #line 7439 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7439 
                                                             tmp_23 = 73; else 
                                                                    #line 7439 
                                                                    tmp_23 = 85;
    #line 7439 
    printk((char *)"\001",tmp_23,(char *)"ipw_associate_network",(int)priv->essid_len,(u8 *)(& priv->essid),(u8 *)(& priv->bssid));
  }
  #line 7442 
  return 0;
}

#line 7445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_roam(void *data)
{
  #line 7447 
  struct ipw_priv *priv = (struct ipw_priv *)data;
  #line 7448 
  struct libipw_network *network = (struct libipw_network *)0;
  #line 7449 
  struct ipw_network_match match = {.network = priv->assoc_network, .rates = {.ieee_mode = (unsigned char)0, .num_rates = (unsigned char)0, .purpose = (unsigned char)0, .reserved = (unsigned char)0, .supported_rates = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 7473 
  if ((priv->status & 1152U) == 0U) 
                                    #line 7474 
                                    return;
  #line 7476 
  if ((priv->status & 128U) != 0U) {
    #line 7483 
    void *__mptr;
    #line 7479 
    unsigned long flags;
    #line 7480 
    u8 rssi = (unsigned char)(priv->assoc_network)->stats.rssi;
    #line 7481 
    (priv->assoc_network)->stats.rssi = (signed char)(-128);
    #line 7482 
    cif___ldv_spin_lock_lock_of_libipw_device(& (priv->ieee)->lock);
    #line 7483 
    __mptr = (void *)(priv->ieee)->network_list.next;
    #line 7483 
    network = ((struct libipw_network *)(__mptr + 18446744073709551264U));
    #line 7483 
    while (& network->list != & (priv->ieee)->network_list) {
      #line 7483 
      void *__mptr_0;
      #line 7484 
      if (priv->assoc_network != network) 
                                          #line 7485 
                                          ipw_best_network(priv,& match,network,1);
      #line 7483 
      __mptr_0 = (void *)network->list.next;
      #line 7483 
      network = ((struct libipw_network *)(__mptr_0 + 18446744073709551264U));
    }
    #line 7487 
    cif_spin_unlock_irqrestore_lock_of_libipw_device(& (priv->ieee)->lock,flags);
    #line 7488 
    (priv->assoc_network)->stats.rssi = (signed char)rssi;
    #line 7490 
    if (match.network == priv->assoc_network) {
      #line 7491 
      if ((ipw_debug_level & 4100U) != 0U) {
        #line 7491 
        int tmp_2;
        #line 7491 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 7491 
                                                                 tmp_2 = 73; else 
                                                                    #line 7491 
                                                                    tmp_2 = 85;
        #line 7491 
        printk((char *)"\001",tmp_2,(char *)"ipw_roam");
      }
      #line 7493 
      priv->status &= 4294966271U;
      #line 7494 
      ipw_debug_config(priv);
      #line 7495 
      return;
    }
    #line 7498 
    ipw_send_disassociate(priv,1);
    #line 7499 
    priv->assoc_network = match.network;
    #line 7501 
    return;
  }
  #line 7505 
  ipw_compatible_rates(priv,priv->assoc_network,& match.rates);
  #line 7506 
  ipw_associate_network(priv,priv->assoc_network,& match.rates,1);
  #line 7507 
  priv->status &= 4294966271U;
  #line 7508 
  return;
}

#line 7510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_roam(struct work_struct *work)
{
  #line 7513 
  void *__mptr;
  #line 7513 
  __mptr = (void *)work;
  #line 7512 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545864U));
  #line 7514 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 7515 
  ipw_roam((void *)priv);
  #line 7516 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 7517 
  return;
}

#line 7519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_associate(void *data)
{
  #line 7562 
  void *__mptr;
  #line 7527 
  struct ipw_supported_rates *rates;
  #line 7528 
  struct list_head *element;
  #line 7529 
  unsigned long flags;
  #line 7521 
  struct ipw_priv *priv = (struct ipw_priv *)data;
  #line 7523 
  struct libipw_network *network = (struct libipw_network *)0;
  #line 7524 
  struct ipw_network_match match = {.network = (struct libipw_network *)0, .rates = {.ieee_mode = (unsigned char)0, .num_rates = (unsigned char)0, .purpose = (unsigned char)0, .reserved = (unsigned char)0, .supported_rates = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 7531 
  if ((priv->ieee)->iw_mode == 6) {
    #line 7532 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 7532 
      int tmp_0;
      #line 7532 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7532 
                                                               tmp_0 = 73; else 
                                                                    #line 7532 
                                                                    tmp_0 = 85;
      #line 7532 
      printk((char *)"\001",tmp_0,(char *)"ipw_associate");
    }
    #line 7533 
    return 0;
  }
  #line 7536 
  if ((priv->status & 384U) != 0U) {
    #line 7537 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 7537 
      int tmp_2;
      #line 7537 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7537 
                                                               tmp_2 = 73; else 
                                                                    #line 7537 
                                                                    tmp_2 = 85;
      #line 7537 
      printk((char *)"\001",tmp_2,(char *)"ipw_associate");
    }
    #line 7539 
    return 0;
  }
  #line 7542 
  if ((priv->status & 512U) != 0U) {
    #line 7543 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 7543 
      int tmp_4;
      #line 7543 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7543 
                                                               tmp_4 = 73; else 
                                                                    #line 7543 
                                                                    tmp_4 = 85;
      #line 7543 
      printk((char *)"\001",tmp_4,(char *)"ipw_associate");
    }
    #line 7544 
    cif_schedule_work(& priv->associate);
    #line 7545 
    return 0;
  }
  #line 7548 
  if (ipw_is_init(priv) == 0) 
                              #line 7548 
                              goto _LOR;
  else 
    #line 7548 
    if ((priv->status & 2097152U) != 0U) {
      #line 7548 
      _LOR: {
              #line 7549 
              if ((ipw_debug_level & 4100U) != 0U) {
                #line 7549 
                int tmp_6;
                #line 7549 
                if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                  #line 7549 
                  tmp_6 = 73; else 
                                   #line 7549 
                                   tmp_6 = 85;
                #line 7549 
                printk((char *)"\001",tmp_6,(char *)"ipw_associate");
              }
              #line 7551 
              return 0;
            }
    }
  #line 7554 
  if ((priv->config & 64U) == 0U && (priv->config & 6U) == 0U) {
    #line 7556 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 7556 
      int tmp_9;
      #line 7556 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7556 
                                                               tmp_9 = 73; else 
                                                                    #line 7556 
                                                                    tmp_9 = 85;
      #line 7556 
      printk((char *)"\001",tmp_9,(char *)"ipw_associate");
    }
    #line 7557 
    return 0;
  }
  #line 7561 
  cif___ldv_spin_lock_lock_of_libipw_device(& (priv->ieee)->lock);
  #line 7562 
  __mptr = (void *)(priv->ieee)->network_list.next;
  #line 7562 
  network = ((struct libipw_network *)(__mptr + 18446744073709551264U));
  #line 7562 
  while (& network->list != & (priv->ieee)->network_list) {
    #line 7562 
    void *__mptr_0;
    #line 7563 
    ipw_best_network(priv,& match,network,0);
    #line 7562 
    __mptr_0 = (void *)network->list.next;
    #line 7562 
    network = ((struct libipw_network *)(__mptr_0 + 18446744073709551264U));
  }
  #line 7565 
  network = match.network;
  #line 7566 
  rates = & match.rates;
  #line 7568 
  if ((((network == (struct libipw_network *)0 && (priv->ieee)->iw_mode == 1) && (priv->config & 256U) != 0U) && (priv->config & 2U) != 0U) && (priv->config & 1U) != 0U) {
    #line 7595 
    void *__mptr_3;
    #line 7574 
    if (list_empty(& (priv->ieee)->network_free_list) != 0) {
      #line 7578 
      void *__mptr_1;
      #line 7576 
      struct libipw_network *target;
      #line 7575 
      struct libipw_network *oldest = (struct libipw_network *)0;
      #line 7578 
      __mptr_1 = (void *)(priv->ieee)->network_list.next;
      #line 7578 
      target = ((struct libipw_network *)(__mptr_1 + 18446744073709551264U));
      #line 7578 
      while (& target->list != & (priv->ieee)->network_list) {
        #line 7578 
        void *__mptr_2;
        #line 7579 
        if (oldest == (struct libipw_network *)0 || target->last_scanned < oldest->last_scanned) 
          #line 7581 
          oldest = target;
        #line 7578 
        __mptr_2 = (void *)target->list.next;
        #line 7578 
        target = ((struct libipw_network *)(__mptr_2 + 18446744073709551264U));
      }
      #line 7585 
      list_del(& oldest->list);
      #line 7586 
      target = oldest;
      #line 7587 
      if ((ipw_debug_level & 4100U) != 0U) {
        #line 7587 
        int tmp_15;
        #line 7587 
        ;
        #line 7587 
        ;
        #line 7587 
        ;
        #line 7587 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 7587 
                                                                 tmp_15 = 73; else 
                                                                    #line 7587 
                                                                    tmp_15 = 85;
        #line 7587 
        printk((char *)"\001",tmp_15,(char *)"ipw_associate",(int)target->ssid_len,(u8 *)(& target->ssid),(u8 *)(& target->bssid));
      }
      #line 7590 
      list_add_tail(& target->list,& (priv->ieee)->network_free_list);
    }
    #line 7594 
    element = (priv->ieee)->network_free_list.next;
    #line 7595 
    __mptr_3 = (void *)element;
    #line 7595 
    network = ((struct libipw_network *)(__mptr_3 + 18446744073709551264U));
    #line 7596 
    ipw_adhoc_create(priv,network);
    #line 7597 
    rates = & priv->rates;
    #line 7598 
    list_del(element);
    #line 7599 
    list_add_tail(& network->list,& (priv->ieee)->network_list);
  }
  #line 7601 
  cif_spin_unlock_irqrestore_lock_of_libipw_device(& (priv->ieee)->lock,flags);
  #line 7605 
  if (network == (struct libipw_network *)0) {
    #line 7606 
    ipw_debug_config(priv);
    #line 7608 
    if ((priv->status & 2097152U) == 0U) 
      #line 7609 
      if ((priv->config & 2048U) == 0U) 
                                        #line 7610 
                                        cif_schedule_delayed_work(& priv->request_scan,25UL); else 
                                                                    #line 7613 
                                                                    cif_schedule_delayed_work(& priv->request_scan,0UL);
    #line 7616 
    return 0;
  }
  #line 7619 
  ipw_associate_network(priv,network,rates,0);
  #line 7621 
  return 1;
}

#line 7624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_associate(struct work_struct *work)
{
  #line 7627 
  void *__mptr;
  #line 7627 
  __mptr = (void *)work;
  #line 7626 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709547608U));
  #line 7628 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 7629 
  ipw_associate((void *)priv);
  #line 7630 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 7631 
  return;
}

#line 7633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rebuild_decrypted_skb(struct ipw_priv *priv, struct sk_buff *skb)
{
  #line 7636 
  struct ieee80211_hdr *hdr;
  #line 7637 
  u16 fc;
  #line 7639 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 7640 
  fc = hdr->frame_control;
  #line 7641 
  if (((int)fc & 16384) == 0) 
                              #line 7642 
                              return;
  #line 7644 
  fc = (unsigned short)((unsigned int)fc & 49151U);
  #line 7645 
  hdr->frame_control = fc;
  #line 7646 
  switch ((int)(priv->ieee)->sec.level) {
    #line 7647 
    case 4: 
            #line 7647 
    ;
    #line 7649 
    __memmove((void *)(skb->data + 24U),(void *)(skb->data + 32U),(unsigned long)(skb->len + 4294967264U));
    #line 7652 
    skb_trim(skb,skb->len + 4294967280U);
    #line 7653 
    break;
    #line 7654 
    case 2: 
            #line 7654 
    ;
    #line 7655 
    break;
    #line 7656 
    case 1: 
            #line 7656 
    ;
    #line 7658 
    __memmove((void *)(skb->data + 24U),(void *)(skb->data + 28U),(unsigned long)(skb->len + 4294967268U));
    #line 7661 
    skb_trim(skb,skb->len + 4294967288U);
    #line 7662 
    break;
    #line 7663 
    case 0: 
            #line 7663 
    ;
    #line 7664 
    break;
    #line 7665 
    default: 
             #line 7665 
    ;
    #line 7666 
    printk((char *)"\001",(int)(priv->ieee)->sec.level);
    #line 7668 
    break;
  }
  #line 7670 
  return;
}

#line 7672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_handle_data_packet(struct ipw_priv *priv, struct ipw_rx_mem_buffer *rxb, struct libipw_rx_stats *stats)
{
  #line 7677 
  struct libipw_hdr_4addr *hdr;
  #line 7676 
  struct net_device *dev = priv->net_dev;
  #line 7678 
  struct ipw_rx_packet *pkt = (struct ipw_rx_packet *)(rxb->skb)->data;
  #line 7681 
  netif_trans_update(dev);
  #line 7685 
  ;
  #line 7685 
  if ((long)((unsigned int)pkt->u.frame.length + 28U > (unsigned int)skb_tailroom(rxb->skb)) != 0L) {
    #line 7687 
    (dev->stats.rx_errors) ++;
    #line 7688 
    (priv->wstats.discard.misc) ++;
    #line 7689 
    if ((ipw_debug_level & 8192U) != 0U) {
      #line 7689 
      int tmp_0;
      #line 7689 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7689 
                                                               tmp_0 = 73; else 
                                                                    #line 7689 
                                                                    tmp_0 = 85;
      #line 7689 
      printk((char *)"\001",tmp_0,(char *)"ipw_handle_data_packet");
    }
    #line 7690 
    return;
  }
  else {
    #line 7691 
    int tmp_4;
    #line 7691 
    if (netif_running(priv->net_dev)) 
                                      #line 7691 
                                      tmp_4 = 0; else 
                                                      #line 7691 
                                                      tmp_4 = 1;
    #line 7691 
    if ((long)tmp_4 != 0L) {
      #line 7692 
      (dev->stats.rx_dropped) ++;
      #line 7693 
      (priv->wstats.discard.misc) ++;
      #line 7694 
      if ((ipw_debug_level & 8192U) != 0U) {
        #line 7694 
        int tmp_2;
        #line 7694 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 7694 
                                                                 tmp_2 = 73; else 
                                                                    #line 7694 
                                                                    tmp_2 = 85;
        #line 7694 
        printk((char *)"\001",tmp_2,(char *)"ipw_handle_data_packet");
      }
      #line 7695 
      return;
    }
  }
  #line 7699 
  skb_reserve(rxb->skb,28);
  #line 7702 
  skb_put(rxb->skb,(unsigned int)pkt->u.frame.length);
  #line 7704 
  if ((ipw_debug_level & 16777216U) != 0U) {
    #line 7704 
    int tmp_7;
    #line 7704 
    ;
    #line 7704 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7704 
                                                             tmp_7 = 73; else 
                                                                    #line 7704 
                                                                    tmp_7 = 85;
    #line 7704 
    printk((char *)"\001",tmp_7,(char *)"ipw_handle_data_packet",(rxb->skb)->len);
  }
  #line 7707 
  hdr = (struct libipw_hdr_4addr *)(rxb->skb)->data;
  #line 7708 
  if ((priv->ieee)->iw_mode != 6) {
    #line 7708 
    int tmp_9;
    #line 7708 
    if ((int)is_multicast_ether_addr((u8 *)(& hdr->addr1)) != 0) 
                                                                 #line 7708 
                                                                 tmp_9 = (priv->ieee)->host_mc_decrypt == 0; else 
                                                                    #line 7708 
                                                                    tmp_9 = (priv->ieee)->host_decrypt == 0;
    #line 7708 
    if (tmp_9) 
               #line 7711 
               ipw_rebuild_decrypted_skb(priv,rxb->skb);
  }
  #line 7713 
  if (libipw_rx(priv->ieee,rxb->skb,stats) == 0) 
                                                 #line 7714 
                                                 (dev->stats.rx_errors) ++;
  else {
    #line 7716 
    rxb->skb = (struct sk_buff *)0;
    #line 7717 
    __ipw_led_activity_on(priv);
  }
  #line 7719 
  return;
}

#line 7722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_handle_data_packet_monitor(struct ipw_priv *priv, struct ipw_rx_mem_buffer *rxb, struct libipw_rx_stats *stats)
{
  #line 7739 
  struct ipw_rt_hdr *ipw_rt;
  #line 7726 
  struct net_device *dev = priv->net_dev;
  #line 7727 
  struct ipw_rx_packet *pkt = (struct ipw_rx_packet *)(rxb->skb)->data;
  #line 7728 
  struct ipw_rx_frame *frame = & pkt->u.frame;
  #line 7731 
  u16 received_channel = (unsigned short)frame->received_channel;
  #line 7732 
  u8 antennaAndPhy = frame->antennaAndPhy;
  #line 7733 
  s8 antsignal = (signed char)((unsigned int)frame->rssi_dbm + 144U);
  #line 7734 
  u16 pktrate = (unsigned short)frame->rate;
  #line 7741 
  unsigned short len = pkt->u.frame.length;
  #line 7744 
  netif_trans_update(dev);
  #line 7748 
  ;
  #line 7748 
  if ((long)((unsigned int)pkt->u.frame.length + 28U > (unsigned int)skb_tailroom(rxb->skb)) != 0L) {
    #line 7750 
    (dev->stats.rx_errors) ++;
    #line 7751 
    (priv->wstats.discard.misc) ++;
    #line 7752 
    if ((ipw_debug_level & 8192U) != 0U) {
      #line 7752 
      int tmp_0;
      #line 7752 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7752 
                                                               tmp_0 = 73; else 
                                                                    #line 7752 
                                                                    tmp_0 = 85;
      #line 7752 
      printk((char *)"\001",tmp_0,(char *)"ipw_handle_data_packet_monitor");
    }
    #line 7753 
    return;
  }
  else {
    #line 7754 
    int tmp_4;
    #line 7754 
    if (netif_running(priv->net_dev)) 
                                      #line 7754 
                                      tmp_4 = 0; else 
                                                      #line 7754 
                                                      tmp_4 = 1;
    #line 7754 
    if ((long)tmp_4 != 0L) {
      #line 7755 
      (dev->stats.rx_dropped) ++;
      #line 7756 
      (priv->wstats.discard.misc) ++;
      #line 7757 
      if ((ipw_debug_level & 8192U) != 0U) {
        #line 7757 
        int tmp_2;
        #line 7757 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 7757 
                                                                 tmp_2 = 73; else 
                                                                    #line 7757 
                                                                    tmp_2 = 85;
        #line 7757 
        printk((char *)"\001",tmp_2,(char *)"ipw_handle_data_packet_monitor");
      }
      #line 7758 
      return;
    }
  }
  #line 7763 
  if ((unsigned int)len > 2975U) {
    #line 7765 
    (dev->stats.rx_dropped) ++;
    #line 7766 
    (priv->wstats.discard.misc) ++;
    #line 7767 
    if ((ipw_debug_level & 8192U) != 0U) {
      #line 7767 
      int tmp_7;
      #line 7767 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7767 
                                                               tmp_7 = 73; else 
                                                                    #line 7767 
                                                                    tmp_7 = 85;
      #line 7767 
      printk((char *)"\001",tmp_7,(char *)"ipw_handle_data_packet_monitor");
    }
    #line 7768 
    return;
  }
  #line 7772 
  __memmove((void *)((rxb->skb)->data + 25UL),(void *)((rxb->skb)->data + 28U),(unsigned long)len);
  #line 7775 
  ipw_rt = (struct ipw_rt_hdr *)(rxb->skb)->data;
  #line 7777 
  ipw_rt->rt_hdr.it_version = (unsigned char)0U;
  #line 7778 
  ipw_rt->rt_hdr.it_pad = (unsigned char)0U;
  #line 7779 
  ipw_rt->rt_hdr.it_len = (unsigned short)25U;
  #line 7782 
  ipw_rt->rt_hdr.it_present = 2159U;
  #line 7792 
  ipw_rt->rt_flags = (unsigned char)0U;
  #line 7793 
  ipw_rt->rt_tsf = (unsigned long long)(((((int)frame->parent_tsf[3] << 24) | ((int)frame->parent_tsf[2] << 16)) | ((int)frame->parent_tsf[1] << 8)) | (int)frame->parent_tsf[0]);
  #line 7799 
  ipw_rt->rt_dbmsignal = antsignal;
  #line 7800 
  ipw_rt->rt_dbmnoise = (signed char)frame->noise;
  #line 7803 
  if ((unsigned int)received_channel <= 14U) {
    #line 7803 
    unsigned int tmp_8;
    #line 7803 
    if ((unsigned int)received_channel != 14U) 
                                               #line 7803 
                                               tmp_8 = (unsigned int)received_channel * 5U + 2407U; else 
                                                                    #line 7803 
                                                                    tmp_8 = 2484U;
    #line 7803 
    ipw_rt->rt_channel = (unsigned short)tmp_8;
  }
  else 
       #line 7803 
       ipw_rt->rt_channel = (unsigned short)((unsigned int)received_channel * 5U + 5000U);
  #line 7804 
  if ((unsigned int)received_channel > 14U) 
                                            #line 7805 
                                            ipw_rt->rt_chbitmask = (unsigned short)320U;
  else 
    #line 7807 
    if (((int)antennaAndPhy & 32) != 0) 
                                        #line 7808 
                                        ipw_rt->rt_chbitmask = (unsigned short)160U; else 
                                                                    #line 7811 
                                                                    ipw_rt->rt_chbitmask = (unsigned short)192U;
  #line 7816 
  switch ((int)pktrate) {
    #line 7817 
    case 10: 
             #line 7817 
    ;
    #line 7818 
    ipw_rt->rt_rate = (unsigned char)2U;
    #line 7819 
    break;
    #line 7820 
    case 20: 
             #line 7820 
    ;
    #line 7821 
    ipw_rt->rt_rate = (unsigned char)4U;
    #line 7822 
    break;
    #line 7823 
    case 55: 
             #line 7823 
    ;
    #line 7824 
    ipw_rt->rt_rate = (unsigned char)10U;
    #line 7825 
    break;
    #line 7826 
    case 13: 
             #line 7826 
    ;
    #line 7827 
    ipw_rt->rt_rate = (unsigned char)12U;
    #line 7828 
    break;
    #line 7829 
    case 15: 
             #line 7829 
    ;
    #line 7830 
    ipw_rt->rt_rate = (unsigned char)18U;
    #line 7831 
    break;
    #line 7832 
    case 110: 
              #line 7832 
    ;
    #line 7833 
    ipw_rt->rt_rate = (unsigned char)22U;
    #line 7834 
    break;
    #line 7835 
    case 5: 
            #line 7835 
    ;
    #line 7836 
    ipw_rt->rt_rate = (unsigned char)24U;
    #line 7837 
    break;
    #line 7838 
    case 7: 
            #line 7838 
    ;
    #line 7839 
    ipw_rt->rt_rate = (unsigned char)36U;
    #line 7840 
    break;
    #line 7841 
    case 9: 
            #line 7841 
    ;
    #line 7842 
    ipw_rt->rt_rate = (unsigned char)48U;
    #line 7843 
    break;
    #line 7844 
    case 11: 
             #line 7844 
    ;
    #line 7845 
    ipw_rt->rt_rate = (unsigned char)72U;
    #line 7846 
    break;
    #line 7847 
    case 1: 
            #line 7847 
    ;
    #line 7848 
    ipw_rt->rt_rate = (unsigned char)96U;
    #line 7849 
    break;
    #line 7850 
    case 3: 
            #line 7850 
    ;
    #line 7851 
    ipw_rt->rt_rate = (unsigned char)108U;
    #line 7852 
    break;
    #line 7853 
    default: 
             #line 7853 
    ;
    #line 7854 
    ipw_rt->rt_rate = (unsigned char)0U;
    #line 7855 
    break;
  }
  #line 7859 
  ipw_rt->rt_antenna = (unsigned char)((unsigned int)antennaAndPhy & 3U);
  #line 7862 
  if (((int)antennaAndPhy & 64) != 0) 
                                      #line 7863 
                                      ipw_rt->rt_flags = (unsigned char)((unsigned int)ipw_rt->rt_flags | 2U);
  #line 7866 
  skb_put(rxb->skb,(unsigned int)len + 25U);
  #line 7868 
  if ((ipw_debug_level & 16777216U) != 0U) {
    #line 7868 
    int tmp_10;
    #line 7868 
    ;
    #line 7868 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 7868 
                                                             tmp_10 = 73; else 
                                                                    #line 7868 
                                                                    tmp_10 = 85;
    #line 7868 
    printk((char *)"\001",tmp_10,(char *)"ipw_handle_data_packet_monitor",(rxb->skb)->len);
  }
  #line 7870 
  if (libipw_rx(priv->ieee,rxb->skb,stats) == 0) 
                                                 #line 7871 
                                                 (dev->stats.rx_errors) ++; else 
                                                                    #line 7873 
                                                                    rxb->skb = (struct sk_buff *)0;
  #line 7874 
  return;
}

#line 7899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_handle_promiscuous_rx(struct ipw_priv *priv, struct ipw_rx_mem_buffer *rxb, struct libipw_rx_stats *stats)
{
  #line 7906 
  struct ipw_rt_hdr *ipw_rt;
  #line 7910 
  struct ieee80211_hdr *hdr;
  #line 7917 
  struct sk_buff *skb;
  #line 7935 
  int tmp_5;
  #line 7903 
  struct net_device *dev = priv->prom_net_dev;
  #line 7904 
  struct ipw_rx_packet *pkt = (struct ipw_rx_packet *)(rxb->skb)->data;
  #line 7905 
  struct ipw_rx_frame *frame = & pkt->u.frame;
  #line 7911 
  u16 channel = (unsigned short)frame->received_channel;
  #line 7912 
  u8 phy_flags = frame->antennaAndPhy;
  #line 7913 
  s8 signal = (signed char)((unsigned int)frame->rssi_dbm + 144U);
  #line 7914 
  s8 noise = (signed char)frame->noise;
  #line 7915 
  u8 rate = frame->rate;
  #line 7916 
  unsigned short len = pkt->u.frame.length;
  #line 7918 
  int hdr_only = 0;
  #line 7919 
  u16 filter = (unsigned short)(priv->prom_priv)->filter;
  #line 7922 
  if (((int)filter & 32) != 0) 
                               #line 7923 
                               return;
  #line 7926 
  netif_trans_update(dev);
  #line 7928 
  ;
  #line 7928 
  if ((long)((unsigned int)len + 28U > (unsigned int)skb_tailroom(rxb->skb)) != 0L) {
    #line 7929 
    (dev->stats.rx_errors) ++;
    #line 7930 
    if ((ipw_debug_level & 8192U) != 0U) {
      #line 7930 
      int tmp_0;
      #line 7930 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7930 
                                                               tmp_0 = 73; else 
                                                                    #line 7930 
                                                                    tmp_0 = 85;
      #line 7930 
      printk((char *)"\001",tmp_0,(char *)"ipw_handle_promiscuous_rx");
    }
    #line 7931 
    return;
  }
  #line 7935 
  if (netif_running(dev)) 
                          #line 7935 
                          tmp_5 = 0; else 
                                          #line 7935 
                                          tmp_5 = 1;
  #line 7935 
  if ((long)tmp_5 != 0L) {
    #line 7936 
    (dev->stats.rx_dropped) ++;
    #line 7937 
    if ((ipw_debug_level & 8192U) != 0U) {
      #line 7937 
      int tmp_3;
      #line 7937 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7937 
                                                               tmp_3 = 73; else 
                                                                    #line 7937 
                                                                    tmp_3 = 85;
      #line 7937 
      printk((char *)"\001",tmp_3,(char *)"ipw_handle_promiscuous_rx");
    }
    #line 7938 
    return;
  }
  #line 7943 
  if ((unsigned int)len > 2975U) {
    #line 7945 
    (dev->stats.rx_dropped) ++;
    #line 7946 
    if ((ipw_debug_level & 8192U) != 0U) {
      #line 7946 
      int tmp_7;
      #line 7946 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 7946 
                                                               tmp_7 = 73; else 
                                                                    #line 7946 
                                                                    tmp_7 = 85;
      #line 7946 
      printk((char *)"\001",tmp_7,(char *)"ipw_handle_promiscuous_rx");
    }
    #line 7947 
    return;
  }
  #line 7950 
  hdr = (struct ieee80211_hdr *)((void *)(rxb->skb)->data + 28U);
  #line 7951 
  if (((int)hdr->frame_control & 12) == 0) {
    #line 7952 
    if (((int)filter & 128) != 0) 
                                  #line 7953 
                                  return;
    #line 7954 
    if (((int)filter & 2) != 0) 
                                #line 7955 
                                hdr_only = 1;
  }
  else 
    #line 7956 
    if (((int)hdr->frame_control & 12) == 4) {
      #line 7957 
      if (((int)filter & 64) != 0) 
                                   #line 7958 
                                   return;
      #line 7959 
      if (((int)filter & 1) != 0) 
                                  #line 7960 
                                  hdr_only = 1;
    }
    else 
      #line 7961 
      if (((int)hdr->frame_control & 12) == 8) {
        #line 7962 
        if (((int)filter & 256) != 0) 
                                      #line 7963 
                                      return;
        #line 7964 
        if (((int)filter & 4) != 0) 
                                    #line 7965 
                                    hdr_only = 1;
      }
  #line 7969 
  skb = skb_copy(rxb->skb,2592U);
  #line 7970 
  if (skb == (struct sk_buff *)0) {
    #line 7971 
    printk((char *)"\001");
    #line 7972 
    return;
  }
  #line 7976 
  ipw_rt = (struct ipw_rt_hdr *)skb->data;
  #line 7978 
  if (hdr_only != 0) {
    #line 7979 
    len = (unsigned short)libipw_get_hdrlen((unsigned short)((int)hdr->frame_control));
  }
  #line 7981 
  memcpy((void *)(& ipw_rt->payload),(void *)hdr,(unsigned long)len);
  #line 7983 
  ipw_rt->rt_hdr.it_version = (unsigned char)0U;
  #line 7984 
  ipw_rt->rt_hdr.it_pad = (unsigned char)0U;
  #line 7985 
  ipw_rt->rt_hdr.it_len = (unsigned short)25U;
  #line 7988 
  skb_put(skb,(unsigned int)len + 25U);
  #line 7991 
  ipw_rt->rt_hdr.it_present = 2159U;
  #line 8001 
  ipw_rt->rt_flags = (unsigned char)0U;
  #line 8002 
  ipw_rt->rt_tsf = (unsigned long long)(((((int)frame->parent_tsf[3] << 24) | ((int)frame->parent_tsf[2] << 16)) | ((int)frame->parent_tsf[1] << 8)) | (int)frame->parent_tsf[0]);
  #line 8008 
  ipw_rt->rt_dbmsignal = signal;
  #line 8009 
  ipw_rt->rt_dbmnoise = noise;
  #line 8012 
  if ((unsigned int)channel <= 14U) {
    #line 8012 
    unsigned int tmp_9;
    #line 8012 
    if ((unsigned int)channel != 14U) 
                                      #line 8012 
                                      tmp_9 = (unsigned int)channel * 5U + 2407U; else 
                                                                    #line 8012 
                                                                    tmp_9 = 2484U;
    #line 8012 
    ipw_rt->rt_channel = (unsigned short)tmp_9;
  }
  else 
       #line 8012 
       ipw_rt->rt_channel = (unsigned short)((unsigned int)channel * 5U + 5000U);
  #line 8013 
  if ((unsigned int)channel > 14U) 
                                   #line 8014 
                                   ipw_rt->rt_chbitmask = (unsigned short)320U;
  else 
    #line 8016 
    if (((int)phy_flags & 32) != 0) 
                                    #line 8017 
                                    ipw_rt->rt_chbitmask = (unsigned short)160U; else 
                                                                    #line 8020 
                                                                    ipw_rt->rt_chbitmask = (unsigned short)192U;
  #line 8025 
  switch ((int)rate) {
    #line 8026 
    case 10: 
             #line 8026 
    ;
    #line 8027 
    ipw_rt->rt_rate = (unsigned char)2U;
    #line 8028 
    break;
    #line 8029 
    case 20: 
             #line 8029 
    ;
    #line 8030 
    ipw_rt->rt_rate = (unsigned char)4U;
    #line 8031 
    break;
    #line 8032 
    case 55: 
             #line 8032 
    ;
    #line 8033 
    ipw_rt->rt_rate = (unsigned char)10U;
    #line 8034 
    break;
    #line 8035 
    case 13: 
             #line 8035 
    ;
    #line 8036 
    ipw_rt->rt_rate = (unsigned char)12U;
    #line 8037 
    break;
    #line 8038 
    case 15: 
             #line 8038 
    ;
    #line 8039 
    ipw_rt->rt_rate = (unsigned char)18U;
    #line 8040 
    break;
    #line 8041 
    case 110: 
              #line 8041 
    ;
    #line 8042 
    ipw_rt->rt_rate = (unsigned char)22U;
    #line 8043 
    break;
    #line 8044 
    case 5: 
            #line 8044 
    ;
    #line 8045 
    ipw_rt->rt_rate = (unsigned char)24U;
    #line 8046 
    break;
    #line 8047 
    case 7: 
            #line 8047 
    ;
    #line 8048 
    ipw_rt->rt_rate = (unsigned char)36U;
    #line 8049 
    break;
    #line 8050 
    case 9: 
            #line 8050 
    ;
    #line 8051 
    ipw_rt->rt_rate = (unsigned char)48U;
    #line 8052 
    break;
    #line 8053 
    case 11: 
             #line 8053 
    ;
    #line 8054 
    ipw_rt->rt_rate = (unsigned char)72U;
    #line 8055 
    break;
    #line 8056 
    case 1: 
            #line 8056 
    ;
    #line 8057 
    ipw_rt->rt_rate = (unsigned char)96U;
    #line 8058 
    break;
    #line 8059 
    case 3: 
            #line 8059 
    ;
    #line 8060 
    ipw_rt->rt_rate = (unsigned char)108U;
    #line 8061 
    break;
    #line 8062 
    default: 
             #line 8062 
    ;
    #line 8063 
    ipw_rt->rt_rate = (unsigned char)0U;
    #line 8064 
    break;
  }
  #line 8068 
  ipw_rt->rt_antenna = (unsigned char)((unsigned int)phy_flags & 3U);
  #line 8071 
  if (((int)phy_flags & 64) != 0) 
                                  #line 8072 
                                  ipw_rt->rt_flags = (unsigned char)((unsigned int)ipw_rt->rt_flags | 2U);
  #line 8074 
  if ((ipw_debug_level & 16777216U) != 0U) {
    #line 8074 
    int tmp_11;
    #line 8074 
    ;
    #line 8074 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8074 
                                                             tmp_11 = 73; else 
                                                                    #line 8074 
                                                                    tmp_11 = 85;
    #line 8074 
    printk((char *)"\001",tmp_11,(char *)"ipw_handle_promiscuous_rx",skb->len);
  }
  #line 8076 
  if (libipw_rx((priv->prom_priv)->ieee,skb,stats) == 0) {
    #line 8077 
    (dev->stats.rx_errors) ++;
    #line 8078 
    dev_kfree_skb_any(skb);
  }
  #line 8080 
  return;
}

#line 8083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int is_network_packet(struct ipw_priv *priv, struct libipw_hdr_4addr *header)
{
  #line 8088 
  switch ((priv->ieee)->iw_mode) {
    #line 8089 
    case 1: 
            #line 8089 
    ;
    #line 8091 
    if ((int)ether_addr_equal((u8 *)(& header->addr2),(priv->net_dev)->dev_addr) != 0) 
      #line 8092 
      return 0;
    #line 8095 
    if ((int)is_multicast_ether_addr((u8 *)(& header->addr1)) != 0) {
      #line 8096 
      return (int)ether_addr_equal((u8 *)(& header->addr3),(u8 *)(& priv->bssid));
    }
    #line 8099 
    return (int)ether_addr_equal((u8 *)(& header->addr1),(priv->net_dev)->dev_addr);
    #line 8102 
    case 2: 
            #line 8102 
    ;
    #line 8104 
    if ((int)ether_addr_equal((u8 *)(& header->addr3),(priv->net_dev)->dev_addr) != 0) 
      #line 8105 
      return 0;
    #line 8108 
    if ((int)is_multicast_ether_addr((u8 *)(& header->addr1)) != 0) {
      #line 8109 
      return (int)ether_addr_equal((u8 *)(& header->addr2),(u8 *)(& priv->bssid));
    }
    #line 8112 
    return (int)ether_addr_equal((u8 *)(& header->addr1),(priv->net_dev)->dev_addr);
  }
  #line 8116 
  return 1;
}

#line 8121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int is_duplicate_packet(struct ipw_priv *priv, struct libipw_hdr_4addr *header)
{
  #line 8127 
  u16 *last_seq;
  #line 8127 
  u16 *last_frag;
  #line 8128 
  unsigned long *last_time;
  #line 8124 
  u16 sc = header->seq_ctl;
  #line 8125 
  u16 seq = (unsigned short)((int)sc >> 4);
  #line 8126 
  u16 frag = (unsigned short)((unsigned int)sc & 15U);
  #line 8130 
  switch ((priv->ieee)->iw_mode) {
    #line 8131 
    case 1: 
            #line 8131 
    ;
    {
      #line 8133 
      struct list_head *p;
      #line 8134 
      struct ipw_ibss_seq *entry = (struct ipw_ibss_seq *)0;
      #line 8135 
      u8 *mac = (u8 *)(& header->addr2);
      #line 8136 
      int index = (int)((unsigned int)*(mac + 5U) % 31U);
      #line 8138 
      p = priv->ibss_mac_hash[index].next;
      #line 8138 
      while (& priv->ibss_mac_hash[index] != p) {
        {
          #line 8140 
          void *__mptr;
          #line 8140 
          __mptr = (void *)p;
          #line 8139 
          entry = ((struct ipw_ibss_seq *)(__mptr + 18446744073709551592U));
          #line 8141 
          if ((int)ether_addr_equal((u8 *)(& entry->mac),mac) != 0) 
                                                                    #line 8142 
                                                                    break;
        }
        #line 8138 
        p = p->next;
      }
      #line 8144 
      if (& priv->ibss_mac_hash[index] == p) {
        #line 8145 
        entry = (struct ipw_ibss_seq *)kmalloc(40UL,2592U);
        #line 8146 
        if (entry == (struct ipw_ibss_seq *)0) {
          #line 8147 
          printk((char *)"\001");
          #line 8149 
          return 0;
        }
        #line 8151 
        memcpy((void *)(& entry->mac),(void *)mac,6UL);
        #line 8152 
        entry->seq_num = seq;
        #line 8153 
        entry->frag_num = frag;
        #line 8154 
        entry->packet_time = jiffies;
        #line 8155 
        list_add(& entry->list,& priv->ibss_mac_hash[index]);
        #line 8157 
        return 0;
      }
      #line 8159 
      last_seq = & entry->seq_num;
      #line 8160 
      last_frag = & entry->frag_num;
      #line 8161 
      last_time = & entry->packet_time;
      #line 8162 
      break;
    }
    #line 8164 
    case 2: 
            #line 8164 
    ;
    #line 8165 
    last_seq = & priv->last_seq_num;
    #line 8166 
    last_frag = & priv->last_frag_num;
    #line 8167 
    last_time = & priv->last_packet_time;
    #line 8168 
    break;
    #line 8169 
    default: 
             #line 8169 
    ;
    #line 8170 
    return 0;
  }
  {
    #line 8173 
    unsigned long __dummy;
    #line 8173 
    unsigned long __dummy2;
    }
  #line 8172 
  if (1 != 0) {
    {
      #line 8173 
      unsigned long __dummy_0;
      #line 8173 
      unsigned long __dummy2_0;
      }
    #line 8173 
    if (1 != 0) 
      #line 8173 
      if ((long)((jiffies - *last_time) + 18446744073709551366UL) < 0L) 
        #line 8172 
        if ((int)*last_seq == (int)seq) {
          #line 8174 
          if ((int)*last_frag == (int)frag) 
                                            #line 8175 
                                            goto drop;
          #line 8176 
          if ((int)*last_frag + 1 != (int)frag) 
                                                #line 8178 
                                                goto drop;
        }
        else 
             #line 8180 
             *last_seq = seq;
      else 
           #line 8180 
           *last_seq = seq;
    else 
         #line 8180 
         *last_seq = seq;
  }
  else 
       #line 8180 
       *last_seq = seq;
  #line 8182 
  *last_frag = frag;
  #line 8183 
  *last_time = jiffies;
  #line 8184 
  return 0;
  #line 8186 
  drop: 
        #line 8186 
  ;
  #line 8191 
  return 1;
}

#line 8194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_handle_mgmt_packet(struct ipw_priv *priv, struct ipw_rx_mem_buffer *rxb, struct libipw_rx_stats *stats)
{
  #line 8198 
  struct sk_buff *skb = rxb->skb;
  #line 8199 
  struct ipw_rx_packet *pkt = (struct ipw_rx_packet *)skb->data;
  #line 8200 
  struct libipw_hdr_4addr *header = (struct libipw_hdr_4addr *)(skb->data + 28U);
  #line 8203 
  libipw_rx_mgt(priv->ieee,header,stats);
  #line 8205 
  if ((priv->ieee)->iw_mode == 1 && (((int)header->frame_ctl & 240) == 80 || ((int)header->frame_ctl & 240) == 128)) {
    #line 8210 
    if ((int)ether_addr_equal((u8 *)(& header->addr3),(u8 *)(& priv->bssid)) != 0) 
      #line 8211 
      ipw_add_station(priv,(u8 *)(& header->addr2));
  }
  #line 8214 
  if ((priv->config & 4096U) != 0U) {
    #line 8215 
    if ((ipw_debug_level & 32U) != 0U) {
      #line 8215 
      int tmp_1;
      #line 8215 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8215 
                                                               tmp_1 = 73; else 
                                                                    #line 8215 
                                                                    tmp_1 = 85;
      #line 8215 
      printk((char *)"\001",tmp_1,(char *)"ipw_handle_mgmt_packet");
    }
    #line 8219 
    skb_put(skb,(unsigned int)pkt->u.frame.length + 28U);
    #line 8223 
    skb_pull(skb,28U);
    #line 8226 
    ;
    #line 8226 
    memcpy(skb_push(skb,32U),(void *)stats,32UL);
    #line 8228 
    skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_519_87.__anonCompField___anonstruct_520_86.dev = (priv->ieee)->dev;
    #line 8231 
    skb_reset_mac_header(skb);
    #line 8233 
    skb->pkt_type = (unsigned char)3U;
    #line 8234 
    skb->protocol = (unsigned short)6656U;
    #line 8235 
    memset((void *)(& skb->cb),0,48UL);
    #line 8236 
    netif_rx(skb);
    #line 8237 
    rxb->skb = (struct sk_buff *)0;
  }
  #line 8239 
  return;
}

#line 8246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rx(struct ipw_priv *priv)
{
  #line 8248 
  struct ipw_rx_mem_buffer *rxb;
  #line 8249 
  struct ipw_rx_packet *pkt;
  #line 8250 
  struct libipw_hdr_4addr *header;
  #line 8251 
  u32 r;
  #line 8251 
  u32 w;
  #line 8251 
  u32 i;
  #line 8252 
  u8 network_packet;
  #line 8253 
  u8 fill_rx = (unsigned char)0U;
  #line 8255 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 8255 
    int tmp_0;
    #line 8255 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8255 
                                                             tmp_0 = 73; else 
                                                                    #line 8255 
                                                                    tmp_0 = 85;
    #line 8255 
    printk((char *)"\001",tmp_0,(char *)"ipw_rx",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",8255,672U);
  }
  #line 8255 
  r = _ipw_read32(priv,672UL);
  #line 8256 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 8256 
    int tmp_4;
    #line 8256 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8256 
                                                             tmp_4 = 73; else 
                                                                    #line 8256 
                                                                    tmp_4 = 85;
    #line 8256 
    printk((char *)"\001",tmp_4,(char *)"ipw_rx",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",8256,4000U);
  }
  #line 8256 
  w = _ipw_read32(priv,4000UL);
  #line 8257 
  i = (priv->rxq)->read;
  #line 8259 
  if (ipw_rx_queue_space(priv->rxq) > 16) 
                                          #line 8260 
                                          fill_rx = (unsigned char)1U;
  #line 8262 
  while (i != r) {
    #line 8263 
    rxb = (priv->rxq)->queue[i];
    #line 8264 
    if ((long)(rxb == (struct ipw_rx_mem_buffer *)0) != 0L) {
      #line 8265 
      printk((char *)"\001");
      #line 8266 
      break;
    }
    #line 8268 
    (priv->rxq)->queue[i] = (struct ipw_rx_mem_buffer *)0;
    #line 8270 
    pci_dma_sync_single_for_cpu(priv->pci_dev,rxb->dma_addr,3000UL,2);
    #line 8274 
    pkt = (struct ipw_rx_packet *)(rxb->skb)->data;
    #line 8275 
    if ((ipw_debug_level & 16777216U) != 0U) {
      #line 8275 
      int tmp_9;
      #line 8275 
      ;
      #line 8275 
      ;
      #line 8275 
      ;
      #line 8275 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8275 
                                                               tmp_9 = 73; else 
                                                                    #line 8275 
                                                                    tmp_9 = 85;
      #line 8275 
      printk((char *)"\001",tmp_9,(char *)"ipw_rx",(int)pkt->header.message_type,(int)pkt->header.rx_seq_num,(int)pkt->header.control_bits);
    }
    #line 8279 
    switch ((int)pkt->header.message_type) {
      #line 8280 
      case 9: 
              #line 8280 
      ;
      {
        #line 8292 
        unsigned int tmp_10;
        #line 8292 
        if (((int)pkt->u.frame.control & 1) != 0) 
                                                  #line 8292 
                                                  tmp_10 = 1U; else 
                                                                    #line 8292 
                                                                    tmp_10 = 2U;
        #line 8281 
        struct libipw_rx_stats stats = {.mac_time = (unsigned int)jiffies, .rssi = (signed char)((unsigned int)pkt->u.frame.rssi_dbm + 144U), .signal = (unsigned char)((unsigned int)pkt->u.frame.rssi_dbm + 144U), .noise = (unsigned char)pkt->u.frame.noise, .rate = (unsigned short)pkt->u.frame.rate, .received_channel = pkt->u.frame.received_channel, .control = (unsigned char)0, .mask = (unsigned char)0, .freq = (unsigned char)tmp_10, .len = pkt->u.frame.length, .tsf = 0ULL, .beacon_time = 0U};
        #line 8301 
        if ((int)stats.rssi != 0) 
                                  #line 8302 
                                  stats.mask = (unsigned char)((unsigned int)stats.mask | 2U);
        #line 8303 
        if ((unsigned int)stats.signal != 0U) 
                                              #line 8304 
                                              stats.mask = (unsigned char)((unsigned int)stats.mask | 1U);
        #line 8305 
        if ((unsigned int)stats.noise != 0U) 
                                             #line 8306 
                                             stats.mask = (unsigned char)((unsigned int)stats.mask | 4U);
        #line 8307 
        if ((unsigned int)stats.rate != 0U) 
                                            #line 8308 
                                            stats.mask = (unsigned char)((unsigned int)stats.mask | 8U);
        #line 8310 
        (priv->rx_packets) ++;
        #line 8313 
        if (priv->prom_net_dev != (struct net_device *)0) {
          #line 8313 
          if ((int)netif_running(priv->prom_net_dev) != 0) 
                                                           #line 8314 
                                                           ipw_handle_promiscuous_rx(priv,rxb,& stats);
        }
        #line 8318 
        if ((priv->ieee)->iw_mode == 6) {
          #line 8321 
          ipw_handle_data_packet_monitor(priv,rxb,& stats);
          #line 8328 
          break;
        }
        #line 8332 
        header = (struct libipw_hdr_4addr *)((rxb->skb)->data + 28U);
        #line 8342 
        network_packet = (unsigned char)is_network_packet(priv,header);
        #line 8344 
        if ((unsigned int)network_packet != 0U && priv->assoc_network != (struct libipw_network *)0) {
          #line 8345 
          (priv->assoc_network)->stats.rssi = stats.rssi;
          #line 8347 
          priv->exp_avg_rssi = exponential_average((short)((int)priv->exp_avg_rssi),(short)((int)stats.rssi),(unsigned char)8);
        }
        #line 8352 
        if ((ipw_debug_level & 16777216U) != 0U) {
          #line 8352 
          int tmp_14;
          #line 8352 
          ;
          #line 8352 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 8352 
                                                                   tmp_14 = 73; else 
                                                                    #line 8352 
                                                                    tmp_14 = 85;
          #line 8352 
          printk((char *)"\001",tmp_14,(char *)"ipw_rx",(int)pkt->u.frame.length);
        }
        #line 8355 
        ;
        #line 8355 
        if ((int)pkt->u.frame.length < libipw_get_hdrlen((unsigned short)((int)header->frame_ctl))) {
          #line 8358 
          if ((ipw_debug_level & 8192U) != 0U) {
            #line 8358 
            int tmp_16;
            #line 8358 
            if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
              #line 8358 
              tmp_16 = 73; else 
                                #line 8358 
                                tmp_16 = 85;
            #line 8358 
            printk((char *)"\001",tmp_16,(char *)"ipw_rx");
          }
          #line 8361 
          ((priv->net_dev)->stats.rx_errors) ++;
          #line 8362 
          (priv->wstats.discard.misc) ++;
          #line 8363 
          break;
        }
        #line 8366 
        switch ((int)header->frame_ctl & 12) {
          #line 8369 
          case 0: 
                  #line 8369 
          ;
          #line 8370 
          ipw_handle_mgmt_packet(priv,rxb,& stats);
          #line 8372 
          break;
          #line 8374 
          case 4: 
                  #line 8374 
          ;
          #line 8375 
          break;
          #line 8377 
          case 8: 
                  #line 8377 
          ;
          #line 8378 
          if ((long)((unsigned int)network_packet == 0U) != 0L) 
                                                                #line 8378 
                                                                goto _LOR;
          else {
            #line 8378 
            if ((long)(is_duplicate_packet(priv,header) != 0) != 0L) {
              #line 8378 
              _LOR: {
                      #line 8382 
                      if ((ipw_debug_level & 8192U) != 0U) {
                        #line 8382 
                        int tmp_19;
                        #line 8382 
                        ;
                        #line 8382 
                        ;
                        #line 8382 
                        ;
                        #line 8382 
                        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                          #line 8382 
                          tmp_19 = 73; else 
                                            #line 8382 
                                            tmp_19 = 85;
                        #line 8382 
                        printk((char *)"\001",tmp_19,(char *)"ipw_rx",(u8 *)(& header->addr1),(u8 *)(& header->addr2),(u8 *)(& header->addr3));
                      }
                      #line 8389 
                      break;
                    }
            }
          }
          #line 8392 
          ipw_handle_data_packet(priv,rxb,& stats);
          #line 8395 
          break;
        }
        #line 8397 
        break;
      }
      #line 8400 
      case 3: 
              #line 8400 
      ;
      #line 8401 
      if ((ipw_debug_level & 16777216U) != 0U) {
        #line 8401 
        int tmp_22;
        #line 8401 
        ;
        #line 8401 
        ;
        #line 8401 
        ;
        #line 8401 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 8401 
                                                                 tmp_22 = 73; else 
                                                                    #line 8401 
                                                                    tmp_22 = 85;
        #line 8401 
        printk((char *)"\001",tmp_22,(char *)"ipw_rx",(int)pkt->u.notification.subtype,(int)pkt->u.notification.flags,(int)pkt->u.notification.size);
      }
      #line 8406 
      ipw_rx_notification(priv,& pkt->u.notification);
      #line 8407 
      break;
      #line 8410 
      default: 
               #line 8410 
      ;
      #line 8411 
      if ((ipw_debug_level & 16777216U) != 0U) {
        #line 8411 
        int tmp_24;
        #line 8411 
        ;
        #line 8411 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 8411 
                                                                 tmp_24 = 73; else 
                                                                    #line 8411 
                                                                    tmp_24 = 85;
        #line 8411 
        printk((char *)"\001",tmp_24,(char *)"ipw_rx",(int)pkt->header.message_type);
      }
      #line 8413 
      break;
    }
    #line 8419 
    if (rxb->skb != (struct sk_buff *)0) {
      #line 8420 
      dev_kfree_skb_any(rxb->skb);
      #line 8421 
      rxb->skb = (struct sk_buff *)0;
    }
    #line 8424 
    pci_unmap_single(priv->pci_dev,rxb->dma_addr,3000UL,2);
    #line 8426 
    list_add_tail(& rxb->list,& (priv->rxq)->rx_used);
    #line 8428 
    i = (i + 1U) & 31U;
    #line 8432 
    if ((unsigned int)fill_rx != 0U) {
      #line 8433 
      (priv->rxq)->read = i;
      #line 8434 
      ipw_rx_queue_replenish((void *)priv);
    }
  }
  #line 8439 
  (priv->rxq)->read = i;
  #line 8440 
  ipw_rx_queue_restock(priv);
  #line 8441 
  return;
}

#line 8457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_sw_reset(struct ipw_priv *priv, int option)
{
  #line 8459 
  int band;
  #line 8459 
  int modulation;
  #line 8460 
  int old_mode = (priv->ieee)->iw_mode;
  #line 8463 
  priv->config = 0U;
  #line 8467 
  if (led_support == 0) 
                        #line 8468 
                        priv->config |= 512U;
  #line 8470 
  if (associate != 0) 
                      #line 8471 
                      priv->config |= 64U;
  else 
    #line 8473 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 8473 
      int tmp_0;
      #line 8473 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8473 
                                                               tmp_0 = 73; else 
                                                                    #line 8473 
                                                                    tmp_0 = 85;
      #line 8473 
      printk((char *)"\001",tmp_0,(char *)"ipw_sw_reset");
    }
  #line 8475 
  if (auto_create != 0) 
                        #line 8476 
                        priv->config |= 256U;
  else 
    #line 8478 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 8478 
      int tmp_2;
      #line 8478 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8478 
                                                               tmp_2 = 73; else 
                                                                    #line 8478 
                                                                    tmp_2 = 85;
      #line 8478 
      printk((char *)"\001",tmp_2,(char *)"ipw_sw_reset");
    }
  #line 8480 
  priv->config &= 4294967293U;
  #line 8481 
  priv->essid_len = (unsigned char)0U;
  #line 8482 
  memset((void *)(& priv->essid),0,32UL);
  #line 8484 
  if (disable != 0 && option != 0) {
    #line 8485 
    priv->status |= 8U;
    #line 8486 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 8486 
      int tmp_4;
      #line 8486 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8486 
                                                               tmp_4 = 73; else 
                                                                    #line 8486 
                                                                    tmp_4 = 85;
      #line 8486 
      printk((char *)"\001",tmp_4,(char *)"ipw_sw_reset");
    }
  }
  #line 8489 
  if (default_channel != 0) {
    #line 8490 
    priv->config |= 1U;
    #line 8491 
    priv->channel = (unsigned char)default_channel;
    #line 8492 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 8492 
      int tmp_6;
      #line 8492 
      ;
      #line 8492 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8492 
                                                               tmp_6 = 73; else 
                                                                    #line 8492 
                                                                    tmp_6 = 85;
      #line 8492 
      printk((char *)"\001",tmp_6,(char *)"ipw_sw_reset",default_channel);
    }
  }
  #line 8496 
  ipw_qos_init(priv,qos_enable,qos_burst_enable,(unsigned int)burst_duration_CCK,(unsigned int)burst_duration_OFDM);
  #line 8500 
  switch (network_mode) {
    #line 8501 
    case 1: 
            #line 8501 
    ;
    #line 8502 
    (priv->ieee)->iw_mode = 1;
    #line 8503 
    (priv->net_dev)->type = (unsigned short)1U;
    #line 8505 
    break;
    #line 8507 
    case 2: 
            #line 8507 
    ;
    #line 8508 
    (priv->ieee)->iw_mode = 6;
    #line 8510 
    (priv->net_dev)->type = (unsigned short)803U;
    #line 8514 
    break;
    #line 8516 
    default: 
             #line 8516 
    ;
    #line 8517 
    case 0: 
            #line 8517 
    ;
    #line 8518 
    (priv->net_dev)->type = (unsigned short)1U;
    #line 8519 
    (priv->ieee)->iw_mode = 2;
    #line 8520 
    break;
  }
  #line 8523 
  if (hwcrypto != 0) {
    #line 8524 
    (priv->ieee)->host_encrypt = 0;
    #line 8525 
    (priv->ieee)->host_encrypt_msdu = 0;
    #line 8526 
    (priv->ieee)->host_decrypt = 0;
    #line 8527 
    (priv->ieee)->host_mc_decrypt = 0;
  }
  #line 8529 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 8529 
    char *tmp_7;
    #line 8529 
    int tmp_9;
    #line 8529 
    if (hwcrypto != 0) 
                       #line 8529 
                       tmp_7 = (char *)"on"; else 
                                                  #line 8529 
                                                  tmp_7 = (char *)"off";
    #line 8529 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8529 
                                                             tmp_9 = 73; else 
                                                                    #line 8529 
                                                                    tmp_9 = 85;
    #line 8529 
    printk((char *)"\001",tmp_9,(char *)"ipw_sw_reset",tmp_7);
  }
  #line 8532 
  (priv->ieee)->host_open_frag = 0;
  #line 8534 
  if ((unsigned int)(priv->pci_dev)->device + 48605U <= 1U) {
    #line 8536 
    if (option == 1) 
                     #line 8537 
                     printk((char *)"\001");
    #line 8540 
    (priv->ieee)->abg_true = 1;
    #line 8541 
    band = 3;
    #line 8542 
    modulation = 3;
    #line 8544 
    priv->adapter = (unsigned char)2U;
    #line 8545 
    (priv->ieee)->mode = 7;
  }
  else {
    #line 8547 
    if (option == 1) 
                     #line 8548 
                     printk((char *)"\001");
    #line 8552 
    (priv->ieee)->abg_true = 0;
    #line 8553 
    band = 1;
    #line 8554 
    modulation = 3;
    #line 8556 
    priv->adapter = (unsigned char)1U;
    #line 8557 
    (priv->ieee)->mode = 6;
  }
  #line 8560 
  (priv->ieee)->freq_band = band;
  #line 8561 
  (priv->ieee)->modulation = modulation;
  #line 8563 
  priv->rates_mask = (unsigned short)4095U;
  #line 8565 
  priv->disassociate_threshold = 24U;
  #line 8566 
  priv->roaming_threshold = 8U;
  #line 8568 
  priv->rts_threshold = (unsigned short)2304U;
  #line 8569 
  priv->short_retry_limit = (unsigned char)7U;
  #line 8570 
  priv->long_retry_limit = (unsigned char)4U;
  #line 8573 
  priv->power_mode = 6U;
  #line 8574 
  priv->tx_power = (signed char)20;
  #line 8576 
  return (priv->ieee)->iw_mode == old_mode;
}

#line 8589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_set_channel(struct ipw_priv *priv, u8 channel)
{
  #line 8591 
  if ((unsigned int)channel == 0U) {
    #line 8592 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 8592 
      int tmp_0;
      #line 8592 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8592 
                                                               tmp_0 = 73; else 
                                                                    #line 8592 
                                                                    tmp_0 = 85;
      #line 8592 
      printk((char *)"\001",tmp_0,(char *)"ipw_set_channel");
    }
    #line 8593 
    priv->config &= 4294967294U;
    #line 8594 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 8594 
      int tmp_2;
      #line 8594 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8594 
                                                               tmp_2 = 73; else 
                                                                    #line 8594 
                                                                    tmp_2 = 85;
      #line 8594 
      printk((char *)"\001",tmp_2,(char *)"ipw_set_channel");
    }
    #line 8596 
    ipw_associate((void *)priv);
    #line 8597 
    return 0;
  }
  #line 8600 
  priv->config |= 1U;
  #line 8602 
  if ((int)priv->channel == (int)channel) {
    #line 8603 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 8603 
      int tmp_4;
      #line 8603 
      ;
      #line 8603 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8603 
                                                               tmp_4 = 73; else 
                                                                    #line 8603 
                                                                    tmp_4 = 85;
      #line 8603 
      printk((char *)"\001",tmp_4,(char *)"ipw_set_channel",(int)channel);
    }
    #line 8605 
    return 0;
  }
  #line 8608 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 8608 
    int tmp_6;
    #line 8608 
    ;
    #line 8608 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8608 
                                                             tmp_6 = 73; else 
                                                                    #line 8608 
                                                                    tmp_6 = 85;
    #line 8608 
    printk((char *)"\001",tmp_6,(char *)"ipw_set_channel",(int)channel);
  }
  #line 8609 
  priv->channel = channel;
  #line 8612 
  if ((priv->ieee)->iw_mode == 6) {
    #line 8613 
    int i;
    #line 8614 
    if ((priv->status & 2097152U) != 0U) {
      #line 8615 
      if ((ipw_debug_level & 2048U) != 0U) {
        #line 8615 
        int tmp_8;
        #line 8615 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 8615 
                                                                 tmp_8 = 73; else 
                                                                    #line 8615 
                                                                    tmp_8 = 85;
        #line 8615 
        printk((char *)"\001",tmp_8,(char *)"ipw_set_channel");
      }
      #line 8617 
      ipw_abort_scan(priv);
    }
    #line 8620 
    i = 1000;
    #line 8620 
    while (i != 0 && (priv->status & 2097152U) != 0U) {
      #line 8621 
      __const_udelay(42950UL);
      #line 8620 
      i --;
    }
    #line 8623 
    if ((priv->status & 2097152U) != 0U) {
      #line 8624 
      if ((ipw_debug_level & 2048U) != 0U) {
        #line 8624 
        int tmp_10;
        #line 8624 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 8624 
                                                                 tmp_10 = 73; else 
                                                                    #line 8624 
                                                                    tmp_10 = 85;
        #line 8624 
        printk((char *)"\001",tmp_10,(char *)"ipw_set_channel");
      }
    }
    else 
      #line 8626 
      if ((ipw_debug_level & 2048U) != 0U) {
        #line 8626 
        int tmp_12;
        #line 8626 
        ;
        #line 8626 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 8626 
                                                                 tmp_12 = 73; else 
                                                                    #line 8626 
                                                                    tmp_12 = 85;
        #line 8626 
        printk((char *)"\001",tmp_12,(char *)"ipw_set_channel",1000 - i);
      }
    #line 8629 
    return 0;
  }
  #line 8634 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 8634 
    int tmp_14;
    #line 8634 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8634 
                                                             tmp_14 = 73; else 
                                                                    #line 8634 
                                                                    tmp_14 = 85;
    #line 8634 
    printk((char *)"\001",tmp_14,(char *)"ipw_set_channel");
  }
  #line 8635 
  if (ipw_disassociate((void *)priv) == 0) 
                                           #line 8636 
                                           ipw_associate((void *)priv);
  #line 8638 
  return 0;
}

#line 8641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_freq(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8648 
  int i;
  #line 8649 
  u8 channel;
  #line 8649 
  u8 flags;
  #line 8650 
  int band;
  #line 8645 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8646 
  struct libipw_geo *geo = libipw_get_geo(priv->ieee);
  #line 8647 
  struct iw_freq *fwrq = & wrqu->freq;
  #line 8648 
  int ret = 0;
  #line 8652 
  if (fwrq->m == 0) {
    #line 8653 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 8653 
      int tmp_2;
      #line 8653 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8653 
                                                               tmp_2 = 73; else 
                                                                    #line 8653 
                                                                    tmp_2 = 85;
      #line 8653 
      printk((char *)"\001",tmp_2,(char *)"ipw_wx_set_freq");
    }
    #line 8654 
    cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
    #line 8655 
    ret = ipw_set_channel(priv,(unsigned char)0);
    #line 8656 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 8657 
    return ret;
  }
  #line 8660 
  if ((int)fwrq->e == 1) {
    #line 8661 
    channel = libipw_freq_to_channel(priv->ieee,(unsigned int)fwrq->m);
    #line 8662 
    if ((unsigned int)channel == 0U) 
                                     #line 8663 
                                     return -22;
  }
  else 
       #line 8665 
       channel = (unsigned char)fwrq->m;
  #line 8667 
  band = libipw_is_valid_channel(priv->ieee,(unsigned char)((int)channel));
  #line 8667 
  if (band == 0) 
                 #line 8668 
                 return -22;
  #line 8670 
  if ((priv->ieee)->iw_mode == 1) {
    #line 8671 
    i = libipw_channel_to_index(priv->ieee,(unsigned char)((int)channel));
    #line 8672 
    if (i == -1) 
                 #line 8673 
                 return -22;
    #line 8675 
    if (band == 1) 
                   #line 8675 
                   flags = geo->bg[i].flags; else 
                                                  #line 8675 
                                                  flags = geo->a[i].flags;
    #line 8677 
    if (((int)flags & 1) != 0) {
      #line 8678 
      if ((ipw_debug_level & 8U) != 0U) {
        #line 8678 
        int tmp_4;
        #line 8678 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 8678 
                                                                 tmp_4 = 73; else 
                                                                    #line 8678 
                                                                    tmp_4 = 85;
        #line 8678 
        printk((char *)"\001",tmp_4,(char *)"ipw_wx_set_freq");
      }
      #line 8679 
      return -22;
    }
  }
  #line 8683 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8683 
    int tmp_6;
    #line 8683 
    ;
    #line 8683 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8683 
                                                             tmp_6 = 73; else 
                                                                    #line 8683 
                                                                    tmp_6 = 85;
    #line 8683 
    printk((char *)"\001",tmp_6,(char *)"ipw_wx_set_freq",fwrq->m);
  }
  #line 8684 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 8685 
  ret = ipw_set_channel(priv,(unsigned char)((int)channel));
  #line 8686 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 8687 
  return ret;
}

#line 8690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_freq(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8694 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8696 
  wrqu->freq.e = (short)0;
  #line 8700 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 8701 
  if ((priv->config & 1U) != 0U || (priv->status & 384U) != 0U) {
    #line 8703 
    int i;
    #line 8705 
    i = libipw_channel_to_index(priv->ieee,(unsigned char)((int)priv->channel));
    #line 8706 
    if ((long)(i == -1) != 0L) {
      #line 8707 
      ldv_inline_asm();
      #line 8708 
      ldv_inline_asm();
      #line 8709 
      ldv_inline_asm();
      #line 8706 
      ;
    }
    #line 8707 
    wrqu->freq.e = (short)1;
    #line 8709 
    switch (libipw_is_valid_channel(priv->ieee,
                                (unsigned char)((int)priv->channel))) {
      #line 8710 
      case 2: 
              #line 8710 
      ;
      #line 8711 
      wrqu->freq.m = (int)((priv->ieee)->geo.a[i].freq * 100000U);
      #line 8712 
      break;
      #line 8714 
      case 1: 
              #line 8714 
      ;
      #line 8715 
      wrqu->freq.m = (int)((priv->ieee)->geo.bg[i].freq * 100000U);
      #line 8716 
      break;
      #line 8718 
      default: 
               #line 8718 
      ;
      #line 8720 
      ldv_inline_asm();
      #line 8721 
      ldv_inline_asm();
      #line 8722 
      ldv_inline_asm();
      #line 8719 
      ;
    }
  }
  else 
       #line 8722 
       wrqu->freq.m = 0;
  #line 8724 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 8725 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8725 
    int tmp_2;
    #line 8725 
    ;
    #line 8725 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8725 
                                                             tmp_2 = 73; else 
                                                                    #line 8725 
                                                                    tmp_2 = 85;
    #line 8725 
    printk((char *)"\001",tmp_2,(char *)"ipw_wx_get_freq",(int)priv->channel);
  }
  #line 8726 
  return 0;
}

#line 8729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_mode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8733 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8734 
  int err = 0;
  #line 8736 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8736 
    int tmp_1;
    #line 8736 
    ;
    #line 8736 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8736 
                                                             tmp_1 = 73; else 
                                                                    #line 8736 
                                                                    tmp_1 = 85;
    #line 8736 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_mode",wrqu->mode);
  }
  #line 8738 
  switch (wrqu->mode) {
    #line 8740 
    case (__u32)6: 
                   #line 8740 
    ;
    #line 8742 
    case (__u32)1: 
                   #line 8742 
    ;
    #line 8743 
    case (__u32)2: 
                   #line 8743 
    ;
    #line 8744 
    break;
    #line 8745 
    case (__u32)0: 
                   #line 8745 
    ;
    #line 8746 
    wrqu->mode = 2U;
    #line 8747 
    break;
    #line 8748 
    default: 
             #line 8748 
    ;
    #line 8749 
    return -22;
  }
  #line 8751 
  if (wrqu->mode == (unsigned int)(priv->ieee)->iw_mode) 
                                                         #line 8752 
                                                         return 0;
  #line 8754 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 8756 
  ipw_sw_reset(priv,0);
  #line 8759 
  if ((priv->ieee)->iw_mode == 6) 
                                  #line 8760 
                                  (priv->net_dev)->type = (unsigned short)1U;
  #line 8762 
  if (wrqu->mode == 6U) 
                        #line 8764 
                        (priv->net_dev)->type = (unsigned short)803U;
  #line 8772 
  free_firmware();
  #line 8774 
  (priv->ieee)->iw_mode = (int)wrqu->mode;
  #line 8776 
  cif_schedule_work(& priv->adapter_restart);
  #line 8777 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 8778 
  return err;
}

#line 8781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_mode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8785 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8786 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 8787 
  wrqu->mode = (unsigned int)(priv->ieee)->iw_mode;
  #line 8788 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8788 
    int tmp_1;
    #line 8788 
    ;
    #line 8788 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8788 
                                                             tmp_1 = 73; else 
                                                                    #line 8788 
                                                                    tmp_1 = 85;
    #line 8788 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_mode",wrqu->mode);
  }
  #line 8789 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 8790 
  return 0;
}

#line 8794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static s32 timeout_duration[5U] = {350000, 250000, 75000, 37000, 25000};
#line 8802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static s32 period_duration[5U] = {400000, 700000, 1000000, 1000000, 1000000};
#line 8810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_range(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8837 
  u8 __UNIQUE_ID___x499;
  #line 8837 
  int tmp_1;
  #line 8817 
  int j;
  #line 8814 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8815 
  struct iw_range *range = (struct iw_range *)extra;
  #line 8816 
  struct libipw_geo *geo = libipw_get_geo(priv->ieee);
  #line 8817 
  int i = 0;
  #line 8819 
  wrqu->data.length = (unsigned short)568U;
  #line 8820 
  memset((void *)range,0,568UL);
  #line 8823 
  range->throughput = 27000000U;
  #line 8825 
  range->max_qual.qual = (unsigned char)100U;
  #line 8827 
  range->max_qual.level = (unsigned char)0U;
  #line 8828 
  range->max_qual.noise = (unsigned char)0U;
  #line 8829 
  range->max_qual.updated = (unsigned char)7U;
  #line 8831 
  range->avg_qual.qual = (unsigned char)70U;
  #line 8833 
  range->avg_qual.level = (unsigned char)0U;
  #line 8834 
  range->avg_qual.noise = (unsigned char)0U;
  #line 8835 
  range->avg_qual.updated = (unsigned char)7U;
  #line 8836 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  {
    #line 8837 
    __UNIQUE_ID___x499 = priv->rates.num_rates;
    #line 8837 
    unsigned char __UNIQUE_ID___y500 = (unsigned char)32U;
    #line 8837 
    if ((int)__UNIQUE_ID___x499 < (int)__UNIQUE_ID___y500) 
                                                           #line 8837 
                                                           tmp_1 = (int)__UNIQUE_ID___x499; else 
                                                                    #line 8837 
                                                                    tmp_1 = (int)__UNIQUE_ID___y500;
    }
  #line 8837 
  range->num_bitrates = (unsigned char)tmp_1;
  #line 8839 
  i = 0;
  #line 8839 
  while ((int)range->num_bitrates > i) {
    #line 8840 
    range->bitrate[i] = ((int)priv->rates.supported_rates[i] & 127) * 500000;
    #line 8839 
    i ++;
  }
  #line 8843 
  range->max_rts = 2304;
  #line 8844 
  range->min_frag = 256;
  #line 8845 
  range->max_frag = 2346;
  #line 8847 
  range->encoding_size[0] = (unsigned short)5U;
  #line 8848 
  range->encoding_size[1] = (unsigned short)13U;
  #line 8849 
  range->num_encoding_sizes = (unsigned char)2U;
  #line 8850 
  range->max_encoding_tokens = (unsigned char)4U;
  #line 8853 
  range->we_version_compiled = (unsigned char)22U;
  #line 8854 
  range->we_version_source = (unsigned char)18U;
  #line 8856 
  i = 0;
  #line 8857 
  if (((priv->ieee)->mode & 6) != 0) {
    #line 8858 
    j = 0;
    #line 8858 
    while ((int)geo->bg_channels > j && i <= 31) {
      #line 8859 
      if ((priv->ieee)->iw_mode == 1 && ((int)geo->bg[j].flags & 1) != 0) 
        #line 8861 
        goto __Cont;
      #line 8863 
      range->freq[i].i = geo->bg[j].channel;
      #line 8864 
      range->freq[i].m = (int)(geo->bg[j].freq * 100000U);
      #line 8865 
      range->freq[i].e = (short)1;
      #line 8866 
      i ++;
      #line 8858 
      __Cont: 
              #line 8858 
      j ++;
    }
  }
  #line 8870 
  if (((priv->ieee)->mode & 1) != 0) {
    #line 8871 
    j = 0;
    #line 8871 
    while ((int)geo->a_channels > j && i <= 31) {
      #line 8872 
      if ((priv->ieee)->iw_mode == 1 && ((int)geo->a[j].flags & 1) != 0) 
        #line 8874 
        goto __Cont_0;
      #line 8876 
      range->freq[i].i = geo->a[j].channel;
      #line 8877 
      range->freq[i].m = (int)(geo->a[j].freq * 100000U);
      #line 8878 
      range->freq[i].e = (short)1;
      #line 8879 
      i ++;
      #line 8871 
      __Cont_0: 
                #line 8871 
      j ++;
    }
  }
  #line 8883 
  range->num_channels = (unsigned short)i;
  #line 8884 
  range->num_frequency = (unsigned char)i;
  #line 8886 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 8889 
  range->event_capa[0] = 103284816U;
  #line 8893 
  range->event_capa[1] = 1024U;
  #line 8895 
  range->enc_capa = 15U;
  #line 8898 
  range->scan_capa = (unsigned char)33U;
  #line 8900 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8900 
    int tmp_4;
    #line 8900 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8900 
                                                             tmp_4 = 73; else 
                                                                    #line 8900 
                                                                    tmp_4 = 85;
    #line 8900 
    printk((char *)"\001",tmp_4,(char *)"ipw_wx_get_range");
  }
  #line 8901 
  return 0;
}

#line 8904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_wap(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8908 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8910 
  if ((unsigned int)wrqu->ap_addr.sa_family != 1U) 
                                                   #line 8911 
                                                   return -22;
  #line 8912 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 8913 
  if ((int)is_broadcast_ether_addr((u8 *)(& wrqu->ap_addr.sa_data)) != 0) 
    #line 8913 
    goto _LOR;
  else {
    #line 8913 
    if ((int)is_zero_ether_addr((u8 *)(& wrqu->ap_addr.sa_data)) != 0) {
      #line 8913 
      _LOR: {
              #line 8916 
              if ((ipw_debug_level & 8U) != 0U) {
                #line 8916 
                int tmp_1;
                #line 8916 
                if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                  #line 8916 
                  tmp_1 = 73; else 
                                   #line 8916 
                                   tmp_1 = 85;
                #line 8916 
                printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_wap");
              }
              #line 8917 
              priv->config &= 4294967291U;
              #line 8918 
              if ((ipw_debug_level & 4100U) != 0U) {
                #line 8918 
                int tmp_3;
                #line 8918 
                if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                  #line 8918 
                  tmp_3 = 73; else 
                                   #line 8918 
                                   tmp_3 = 85;
                #line 8918 
                printk((char *)"\001",tmp_3,(char *)"ipw_wx_set_wap");
              }
              #line 8920 
              ipw_associate((void *)priv);
              #line 8921 
              cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
              #line 8922 
              return 0;
            }
    }
  }
  #line 8925 
  priv->config |= 4U;
  #line 8926 
  if ((int)ether_addr_equal((u8 *)(& priv->bssid),
                         (u8 *)(& wrqu->ap_addr.sa_data)) != 0) {
    #line 8927 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 8927 
      int tmp_7;
      #line 8927 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8927 
                                                               tmp_7 = 73; else 
                                                                    #line 8927 
                                                                    tmp_7 = 85;
      #line 8927 
      printk((char *)"\001",tmp_7,(char *)"ipw_wx_set_wap");
    }
    #line 8928 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 8929 
    return 0;
  }
  #line 8932 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8932 
    int tmp_10;
    #line 8932 
    ;
    #line 8932 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8932 
                                                             tmp_10 = 73; else 
                                                                    #line 8932 
                                                                    tmp_10 = 85;
    #line 8932 
    printk((char *)"\001",tmp_10,(char *)"ipw_wx_set_wap",(char *)(& wrqu->ap_addr.sa_data));
  }
  #line 8935 
  memcpy((void *)(& priv->bssid),(void *)(& wrqu->ap_addr.sa_data),6UL);
  #line 8938 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 8938 
    int tmp_12;
    #line 8938 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8938 
                                                             tmp_12 = 73; else 
                                                                    #line 8938 
                                                                    tmp_12 = 85;
    #line 8938 
    printk((char *)"\001",tmp_12,(char *)"ipw_wx_set_wap");
  }
  #line 8939 
  if (ipw_disassociate((void *)priv) == 0) 
                                           #line 8940 
                                           ipw_associate((void *)priv);
  #line 8942 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 8943 
  return 0;
}

#line 8946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_wap(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8950 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8954 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 8955 
  if ((priv->config & 4U) != 0U || (priv->status & 384U) != 0U) {
    #line 8957 
    wrqu->ap_addr.sa_family = (unsigned short)1U;
    #line 8958 
    memcpy((void *)(& wrqu->ap_addr.sa_data),(void *)(& priv->bssid),6UL);
  }
  else 
       #line 8960 
       eth_zero_addr((u8 *)(& wrqu->ap_addr.sa_data));
  #line 8962 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8962 
    int tmp_1;
    #line 8962 
    ;
    #line 8962 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8962 
                                                             tmp_1 = 73; else 
                                                                    #line 8962 
                                                                    tmp_1 = 85;
    #line 8962 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_wap",(char *)(& wrqu->ap_addr.sa_data));
  }
  #line 8964 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 8965 
  return 0;
}

#line 8968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_essid(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 8987 
  int __UNIQUE_ID___x501;
  #line 8987 
  int tmp_2;
  #line 8973 
  int length;
  #line 8972 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 8975 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 8977 
  if ((unsigned int)wrqu->essid.flags == 0U) {
    #line 8979 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 8979 
      int tmp_1;
      #line 8979 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 8979 
                                                               tmp_1 = 73; else 
                                                                    #line 8979 
                                                                    tmp_1 = 85;
      #line 8979 
      printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_essid");
    }
    #line 8980 
    ipw_disassociate((void *)priv);
    #line 8981 
    priv->config &= 4294967293U;
    #line 8982 
    ipw_associate((void *)priv);
    #line 8983 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 8984 
    return 0;
  }
  {
    #line 8987 
    __UNIQUE_ID___x501 = (int)wrqu->essid.length;
    #line 8987 
    int __UNIQUE_ID___y502 = 32;
    #line 8987 
    if (__UNIQUE_ID___x501 < __UNIQUE_ID___y502) 
                                                 #line 8987 
                                                 tmp_2 = __UNIQUE_ID___x501; else 
                                                                    #line 8987 
                                                                    tmp_2 = __UNIQUE_ID___y502;
    }
  #line 8987 
  length = tmp_2;
  #line 8989 
  priv->config |= 2U;
  #line 8991 
  if ((int)priv->essid_len == length) {
    #line 8991 
    if (memcmp((void *)(& priv->essid),(void *)extra,(unsigned long)length) == 0) 
      #line 8992 
      if ((priv->status & 384U) != 0U) {
        #line 8993 
        if ((ipw_debug_level & 8U) != 0U) {
          #line 8993 
          int tmp_5;
          #line 8993 
          if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                   #line 8993 
                                                                   tmp_5 = 73; else 
                                                                    #line 8993 
                                                                    tmp_5 = 85;
          #line 8993 
          printk((char *)"\001",tmp_5,(char *)"ipw_wx_set_essid");
        }
        #line 8994 
        cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
        #line 8995 
        return 0;
      }
  }
  #line 8998 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 8998 
    int tmp_8;
    #line 8998 
    ;
    #line 8998 
    ;
    #line 8998 
    ;
    #line 8998 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 8998 
                                                             tmp_8 = 73; else 
                                                                    #line 8998 
                                                                    tmp_8 = 85;
    #line 8998 
    printk((char *)"\001",tmp_8,(char *)"ipw_wx_set_essid",length,extra,length);
  }
  #line 9000 
  priv->essid_len = (unsigned char)length;
  #line 9001 
  memcpy((void *)(& priv->essid),(void *)extra,(unsigned long)priv->essid_len);
  #line 9004 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 9004 
    int tmp_10;
    #line 9004 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9004 
                                                             tmp_10 = 73; else 
                                                                    #line 9004 
                                                                    tmp_10 = 85;
    #line 9004 
    printk((char *)"\001",tmp_10,(char *)"ipw_wx_set_essid");
  }
  #line 9005 
  if (ipw_disassociate((void *)priv) == 0) 
                                           #line 9006 
                                           ipw_associate((void *)priv);
  #line 9008 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9009 
  return 0;
}

#line 9012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_essid(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9016 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9020 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9021 
  if ((priv->config & 2U) != 0U || (priv->status & 384U) != 0U) {
    #line 9023 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 9023 
      int tmp_1;
      #line 9023 
      ;
      #line 9023 
      ;
      #line 9023 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 9023 
                                                               tmp_1 = 73; else 
                                                                    #line 9023 
                                                                    tmp_1 = 85;
      #line 9023 
      printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_essid",(int)priv->essid_len,(u8 *)(& priv->essid));
    }
    #line 9025 
    memcpy((void *)extra,(void *)(& priv->essid),(unsigned long)priv->essid_len);
    #line 9026 
    wrqu->essid.length = (unsigned short)priv->essid_len;
    #line 9027 
    wrqu->essid.flags = (unsigned short)1U;
  }
  else {
    #line 9029 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 9029 
      int tmp_3;
      #line 9029 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 9029 
                                                               tmp_3 = 73; else 
                                                                    #line 9029 
                                                                    tmp_3 = 85;
      #line 9029 
      printk((char *)"\001",tmp_3,(char *)"ipw_wx_get_essid");
    }
    #line 9030 
    wrqu->essid.length = (unsigned short)0U;
    #line 9031 
    wrqu->essid.flags = (unsigned short)0U;
  }
  #line 9033 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9034 
  return 0;
}

#line 9037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_nick(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9047 
  unsigned long __UNIQUE_ID___x503;
  #line 9047 
  unsigned long tmp_2;
  #line 9041 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9043 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9043 
    int tmp_1;
    #line 9043 
    ;
    #line 9043 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9043 
                                                             tmp_1 = 73; else 
                                                                    #line 9043 
                                                                    tmp_1 = 85;
    #line 9043 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_nick",extra);
  }
  #line 9044 
  if ((unsigned int)wrqu->data.length > 32U) 
                                             #line 9045 
                                             return -7;
  #line 9046 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  {
    #line 9047 
    __UNIQUE_ID___x503 = (unsigned long)wrqu->data.length;
    #line 9047 
    unsigned long __UNIQUE_ID___y504 = 32UL;
    #line 9047 
    if (__UNIQUE_ID___x503 < __UNIQUE_ID___y504) 
                                                 #line 9047 
                                                 tmp_2 = __UNIQUE_ID___x503; else 
                                                                    #line 9047 
                                                                    tmp_2 = __UNIQUE_ID___y504;
    }
  #line 9047 
  wrqu->data.length = (unsigned short)tmp_2;
  #line 9048 
  memset((void *)(& priv->nick),0,32UL);
  #line 9049 
  memcpy((void *)(& priv->nick),(void *)extra,(unsigned long)wrqu->data.length);
  #line 9050 
  if ((ipw_debug_level & 268435456U) != 0U) {
    #line 9050 
    int tmp_5;
    #line 9050 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9050 
                                                             tmp_5 = 73; else 
                                                                    #line 9050 
                                                                    tmp_5 = 85;
    #line 9050 
    printk((char *)"\001",tmp_5,(char *)"ipw_wx_set_nick");
  }
  #line 9051 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9052 
  return 0;
}

#line 9056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_nick(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9060 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9061 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9061 
    int tmp_1;
    #line 9061 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9061 
                                                             tmp_1 = 73; else 
                                                                    #line 9061 
                                                                    tmp_1 = 85;
    #line 9061 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_nick");
  }
  #line 9062 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9063 
  wrqu->data.length = (unsigned short)cif_strlen((char *)(& priv->nick));
  #line 9064 
  memcpy((void *)extra,(void *)(& priv->nick),(unsigned long)wrqu->data.length);
  #line 9065 
  wrqu->data.flags = (unsigned short)1U;
  #line 9066 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9067 
  return 0;
}

#line 9070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_sens(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9074 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9075 
  int err = 0;
  #line 9077 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9077 
    int tmp_1;
    #line 9077 
    ;
    #line 9077 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9077 
                                                             tmp_1 = 73; else 
                                                                    #line 9077 
                                                                    tmp_1 = 85;
    #line 9077 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_sens",wrqu->sens.value);
  }
  #line 9078 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9078 
    int tmp_3;
    #line 9078 
    ;
    #line 9078 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9078 
                                                             tmp_3 = 73; else 
                                                                    #line 9078 
                                                                    tmp_3 = 85;
    #line 9078 
    printk((char *)"\001",tmp_3,(char *)"ipw_wx_set_sens",wrqu->sens.value * 3);
  }
  #line 9079 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9081 
  if ((unsigned int)wrqu->sens.fixed == 0U) {
    #line 9083 
    priv->roaming_threshold = 8U;
    #line 9084 
    priv->disassociate_threshold = 24U;
    #line 9085 
    goto out;
  }
  #line 9087 
  if ((unsigned int)wrqu->sens.value + 4294967295U > 29U) {
    #line 9089 
    err = -22;
    #line 9090 
    goto out;
  }
  #line 9093 
  priv->roaming_threshold = (unsigned int)wrqu->sens.value;
  #line 9094 
  priv->disassociate_threshold = (unsigned int)(wrqu->sens.value * 3);
  #line 9095 
  out: 
       #line 9095 
  ;
  #line 9096 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9097 
  return err;
}

#line 9100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_sens(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9104 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9105 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9106 
  wrqu->sens.fixed = (unsigned char)1U;
  #line 9107 
  wrqu->sens.value = (int)priv->roaming_threshold;
  #line 9108 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9110 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9110 
    char *tmp_0;
    #line 9110 
    int tmp_2;
    #line 9110 
    ;
    #line 9110 
    if ((unsigned int)wrqu->power.disabled != 0U) 
                                                  #line 9110 
                                                  tmp_0 = (char *)"OFF"; else 
                                                                    #line 9110 
                                                                    tmp_0 = (char *)"ON";
    #line 9110 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9110 
                                                             tmp_2 = 73; else 
                                                                    #line 9110 
                                                                    tmp_2 = 85;
    #line 9110 
    printk((char *)"\001",tmp_2,(char *)"ipw_wx_get_sens",tmp_0,wrqu->power.value);
  }
  #line 9113 
  return 0;
}

#line 9116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_rate(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9123 
  u32 fixed;
  #line 9123 
  u32 mask;
  #line 9121 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9122 
  u32 target_rate = (unsigned int)wrqu->bitrate.value;
  #line 9129 
  if (target_rate == 4294967295U) {
    #line 9130 
    fixed = 0U;
    #line 9131 
    mask = 4095U;
    #line 9133 
    goto apply;
  }
  #line 9136 
  mask = 0U;
  #line 9137 
  fixed = (unsigned int)wrqu->bitrate.fixed;
  #line 9139 
  if (target_rate == 1000000U || fixed == 0U) 
                                              #line 9140 
                                              mask |= 1U;
  #line 9141 
  if (target_rate == 1000000U) 
                               #line 9142 
                               goto apply;
  #line 9144 
  if (target_rate == 2000000U || fixed == 0U) 
                                              #line 9145 
                                              mask |= 2U;
  #line 9146 
  if (target_rate == 2000000U) 
                               #line 9147 
                               goto apply;
  #line 9149 
  if (target_rate == 5500000U || fixed == 0U) 
                                              #line 9150 
                                              mask |= 4U;
  #line 9151 
  if (target_rate == 5500000U) 
                               #line 9152 
                               goto apply;
  #line 9154 
  if (target_rate == 6000000U || fixed == 0U) 
                                              #line 9155 
                                              mask |= 16U;
  #line 9156 
  if (target_rate == 6000000U) 
                               #line 9157 
                               goto apply;
  #line 9159 
  if (target_rate == 9000000U || fixed == 0U) 
                                              #line 9160 
                                              mask |= 32U;
  #line 9161 
  if (target_rate == 9000000U) 
                               #line 9162 
                               goto apply;
  #line 9164 
  if (target_rate == 11000000U || fixed == 0U) 
                                               #line 9165 
                                               mask |= 8U;
  #line 9166 
  if (target_rate == 11000000U) 
                                #line 9167 
                                goto apply;
  #line 9169 
  if (target_rate == 12000000U || fixed == 0U) 
                                               #line 9170 
                                               mask |= 64U;
  #line 9171 
  if (target_rate == 12000000U) 
                                #line 9172 
                                goto apply;
  #line 9174 
  if (target_rate == 18000000U || fixed == 0U) 
                                               #line 9175 
                                               mask |= 128U;
  #line 9176 
  if (target_rate == 18000000U) 
                                #line 9177 
                                goto apply;
  #line 9179 
  if (target_rate == 24000000U || fixed == 0U) 
                                               #line 9180 
                                               mask |= 256U;
  #line 9181 
  if (target_rate == 24000000U) 
                                #line 9182 
                                goto apply;
  #line 9184 
  if (target_rate == 36000000U || fixed == 0U) 
                                               #line 9185 
                                               mask |= 512U;
  #line 9186 
  if (target_rate == 36000000U) 
                                #line 9187 
                                goto apply;
  #line 9189 
  if (target_rate == 48000000U || fixed == 0U) 
                                               #line 9190 
                                               mask |= 1024U;
  #line 9191 
  if (target_rate == 48000000U) 
                                #line 9192 
                                goto apply;
  #line 9194 
  if (target_rate == 54000000U || fixed == 0U) 
                                               #line 9195 
                                               mask |= 2048U;
  #line 9196 
  if (target_rate == 54000000U) 
                                #line 9197 
                                goto apply;
  #line 9199 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9199 
    int tmp_1;
    #line 9199 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9199 
                                                             tmp_1 = 73; else 
                                                                    #line 9199 
                                                                    tmp_1 = 85;
    #line 9199 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_rate");
  }
  #line 9200 
  return -22;
  #line 9202 
  apply: 
         #line 9202 
  ;
  #line 9203 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9203 
    char *tmp_2;
    #line 9203 
    int tmp_4;
    #line 9203 
    if (fixed != 0U) 
                     #line 9203 
                     tmp_2 = (char *)"fixed"; else 
                                                   #line 9203 
                                                   tmp_2 = (char *)"sub-rates";
    #line 9203 
    ;
    #line 9203 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9203 
                                                             tmp_4 = 73; else 
                                                                    #line 9203 
                                                                    tmp_4 = 85;
    #line 9203 
    printk((char *)"\001",tmp_4,(char *)"ipw_wx_set_rate",mask,tmp_2);
  }
  #line 9205 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9206 
  if (mask == 4095U) {
    #line 9207 
    priv->config &= 4294967167U;
    #line 9208 
    ipw_set_fixed_rate(priv,(priv->ieee)->mode);
  }
  else 
       #line 9210 
       priv->config |= 128U;
  #line 9212 
  if ((unsigned int)priv->rates_mask == mask) {
    #line 9213 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 9213 
      int tmp_6;
      #line 9213 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 9213 
                                                               tmp_6 = 73; else 
                                                                    #line 9213 
                                                                    tmp_6 = 85;
      #line 9213 
      printk((char *)"\001",tmp_6,(char *)"ipw_wx_set_rate");
    }
    #line 9214 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 9215 
    return 0;
  }
  #line 9218 
  priv->rates_mask = (unsigned short)mask;
  #line 9221 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 9221 
    int tmp_8;
    #line 9221 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9221 
                                                             tmp_8 = 73; else 
                                                                    #line 9221 
                                                                    tmp_8 = 85;
    #line 9221 
    printk((char *)"\001",tmp_8,(char *)"ipw_wx_set_rate");
  }
  #line 9222 
  if (ipw_disassociate((void *)priv) == 0) 
                                           #line 9223 
                                           ipw_associate((void *)priv);
  #line 9225 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9226 
  return 0;
}

#line 9229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_rate(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9233 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9234 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9235 
  wrqu->bitrate.value = (int)priv->last_rate;
  #line 9236 
  wrqu->bitrate.fixed = (unsigned char)((unsigned int)((unsigned char)(priv->config >> 7)) & 1U);
  #line 9237 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9238 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9238 
    int tmp_1;
    #line 9238 
    ;
    #line 9238 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9238 
                                                             tmp_1 = 73; else 
                                                                    #line 9238 
                                                                    tmp_1 = 85;
    #line 9238 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_rate",wrqu->bitrate.value);
  }
  #line 9239 
  return 0;
}

#line 9242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_rts(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9246 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9247 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9248 
  if ((unsigned int)wrqu->rts.disabled != 0U || (unsigned int)wrqu->rts.fixed == 0U) 
    #line 9249 
    priv->rts_threshold = (unsigned short)2304U;
  else {
    #line 9251 
    if ((unsigned int)wrqu->rts.value + 4294967295U > 2303U) {
      #line 9253 
      cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
      #line 9254 
      return -22;
    }
    #line 9256 
    priv->rts_threshold = (unsigned short)wrqu->rts.value;
  }
  #line 9259 
  ipw_send_rts_threshold(priv,(unsigned short)((int)priv->rts_threshold));
  #line 9260 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9261 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9261 
    int tmp_1;
    #line 9261 
    ;
    #line 9261 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9261 
                                                             tmp_1 = 73; else 
                                                                    #line 9261 
                                                                    tmp_1 = 85;
    #line 9261 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_rts",(int)priv->rts_threshold);
  }
  #line 9262 
  return 0;
}

#line 9265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_rts(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9269 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9270 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9271 
  wrqu->rts.value = (int)priv->rts_threshold;
  #line 9272 
  wrqu->rts.fixed = (unsigned char)0U;
  #line 9273 
  wrqu->rts.disabled = (unsigned char)(wrqu->rts.value == 2304);
  #line 9274 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9275 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9275 
    int tmp_1;
    #line 9275 
    ;
    #line 9275 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9275 
                                                             tmp_1 = 73; else 
                                                                    #line 9275 
                                                                    tmp_1 = 85;
    #line 9275 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_rts",wrqu->rts.value);
  }
  #line 9276 
  return 0;
}

#line 9279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_txpow(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9283 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9284 
  int err = 0;
  #line 9286 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9287 
  if (ipw_radio_kill_sw(priv,(int)wrqu->power.disabled) != 0) {
    #line 9288 
    err = -115;
    #line 9289 
    goto out;
  }
  #line 9292 
  if ((unsigned int)wrqu->power.fixed == 0U) 
                                             #line 9293 
                                             wrqu->power.value = 20;
  #line 9295 
  if ((unsigned int)wrqu->power.flags != 0U) {
    #line 9296 
    err = -22;
    #line 9297 
    goto out;
  }
  #line 9300 
  if ((unsigned int)wrqu->power.value + 12U > 32U) {
    #line 9302 
    err = -22;
    #line 9303 
    goto out;
  }
  #line 9306 
  priv->tx_power = (signed char)wrqu->power.value;
  #line 9307 
  err = ipw_set_tx_power(priv);
  #line 9308 
  out: 
       #line 9308 
  ;
  #line 9309 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9310 
  return err;
}

#line 9313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_txpow(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9317 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9318 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9319 
  wrqu->power.value = (int)priv->tx_power;
  #line 9320 
  wrqu->power.fixed = (unsigned char)1U;
  #line 9321 
  wrqu->power.flags = (unsigned short)0U;
  #line 9322 
  wrqu->power.disabled = (unsigned char)((priv->status & 12U) != 0U);
  #line 9323 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9325 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9325 
    char *tmp_0;
    #line 9325 
    int tmp_2;
    #line 9325 
    ;
    #line 9325 
    if ((unsigned int)wrqu->power.disabled != 0U) 
                                                  #line 9325 
                                                  tmp_0 = (char *)"OFF"; else 
                                                                    #line 9325 
                                                                    tmp_0 = (char *)"ON";
    #line 9325 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9325 
                                                             tmp_2 = 73; else 
                                                                    #line 9325 
                                                                    tmp_2 = 85;
    #line 9325 
    printk((char *)"\001",tmp_2,(char *)"ipw_wx_get_txpow",tmp_0,wrqu->power.value);
  }
  #line 9328 
  return 0;
}

#line 9331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_frag(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9335 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9336 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9337 
  if ((unsigned int)wrqu->frag.disabled != 0U || (unsigned int)wrqu->frag.fixed == 0U) 
    #line 9338 
    (priv->ieee)->fts = (unsigned short)2346U;
  else {
    #line 9340 
    if ((unsigned int)wrqu->frag.value + 4294967040U > 2090U) {
      #line 9342 
      cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
      #line 9343 
      return -22;
    }
    #line 9346 
    (priv->ieee)->fts = (unsigned short)((unsigned int)((unsigned short)wrqu->frag.value) & 65534U);
  }
  #line 9349 
  ipw_send_frag_threshold(priv,(unsigned short)((int)((unsigned short)wrqu->frag.value)));
  #line 9350 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9351 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9351 
    int tmp_1;
    #line 9351 
    ;
    #line 9351 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9351 
                                                             tmp_1 = 73; else 
                                                                    #line 9351 
                                                                    tmp_1 = 85;
    #line 9351 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_frag",wrqu->frag.value);
  }
  #line 9352 
  return 0;
}

#line 9355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_frag(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9359 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9360 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9361 
  wrqu->frag.value = (int)(priv->ieee)->fts;
  #line 9362 
  wrqu->frag.fixed = (unsigned char)0U;
  #line 9363 
  wrqu->frag.disabled = (unsigned char)(wrqu->frag.value == 2346);
  #line 9364 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9365 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9365 
    int tmp_1;
    #line 9365 
    ;
    #line 9365 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9365 
                                                             tmp_1 = 73; else 
                                                                    #line 9365 
                                                                    tmp_1 = 85;
    #line 9365 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_frag",wrqu->frag.value);
  }
  #line 9367 
  return 0;
}

#line 9370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_retry(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9374 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9376 
  if (((int)wrqu->retry.flags & 8192) != 0 || (unsigned int)wrqu->retry.disabled != 0U) 
    #line 9377 
    return -22;
  #line 9379 
  if (((int)wrqu->retry.flags & 4096) == 0) 
                                            #line 9380 
                                            return 0;
  #line 9382 
  if ((unsigned int)wrqu->retry.value > 254U) 
                                              #line 9383 
                                              return -22;
  #line 9385 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9386 
  if (((int)wrqu->retry.flags & 16) != 0) 
                                          #line 9387 
                                          priv->short_retry_limit = (unsigned char)wrqu->retry.value;
  else 
    #line 9388 
    if (((int)wrqu->retry.flags & 32) != 0) 
                                            #line 9389 
                                            priv->long_retry_limit = (unsigned char)wrqu->retry.value;
    else {
      #line 9391 
      priv->short_retry_limit = (unsigned char)wrqu->retry.value;
      #line 9392 
      priv->long_retry_limit = (unsigned char)wrqu->retry.value;
    }
  #line 9395 
  ipw_send_retry_limit(priv,(unsigned char)((int)priv->short_retry_limit),(unsigned char)((int)priv->long_retry_limit));
  #line 9397 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9398 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9398 
    int tmp_1;
    #line 9398 
    ;
    #line 9398 
    ;
    #line 9398 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9398 
                                                             tmp_1 = 73; else 
                                                                    #line 9398 
                                                                    tmp_1 = 85;
    #line 9398 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_retry",(int)priv->short_retry_limit,(int)priv->long_retry_limit);
  }
  #line 9400 
  return 0;
}

#line 9403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_retry(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9407 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9409 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9410 
  wrqu->retry.disabled = (unsigned char)0U;
  #line 9412 
  if (((int)wrqu->retry.flags & 61440) == 8192) {
    #line 9413 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 9414 
    return -22;
  }
  #line 9417 
  if (((int)wrqu->retry.flags & 32) != 0) {
    #line 9418 
    wrqu->retry.flags = (unsigned short)4128U;
    #line 9419 
    wrqu->retry.value = (int)priv->long_retry_limit;
  }
  else 
    #line 9420 
    if (((int)wrqu->retry.flags & 16) != 0) {
      #line 9421 
      wrqu->retry.flags = (unsigned short)4112U;
      #line 9422 
      wrqu->retry.value = (int)priv->short_retry_limit;
    }
    else {
      #line 9424 
      wrqu->retry.flags = (unsigned short)4096U;
      #line 9425 
      wrqu->retry.value = (int)priv->short_retry_limit;
    }
  #line 9427 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9429 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9429 
    int tmp_1;
    #line 9429 
    ;
    #line 9429 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9429 
                                                             tmp_1 = 73; else 
                                                                    #line 9429 
                                                                    tmp_1 = 85;
    #line 9429 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_retry",wrqu->retry.value);
  }
  #line 9431 
  return 0;
}

#line 9434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_scan(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9438 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9439 
  struct iw_scan_req *req = (struct iw_scan_req *)extra;
  #line 9440 
  struct delayed_work *work = (struct delayed_work *)0;
  #line 9442 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9444 
  priv->user_requested_scan = 1;
  #line 9446 
  if ((unsigned int)wrqu->data.length == 316U) {
    #line 9447 
    if (((int)wrqu->data.flags & 2) != 0) {
      #line 9448 
      int __UNIQUE_ID___x505;
      #line 9448 
      int tmp_0;
      {
        #line 9448 
        __UNIQUE_ID___x505 = (int)req->essid_len;
        #line 9448 
        int __UNIQUE_ID___y506 = 32;
        #line 9448 
        if (__UNIQUE_ID___x505 < __UNIQUE_ID___y506) 
                                                     #line 9448 
                                                     tmp_0 = __UNIQUE_ID___x505; else 
                                                                    #line 9448 
                                                                    tmp_0 = __UNIQUE_ID___y506;
        }
      #line 9448 
      int len = tmp_0;
      #line 9450 
      memcpy((void *)(& priv->direct_scan_ssid),(void *)(& req->essid),(unsigned long)len);
      #line 9451 
      priv->direct_scan_ssid_len = (unsigned char)len;
      #line 9452 
      work = & priv->request_direct_scan;
    }
    else 
      #line 9453 
      if ((unsigned int)req->scan_type == 1U) 
                                              #line 9454 
                                              work = & priv->request_passive_scan;
  }
  else 
       #line 9458 
       work = & priv->request_scan;
  #line 9461 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9463 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9463 
    int tmp_3;
    #line 9463 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9463 
                                                             tmp_3 = 73; else 
                                                                    #line 9463 
                                                                    tmp_3 = 85;
    #line 9463 
    printk((char *)"\001",tmp_3,(char *)"ipw_wx_set_scan");
  }
  #line 9465 
  cif_schedule_delayed_work(work,0UL);
  #line 9467 
  return 0;
}

#line 9470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_scan(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9474 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9475 
  return libipw_wx_get_scan(priv->ieee,info,wrqu,extra);
}

#line 9478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_encode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *key)
{
  #line 9483 
  int ret;
  #line 9482 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9484 
  u32 cap = priv->capability;
  #line 9486 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9487 
  ret = libipw_wx_set_encode(priv->ieee,info,wrqu,key);
  #line 9491 
  if ((priv->capability != cap && (priv->ieee)->iw_mode == 1) && (priv->status & 128U) != 0U) 
    #line 9494 
    ipw_disassociate((void *)priv);
  #line 9496 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9497 
  return ret;
}

#line 9500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_encode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *key)
{
  #line 9504 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9505 
  return libipw_wx_get_encode(priv->ieee,info,wrqu,key);
}

#line 9508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_power(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9513 
  int err;
  #line 9512 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9514 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9515 
  if ((unsigned int)wrqu->power.disabled != 0U) {
    #line 9516 
    priv->power_mode &= 15U;
    #line 9517 
    err = ipw_send_power_mode(priv,0U);
    #line 9518 
    if (err != 0) {
      #line 9519 
      if ((ipw_debug_level & 8U) != 0U) {
        #line 9519 
        int tmp_1;
        #line 9519 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 9519 
                                                                 tmp_1 = 73; else 
                                                                    #line 9519 
                                                                    tmp_1 = 85;
        #line 9519 
        printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_power");
      }
      #line 9520 
      cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
      #line 9521 
      return err;
    }
    #line 9523 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 9523 
      int tmp_3;
      #line 9523 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 9523 
                                                               tmp_3 = 73; else 
                                                                    #line 9523 
                                                                    tmp_3 = 85;
      #line 9523 
      printk((char *)"\001",tmp_3,(char *)"ipw_wx_set_power");
    }
    #line 9524 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 9525 
    return 0;
  }
  #line 9528 
  switch ((int)wrqu->power.flags & 3840) {
    #line 9529 
    case 0: 
            #line 9529 
    ;
    #line 9530 
    case 3840: 
               #line 9530 
    ;
    #line 9531 
    case 768: 
              #line 9531 
    ;
    #line 9532 
    break;
    #line 9533 
    default: 
             #line 9533 
    ;
    #line 9534 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 9534 
      int tmp_5;
      #line 9534 
      ;
      #line 9534 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 9534 
                                                               tmp_5 = 73; else 
                                                                    #line 9534 
                                                                    tmp_5 = 85;
      #line 9534 
      printk((char *)"\001",tmp_5,(char *)"ipw_wx_set_power",(int)wrqu->power.flags);
    }
    #line 9536 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 9537 
    return -95;
  }
  #line 9542 
  if ((priv->power_mode & 15U) == 6U) 
                                      #line 9543 
                                      priv->power_mode = 23U; else 
                                                                   #line 9545 
                                                                   priv->power_mode |= 16U;
  #line 9547 
  err = ipw_send_power_mode(priv,priv->power_mode & 15U);
  #line 9548 
  if (err != 0) {
    #line 9549 
    if ((ipw_debug_level & 8U) != 0U) {
      #line 9549 
      int tmp_7;
      #line 9549 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 9549 
                                                               tmp_7 = 73; else 
                                                                    #line 9549 
                                                                    tmp_7 = 85;
      #line 9549 
      printk((char *)"\001",tmp_7,(char *)"ipw_wx_set_power");
    }
    #line 9550 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 9551 
    return err;
  }
  #line 9554 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9554 
    int tmp_9;
    #line 9554 
    ;
    #line 9554 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9554 
                                                             tmp_9 = 73; else 
                                                                    #line 9554 
                                                                    tmp_9 = 85;
    #line 9554 
    printk((char *)"\001",tmp_9,(char *)"ipw_wx_set_power",priv->power_mode);
  }
  #line 9555 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9556 
  return 0;
}

#line 9559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_power(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9563 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9564 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9565 
  if ((priv->power_mode & 16U) == 0U) 
                                      #line 9566 
                                      wrqu->power.disabled = (unsigned char)1U; else 
                                                                    #line 9568 
                                                                    wrqu->power.disabled = (unsigned char)0U;
  #line 9570 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9571 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9571 
    int tmp_1;
    #line 9571 
    ;
    #line 9571 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9571 
                                                             tmp_1 = 73; else 
                                                                    #line 9571 
                                                                    tmp_1 = 85;
    #line 9571 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_power",priv->power_mode);
  }
  #line 9573 
  return 0;
}

#line 9576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_powermode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9582 
  int err;
  #line 9580 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9581 
  int mode = *((int *)extra);
  #line 9584 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9585 
  if ((unsigned int)mode + 4294967295U > 6U) 
                                             #line 9586 
                                             mode = 6;
  #line 9588 
  if ((priv->power_mode & 15U) != (unsigned int)mode) {
    #line 9589 
    err = ipw_send_power_mode(priv,(unsigned int)mode);
    #line 9590 
    if (err != 0) {
      #line 9591 
      if ((ipw_debug_level & 8U) != 0U) {
        #line 9591 
        int tmp_1;
        #line 9591 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 9591 
                                                                 tmp_1 = 73; else 
                                                                    #line 9591 
                                                                    tmp_1 = 85;
        #line 9591 
        printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_powermode");
      }
      #line 9592 
      cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
      #line 9593 
      return err;
    }
    #line 9595 
    priv->power_mode = (unsigned int)(mode | 16);
  }
  #line 9597 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9598 
  return 0;
}

#line 9602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_powermode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9606 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9607 
  int level = (int)priv->power_mode & 15;
  #line 9608 
  char *p = extra;
  #line 9610 
  p += (unsigned long)snprintf(p,80UL,(char *)"Power save level: %d ",level);
  #line 9612 
  switch (level) {
    #line 9613 
    case 6: 
            #line 9613 
    ;
    #line 9614 
    p += (unsigned long)snprintf(p,(unsigned long)(80L - (p - extra)),(char *)"(AC)");
    #line 9615 
    break;
    #line 9616 
    case 7: 
            #line 9616 
    ;
    #line 9617 
    p += (unsigned long)snprintf(p,(unsigned long)(80L - (p - extra)),(char *)"(BATTERY)");
    #line 9618 
    break;
    #line 9619 
    default: 
             #line 9619 
    ;
    #line 9623 
    p += (unsigned long)snprintf(p,(unsigned long)(80L - (p - extra)),
                 (char *)"(Timeout %dms, Period %dms)",
                 timeout_duration[level + -1] / 1000,
                 period_duration[level + -1] / 1000);
  }
  #line 9626 
  if ((priv->power_mode & 16U) == 0U) {
    #line 9627 
    p += (unsigned long)snprintf(p,(unsigned long)(80L - (p - extra)),(char *)" OFF");
  }
  #line 9629 
  wrqu->data.length = (unsigned short)((unsigned int)((unsigned short)(p - extra)) + 1U);
  #line 9631 
  return 0;
}

#line 9634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_wireless_mode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9638 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9639 
  int mode = *((int *)extra);
  #line 9640 
  u8 band = (unsigned char)0U;
  #line 9640 
  u8 modulation = (unsigned char)0U;
  #line 9642 
  if (mode == 0 || (mode & -8) != 0) {
    #line 9643 
    printk((char *)"\001",mode);
    #line 9644 
    return -22;
  }
  #line 9646 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9647 
  if ((unsigned int)priv->adapter == 2U) {
    #line 9648 
    (priv->ieee)->abg_true = 1;
    #line 9649 
    if ((mode & 1) != 0) {
      #line 9650 
      band = (unsigned char)((unsigned int)band | 2U);
      #line 9651 
      modulation = (unsigned char)((unsigned int)modulation | 2U);
    }
    else 
         #line 9653 
         (priv->ieee)->abg_true = 0;
  }
  else {
    #line 9655 
    if ((mode & 1) != 0) {
      #line 9656 
      printk((char *)"\001");
      #line 9658 
      cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
      #line 9659 
      return -22;
    }
    #line 9662 
    (priv->ieee)->abg_true = 0;
  }
  #line 9665 
  if ((mode & 2) != 0) {
    #line 9666 
    band = (unsigned char)((unsigned int)band | 1U);
    #line 9667 
    modulation = (unsigned char)((unsigned int)modulation | 1U);
  }
  else 
       #line 9669 
       (priv->ieee)->abg_true = 0;
  #line 9671 
  if ((mode & 4) != 0) {
    #line 9672 
    band = (unsigned char)((unsigned int)band | 1U);
    #line 9673 
    modulation = (unsigned char)((unsigned int)modulation | 2U);
  }
  else 
       #line 9675 
       (priv->ieee)->abg_true = 0;
  #line 9677 
  (priv->ieee)->mode = mode;
  #line 9678 
  (priv->ieee)->freq_band = (int)band;
  #line 9679 
  (priv->ieee)->modulation = (int)modulation;
  #line 9680 
  init_supported_rates(priv,& priv->rates);
  #line 9683 
  if ((ipw_debug_level & 4100U) != 0U) {
    #line 9683 
    int tmp_1;
    #line 9683 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9683 
                                                             tmp_1 = 73; else 
                                                                    #line 9683 
                                                                    tmp_1 = 85;
    #line 9683 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_wireless_mode");
  }
  #line 9684 
  if (ipw_disassociate((void *)priv) == 0) {
    #line 9685 
    ipw_send_supported_rates(priv,& priv->rates);
    #line 9686 
    ipw_associate((void *)priv);
  }
  #line 9690 
  ipw_led_band_on(priv);
  #line 9692 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9692 
    int tmp_3;
    #line 9692 
    int tmp_4;
    #line 9692 
    int tmp_5;
    #line 9692 
    int tmp_7;
    #line 9692 
    if ((mode & 4) != 0) 
                         #line 9692 
                         tmp_3 = 103; else 
                                           #line 9692 
                                           tmp_3 = 46;
    #line 9692 
    if ((mode & 2) != 0) 
                         #line 9692 
                         tmp_4 = 98; else 
                                          #line 9692 
                                          tmp_4 = 46;
    #line 9692 
    if ((mode & 1) != 0) 
                         #line 9692 
                         tmp_5 = 97; else 
                                          #line 9692 
                                          tmp_5 = 46;
    #line 9692 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9692 
                                                             tmp_7 = 73; else 
                                                                    #line 9692 
                                                                    tmp_7 = 85;
    #line 9692 
    printk((char *)"\001",tmp_7,(char *)"ipw_wx_set_wireless_mode",tmp_5,tmp_4,tmp_3);
  }
  #line 9695 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9696 
  return 0;
}

#line 9699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_wireless_mode(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9703 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9704 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9705 
  switch ((priv->ieee)->mode) {
    #line 9706 
    case 1: 
            #line 9706 
    ;
    #line 9707 
    strncpy(extra,(char *)"802.11a (1)",80UL);
    #line 9708 
    break;
    #line 9709 
    case 2: 
            #line 9709 
    ;
    #line 9710 
    strncpy(extra,(char *)"802.11b (2)",80UL);
    #line 9711 
    break;
    #line 9712 
    case 3: 
            #line 9712 
    ;
    #line 9713 
    strncpy(extra,(char *)"802.11ab (3)",80UL);
    #line 9714 
    break;
    #line 9715 
    case 4: 
            #line 9715 
    ;
    #line 9716 
    strncpy(extra,(char *)"802.11g (4)",80UL);
    #line 9717 
    break;
    #line 9718 
    case 5: 
            #line 9718 
    ;
    #line 9719 
    strncpy(extra,(char *)"802.11ag (5)",80UL);
    #line 9720 
    break;
    #line 9721 
    case 6: 
            #line 9721 
    ;
    #line 9722 
    strncpy(extra,(char *)"802.11bg (6)",80UL);
    #line 9723 
    break;
    #line 9724 
    case 7: 
            #line 9724 
    ;
    #line 9725 
    strncpy(extra,(char *)"802.11abg (7)",80UL);
    #line 9726 
    break;
    #line 9727 
    default: 
             #line 9727 
    ;
    #line 9728 
    strncpy(extra,(char *)"unknown",80UL);
    #line 9729 
    break;
  }
  #line 9731 
  *(extra + 79U) = (char)0;
  #line 9733 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9733 
    int tmp_1;
    #line 9733 
    ;
    #line 9733 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9733 
                                                             tmp_1 = 73; else 
                                                                    #line 9733 
                                                                    tmp_1 = 85;
    #line 9733 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_get_wireless_mode",extra);
  }
  #line 9735 
  wrqu->data.length = (unsigned short)((unsigned int)((unsigned short)cif_strlen(extra)) + 1U);
  #line 9736 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9738 
  return 0;
}

#line 9741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_preamble(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9745 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9746 
  int mode = *((int *)extra);
  #line 9747 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9749 
  if (mode == 1) {
    #line 9750 
    if ((priv->config & 16U) == 0U) {
      #line 9751 
      priv->config |= 16U;
      #line 9754 
      if ((ipw_debug_level & 4100U) != 0U) {
        #line 9754 
        int tmp_1;
        #line 9754 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 9754 
                                                                 tmp_1 = 73; else 
                                                                    #line 9754 
                                                                    tmp_1 = 85;
        #line 9754 
        printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_preamble");
      }
      #line 9756 
      if (ipw_disassociate((void *)priv) == 0) 
                                               #line 9757 
                                               ipw_associate((void *)priv);
    }
    #line 9759 
    goto done;
  }
  #line 9762 
  if (mode == 0) {
    #line 9763 
    priv->config &= 4294967279U;
    #line 9764 
    goto done;
  }
  #line 9766 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9767 
  return -22;
  #line 9769 
  done: 
        #line 9769 
  ;
  #line 9770 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9771 
  return 0;
}

#line 9774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_get_preamble(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9778 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9779 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9780 
  if ((priv->config & 16U) != 0U) 
                                  #line 9781 
                                  snprintf((char *)(& wrqu->name),16UL,(char *)"long (1)"); else 
                                                                    #line 9783 
                                                                    snprintf((char *)(& wrqu->name),16UL,(char *)"auto (0)");
  #line 9784 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9785 
  return 0;
}

#line 9789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_set_monitor(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9793 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9794 
  int *parms = (int *)extra;
  #line 9795 
  int enable = *parms > 0;
  #line 9796 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9797 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9797 
    int tmp_1;
    #line 9797 
    ;
    #line 9797 
    ;
    #line 9797 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9797 
                                                             tmp_1 = 73; else 
                                                                    #line 9797 
                                                                    tmp_1 = 85;
    #line 9797 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_set_monitor",enable,*(parms + 1U));
  }
  #line 9798 
  if (enable != 0) {
    #line 9799 
    if ((priv->ieee)->iw_mode != 6) {
      #line 9801 
      (priv->net_dev)->type = (unsigned short)803U;
      #line 9805 
      cif_schedule_work(& priv->adapter_restart);
    }
    #line 9808 
    ipw_set_channel(priv,(unsigned char)((int)((unsigned char)*(parms + 1U))));
  }
  else {
    #line 9810 
    if ((priv->ieee)->iw_mode != 6) {
      #line 9811 
      cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
      #line 9812 
      return 0;
    }
    #line 9814 
    (priv->net_dev)->type = (unsigned short)1U;
    #line 9815 
    cif_schedule_work(& priv->adapter_restart);
  }
  #line 9817 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9818 
  return 0;
}

#line 9823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_reset(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9827 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9828 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9828 
    int tmp_1;
    #line 9828 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9828 
                                                             tmp_1 = 73; else 
                                                                    #line 9828 
                                                                    tmp_1 = 85;
    #line 9828 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_reset");
  }
  #line 9829 
  cif_schedule_work(& priv->adapter_restart);
  #line 9830 
  return 0;
}

#line 9833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wx_sw_reset(struct net_device *dev, struct iw_request_info *info, union iwreq_data *wrqu, char *extra)
{
  #line 9843 
  int ret;
  #line 9837 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 9838 
  union iwreq_data wrqu_sec = {.encoding = {.pointer = (void *)0, .length = (unsigned short)0, .flags = (unsigned short)32768U}};
  #line 9845 
  if ((ipw_debug_level & 8U) != 0U) {
    #line 9845 
    int tmp_1;
    #line 9845 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 9845 
                                                             tmp_1 = 73; else 
                                                                    #line 9845 
                                                                    tmp_1 = 85;
    #line 9845 
    printk((char *)"\001",tmp_1,(char *)"ipw_wx_sw_reset");
  }
  #line 9847 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9849 
  ret = ipw_sw_reset(priv,2);
  #line 9850 
  if (ret == 0) {
    #line 9851 
    free_firmware();
    #line 9852 
    ipw_adapter_restart((void *)priv);
  }
  #line 9857 
  ipw_radio_kill_sw(priv,(int)priv->status & 8);
  #line 9859 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9860 
  libipw_wx_set_encode(priv->ieee,info,& wrqu_sec,(char *)0);
  #line 9861 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 9863 
  if ((priv->status & 12U) == 0U) {
    #line 9865 
    if ((ipw_debug_level & 4100U) != 0U) {
      #line 9865 
      int tmp_3;
      #line 9865 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 9865 
                                                               tmp_3 = 73; else 
                                                                    #line 9865 
                                                                    tmp_3 = 85;
      #line 9865 
      printk((char *)"\001",tmp_3,(char *)"ipw_wx_sw_reset");
    }
    #line 9867 
    if (ipw_disassociate((void *)priv) == 0) 
                                             #line 9868 
                                             ipw_associate((void *)priv);
  }
  #line 9871 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 9873 
  return 0;
}

#line 9877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static iw_handler ipw_wx_handlers[54U] = {[1] = (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& cfg80211_wext_giwname), [4] = & ipw_wx_set_freq, & ipw_wx_get_freq, & ipw_wx_set_mode, & ipw_wx_get_mode, & ipw_wx_set_sens, & ipw_wx_get_sens, [11] = & ipw_wx_get_range, [16] = & iw_handler_set_spy, & iw_handler_get_spy, & iw_handler_set_thrspy, & iw_handler_get_thrspy, & ipw_wx_set_wap, & ipw_wx_get_wap, & ipw_wx_set_mlme, [24] = & ipw_wx_set_scan, & ipw_wx_get_scan, & ipw_wx_set_essid, & ipw_wx_get_essid, & ipw_wx_set_nick, & ipw_wx_get_nick, [32] = & ipw_wx_set_rate, & ipw_wx_get_rate, & ipw_wx_set_rts, & ipw_wx_get_rts, & ipw_wx_set_frag, & ipw_wx_get_frag, & ipw_wx_set_txpow, & ipw_wx_get_txpow, & ipw_wx_set_retry, & ipw_wx_get_retry, & ipw_wx_set_encode, & ipw_wx_get_encode, & ipw_wx_set_power, & ipw_wx_get_power, [48] = & ipw_wx_set_genie, & ipw_wx_get_genie, & ipw_wx_set_auth, & ipw_wx_get_auth, & ipw_wx_set_encodeext, & ipw_wx_get_encodeext};
#line 9935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct iw_priv_args ipw_priv_args[9U] = {{.cmd = 35808U, .set_args = (unsigned short)18433U, .name = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r'}}, {.cmd = 35809U, .get_args = (unsigned short)10320U, .name = {(char)'g', (char)'e', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r'}}, {.cmd = 35810U, .set_args = (unsigned short)18433U, .name = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e'}}, {.cmd = 35811U, .get_args = (unsigned short)10320U, .name = {(char)'g', (char)'e', (char)'t', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e'}}, {.cmd = 35812U, .set_args = (unsigned short)18433U, .name = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'p', (char)'r', (char)'e', (char)'a', (char)'m', (char)'b', (char)'l', (char)'e'}}, {.cmd = 35813U, .get_args = (unsigned short)10256U, .name = {(char)'g', (char)'e', (char)'t', (char)'_', (char)'p', (char)'r', (char)'e', (char)'a', (char)'m', (char)'b', (char)'l', (char)'e'}}, {.cmd = 35814U, .set_args = (unsigned short)18432U, .name = {(char)'r', (char)'e', (char)'s', (char)'e', (char)'t'}}, {.cmd = 35815U, .set_args = (unsigned short)18432U, .name = {(char)'s', (char)'w', (char)'_', (char)'r', (char)'e', (char)'s', (char)'e', (char)'t'}}, {.cmd = 35816U, .set_args = (unsigned short)18434U, .name = {(char)'m', (char)'o', (char)'n', (char)'i', (char)'t', (char)'o', (char)'r'}}};
#line 9973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static iw_handler ipw_priv_handler[9U] = {& ipw_wx_set_powermode, & ipw_wx_get_powermode, & ipw_wx_set_wireless_mode, & ipw_wx_get_wireless_mode, & ipw_wx_set_preamble, & ipw_wx_get_preamble, & ipw_wx_reset, & ipw_wx_sw_reset, & ipw_wx_set_monitor};
#line 9987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct iw_handler_def ipw_wx_handler_def = {.standard = (iw_handler *)(& ipw_wx_handlers), .num_standard = (unsigned short)54U, .num_private = (unsigned short)9U, .num_private_args = (unsigned short)9U, .private = (iw_handler *)(& ipw_priv_handler), .private_args = (struct iw_priv_args *)(& ipw_priv_args), .get_wireless_stats = & ipw_get_wireless_stats};
#line 10002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct iw_statistics *ipw_get_wireless_stats(struct net_device *dev)
{
  #line 10005 
  struct iw_statistics *wstats;
  #line 10004 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 10007 
  wstats = & priv->wstats;
  #line 10014 
  if ((priv->status & 128U) == 0U) {
    #line 10015 
    wstats->miss.beacon = 0U;
    #line 10016 
    wstats->discard.retries = 0U;
    #line 10017 
    wstats->qual.qual = (unsigned char)0U;
    #line 10018 
    wstats->qual.level = (unsigned char)0U;
    #line 10019 
    wstats->qual.noise = (unsigned char)0U;
    #line 10020 
    wstats->qual.updated = (unsigned char)7U;
    #line 10021 
    wstats->qual.updated = (unsigned char)((unsigned int)wstats->qual.updated | 112U);
    #line 10023 
    return wstats;
  }
  #line 10026 
  wstats->qual.qual = (unsigned char)priv->quality;
  #line 10027 
  wstats->qual.level = (unsigned char)priv->exp_avg_rssi;
  #line 10028 
  wstats->qual.noise = (unsigned char)priv->exp_avg_noise;
  #line 10029 
  wstats->qual.updated = (unsigned char)15U;
  #line 10032 
  wstats->miss.beacon = (unsigned int)average_value(& priv->average_missed_beacons);
  #line 10033 
  wstats->discard.retries = priv->last_tx_failures;
  #line 10034 
  wstats->discard.code = (priv->ieee)->ieee_stats.rx_discards_undecryptable;
  #line 10040 
  return wstats;
}

#line 10045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void init_sys_config(struct ipw_sys_config *sys_config)
{
  #line 10047 
  memset((void *)sys_config,0,20UL);
  #line 10048 
  sys_config->bt_coexistence = (unsigned char)0U;
  #line 10049 
  sys_config->answer_broadcast_ssid_probe = (unsigned char)0U;
  #line 10050 
  sys_config->accept_all_data_frames = (unsigned char)0U;
  #line 10051 
  sys_config->accept_non_directed_frames = (unsigned char)1U;
  #line 10052 
  sys_config->exclude_unicast_unencrypted = (unsigned char)0U;
  #line 10053 
  sys_config->disable_unicast_decryption = (unsigned char)1U;
  #line 10054 
  sys_config->exclude_multicast_unencrypted = (unsigned char)0U;
  #line 10055 
  sys_config->disable_multicast_decryption = (unsigned char)1U;
  #line 10056 
  if ((unsigned int)antenna > 3U) 
                                  #line 10057 
                                  antenna = 0;
  #line 10058 
  sys_config->antenna_diversity = (unsigned char)antenna;
  #line 10059 
  sys_config->pass_crc_to_host = (unsigned char)0U;
  #line 10060 
  sys_config->dot11g_auto_detection = (unsigned char)0U;
  #line 10061 
  sys_config->enable_cts_to_self = (unsigned char)0U;
  #line 10062 
  sys_config->bt_coexist_collision_thr = (unsigned char)0U;
  #line 10063 
  sys_config->pass_noise_stats_to_host = (unsigned char)1U;
  #line 10064 
  sys_config->silence_threshold = (unsigned char)30U;
  #line 10065 
  return;
}

#line 10067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_net_open(struct net_device *dev)
{
  #line 10069 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 10069 
    int tmp_0;
    #line 10069 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10069 
                                                             tmp_0 = 73; else 
                                                                    #line 10069 
                                                                    tmp_0 = 85;
    #line 10069 
    printk((char *)"\001",tmp_0,(char *)"ipw_net_open");
  }
  #line 10070 
  netif_start_queue(dev);
  #line 10071 
  return 0;
}

#line 10074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_net_stop(struct net_device *dev)
{
  #line 10076 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 10076 
    int tmp_0;
    #line 10076 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10076 
                                                             tmp_0 = 73; else 
                                                                    #line 10076 
                                                                    tmp_0 = 85;
    #line 10076 
    printk((char *)"\001",tmp_0,(char *)"ipw_net_stop");
  }
  #line 10077 
  netif_stop_queue(dev);
  #line 10078 
  return 0;
}

#line 10088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_tx_skb(struct ipw_priv *priv, struct libipw_txb *txb, int pri)
{
  #line 10209 
  int tmp_5;
  #line 10209 
  unsigned char __UNIQUE_ID___x507;
  #line 10094 
  struct tfd_frame *tfd;
  #line 10102 
  u8 id;
  #line 10102 
  u8 hdr_len;
  #line 10102 
  u8 unicast;
  #line 10103 
  int fc;
  #line 10091 
  struct libipw_hdr_3addrqos *hdr = (struct libipw_hdr_3addrqos *)(txb->fragments[0])->data;
  #line 10093 
  int i = 0;
  #line 10096 
  int tx_id = ipw_get_tx_queue_number(priv,(unsigned short)((int)((unsigned short)pri)));
  #line 10097 
  struct clx2_tx_queue *txq = & priv->txq[tx_id];
  #line 10101 
  struct clx2_queue *q = & txq->q;
  #line 10105 
  if ((priv->status & 128U) == 0U) 
                                   #line 10106 
                                   goto drop;
  #line 10108 
  hdr_len = (unsigned char)libipw_get_hdrlen((unsigned short)((int)hdr->frame_ctl));
  #line 10109 
  switch ((priv->ieee)->iw_mode) {
    #line 10111 
    int tmp_2;
    #line 10126 
    int tmp_4;
    #line 10110 
    case 1: 
            #line 10110 
    ;
    #line 10111 
    if (is_multicast_ether_addr((u8 *)(& hdr->addr1))) 
                                                       #line 10111 
                                                       tmp_2 = 0; else 
                                                                    #line 10111 
                                                                    tmp_2 = 1;
    #line 10111 
    unicast = (unsigned char)tmp_2;
    #line 10112 
    id = ipw_find_station(priv,(u8 *)(& hdr->addr1));
    #line 10113 
    if ((unsigned int)id == 255U) {
      #line 10114 
      id = ipw_add_station(priv,(u8 *)(& hdr->addr1));
      #line 10115 
      if ((unsigned int)id == 255U) {
        #line 10116 
        printk((char *)"\001",(u8 *)(& hdr->addr1));
        #line 10119 
        goto drop;
      }
    }
    #line 10122 
    break;
    #line 10124 
    case 2: 
            #line 10124 
    ;
    #line 10125 
    default: 
             #line 10125 
    ;
    #line 10126 
    if (is_multicast_ether_addr((u8 *)(& hdr->addr3))) 
                                                       #line 10126 
                                                       tmp_4 = 0; else 
                                                                    #line 10126 
                                                                    tmp_4 = 1;
    #line 10126 
    unicast = (unsigned char)tmp_4;
    #line 10127 
    id = (unsigned char)0U;
    #line 10128 
    break;
  }
  #line 10131 
  tfd = txq->bd + (unsigned long)q->first_empty;
  #line 10132 
  *(txq->txb + (unsigned long)q->first_empty) = txb;
  #line 10133 
  memset((void *)tfd,0,128UL);
  #line 10134 
  tfd->u.data.station_number = id;
  #line 10136 
  tfd->control_flags.message_type = (unsigned char)0U;
  #line 10137 
  tfd->control_flags.control_bits = (unsigned char)4U;
  #line 10139 
  tfd->u.data.cmd_id = (unsigned char)11U;
  #line 10140 
  tfd->u.data.len = txb->payload_size;
  #line 10142 
  if ((unsigned int)priv->assoc_request.ieee_mode == 1U) 
                                                         #line 10143 
                                                         tfd->u.data.tx_flags_ext = (unsigned char)((unsigned int)tfd->u.data.tx_flags_ext | 1U); else 
                                                                    #line 10145 
                                                                    tfd->u.data.tx_flags_ext = tfd->u.data.tx_flags_ext;
  #line 10147 
  if ((unsigned int)priv->assoc_request.preamble_length == 4U) 
                                                               #line 10148 
                                                               tfd->u.data.tx_flags = (unsigned char)((unsigned int)tfd->u.data.tx_flags | 4U);
  #line 10150 
  fc = (int)hdr->frame_ctl;
  #line 10151 
  hdr->frame_ctl = (unsigned short)((unsigned int)((unsigned short)fc) & 64511U);
  #line 10153 
  memcpy((void *)(& tfd->u.data.tfd.tfd_24.mchdr),(void *)hdr,(unsigned long)hdr_len);
  #line 10155 
  if ((long)((unsigned int)unicast != 0U) != 0L) 
                                                 #line 10156 
                                                 tfd->u.data.tx_flags = (unsigned char)((unsigned int)tfd->u.data.tx_flags | 128U);
  #line 10158 
  if ((unsigned int)txb->encrypted != 0U && (priv->ieee)->host_encrypt == 0) 
    #line 10159 
    switch ((int)(priv->ieee)->sec.level) {
      #line 10160 
      case 4: 
              #line 10160 
      ;
      #line 10161 
      tfd->u.data.tfd.tfd_24.mchdr.frame_ctl = (unsigned short)((unsigned int)tfd->u.data.tfd.tfd_24.mchdr.frame_ctl | 16384U);
      #line 10167 
      if ((unsigned int)unicast == 0U) 
                                       #line 10168 
                                       tfd->u.data.tx_flags = (unsigned char)((unsigned int)tfd->u.data.tx_flags | 128U);
      #line 10170 
      tfd->u.data.tx_flags = (unsigned char)((unsigned int)tfd->u.data.tx_flags & 223U);
      #line 10171 
      tfd->u.data.tx_flags_ext = (unsigned char)((unsigned int)tfd->u.data.tx_flags_ext | 8U);
      #line 10172 
      tfd->u.data.key_index = (unsigned char)0U;
      #line 10173 
      tfd->u.data.key_index = (unsigned char)((unsigned int)tfd->u.data.key_index | 32U);
      #line 10174 
      break;
      #line 10175 
      case 2: 
              #line 10175 
      ;
      #line 10176 
      tfd->u.data.tfd.tfd_24.mchdr.frame_ctl = (unsigned short)((unsigned int)tfd->u.data.tfd.tfd_24.mchdr.frame_ctl | 16384U);
      #line 10178 
      tfd->u.data.tx_flags = (unsigned char)((unsigned int)tfd->u.data.tx_flags & 223U);
      #line 10179 
      tfd->u.data.tx_flags_ext = (unsigned char)((unsigned int)tfd->u.data.tx_flags_ext | 12U);
      #line 10180 
      tfd->u.data.key_index = (unsigned char)32U;
      #line 10181 
      break;
      #line 10182 
      case 1: 
              #line 10182 
      ;
      #line 10183 
      tfd->u.data.tfd.tfd_24.mchdr.frame_ctl = (unsigned short)((unsigned int)tfd->u.data.tfd.tfd_24.mchdr.frame_ctl | 16384U);
      #line 10185 
      tfd->u.data.key_index = (unsigned char)(priv->ieee)->crypt_info.tx_keyidx;
      #line 10186 
      if ((unsigned int)(priv->ieee)->sec.key_sizes[(priv->ieee)->crypt_info.tx_keyidx] <= 40U) 
        #line 10188 
        tfd->u.data.key_index = (unsigned char)((unsigned int)tfd->u.data.key_index | 64U); else 
                                                                    #line 10190 
                                                                    tfd->u.data.key_index = (unsigned char)((unsigned int)tfd->u.data.key_index | 128U);
      #line 10191 
      break;
      #line 10192 
      case 0: 
              #line 10192 
      ;
      #line 10193 
      break;
      #line 10194 
      default: 
               #line 10194 
      ;
      #line 10195 
      printk((char *)"\001",(int)(priv->ieee)->sec.level);
      #line 10197 
      break;
    }
  else 
       #line 10201 
       tfd->u.data.tx_flags = (unsigned char)((unsigned int)tfd->u.data.tx_flags | 32U);
  #line 10204 
  if ((fc & 128) != 0) 
                       #line 10205 
                       ipw_qos_set_tx_queue_command(priv,(unsigned short)((int)((unsigned short)pri)),& tfd->u.data);
  {
    #line 10209 
    __UNIQUE_ID___x507 = (unsigned char)4U;
    #line 10209 
    u8 __UNIQUE_ID___y508 = txb->nr_frags;
    #line 10209 
    if ((int)__UNIQUE_ID___x507 < (int)__UNIQUE_ID___y508) 
                                                           #line 10209 
                                                           tmp_5 = (int)__UNIQUE_ID___x507; else 
                                                                    #line 10209 
                                                                    tmp_5 = (int)__UNIQUE_ID___y508;
    }
  #line 10209 
  tfd->u.data.num_chunks = (unsigned int)tmp_5;
  #line 10211 
  if ((ipw_debug_level & 2097152U) != 0U) {
    #line 10211 
    int tmp_8;
    #line 10211 
    ;
    #line 10211 
    ;
    #line 10211 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10211 
                                                             tmp_8 = 73; else 
                                                                    #line 10211 
                                                                    tmp_8 = 85;
    #line 10211 
    printk((char *)"\001",tmp_8,(char *)"ipw_tx_skb",(int)txb->nr_frags,tfd->u.data.num_chunks);
  }
  #line 10213 
  i = 0;
  #line 10213 
  while (tfd->u.data.num_chunks > (unsigned int)i) {
    {
      #line 10214 
      if ((ipw_debug_level & 2097152U) != 0U) {
        #line 10214 
        int tmp_10;
        #line 10214 
        ;
        #line 10214 
        ;
        #line 10214 
        ;
        #line 10214 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 10214 
                                                                 tmp_10 = 73; else 
                                                                    #line 10214 
                                                                    tmp_10 = 85;
        #line 10214 
        printk((char *)"\001",tmp_10,(char *)"ipw_tx_skb",i,tfd->u.data.num_chunks,(txb->fragments[i])->len - (unsigned int)hdr_len);
      }
      #line 10217 
      if ((ipw_debug_level & 8388608U) != 0U) {
        #line 10217 
        int tmp_12;
        #line 10217 
        ;
        #line 10217 
        ;
        #line 10217 
        ;
        #line 10217 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 10217 
                                                                 tmp_12 = 73; else 
                                                                    #line 10217 
                                                                    tmp_12 = 85;
        #line 10217 
        printk((char *)"\001",tmp_12,(char *)"ipw_tx_skb",i,tfd->u.data.num_chunks,(txb->fragments[i])->len - (unsigned int)hdr_len);
      }
      #line 10220 
      printk_buf(8388608,(txb->fragments[i])->data + (unsigned long)hdr_len,(txb->fragments[i])->len - (unsigned int)hdr_len);
      #line 10223 
      tfd->u.data.chunk_ptr[i] = (unsigned int)pci_map_single(priv->pci_dev,
                        (void *)((txb->fragments[i])->data + (unsigned long)hdr_len),
                        (unsigned long)((txb->fragments[i])->len - (unsigned int)hdr_len),
                        1);
      #line 10229 
      tfd->u.data.chunk_len[i] = (unsigned short)((int)((unsigned short)(txb->fragments[i])->len) - (int)((unsigned short)hdr_len));
    }
    #line 10213 
    i ++;
  }
  #line 10233 
  if ((int)txb->nr_frags != i) {
    #line 10234 
    struct sk_buff *skb;
    #line 10236 
    int j;
    #line 10235 
    u16 remaining_bytes = (unsigned short)0U;
    #line 10238 
    j = i;
    #line 10238 
    while ((int)txb->nr_frags > j) {
      #line 10239 
      remaining_bytes = (unsigned short)(((int)((unsigned short)(txb->fragments[j])->len) - (int)((unsigned short)hdr_len)) + (int)remaining_bytes);
      #line 10238 
      j ++;
    }
    #line 10241 
    printk((char *)"\001",(int)remaining_bytes);
    #line 10243 
    skb = alloc_skb((unsigned int)remaining_bytes,2592U);
    #line 10244 
    if (skb != (struct sk_buff *)0) {
      #line 10245 
      tfd->u.data.chunk_len[i] = remaining_bytes;
      #line 10246 
      j = i;
      #line 10246 
      while ((int)txb->nr_frags > j) {
        {
          #line 10247 
          int size = (int)((txb->fragments[j])->len - (unsigned int)hdr_len);
          #line 10249 
          printk((char *)"\001",j,size);
          #line 10251 
          skb_put_data(skb,(void *)((txb->fragments[j])->data + (unsigned long)hdr_len),(unsigned int)size);
        }
        #line 10246 
        j ++;
      }
      #line 10255 
      dev_kfree_skb_any(txb->fragments[i]);
      #line 10256 
      txb->fragments[i] = skb;
      #line 10257 
      tfd->u.data.chunk_ptr[i] = (unsigned int)pci_map_single(priv->pci_dev,(void *)skb->data,
                        (unsigned long)remaining_bytes,1);
      #line 10263 
      le32_add_cpu(& tfd->u.data.num_chunks,1U);
    }
  }
  #line 10268 
  q->first_empty = ipw_queue_inc_wrap(q->first_empty,q->n_bd);
  #line 10269 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 10269 
    int tmp_16;
    #line 10269 
    ;
    #line 10269 
    ;
    #line 10269 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10269 
                                                             tmp_16 = 73; else 
                                                                    #line 10269 
                                                                    tmp_16 = 85;
    #line 10269 
    printk((char *)"\001",tmp_16,(char *)"ipw_tx_skb",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",10269,q->reg_w,(unsigned int)q->first_empty);
  }
  #line 10269 
  _ipw_write32(priv,(unsigned long)q->reg_w,(unsigned int)q->first_empty);
  #line 10271 
  ;
  #line 10271 
  if (ipw_tx_queue_space(q) < q->high_mark) 
                                            #line 10272 
                                            netif_stop_queue(priv->net_dev);
  #line 10274 
  return 0;
  #line 10276 
  drop: 
        #line 10276 
  ;
  #line 10277 
  if ((ipw_debug_level & 8192U) != 0U) {
    #line 10277 
    int tmp_19;
    #line 10277 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10277 
                                                             tmp_19 = 73; else 
                                                                    #line 10277 
                                                                    tmp_19 = 85;
    #line 10277 
    printk((char *)"\001",tmp_19,(char *)"ipw_tx_skb");
  }
  #line 10278 
  libipw_txb_free(txb);
  #line 10279 
  return 0;
}

#line 10282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_net_is_queue_full(struct net_device *dev, int pri)
{
  #line 10284 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 10286 
  int tx_id = ipw_get_tx_queue_number(priv,(unsigned short)((int)((unsigned short)pri)));
  #line 10287 
  struct clx2_tx_queue *txq = & priv->txq[tx_id];
  #line 10292 
  ;
  #line 10292 
  if (ipw_tx_queue_space(& txq->q) < txq->q.high_mark) 
                                                       #line 10293 
                                                       return 1;
  #line 10295 
  return 0;
}

#line 10299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_handle_promiscuous_tx(struct ipw_priv *priv, struct libipw_txb *txb)
{
  #line 10302 
  struct libipw_rx_stats dummystats;
  #line 10303 
  struct ieee80211_hdr *hdr;
  #line 10304 
  u8 n;
  #line 10305 
  u16 filter = (unsigned short)(priv->prom_priv)->filter;
  #line 10306 
  int hdr_only = 0;
  #line 10308 
  if (((int)filter & 16) != 0) 
                               #line 10309 
                               return;
  #line 10311 
  memset((void *)(& dummystats),0,32UL);
  #line 10314 
  hdr = (struct ieee80211_hdr *)(txb->fragments[0])->data;
  #line 10315 
  if (((int)hdr->frame_control & 12) == 0) {
    #line 10316 
    if (((int)filter & 128) != 0) 
                                  #line 10317 
                                  return;
    #line 10318 
    if (((int)filter & 2) != 0) 
                                #line 10319 
                                hdr_only = 1;
  }
  else 
    #line 10320 
    if (((int)hdr->frame_control & 12) == 4) {
      #line 10321 
      if (((int)filter & 64) != 0) 
                                   #line 10322 
                                   return;
      #line 10323 
      if (((int)filter & 1) != 0) 
                                  #line 10324 
                                  hdr_only = 1;
    }
    else 
      #line 10325 
      if (((int)hdr->frame_control & 12) == 8) {
        #line 10326 
        if (((int)filter & 256) != 0) 
                                      #line 10327 
                                      return;
        #line 10328 
        if (((int)filter & 4) != 0) 
                                    #line 10329 
                                    hdr_only = 1;
      }
  #line 10332 
  n = (unsigned char)0U;
  #line 10332 
  while ((int)txb->nr_frags > (int)n) {
    {
      #line 10334 
      struct sk_buff *dst;
      #line 10335 
      struct ieee80211_radiotap_header *rt_hdr;
      #line 10336 
      int len;
      #line 10355 
      void *tmp_0;
      #line 10333 
      struct sk_buff *src = txb->fragments[(int)n];
      #line 10338 
      if (hdr_only != 0) {
        #line 10339 
        hdr = (struct ieee80211_hdr *)src->data;
        #line 10340 
        len = libipw_get_hdrlen((unsigned short)((int)hdr->frame_control));
      }
      else 
           #line 10342 
           len = (int)src->len;
      #line 10344 
      dst = alloc_skb((unsigned int)len + 12U,2592U);
      #line 10345 
      if (dst == (struct sk_buff *)0) 
                                      #line 10346 
                                      goto __Cont;
      #line 10348 
      rt_hdr = (struct ieee80211_radiotap_header *)skb_put(dst,8U);
      #line 10350 
      rt_hdr->it_version = (unsigned char)0U;
      #line 10351 
      rt_hdr->it_pad = (unsigned char)0U;
      #line 10352 
      rt_hdr->it_present = 0U;
      #line 10353 
      rt_hdr->it_present |= 8U;
      #line 10355 
      tmp_0 = skb_put(dst,2U);
      #line 10355 
      if ((unsigned int)priv->channel <= 14U) {
        #line 10355 
        unsigned int tmp_1;
        #line 10355 
        if ((unsigned int)priv->channel != 14U) 
                                                #line 10355 
                                                tmp_1 = (unsigned int)((unsigned short)priv->channel) * 5U + 2407U; else 
                                                                    #line 10355 
                                                                    tmp_1 = 2484U;
        #line 10355 
        *((__le16 *)tmp_0) = (unsigned short)tmp_1;
      }
      else 
           #line 10355 
           *((__le16 *)tmp_0) = (unsigned short)((unsigned int)((unsigned short)((int)priv->channel + 1000)) * 5U);
      #line 10357 
      if ((unsigned int)priv->channel > 14U) {
        #line 10358 
        *((__le16 *)skb_put(dst,2U)) = (unsigned short)320U;
      }
      else 
        #line 10361 
        if ((priv->ieee)->mode == 2) {
          #line 10362 
          *((__le16 *)skb_put(dst,2U)) = (unsigned short)160U;
        }
        else {
          #line 10366 
          *((__le16 *)skb_put(dst,2U)) = (unsigned short)192U;
        }
      #line 10370 
      rt_hdr->it_len = (unsigned short)dst->len;
      #line 10372 
      ;
      #line 10372 
      ;
      #line 10372 
      skb_copy_from_linear_data(src,skb_put(dst,(unsigned int)len),(unsigned int)len);
      #line 10374 
      if (libipw_rx((priv->prom_priv)->ieee,dst,& dummystats) == 0) 
                                                                    #line 10375 
                                                                    dev_kfree_skb_any(dst);
    }
    #line 10332 
    __Cont: 
            #line 10332 
    n = (u8)((int)n + 1);
  }
  #line 10377 
  return;
}

#line 10380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static netdev_tx_t ipw_net_hard_start_xmit(struct libipw_txb *txb, struct net_device *dev, int pri)
{
  #line 10384 
  unsigned long flags;
  #line 10385 
  netdev_tx_t ret;
  #line 10383 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 10387 
  if ((ipw_debug_level & 8388608U) != 0U) {
    #line 10387 
    int tmp_1;
    #line 10387 
    ;
    #line 10387 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10387 
                                                             tmp_1 = 73; else 
                                                                    #line 10387 
                                                                    tmp_1 = 85;
    #line 10387 
    printk((char *)"\001",tmp_1,(char *)"ipw_net_hard_start_xmit",(int)txb->payload_size);
  }
  #line 10388 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 10391 
  if (rtap_iface != 0) {
    #line 10391 
    if ((int)netif_running(priv->prom_net_dev) != 0) 
                                                     #line 10392 
                                                     ipw_handle_promiscuous_tx(priv,txb);
  }
  #line 10395 
  ret = (enum netdev_tx)ipw_tx_skb(priv,txb,pri);
  #line 10396 
  if (ret == (unsigned int)NETDEV_TX_OK) 
                                         #line 10397 
                                         __ipw_led_activity_on(priv);
  #line 10398 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 10400 
  return ret;
}

#line 10403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_net_set_multicast_list(struct net_device *dev)
{
  #line 10405 
  return;
}

#line 10408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_net_set_mac_address(struct net_device *dev, void *p)
{
  #line 10410 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 10411 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 10413 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 10414 
                                                      return -99;
  #line 10415 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 10416 
  priv->config |= 8U;
  #line 10417 
  memcpy((void *)(& priv->mac_addr),(void *)(& addr->sa_data),6UL);
  #line 10418 
  printk((char *)"\001",(char *)(& (priv->net_dev)->name),(u8 *)(& priv->mac_addr));
  #line 10420 
  cif_schedule_work(& priv->adapter_restart);
  #line 10421 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 10422 
  return 0;
}

#line 10425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_ethtool_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 10429 
  char vers[64U];
  #line 10430 
  char date[32U];
  #line 10431 
  u32 len;
  #line 10428 
  struct ipw_priv *p = libipw_priv(dev);
  #line 10433 
  strlcpy((char *)(& info->driver),(char *)"ipw2200",32UL);
  #line 10434 
  strlcpy((char *)(& info->version),(char *)"1.2.2",32UL);
  #line 10436 
  len = 64U;
  #line 10437 
  ipw_get_ordinal(p,61953U,(void *)(& vers),& len);
  #line 10438 
  len = 32U;
  #line 10439 
  ipw_get_ordinal(p,61954U,(void *)(& date),& len);
  #line 10441 
  snprintf((char *)(& info->fw_version),32UL,(char *)"%s (%s)",(char *)(& vers),(char *)(& date));
  #line 10443 
  ;
  #line 10443 
  strlcpy((char *)(& info->bus_info),pci_name(p->pci_dev),32UL);
  #line 10444 
  return;
}

#line 10447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static u32 ipw_ethtool_get_link(struct net_device *dev)
{
  #line 10449 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 10450 
  return (unsigned int)((priv->status & 128U) != 0U);
}

#line 10453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_ethtool_get_eeprom_len(struct net_device *dev)
{
  #line 10455 
  return 256;
}

#line 10458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_ethtool_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 10461 
  struct ipw_priv *p = libipw_priv(dev);
  #line 10463 
  if (eeprom->offset + eeprom->len > 256U) 
                                           #line 10464 
                                           return -22;
  #line 10465 
  cif_mutex_lock_mutex_of_ipw_priv(& p->mutex);
  #line 10466 
  memcpy((void *)bytes,(void *)(& p->eeprom[eeprom->offset]),(unsigned long)eeprom->len);
  #line 10467 
  cif_mutex_unlock_mutex_of_ipw_priv(& p->mutex);
  #line 10468 
  return 0;
}

#line 10471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_ethtool_set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 10475 
  int i;
  #line 10474 
  struct ipw_priv *p = libipw_priv(dev);
  #line 10477 
  if (eeprom->offset + eeprom->len > 256U) 
                                           #line 10478 
                                           return -22;
  #line 10479 
  cif_mutex_lock_mutex_of_ipw_priv(& p->mutex);
  #line 10480 
  memcpy((void *)(& p->eeprom[eeprom->offset]),(void *)bytes,(unsigned long)eeprom->len);
  #line 10481 
  i = 0;
  #line 10481 
  while (i <= 255) {
    #line 10482 
    if ((ipw_debug_level & 134217728U) != 0U) {
      #line 10482 
      int tmp_1;
      #line 10482 
      ;
      #line 10482 
      ;
      #line 10482 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 10482 
                                                               tmp_1 = 73; else 
                                                                    #line 10482 
                                                                    tmp_1 = 85;
      #line 10482 
      printk((char *)"\001",tmp_1,(char *)"ipw_ethtool_set_eeprom",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",10482,(unsigned int)(i + 2592),(unsigned int)p->eeprom[i]);
    }
    #line 10482 
    _ipw_write8(p,(unsigned long)(i + 2592),(unsigned char)((int)p->eeprom[i]));
    #line 10481 
    i ++;
  }
  #line 10483 
  cif_mutex_unlock_mutex_of_ipw_priv(& p->mutex);
  #line 10484 
  return 0;
}

#line 10487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct ethtool_ops ipw_ethtool_ops = {.get_drvinfo = & ipw_ethtool_get_drvinfo, .get_link = & ipw_ethtool_get_link, .get_eeprom_len = & ipw_ethtool_get_eeprom_len, .get_eeprom = & ipw_ethtool_get_eeprom, .set_eeprom = & ipw_ethtool_set_eeprom};
#line 10495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static irqreturn_t ipw_isr(int irq, void *data)
{
  #line 10498 
  u32 inta;
  #line 10498 
  u32 inta_mask;
  #line 10497 
  struct ipw_priv *priv = (struct ipw_priv *)data;
  #line 10500 
  if (priv == (struct ipw_priv *)0) 
                                    #line 10501 
                                    return IRQ_NONE;
  #line 10503 
  cif_spin_lock_irq_lock_of_ipw_priv(& priv->irq_lock);
  #line 10505 
  if ((priv->status & 2U) == 0U) 
                                 #line 10507 
                                 goto none;
  #line 10510 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 10510 
    int tmp_0;
    #line 10510 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10510 
                                                             tmp_0 = 73; else 
                                                                    #line 10510 
                                                                    tmp_0 = 85;
    #line 10510 
    printk((char *)"\001",tmp_0,(char *)"ipw_isr",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",10510,8U);
  }
  #line 10510 
  inta = _ipw_read32(priv,8UL);
  #line 10511 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 10511 
    int tmp_4;
    #line 10511 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10511 
                                                             tmp_4 = 73; else 
                                                                    #line 10511 
                                                                    tmp_4 = 85;
    #line 10511 
    printk((char *)"\001",tmp_4,(char *)"ipw_isr",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",10511,12U);
  }
  #line 10511 
  inta_mask = _ipw_read32(priv,12UL);
  #line 10513 
  if (inta == 4294967295U) {
    #line 10515 
    printk((char *)"\001");
    #line 10516 
    goto none;
  }
  #line 10519 
  if (((inta_mask & inta) & 3308386354U) == 0U) 
                                                #line 10521 
                                                goto none;
  #line 10525 
  __ipw_disable_interrupts(priv);
  #line 10528 
  inta = (inta_mask & inta) & 3308386354U;
  #line 10529 
  if ((ipw_debug_level & 134217728U) != 0U) {
    #line 10529 
    int tmp_8;
    #line 10529 
    ;
    #line 10529 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10529 
                                                             tmp_8 = 73; else 
                                                                    #line 10529 
                                                                    tmp_8 = 85;
    #line 10529 
    printk((char *)"\001",tmp_8,(char *)"ipw_isr",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c",10529,8U,inta);
  }
  #line 10529 
  _ipw_write32(priv,8UL,inta);
  #line 10532 
  priv->isr_inta = inta;
  #line 10534 
  cif_tasklet_schedule(& priv->irq_tasklet);
  #line 10536 
  cif_spin_unlock_irq_lock_of_ipw_priv(& priv->irq_lock);
  #line 10538 
  return IRQ_HANDLED;
  #line 10539 
  none: 
        #line 10539 
  ;
  #line 10540 
  cif_spin_unlock_irq_lock_of_ipw_priv(& priv->irq_lock);
  #line 10541 
  return IRQ_NONE;
}

#line 10544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_rf_kill(void *adapter)
{
  #line 10547 
  unsigned long flags;
  #line 10546 
  struct ipw_priv *priv = (struct ipw_priv *)adapter;
  #line 10549 
  cif___ldv_spin_lock_lock_of_ipw_priv(& priv->lock);
  #line 10551 
  if (rf_kill_active(priv) != 0) {
    #line 10552 
    if ((ipw_debug_level & 131072U) != 0U) {
      #line 10552 
      int tmp_0;
      #line 10552 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 10552 
                                                               tmp_0 = 73; else 
                                                                    #line 10552 
                                                                    tmp_0 = 85;
      #line 10552 
      printk((char *)"\001",tmp_0,(char *)"ipw_rf_kill");
    }
    #line 10553 
    cif_schedule_delayed_work(& priv->rf_kill,500UL);
    #line 10554 
    goto exit_unlock;
  }
  #line 10559 
  if ((priv->status & 12U) == 0U) {
    #line 10560 
    if ((ipw_debug_level & 131072U) != 0U) {
      #line 10560 
      int tmp_3;
      #line 10560 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 10560 
                                                               tmp_3 = 73; else 
                                                                    #line 10560 
                                                                    tmp_3 = 85;
      #line 10560 
      printk((char *)"\001",tmp_3,(char *)"ipw_rf_kill");
    }
    #line 10564 
    cif_schedule_work(& priv->adapter_restart);
  }
  else 
    #line 10566 
    if ((ipw_debug_level & 131072U) != 0U) {
      #line 10566 
      int tmp_5;
      #line 10566 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 10566 
                                                               tmp_5 = 73; else 
                                                                    #line 10566 
                                                                    tmp_5 = 85;
      #line 10566 
      printk((char *)"\001",tmp_5,(char *)"ipw_rf_kill");
    }
  #line 10569 
  exit_unlock: 
               #line 10569 
  ;
  #line 10570 
  cif_spin_unlock_irqrestore_lock_of_ipw_priv(& priv->lock,flags);
  #line 10571 
  return;
}

#line 10573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_rf_kill(struct work_struct *work)
{
  #line 10576 
  void *__mptr;
  #line 10576 
  __mptr = (void *)work;
  #line 10575 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709546472U));
  #line 10577 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 10578 
  ipw_rf_kill((void *)priv);
  #line 10579 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 10580 
  return;
}

#line 10582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_link_up(struct ipw_priv *priv)
{
  #line 10584 
  priv->last_seq_num = (unsigned short)65535U;
  #line 10585 
  priv->last_frag_num = (unsigned short)65535U;
  #line 10586 
  priv->last_packet_time = 0UL;
  #line 10588 
  netif_carrier_on(priv->net_dev);
  #line 10590 
  cancel_delayed_work(& priv->request_scan);
  #line 10591 
  cancel_delayed_work(& priv->request_direct_scan);
  #line 10592 
  cancel_delayed_work(& priv->request_passive_scan);
  #line 10593 
  cancel_delayed_work(& priv->scan_event);
  #line 10594 
  ipw_reset_stats(priv);
  #line 10596 
  priv->last_rate = ipw_get_current_rate(priv);
  #line 10597 
  ipw_gather_stats(priv);
  #line 10598 
  ipw_led_link_up(priv);
  #line 10599 
  notify_wx_assoc_event(priv);
  #line 10601 
  if ((priv->config & 1024U) != 0U) 
                                    #line 10602 
                                    cif_schedule_delayed_work(& priv->request_scan,250UL);
  #line 10603 
  return;
}

#line 10605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_link_up(struct work_struct *work)
{
  #line 10608 
  void *__mptr;
  #line 10608 
  __mptr = (void *)work;
  #line 10607 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545600U));
  #line 10609 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 10610 
  ipw_link_up(priv);
  #line 10611 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 10612 
  return;
}

#line 10614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_link_down(struct ipw_priv *priv)
{
  #line 10616 
  ipw_led_link_down(priv);
  #line 10617 
  netif_carrier_off(priv->net_dev);
  #line 10618 
  notify_wx_assoc_event(priv);
  #line 10621 
  cancel_delayed_work(& priv->request_scan);
  #line 10622 
  cancel_delayed_work(& priv->request_direct_scan);
  #line 10623 
  cancel_delayed_work(& priv->request_passive_scan);
  #line 10624 
  cancel_delayed_work(& priv->adhoc_check);
  #line 10625 
  cancel_delayed_work(& priv->gather_stats);
  #line 10627 
  ipw_reset_stats(priv);
  #line 10629 
  if ((priv->status & 2048U) == 0U) 
                                    #line 10631 
                                    cif_schedule_delayed_work(& priv->request_scan,0UL); else 
                                                                    #line 10633 
                                                                    cancel_delayed_work(& priv->scan_event);
  #line 10634 
  return;
}

#line 10636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_link_down(struct work_struct *work)
{
  #line 10639 
  void *__mptr;
  #line 10639 
  __mptr = (void *)work;
  #line 10638 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709545520U));
  #line 10640 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 10641 
  ipw_link_down(priv);
  #line 10642 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 10643 
  return;
}

#line 10645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_setup_deferred_work(struct ipw_priv *priv)
{
  #line 10647 
  int ret = 0;
  {
    #line 10649 
    struct lock_class_key __key;
    #line 10649 
    __init_waitqueue_head(& priv->wait_command_queue,(char *)"&priv->wait_command_queue",& __key);
  }
  {
    #line 10650 
    struct lock_class_key __key_0;
    #line 10650 
    __init_waitqueue_head(& priv->wait_state,(char *)"&priv->wait_state",& __key_0);
  }
  {
    #line 10652 
    struct lock_class_key __key_1;
    #line 10652 
    __init_work(& priv->adhoc_check.work,0);
    #line 10652 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 10652 
    priv->adhoc_check.work.data = __constr_expr_34;
    #line 10652 
    lockdep_init_map(& priv->adhoc_check.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 10652 
    INIT_LIST_HEAD(& priv->adhoc_check.work.entry);
    #line 10652 
    priv->adhoc_check.work.func = & ipw_bg_adhoc_check;
  }
  {
    #line 10652 
    struct lock_class_key __key_2;
    #line 10652 
    init_timer_key(& priv->adhoc_check.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->adhoc_check)->timer",& __key_2);
  }
  {
    #line 10653 
    struct lock_class_key __key_3;
    #line 10653 
    __init_work(& priv->associate,0);
    #line 10653 
    atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
    #line 10653 
    priv->associate.data = __constr_expr_35;
    #line 10653 
    lockdep_init_map(& priv->associate.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 10653 
    INIT_LIST_HEAD(& priv->associate.entry);
    #line 10653 
    priv->associate.func = & ipw_bg_associate;
  }
  {
    #line 10654 
    struct lock_class_key __key_4;
    #line 10654 
    __init_work(& priv->disassociate,0);
    #line 10654 
    atomic_long_t __constr_expr_36 = {.counter = 137438953408LL};
    #line 10654 
    priv->disassociate.data = __constr_expr_36;
    #line 10654 
    lockdep_init_map(& priv->disassociate.lockdep_map,(char *)"(work_completion)",& __key_4,0);
    #line 10654 
    INIT_LIST_HEAD(& priv->disassociate.entry);
    #line 10654 
    priv->disassociate.func = & ipw_bg_disassociate;
  }
  {
    #line 10655 
    struct lock_class_key __key_5;
    #line 10655 
    __init_work(& priv->system_config,0);
    #line 10655 
    atomic_long_t __constr_expr_37 = {.counter = 137438953408LL};
    #line 10655 
    priv->system_config.data = __constr_expr_37;
    #line 10655 
    lockdep_init_map(& priv->system_config.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 10655 
    INIT_LIST_HEAD(& priv->system_config.entry);
    #line 10655 
    priv->system_config.func = & ipw_system_config;
  }
  {
    #line 10656 
    struct lock_class_key __key_6;
    #line 10656 
    __init_work(& priv->rx_replenish,0);
    #line 10656 
    atomic_long_t __constr_expr_38 = {.counter = 137438953408LL};
    #line 10656 
    priv->rx_replenish.data = __constr_expr_38;
    #line 10656 
    lockdep_init_map(& priv->rx_replenish.lockdep_map,(char *)"(work_completion)",& __key_6,0);
    #line 10656 
    INIT_LIST_HEAD(& priv->rx_replenish.entry);
    #line 10656 
    priv->rx_replenish.func = & ipw_bg_rx_queue_replenish;
  }
  {
    #line 10657 
    struct lock_class_key __key_7;
    #line 10657 
    __init_work(& priv->adapter_restart,0);
    #line 10657 
    atomic_long_t __constr_expr_39 = {.counter = 137438953408LL};
    #line 10657 
    priv->adapter_restart.data = __constr_expr_39;
    #line 10657 
    lockdep_init_map(& priv->adapter_restart.lockdep_map,(char *)"(work_completion)",& __key_7,0);
    #line 10657 
    INIT_LIST_HEAD(& priv->adapter_restart.entry);
    #line 10657 
    priv->adapter_restart.func = & ipw_bg_adapter_restart;
  }
  {
    #line 10658 
    struct lock_class_key __key_8;
    #line 10658 
    __init_work(& priv->rf_kill.work,0);
    #line 10658 
    atomic_long_t __constr_expr_40 = {.counter = 137438953408LL};
    #line 10658 
    priv->rf_kill.work.data = __constr_expr_40;
    #line 10658 
    lockdep_init_map(& priv->rf_kill.work.lockdep_map,(char *)"(work_completion)",& __key_8,0);
    #line 10658 
    INIT_LIST_HEAD(& priv->rf_kill.work.entry);
    #line 10658 
    priv->rf_kill.work.func = & ipw_bg_rf_kill;
  }
  {
    #line 10658 
    struct lock_class_key __key_9;
    #line 10658 
    init_timer_key(& priv->rf_kill.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->rf_kill)->timer",& __key_9);
  }
  {
    #line 10659 
    struct lock_class_key __key_10;
    #line 10659 
    __init_work(& priv->up,0);
    #line 10659 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 10659 
    priv->up.data = __constr_expr_41;
    #line 10659 
    lockdep_init_map(& priv->up.lockdep_map,(char *)"(work_completion)",& __key_10,0);
    #line 10659 
    INIT_LIST_HEAD(& priv->up.entry);
    #line 10659 
    priv->up.func = & ipw_bg_up;
  }
  {
    #line 10660 
    struct lock_class_key __key_11;
    #line 10660 
    __init_work(& priv->down,0);
    #line 10660 
    atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
    #line 10660 
    priv->down.data = __constr_expr_42;
    #line 10660 
    lockdep_init_map(& priv->down.lockdep_map,(char *)"(work_completion)",& __key_11,0);
    #line 10660 
    INIT_LIST_HEAD(& priv->down.entry);
    #line 10660 
    priv->down.func = & ipw_bg_down;
  }
  {
    #line 10661 
    struct lock_class_key __key_12;
    #line 10661 
    __init_work(& priv->request_scan.work,0);
    #line 10661 
    atomic_long_t __constr_expr_43 = {.counter = 137438953408LL};
    #line 10661 
    priv->request_scan.work.data = __constr_expr_43;
    #line 10661 
    lockdep_init_map(& priv->request_scan.work.lockdep_map,(char *)"(work_completion)",& __key_12,0);
    #line 10661 
    INIT_LIST_HEAD(& priv->request_scan.work.entry);
    #line 10661 
    priv->request_scan.work.func = & ipw_request_scan;
  }
  {
    #line 10661 
    struct lock_class_key __key_13;
    #line 10661 
    init_timer_key(& priv->request_scan.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->request_scan)->timer",& __key_13);
  }
  {
    #line 10662 
    struct lock_class_key __key_14;
    #line 10662 
    __init_work(& priv->request_direct_scan.work,0);
    #line 10662 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 10662 
    priv->request_direct_scan.work.data = __constr_expr_44;
    #line 10662 
    lockdep_init_map(& priv->request_direct_scan.work.lockdep_map,(char *)"(work_completion)",& __key_14,0);
    #line 10662 
    INIT_LIST_HEAD(& priv->request_direct_scan.work.entry);
    #line 10662 
    priv->request_direct_scan.work.func = & ipw_request_direct_scan;
  }
  {
    #line 10662 
    struct lock_class_key __key_15;
    #line 10662 
    init_timer_key(& priv->request_direct_scan.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->request_direct_scan)->timer",& __key_15);
  }
  {
    #line 10663 
    struct lock_class_key __key_16;
    #line 10663 
    __init_work(& priv->request_passive_scan.work,0);
    #line 10663 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 10663 
    priv->request_passive_scan.work.data = __constr_expr_45;
    #line 10663 
    lockdep_init_map(& priv->request_passive_scan.work.lockdep_map,(char *)"(work_completion)",& __key_16,0);
    #line 10663 
    INIT_LIST_HEAD(& priv->request_passive_scan.work.entry);
    #line 10663 
    priv->request_passive_scan.work.func = & ipw_request_passive_scan;
  }
  {
    #line 10663 
    struct lock_class_key __key_17;
    #line 10663 
    init_timer_key(& priv->request_passive_scan.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->request_passive_scan)->timer",& __key_17);
  }
  {
    #line 10664 
    struct lock_class_key __key_18;
    #line 10664 
    __init_work(& priv->scan_event.work,0);
    #line 10664 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 10664 
    priv->scan_event.work.data = __constr_expr_46;
    #line 10664 
    lockdep_init_map(& priv->scan_event.work.lockdep_map,(char *)"(work_completion)",& __key_18,0);
    #line 10664 
    INIT_LIST_HEAD(& priv->scan_event.work.entry);
    #line 10664 
    priv->scan_event.work.func = & ipw_scan_event;
  }
  {
    #line 10664 
    struct lock_class_key __key_19;
    #line 10664 
    init_timer_key(& priv->scan_event.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->scan_event)->timer",& __key_19);
  }
  {
    #line 10665 
    struct lock_class_key __key_20;
    #line 10665 
    __init_work(& priv->gather_stats.work,0);
    #line 10665 
    atomic_long_t __constr_expr_47 = {.counter = 137438953408LL};
    #line 10665 
    priv->gather_stats.work.data = __constr_expr_47;
    #line 10665 
    lockdep_init_map(& priv->gather_stats.work.lockdep_map,(char *)"(work_completion)",& __key_20,0);
    #line 10665 
    INIT_LIST_HEAD(& priv->gather_stats.work.entry);
    #line 10665 
    priv->gather_stats.work.func = & ipw_bg_gather_stats;
  }
  {
    #line 10665 
    struct lock_class_key __key_21;
    #line 10665 
    init_timer_key(& priv->gather_stats.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->gather_stats)->timer",& __key_21);
  }
  {
    #line 10666 
    struct lock_class_key __key_22;
    #line 10666 
    __init_work(& priv->abort_scan,0);
    #line 10666 
    atomic_long_t __constr_expr_48 = {.counter = 137438953408LL};
    #line 10666 
    priv->abort_scan.data = __constr_expr_48;
    #line 10666 
    lockdep_init_map(& priv->abort_scan.lockdep_map,(char *)"(work_completion)",& __key_22,0);
    #line 10666 
    INIT_LIST_HEAD(& priv->abort_scan.entry);
    #line 10666 
    priv->abort_scan.func = & ipw_bg_abort_scan;
  }
  {
    #line 10667 
    struct lock_class_key __key_23;
    #line 10667 
    __init_work(& priv->roam,0);
    #line 10667 
    atomic_long_t __constr_expr_49 = {.counter = 137438953408LL};
    #line 10667 
    priv->roam.data = __constr_expr_49;
    #line 10667 
    lockdep_init_map(& priv->roam.lockdep_map,(char *)"(work_completion)",& __key_23,0);
    #line 10667 
    INIT_LIST_HEAD(& priv->roam.entry);
    #line 10667 
    priv->roam.func = & ipw_bg_roam;
  }
  {
    #line 10668 
    struct lock_class_key __key_24;
    #line 10668 
    __init_work(& priv->scan_check.work,0);
    #line 10668 
    atomic_long_t __constr_expr_50 = {.counter = 137438953408LL};
    #line 10668 
    priv->scan_check.work.data = __constr_expr_50;
    #line 10668 
    lockdep_init_map(& priv->scan_check.work.lockdep_map,(char *)"(work_completion)",& __key_24,0);
    #line 10668 
    INIT_LIST_HEAD(& priv->scan_check.work.entry);
    #line 10668 
    priv->scan_check.work.func = & ipw_bg_scan_check;
  }
  {
    #line 10668 
    struct lock_class_key __key_25;
    #line 10668 
    init_timer_key(& priv->scan_check.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->scan_check)->timer",& __key_25);
  }
  {
    #line 10669 
    struct lock_class_key __key_26;
    #line 10669 
    __init_work(& priv->link_up,0);
    #line 10669 
    atomic_long_t __constr_expr_51 = {.counter = 137438953408LL};
    #line 10669 
    priv->link_up.data = __constr_expr_51;
    #line 10669 
    lockdep_init_map(& priv->link_up.lockdep_map,(char *)"(work_completion)",& __key_26,0);
    #line 10669 
    INIT_LIST_HEAD(& priv->link_up.entry);
    #line 10669 
    priv->link_up.func = & ipw_bg_link_up;
  }
  {
    #line 10670 
    struct lock_class_key __key_27;
    #line 10670 
    __init_work(& priv->link_down,0);
    #line 10670 
    atomic_long_t __constr_expr_52 = {.counter = 137438953408LL};
    #line 10670 
    priv->link_down.data = __constr_expr_52;
    #line 10670 
    lockdep_init_map(& priv->link_down.lockdep_map,(char *)"(work_completion)",& __key_27,0);
    #line 10670 
    INIT_LIST_HEAD(& priv->link_down.entry);
    #line 10670 
    priv->link_down.func = & ipw_bg_link_down;
  }
  {
    #line 10671 
    struct lock_class_key __key_28;
    #line 10671 
    __init_work(& priv->led_link_on.work,0);
    #line 10671 
    atomic_long_t __constr_expr_53 = {.counter = 137438953408LL};
    #line 10671 
    priv->led_link_on.work.data = __constr_expr_53;
    #line 10671 
    lockdep_init_map(& priv->led_link_on.work.lockdep_map,(char *)"(work_completion)",& __key_28,0);
    #line 10671 
    INIT_LIST_HEAD(& priv->led_link_on.work.entry);
    #line 10671 
    priv->led_link_on.work.func = & ipw_bg_led_link_on;
  }
  {
    #line 10671 
    struct lock_class_key __key_29;
    #line 10671 
    init_timer_key(& priv->led_link_on.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->led_link_on)->timer",& __key_29);
  }
  {
    #line 10672 
    struct lock_class_key __key_30;
    #line 10672 
    __init_work(& priv->led_link_off.work,0);
    #line 10672 
    atomic_long_t __constr_expr_54 = {.counter = 137438953408LL};
    #line 10672 
    priv->led_link_off.work.data = __constr_expr_54;
    #line 10672 
    lockdep_init_map(& priv->led_link_off.work.lockdep_map,(char *)"(work_completion)",& __key_30,0);
    #line 10672 
    INIT_LIST_HEAD(& priv->led_link_off.work.entry);
    #line 10672 
    priv->led_link_off.work.func = & ipw_bg_led_link_off;
  }
  {
    #line 10672 
    struct lock_class_key __key_31;
    #line 10672 
    init_timer_key(& priv->led_link_off.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->led_link_off)->timer",& __key_31);
  }
  {
    #line 10673 
    struct lock_class_key __key_32;
    #line 10673 
    __init_work(& priv->led_act_off.work,0);
    #line 10673 
    atomic_long_t __constr_expr_55 = {.counter = 137438953408LL};
    #line 10673 
    priv->led_act_off.work.data = __constr_expr_55;
    #line 10673 
    lockdep_init_map(& priv->led_act_off.work.lockdep_map,(char *)"(work_completion)",& __key_32,0);
    #line 10673 
    INIT_LIST_HEAD(& priv->led_act_off.work.entry);
    #line 10673 
    priv->led_act_off.work.func = & ipw_bg_led_activity_off;
  }
  {
    #line 10673 
    struct lock_class_key __key_33;
    #line 10673 
    init_timer_key(& priv->led_act_off.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&priv->led_act_off)->timer",& __key_33);
  }
  {
    #line 10674 
    struct lock_class_key __key_34;
    #line 10674 
    __init_work(& priv->merge_networks,0);
    #line 10674 
    atomic_long_t __constr_expr_56 = {.counter = 137438953408LL};
    #line 10674 
    priv->merge_networks.data = __constr_expr_56;
    #line 10674 
    lockdep_init_map(& priv->merge_networks.lockdep_map,(char *)"(work_completion)",& __key_34,0);
    #line 10674 
    INIT_LIST_HEAD(& priv->merge_networks.entry);
    #line 10674 
    priv->merge_networks.func = & ipw_merge_adhoc_network;
  }
  {
    #line 10677 
    struct lock_class_key __key_35;
    #line 10677 
    __init_work(& priv->qos_activate,0);
    #line 10677 
    atomic_long_t __constr_expr_57 = {.counter = 137438953408LL};
    #line 10677 
    priv->qos_activate.data = __constr_expr_57;
    #line 10677 
    lockdep_init_map(& priv->qos_activate.lockdep_map,(char *)"(work_completion)",& __key_35,0);
    #line 10677 
    INIT_LIST_HEAD(& priv->qos_activate.entry);
    #line 10677 
    priv->qos_activate.func = & ipw_bg_qos_activate;
  }
  #line 10680 
  cif_tasklet_init(& priv->irq_tasklet,(void (*)(unsigned long ))(& ipw_irq_tasklet),(unsigned long)priv);
  #line 10683 
  return ret;
}

#line 10686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void shim__set_security(struct net_device *dev, struct libipw_security *sec)
{
  #line 10690 
  int i;
  #line 10689 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 10691 
  i = 0;
  #line 10691 
  while (i <= 3) {
    #line 10692 
    if ((((int)sec->flags >> i) & 1) != 0) {
      #line 10693 
      (priv->ieee)->sec.encode_alg[i] = sec->encode_alg[i];
      #line 10694 
      (priv->ieee)->sec.key_sizes[i] = sec->key_sizes[i];
      #line 10695 
      if ((unsigned int)sec->key_sizes[i] == 0U) 
                                                 #line 10696 
                                                 (priv->ieee)->sec.flags = (unsigned short)((int)(priv->ieee)->sec.flags & ~ (1 << i));
      else {
        #line 10698 
        memcpy((void *)(& (priv->ieee)->sec.keys[i]),(void *)(& sec->keys[i]),(unsigned long)sec->key_sizes[i]);
        #line 10700 
        (priv->ieee)->sec.flags = (unsigned short)((int)(priv->ieee)->sec.flags | (1 << i));
      }
      #line 10702 
      priv->status |= 2147483648U;
    }
    else 
      #line 10703 
      if ((unsigned int)sec->level != 1U) 
                                          #line 10704 
                                          (priv->ieee)->sec.flags = (unsigned short)((int)(priv->ieee)->sec.flags & ~ (1 << i));
    #line 10691 
    i ++;
  }
  #line 10707 
  if (((int)sec->flags & 16) != 0) {
    #line 10708 
    (priv->ieee)->sec.active_key = sec->active_key;
    #line 10709 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 16U);
    #line 10710 
    priv->status |= 2147483648U;
  }
  else 
       #line 10712 
       (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags & 65519U);
  #line 10714 
  if (((int)sec->flags & 32) != 0 && (int)(priv->ieee)->sec.auth_mode != (int)sec->auth_mode) {
    #line 10716 
    (priv->ieee)->sec.auth_mode = sec->auth_mode;
    #line 10717 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 32U);
    #line 10718 
    if ((unsigned int)sec->auth_mode == 1U) 
                                            #line 10719 
                                            priv->capability |= 1U; else 
                                                                    #line 10721 
                                                                    priv->capability &= 4294967294U;
    #line 10722 
    priv->status |= 2147483648U;
  }
  #line 10725 
  if (((int)sec->flags & 256) != 0 && (int)(priv->ieee)->sec.enabled != (int)sec->enabled) {
    #line 10726 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 256U);
    #line 10727 
    (priv->ieee)->sec.enabled = sec->enabled;
    #line 10728 
    priv->status |= 2147483648U;
    #line 10729 
    if ((unsigned int)sec->enabled != 0U) 
                                          #line 10730 
                                          priv->capability |= 2U; else 
                                                                    #line 10732 
                                                                    priv->capability &= 4294967293U;
  }
  #line 10735 
  if (((int)sec->flags & 512) != 0) 
                                    #line 10736 
                                    (priv->ieee)->sec.encrypt = sec->encrypt;
  #line 10738 
  if (((int)sec->flags & 128) != 0 && (int)(priv->ieee)->sec.level != (int)sec->level) {
    #line 10739 
    (priv->ieee)->sec.level = sec->level;
    #line 10740 
    (priv->ieee)->sec.flags = (unsigned short)((unsigned int)(priv->ieee)->sec.flags | 128U);
    #line 10741 
    priv->status |= 2147483648U;
  }
  #line 10744 
  if ((priv->ieee)->host_encrypt == 0 && ((int)sec->flags & 512) != 0) 
    #line 10745 
    ipw_set_hwcrypto_keys(priv);
  #line 10746 
  return;
}

#line 10763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int init_supported_rates(struct ipw_priv *priv, struct ipw_supported_rates *rates)
{
  #line 10768 
  memset((void *)rates,0,16UL);
  #line 10770 
  switch ((priv->ieee)->freq_band) {
    #line 10771 
    case 2: 
            #line 10771 
    ;
    #line 10772 
    rates->ieee_mode = (unsigned char)0U;
    #line 10773 
    rates->purpose = (unsigned char)1U;
    #line 10774 
    ipw_add_ofdm_scan_rates(rates,(unsigned char)1,4080U);
    #line 10776 
    break;
    #line 10778 
    default: 
             #line 10778 
    ;
    #line 10779 
    rates->ieee_mode = (unsigned char)2U;
    #line 10780 
    rates->purpose = (unsigned char)1U;
    #line 10781 
    ipw_add_cck_scan_rates(rates,(unsigned char)1,15U);
    #line 10783 
    if (((priv->ieee)->modulation & 2) != 0) 
                                             #line 10784 
                                             ipw_add_ofdm_scan_rates(rates,(unsigned char)1,4080U);
    #line 10787 
    break;
  }
  #line 10790 
  return 0;
}

#line 10793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_config(struct ipw_priv *priv)
{
  #line 10798 
  if (ipw_set_tx_power(priv) != 0) 
                                   #line 10799 
                                   goto error;
  #line 10802 
  if (ipw_send_adapter_address(priv,(priv->net_dev)->dev_addr) != 0) 
    #line 10803 
    goto error;
  #line 10806 
  init_sys_config(& priv->sys_config);
  #line 10810 
  if (bt_coexist != 0) {
    #line 10811 
    unsigned char bt_caps = priv->eeprom[75UL];
    #line 10813 
    if (((int)bt_caps & 1) != 0) 
                                 #line 10815 
                                 priv->sys_config.bt_coexistence = (unsigned char)((unsigned int)priv->sys_config.bt_coexistence | 1U);
    #line 10816 
    if (((int)bt_caps & 4) != 0) 
                                 #line 10818 
                                 priv->sys_config.bt_coexistence = (unsigned char)((unsigned int)priv->sys_config.bt_coexistence | 16U);
  }
  #line 10822 
  if (priv->prom_net_dev != (struct net_device *)0) {
    #line 10822 
    if ((int)netif_running(priv->prom_net_dev) != 0) {
      #line 10823 
      priv->sys_config.accept_all_data_frames = (unsigned char)1U;
      #line 10824 
      priv->sys_config.accept_non_directed_frames = (unsigned char)1U;
      #line 10825 
      priv->sys_config.accept_all_mgmt_bcpr = (unsigned char)1U;
      #line 10826 
      priv->sys_config.accept_all_mgmt_frames = (unsigned char)1U;
    }
  }
  #line 10830 
  if ((priv->ieee)->iw_mode == 1) 
                                  #line 10831 
                                  priv->sys_config.answer_broadcast_ssid_probe = (unsigned char)1U; else 
                                                                    #line 10833 
                                                                    priv->sys_config.answer_broadcast_ssid_probe = (unsigned char)0U;
  #line 10835 
  if (ipw_send_system_config(priv) != 0) 
                                         #line 10836 
                                         goto error;
  #line 10838 
  init_supported_rates(priv,& priv->rates);
  #line 10839 
  if (ipw_send_supported_rates(priv,& priv->rates) != 0) 
                                                         #line 10840 
                                                         goto error;
  #line 10843 
  if ((unsigned int)priv->rts_threshold != 0U) {
    #line 10844 
    if (ipw_send_rts_threshold(priv,
                               (unsigned short)((int)priv->rts_threshold)) != 0) 
      #line 10845 
      goto error;
  }
  #line 10848 
  if ((ipw_debug_level & 2147483648U) != 0U) {
    #line 10848 
    int tmp_6;
    #line 10848 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 10848 
                                                             tmp_6 = 73; else 
                                                                    #line 10848 
                                                                    tmp_6 = 85;
    #line 10848 
    printk((char *)"\001",tmp_6,(char *)"ipw_config");
  }
  #line 10849 
  ipw_qos_activate(priv,(struct libipw_qos_data *)0);
  #line 10852 
  if (ipw_set_random_seed(priv) != 0) 
                                      #line 10853 
                                      goto error;
  #line 10856 
  if (ipw_send_host_complete(priv) != 0) 
                                         #line 10857 
                                         goto error;
  #line 10859 
  priv->status |= 32U;
  #line 10861 
  ipw_led_init(priv);
  #line 10862 
  ipw_led_radio_on(priv);
  #line 10863 
  priv->notif_missed_beacons = 0U;
  #line 10866 
  if (((priv->ieee)->host_encrypt == 0 && (priv->ieee)->host_decrypt == 0) && ((priv->capability & 2U) != 0U && (unsigned int)(priv->ieee)->sec.level == 1U)) 
    #line 10869 
    ipw_set_hwcrypto_keys(priv);
  #line 10871 
  return 0;
  #line 10873 
  error: 
         #line 10873 
  ;
  #line 10874 
  return -5;
}

#line 10891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct libipw_geo ipw_geos[14U] = {{.name = {(unsigned char)'-', (unsigned char)'-', (unsigned char)'-'}, .bg_channels = (unsigned char)11U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'F'}, .bg_channels = (unsigned char)11U, .a_channels = (unsigned char)8U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}}, .a = {{.freq = 5180U, .channel = (unsigned char)36U}, {.freq = 5200U, .channel = (unsigned char)40U}, {.freq = 5220U, .channel = (unsigned char)44U}, {.freq = 5240U, .channel = (unsigned char)48U}, {.freq = 5260U, .channel = (unsigned char)52U, .flags = (unsigned char)1U}, {.freq = 5280U, .channel = (unsigned char)56U, .flags = (unsigned char)1U}, {.freq = 5300U, .channel = (unsigned char)60U, .flags = (unsigned char)1U}, {.freq = 5320U, .channel = (unsigned char)64U, .flags = (unsigned char)1U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'D'}, .bg_channels = (unsigned char)13U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U}, {.freq = 2472U, .channel = (unsigned char)13U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'A'}, .bg_channels = (unsigned char)11U, .a_channels = (unsigned char)13U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}}, .a = {{.freq = 5180U, .channel = (unsigned char)36U}, {.freq = 5200U, .channel = (unsigned char)40U}, {.freq = 5220U, .channel = (unsigned char)44U}, {.freq = 5240U, .channel = (unsigned char)48U}, {.freq = 5260U, .channel = (unsigned char)52U, .flags = (unsigned char)1U}, {.freq = 5280U, .channel = (unsigned char)56U, .flags = (unsigned char)1U}, {.freq = 5300U, .channel = (unsigned char)60U, .flags = (unsigned char)1U}, {.freq = 5320U, .channel = (unsigned char)64U, .flags = (unsigned char)1U}, {.freq = 5745U, .channel = (unsigned char)149U}, {.freq = 5765U, .channel = (unsigned char)153U}, {.freq = 5785U, .channel = (unsigned char)157U}, {.freq = 5805U, .channel = (unsigned char)161U}, {.freq = 5825U, .channel = (unsigned char)165U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'B'}, .bg_channels = (unsigned char)11U, .a_channels = (unsigned char)13U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}}, .a = {{.freq = 5180U, .channel = (unsigned char)36U}, {.freq = 5200U, .channel = (unsigned char)40U}, {.freq = 5220U, .channel = (unsigned char)44U}, {.freq = 5240U, .channel = (unsigned char)48U}, {.freq = 5260U, .channel = (unsigned char)52U, .flags = (unsigned char)1U}, {.freq = 5280U, .channel = (unsigned char)56U, .flags = (unsigned char)1U}, {.freq = 5300U, .channel = (unsigned char)60U, .flags = (unsigned char)1U}, {.freq = 5320U, .channel = (unsigned char)64U, .flags = (unsigned char)1U}, {.freq = 5745U, .channel = (unsigned char)149U, .flags = (unsigned char)1U}, {.freq = 5765U, .channel = (unsigned char)153U, .flags = (unsigned char)1U}, {.freq = 5785U, .channel = (unsigned char)157U, .flags = (unsigned char)1U}, {.freq = 5805U, .channel = (unsigned char)161U, .flags = (unsigned char)1U}, {.freq = 5825U, .channel = (unsigned char)165U, .flags = (unsigned char)1U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'C'}, .bg_channels = (unsigned char)11U, .a_channels = (unsigned char)4U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}}, .a = {{.freq = 5170U, .channel = (unsigned char)34U}, {.freq = 5190U, .channel = (unsigned char)38U}, {.freq = 5210U, .channel = (unsigned char)42U}, {.freq = 5230U, .channel = (unsigned char)46U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'M'}, .bg_channels = (unsigned char)11U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'E'}, .bg_channels = (unsigned char)13U, .a_channels = (unsigned char)19U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U}, {.freq = 2472U, .channel = (unsigned char)13U}}, .a = {{.freq = 5180U, .channel = (unsigned char)36U}, {.freq = 5200U, .channel = (unsigned char)40U}, {.freq = 5220U, .channel = (unsigned char)44U}, {.freq = 5240U, .channel = (unsigned char)48U}, {.freq = 5260U, .channel = (unsigned char)52U, .flags = (unsigned char)1U}, {.freq = 5280U, .channel = (unsigned char)56U, .flags = (unsigned char)1U}, {.freq = 5300U, .channel = (unsigned char)60U, .flags = (unsigned char)1U}, {.freq = 5320U, .channel = (unsigned char)64U, .flags = (unsigned char)1U}, {.freq = 5500U, .channel = (unsigned char)100U, .flags = (unsigned char)1U}, {.freq = 5520U, .channel = (unsigned char)104U, .flags = (unsigned char)1U}, {.freq = 5540U, .channel = (unsigned char)108U, .flags = (unsigned char)1U}, {.freq = 5560U, .channel = (unsigned char)112U, .flags = (unsigned char)1U}, {.freq = 5580U, .channel = (unsigned char)116U, .flags = (unsigned char)1U}, {.freq = 5600U, .channel = (unsigned char)120U, .flags = (unsigned char)1U}, {.freq = 5620U, .channel = (unsigned char)124U, .flags = (unsigned char)1U}, {.freq = 5640U, .channel = (unsigned char)128U, .flags = (unsigned char)1U}, {.freq = 5660U, .channel = (unsigned char)132U, .flags = (unsigned char)1U}, {.freq = 5680U, .channel = (unsigned char)136U, .flags = (unsigned char)1U}, {.freq = 5700U, .channel = (unsigned char)140U, .flags = (unsigned char)1U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'J'}, .bg_channels = (unsigned char)14U, .a_channels = (unsigned char)4U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U}, {.freq = 2472U, .channel = (unsigned char)13U}, {.freq = 2484U, .channel = (unsigned char)14U, .flags = (unsigned char)4U}}, .a = {{.freq = 5170U, .channel = (unsigned char)34U}, {.freq = 5190U, .channel = (unsigned char)38U}, {.freq = 5210U, .channel = (unsigned char)42U}, {.freq = 5230U, .channel = (unsigned char)46U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'R'}, .bg_channels = (unsigned char)14U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U}, {.freq = 2472U, .channel = (unsigned char)13U}, {.freq = 2484U, .channel = (unsigned char)14U, .flags = (unsigned char)5U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'H'}, .bg_channels = (unsigned char)13U, .a_channels = (unsigned char)4U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U, .flags = (unsigned char)1U}, {.freq = 2472U, .channel = (unsigned char)13U, .flags = (unsigned char)1U}}, .a = {{.freq = 5745U, .channel = (unsigned char)149U}, {.freq = 5765U, .channel = (unsigned char)153U}, {.freq = 5785U, .channel = (unsigned char)157U}, {.freq = 5805U, .channel = (unsigned char)161U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'G'}, .bg_channels = (unsigned char)13U, .a_channels = (unsigned char)4U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U}, {.freq = 2472U, .channel = (unsigned char)13U}}, .a = {{.freq = 5180U, .channel = (unsigned char)36U}, {.freq = 5200U, .channel = (unsigned char)40U}, {.freq = 5220U, .channel = (unsigned char)44U}, {.freq = 5240U, .channel = (unsigned char)48U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'K'}, .bg_channels = (unsigned char)13U, .a_channels = (unsigned char)24U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}, {.freq = 2467U, .channel = (unsigned char)12U, .flags = (unsigned char)1U}, {.freq = 2472U, .channel = (unsigned char)13U, .flags = (unsigned char)1U}}, .a = {{.freq = 5180U, .channel = (unsigned char)36U, .flags = (unsigned char)1U}, {.freq = 5200U, .channel = (unsigned char)40U, .flags = (unsigned char)1U}, {.freq = 5220U, .channel = (unsigned char)44U, .flags = (unsigned char)1U}, {.freq = 5240U, .channel = (unsigned char)48U, .flags = (unsigned char)1U}, {.freq = 5260U, .channel = (unsigned char)52U, .flags = (unsigned char)1U}, {.freq = 5280U, .channel = (unsigned char)56U, .flags = (unsigned char)1U}, {.freq = 5300U, .channel = (unsigned char)60U, .flags = (unsigned char)1U}, {.freq = 5320U, .channel = (unsigned char)64U, .flags = (unsigned char)1U}, {.freq = 5500U, .channel = (unsigned char)100U, .flags = (unsigned char)1U}, {.freq = 5520U, .channel = (unsigned char)104U, .flags = (unsigned char)1U}, {.freq = 5540U, .channel = (unsigned char)108U, .flags = (unsigned char)1U}, {.freq = 5560U, .channel = (unsigned char)112U, .flags = (unsigned char)1U}, {.freq = 5580U, .channel = (unsigned char)116U, .flags = (unsigned char)1U}, {.freq = 5600U, .channel = (unsigned char)120U, .flags = (unsigned char)1U}, {.freq = 5620U, .channel = (unsigned char)124U, .flags = (unsigned char)1U}, {.freq = 5640U, .channel = (unsigned char)128U, .flags = (unsigned char)1U}, {.freq = 5660U, .channel = (unsigned char)132U, .flags = (unsigned char)1U}, {.freq = 5680U, .channel = (unsigned char)136U, .flags = (unsigned char)1U}, {.freq = 5700U, .channel = (unsigned char)140U, .flags = (unsigned char)1U}, {.freq = 5745U, .channel = (unsigned char)149U, .flags = (unsigned char)1U}, {.freq = 5765U, .channel = (unsigned char)153U, .flags = (unsigned char)1U}, {.freq = 5785U, .channel = (unsigned char)157U, .flags = (unsigned char)1U}, {.freq = 5805U, .channel = (unsigned char)161U, .flags = (unsigned char)1U}, {.freq = 5825U, .channel = (unsigned char)165U, .flags = (unsigned char)1U}}}, {.name = {(unsigned char)'Z', (unsigned char)'Z', (unsigned char)'L'}, .bg_channels = (unsigned char)11U, .a_channels = (unsigned char)13U, .bg = {{.freq = 2412U, .channel = (unsigned char)1U}, {.freq = 2417U, .channel = (unsigned char)2U}, {.freq = 2422U, .channel = (unsigned char)3U}, {.freq = 2427U, .channel = (unsigned char)4U}, {.freq = 2432U, .channel = (unsigned char)5U}, {.freq = 2437U, .channel = (unsigned char)6U}, {.freq = 2442U, .channel = (unsigned char)7U}, {.freq = 2447U, .channel = (unsigned char)8U}, {.freq = 2452U, .channel = (unsigned char)9U}, {.freq = 2457U, .channel = (unsigned char)10U}, {.freq = 2462U, .channel = (unsigned char)11U}}, .a = {{.freq = 5180U, .channel = (unsigned char)36U, .flags = (unsigned char)1U}, {.freq = 5200U, .channel = (unsigned char)40U, .flags = (unsigned char)1U}, {.freq = 5220U, .channel = (unsigned char)44U, .flags = (unsigned char)1U}, {.freq = 5240U, .channel = (unsigned char)48U, .flags = (unsigned char)1U}, {.freq = 5260U, .channel = (unsigned char)52U, .flags = (unsigned char)1U}, {.freq = 5280U, .channel = (unsigned char)56U, .flags = (unsigned char)1U}, {.freq = 5300U, .channel = (unsigned char)60U, .flags = (unsigned char)1U}, {.freq = 5320U, .channel = (unsigned char)64U, .flags = (unsigned char)1U}, {.freq = 5745U, .channel = (unsigned char)149U, .flags = (unsigned char)1U}, {.freq = 5765U, .channel = (unsigned char)153U, .flags = (unsigned char)1U}, {.freq = 5785U, .channel = (unsigned char)157U, .flags = (unsigned char)1U}, {.freq = 5805U, .channel = (unsigned char)161U, .flags = (unsigned char)1U}, {.freq = 5825U, .channel = (unsigned char)165U, .flags = (unsigned char)1U}}}};
#line 11137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_set_geo(struct ipw_priv *priv)
{
  #line 11139 
  int j;
  #line 11141 
  j = 0;
  #line 11141 
  while ((unsigned int)j <= 13U) {
    #line 11142 
    if (memcmp((void *)(& priv->eeprom[76UL]),(void *)(& ipw_geos[j].name),3UL) == 0) 
      #line 11144 
      break;
    #line 11141 
    j ++;
  }
  #line 11147 
  if (j == 14) {
    #line 11148 
    printk((char *)"\001",(int)priv->eeprom[76UL],(int)priv->eeprom[77UL],(int)priv->eeprom[78UL]);
    #line 11152 
    j = 0;
  }
  #line 11155 
  libipw_set_geo(priv->ieee,& ipw_geos[j]);
  #line 11156 
  return;
}

#line 11159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_up(struct ipw_priv *priv)
{
  #line 11161 
  int rc;
  #line 11161 
  int i;
  #line 11164 
  if (priv->suspend_time != 0LL) {
    #line 11165 
    libipw_networks_age(priv->ieee,(unsigned long)priv->suspend_time);
    #line 11166 
    priv->suspend_time = 0LL;
  }
  #line 11169 
  if ((priv->status & 2048U) != 0U) 
                                    #line 11170 
                                    return -5;
  #line 11172 
  if (cmdlog != 0 && priv->cmdlog == (struct ipw_cmd_log *)0) {
    #line 11173 
    priv->cmdlog = (struct ipw_cmd_log *)kcalloc((unsigned long)cmdlog,144UL,3264U);
    #line 11175 
    if (priv->cmdlog == (struct ipw_cmd_log *)0) {
      #line 11176 
      printk((char *)"\001",cmdlog);
      #line 11178 
      return -12;
    }
    else 
         #line 11180 
         priv->cmdlog_len = cmdlog;
  }
  #line 11184 
  i = 0;
  #line 11184 
  while (i <= 4) {
    #line 11187 
    rc = ipw_load(priv);
    #line 11188 
    if (rc != 0) {
      #line 11189 
      printk((char *)"\001",rc);
      #line 11190 
      return rc;
    }
    #line 11193 
    ipw_init_ordinals(priv);
    #line 11194 
    if ((priv->config & 8U) == 0U) 
                                   #line 11195 
                                   eeprom_parse_mac(priv,(u8 *)(& priv->mac_addr));
    #line 11196 
    memcpy((void *)(priv->net_dev)->dev_addr,(void *)(& priv->mac_addr),6UL);
    #line 11198 
    ipw_set_geo(priv);
    #line 11200 
    if ((priv->status & 8U) != 0U) {
      #line 11201 
      printk((char *)"\001");
      #line 11202 
      return 0;
    }
    else {
      #line 11203 
      if (rf_kill_active(priv) != 0) {
        #line 11204 
        printk((char *)"\001");
        #line 11207 
        cif_schedule_delayed_work(& priv->rf_kill,500UL);
        #line 11208 
        return 0;
      }
    }
    #line 11211 
    rc = ipw_config(priv);
    #line 11212 
    if (rc == 0) {
      #line 11213 
      if ((ipw_debug_level & 4U) != 0U) {
        #line 11213 
        int tmp_2;
        #line 11213 
        ;
        #line 11213 
        if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                                 #line 11213 
                                                                 tmp_2 = 73; else 
                                                                    #line 11213 
                                                                    tmp_2 = 85;
        #line 11213 
        printk((char *)"\001",tmp_2,(char *)"ipw_up",i);
      }
      #line 11217 
      cif_schedule_delayed_work(& priv->request_scan,0UL);
      #line 11219 
      return 0;
    }
    #line 11222 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 11222 
      int tmp_4;
      #line 11222 
      ;
      #line 11222 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 11222 
                                                               tmp_4 = 73; else 
                                                                    #line 11222 
                                                                    tmp_4 = 85;
      #line 11222 
      printk((char *)"\001",tmp_4,(char *)"ipw_up",rc);
    }
    #line 11223 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 11223 
      int tmp_6;
      #line 11223 
      ;
      #line 11223 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 11223 
                                                               tmp_6 = 73; else 
                                                                    #line 11223 
                                                                    tmp_6 = 85;
      #line 11223 
      printk((char *)"\001",tmp_6,(char *)"ipw_up",i,5);
    }
    #line 11228 
    ipw_down(priv);
    #line 11184 
    i ++;
  }
  #line 11233 
  printk((char *)"\001",i);
  #line 11235 
  return -5;
}

#line 11238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_up(struct work_struct *work)
{
  #line 11241 
  void *__mptr;
  #line 11241 
  __mptr = (void *)work;
  #line 11240 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709546288U));
  #line 11242 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 11243 
  ipw_up(priv);
  #line 11244 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 11245 
  return;
}

#line 11247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_deinit(struct ipw_priv *priv)
{
  #line 11249 
  int i;
  #line 11251 
  if ((priv->status & 2097152U) != 0U) {
    #line 11252 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 11252 
      int tmp_0;
      #line 11252 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 11252 
                                                               tmp_0 = 73; else 
                                                                    #line 11252 
                                                                    tmp_0 = 85;
      #line 11252 
      printk((char *)"\001",tmp_0,(char *)"ipw_deinit");
    }
    #line 11253 
    ipw_abort_scan(priv);
  }
  #line 11256 
  if ((priv->status & 128U) != 0U) {
    #line 11257 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 11257 
      int tmp_2;
      #line 11257 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 11257 
                                                               tmp_2 = 73; else 
                                                                    #line 11257 
                                                                    tmp_2 = 85;
      #line 11257 
      printk((char *)"\001",tmp_2,(char *)"ipw_deinit");
    }
    #line 11258 
    ipw_disassociate((void *)priv);
  }
  #line 11261 
  ipw_led_shutdown(priv);
  #line 11266 
  i = 1000;
  #line 11266 
  while (i != 0 && (priv->status & 2097792U) != 0U) {
    #line 11269 
    __const_udelay(42950UL);
    #line 11266 
    i --;
  }
  #line 11271 
  if ((priv->status & 2097792U) != 0U) {
    #line 11273 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 11273 
      int tmp_4;
      #line 11273 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 11273 
                                                               tmp_4 = 73; else 
                                                                    #line 11273 
                                                                    tmp_4 = 85;
      #line 11273 
      printk((char *)"\001",tmp_4,(char *)"ipw_deinit");
    }
  }
  else 
    #line 11275 
    if ((ipw_debug_level & 4U) != 0U) {
      #line 11275 
      int tmp_6;
      #line 11275 
      ;
      #line 11275 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                               #line 11275 
                                                               tmp_6 = 73; else 
                                                                    #line 11275 
                                                                    tmp_6 = 85;
      #line 11275 
      printk((char *)"\001",tmp_6,(char *)"ipw_deinit",1000 - i);
    }
  #line 11278 
  ipw_send_card_disable(priv,0U);
  #line 11280 
  priv->status &= 4294967263U;
  #line 11281 
  return;
}

#line 11283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_down(struct ipw_priv *priv)
{
  #line 11285 
  int exit_pending = (int)priv->status & 2048;
  #line 11287 
  priv->status |= 2048U;
  #line 11289 
  if (ipw_is_init(priv) != 0) 
                              #line 11290 
                              ipw_deinit(priv);
  #line 11294 
  if (exit_pending == 0) 
                         #line 11295 
                         priv->status &= 4294965247U;
  #line 11298 
  ipw_disable_interrupts(priv);
  #line 11301 
  priv->status &= 2060U;
  #line 11302 
  netif_carrier_off(priv->net_dev);
  #line 11304 
  ipw_stop_nic(priv);
  #line 11306 
  ipw_led_radio_off(priv);
  #line 11307 
  return;
}

#line 11309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_bg_down(struct work_struct *work)
{
  #line 11312 
  void *__mptr;
  #line 11312 
  __mptr = (void *)work;
  #line 11311 
  struct ipw_priv *priv = ((struct ipw_priv *)(__mptr + 18446744073709546208U));
  #line 11313 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 11314 
  ipw_down(priv);
  #line 11315 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 11316 
  return;
}

#line 11318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_wdev_init(struct net_device *dev)
{
  #line 11320 
  int i;
  #line 11320 
  int rc = 0;
  #line 11321 
  struct ipw_priv *priv = libipw_priv(dev);
  #line 11322 
  struct libipw_geo *geo = libipw_get_geo(priv->ieee);
  #line 11323 
  struct wireless_dev *wdev = & (priv->ieee)->wdev;
  #line 11325 
  memcpy((void *)(& (wdev->wiphy)->perm_addr),(void *)(& priv->mac_addr),6UL);
  #line 11328 
  if ((unsigned int)geo->bg_channels != 0U) {
    #line 11329 
    struct ieee80211_supported_band *bg_band = & (priv->ieee)->bg_band;
    #line 11331 
    bg_band->band = NL80211_BAND_2GHZ;
    #line 11332 
    bg_band->n_channels = (int)geo->bg_channels;
    #line 11333 
    bg_band->channels = (struct ieee80211_channel *)kcalloc((unsigned long)geo->bg_channels,64UL,3264U);
    #line 11336 
    if (bg_band->channels == (struct ieee80211_channel *)0) {
      #line 11337 
      rc = -12;
      #line 11338 
      goto out;
    }
    #line 11341 
    i = 0;
    #line 11341 
    while ((int)geo->bg_channels > i) {
      #line 11342 
      (bg_band->channels + (unsigned long)i)->band = NL80211_BAND_2GHZ;
      #line 11343 
      (bg_band->channels + (unsigned long)i)->center_freq = geo->bg[i].freq;
      #line 11344 
      (bg_band->channels + (unsigned long)i)->hw_value = (unsigned short)geo->bg[i].channel;
      #line 11345 
      (bg_band->channels + (unsigned long)i)->max_power = (int)geo->bg[i].max_power;
      #line 11346 
      if (((int)geo->bg[i].flags & 1) != 0) 
                                            #line 11347 
                                            (bg_band->channels + (unsigned long)i)->flags |= 2U;
      #line 11349 
      if (((int)geo->bg[i].flags & 8) != 0) 
                                            #line 11350 
                                            (bg_band->channels + (unsigned long)i)->flags |= 2U;
      #line 11352 
      if (((int)geo->bg[i].flags & 32) != 0) 
                                             #line 11353 
                                             (bg_band->channels + (unsigned long)i)->flags |= 8U;
      #line 11341 
      i ++;
    }
    #line 11360 
    bg_band->bitrates = (struct ieee80211_rate *)(& ipw2200_rates);
    #line 11361 
    bg_band->n_bitrates = 12;
    #line 11363 
    (wdev->wiphy)->bands[0] = bg_band;
  }
  #line 11367 
  if ((unsigned int)geo->a_channels != 0U) {
    #line 11368 
    struct ieee80211_supported_band *a_band = & (priv->ieee)->a_band;
    #line 11370 
    a_band->band = NL80211_BAND_5GHZ;
    #line 11371 
    a_band->n_channels = (int)geo->a_channels;
    #line 11372 
    a_band->channels = (struct ieee80211_channel *)kcalloc((unsigned long)geo->a_channels,64UL,3264U);
    #line 11375 
    if (a_band->channels == (struct ieee80211_channel *)0) {
      #line 11376 
      rc = -12;
      #line 11377 
      goto out;
    }
    #line 11380 
    i = 0;
    #line 11380 
    while ((int)geo->a_channels > i) {
      #line 11381 
      (a_band->channels + (unsigned long)i)->band = NL80211_BAND_5GHZ;
      #line 11382 
      (a_band->channels + (unsigned long)i)->center_freq = geo->a[i].freq;
      #line 11383 
      (a_band->channels + (unsigned long)i)->hw_value = (unsigned short)geo->a[i].channel;
      #line 11384 
      (a_band->channels + (unsigned long)i)->max_power = (int)geo->a[i].max_power;
      #line 11385 
      if (((int)geo->a[i].flags & 1) != 0) 
                                           #line 11386 
                                           (a_band->channels + (unsigned long)i)->flags |= 2U;
      #line 11388 
      if (((int)geo->a[i].flags & 8) != 0) 
                                           #line 11389 
                                           (a_band->channels + (unsigned long)i)->flags |= 2U;
      #line 11391 
      if (((int)geo->a[i].flags & 32) != 0) 
                                            #line 11392 
                                            (a_band->channels + (unsigned long)i)->flags |= 8U;
      #line 11380 
      i ++;
    }
    #line 11399 
    a_band->bitrates = (struct ieee80211_rate *)(& ipw2200_rates) + 4U;
    #line 11400 
    a_band->n_bitrates = 8;
    #line 11402 
    (wdev->wiphy)->bands[1] = a_band;
  }
  #line 11405 
  (wdev->wiphy)->cipher_suites = (u32 *)(& ipw_cipher_suites);
  #line 11406 
  (wdev->wiphy)->n_cipher_suites = 4;
  #line 11408 
  set_wiphy_dev(wdev->wiphy,& (priv->pci_dev)->dev);
  #line 11411 
  if (wiphy_register(wdev->wiphy) != 0) 
                                        #line 11412 
                                        rc = -5;
  #line 11413 
  out: 
       #line 11413 
  ;
  #line 11414 
  return rc;
}

#line 11418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct pci_device_id card_ids[23U] = {{.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9985U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 9986U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10001U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10002U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10017U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10018U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10033U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10034U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10049U}, {.vendor = 32902U, .device = 4163U, .subvendor = 4156U, .subdevice = 10049U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10050U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10065U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10066U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10067U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10068U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10081U}, {.vendor = 32902U, .device = 4163U, .subvendor = 32902U, .subdevice = 10082U}, {.vendor = 32902U, .device = 4175U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 16928U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 16929U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 16931U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 16932U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 11446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
struct pci_device_id __mod_pci__card_ids_device_table[23U];
#line 11448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct attribute *ipw_sysfs_entries[23U] = {& dev_attr_rf_kill.attr, & dev_attr_direct_dword.attr, & dev_attr_indirect_byte.attr, & dev_attr_indirect_dword.attr, & dev_attr_mem_gpio_reg.attr, & dev_attr_command_event_reg.attr, & dev_attr_nic_type.attr, & dev_attr_status.attr, & dev_attr_cfg.attr, & dev_attr_error.attr, & dev_attr_event_log.attr, & dev_attr_cmd_log.attr, & dev_attr_eeprom_delay.attr, & dev_attr_ucode_version.attr, & dev_attr_rtc.attr, & dev_attr_scan_age.attr, & dev_attr_led.attr, & dev_attr_speed_scan.attr, & dev_attr_net_stats.attr, & dev_attr_channels.attr, & dev_attr_rtap_iface.attr, & dev_attr_rtap_filter.attr};
#line 11476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct attribute_group ipw_attribute_group = {.attrs = (struct attribute **)(& ipw_sysfs_entries)};
#line 11482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_prom_open(struct net_device *dev)
{
  #line 11484 
  struct ipw_prom_priv *prom_priv = libipw_priv(dev);
  #line 11485 
  struct ipw_priv *priv = prom_priv->priv;
  #line 11487 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 11487 
    int tmp_1;
    #line 11487 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 11487 
                                                             tmp_1 = 73; else 
                                                                    #line 11487 
                                                                    tmp_1 = 85;
    #line 11487 
    printk((char *)"\001",tmp_1,(char *)"ipw_prom_open");
  }
  #line 11488 
  netif_carrier_off(dev);
  #line 11490 
  if ((priv->ieee)->iw_mode != 6) {
    #line 11491 
    priv->sys_config.accept_all_data_frames = (unsigned char)1U;
    #line 11492 
    priv->sys_config.accept_non_directed_frames = (unsigned char)1U;
    #line 11493 
    priv->sys_config.accept_all_mgmt_bcpr = (unsigned char)1U;
    #line 11494 
    priv->sys_config.accept_all_mgmt_frames = (unsigned char)1U;
    #line 11496 
    ipw_send_system_config(priv);
  }
  #line 11499 
  return 0;
}

#line 11502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_prom_stop(struct net_device *dev)
{
  #line 11504 
  struct ipw_prom_priv *prom_priv = libipw_priv(dev);
  #line 11505 
  struct ipw_priv *priv = prom_priv->priv;
  #line 11507 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 11507 
    int tmp_1;
    #line 11507 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 11507 
                                                             tmp_1 = 73; else 
                                                                    #line 11507 
                                                                    tmp_1 = 85;
    #line 11507 
    printk((char *)"\001",tmp_1,(char *)"ipw_prom_stop");
  }
  #line 11509 
  if ((priv->ieee)->iw_mode != 6) {
    #line 11510 
    priv->sys_config.accept_all_data_frames = (unsigned char)0U;
    #line 11511 
    priv->sys_config.accept_non_directed_frames = (unsigned char)0U;
    #line 11512 
    priv->sys_config.accept_all_mgmt_bcpr = (unsigned char)0U;
    #line 11513 
    priv->sys_config.accept_all_mgmt_frames = (unsigned char)0U;
    #line 11515 
    ipw_send_system_config(priv);
  }
  #line 11518 
  return 0;
}

#line 11521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static netdev_tx_t ipw_prom_hard_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 11524 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 11524 
    int tmp_0;
    #line 11524 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 11524 
                                                             tmp_0 = 73; else 
                                                                    #line 11524 
                                                                    tmp_0 = 85;
    #line 11524 
    printk((char *)"\001",tmp_0,(char *)"ipw_prom_hard_start_xmit");
  }
  #line 11525 
  consume_skb(skb);
  #line 11526 
  return NETDEV_TX_OK;
}

#line 11529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct net_device_ops ipw_prom_netdev_ops = {.ndo_open = & ipw_prom_open, .ndo_stop = & ipw_prom_stop, .ndo_start_xmit = & ipw_prom_hard_start_xmit, .ndo_set_mac_address = & eth_mac_addr, .ndo_validate_addr = & eth_validate_addr};
#line 11537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_prom_alloc(struct ipw_priv *priv)
{
  #line 11539 
  int rc = 0;
  #line 11541 
  if (priv->prom_net_dev != (struct net_device *)0) 
                                                    #line 11542 
                                                    return -1;
  #line 11544 
  priv->prom_net_dev = alloc_libipw(32,1);
  #line 11545 
  if (priv->prom_net_dev == (struct net_device *)0) 
                                                    #line 11546 
                                                    return -12;
  #line 11548 
  priv->prom_priv = (struct ipw_prom_priv *)libipw_priv(priv->prom_net_dev);
  #line 11549 
  (priv->prom_priv)->ieee = (struct libipw_device *)netdev_priv(priv->prom_net_dev);
  #line 11550 
  (priv->prom_priv)->priv = priv;
  #line 11552 
  strcpy((char *)(& (priv->prom_net_dev)->name),(char *)"rtap%d");
  #line 11553 
  memcpy((void *)(priv->prom_net_dev)->dev_addr,(void *)(& priv->mac_addr),6UL);
  #line 11555 
  (priv->prom_net_dev)->type = (unsigned short)803U;
  #line 11556 
  (priv->prom_net_dev)->netdev_ops = & ipw_prom_netdev_ops;
  #line 11558 
  (priv->prom_net_dev)->min_mtu = 68U;
  #line 11559 
  (priv->prom_net_dev)->max_mtu = 2304U;
  #line 11561 
  ((priv->prom_priv)->ieee)->iw_mode = 6;
  #line 11562 
  (priv->prom_net_dev)->dev.parent = & (priv->pci_dev)->dev;
  #line 11564 
  rc = cif_register_netdev(priv->prom_net_dev);
  #line 11565 
  if (rc != 0) {
    #line 11566 
    free_libipw(priv->prom_net_dev,1);
    #line 11567 
    priv->prom_net_dev = (struct net_device *)0;
    #line 11568 
    return rc;
  }
  #line 11571 
  return 0;
}

#line 11574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_prom_free(struct ipw_priv *priv)
{
  #line 11576 
  if (priv->prom_net_dev == (struct net_device *)0) 
                                                    #line 11577 
                                                    return;
  #line 11579 
  cif_unregister_netdev(priv->prom_net_dev);
  #line 11580 
  free_libipw(priv->prom_net_dev,1);
  #line 11582 
  priv->prom_net_dev = (struct net_device *)0;
  #line 11583 
  return;
}

#line 11587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct net_device_ops ipw_netdev_ops = {.ndo_open = & ipw_net_open, .ndo_stop = & ipw_net_stop, .ndo_start_xmit = & libipw_xmit, .ndo_set_rx_mode = & ipw_net_set_multicast_list, .ndo_set_mac_address = & ipw_net_set_mac_address, .ndo_validate_addr = & eth_validate_addr};
#line 11596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_pci_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 11600 
  struct net_device *net_dev;
  #line 11601 
  void *base;
  #line 11602 
  u32 length;
  #line 11602 
  u32 val;
  #line 11603 
  struct ipw_priv *priv;
  #line 11604 
  int i;
  #line 11599 
  int err = 0;
  #line 11606 
  net_dev = alloc_libipw(7136,0);
  #line 11607 
  if (net_dev == (struct net_device *)0) {
    #line 11608 
    err = -12;
    #line 11609 
    goto out;
  }
  #line 11612 
  priv = (struct ipw_priv *)libipw_priv(net_dev);
  #line 11613 
  priv->ieee = (struct libipw_device *)netdev_priv(net_dev);
  #line 11615 
  priv->net_dev = net_dev;
  #line 11616 
  priv->pci_dev = pdev;
  #line 11617 
  ipw_debug_level = (unsigned int)debug;
  #line 11618 
  spinlock_check(& priv->irq_lock);
  {
    #line 11618 
    struct lock_class_key __key;
    #line 11618 
    __raw_spin_lock_init(& priv->irq_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&priv->irq_lock)->rlock",& __key);
  }
  #line 11619 
  spinlock_check(& priv->lock);
  {
    #line 11619 
    struct lock_class_key __key_0;
    #line 11619 
    __raw_spin_lock_init(& priv->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&priv->lock)->rlock",& __key_0);
  }
  #line 11620 
  i = 0;
  #line 11620 
  while (i <= 30) {
    #line 11621 
    INIT_LIST_HEAD(& priv->ibss_mac_hash[i]);
    #line 11620 
    i ++;
  }
  {
    #line 11623 
    struct lock_class_key __key_1;
    #line 11623 
    __mutex_init(& priv->mutex,(char *)"&priv->mutex",& __key_1);
  }
  #line 11624 
  if (pci_enable_device(pdev) != 0) {
    #line 11625 
    err = -19;
    #line 11626 
    goto out_free_libipw;
  }
  #line 11629 
  pci_set_master(pdev);
  #line 11631 
  err = pci_set_dma_mask(pdev,4294967295ULL);
  #line 11632 
  if (err == 0) 
                #line 11633 
                err = pci_set_consistent_dma_mask(pdev,4294967295ULL);
  #line 11634 
  if (err != 0) {
    #line 11635 
    printk((char *)"\001");
    #line 11636 
    goto out_pci_disable_device;
  }
  #line 11639 
  pci_set_drvdata(pdev,(void *)priv);
  #line 11641 
  err = pci_request_regions(pdev,(char *)"ipw2200");
  #line 11642 
  if (err != 0) 
                #line 11643 
                goto out_pci_disable_device;
  #line 11647 
  pci_read_config_dword(pdev,64,& val);
  #line 11648 
  if ((val & 65280U) != 0U) 
                            #line 11649 
                            pci_write_config_dword(pdev,64,val & 4294902015U);
  #line 11651 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 11651 
    length = ((unsigned int)pdev->resource[0].end - (unsigned int)pdev->resource[0].start) + 1U; else 
                                                                    #line 11651 
                                                                    length = 0U;
  #line 11652 
  priv->hw_len = (unsigned long)length;
  #line 11654 
  base = pci_ioremap_bar(pdev,0);
  #line 11655 
  if (base == (void *)0) {
    #line 11656 
    err = -19;
    #line 11657 
    goto out_pci_release_regions;
  }
  #line 11660 
  priv->hw_base = base;
  #line 11661 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 11661 
    int tmp_3;
    #line 11661 
    ;
    #line 11661 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 11661 
                                                             tmp_3 = 73; else 
                                                                    #line 11661 
                                                                    tmp_3 = 85;
    #line 11661 
    printk((char *)"\001",tmp_3,(char *)"ipw_pci_probe",length);
  }
  #line 11662 
  if ((ipw_debug_level & 4U) != 0U) {
    #line 11662 
    int tmp_5;
    #line 11662 
    ;
    #line 11662 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                             #line 11662 
                                                             tmp_5 = 73; else 
                                                                    #line 11662 
                                                                    tmp_5 = 85;
    #line 11662 
    printk((char *)"\001",tmp_5,(char *)"ipw_pci_probe",base);
  }
  #line 11664 
  err = ipw_setup_deferred_work(priv);
  #line 11665 
  if (err != 0) {
    #line 11666 
    printk((char *)"\001");
    #line 11667 
    goto out_iounmap;
  }
  #line 11670 
  ipw_sw_reset(priv,1);
  #line 11672 
  err = cif_request_irq(pdev->irq,& ipw_isr,128UL,(char *)"ipw2200",(void *)priv);
  #line 11673 
  if (err != 0) {
    #line 11674 
    printk((char *)"\001",pdev->irq);
    #line 11675 
    goto out_iounmap;
  }
  #line 11678 
  net_dev->dev.parent = & pdev->dev;
  #line 11680 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 11682 
  (priv->ieee)->hard_start_xmit = & ipw_net_hard_start_xmit;
  #line 11683 
  (priv->ieee)->set_security = & shim__set_security;
  #line 11684 
  (priv->ieee)->is_queue_full = & ipw_net_is_queue_full;
  #line 11687 
  (priv->ieee)->is_qos_active = & ipw_is_qos_active;
  #line 11688 
  (priv->ieee)->handle_probe_response = & ipw_handle_beacon;
  #line 11689 
  (priv->ieee)->handle_beacon = & ipw_handle_probe_response;
  #line 11690 
  (priv->ieee)->handle_assoc_response = & ipw_handle_assoc_response;
  #line 11693 
  (priv->ieee)->perfect_rssi = -20;
  #line 11694 
  (priv->ieee)->worst_rssi = -85;
  #line 11696 
  net_dev->netdev_ops = & ipw_netdev_ops;
  #line 11697 
  priv->wireless_data.spy_data = & (priv->ieee)->spy_data;
  #line 11698 
  net_dev->wireless_data = & priv->wireless_data;
  #line 11699 
  net_dev->wireless_handlers = & ipw_wx_handler_def;
  #line 11700 
  net_dev->ethtool_ops = & ipw_ethtool_ops;
  #line 11702 
  net_dev->min_mtu = 68U;
  #line 11703 
  net_dev->max_mtu = 2304U;
  #line 11705 
  err = sysfs_create_group(& pdev->dev.kobj,& ipw_attribute_group);
  #line 11706 
  if (err != 0) {
    #line 11707 
    printk((char *)"\001");
    #line 11708 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 11709 
    goto out_release_irq;
  }
  #line 11712 
  if (ipw_up(priv) != 0) {
    #line 11713 
    cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
    #line 11714 
    err = -5;
    #line 11715 
    goto out_remove_sysfs;
  }
  #line 11718 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 11720 
  err = ipw_wdev_init(net_dev);
  #line 11721 
  if (err != 0) {
    #line 11722 
    printk((char *)"\001");
    #line 11723 
    goto out_remove_sysfs;
  }
  #line 11726 
  err = cif_register_netdev(net_dev);
  #line 11727 
  if (err != 0) {
    #line 11728 
    printk((char *)"\001");
    #line 11729 
    goto out_unregister_wiphy;
  }
  #line 11733 
  if (rtap_iface != 0) {
    #line 11734 
    err = ipw_prom_alloc(priv);
    #line 11735 
    if (err != 0) {
      #line 11736 
      printk((char *)"\001",err);
      #line 11738 
      cif_unregister_netdev(priv->net_dev);
      #line 11739 
      goto out_unregister_wiphy;
    }
  }
  #line 11744 
  printk((char *)"\001",(u8 *)(& (priv->ieee)->geo.name),(int)(priv->ieee)->geo.bg_channels,(int)(priv->ieee)->geo.a_channels);
  #line 11749 
  return 0;
  #line 11751 
  out_unregister_wiphy: 
                        #line 11751 
  ;
  #line 11752 
  wiphy_unregister((priv->ieee)->wdev.wiphy);
  #line 11753 
  kfree((void *)(priv->ieee)->a_band.channels);
  #line 11754 
  kfree((void *)(priv->ieee)->bg_band.channels);
  #line 11755 
  out_remove_sysfs: 
                    #line 11755 
  ;
  #line 11756 
  sysfs_remove_group(& pdev->dev.kobj,& ipw_attribute_group);
  #line 11757 
  out_release_irq: 
                   #line 11757 
  ;
  #line 11758 
  cif_free_irq(pdev->irq,(void *)priv);
  #line 11759 
  out_iounmap: 
               #line 11759 
  ;
  #line 11760 
  iounmap(priv->hw_base);
  #line 11761 
  out_pci_release_regions: 
                           #line 11761 
  ;
  #line 11762 
  pci_release_regions(pdev);
  #line 11763 
  out_pci_disable_device: 
                          #line 11763 
  ;
  #line 11764 
  pci_disable_device(pdev);
  #line 11765 
  out_free_libipw: 
                   #line 11765 
  ;
  #line 11766 
  free_libipw(priv->net_dev,0);
  #line 11767 
  out: 
       #line 11767 
  ;
  #line 11768 
  return err;
}

#line 11771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_pci_remove(struct pci_dev *pdev)
{
  #line 11774 
  struct list_head *p;
  #line 11774 
  struct list_head *q;
  #line 11775 
  int i;
  #line 11773 
  struct ipw_priv *priv = pci_get_drvdata(pdev);
  #line 11777 
  if (priv == (struct ipw_priv *)0) 
                                    #line 11778 
                                    return;
  #line 11780 
  cif_mutex_lock_mutex_of_ipw_priv(& priv->mutex);
  #line 11782 
  priv->status |= 2048U;
  #line 11783 
  ipw_down(priv);
  #line 11784 
  sysfs_remove_group(& pdev->dev.kobj,& ipw_attribute_group);
  #line 11786 
  cif_mutex_unlock_mutex_of_ipw_priv(& priv->mutex);
  #line 11788 
  cif_unregister_netdev(priv->net_dev);
  #line 11790 
  if (priv->rxq != (struct ipw_rx_queue *)0) {
    #line 11791 
    ipw_rx_queue_free(priv,priv->rxq);
    #line 11792 
    priv->rxq = (struct ipw_rx_queue *)0;
  }
  #line 11794 
  ipw_tx_queue_free(priv);
  #line 11796 
  if (priv->cmdlog != (struct ipw_cmd_log *)0) {
    #line 11797 
    kfree((void *)priv->cmdlog);
    #line 11798 
    priv->cmdlog = (struct ipw_cmd_log *)0;
  }
  #line 11802 
  cancel_delayed_work_sync(& priv->adhoc_check);
  #line 11803 
  cancel_work_sync(& priv->associate);
  #line 11804 
  cancel_work_sync(& priv->disassociate);
  #line 11805 
  cancel_work_sync(& priv->system_config);
  #line 11806 
  cancel_work_sync(& priv->rx_replenish);
  #line 11807 
  cancel_work_sync(& priv->adapter_restart);
  #line 11808 
  cancel_delayed_work_sync(& priv->rf_kill);
  #line 11809 
  cancel_work_sync(& priv->up);
  #line 11810 
  cancel_work_sync(& priv->down);
  #line 11811 
  cancel_delayed_work_sync(& priv->request_scan);
  #line 11812 
  cancel_delayed_work_sync(& priv->request_direct_scan);
  #line 11813 
  cancel_delayed_work_sync(& priv->request_passive_scan);
  #line 11814 
  cancel_delayed_work_sync(& priv->scan_event);
  #line 11815 
  cancel_delayed_work_sync(& priv->gather_stats);
  #line 11816 
  cancel_work_sync(& priv->abort_scan);
  #line 11817 
  cancel_work_sync(& priv->roam);
  #line 11818 
  cancel_delayed_work_sync(& priv->scan_check);
  #line 11819 
  cancel_work_sync(& priv->link_up);
  #line 11820 
  cancel_work_sync(& priv->link_down);
  #line 11821 
  cancel_delayed_work_sync(& priv->led_link_on);
  #line 11822 
  cancel_delayed_work_sync(& priv->led_link_off);
  #line 11823 
  cancel_delayed_work_sync(& priv->led_act_off);
  #line 11824 
  cancel_work_sync(& priv->merge_networks);
  #line 11827 
  i = 0;
  #line 11827 
  while (i <= 30) {
    #line 11828 
    p = priv->ibss_mac_hash[i].next;
    #line 11828 
    q = p->next;
    #line 11828 
    while (& priv->ibss_mac_hash[i] != p) {
      {
        #line 11830 
        void *__mptr;
        #line 11829 
        list_del(p);
        #line 11830 
        __mptr = (void *)p;
        #line 11830 
        kfree((void *)((struct ipw_ibss_seq *)(__mptr + 18446744073709551592U)));
      }
      #line 11828 
      p = q;
      #line 11828 
      q = p->next;
    }
    #line 11827 
    i ++;
  }
  #line 11834 
  kfree((void *)priv->error);
  #line 11835 
  priv->error = (struct ipw_fw_error *)0;
  #line 11838 
  ipw_prom_free(priv);
  #line 11841 
  cif_free_irq(pdev->irq,(void *)priv);
  #line 11842 
  iounmap(priv->hw_base);
  #line 11843 
  pci_release_regions(pdev);
  #line 11844 
  pci_disable_device(pdev);
  #line 11846 
  wiphy_unregister((priv->ieee)->wdev.wiphy);
  #line 11847 
  kfree((void *)(priv->ieee)->a_band.channels);
  #line 11848 
  kfree((void *)(priv->ieee)->bg_band.channels);
  #line 11849 
  free_libipw(priv->net_dev,0);
  #line 11850 
  free_firmware();
  #line 11851 
  return;
}

#line 11854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_pci_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 11856 
  struct ipw_priv *priv = pci_get_drvdata(pdev);
  #line 11857 
  struct net_device *dev = priv->net_dev;
  #line 11859 
  printk((char *)"\001",(char *)(& dev->name));
  #line 11862 
  ipw_down(priv);
  #line 11865 
  netif_device_detach(dev);
  #line 11867 
  pci_save_state(pdev);
  #line 11868 
  pci_disable_device(pdev);
  #line 11869 
  ;
  #line 11869 
  pci_set_power_state(pdev,pci_choose_state(pdev,state));
  #line 11871 
  priv->suspend_at = ktime_get_boottime_seconds();
  #line 11873 
  return 0;
}

#line 11876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_pci_resume(struct pci_dev *pdev)
{
  #line 11880 
  int err;
  #line 11881 
  u32 val;
  #line 11878 
  struct ipw_priv *priv = pci_get_drvdata(pdev);
  #line 11879 
  struct net_device *dev = priv->net_dev;
  #line 11883 
  printk((char *)"\001",(char *)(& dev->name));
  #line 11885 
  pci_set_power_state(pdev,0);
  #line 11886 
  err = pci_enable_device(pdev);
  #line 11887 
  if (err != 0) {
    #line 11888 
    printk((char *)"\001",(char *)(& dev->name));
    #line 11890 
    return err;
  }
  #line 11892 
  pci_restore_state(pdev);
  #line 11900 
  pci_read_config_dword(pdev,64,& val);
  #line 11901 
  if ((val & 65280U) != 0U) 
                            #line 11902 
                            pci_write_config_dword(pdev,64,val & 4294902015U);
  #line 11906 
  netif_device_attach(dev);
  #line 11908 
  priv->suspend_time = ktime_get_boottime_seconds() - priv->suspend_at;
  #line 11911 
  cif_schedule_work(& priv->up);
  #line 11913 
  return 0;
}

#line 11917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_pci_shutdown(struct pci_dev *pdev)
{
  #line 11919 
  struct ipw_priv *priv = pci_get_drvdata(pdev);
  #line 11922 
  ipw_down(priv);
  #line 11924 
  pci_disable_device(pdev);
  #line 11925 
  return;
}

#line 11928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static struct pci_driver ipw_driver = {.name = (char *)"ipw2200", .id_table = (struct pci_device_id *)(& card_ids), .probe = & ipw_pci_probe, .remove = & ipw_pci_remove, .suspend = & ipw_pci_suspend, .resume = & ipw_pci_resume, .shutdown = & ipw_pci_shutdown};
#line 11940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static int ipw_init(void)
{
  #line 11942 
  int ret;
  #line 11944 
  printk((char *)"\001");
  #line 11945 
  printk((char *)"\001");
  #line 11947 
  ret = cif___pci_register_driver(& ipw_driver,& __this_module,(char *)"ipw2200");
  #line 11948 
  if (ret != 0) {
    #line 11949 
    printk((char *)"\001");
    #line 11950 
    return ret;
  }
  #line 11953 
  ret = driver_create_file(& ipw_driver.driver,& driver_attr_debug_level);
  #line 11954 
  if (ret != 0) {
    #line 11955 
    printk((char *)"\001");
    #line 11956 
    cif_pci_unregister_driver(& ipw_driver);
    #line 11957 
    return ret;
  }
  #line 11960 
  return ret;
}

#line 11963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intel/ipw2x00/ipw2200.c"
static void ipw_exit(void)
{
  #line 11965 
  driver_remove_file(& ipw_driver.driver,& driver_attr_debug_level);
  #line 11966 
  cif_pci_unregister_driver(& ipw_driver);
  #line 11967 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
struct pci_device_id (*emg_alias_card_ids)[23U] = & card_ids;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int (*emg_alias_eth_mac_addr)(struct net_device *, void *) = & eth_mac_addr;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
struct pci_driver *emg_alias_ipw_driver = & ipw_driver;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 100 
#line 100 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 101 
#line 101 
int emg_register_netdev(struct net_device *arg0);
#line 102 
#line 102 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 103 
#line 103 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 104 
#line 104 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 105 
#line 105 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 106 
#line 106 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 107 
#line 107 
void emg_unregister_netdev(struct net_device *arg0);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
void emg_wrapper_ipw_ethtool_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 112 
  ipw_ethtool_get_drvinfo(arg0,arg1);
  #line 113 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_ethtool_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 117 
  return ipw_ethtool_get_eeprom(arg0,arg1,arg2);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_ethtool_get_eeprom_len(struct net_device *arg0)
{
  #line 122 
  return ipw_ethtool_get_eeprom_len(arg0);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
unsigned int emg_wrapper_ipw_ethtool_get_link(struct net_device *arg0)
{
  #line 127 
  return ipw_ethtool_get_link(arg0);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_ethtool_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 132 
  return ipw_ethtool_set_eeprom(arg0,arg1,arg2);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
enum irqreturn emg_wrapper_ipw_isr(int arg0, void *arg1)
{
  #line 137 
  return ipw_isr(arg0,arg1);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_net_open(struct net_device *arg0)
{
  #line 142 
  return ipw_net_open(arg0);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_net_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 147 
  return ipw_net_set_mac_address(arg0,arg1);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
void emg_wrapper_ipw_net_set_multicast_list(struct net_device *arg0)
{
  #line 152 
  ipw_net_set_multicast_list(arg0);
  #line 153 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_net_stop(struct net_device *arg0)
{
  #line 157 
  return ipw_net_stop(arg0);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_pci_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 162 
  return ipw_pci_probe(arg0,arg1);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
void emg_wrapper_ipw_pci_remove(struct pci_dev *arg0)
{
  #line 167 
  ipw_pci_remove(arg0);
  #line 168 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_pci_resume(struct pci_dev *arg0)
{
  #line 172 
  return ipw_pci_resume(arg0);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
void emg_wrapper_ipw_pci_shutdown(struct pci_dev *arg0)
{
  #line 177 
  ipw_pci_shutdown(arg0);
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_wrapper_ipw_pci_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 182 
  return ipw_pci_suspend(arg0,arg1);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
enum netdev_tx emg_wrapper_ipw_prom_hard_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 187 
  return ipw_prom_hard_start_xmit(arg0,arg1);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
void emg_ipw_exit(void)
{
  #line 192 
  ipw_exit();
  #line 193 
  return;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
int emg_ipw_init(void)
{
  #line 196 
  return ipw_init();
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 217 
  ldv_set_bit(nr,addr);
  #line 218 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 224 
  ldv_clear_bit(nr,addr);
  #line 225 
  return;
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 231 
  ldv_init_list_head(list);
  #line 232 
  return;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static size_t cif_strlen(char *s)
{
  #line 245 
  return ldv_strlen(s);
}

#line 416  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 419 
  return ldv_kmalloc(size,flags);
}

#line 423  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 426 
  return ldv_kmalloc_array(n,size,flags);
}

#line 430  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 433 
  return ldv_kcalloc(n,size,flags);
}

#line 451  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 454 
  return ldv_kzalloc(size,flags);
}

#line 744  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif___ldv_spin_lock_irq_lock_of_ipw_priv(spinlock_t *lock)
{
  #line 747 
  ldv_spin_model_lock((char *)"irq_lock_of_ipw_priv");
  #line 749 
  __ldv_spin_lock(lock);
  #line 750 
  return;
}

#line 753  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_irq_lock_of_ipw_priv(spinlock_t *lock, unsigned long flags)
{
  #line 756 
  ldv_spin_model_unlock((char *)"irq_lock_of_ipw_priv");
  #line 758 
  spin_unlock_irqrestore(lock,flags);
  #line 759 
  return;
}

#line 762  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif___ldv_spin_lock_lock_of_ipw_priv(spinlock_t *lock)
{
  #line 765 
  ldv_spin_model_lock((char *)"lock_of_ipw_priv");
  #line 767 
  __ldv_spin_lock(lock);
  #line 768 
  return;
}

#line 771  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 775 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_ipw_priv(spinlock_t *lock, unsigned long flags)
{
  #line 782 
  ldv_spin_model_unlock((char *)"lock_of_ipw_priv");
  #line 784 
  spin_unlock_irqrestore(lock,flags);
  #line 785 
  return;
}

#line 788  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_mutex_lock_mutex_of_ipw_priv(struct mutex *lock)
{
  #line 791 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_ipw_priv");
  #line 792 
  return;
}

#line 795  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_mutex_unlock_mutex_of_ipw_priv(struct mutex *lock)
{
  #line 798 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_ipw_priv");
  #line 799 
  return;
}

#line 802  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 806 
  return emg_schedule_work(work);
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif___ldv_spin_lock_lock_of_libipw_device(spinlock_t *lock)
{
  #line 813 
  ldv_spin_model_lock((char *)"lock_of_libipw_device");
  #line 815 
  __ldv_spin_lock(lock);
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_libipw_device(spinlock_t *lock, unsigned long flags)
{
  #line 822 
  ldv_spin_model_unlock((char *)"lock_of_libipw_device");
  #line 824 
  spin_unlock_irqrestore(lock,flags);
  #line 825 
  return;
}

#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 831 
  return ldv_request_firmware(fw);
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif___ldv_spin_lock_lock_of_ipw_rx_queue(spinlock_t *lock)
{
  #line 838 
  ldv_spin_model_lock((char *)"lock_of_ipw_rx_queue");
  #line 840 
  __ldv_spin_lock(lock);
  #line 841 
  return;
}

#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_ipw_rx_queue(spinlock_t *lock, unsigned long flags)
{
  #line 847 
  ldv_spin_model_unlock((char *)"lock_of_ipw_rx_queue");
  #line 849 
  spin_unlock_irqrestore(lock,flags);
  #line 850 
  return;
}

#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 856 
  ldv_release_firmware(fw);
  #line 857 
  return;
}

#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 863 
  return ldv_kmemdup(src,len,gfp);
}

#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_lock_irq_lock_of_ipw_priv(spinlock_t *lock)
{
  #line 870 
  ldv_spin_model_lock((char *)"irq_lock_of_ipw_priv");
  #line 872 
  spin_lock(lock);
  #line 873 
  return;
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 880 
  emg_tasklet_schedule(t);
  #line 881 
  return;
}

#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_spin_unlock_irq_lock_of_ipw_priv(spinlock_t *lock)
{
  #line 887 
  ldv_spin_model_unlock((char *)"irq_lock_of_ipw_priv");
  #line 889 
  spin_unlock(lock);
  #line 890 
  return;
}

#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 897 
  emg_tasklet_init(t,func,data);
  #line 898 
  return;
}

#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 905 
  return emg_register_netdev(dev);
}

#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 913 
  emg_unregister_netdev(dev);
  #line 914 
  return;
}

#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 921 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 929 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 937 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/0/concurrency safety/weaver/ipw2200.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 945 
  emg_pci_unregister_driver(dev);
  #line 946 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
#line 147 
void emg_dispatch_deregister_11(struct net_device *arg0);
#line 66 
#line 113 
void emg_dispatch_deregister_4(struct pci_driver *arg0);
#line 67 
#line 104 
void emg_dispatch_irq_deregister_3(int arg0);
#line 68 
#line 133 
void emg_dispatch_irq_register_6(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 69 
#line 93 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 70 
#line 122 
void emg_dispatch_register_5(struct net_device *arg0);
#line 71 
#line 848 
void *emg_entry_point_insmod(void *arg0);
#line 73 
#line 156 
void *emg_interrupt_interrupt_scenario_ipw_isr(void *arg0);
#line 74 
#line 219 
void *emg_net_random_allocationless_scenario_ipw_net_set_mac_address(void *arg0);
#line 75 
#line 405 
void *emg_pci_pci_scenario_ipw_driver(void *arg0);
#line 84 
#line 877 
int main(void);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 89  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 94 
  int ret;
  #line 95 
  struct emg_struct_pci_scenario_ipw_driver_14 *cf_arg_14;
  #line 96 
  cf_arg_14 = (struct emg_struct_pci_scenario_ipw_driver_14 *)ldv_xmalloc(16UL);
  #line 97 
  cf_arg_14->arg0 = arg0;
  #line 98 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_pci_pci_scenario_ipw_driver,(void *)cf_arg_14);
  #line 99 
  __VERIFIER_assume(ret == 0);
  #line 100 
  return;
}

#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_3(int arg0)
{
  #line 105 
  int ret;
  #line 106 
  struct emg_struct_free_irq_3 *cf_arg_12;
  #line 107 
  ret = pthread_join(emg_thread_12,(void **)0);
  #line 108 
  __VERIFIER_assume(ret == 0);
  #line 109 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_4(struct pci_driver *arg0)
{
  #line 114 
  int ret;
  #line 115 
  struct emg_struct_pci_scenario_ipw_driver_14 *cf_arg_14;
  #line 116 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 117 
  __VERIFIER_assume(ret == 0);
  #line 118 
  return;
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct net_device *arg0)
{
  #line 123 
  int ret;
  #line 124 
  struct emg_struct_random_allocationless_scenario_ipw_net_set_mac_address_13 *cf_arg_13;
  #line 125 
  cf_arg_13 = (struct emg_struct_random_allocationless_scenario_ipw_net_set_mac_address_13 *)ldv_xmalloc(16UL);
  #line 126 
  cf_arg_13->arg0 = arg0;
  #line 127 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_ipw_net_set_mac_address,(void *)cf_arg_13);
  #line 128 
  __VERIFIER_assume(ret == 0);
  #line 129 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_6(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 134 
  int ret;
  #line 135 
  struct emg_struct_interrupt_scenario_ipw_isr_12 *cf_arg_12;
  #line 136 
  cf_arg_12 = (struct emg_struct_interrupt_scenario_ipw_isr_12 *)ldv_xmalloc(40UL);
  #line 137 
  cf_arg_12->arg0 = arg0;
  #line 138 
  cf_arg_12->arg1 = arg1;
  #line 139 
  cf_arg_12->arg2 = arg2;
  #line 140 
  cf_arg_12->arg3 = arg3;
  #line 141 
  ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_ipw_isr,(void *)cf_arg_12);
  #line 142 
  __VERIFIER_assume(ret == 0);
  #line 143 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct net_device *arg0)
{
  #line 148 
  int ret;
  #line 149 
  struct emg_struct_random_allocationless_scenario_ipw_net_set_mac_address_13 *cf_arg_13;
  #line 150 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 151 
  __VERIFIER_assume(ret == 0);
  #line 152 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_ipw_isr(void *arg0)
{
  #line 159 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 160 
  void *emg_12_data;
  #line 161 
  int emg_12_line;
  #line 162 
  enum irqreturn emg_12_ret_val;
  #line 163 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 165 
  struct emg_struct_interrupt_scenario_ipw_isr_12 *data = (struct emg_struct_interrupt_scenario_ipw_isr_12 *)arg0;
  #line 168 
  emg_12_callback = & emg_wrapper_ipw_isr;
  #line 171 
  if (data != (struct emg_struct_interrupt_scenario_ipw_isr_12 *)0) {
    #line 172 
    emg_12_line = data->arg0;
    #line 173 
    emg_12_callback = data->arg1;
    #line 174 
    emg_12_thread = data->arg2;
    #line 175 
    emg_12_data = data->arg3;
    #line 176 
    ldv_free((void *)data);
  }
  #line 182 
  ldv_switch_to_interrupt_context();
  #line 186 
  emg_12_ret_val = emg_wrapper_ipw_isr(emg_12_line,emg_12_data);
  #line 191 
  ldv_switch_to_process_context();
  #line 194 
  if (ldv_undef_int() != 0) {
    #line 196 
    __VERIFIER_assume(emg_12_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 200 
    if (emg_12_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 201 
                                                              (*emg_12_thread)(emg_12_line,emg_12_data);
  }
  else 
       #line 206 
       __VERIFIER_assume(emg_12_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 214 
  return (void *)0;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_ipw_net_set_mac_address(void *arg0)
{
  #line 222 
  struct net_device *emg_13_container;
  #line 223 
  struct sk_buff *emg_13_emg_param_0_1;
  #line 224 
  struct sk_buff *emg_13_emg_param_0_6;
  #line 225 
  void *emg_13_emg_param_1_0;
  #line 226 
  struct ethtool_drvinfo *emg_13_emg_param_1_2;
  #line 227 
  struct ethtool_eeprom *emg_13_emg_param_1_3;
  #line 228 
  void *emg_13_emg_param_1_5;
  #line 229 
  struct ethtool_eeprom *emg_13_emg_param_1_7;
  #line 230 
  unsigned char *emg_13_emg_param_2_4;
  #line 231 
  unsigned char *emg_13_emg_param_2_8;
  #line 232 
  int emg_repeat_cnt_call_13 = 1;
  #line 234 
  struct emg_struct_random_allocationless_scenario_ipw_net_set_mac_address_13 *data = (struct emg_struct_random_allocationless_scenario_ipw_net_set_mac_address_13 *)arg0;
  #line 239 
  if (data != (struct emg_struct_random_allocationless_scenario_ipw_net_set_mac_address_13 *)0) {
    #line 240 
    emg_13_container = data->arg0;
    #line 241 
    ldv_free((void *)data);
  }
  #line 246 
  goto emg_call_13;
  #line 250 
  return (void *)0;
  #line 253 
  emg_call_13: 
               #line 253 
  ;
  #line 254 
  switch (ldv_undef_int()) {
    #line 255 
    case 0: 
            #line 255 
    ;
    #line 257 
    emg_13_emg_param_1_7 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 257 
    emg_13_emg_param_1_7 = emg_13_emg_param_1_7;
    #line 258 
    emg_13_emg_param_2_8 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 258 
    emg_13_emg_param_2_8 = emg_13_emg_param_2_8;
    #line 262 
    emg_wrapper_ipw_ethtool_set_eeprom(emg_13_container,emg_13_emg_param_1_7,emg_13_emg_param_2_8);
    #line 266 
    ldv_free((void *)emg_13_emg_param_1_7);
    #line 267 
    ldv_free((void *)emg_13_emg_param_2_8);
    #line 269 
    break;
    #line 271 
    case 1: 
            #line 271 
    ;
    #line 273 
    eth_validate_addr(emg_13_container);
    #line 275 
    break;
    #line 277 
    case 2: 
            #line 277 
    ;
    #line 279 
    emg_13_emg_param_0_6 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 279 
    emg_13_emg_param_0_6 = emg_13_emg_param_0_6;
    #line 283 
    emg_wrapper_ipw_prom_hard_start_xmit(emg_13_emg_param_0_6,emg_13_container);
    #line 287 
    ldv_free((void *)emg_13_emg_param_0_6);
    #line 289 
    break;
    #line 291 
    case 3: 
            #line 291 
    ;
    #line 293 
    emg_wrapper_ipw_net_set_multicast_list(emg_13_container);
    #line 295 
    break;
    #line 297 
    case 4: 
            #line 297 
    ;
    #line 299 
    emg_13_emg_param_1_5 = ldv_xmalloc_unknown_size(0UL);
    #line 299 
    emg_13_emg_param_1_5 = emg_13_emg_param_1_5;
    #line 303 
    (*emg_alias_eth_mac_addr)(emg_13_container,emg_13_emg_param_1_5);
    #line 307 
    ldv_free(emg_13_emg_param_1_5);
    #line 309 
    break;
    #line 311 
    case 5: 
            #line 311 
    ;
    #line 313 
    emg_wrapper_ipw_ethtool_get_link(emg_13_container);
    #line 315 
    break;
    #line 317 
    case 6: 
            #line 317 
    ;
    #line 319 
    emg_wrapper_ipw_ethtool_get_eeprom_len(emg_13_container);
    #line 321 
    break;
    #line 323 
    case 7: 
            #line 323 
    ;
    #line 325 
    emg_13_emg_param_1_3 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 325 
    emg_13_emg_param_1_3 = emg_13_emg_param_1_3;
    #line 326 
    emg_13_emg_param_2_4 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 326 
    emg_13_emg_param_2_4 = emg_13_emg_param_2_4;
    #line 330 
    emg_wrapper_ipw_ethtool_get_eeprom(emg_13_container,emg_13_emg_param_1_3,emg_13_emg_param_2_4);
    #line 334 
    ldv_free((void *)emg_13_emg_param_1_3);
    #line 335 
    ldv_free((void *)emg_13_emg_param_2_4);
    #line 337 
    break;
    #line 339 
    case 8: 
            #line 339 
    ;
    #line 341 
    emg_13_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 341 
    emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
    #line 345 
    emg_wrapper_ipw_ethtool_get_drvinfo(emg_13_container,emg_13_emg_param_1_2);
    #line 349 
    ldv_free((void *)emg_13_emg_param_1_2);
    #line 351 
    break;
    #line 353 
    case 9: 
            #line 353 
    ;
    #line 355 
    emg_13_emg_param_0_1 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 355 
    emg_13_emg_param_0_1 = emg_13_emg_param_0_1;
    #line 359 
    libipw_xmit(emg_13_emg_param_0_1,emg_13_container);
    #line 363 
    ldv_free((void *)emg_13_emg_param_0_1);
    #line 365 
    break;
    #line 367 
    case 10: 
             #line 367 
    ;
    #line 369 
    emg_13_emg_param_1_0 = ldv_xmalloc_unknown_size(0UL);
    #line 369 
    emg_13_emg_param_1_0 = emg_13_emg_param_1_0;
    #line 373 
    emg_wrapper_ipw_net_set_mac_address(emg_13_container,emg_13_emg_param_1_0);
    #line 377 
    ldv_free(emg_13_emg_param_1_0);
    #line 380 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 381 
      emg_repeat_cnt_call_13 --;
      #line 383 
      goto emg_call_13;
    }
    else 
         #line 385 
         __VERIFIER_assume(0);
    #line 389 
    break;
    #line 391 
    case 11: 
             #line 391 
    ;
    #line 395 
    break;
    #line 397 
    default: 
             #line 397 
    ;
    #line 397 
    __VERIFIER_assume(0);
  }
  #line 400 
  return (void *)0;
}

#line 405  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_ipw_driver(void *arg0)
{
  #line 408 
  int emg_14_choice;
  #line 409 
  struct pci_driver *emg_14_container;
  #line 410 
  struct pci_device_id *emg_14_device_id;
  #line 411 
  struct pci_dev *emg_14_resource_0;
  #line 412 
  struct pm_message emg_14_resource_1;
  #line 413 
  int emg_14_ret;
  #line 414 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 415 
  int emg_repeat_cnt_call_14_1 = 1;
  #line 416 
  int emg_repeat_cnt_call_14_0 = 1;
  #line 417 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 419 
  struct emg_struct_pci_scenario_ipw_driver_14 *data = (struct emg_struct_pci_scenario_ipw_driver_14 *)arg0;
  #line 423 
  emg_14_choice = 0;
  #line 424 
  emg_14_ret = ldv_undef_int();
  #line 425 
  emg_14_choice = 0;
  #line 426 
  emg_14_container = emg_alias_ipw_driver;
  #line 427 
  emg_14_ret = ldv_undef_int();
  #line 429 
  __VERIFIER_assume(data->arg0 == emg_alias_ipw_driver);
  #line 431 
  if (data != (struct emg_struct_pci_scenario_ipw_driver_14 *)0) {
    #line 432 
    emg_14_container = data->arg0;
    #line 433 
    ldv_free((void *)data);
  }
  #line 438 
  emg_14_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 439 
  emg_14_choice = __ldv_undef_int_range(0,22);
  #line 440 
  emg_14_device_id = emg_14_container->id_table + (unsigned long)emg_14_choice;
  #line 444 
  goto emg_main_14;
  #line 448 
  return (void *)0;
  #line 451 
  emg_call_14: 
               #line 451 
  ;
  #line 452 
  switch (ldv_undef_int()) {
    #line 453 
    case 0: 
            #line 453 
    ;
    #line 458 
    if (emg_repeat_cnt_call_14_1 > 0) {
      #line 459 
      emg_repeat_cnt_call_14_1 --;
      #line 461 
      goto emg_call_14;
    }
    else 
         #line 463 
         __VERIFIER_assume(0);
    #line 467 
    break;
    #line 469 
    case 1: 
            #line 469 
    ;
    #line 471 
    emg_14_ret = emg_wrapper_ipw_pci_suspend(emg_14_resource_0,emg_14_resource_1);
    #line 476 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 480 
    emg_wrapper_ipw_pci_resume(emg_14_resource_0);
    #line 483 
    if (emg_repeat_cnt_call_14_0 > 0) {
      #line 484 
      emg_repeat_cnt_call_14_0 --;
      #line 486 
      goto emg_call_14;
    }
    else 
         #line 488 
         __VERIFIER_assume(0);
    #line 492 
    break;
    #line 494 
    case 2: 
            #line 494 
    ;
    #line 496 
    emg_wrapper_ipw_pci_shutdown(emg_14_resource_0);
    #line 500 
    emg_wrapper_ipw_pci_remove(emg_14_resource_0);
    #line 503 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 504 
      emg_repeat_cnt_main_14_1 --;
      #line 506 
      goto emg_main_14;
    }
    else 
         #line 508 
         __VERIFIER_assume(0);
    #line 512 
    break;
    #line 514 
    default: 
             #line 514 
    ;
    #line 514 
    __VERIFIER_assume(0);
  }
  #line 517 
  return (void *)0;
  #line 520 
  emg_main_14: 
               #line 520 
  ;
  #line 521 
  if (ldv_undef_int() != 0) {
    #line 524 
    ldv_pre_probe();
    #line 528 
    emg_14_ret = emg_wrapper_ipw_pci_probe(emg_14_resource_0,emg_14_device_id);
    #line 533 
    emg_14_ret = ldv_post_probe(emg_14_ret);
    #line 536 
    if (ldv_undef_int() != 0) {
      #line 538 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 542 
      goto emg_call_14;
    }
    else 
         #line 547 
         __VERIFIER_assume(emg_14_ret != 0);
    #line 551 
    if (emg_repeat_cnt_main_14_0 > 0) {
      #line 552 
      emg_repeat_cnt_main_14_0 --;
      #line 554 
      goto emg_main_14;
    }
    else 
         #line 556 
         __VERIFIER_assume(0);
  }
  else 
       #line 562 
       ldv_free((void *)emg_14_resource_0);
  #line 570 
  return (void *)0;
}

#line 575  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 578 
  struct pci_driver *emg_2_pci_driver;
  #line 580 
  emg_2_pci_driver = emg_alias_ipw_driver;
  #line 581 
  if (ldv_undef_int() != 0) {
    #line 583 
    emg_2_pci_driver = arg0;
    #line 587 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 591 
    return 0;
  }
  else {
    #line 595 
    return ldv_undef_int_negative();
  }
}

#line 603  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 606 
  int emg_3_line;
  #line 609 
  emg_3_line = (int)arg0;
  #line 613 
  emg_dispatch_irq_deregister_3(emg_3_line);
  #line 614 
  ;
  #line 614 
  return (void *)0;
}

#line 620  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 623 
  struct pci_driver *emg_4_pci_driver;
  #line 625 
  emg_4_pci_driver = emg_alias_ipw_driver;
  #line 627 
  emg_4_pci_driver = arg0;
  #line 631 
  emg_dispatch_deregister_4(emg_4_pci_driver);
  #line 634 
  return;
}

#line 639  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 642 
  struct net_device *emg_5_netdev;
  #line 643 
  int emg_5_ret;
  #line 646 
  emg_5_ret = ldv_undef_int();
  #line 647 
  emg_5_ret = ldv_undef_int();
  #line 648 
  if (ldv_undef_int() != 0) {
    #line 650 
    emg_5_netdev = arg0;
    #line 654 
    emg_5_ret = emg_wrapper_ipw_net_open(emg_5_netdev);
    #line 657 
    if (ldv_undef_int() != 0) {
      #line 659 
      __VERIFIER_assume(emg_5_ret == 0);
      #line 663 
      emg_dispatch_register_5(emg_5_netdev);
      #line 667 
      return 0;
    }
    else {
      #line 671 
      __VERIFIER_assume(emg_5_ret != 0);
      #line 672 
      ldv_failed_register_netdev();
      #line 673 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 678 
    ldv_failed_register_netdev();
    #line 679 
    return ldv_undef_int_negative();
  }
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 690 
  enum irqreturn (*emg_6_callback)(int , void *);
  #line 691 
  void *emg_6_data;
  #line 692 
  int emg_6_line;
  #line 693 
  enum irqreturn (*emg_6_thread)(int , void *);
  #line 695 
  emg_6_callback = & emg_wrapper_ipw_isr;
  #line 696 
  if (ldv_undef_int() != 0) {
    #line 698 
    emg_6_line = (int)arg0;
    #line 699 
    emg_6_callback = arg1;
    #line 700 
    emg_6_thread = (enum irqreturn (*)(int , void *))0;
    #line 701 
    emg_6_data = arg4;
    #line 705 
    emg_dispatch_irq_register_6(emg_6_line,emg_6_callback,emg_6_thread,emg_6_data);
    #line 709 
    return 0;
  }
  else {
    #line 713 
    return ldv_undef_int_negative();
  }
}

#line 721  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 724 
  struct delayed_work *emg_7_delayed_work;
  #line 725 
  struct work_struct *emg_7_emg_param_0_0;
  #line 727 
  if (ldv_undef_int() != 0) {
    #line 729 
    emg_7_delayed_work = arg0;
    #line 733 
    emg_7_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 733 
    emg_7_emg_param_0_0 = emg_7_emg_param_0_0;
    #line 737 
    if (emg_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 738 
      (*(emg_7_delayed_work->work.func))(emg_7_emg_param_0_0);
    #line 743 
    ldv_free((void *)emg_7_emg_param_0_0);
    #line 747 
    return (_Bool)1;
  }
  else 
       #line 751 
       return (_Bool)0;
}

#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 762 
  struct work_struct *emg_8_work_struct;
  #line 764 
  if (ldv_undef_int() != 0) {
    #line 766 
    emg_8_work_struct = arg0;
    #line 770 
    if (emg_8_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 771 
      (*(emg_8_work_struct->func))(emg_8_work_struct);
    #line 776 
    return (_Bool)1;
  }
  else 
       #line 780 
       return (_Bool)0;
}

#line 788  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 793 
  arg0->func = arg1;
  #line 794 
  arg0->data = arg2;
  #line 795 
  arg0->count.counter = 0;
  #line 798 
  return;
}

#line 803  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 806 
  unsigned long emg_10_emg_param_0_0;
  #line 807 
  struct tasklet_struct *emg_10_tasklet_struct;
  #line 810 
  emg_10_tasklet_struct = arg0;
  #line 814 
  if (emg_10_tasklet_struct->count.counter == 0) 
    #line 815 
    if (emg_10_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 816 
                                                                    (*(emg_10_tasklet_struct->func))(emg_10_emg_param_0_0);
  #line 821 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 829 
  struct net_device *emg_11_netdev;
  #line 832 
  emg_11_netdev = arg0;
  #line 836 
  emg_wrapper_ipw_net_stop(emg_11_netdev);
  #line 840 
  emg_dispatch_deregister_11(emg_11_netdev);
  #line 843 
  return;
}

#line 848  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 851 
  int emg_1_ret;
  #line 854 
  emg_1_ret = emg_ipw_init();
  #line 855 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 858 
  if (ldv_undef_int() != 0) {
    #line 860 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 864 
    emg_ipw_exit();
  }
  else 
       #line 868 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 872 
  return (void *)0;
}

#line 877  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intel/ipw2x00/ipw2200.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 879 
  ldv_initialize();
  #line 881 
  emg_entry_point_insmod((void *)0);
  #line 883 
  return 0;
}

