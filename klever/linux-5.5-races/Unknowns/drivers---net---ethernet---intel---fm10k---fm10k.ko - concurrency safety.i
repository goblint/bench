/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_iov.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 43 
struct xt_table;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_698 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_698 __anonCompField_pci_dev_160 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
struct fm10k_hw;
#line 123 
struct fm10k_mbx_info;
#line 124 
struct fm10k_msg_data;
#line 125 
enum fm10k_tlv_type {
    FM10K_TLV_NULL_STRING = 0,
    FM10K_TLV_MAC_ADDR = 1,
    FM10K_TLV_BOOL = 2,
    FM10K_TLV_UNSIGNED = 3,
    FM10K_TLV_SIGNED = 4,
    FM10K_TLV_LE_STRUCT = 5,
    FM10K_TLV_NESTED = 6,
    FM10K_TLV_MAX_TYPE = 7
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.h"
struct fm10k_tlv_attr {
   unsigned int id ;
   enum fm10k_tlv_type type ;
   u16 len ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.h"
struct fm10k_msg_data {
   unsigned int id ;
   struct fm10k_tlv_attr *attr ;
   s32 (*func)(struct fm10k_hw *, u32 **, struct fm10k_mbx_info *) ;
};
#line 159 
enum fm10k_mbx_state {
    FM10K_STATE_CLOSED = 0,
    FM10K_STATE_CONNECT = 1,
    FM10K_STATE_OPEN = 2,
    FM10K_STATE_DISCONNECT = 3
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.h"
struct fm10k_mbx_ops {
   s32 (*connect)(struct fm10k_hw *, struct fm10k_mbx_info *) ;
   void (*disconnect)(struct fm10k_hw *, struct fm10k_mbx_info *) ;
   bool (*rx_ready)(struct fm10k_mbx_info *) ;
   bool (*tx_ready)(struct fm10k_mbx_info *, u16 ) ;
   bool (*tx_complete)(struct fm10k_mbx_info *) ;
   s32 (*enqueue_tx)(struct fm10k_hw *, struct fm10k_mbx_info *, u32 *) ;
   s32 (*process)(struct fm10k_hw *, struct fm10k_mbx_info *) ;
   s32 (*register_handlers)(struct fm10k_mbx_info *, struct fm10k_msg_data *) ;
};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.h"
struct fm10k_mbx_fifo {
   u32 *buffer ;
   u16 head ;
   u16 tail ;
   u16 size ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.h"
struct fm10k_mbx_info {
   struct fm10k_mbx_ops ops ;
   struct fm10k_msg_data *msg_data ;
   struct fm10k_mbx_fifo rx ;
   struct fm10k_mbx_fifo tx ;
   u32 timeout ;
   u32 udelay ;
   u32 mbx_reg ;
   u32 mbmem_reg ;
   u32 mbx_lock ;
   u32 mbx_hdr ;
   u16 max_size ;
   u16 mbmem_len ;
   u16 tail ;
   u16 tail_len ;
   u16 pulled ;
   u16 head ;
   u16 head_len ;
   u16 pushed ;
   u16 local ;
   u16 remote ;
   enum fm10k_mbx_state state ;
   s32 test_result ;
   u64 tx_busy ;
   u64 tx_dropped ;
   u64 tx_messages ;
   u64 tx_dwords ;
   u64 tx_mbmem_pulled ;
   u64 rx_messages ;
   u64 rx_dwords ;
   u64 rx_mbmem_pushed ;
   u64 rx_parse_err ;
   u32 buffer[640U] ;
};
#line 303 
enum fm10k_bus_speed {
    fm10k_bus_speed_unknown = 0,
    fm10k_bus_speed_2500 = 2500,
    fm10k_bus_speed_5000 = 5000,
    fm10k_bus_speed_8000 = 8000,
    fm10k_bus_speed_reserved = 8001
};
#line 311 
enum fm10k_bus_width {
    fm10k_bus_width_unknown = 0,
    fm10k_bus_width_pcie_x1 = 1,
    fm10k_bus_width_pcie_x2 = 2,
    fm10k_bus_width_pcie_x4 = 4,
    fm10k_bus_width_pcie_x8 = 8,
    fm10k_bus_width_reserved = 9
};
#line 320 
enum fm10k_bus_payload {
    fm10k_bus_payload_unknown = 0,
    fm10k_bus_payload_128 = 1,
    fm10k_bus_payload_256 = 2,
    fm10k_bus_payload_512 = 3,
    fm10k_bus_payload_reserved = 4
};
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_bus_info {
   enum fm10k_bus_speed speed ;
   enum fm10k_bus_width width ;
   enum fm10k_bus_payload payload ;
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_hw_stat {
   u64 count ;
   u32 base_l ;
   u32 base_h ;
};
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_hw_stats_q {
   struct fm10k_hw_stat tx_bytes ;
   struct fm10k_hw_stat tx_packets ;
   struct fm10k_hw_stat rx_bytes ;
   struct fm10k_hw_stat rx_packets ;
   struct fm10k_hw_stat rx_drops ;
};
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_hw_stats {
   struct fm10k_hw_stat timeout ;
   struct fm10k_hw_stat ur ;
   struct fm10k_hw_stat ca ;
   struct fm10k_hw_stat um ;
   struct fm10k_hw_stat xec ;
   struct fm10k_hw_stat vlan_drop ;
   struct fm10k_hw_stat loopback_drop ;
   struct fm10k_hw_stat nodesc_drop ;
   struct fm10k_hw_stats_q q[128U] ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_dglort_cfg {
   u16 glort ;
   u16 queue_b ;
   u8 vsi_b ;
   u8 idx ;
   u8 rss_l ;
   u8 pc_l ;
   u8 vsi_l ;
   u8 queue_l ;
   u8 shared_l ;
   u8 inner_rss ;
};
#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_fault {
   u64 address ;
   u32 specinfo ;
   u8 type ;
   u8 func ;
};
#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_mac_ops {
   s32 (*reset_hw)(struct fm10k_hw *) ;
   s32 (*init_hw)(struct fm10k_hw *) ;
   s32 (*start_hw)(struct fm10k_hw *) ;
   s32 (*stop_hw)(struct fm10k_hw *) ;
   s32 (*get_bus_info)(struct fm10k_hw *) ;
   s32 (*get_host_state)(struct fm10k_hw *, bool *) ;
   s32 (*request_lport_map)(struct fm10k_hw *) ;
   s32 (*update_vlan)(struct fm10k_hw *, u32 , u8 , bool ) ;
   s32 (*read_mac_addr)(struct fm10k_hw *) ;
   s32 (*update_uc_addr)(struct fm10k_hw *, u16 , u8 *, u16 , bool , u8 ) ;
   s32 (*update_mc_addr)(struct fm10k_hw *, u16 , u8 *, u16 , bool ) ;
   s32 (*update_xcast_mode)(struct fm10k_hw *, u16 , u8 ) ;
   void (*update_int_moderator)(struct fm10k_hw *) ;
   s32 (*update_lport_state)(struct fm10k_hw *, u16 , u16 , bool ) ;
   void (*update_hw_stats)(struct fm10k_hw *, struct fm10k_hw_stats *) ;
   void (*rebind_hw_stats)(struct fm10k_hw *, struct fm10k_hw_stats *) ;
   s32 (*configure_dglort_map)(struct fm10k_hw *, struct fm10k_dglort_cfg *) ;
   void (*set_dma_mask)(struct fm10k_hw *, u64 ) ;
   s32 (*get_fault)(struct fm10k_hw *, int , struct fm10k_fault *) ;
};
#line 531 
enum fm10k_mac_type {
    fm10k_mac_unknown = 0,
    fm10k_mac_pf = 1,
    fm10k_mac_vf = 2,
    fm10k_num_macs = 3
};
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_mac_info {
   struct fm10k_mac_ops ops ;
   enum fm10k_mac_type type ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   u16 default_vid ;
   u16 max_msix_vectors ;
   u16 max_queues ;
   bool vlan_override ;
   bool get_host_state ;
   bool tx_ready ;
   u32 dglort_map ;
   u8 itr_scale ;
   u64 reset_while_pending ;
};
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_swapi_table_info {
   u32 used ;
   u32 avail ;
};
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_swapi_info {
   u32 status ;
   struct fm10k_swapi_table_info mac ;
   struct fm10k_swapi_table_info nexthop ;
   struct fm10k_swapi_table_info ffu ;
};
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_vf_info {
   struct fm10k_mbx_info mbx ;
   struct fm10k_hw_stats_q stats[16U] ;
   int rate ;
   u16 glort ;
   u16 sw_vid ;
   u16 pf_vid ;
   u8 mac[6U] ;
   u8 vsi ;
   u8 vf_idx ;
   u8 vf_flags ;
};
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_iov_ops {
   s32 (*assign_resources)(struct fm10k_hw *, u16 , u16 ) ;
   s32 (*configure_tc)(struct fm10k_hw *, u16 , int ) ;
   s32 (*assign_int_moderator)(struct fm10k_hw *, u16 ) ;
   s32 (*assign_default_mac_vlan)(struct fm10k_hw *, struct fm10k_vf_info *) ;
   s32 (*reset_resources)(struct fm10k_hw *, struct fm10k_vf_info *) ;
   s32 (*set_lport)(struct fm10k_hw *, struct fm10k_vf_info *, u16 , u8 ) ;
   void (*reset_lport)(struct fm10k_hw *, struct fm10k_vf_info *) ;
   void (*update_stats)(struct fm10k_hw *, struct fm10k_hw_stats_q *, u16 ) ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_iov_info {
   struct fm10k_iov_ops ops ;
   u16 total_vfs ;
   u16 num_vfs ;
   u16 num_pools ;
};
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_hw {
   u32 *hw_addr ;
   void *back ;
   struct fm10k_mac_info mac ;
   struct fm10k_bus_info bus ;
   struct fm10k_bus_info bus_caps ;
   struct fm10k_iov_info iov ;
   struct fm10k_mbx_info mbx ;
   struct fm10k_swapi_info swapi ;
   u16 device_id ;
   u16 vendor_id ;
   u16 subsystem_device_id ;
   u16 subsystem_vendor_id ;
   u8 revision_id ;
};
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_tx_desc {
   __le64 buffer_addr ;
   __le16 buflen ;
   __le16 vlan ;
   __le16 mss ;
   u8 hdrlen ;
   u8 flags ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_l2_accel {
   int size ;
   u16 count ;
   u16 dglort ;
   struct callback_head rcu ;
   struct net_device *macvlan[0U] ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_tx_buffer {
   struct fm10k_tx_desc *next_to_watch ;
   struct sk_buff *skb ;
   unsigned int bytecount ;
   u16 gso_segs ;
   u16 tx_flags ;
   dma_addr_t dma ;
   __u32 len ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_rx_buffer {
   dma_addr_t dma ;
   struct page *page ;
   u32 page_offset ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_queue_stats {
   u64 packets ;
   u64 bytes ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_tx_queue_stats {
   u64 restart_queue ;
   u64 csum_err ;
   u64 tx_busy ;
   u64 tx_done_old ;
   u64 csum_good ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_rx_queue_stats {
   u64 alloc_failed ;
   u64 csum_err ;
   u64 errors ;
   u64 csum_good ;
   u64 switch_errors ;
   u64 drops ;
   u64 pp_errors ;
   u64 link_errors ;
   u64 length_errors ;
};
#line 103 
struct fm10k_q_vector;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
union __anonunion_702 {
   struct fm10k_tx_buffer *tx_buffer ;
   struct fm10k_rx_buffer *rx_buffer ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct __anonstruct_704 {
   struct fm10k_rx_queue_stats rx_stats ;
   struct sk_buff *skb ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
union __anonunion_703 {
   struct fm10k_tx_queue_stats tx_stats ;
   struct __anonstruct_704 __anonCompField___anonunion_703_162 ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_ring {
   struct fm10k_q_vector *q_vector ;
   struct net_device *netdev ;
   struct device *dev ;
   struct fm10k_l2_accel *l2_accel ;
   void *desc ;
   union __anonunion_702 __anonCompField_fm10k_ring_161 ;
   u32 *tail ;
   unsigned long state[1U] ;
   dma_addr_t dma ;
   unsigned int size ;
   u8 queue_index ;
   u8 reg_idx ;
   u8 qos_pc ;
   u16 vid ;
   u16 count ;
   u16 next_to_alloc ;
   u16 next_to_use ;
   u16 next_to_clean ;
   struct fm10k_queue_stats stats ;
   struct u64_stats_sync syncp ;
   union __anonunion_703 __anonCompField_fm10k_ring_163 ;
} __attribute__((__aligned__(4096)));
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_ring_container {
   struct fm10k_ring *ring ;
   unsigned int total_bytes ;
   unsigned int total_packets ;
   u16 work_limit ;
   u16 itr ;
   u8 itr_scale ;
   u8 count ;
};
#line 185 
struct fm10k_intfc;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_q_vector {
   struct fm10k_intfc *interface ;
   u32 *itr ;
   u16 v_idx ;
   struct fm10k_ring_container rx ;
   struct fm10k_ring_container tx ;
   struct napi_struct napi ;
   cpumask_t affinity_mask ;
   char name[25U] ;
   struct dentry *dbg_q_vector ;
   struct callback_head rcu ;
   struct fm10k_ring ring[0U] ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_ring_feature {
   u16 limit ;
   u16 indices ;
   u16 mask ;
   u16 offset ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_iov_data {
   unsigned int num_vfs ;
   unsigned int next_vf_mbx ;
   struct callback_head rcu ;
   struct fm10k_vf_info vf_info[0U] ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_intfc {
   unsigned long active_vlans[64U] ;
   struct net_device *netdev ;
   struct fm10k_l2_accel *l2_accel ;
   struct pci_dev *pdev ;
   unsigned long state[1U] ;
   unsigned long flags[1U] ;
   int xcast_mode ;
   int num_tx_queues ;
   u16 tx_itr ;
   int num_rx_queues ;
   u16 rx_itr ;
   struct fm10k_ring *tx_ring[128U] ;
   u64 restart_queue ;
   u64 tx_busy ;
   u64 tx_csum_errors ;
   u64 alloc_failed ;
   u64 rx_csum_errors ;
   u64 tx_bytes_nic ;
   u64 tx_packets_nic ;
   u64 rx_bytes_nic ;
   u64 rx_packets_nic ;
   u64 rx_drops_nic ;
   u64 rx_overrun_pf ;
   u64 rx_overrun_vf ;
   u64 hw_sm_mbx_full ;
   u64 hw_csum_tx_good ;
   u64 hw_csum_rx_good ;
   u64 rx_switch_errors ;
   u64 rx_drops ;
   u64 rx_pp_errors ;
   u64 rx_link_errors ;
   u64 rx_length_errors ;
   u32 tx_timeout_count ;
   struct fm10k_ring *rx_ring[128U] ;
   struct fm10k_q_vector *q_vector[256U] ;
   struct msix_entry *msix_entries ;
   int num_q_vectors ;
   struct fm10k_ring_feature ring_feature[2U] ;
   struct fm10k_iov_data *iov_data ;
   struct fm10k_hw_stats stats ;
   struct fm10k_hw hw ;
   spinlock_t mbx_lock ;
   u32 *uc_addr ;
   u32 *sw_addr ;
   u16 msg_enable ;
   u16 tx_ring_count ;
   u16 rx_ring_count ;
   struct timer_list service_timer ;
   struct work_struct service_task ;
   unsigned long next_stats_update ;
   unsigned long next_tx_hang_check ;
   unsigned long last_reset ;
   unsigned long link_down_event ;
   bool host_ready ;
   bool lport_map_failed ;
   u32 reta[32U] ;
   u32 rssrk[10U] ;
   struct list_head vxlan_port ;
   struct list_head geneve_port ;
   struct list_head macvlan_requests ;
   struct delayed_work macvlan_task ;
   spinlock_t macvlan_lock ;
   struct dentry *dbg_intfc ;
   u8 pfc_en ;
   u8 rx_pause ;
   u16 glort ;
   u16 glort_count ;
   u16 vid ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
union __anonunion___u_710 {
   struct fm10k_iov_data *__val ;
   char __c[1U] ;
};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
union __anonunion___u_712 {
   struct fm10k_iov_data *__val ;
   char __c[1U] ;
};
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
union __anonunion___u_714 {
   u32 *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct fm10k_info {
   enum fm10k_mac_type mac ;
   s32 (*get_invariants)(struct fm10k_hw *) ;
   struct fm10k_mac_ops *mac_ops ;
   struct fm10k_iov_ops *iov_ops ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
struct fm10k_mac_update {
   __le32 mac_lower ;
   __le16 mac_upper ;
   __le16 vlan ;
   __le16 glort ;
   u8 flags ;
   u8 action ;
} __attribute__((__packed__, __aligned__(4)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
struct fm10k_global_table_data {
   __le32 used ;
   __le32 avail ;
} __attribute__((__packed__, __aligned__(4)));
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
struct fm10k_swapi_error {
   __le32 status ;
   struct fm10k_global_table_data mac ;
   struct fm10k_global_table_data nexthop ;
   struct fm10k_global_table_data ffu ;
} __attribute__((__packed__, __aligned__(4)));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1409 {
   u32 *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1411 {
   u32 *__val ;
   char __c[1U] ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1413 {
   u32 *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1415 {
   u32 *__val ;
   char __c[1U] ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1417 {
   u32 *__val ;
   char __c[1U] ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1419 {
   u32 *__val ;
   char __c[1U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1421 {
   u32 *__val ;
   char __c[1U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1423 {
   u32 *__val ;
   char __c[1U] ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1425 {
   u32 *__val ;
   char __c[1U] ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1427 {
   u32 *__val ;
   char __c[1U] ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1429 {
   u32 *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1431 {
   u32 *__val ;
   char __c[1U] ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1433 {
   u32 *__val ;
   char __c[1U] ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1435 {
   u32 *__val ;
   char __c[1U] ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1437 {
   u32 *__val ;
   char __c[1U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1439 {
   u32 *__val ;
   char __c[1U] ;
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1441 {
   u32 *__val ;
   char __c[1U] ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1443 {
   u32 *__val ;
   char __c[1U] ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1445 {
   u32 *__val ;
   char __c[1U] ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1447 {
   u32 *__val ;
   char __c[1U] ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1449 {
   u32 *__val ;
   char __c[1U] ;
};
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1451 {
   u32 *__val ;
   char __c[1U] ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1453 {
   u32 *__val ;
   char __c[1U] ;
};
#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1455 {
   u32 *__val ;
   char __c[1U] ;
};
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1457 {
   u32 *__val ;
   char __c[1U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1459 {
   u32 *__val ;
   char __c[1U] ;
};
#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1461 {
   u32 *__val ;
   char __c[1U] ;
};
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1463 {
   u32 *__val ;
   char __c[1U] ;
};
#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1465 {
   u32 *__val ;
   char __c[1U] ;
};
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1467 {
   u32 *__val ;
   char __c[1U] ;
};
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1469 {
   u32 *__val ;
   char __c[1U] ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1471 {
   u32 *__val ;
   char __c[1U] ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1473 {
   u32 *__val ;
   char __c[1U] ;
};
#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1475 {
   u32 *__val ;
   char __c[1U] ;
};
#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1477 {
   u32 *__val ;
   char __c[1U] ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1479 {
   u32 *__val ;
   char __c[1U] ;
};
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1481 {
   u32 *__val ;
   char __c[1U] ;
};
#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1483 {
   u32 *__val ;
   char __c[1U] ;
};
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1485 {
   u32 *__val ;
   char __c[1U] ;
};
#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1487 {
   u32 *__val ;
   char __c[1U] ;
};
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1489 {
   u32 *__val ;
   char __c[1U] ;
};
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1491 {
   u32 *__val ;
   char __c[1U] ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1493 {
   u32 *__val ;
   char __c[1U] ;
};
#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1495 {
   u32 *__val ;
   char __c[1U] ;
};
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1497 {
   u32 *__val ;
   char __c[1U] ;
};
#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1499 {
   u32 *__val ;
   char __c[1U] ;
};
#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1501 {
   u32 *__val ;
   char __c[1U] ;
};
#line 705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1503 {
   u32 *__val ;
   char __c[1U] ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1505 {
   u32 *__val ;
   char __c[1U] ;
};
#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1507 {
   u32 *__val ;
   char __c[1U] ;
};
#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1509 {
   u32 *__val ;
   char __c[1U] ;
};
#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1511 {
   u32 *__val ;
   char __c[1U] ;
};
#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1513 {
   u32 *__val ;
   char __c[1U] ;
};
#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1515 {
   u32 *__val ;
   char __c[1U] ;
};
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1517 {
   u32 *__val ;
   char __c[1U] ;
};
#line 814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1519 {
   u32 *__val ;
   char __c[1U] ;
};
#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1521 {
   u32 *__val ;
   char __c[1U] ;
};
#line 874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1523 {
   u32 *__val ;
   char __c[1U] ;
};
#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1525 {
   u32 *__val ;
   char __c[1U] ;
};
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1527 {
   u32 *__val ;
   char __c[1U] ;
};
#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1529 {
   u32 *__val ;
   char __c[1U] ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1531 {
   u32 *__val ;
   char __c[1U] ;
};
#line 927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1533 {
   u32 *__val ;
   char __c[1U] ;
};
#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1535 {
   u32 *__val ;
   char __c[1U] ;
};
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1537 {
   u32 *__val ;
   char __c[1U] ;
};
#line 975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1539 {
   u32 *__val ;
   char __c[1U] ;
};
#line 976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1541 {
   u32 *__val ;
   char __c[1U] ;
};
#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1543 {
   u32 *__val ;
   char __c[1U] ;
};
#line 997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1545 {
   u32 *__val ;
   char __c[1U] ;
};
#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1547 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1549 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1551 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1553 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1555 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1557 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1559 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1561 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1563 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1565 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1567 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1569 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1571 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1573 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1575 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1577 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1579 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1581 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1583 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1585 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1587 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
union __anonunion___u_1589 {
   u32 *__val ;
   char __c[1U] ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
union __anonunion___u_2977 {
   u32 *__val ;
   char __c[1U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
union __anonunion___u_2979 {
   u32 *__val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
union __anonunion___u_2981 {
   u32 *__val ;
   char __c[1U] ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
union __anonunion___u_2983 {
   u32 *__val ;
   char __c[1U] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
union __anonunion___u_2985 {
   u32 *__val ;
   char __c[1U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
union __anonunion___u_2987 {
   u32 *__val ;
   char __c[1U] ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
union __anonunion___u_2989 {
   u32 *__val ;
   char __c[1U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
typedef __builtin_va_list __gnuc_va_list;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
struct fm10k_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
union __anonunion___u_3716 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
union __anonunion___u_3718 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
union __anonunion___u_3720 {
   u32 *__val ;
   char __c[1U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_3728 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_3728 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3733 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3735 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_3787 {
   int __val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_3979 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_3979 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef enum irqreturn irqreturn_t;
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
enum fm10k_macvlan_request_type {
    FM10K_UC_MAC_REQUEST = 0,
    FM10K_MC_MAC_REQUEST = 1,
    FM10K_VLAN_REQUEST = 2
};
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_mac_request {
   u8 addr[6U] ;
   u16 glort ;
   u16 vid ;
};
#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_vlan_request {
   u32 vid ;
   u8 vsi ;
};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
union __anonunion_4429 {
   struct fm10k_mac_request mac ;
   struct fm10k_vlan_request vlan ;
};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_macvlan_request {
   enum fm10k_macvlan_request_type type ;
   struct list_head list ;
   union __anonunion_4429 __anonCompField_fm10k_macvlan_request_165 ;
   bool set ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4434 {
   u32 *__val ;
   char __c[1U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4436 {
   u32 *__val ;
   char __c[1U] ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4438 {
   u32 *__val ;
   char __c[1U] ;
};
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4440 {
   struct fm10k_ring *__val ;
   char __c[1U] ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4442 {
   struct fm10k_ring *__val ;
   char __c[1U] ;
};
#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4444 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4446 {
   u32 *__val ;
   char __c[1U] ;
};
#line 887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4448 {
   u32 *__val ;
   char __c[1U] ;
};
#line 888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4450 {
   u32 *__val ;
   char __c[1U] ;
};
#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4452 {
   u32 *__val ;
   char __c[1U] ;
};
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4454 {
   u32 *__val ;
   char __c[1U] ;
};
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4456 {
   u32 *__val ;
   char __c[1U] ;
};
#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4458 {
   u32 *__val ;
   char __c[1U] ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4460 {
   u32 *__val ;
   char __c[1U] ;
};
#line 922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4462 {
   u32 *__val ;
   char __c[1U] ;
};
#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4464 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4466 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4468 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4470 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4472 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4474 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4476 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4478 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4480 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4482 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4484 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4486 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4488 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4490 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4492 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4494 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4496 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4498 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4500 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4502 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4504 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4506 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4508 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4510 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4512 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4514 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4516 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4518 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4520 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4522 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4524 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
union __anonunion___u_4526 {
   u32 *__val ;
   char __c[1U] ;
};
#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
typedef int ldv_func_ret_type;
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
union __anonunion___u_5221 {
   u32 *__val ;
   char __c[1U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
union __anonunion___u_5223 {
   u32 *__val ;
   char __c[1U] ;
};
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5918 {
   u32 *__val ;
   char __c[1U] ;
};
#line 798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5920 {
   u32 *__val ;
   char __c[1U] ;
};
#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5922 {
   u32 *__val ;
   char __c[1U] ;
};
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5924 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5926 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5928 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5930 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5932 {
   u32 *__val ;
   char __c[1U] ;
};
#line 1760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
union __anonunion___u_5934 {
   u32 *__val ;
   char __c[1U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long uintptr_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5947 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5949 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6001 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_6349 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_6348 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_6349 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_6348 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8871 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8871 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_6412 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_6413 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_6414 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_6415 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_6412 ports ;
   struct __anonstruct_icmpt_6413 icmpt ;
   struct __anonstruct_dnports_6414 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_6415 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_6416 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_6416 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 973 
struct rtable;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_6581 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_6580 {
   struct __anonstruct_6581 __anonCompField___anonunion_6580_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_6580 __anonCompField_sock_cgroup_data_152 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
enum macvlan_mode {
    MACVLAN_MODE_PRIVATE = 1,
    MACVLAN_MODE_VEPA = 2,
    MACVLAN_MODE_BRIDGE = 4,
    MACVLAN_MODE_PASSTHRU = 8,
    MACVLAN_MODE_SOURCE = 16
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_mqprio_qopt {
   __u8 num_tc ;
   __u8 prio_tc_map[16U] ;
   __u8 hw ;
   __u16 count[16U] ;
   __u16 offset[16U] ;
};
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_pcpu_stats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 rx_multicast ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
   u32 rx_errors ;
   u32 tx_dropped ;
};
#line 149 
struct netpoll;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_udp_port {
   struct list_head list ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_6643 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_6643 __anonCompField_bdi_writeback_166 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_6644 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_6644 __anonCompField_bio_167 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6647 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6648 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_6650 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_6651 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6649 {
   struct __anonstruct_elv_6650 elv ;
   struct __anonstruct_flush_6651 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_6652 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_6647 __anonCompField_request_168 ;
   union __anonunion_6648 __anonCompField_request_169 ;
   union __anonunion_6649 __anonCompField_request_170 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_6652 __anonCompField_request_171 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_6673 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_6672 {
   void *validation_data ;
   struct __anonstruct_6673 __anonCompField___anonunion_6672_173 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_6672 __anonCompField_nla_policy_174 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_6747 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_6748 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_6746 {
   struct __anonstruct_6747 __anonCompField___anonunion_6746_176 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_6748 __anonCompField___anonunion_6746_177 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_6746 __anonCompField_tcf_result_178 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_6750 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_6750 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_6763 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_6763 __anonCompField_bpf_prog_180 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_6785 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_6785 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_6787 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6786 {
   __addrpair skc_addrpair ;
   struct __anonstruct_6787 __anonCompField___anonunion_6786_182 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6788 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_6790 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6789 {
   __portpair skc_portpair ;
   struct __anonstruct_6790 __anonCompField___anonunion_6789_185 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6791 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6792 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6793 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6794 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6795 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_6786 __anonCompField_sock_common_183 ;
   union __anonunion_6788 __anonCompField_sock_common_184 ;
   union __anonunion_6789 __anonCompField_sock_common_186 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_6791 __anonCompField_sock_common_187 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_6792 __anonCompField_sock_common_188 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_6793 __anonCompField_sock_common_189 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_6794 __anonCompField_sock_common_190 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_6795 __anonCompField_sock_common_191 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_6796 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6797 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_6798 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_6796 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_6797 __anonCompField_sock_192 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_6798 __anonCompField_sock_193 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_6833 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_6833 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_6906 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_6905 {
   struct __anonstruct_s_6906 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_6905 __anonCompField_net_generic_196 ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 261 
struct fib6_nh;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_6924 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_6924 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_6933 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_6933 __anonCompField_rtable_201 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_6934 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_6934 __anonCompField_fib6_info_202 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_6948 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_6948 __anonCompField_nh_info_203 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_6949 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_6949 __anonCompField_nexthop_204 ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_6975 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_6975 __anonCompField_ip_ra_chain_205 ;
   struct callback_head rcu ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 185 
struct macvlan_port;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_macvlan.h"
struct macvlan_dev {
   struct net_device *dev ;
   struct list_head list ;
   struct hlist_node hlist ;
   struct macvlan_port *port ;
   struct net_device *lowerdev ;
   void *accel_priv ;
   struct vlan_pcpu_stats *pcpu_stats ;
   unsigned long mc_filter[4U] ;
   netdev_features_t set_features ;
   enum macvlan_mode mode ;
   u16 flags ;
   unsigned int macaddr_count ;
   struct netpoll *netpoll ;
};
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_6988 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_6990 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_6992 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_6994 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_6996 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_6998 {
   u32 *__val ;
   char __c[1U] ;
};
#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_7000 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_7002 {
   u32 *__val ;
   char __c[1U] ;
};
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_7004 {
   int __val ;
   char __c[1U] ;
};
#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_7006 {
   struct fm10k_ring *__val ;
   char __c[1U] ;
};
#line 1355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_7008 {
   struct fm10k_ring *__val ;
   char __c[1U] ;
};
#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_7012 {
   struct fm10k_l2_accel *__val ;
   char __c[1U] ;
};
#line 1560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
union __anonunion___u_7014 {
   struct fm10k_l2_accel *__val ;
   char __c[1U] ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_7081 {
   int __val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_7163 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_7552 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_7554 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_8005 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_8005 __anonCompField_inet_listen_hashbucket_196 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct __anonstruct_q_8054 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
   __le64 reserved ;
   __le64 timestamp ;
};
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct __anonstruct_d_8055 {
   __le32 data ;
   __le32 rss ;
   __le32 staterr ;
   __le32 vlan_len ;
   __le32 glort ;
};
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
struct __anonstruct_w_8056 {
   __le16 pkt_info ;
   __le16 hdr_info ;
   __le16 rss_lower ;
   __le16 rss_upper ;
   __le16 status ;
   __le16 csum_err ;
   __le16 length ;
   __le16 vlan ;
   __le16 dglort ;
   __le16 sglort ;
};
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_type.h"
union fm10k_rx_desc {
   struct __anonstruct_q_8054 q ;
   struct __anonstruct_d_8055 d ;
   struct __anonstruct_w_8056 w ;
};
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct __anonstruct_d_8061 {
   __le32 glort ;
   __le32 vlan ;
};
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct __anonstruct_w_8062 {
   __le16 dglort ;
   __le16 sglort ;
   __le16 vlan ;
   __le16 swpri_type_user ;
};
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
union fm10k_ftag_info {
   __le64 ftag ;
   struct __anonstruct_d_8061 d ;
   struct __anonstruct_w_8062 w ;
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
union __anonunion_8063 {
   __le64 tstamp ;
   unsigned long ts_tx_timeout ;
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
struct fm10k_cb {
   union __anonunion_8063 __anonCompField_fm10k_cb_205 ;
   union fm10k_ftag_info fi ;
};
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
union __anonunion___u_8065 {
   struct fm10k_l2_accel *__val ;
   char __c[1U] ;
};
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
union __anonunion___u_8067 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
struct fm10k_nvgre_hdr {
   __be16 flags ;
   __be16 proto ;
   __be32 tni ;
};
#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
union __anonunion_network_hdr_8069 {
   struct iphdr *ipv4 ;
   struct ipv6hdr *ipv6 ;
   u8 *raw ;
};
#line 1398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
union __anonunion___u_8071 {
   u8 __val ;
   char __c[1U] ;
};
#line 1667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
union __anonunion___u_8076 {
   struct fm10k_l2_accel *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11271 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_11271 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11272 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_11272 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11288 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_11288 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_11292 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_11292 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_11293 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_11294 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_11293 __anonCompField_media_link_90 ;
   union __anonunion_11294 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_11296 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_11295 {
   struct __anonstruct_dev_11296 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_11295 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_11310 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_11311 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_11309 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_11310 i2c ;
   struct __anonstruct_custom_11311 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_11309 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_12212 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_12212 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_7 {
   int arg0 ;
   int signal_pending ;
};
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_fm10k_dbg_desc_fops_17 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_fm10k_get_channels_21 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_fm10k_driver_22 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 {
   struct seq_file *arg0 ;
   struct seq_operations *arg1 ;
   int signal_pending ;
};
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_9_26 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_iov.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_iov.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 36 
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));
#line 56 
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 438  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_iov.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1042 
int pci_find_ext_capability(struct pci_dev *, int);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 2033 
#line 2033 
int pci_num_vf(struct pci_dev *);
#line 2034 
#line 2034 
int pci_vfs_assigned(struct pci_dev *);
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.h"
#line 93 
s32 fm10k_tlv_attr_get_mac_vlan(u32 *attr, u8 *mac_addr, u16 *vlan);
#line 112 
#line 112 
s32 fm10k_tlv_attr_get_value(u32 *attr, void *value, u32 len);
#line 133 
#line 133 
s32 fm10k_tlv_msg_error(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 156 
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
struct fm10k_tlv_attr fm10k_tlv_msg_test_attr[14U];
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.h"
#line 158 
s32 fm10k_tlv_msg_test(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.h"
#line 289 
s32 fm10k_pfvf_mbx_init(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, struct fm10k_msg_data *msg_data, u8 id);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.h"
#line 15 
u32 fm10k_read_reg(struct fm10k_hw *hw, int reg);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 10 
bool fm10k_glort_valid_pf(struct fm10k_hw *hw, u16 glort);
#line 11 
#line 11 
u16 fm10k_queues_per_pool(struct fm10k_hw *hw);
#line 12 
#line 12 
u16 fm10k_vf_queue_index(struct fm10k_hw *hw, u16 vf_idx);
#line 100 
#line 100 
s32 fm10k_iov_select_vid(struct fm10k_vf_info *vf_info, u16 vid);
#line 101 
#line 101 
s32 fm10k_iov_msg_msix_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 104 
#line 104 
s32 fm10k_iov_msg_lport_state_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.h"
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
struct fm10k_tlv_attr fm10k_mac_vlan_msg_attr[6U];
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.h"
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
struct fm10k_tlv_attr fm10k_lport_state_msg_attr[4U];
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_lock(struct fm10k_intfc *interface)
{
  #line 401 
  cif_spin_lock_mbx_lock_of_fm10k_intfc(& interface->mbx_lock);
  #line 402 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_unlock(struct fm10k_intfc *interface)
{
  #line 406 
  cif_spin_unlock_mbx_lock_of_fm10k_intfc(& interface->mbx_lock);
  #line 407 
  return;
}

#line 500 
#line 500 
void fm10k_service_event_schedule(struct fm10k_intfc *interface);
#line 521 
#line 521 
int fm10k_queue_mac_request(struct fm10k_intfc *interface, u16 glort, unsigned char *addr, u16 vid, bool set);
#line 523 
#line 523 
void fm10k_clear_macvlan_queue(struct fm10k_intfc *interface, u16 glort, bool vlans);
#line 531 
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
s32 fm10k_iov_event(struct fm10k_intfc *interface);
#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
s32 fm10k_iov_mbx(struct fm10k_intfc *interface);
#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
void fm10k_iov_suspend(struct pci_dev *pdev);
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_iov_resume(struct pci_dev *pdev);
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
void fm10k_iov_disable(struct pci_dev *pdev);
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_iov_configure(struct pci_dev *pdev, int num_vfs);
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
void fm10k_iov_update_stats(struct fm10k_intfc *interface);
#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
s32 fm10k_iov_update_pvid(struct fm10k_intfc *interface, u16 glort, u16 pvid);
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_set_vf_mac(struct net_device *netdev, int vf_idx, u8 *mac);
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_set_vf_vlan(struct net_device *netdev, int vf_idx, u16 vid, u8 qos, __be16 vlan_proto);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_set_vf_bw(struct net_device *netdev, int vf_idx, int min_rate, int max_rate);
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_get_vf_config(struct net_device *netdev, int vf_idx, struct ifla_vf_info *ivi);
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_get_vf_stats(struct net_device *netdev, int vf_idx, struct ifla_vf_stats *stats);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
static s32 fm10k_iov_msg_error(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 11 
  struct fm10k_vf_info *vf_info = (struct fm10k_vf_info *)mbx;
  #line 12 
  struct fm10k_intfc *interface = (struct fm10k_intfc *)hw->back;
  #line 13 
  struct pci_dev *pdev = interface->pdev;
  #line 15 
  _dev_err(& pdev->dev,(char *)"Unknown message ID %u on VF %d\n",*(*results) & 65535U,(int)vf_info->vf_idx);
  #line 18 
  return fm10k_tlv_msg_error(hw,results,mbx);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
static s32 fm10k_iov_msg_queue_mac_vlan(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 38 
  u8 mac[6U];
  #line 39 
  u32 *result;
  #line 41 
  bool set;
  #line 42 
  u16 vlan;
  #line 43 
  u32 vid;
  #line 36 
  struct fm10k_vf_info *vf_info = (struct fm10k_vf_info *)mbx;
  #line 37 
  struct fm10k_intfc *interface = (struct fm10k_intfc *)hw->back;
  #line 40 
  int err = 0;
  #line 46 
  if ((unsigned int)((int)vf_info->vf_flags >> 4) == 0U) 
                                                         #line 47 
                                                         err = -2;
  #line 49 
  if (err == 0 && *results != (u32 *)0U) {
    #line 50 
    result = *results;
    #line 53 
    err = fm10k_tlv_attr_get_value(result,(void *)(& vid),4U);
    #line 54 
    if (err != 0) 
                  #line 55 
                  return err;
    #line 57 
    set = (_Bool)(((unsigned long)vid & 32768UL) == 0UL);
    #line 58 
    vid &= 4294934527U;
    #line 70 
    if (vid >> 16 != 0U) {
      #line 74 
      if ((unsigned int)vf_info->pf_vid != 0U) 
                                               #line 75 
                                               return -2;
    }
    else {
      #line 77 
      err = fm10k_iov_select_vid(vf_info,(unsigned short)((int)((unsigned short)vid)));
      #line 78 
      if (err < 0) 
                   #line 79 
                   return err;
      #line 81 
      vid = (unsigned int)err;
    }
    #line 85 
    err = (*(hw->mac.ops.update_vlan))(hw,vid,(unsigned char)((int)vf_info->vsi),(_Bool)((bool)((int)set) != 0));
  }
  #line 88 
  if (err == 0 && *(results + 2U) != (u32 *)0U) {
    #line 89 
    result = *(results + 2U);
    #line 92 
    err = fm10k_tlv_attr_get_mac_vlan(result,(u8 *)(& mac),& vlan);
    #line 93 
    if (err != 0) 
                  #line 94 
                  return err;
    #line 97 
    if ((int)is_valid_ether_addr((u8 *)(& vf_info->mac)) != 0) {
      #line 98 
      if (! ether_addr_equal((u8 *)(& mac),(u8 *)(& vf_info->mac))) 
                                                                    #line 99 
                                                                    return -2;
    }
    #line 101 
    set = (_Bool)(((unsigned long)vlan & 32768UL) == 0UL);
    #line 102 
    vlan = (unsigned short)((unsigned int)vlan & 32767U);
    #line 104 
    err = fm10k_iov_select_vid(vf_info,(unsigned short)((int)vlan));
    #line 105 
    if (err < 0) 
                 #line 106 
                 return err;
    #line 108 
    vlan = (unsigned short)err;
    #line 111 
    err = fm10k_queue_mac_request(interface,(unsigned short)((int)vf_info->glort),(unsigned char *)(& mac),(unsigned short)((int)vlan),(_Bool)((bool)((int)set) != 0));
  }
  #line 115 
  if (err == 0 && *(results + 4U) != (u32 *)0U) {
    #line 116 
    result = *(results + 4U);
    #line 119 
    err = fm10k_tlv_attr_get_mac_vlan(result,(u8 *)(& mac),& vlan);
    #line 120 
    if (err != 0) 
                  #line 121 
                  return err;
    #line 124 
    if (((int)vf_info->vf_flags & 112) == 0) 
                                             #line 125 
                                             return -2;
    #line 127 
    set = (_Bool)(((unsigned long)vlan & 32768UL) == 0UL);
    #line 128 
    vlan = (unsigned short)((unsigned int)vlan & 32767U);
    #line 130 
    err = fm10k_iov_select_vid(vf_info,(unsigned short)((int)vlan));
    #line 131 
    if (err < 0) 
                 #line 132 
                 return err;
    #line 134 
    vlan = (unsigned short)err;
    #line 137 
    err = fm10k_queue_mac_request(interface,(unsigned short)((int)vf_info->glort),(unsigned char *)(& mac),(unsigned short)((int)vlan),(_Bool)((bool)((int)set) != 0));
  }
  #line 141 
  return err;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
static struct fm10k_msg_data iov_mbx_data[5U] = {{.attr = (struct fm10k_tlv_attr *)(& fm10k_tlv_msg_test_attr), .func = & fm10k_tlv_msg_test}, {.id = 1U, .func = & fm10k_iov_msg_msix_pf}, {.id = 2U, .attr = (struct fm10k_tlv_attr *)(& fm10k_mac_vlan_msg_attr), .func = & fm10k_iov_msg_queue_mac_vlan}, {.id = 3U, .attr = (struct fm10k_tlv_attr *)(& fm10k_lport_state_msg_attr), .func = & fm10k_iov_msg_lport_state_pf}, {.id = 4294967295U, .func = & fm10k_iov_msg_error}};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
s32 fm10k_iov_event(struct fm10k_intfc *interface)
{
  #line 161 
  union __anonunion___u_710 __u;
  #line 155 
  struct fm10k_iov_data *iov_data;
  #line 156 
  s64 vflre;
  #line 157 
  int i;
  #line 154 
  struct fm10k_hw *hw = & interface->hw;
  #line 160 
  __read_once_size((void *)(& interface->iov_data),(void *)(& __u.__c),8);
  #line 160 
  if ((__u.__val) == (struct fm10k_iov_data *)0) 
                                                 #line 161 
                                                 return 0;
  #line 163 
  rcu_read_lock();
  #line 165 
  iov_data = interface->iov_data;
  #line 168 
  if (iov_data == (struct fm10k_iov_data *)0) 
                                              #line 169 
                                              goto read_unlock;
  #line 171 
  if ((fm10k_read_reg(hw,6) & 2048U) == 0U) 
                                            #line 172 
                                            goto read_unlock;
  #line 175 
  vflre = (long long)fm10k_read_reg(hw,100421);
  #line 176 
  vflre <<= 32;
  #line 177 
  vflre = (long long)fm10k_read_reg(hw,100420) | vflre;
  #line 179 
  i = (int)iov_data->num_vfs;
  #line 181 
  vflre <<= 64 - i;
  #line 181 
  while (1) {
    #line 181 
    if (vflre != 0LL) {
      #line 181 
      int tmp_3;
      #line 181 
      tmp_3 = i;
      #line 181 
      i --;
      #line 181 
      ;
      #line 181 
      if (! (tmp_3 != 0)) 
                          #line 181 
                          break;
    }
    else 
         #line 181 
         break;
    {
      #line 182 
      struct fm10k_vf_info *vf_info = & iov_data->vf_info[i];
      #line 184 
      if (vflre >= 0LL) 
                        #line 185 
                        goto __Cont;
      #line 187 
      (*(hw->iov.ops.reset_resources))(hw,vf_info);
      #line 188 
      (*(vf_info->mbx.ops.connect))(hw,& vf_info->mbx);
    }
    #line 181 
    __Cont: 
            #line 181 
    vflre *= 2LL;
  }
  #line 191 
  read_unlock: 
               #line 191 
  ;
  #line 192 
  rcu_read_unlock();
  #line 194 
  return 0;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
s32 fm10k_iov_mbx(struct fm10k_intfc *interface)
{
  #line 205 
  union __anonunion___u_712 __u;
  #line 200 
  struct fm10k_iov_data *iov_data;
  #line 201 
  int i;
  #line 226 
  unsigned int tmp_0;
  #line 199 
  struct fm10k_hw *hw = & interface->hw;
  #line 204 
  __read_once_size((void *)(& interface->iov_data),(void *)(& __u.__c),8);
  #line 204 
  if ((__u.__val) == (struct fm10k_iov_data *)0) 
                                                 #line 205 
                                                 return 0;
  #line 207 
  rcu_read_lock();
  #line 209 
  iov_data = interface->iov_data;
  #line 212 
  if (iov_data == (struct fm10k_iov_data *)0) 
                                              #line 213 
                                              goto read_unlock;
  #line 216 
  fm10k_mbx_lock(interface);
  #line 225 
  process_mbx: 
               #line 225 
  ;
  #line 226 
  tmp_0 = (unsigned int)(iov_data->next_vf_mbx != 0U);
  #line 226 
  if (! tmp_0) 
               #line 226 
               tmp_0 = iov_data->num_vfs;
  #line 226 
  i = (int)tmp_0;
  #line 226 
  while (1) {
    #line 226 
    int tmp_3;
    #line 226 
    tmp_3 = i;
    #line 226 
    i --;
    #line 226 
    ;
    #line 226 
    if (! (tmp_3 != 0)) 
                        #line 226 
                        break;
    {
      #line 227 
      struct fm10k_vf_info *vf_info = & iov_data->vf_info[i];
      #line 228 
      struct fm10k_mbx_info *mbx = & vf_info->mbx;
      #line 229 
      u16 glort = vf_info->glort;
      #line 232 
      (*(hw->mbx.ops.process))(hw,& hw->mbx);
      #line 235 
      if ((unsigned int)vf_info->vf_flags != 0U) {
        #line 235 
        if (! fm10k_glort_valid_pf(hw,(unsigned short)((int)glort))) {
          #line 236 
          (*(hw->iov.ops.reset_lport))(hw,vf_info);
          #line 237 
          fm10k_clear_macvlan_queue(interface,(unsigned short)((int)glort),(_Bool)0);
        }
      }
      #line 241 
      if (mbx->timeout == 0U) {
        #line 242 
        (*(hw->iov.ops.reset_resources))(hw,vf_info);
        #line 243 
        (*(mbx->ops.connect))(hw,mbx);
      }
      #line 247 
      if (hw->mbx.state == (unsigned int)FM10K_STATE_OPEN) {
        #line 248 
        if (! (*(hw->mbx.ops.tx_ready))(& hw->mbx,(unsigned short)7)) {
          #line 250 
          (interface->hw_sm_mbx_full) ++;
          #line 253 
          fm10k_service_event_schedule(interface);
          #line 255 
          break;
        }
      }
      #line 259 
      (*(mbx->ops.process))(hw,mbx);
    }
  }
  #line 266 
  if (i >= 0) 
              #line 267 
              iov_data->next_vf_mbx = (unsigned int)(i + 1);
  else 
    #line 268 
    if (iov_data->next_vf_mbx != 0U) {
      #line 269 
      iov_data->next_vf_mbx = 0U;
      #line 270 
      goto process_mbx;
    }
  #line 274 
  fm10k_mbx_unlock(interface);
  #line 276 
  read_unlock: 
               #line 276 
  ;
  #line 277 
  rcu_read_unlock();
  #line 279 
  return 0;
}

#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
void fm10k_iov_suspend(struct pci_dev *pdev)
{
  #line 287 
  int num_vfs;
  #line 287 
  int i;
  #line 284 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 285 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 286 
  struct fm10k_hw *hw = & interface->hw;
  #line 290 
  if (iov_data != (struct fm10k_iov_data *)0) 
                                              #line 290 
                                              num_vfs = (int)iov_data->num_vfs; else 
                                                                    #line 290 
                                                                    num_vfs = 0;
  {
    #line 294 
    union __anonunion___u_714 __u;
    #line 293 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 293 
    u32 *hw_addr = (__u.__val);
    #line 293 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 293 
                                            writel(65535U,(void *)(hw_addr + 50U));
  }
  #line 297 
  i = 0;
  #line 297 
  while (i < num_vfs) {
    {
      #line 298 
      struct fm10k_vf_info *vf_info = & iov_data->vf_info[i];
      #line 300 
      (*(hw->iov.ops.reset_resources))(hw,vf_info);
      #line 301 
      (*(hw->iov.ops.reset_lport))(hw,vf_info);
      #line 302 
      fm10k_clear_macvlan_queue(interface,(unsigned short)((int)vf_info->glort),(_Bool)0);
    }
    #line 297 
    i ++;
  }
  #line 304 
  return;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
static void fm10k_mask_aer_comp_abort(struct pci_dev *pdev)
{
  #line 308 
  u32 err_mask;
  #line 309 
  int pos;
  #line 311 
  pos = pci_find_ext_capability(pdev,1);
  #line 312 
  if (pos == 0) 
                #line 313 
                return;
  #line 321 
  pci_read_config_dword(pdev,pos + 8,& err_mask);
  #line 322 
  err_mask |= 32768U;
  #line 323 
  pci_write_config_dword(pdev,pos + 8,err_mask);
  #line 324 
  return;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_iov_resume(struct pci_dev *pdev)
{
  #line 332 
  int num_vfs;
  #line 332 
  int i;
  #line 328 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 329 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 330 
  struct fm10k_dglort_cfg dglort = {.glort = (unsigned short)0U, .queue_b = (unsigned short)0, .vsi_b = (unsigned char)0, .idx = (unsigned char)0, .rss_l = (unsigned char)0, .pc_l = (unsigned char)0, .vsi_l = (unsigned char)0, .queue_l = (unsigned char)0, .shared_l = (unsigned char)0, .inner_rss = (unsigned char)0};
  #line 331 
  struct fm10k_hw *hw = & interface->hw;
  #line 335 
  if (iov_data != (struct fm10k_iov_data *)0) 
                                              #line 335 
                                              num_vfs = (int)iov_data->num_vfs; else 
                                                                    #line 335 
                                                                    num_vfs = 0;
  #line 338 
  if (iov_data == (struct fm10k_iov_data *)0) 
                                              #line 339 
                                              return -12;
  #line 345 
  fm10k_mask_aer_comp_abort(pdev);
  #line 348 
  (*(hw->iov.ops.assign_resources))(hw,(unsigned short)((int)((unsigned short)num_vfs)),(unsigned short)((int)((unsigned short)num_vfs)));
  #line 351 
  dglort.glort = (unsigned short)hw->mac.dglort_map;
  #line 352 
  dglort.idx = (unsigned char)2U;
  #line 353 
  dglort.inner_rss = (unsigned char)1U;
  #line 354 
  dglort.rss_l = (unsigned char)fls((unsigned int)((int)fm10k_queues_per_pool(hw) + -1));
  #line 355 
  dglort.queue_b = fm10k_vf_queue_index(hw,(unsigned short)0);
  #line 356 
  dglort.vsi_l = (unsigned char)fls((unsigned int)((int)hw->iov.total_vfs + -1));
  #line 357 
  dglort.vsi_b = (unsigned char)1U;
  #line 359 
  (*(hw->mac.ops.configure_dglort_map))(hw,& dglort);
  #line 362 
  i = 0;
  #line 362 
  while (i < num_vfs) {
    {
      #line 363 
      struct fm10k_vf_info *vf_info = & iov_data->vf_info[i];
      #line 366 
      if (~ hw->mac.dglort_map >> 16 == (unsigned int)i) 
                                                         #line 367 
                                                         break;
      #line 370 
      (*(hw->iov.ops.set_lport))(hw,vf_info,(unsigned short)((int)((unsigned short)i)),(unsigned char)2);
      #line 374 
      (*(hw->iov.ops.assign_default_mac_vlan))(hw,vf_info);
      #line 377 
      (*(vf_info->mbx.ops.connect))(hw,& vf_info->mbx);
    }
    #line 362 
    i ++;
  }
  #line 380 
  return 0;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
s32 fm10k_iov_update_pvid(struct fm10k_intfc *interface, u16 glort, u16 pvid)
{
  #line 387 
  struct fm10k_vf_info *vf_info;
  #line 385 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 386 
  struct fm10k_hw *hw = & interface->hw;
  #line 388 
  u16 vf_idx = (unsigned short)((int)glort - (int)((unsigned short)hw->mac.dglort_map));
  #line 391 
  if (iov_data == (struct fm10k_iov_data *)0) 
                                              #line 392 
                                              return -2;
  #line 395 
  if ((unsigned int)vf_idx >= iov_data->num_vfs) 
                                                 #line 396 
                                                 return -2;
  #line 399 
  vf_info = & iov_data->vf_info[(int)vf_idx];
  #line 400 
  if ((int)vf_info->sw_vid != (int)pvid) {
    #line 401 
    vf_info->sw_vid = pvid;
    #line 402 
    (*(hw->iov.ops.assign_default_mac_vlan))(hw,vf_info);
  }
  #line 405 
  return 0;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
static void fm10k_iov_free_data(struct pci_dev *pdev)
{
  #line 410 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 412 
  if (interface->iov_data == (struct fm10k_iov_data *)0) 
                                                         #line 413 
                                                         return;
  #line 416 
  fm10k_iov_suspend(pdev);
  {
    #line 419 
    struct fm10k_iov_data *___p = interface->iov_data;
    #line 419 
    if (___p != (struct fm10k_iov_data *)0) 
                                            #line 419 
                                            kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))8);
  }
  #line 420 
  interface->iov_data = (struct fm10k_iov_data *)0;
  #line 421 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
static s32 fm10k_iov_alloc_data(struct pci_dev *pdev, int num_vfs)
{
  #line 428 
  size_t size;
  #line 429 
  int i;
  #line 425 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 426 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 427 
  struct fm10k_hw *hw = & interface->hw;
  #line 432 
  if (iov_data != (struct fm10k_iov_data *)0) 
                                              #line 433 
                                              return -16;
  #line 436 
  if (hw->iov.ops.assign_resources == (s32 (*)(struct fm10k_hw *, u16 , u16 ))0) 
    #line 437 
    return -19;
  #line 440 
  if (num_vfs == 0) 
                    #line 441 
                    return 0;
  #line 444 
  size = (unsigned long)num_vfs * (unsigned long)4096U + 24UL;
  #line 445 
  iov_data = (struct fm10k_iov_data *)kzalloc(size,3264U);
  #line 446 
  if (iov_data == (struct fm10k_iov_data *)0) 
                                              #line 447 
                                              return -12;
  #line 450 
  iov_data->num_vfs = (unsigned int)num_vfs;
  #line 453 
  i = 0;
  #line 453 
  while (i < num_vfs) {
    {
      #line 455 
      int err;
      #line 454 
      struct fm10k_vf_info *vf_info = & iov_data->vf_info[i];
      #line 458 
      vf_info->vsi = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
      #line 459 
      vf_info->vf_idx = (unsigned char)i;
      #line 462 
      err = fm10k_pfvf_mbx_init(hw,& vf_info->mbx,(struct fm10k_msg_data *)(& iov_mbx_data),(unsigned char)((int)((unsigned char)i)));
      #line 463 
      if (err != 0) {
        #line 464 
        _dev_err(& pdev->dev,(char *)"Unable to initialize SR-IOV mailbox\n");
        #line 466 
        kfree((void *)iov_data);
        #line 467 
        return err;
      }
    }
    #line 453 
    i ++;
  }
  #line 472 
  interface->iov_data = iov_data;
  #line 475 
  fm10k_iov_resume(pdev);
  #line 477 
  return 0;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
void fm10k_iov_disable(struct pci_dev *pdev)
{
  #line 482 
  if (pci_num_vf(pdev) != 0) {
    #line 482 
    if (pci_vfs_assigned(pdev) != 0) 
                                     #line 483 
                                     _dev_err(& pdev->dev,(char *)"Cannot disable SR-IOV while VFs are assigned\n"); else 
                                                                    #line 486 
                                                                    pci_disable_sriov(pdev);
  }
  else 
       #line 486 
       pci_disable_sriov(pdev);
  #line 488 
  fm10k_iov_free_data(pdev);
  #line 489 
  return;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_iov_configure(struct pci_dev *pdev, int num_vfs)
{
  #line 493 
  int current_vfs = pci_num_vf(pdev);
  #line 494 
  int err = 0;
  #line 496 
  if (current_vfs != 0) {
    #line 496 
    if (pci_vfs_assigned(pdev) != 0) {
      #line 497 
      _dev_err(& pdev->dev,(char *)"Cannot modify SR-IOV while VFs are assigned\n");
      #line 499 
      num_vfs = current_vfs;
    }
    else 
         #line 496 
         goto _LAND;
  }
  else {
    #line 496 
    _LAND: {
             #line 501 
             pci_disable_sriov(pdev);
             #line 502 
             fm10k_iov_free_data(pdev);
           }
  }
  #line 506 
  err = fm10k_iov_alloc_data(pdev,num_vfs);
  #line 507 
  if (err != 0) 
                #line 508 
                return err;
  #line 511 
  if (num_vfs != 0 && num_vfs != current_vfs) {
    #line 512 
    err = pci_enable_sriov(pdev,num_vfs);
    #line 513 
    if (err != 0) {
      #line 514 
      _dev_err(& pdev->dev,(char *)"Enable PCI SR-IOV failed: %d\n",err);
      #line 516 
      return err;
    }
  }
  #line 520 
  return num_vfs;
}

#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
void fm10k_iov_update_stats(struct fm10k_intfc *interface)
{
  #line 535 
  int i;
  #line 533 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 534 
  struct fm10k_hw *hw = & interface->hw;
  #line 537 
  if (iov_data == (struct fm10k_iov_data *)0) 
                                              #line 538 
                                              return;
  #line 540 
  i = 0;
  #line 540 
  while (iov_data->num_vfs > (unsigned int)i) {
    #line 541 
    (*(hw->iov.ops.update_stats))(hw,(struct fm10k_hw_stats_q *)(& iov_data->vf_info[i].stats),(unsigned short)((int)((unsigned short)i)));
    #line 540 
    i ++;
  }
  #line 542 
  return;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
__inline static void fm10k_reset_vf_info(struct fm10k_intfc *interface, struct fm10k_vf_info *vf_info)
{
  #line 547 
  struct fm10k_hw *hw = & interface->hw;
  #line 550 
  fm10k_mbx_lock(interface);
  #line 553 
  (*(hw->iov.ops.reset_lport))(hw,vf_info);
  #line 555 
  fm10k_clear_macvlan_queue(interface,(unsigned short)((int)vf_info->glort),(_Bool)0);
  #line 558 
  (*(hw->iov.ops.assign_default_mac_vlan))(hw,vf_info);
  #line 561 
  (*(hw->iov.ops.set_lport))(hw,vf_info,(unsigned short)((int)vf_info->vf_idx),(unsigned char)2);
  #line 564 
  fm10k_mbx_unlock(interface);
  #line 565 
  return;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_set_vf_mac(struct net_device *netdev, int vf_idx, u8 *mac)
{
  #line 571 
  struct fm10k_vf_info *vf_info;
  #line 569 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 570 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 574 
  if (iov_data == (struct fm10k_iov_data *)0 || iov_data->num_vfs <= (unsigned int)vf_idx) 
    #line 575 
    return -22;
  #line 578 
  if (! is_zero_ether_addr(mac)) {
    #line 578 
    if (! is_valid_ether_addr(mac)) 
                                    #line 579 
                                    return -22;
  }
  #line 582 
  vf_info = & iov_data->vf_info[vf_idx];
  #line 583 
  ether_addr_copy((u8 *)(& vf_info->mac),mac);
  #line 585 
  fm10k_reset_vf_info(interface,vf_info);
  #line 587 
  return 0;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_set_vf_vlan(struct net_device *netdev, int vf_idx, u16 vid, u8 qos, __be16 vlan_proto)
{
  #line 596 
  struct fm10k_vf_info *vf_info;
  #line 593 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 594 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 595 
  struct fm10k_hw *hw = & interface->hw;
  #line 599 
  if (iov_data == (struct fm10k_iov_data *)0 || iov_data->num_vfs <= (unsigned int)vf_idx) 
    #line 600 
    return -22;
  #line 603 
  if ((unsigned int)qos != 0U || (unsigned int)vid > 4094U) 
                                                            #line 604 
                                                            return -22;
  #line 607 
  if ((unsigned int)vlan_proto != 129U) 
                                        #line 608 
                                        return -93;
  #line 610 
  vf_info = & iov_data->vf_info[vf_idx];
  #line 613 
  if ((int)vf_info->pf_vid == (int)vid) 
                                        #line 614 
                                        return 0;
  #line 617 
  vf_info->pf_vid = vid;
  #line 620 
  (*(hw->mac.ops.update_vlan))(hw,268369920U,(unsigned char)((int)vf_info->vsi),(_Bool)0);
  #line 622 
  fm10k_reset_vf_info(interface,vf_info);
  #line 624 
  return 0;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_set_vf_bw(struct net_device *netdev, int vf_idx, int min_rate, int max_rate)
{
  #line 630 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 631 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 632 
  struct fm10k_hw *hw = & interface->hw;
  #line 635 
  if (iov_data == (struct fm10k_iov_data *)0 || iov_data->num_vfs <= (unsigned int)vf_idx) 
    #line 636 
    return -22;
  #line 639 
  if ((unsigned int)max_rate > 100000U) 
                                        #line 641 
                                        return -22;
  #line 644 
  iov_data->vf_info[vf_idx].rate = max_rate;
  #line 647 
  (*(hw->iov.ops.configure_tc))(hw,(unsigned short)((int)((unsigned short)vf_idx)),max_rate);
  #line 649 
  return 0;
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_get_vf_config(struct net_device *netdev, int vf_idx, struct ifla_vf_info *ivi)
{
  #line 657 
  struct fm10k_vf_info *vf_info;
  #line 655 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 656 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 660 
  if (iov_data == (struct fm10k_iov_data *)0 || iov_data->num_vfs <= (unsigned int)vf_idx) 
    #line 661 
    return -22;
  #line 663 
  vf_info = & iov_data->vf_info[vf_idx];
  #line 665 
  ivi->vf = (unsigned int)vf_idx;
  #line 666 
  ivi->max_tx_rate = (unsigned int)vf_info->rate;
  #line 667 
  ivi->min_tx_rate = 0U;
  #line 668 
  ether_addr_copy((u8 *)(& ivi->mac),(u8 *)(& vf_info->mac));
  #line 669 
  ivi->vlan = (unsigned int)vf_info->pf_vid;
  #line 670 
  ivi->qos = 0U;
  #line 672 
  return 0;
}

#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_iov.c"
int fm10k_ndo_get_vf_stats(struct net_device *netdev, int vf_idx, struct ifla_vf_stats *stats)
{
  #line 681 
  struct fm10k_hw_stats_q *hw_stats;
  #line 682 
  u32 idx;
  #line 682 
  u32 qpp;
  #line 678 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 679 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 680 
  struct fm10k_hw *hw = & interface->hw;
  #line 685 
  if (iov_data == (struct fm10k_iov_data *)0 || iov_data->num_vfs <= (unsigned int)vf_idx) 
    #line 686 
    return -22;
  #line 688 
  qpp = (unsigned int)fm10k_queues_per_pool(hw);
  #line 689 
  hw_stats = (struct fm10k_hw_stats_q *)(& iov_data->vf_info[vf_idx].stats);
  #line 691 
  idx = 0U;
  #line 691 
  while (idx < qpp) {
    #line 692 
    stats->rx_packets += (hw_stats + (unsigned long)idx)->rx_packets.count;
    #line 693 
    stats->tx_packets += (hw_stats + (unsigned long)idx)->tx_packets.count;
    #line 694 
    stats->rx_bytes += (hw_stats + (unsigned long)idx)->rx_bytes.count;
    #line 695 
    stats->tx_bytes += (hw_stats + (unsigned long)idx)->tx_bytes.count;
    #line 696 
    stats->rx_dropped += (hw_stats + (unsigned long)idx)->rx_drops.count;
    #line 691 
    idx ++;
  }
  #line 699 
  return 0;
}

#line 438  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_iov.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 441 
  return ldv_kzalloc(size,flags);
}

#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_iov.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc(spinlock_t *lock)
{
  #line 671 
  ldv_spin_model_lock((char *)"mbx_lock_of_fm10k_intfc");
  #line 673 
  spin_lock(lock);
  #line 674 
  return;
}

#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_iov.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc(spinlock_t *lock)
{
  #line 680 
  ldv_spin_model_unlock((char *)"mbx_lock_of_fm10k_intfc");
  #line 682 
  spin_unlock(lock);
  #line 683 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.h"
#line 91 
s32 fm10k_tlv_msg_init(u32 *msg, u16 msg_id);
#line 92 
#line 92 
s32 fm10k_tlv_attr_put_mac_vlan(u32 *msg, u16 attr_id, u8 *mac_addr, u16 vlan);
#line 94 
#line 94 
s32 fm10k_tlv_attr_put_bool(u32 *msg, u16 attr_id);
#line 95 
#line 95 
s32 fm10k_tlv_attr_put_value(u32 *msg, u16 attr_id, s64 value, u32 len);
#line 129 
#line 129 
s32 fm10k_tlv_attr_put_le_struct(u32 *msg, u16 attr_id, void *le_struct, u32 len);
#line 130 
#line 130 
s32 fm10k_tlv_attr_get_le_struct(u32 *attr, void *le_struct, u32 len);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.h"
#line 291 
s32 fm10k_sm_mbx_init(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, struct fm10k_msg_data *msg_data);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.h"
#line 12 
u16 fm10k_read_pci_cfg_word(struct fm10k_hw *hw, u32 reg);
#line 35 
#line 35 
s32 fm10k_get_bus_info_generic(struct fm10k_hw *hw);
#line 36 
#line 36 
s32 fm10k_get_invariants_generic(struct fm10k_hw *hw);
#line 37 
#line 37 
s32 fm10k_disable_queues_generic(struct fm10k_hw *hw, u16 q_cnt);
#line 38 
#line 38 
s32 fm10k_start_hw_generic(struct fm10k_hw *hw);
#line 39 
#line 39 
s32 fm10k_stop_hw_generic(struct fm10k_hw *hw);
#line 40 
#line 40 
u32 fm10k_read_hw_stats_32b(struct fm10k_hw *hw, u32 addr, struct fm10k_hw_stat *stat);
#line 43 
#line 43 
void fm10k_update_hw_stats_q(struct fm10k_hw *hw, struct fm10k_hw_stats_q *q, u32 idx, u32 count);
#line 46 
#line 46 
void fm10k_unbind_hw_stats_q(struct fm10k_hw_stats_q *q, u32 idx, u32 count);
#line 47 
#line 47 
s32 fm10k_get_host_state_generic(struct fm10k_hw *hw, bool *host_ready);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_msg_lport_map_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_tlv_attr fm10k_lport_map_msg_attr[3U];
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_tlv_attr fm10k_update_pvid_msg_attr[2U];
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 1747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_msg_err_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_tlv_attr fm10k_err_msg_attr[2U];
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 1192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_iov_msg_mac_vlan_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.h"
#line 1820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_info fm10k_pf_info;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_reset_hw_pf(struct fm10k_hw *hw)
{
  #line 16 
  s32 err;
  #line 17 
  u32 reg;
  #line 18 
  u16 i;
  {
    #line 22 
    union __anonunion___u_1409 __u;
    #line 21 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 21 
    u32 *hw_addr = (__u.__val);
    #line 21 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 21 
                                            writel(1431655765U,(void *)(hw_addr + 7U));
  }
  {
    #line 25 
    union __anonunion___u_1411 __u_0;
    #line 24 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 24 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 24 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 24 
                                              writel(0U,(void *)(hw_addr_0 + 75776U));
  }
  {
    #line 26 
    union __anonunion___u_1413 __u_1;
    #line 25 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 25 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 25 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 25 
                                              writel(0U,(void *)(hw_addr_1 + 73728U));
  }
  #line 30 
  i = (unsigned short)0U;
  #line 30 
  while ((unsigned int)i <= 2047U) {
    {
      #line 32 
      union __anonunion___u_1415 __u_2;
      #line 31 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 31 
      u32 *hw_addr_2 = (__u_2.__val);
      #line 31 
      if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                                #line 31 
                                                writel(0U,(void *)(hw_addr_2 + ((unsigned long)i + (unsigned long)10240U)));
    }
    {
      #line 33 
      union __anonunion___u_1417 __u_3;
      #line 32 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 32 
      u32 *hw_addr_3 = (__u_3.__val);
      #line 32 
      if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                                #line 32 
                                                writel(0U,(void *)(hw_addr_3 + ((unsigned long)i + (unsigned long)12288U)));
    }
    #line 30 
    i = (u16)((int)i + 1);
  }
  #line 36 
  err = fm10k_disable_queues_generic(hw,(unsigned short)256);
  #line 37 
  if (err == -4) {
    #line 38 
    (hw->mac.reset_while_pending) ++;
    #line 39 
    goto force_reset;
  }
  else 
    #line 40 
    if (err != 0) 
                  #line 41 
                  return err;
  #line 45 
  reg = fm10k_read_reg(hw,8387);
  #line 46 
  if ((reg & 136U) != 0U) 
                          #line 47 
                          return -6;
  #line 49 
  force_reset: 
               #line 49 
  ;
  #line 51 
  reg = 536870912U;
  {
    #line 53 
    union __anonunion___u_1419 __u_4;
    #line 52 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 52 
    u32 *hw_addr_4 = (__u_4.__val);
    #line 52 
    if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                              #line 52 
                                              writel(reg,(void *)(hw_addr_4 + 8387U));
  }
  #line 55 
  fm10k_read_reg(hw,0);
  #line 56 
  __const_udelay(644250UL);
  #line 59 
  reg = fm10k_read_reg(hw,77824);
  #line 60 
  if ((reg & 256U) == 0U) 
                          #line 61 
                          return -7;
  #line 63 
  return 0;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static bool fm10k_is_ari_hierarchy_pf(struct fm10k_hw *hw)
{
  #line 74 
  u16 sriov_ctrl = fm10k_read_pci_cfg_word(hw,400U);
  #line 76 
  return (_Bool)(((int)sriov_ctrl & 16) != 0);
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_init_hw_pf(struct fm10k_hw *hw)
{
  #line 86 
  u32 dma_ctrl;
  #line 86 
  u32 txqctl;
  #line 87 
  u16 i;
  {
    #line 91 
    union __anonunion___u_1421 __u;
    #line 90 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 90 
    u32 *hw_addr = (__u.__val);
    #line 90 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 90 
                                            writel(0U,(void *)(hw_addr + 56U));
  }
  {
    #line 92 
    union __anonunion___u_1423 __u_0;
    #line 91 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 91 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 91 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 91 
                                              writel(0U,(void *)(hw_addr_0 + 48U));
  }
  #line 95 
  i = (unsigned short)1U;
  #line 95 
  while ((unsigned int)i <= 7U) {
    {
      #line 97 
      union __anonunion___u_1425 __u_1;
      #line 96 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 96 
      u32 *hw_addr_1 = (__u_1.__val);
      #line 96 
      if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                                #line 96 
                                                writel(65535U,(void *)(hw_addr_1 + ((unsigned long)i + (unsigned long)48U)));
    }
    #line 95 
    i = (u16)((int)i + 1);
  }
  {
    #line 100 
    union __anonunion___u_1427 __u_2;
    #line 99 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 99 
    u32 *hw_addr_2 = (__u_2.__val);
    #line 99 
    if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                              #line 99 
                                              writel(0U,(void *)(hw_addr_2 + 75776U));
  }
  {
    #line 103 
    union __anonunion___u_1429 __u_3;
    #line 102 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 102 
    u32 *hw_addr_3 = (__u_3.__val);
    #line 102 
    if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                              #line 102 
                                              writel(0U,(void *)(hw_addr_3 + 76288U));
  }
  #line 105 
  i = (unsigned short)1U;
  #line 105 
  while ((unsigned int)i <= 255U) {
    {
      #line 107 
      union __anonunion___u_1431 __u_4;
      #line 106 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 106 
      u32 *hw_addr_4 = (__u_4.__val);
      #line 106 
      if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                                #line 106 
                                                writel((unsigned int)((int)i + -1),(void *)(hw_addr_4 + ((unsigned long)((int)i * 2) + (unsigned long)75776U)));
    }
    #line 105 
    i = (u16)((int)i + 1);
  }
  {
    #line 110 
    union __anonunion___u_1433 __u_5;
    #line 109 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 109 
    u32 *hw_addr_5 = (__u_5.__val);
    #line 109 
    if ((long)(hw_addr_5 == (u32 *)0U) == 0L) 
                                              #line 109 
                                              writel(1024U,(void *)(hw_addr_5 + 73728U));
  }
  #line 112 
  txqctl = (unsigned int)(((int)hw->mac.default_vid << 16) | 268435519);
  #line 115 
  i = (unsigned short)0U;
  #line 115 
  while ((unsigned int)i <= 255U) {
    {
      #line 118 
      union __anonunion___u_1435 __u_6;
      #line 117 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
      #line 117 
      u32 *hw_addr_6 = (__u_6.__val);
      #line 117 
      if ((long)(hw_addr_6 == (u32 *)0U) == 0L) 
                                                #line 117 
                                                writel((unsigned int)((int)i * 8 | 327680),(void *)(hw_addr_6 + ((unsigned long)((int)i * 64) + (unsigned long)32780U)));
    }
    {
      #line 121 
      union __anonunion___u_1437 __u_7;
      #line 120 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
      #line 120 
      u32 *hw_addr_7 = (__u_7.__val);
      #line 120 
      if ((long)(hw_addr_7 == (u32 *)0U) == 0L) 
                                                #line 120 
                                                writel(txqctl,(void *)(hw_addr_7 + ((unsigned long)((int)i * 64) + (unsigned long)32775U)));
    }
    {
      #line 124 
      union __anonunion___u_1439 __u_8;
      #line 123 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
      #line 123 
      u32 *hw_addr_8 = (__u_8.__val);
      #line 123 
      if ((long)(hw_addr_8 == (u32 *)0U) == 0L) 
                                                #line 123 
                                                writel(10784U,(void *)(hw_addr_8 + ((unsigned long)((int)i * 64) + (unsigned long)32771U)));
    }
    {
      #line 129 
      union __anonunion___u_1441 __u_9;
      #line 128 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_9.__c),8);
      #line 128 
      u32 *hw_addr_9 = (__u_9.__val);
      #line 128 
      if ((long)(hw_addr_9 == (u32 *)0U) == 0L) 
                                                #line 128 
                                                writel(41504U,(void *)(hw_addr_9 + ((unsigned long)((int)i * 64) + (unsigned long)16387U)));
    }
    #line 115 
    i = (u16)((int)i + 1);
  }
  #line 138 
  switch ((unsigned int)hw->bus.speed) {
    #line 139 
    case (unsigned int)2500: 
                             #line 139 
    ;
    #line 140 
    dma_ctrl = 58720256U;
    #line 141 
    hw->mac.itr_scale = (unsigned char)2U;
    #line 142 
    break;
    #line 143 
    case (unsigned int)5000: 
                             #line 143 
    ;
    #line 144 
    dma_ctrl = 67108864U;
    #line 145 
    hw->mac.itr_scale = (unsigned char)1U;
    #line 146 
    break;
    #line 147 
    case (unsigned int)8000: 
                             #line 147 
    ;
    #line 148 
    dma_ctrl = 75497472U;
    #line 149 
    hw->mac.itr_scale = (unsigned char)0U;
    #line 150 
    break;
    #line 151 
    default: 
             #line 151 
    ;
    #line 152 
    dma_ctrl = 0U;
    #line 154 
    hw->mac.itr_scale = (unsigned char)0U;
    #line 155 
    break;
  }
  {
    #line 160 
    union __anonunion___u_1443 __u_10;
    #line 159 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_10.__c),8);
    #line 159 
    u32 *hw_addr_10 = (__u_10.__val);
    #line 159 
    if ((long)(hw_addr_10 == (u32 *)0U) == 0L) 
                                               #line 159 
                                               writel(3149814U,(void *)(hw_addr_10 + 8389U));
  }
  {
    #line 161 
    union __anonunion___u_1445 __u_11;
    #line 160 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_11.__c),8);
    #line 160 
    u32 *hw_addr_11 = (__u_11.__val);
    #line 160 
    if ((long)(hw_addr_11 == (u32 *)0U) == 0L) 
                                               #line 160 
                                               writel(57U,(void *)(hw_addr_11 + 8390U));
  }
  #line 167 
  dma_ctrl |= 33041U;
  {
    #line 172 
    union __anonunion___u_1447 __u_12;
    #line 171 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_12.__c),8);
    #line 171 
    u32 *hw_addr_12 = (__u_12.__val);
    #line 171 
    if ((long)(hw_addr_12 == (u32 *)0U) == 0L) 
                                               #line 171 
                                               writel(dma_ctrl,(void *)(hw_addr_12 + 8387U));
  }
  #line 174 
  hw->mac.max_queues = (unsigned short)128U;
  #line 177 
  if ((int)fm10k_is_ari_hierarchy_pf(hw) != 0) 
                                               #line 177 
                                               hw->iov.total_vfs = (unsigned short)64U; else 
                                                                    #line 177 
                                                                    hw->iov.total_vfs = (unsigned short)7U;
  #line 179 
  return 0;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_update_vlan_pf(struct fm10k_hw *hw, u32 vid, u8 vsi, bool set)
{
  #line 196 
  u32 vlan_table;
  #line 196 
  u32 reg;
  #line 196 
  u32 mask;
  #line 196 
  u32 bit;
  #line 196 
  u32 len;
  #line 199 
  if ((unsigned int)vsi > 64U) 
                               #line 200 
                               return -2;
  #line 215 
  len = vid >> 16;
  #line 216 
  vid &= 32767U;
  #line 219 
  if (len > 4095U || vid > 4095U) 
                                  #line 220 
                                  return -2;
  #line 223 
  reg = ((unsigned int)((int)vsi * 128) + vid / 32U) + 81920U;
  #line 223 
  bit = vid & 31U;
  #line 223 
  while (len <= 4095U) {
    {
      #line 230 
      unsigned int tmp;
      #line 233 
      u32 tmp_0;
      #line 227 
      vlan_table = fm10k_read_reg(hw,(int)reg);
      #line 230 
      if (len <= 30U) 
                      #line 230 
                      tmp = 4294967295U >> (31U - len); else 
                                                             #line 230 
                                                             tmp = 4294967295U;
      #line 230 
      mask = tmp << bit;
      #line 233 
      if ((int)set != 0) 
                         #line 233 
                         tmp_0 = ~ vlan_table; else 
                                                    #line 233 
                                                    tmp_0 = vlan_table;
      #line 233 
      mask = tmp_0 & mask;
      #line 234 
      if (mask != 0U) {
        #line 236 
        union __anonunion___u_1449 __u;
        #line 235 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 235 
        u32 *hw_addr = (__u.__val);
        #line 235 
        if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                                #line 235 
                                                writel(vlan_table ^ mask,(void *)(hw_addr + (unsigned long)reg));
      }
    }
    #line 224 
    len = (bit + len) + 4294967264U;
    #line 225 
    reg ++;
    #line 225 
    bit = 0U;
  }
  #line 238 
  return 0;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_read_mac_addr_pf(struct fm10k_hw *hw)
{
  #line 249 
  u8 perm_addr[6U];
  #line 250 
  u32 serial_num;
  #line 252 
  serial_num = fm10k_read_reg(hw,41);
  #line 255 
  if (~ serial_num << 24 != 0U) 
                                #line 256 
                                return -8;
  #line 258 
  perm_addr[0] = (unsigned char)(serial_num >> 24);
  #line 259 
  perm_addr[1] = (unsigned char)(serial_num >> 16);
  #line 260 
  perm_addr[2] = (unsigned char)(serial_num >> 8);
  #line 262 
  serial_num = fm10k_read_reg(hw,40);
  #line 265 
  if (~ serial_num >> 24 != 0U) 
                                #line 266 
                                return -8;
  #line 268 
  perm_addr[3] = (unsigned char)(serial_num >> 16);
  #line 269 
  perm_addr[4] = (unsigned char)(serial_num >> 8);
  #line 270 
  perm_addr[5] = (unsigned char)serial_num;
  #line 272 
  ether_addr_copy((u8 *)(& hw->mac.perm_addr),(u8 *)(& perm_addr));
  #line 273 
  ether_addr_copy((u8 *)(& hw->mac.addr),(u8 *)(& perm_addr));
  #line 275 
  return 0;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
bool fm10k_glort_valid_pf(struct fm10k_hw *hw, u16 glort)
{
  #line 287 
  glort = (unsigned short)((int)((unsigned short)(hw->mac.dglort_map >> 16)) & (int)glort);
  #line 289 
  return (_Bool)((unsigned int)glort == (hw->mac.dglort_map & 65535U));
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_update_xc_addr_pf(struct fm10k_hw *hw, u16 glort, u8 *mac, u16 vid, bool add, u8 flags)
{
  #line 308 
  struct fm10k_mac_update mac_update;
  #line 309 
  u32 msg[5U];
  #line 307 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 312 
  vid = (unsigned short)((unsigned int)vid & 32767U);
  #line 315 
  if (fm10k_glort_valid_pf(hw,(unsigned short)((int)glort))) {
    #line 315 
    if ((unsigned int)vid > 4095U) 
                                   #line 316 
                                   return -2;
  }
  else 
       #line 316 
       return -2;
  #line 319 
  mac_update.mac_lower = ((((unsigned int)*(mac + 2U) << 24) | ((unsigned int)*(mac + 3U) << 16)) | ((unsigned int)*(mac + 4U) << 8)) | (unsigned int)*(mac + 5U);
  #line 323 
  mac_update.mac_upper = (unsigned short)(((int)*mac << 8) | (int)*(mac + 1U));
  #line 325 
  mac_update.vlan = vid;
  #line 326 
  mac_update.glort = glort;
  #line 327 
  mac_update.action = (unsigned char)(! add);
  #line 328 
  mac_update.flags = flags;
  #line 331 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)2);
  #line 332 
  fm10k_tlv_attr_put_le_struct((u32 *)(& msg),(unsigned short)3,(void *)(& mac_update),12U);
  #line 336 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_update_uc_addr_pf(struct fm10k_hw *hw, u16 glort, u8 *mac, u16 vid, bool add, u8 flags)
{
  #line 355 
  if (! is_valid_ether_addr(mac)) 
                                  #line 356 
                                  return -2;
  #line 358 
  return fm10k_update_xc_addr_pf(hw,(unsigned short)((int)glort),mac,
                                (unsigned short)((int)vid),
                                (_Bool)((bool)((int)add) != 0),
                                (unsigned char)((int)flags));
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_update_mc_addr_pf(struct fm10k_hw *hw, u16 glort, u8 *mac, u16 vid, bool add)
{
  #line 376 
  if (! is_multicast_ether_addr(mac)) 
                                      #line 377 
                                      return -2;
  #line 379 
  return fm10k_update_xc_addr_pf(hw,(unsigned short)((int)glort),mac,
                                (unsigned short)((int)vid),
                                (_Bool)((bool)((int)add) != 0),
                                (unsigned char)0);
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_update_xcast_mode_pf(struct fm10k_hw *hw, u16 glort, u8 mode)
{
  #line 395 
  u32 msg[3U];
  #line 395 
  u32 xcast_mode;
  #line 394 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 397 
  if ((unsigned int)mode > 3U) 
                               #line 398 
                               return -2;
  #line 401 
  if (! fm10k_glort_valid_pf(hw,(unsigned short)((int)glort))) 
                                                               #line 402 
                                                               return -2;
  #line 408 
  xcast_mode = ((unsigned int)mode << 16) | (unsigned int)glort;
  #line 411 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)1);
  #line 412 
  fm10k_tlv_attr_put_value((u32 *)(& msg),(unsigned short)2,(long long)xcast_mode,4U);
  #line 415 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static void fm10k_update_int_moderator_pf(struct fm10k_hw *hw)
{
  #line 428 
  u32 i;
  {
    #line 432 
    union __anonunion___u_1451 __u;
    #line 431 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 431 
    u32 *hw_addr = (__u.__val);
    #line 431 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 431 
                                            writel(0U,(void *)(hw_addr + 73728U));
  }
  #line 434 
  i = 255U;
  #line 434 
  while (i != 0U) {
    #line 435 
    if (fm10k_read_reg(hw,(int)(i * 4U + 69635U)) == 0U) 
                                                         #line 436 
                                                         break;
    #line 434 
    i --;
  }
  {
    #line 441 
    union __anonunion___u_1453 __u_0;
    #line 440 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 440 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 440 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 440 
                                              writel(i,(void *)(hw_addr_0 + 76288U));
  }
  #line 443 
  if ((unsigned int)hw->iov.num_vfs == 0U) {
    #line 445 
    union __anonunion___u_1455 __u_1;
    #line 444 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 444 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 444 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 444 
                                              writel(i,(void *)(hw_addr_1 + 75776U));
  }
  {
    #line 448 
    union __anonunion___u_1457 __u_2;
    #line 447 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 447 
    u32 *hw_addr_2 = (__u_2.__val);
    #line 447 
    if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                              #line 447 
                                              writel(1024U,(void *)(hw_addr_2 + 73728U));
  }
  #line 449 
  return;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_update_lport_state_pf(struct fm10k_hw *hw, u16 glort, u16 count, bool enable)
{
  #line 463 
  u32 msg[3U];
  #line 463 
  u32 lport_msg;
  #line 481 
  int tmp_0;
  #line 462 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 466 
  if ((unsigned int)count == 0U) 
                                 #line 467 
                                 return 0;
  #line 470 
  if (! fm10k_glort_valid_pf(hw,(unsigned short)((int)glort))) 
                                                               #line 471 
                                                               return -2;
  #line 474 
  if (! enable) 
                #line 475 
                fm10k_update_xcast_mode_pf(hw,(unsigned short)((int)glort),(unsigned char)3);
  #line 478 
  lport_msg = ((unsigned int)count << 16) | (unsigned int)glort;
  #line 481 
  if ((int)enable != 0) 
                        #line 481 
                        tmp_0 = 512; else 
                                          #line 481 
                                          tmp_0 = 513;
  #line 481 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)tmp_0);
  #line 483 
  fm10k_tlv_attr_put_value((u32 *)(& msg),(unsigned short)12,(long long)lport_msg,4U);
  #line 486 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_configure_dglort_map_pf(struct fm10k_hw *hw, struct fm10k_dglort_cfg *dglort)
{
  #line 501 
  u16 glort;
  #line 501 
  u16 queue_count;
  #line 501 
  u16 vsi_count;
  #line 501 
  u16 pc_count;
  #line 502 
  u16 vsi;
  #line 502 
  u16 queue;
  #line 502 
  u16 pc;
  #line 502 
  u16 q_idx;
  #line 503 
  u32 txqctl;
  #line 503 
  u32 dglortdec;
  #line 503 
  u32 dglortmap;
  #line 506 
  if (dglort == (struct fm10k_dglort_cfg *)0) 
                                              #line 507 
                                              return -2;
  #line 510 
  if (((((((unsigned int)dglort->idx > 7U || (unsigned int)dglort->rss_l > 7U) || (unsigned int)dglort->pc_l > 3U) || (unsigned int)dglort->vsi_l > 6U) || (unsigned int)dglort->vsi_b > 64U) || (unsigned int)dglort->queue_l > 8U) || (unsigned int)dglort->queue_b > 255U) 
    #line 513 
    return -2;
  #line 516 
  queue_count = (unsigned short)(1UL << ((int)dglort->rss_l + (int)dglort->pc_l));
  #line 517 
  vsi_count = (unsigned short)(1UL << ((int)dglort->vsi_l + (int)dglort->queue_l));
  #line 518 
  glort = dglort->glort;
  #line 519 
  q_idx = dglort->queue_b;
  #line 522 
  vsi = (unsigned short)0U;
  #line 522 
  while ((int)vsi < (int)vsi_count) {
    #line 523 
    queue = (unsigned short)0U;
    #line 523 
    while ((int)queue < (int)queue_count) {
      #line 524 
      if ((unsigned int)q_idx > 255U) 
                                      #line 525 
                                      break;
      {
        #line 528 
        union __anonunion___u_1459 __u;
        #line 527 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 527 
        u32 *hw_addr = (__u.__val);
        #line 527 
        if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                                #line 527 
                                                writel((unsigned int)glort,(void *)(hw_addr + ((unsigned long)((int)q_idx * 64) + (unsigned long)32781U)));
      }
      {
        #line 529 
        union __anonunion___u_1461 __u_0;
        #line 528 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
        #line 528 
        u32 *hw_addr_0 = (__u_0.__val);
        #line 528 
        if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                                  #line 528 
                                                  writel((unsigned int)glort,(void *)(hw_addr_0 + ((unsigned long)((int)q_idx * 64) + (unsigned long)16398U)));
      }
      #line 523 
      queue = (u16)((int)queue + 1);
      #line 523 
      q_idx = (u16)((int)q_idx + 1);
    }
    #line 522 
    vsi = (u16)((int)vsi + 1);
    #line 522 
    glort = (u16)((int)glort + 1);
  }
  #line 533 
  queue_count = (unsigned short)(1UL << (((int)dglort->queue_l + (int)dglort->rss_l) + (int)dglort->vsi_l));
  #line 534 
  pc_count = (unsigned short)(1UL << (int)dglort->pc_l);
  #line 537 
  pc = (unsigned short)0U;
  #line 537 
  while ((int)pc < (int)pc_count) {
    #line 538 
    q_idx = (unsigned short)((int)dglort->queue_b + (int)pc);
    #line 539 
    queue = (unsigned short)0U;
    #line 539 
    while ((int)queue < (int)queue_count) {
      #line 540 
      if ((unsigned int)q_idx > 255U) 
                                      #line 541 
                                      break;
      #line 543 
      txqctl = fm10k_read_reg(hw,(int)q_idx * 64 + 32775);
      #line 544 
      txqctl &= 4294966399U;
      #line 545 
      txqctl = (unsigned int)((int)pc << 7) | txqctl;
      {
        #line 547 
        union __anonunion___u_1463 __u_1;
        #line 546 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
        #line 546 
        u32 *hw_addr_1 = (__u_1.__val);
        #line 546 
        if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                                  #line 546 
                                                  writel(txqctl,(void *)(hw_addr_1 + ((unsigned long)((int)q_idx * 64) + (unsigned long)32775U)));
      }
      #line 548 
      q_idx = (unsigned short)((int)q_idx + (int)pc_count);
      #line 539 
      queue = (u16)((int)queue + 1);
    }
    #line 537 
    pc = (u16)((int)pc + 1);
  }
  #line 553 
  dglortdec = ((((((unsigned int)dglort->rss_l << 24) | ((unsigned int)dglort->queue_b << 16)) | ((unsigned int)dglort->pc_l << 14)) | ((unsigned int)dglort->vsi_b << 7)) | ((unsigned int)dglort->vsi_l << 4)) | (unsigned int)dglort->queue_l;
  #line 559 
  if ((unsigned int)dglort->inner_rss != 0U) 
                                             #line 560 
                                             dglortdec |= 134217728U;
  #line 563 
  if ((unsigned int)dglort->idx == 0U) 
                                       #line 563 
                                       dglortmap = 0U; else 
                                                            #line 563 
                                                            dglortmap = 4294901760U;
  #line 565 
  dglortmap <<= ((int)dglort->vsi_l + (int)dglort->queue_l) + (int)dglort->shared_l;
  #line 566 
  dglortmap = (unsigned int)dglort->glort | dglortmap;
  {
    #line 570 
    union __anonunion___u_1465 __u_2;
    #line 569 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 569 
    u32 *hw_addr_2 = (__u_2.__val);
    #line 569 
    if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                              #line 569 
                                              writel(dglortdec,(void *)(hw_addr_2 + ((unsigned long)dglort->idx + (unsigned long)56U)));
  }
  {
    #line 571 
    union __anonunion___u_1467 __u_3;
    #line 570 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 570 
    u32 *hw_addr_3 = (__u_3.__val);
    #line 570 
    if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                              #line 570 
                                              writel(dglortmap,(void *)(hw_addr_3 + ((unsigned long)dglort->idx + (unsigned long)48U)));
  }
  #line 572 
  return 0;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
u16 fm10k_queues_per_pool(struct fm10k_hw *hw)
{
  #line 579 
  unsigned int tmp;
  #line 579 
  unsigned int tmp_0;
  #line 579 
  unsigned int tmp_1;
  #line 577 
  u16 num_pools = hw->iov.num_pools;
  #line 579 
  if ((unsigned int)num_pools <= 32U) {
    #line 579 
    if ((unsigned int)num_pools <= 16U) {
      #line 579 
      if ((unsigned int)num_pools > 8U) 
                                        #line 579 
                                        tmp = 8U; else 
                                                       #line 579 
                                                       tmp = 16U;
      #line 579 
      tmp_0 = tmp;
    }
    else 
         #line 579 
         tmp_0 = 4U;
    #line 579 
    tmp_1 = tmp_0;
  }
  else 
       #line 579 
       tmp_1 = 2U;
  #line 579 
  return (unsigned short)tmp_1;
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
u16 fm10k_vf_queue_index(struct fm10k_hw *hw, u16 vf_idx)
{
  #line 585 
  u16 num_vfs = hw->iov.num_vfs;
  #line 586 
  u16 vf_q_idx = (unsigned short)256U;
  #line 588 
  vf_q_idx = (unsigned short)((int)vf_q_idx - (int)((unsigned short)((int)fm10k_queues_per_pool(hw) * ((int)num_vfs - (int)vf_idx))));
  #line 590 
  return vf_q_idx;
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static u16 fm10k_vectors_per_pool(struct fm10k_hw *hw)
{
  #line 597 
  unsigned int tmp;
  #line 597 
  unsigned int tmp_0;
  #line 595 
  u16 num_pools = hw->iov.num_pools;
  #line 597 
  if ((unsigned int)num_pools <= 32U) {
    #line 597 
    if ((unsigned int)num_pools > 16U) 
                                       #line 597 
                                       tmp = 16U; else 
                                                       #line 597 
                                                       tmp = 32U;
    #line 597 
    tmp_0 = tmp;
  }
  else 
       #line 597 
       tmp_0 = 8U;
  #line 597 
  return (unsigned short)tmp_0;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static u16 fm10k_vf_vector_index(struct fm10k_hw *hw, u16 vf_idx)
{
  #line 603 
  u16 vf_v_idx = (unsigned short)256U;
  #line 605 
  vf_v_idx = (unsigned short)((int)((unsigned short)((int)fm10k_vectors_per_pool(hw) * (int)vf_idx)) + (int)vf_v_idx);
  #line 607 
  return vf_v_idx;
}

#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_iov_assign_resources_pf(struct fm10k_hw *hw, u16 num_vfs, u16 num_pools)
{
  #line 622 
  u16 qmap_stride;
  #line 622 
  u16 qpp;
  #line 622 
  u16 vpp;
  #line 622 
  u16 vf_q_idx;
  #line 622 
  u16 vf_q_idx0;
  #line 622 
  u16 qmap_idx;
  #line 624 
  int i;
  #line 624 
  int j;
  #line 623 
  u32 vid = (unsigned int)((int)hw->mac.default_vid << 16);
  #line 627 
  if ((unsigned int)num_pools > 64U) 
                                     #line 628 
                                     return -2;
  #line 631 
  if ((int)num_vfs > (int)num_pools || (int)hw->iov.total_vfs < (int)num_vfs) 
    #line 632 
    return -2;
  #line 635 
  hw->iov.num_vfs = num_vfs;
  #line 636 
  hw->iov.num_pools = num_pools;
  #line 639 
  if ((unsigned int)num_vfs > 8U) 
                                  #line 639 
                                  qmap_stride = (unsigned short)32U; else 
                                                                    #line 639 
                                                                    qmap_stride = (unsigned short)256U;
  #line 640 
  qpp = fm10k_queues_per_pool(hw);
  #line 641 
  vpp = fm10k_vectors_per_pool(hw);
  #line 644 
  vf_q_idx = fm10k_vf_queue_index(hw,(unsigned short)0);
  #line 645 
  qmap_idx = (unsigned short)0U;
  #line 648 
  i = 0;
  #line 648 
  while ((int)num_vfs > i) {
    {
      #line 650 
      union __anonunion___u_1469 __u;
      #line 649 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 649 
      u32 *hw_addr = (__u.__val);
      #line 649 
      if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                              #line 649 
                                              writel(0U,(void *)(hw_addr + ((unsigned long)i + (unsigned long)8256U)));
    }
    {
      #line 651 
      union __anonunion___u_1471 __u_0;
      #line 650 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 650 
      u32 *hw_addr_0 = (__u_0.__val);
      #line 650 
      if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                                #line 650 
                                                writel(0U,(void *)(hw_addr_0 + ((unsigned long)i + (unsigned long)8320U)));
    }
    {
      #line 652 
      union __anonunion___u_1473 __u_1;
      #line 651 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 651 
      u32 *hw_addr_1 = (__u_1.__val);
      #line 651 
      if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                                #line 651 
                                                writel(2097151U,(void *)(hw_addr_1 + ((unsigned long)i + (unsigned long)8192U)));
    }
    #line 648 
    i ++;
  }
  #line 656 
  i = (int)num_vfs * 16;
  #line 656 
  while (1) {
    #line 656 
    int tmp_3;
    #line 656 
    tmp_3 = i;
    #line 656 
    i --;
    #line 656 
    ;
    #line 656 
    if (! (tmp_3 != 0)) 
                        #line 656 
                        break;
    {
      #line 658 
      union __anonunion___u_1475 __u_2;
      #line 657 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 657 
      u32 *hw_addr_2 = (__u_2.__val);
      #line 657 
      if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                                #line 657 
                                                writel(0U,(void *)(hw_addr_2 + ((unsigned long)i + (unsigned long)98304U)));
    }
  }
  {
    #line 661 
    union __anonunion___u_1477 __u_3;
    #line 660 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 660 
    u32 *hw_addr_3 = (__u_3.__val);
    #line 660 
    if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                              #line 660 
                                              writel(4294967295U,(void *)(hw_addr_3 + 100422U));
  }
  {
    #line 662 
    union __anonunion___u_1479 __u_4;
    #line 661 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 661 
    u32 *hw_addr_4 = (__u_4.__val);
    #line 661 
    if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                              #line 661 
                                              writel(4294967295U,(void *)(hw_addr_4 + 100423U));
  }
  #line 664 
  i = 128;
  #line 664 
  while ((int)vf_q_idx > i) {
    {
      #line 666 
      union __anonunion___u_1481 __u_5;
      #line 665 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 665 
      u32 *hw_addr_5 = (__u_5.__val);
      #line 665 
      if ((long)(hw_addr_5 == (u32 *)0U) == 0L) 
                                                #line 665 
                                                writel(0U,(void *)(hw_addr_5 + ((unsigned long)(i * 64) + (unsigned long)32774U)));
    }
    {
      #line 667 
      union __anonunion___u_1483 __u_6;
      #line 666 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
      #line 666 
      u32 *hw_addr_6 = (__u_6.__val);
      #line 666 
      if ((long)(hw_addr_6 == (u32 *)0U) == 0L) 
                                                #line 666 
                                                writel(vid | 268435519U,(void *)(hw_addr_6 + ((unsigned long)(i * 64) + (unsigned long)32775U)));
    }
    {
      #line 669 
      union __anonunion___u_1485 __u_7;
      #line 668 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
      #line 668 
      u32 *hw_addr_7 = (__u_7.__val);
      #line 668 
      if ((long)(hw_addr_7 == (u32 *)0U) == 0L) 
                                                #line 668 
                                                writel(252U,(void *)(hw_addr_7 + ((unsigned long)(i * 64) + (unsigned long)16390U)));
    }
    #line 664 
    i ++;
  }
  #line 674 
  i = 257;
  #line 674 
  while (i <= 767) {
    #line 675 
    if ((((int)vpp + -1) & i) == 0) {
      #line 677 
      union __anonunion___u_1487 __u_8;
      #line 676 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
      #line 676 
      u32 *hw_addr_8 = (__u_8.__val);
      #line 676 
      if ((long)(hw_addr_8 == (u32 *)0U) == 0L) 
                                                #line 676 
                                                writel((unsigned int)(i - (int)vpp),(void *)(hw_addr_8 + ((unsigned long)(i * 2) + (unsigned long)75776U)));
    }
    else {
      #line 679 
      union __anonunion___u_1489 __u_9;
      #line 678 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_9.__c),8);
      #line 678 
      u32 *hw_addr_9 = (__u_9.__val);
      #line 678 
      if ((long)(hw_addr_9 == (u32 *)0U) == 0L) 
                                                #line 678 
                                                writel((unsigned int)(i + -1),(void *)(hw_addr_9 + ((unsigned long)(i * 2) + (unsigned long)75776U)));
    }
    #line 674 
    i ++;
  }
  {
    #line 683 
    union __anonunion___u_1491 __u_10;
    #line 682 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_10.__c),8);
    #line 682 
    u32 *hw_addr_10 = (__u_10.__val);
    #line 682 
    if ((long)(hw_addr_10 == (u32 *)0U) == 0L) {
      #line 682 
      ;
      #line 682 
      writel((unsigned int)fm10k_vf_vector_index(hw,
                               (unsigned short)((int)((unsigned int)num_vfs + 65535U))),(void *)(hw_addr_10 + 75776U));
    }
  }
  #line 686 
  i = 0;
  #line 686 
  while ((int)num_vfs > i) {
    #line 688 
    vf_q_idx0 = vf_q_idx;
    #line 690 
    j = 0;
    #line 690 
    while ((int)qpp > j) {
      {
        #line 693 
        union __anonunion___u_1493 __u_11;
        #line 692 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_11.__c),8);
        #line 692 
        u32 *hw_addr_11 = (__u_11.__val);
        #line 692 
        if ((long)(hw_addr_11 == (u32 *)0U) == 0L) 
                                                   #line 692 
                                                   writel(0U,(void *)(hw_addr_11 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)32774U)));
      }
      {
        #line 694 
        union __anonunion___u_1495 __u_12;
        #line 693 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_12.__c),8);
        #line 693 
        u32 *hw_addr_12 = (__u_12.__val);
        #line 693 
        if ((long)(hw_addr_12 == (u32 *)0U) == 0L) 
                                                   #line 693 
                                                   writel(((unsigned int)((i << 10) | i) | vid) | 64U,(void *)(hw_addr_12 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)32775U)));
      }
      {
        #line 697 
        union __anonunion___u_1497 __u_13;
        #line 696 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_13.__c),8);
        #line 696 
        u32 *hw_addr_13 = (__u_13.__val);
        #line 696 
        if ((long)(hw_addr_13 == (u32 *)0U) == 0L) 
                                                   #line 696 
                                                   writel(513U,(void *)(hw_addr_13 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)16391U)));
      }
      {
        #line 700 
        union __anonunion___u_1499 __u_14;
        #line 699 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_14.__c),8);
        #line 699 
        u32 *hw_addr_14 = (__u_14.__val);
        #line 699 
        if ((long)(hw_addr_14 == (u32 *)0U) == 0L) 
                                                   #line 699 
                                                   writel((unsigned int)((i << 2) | 256),(void *)(hw_addr_14 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)16390U)));
      }
      {
        #line 705 
        union __anonunion___u_1501 __u_15;
        #line 704 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_15.__c),8);
        #line 704 
        u32 *hw_addr_15 = (__u_15.__val);
        #line 704 
        if ((long)(hw_addr_15 == (u32 *)0U) == 0L) 
                                                   #line 704 
                                                   writel((unsigned int)vf_q_idx,(void *)(hw_addr_15 + ((unsigned long)qmap_idx + (unsigned long)10240U)));
      }
      {
        #line 706 
        union __anonunion___u_1503 __u_16;
        #line 705 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_16.__c),8);
        #line 705 
        u32 *hw_addr_16 = (__u_16.__val);
        #line 705 
        if ((long)(hw_addr_16 == (u32 *)0U) == 0L) 
                                                   #line 705 
                                                   writel((unsigned int)vf_q_idx,(void *)(hw_addr_16 + ((unsigned long)qmap_idx + (unsigned long)12288U)));
      }
      #line 690 
      j ++;
      #line 690 
      qmap_idx = (u16)((int)qmap_idx + 1);
      #line 690 
      vf_q_idx = (u16)((int)vf_q_idx + 1);
    }
    #line 709 
    while ((int)qmap_stride > j) {
      {
        #line 711 
        union __anonunion___u_1505 __u_17;
        #line 710 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_17.__c),8);
        #line 710 
        u32 *hw_addr_17 = (__u_17.__val);
        #line 710 
        if ((long)(hw_addr_17 == (u32 *)0U) == 0L) 
                                                   #line 710 
                                                   writel((unsigned int)vf_q_idx0,(void *)(hw_addr_17 + ((unsigned long)qmap_idx + (unsigned long)10240U)));
      }
      {
        #line 712 
        union __anonunion___u_1507 __u_18;
        #line 711 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_18.__c),8);
        #line 711 
        u32 *hw_addr_18 = (__u_18.__val);
        #line 711 
        if ((long)(hw_addr_18 == (u32 *)0U) == 0L) 
                                                   #line 711 
                                                   writel((unsigned int)vf_q_idx0,(void *)(hw_addr_18 + ((unsigned long)qmap_idx + (unsigned long)12288U)));
      }
      #line 709 
      j ++;
      #line 709 
      qmap_idx = (u16)((int)qmap_idx + 1);
    }
    #line 686 
    i ++;
  }
  #line 716 
  while ((unsigned int)qmap_idx <= 2047U) {
    {
      #line 718 
      union __anonunion___u_1509 __u_19;
      #line 717 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_19.__c),8);
      #line 717 
      u32 *hw_addr_19 = (__u_19.__val);
      #line 717 
      if ((long)(hw_addr_19 == (u32 *)0U) == 0L) 
                                                 #line 717 
                                                 writel(0U,(void *)(hw_addr_19 + ((unsigned long)qmap_idx + (unsigned long)10240U)));
    }
    {
      #line 719 
      union __anonunion___u_1511 __u_20;
      #line 718 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_20.__c),8);
      #line 718 
      u32 *hw_addr_20 = (__u_20.__val);
      #line 718 
      if ((long)(hw_addr_20 == (u32 *)0U) == 0L) 
                                                 #line 718 
                                                 writel(0U,(void *)(hw_addr_20 + ((unsigned long)qmap_idx + (unsigned long)12288U)));
    }
    #line 719 
    qmap_idx = (u16)((int)qmap_idx + 1);
  }
  #line 722 
  return 0;
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_iov_configure_tc_pf(struct fm10k_hw *hw, u16 vf_idx, int rate)
{
  #line 737 
  u32 interval = 524288U;
  #line 738 
  u32 tc_rate = 65535U;
  #line 741 
  if ((int)hw->iov.num_vfs <= (int)vf_idx) 
                                           #line 742 
                                           return -2;
  #line 745 
  switch ((unsigned int)hw->bus.speed) {
    #line 746 
    case (unsigned int)2500: 
                             #line 746 
    ;
    #line 747 
    interval = 131072U;
    #line 748 
    break;
    #line 749 
    case (unsigned int)5000: 
                             #line 749 
    ;
    #line 750 
    interval = 262144U;
    #line 751 
    break;
    #line 752 
    default: 
             #line 752 
    ;
    #line 753 
    break;
  }
  #line 756 
  if (rate != 0) {
    #line 757 
    if ((unsigned int)rate + 4294967295U > 99999U) 
                                                   #line 758 
                                                   return -2;
    #line 767 
    tc_rate = (unsigned int)((rate * 128) / 125);
    #line 772 
    if (rate <= 3999) 
                      #line 773 
                      interval <<= 1; else 
                                           #line 775 
                                           tc_rate >>= 1;
  }
  {
    #line 780 
    union __anonunion___u_1513 __u;
    #line 779 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 779 
    u32 *hw_addr = (__u.__val);
    #line 779 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 779 
                                            writel(tc_rate | interval,(void *)(hw_addr + ((unsigned long)vf_idx + (unsigned long)8320U)));
  }
  {
    #line 781 
    union __anonunion___u_1515 __u_0;
    #line 780 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 780 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 780 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 780 
                                              writel(65536U,(void *)(hw_addr_0 + ((unsigned long)vf_idx + (unsigned long)8256U)));
  }
  {
    #line 782 
    union __anonunion___u_1517 __u_1;
    #line 781 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 781 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 781 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 781 
                                              writel(65536U,(void *)(hw_addr_1 + ((unsigned long)vf_idx + (unsigned long)8192U)));
  }
  #line 783 
  return 0;
}

#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_iov_assign_int_moderator_pf(struct fm10k_hw *hw, u16 vf_idx)
{
  #line 796 
  u16 vf_v_idx;
  #line 796 
  u16 vf_v_limit;
  #line 796 
  u16 i;
  #line 799 
  if ((int)hw->iov.num_vfs <= (int)vf_idx) 
                                           #line 800 
                                           return -2;
  #line 803 
  vf_v_idx = fm10k_vf_vector_index(hw,(unsigned short)((int)vf_idx));
  #line 804 
  vf_v_limit = (unsigned short)((int)fm10k_vectors_per_pool(hw) + (int)vf_v_idx);
  #line 807 
  i = (unsigned short)((unsigned int)vf_v_limit + 65535U);
  #line 807 
  while ((int)i > (int)vf_v_idx) {
    #line 808 
    if (fm10k_read_reg(hw,(int)i * 4 + 69635) == 0U) 
                                                     #line 809 
                                                     break;
    #line 807 
    i = (u16)((int)i - 1);
  }
  #line 813 
  if ((int)vf_idx == (int)hw->iov.num_vfs + -1) {
    #line 815 
    union __anonunion___u_1519 __u;
    #line 814 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 814 
    u32 *hw_addr = (__u.__val);
    #line 814 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 814 
                                            writel((unsigned int)i,(void *)(hw_addr + 75776U));
  }
  else {
    #line 817 
    union __anonunion___u_1521 __u_0;
    #line 816 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 816 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 816 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 816 
                                              writel((unsigned int)i,(void *)(hw_addr_0 + ((unsigned long)((int)vf_v_limit * 2) + (unsigned long)75776U)));
  }
  #line 818 
  return 0;
}

#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_iov_assign_default_mac_vlan_pf(struct fm10k_hw *hw, struct fm10k_vf_info *vf_info)
{
  #line 831 
  u16 qmap_stride;
  #line 831 
  u16 queues_per_pool;
  #line 831 
  u16 vf_q_idx;
  #line 831 
  u16 timeout;
  #line 831 
  u16 qmap_idx;
  #line 831 
  u16 i;
  #line 832 
  u32 msg[4U];
  #line 832 
  u32 txdctl;
  #line 832 
  u32 txqctl;
  #line 834 
  u16 vf_idx;
  #line 834 
  u16 vf_vid;
  #line 832 
  u32 tdbal = 0U;
  #line 832 
  u32 tdbah = 0U;
  #line 833 
  s32 err = 0;
  #line 837 
  if (vf_info == (struct fm10k_vf_info *)0 || (int)((unsigned short)vf_info->vf_idx) >= (int)hw->iov.num_vfs) 
    #line 838 
    return -2;
  #line 841 
  if ((unsigned int)hw->iov.num_vfs > 8U) 
                                          #line 841 
                                          qmap_stride = (unsigned short)32U; else 
                                                                    #line 841 
                                                                    qmap_stride = (unsigned short)256U;
  #line 842 
  queues_per_pool = fm10k_queues_per_pool(hw);
  #line 845 
  vf_idx = (unsigned short)vf_info->vf_idx;
  #line 846 
  vf_q_idx = fm10k_vf_queue_index(hw,(unsigned short)((int)vf_idx));
  #line 847 
  qmap_idx = (unsigned short)((int)qmap_stride * (int)vf_idx);
  #line 854 
  if ((unsigned int)vf_info->pf_vid != 0U) 
                                           #line 855 
                                           vf_vid = (unsigned short)((unsigned int)vf_info->pf_vid | 32768U); else 
                                                                    #line 857 
                                                                    vf_vid = vf_info->sw_vid;
  #line 860 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)2);
  #line 861 
  fm10k_tlv_attr_put_mac_vlan((u32 *)(& msg),(unsigned short)3,(u8 *)(& vf_info->mac),(unsigned short)((int)vf_vid));
  #line 868 
  txqctl = ((unsigned int)vf_vid << 16) & 268369920U;
  #line 870 
  txqctl = (unsigned int)((((int)vf_idx << 10) | 64) | (int)vf_idx) | txqctl;
  #line 873 
  i = (unsigned short)0U;
  #line 873 
  while ((int)i < (int)queues_per_pool) {
    {
      #line 875 
      union __anonunion___u_1523 __u;
      #line 874 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 874 
      u32 *hw_addr = (__u.__val);
      #line 874 
      if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                              #line 874 
                                              writel(txqctl,(void *)(hw_addr + ((unsigned long)(((int)vf_q_idx + (int)i) * 64) + (unsigned long)32775U)));
    }
    #line 873 
    i = (u16)((int)i + 1);
  }
  #line 877 
  if (vf_info->mbx.ops.enqueue_tx != (s32 (*)(struct fm10k_hw *, struct fm10k_mbx_info *, u32 *))0) {
    #line 878 
    err = (*(vf_info->mbx.ops.enqueue_tx))(hw,& vf_info->mbx,(u32 *)(& msg));
    #line 879 
    if (err != -511) 
                     #line 880 
                     return err;
    #line 881 
    err = 0;
  }
  {
    #line 892 
    union __anonunion___u_1525 __u_0;
    #line 891 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 891 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 891 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 891 
                                              writel(0U,(void *)(hw_addr_0 + ((unsigned long)qmap_idx + (unsigned long)10240U)));
  }
  {
    #line 893 
    union __anonunion___u_1527 __u_1;
    #line 892 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 892 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 892 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 892 
                                              writel(0U,(void *)(hw_addr_1 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)32774U)));
  }
  #line 895 
  txdctl = fm10k_read_reg(hw,(int)vf_q_idx * 64 + 32774);
  #line 896 
  timeout = (unsigned short)0U;
  #line 896 
  while ((txdctl & 16384U) != 0U) {
    #line 898 
    if ((unsigned int)timeout == 10U) {
      #line 899 
      err = -6;
      #line 900 
      goto err_out;
    }
    #line 903 
    usleep_range(100UL,200UL);
    #line 904 
    txdctl = fm10k_read_reg(hw,(int)vf_q_idx * 64 + 32774);
    #line 896 
    timeout = (u16)((int)timeout + 1);
  }
  #line 908 
  if ((int)is_valid_ether_addr((u8 *)(& vf_info->mac)) != 0) {
    #line 909 
    tdbal = (((unsigned int)vf_info->mac[3] << 24) | ((unsigned int)vf_info->mac[4] << 16)) | ((unsigned int)vf_info->mac[5] << 8);
    #line 913 
    tdbah = ((((unsigned int)vf_info->mac[0] << 16) | ((unsigned int)vf_info->mac[1] << 8)) | (unsigned int)vf_info->mac[2]) | 4278190080U;
  }
  {
    #line 921 
    union __anonunion___u_1529 __u_2;
    #line 920 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 920 
    u32 *hw_addr_2 = (__u_2.__val);
    #line 920 
    if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                              #line 920 
                                              writel(tdbal,(void *)(hw_addr_2 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)32768U)));
  }
  {
    #line 922 
    union __anonunion___u_1531 __u_3;
    #line 921 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 921 
    u32 *hw_addr_3 = (__u_3.__val);
    #line 921 
    if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                              #line 921 
                                              writel(tdbah,(void *)(hw_addr_3 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)32769U)));
  }
  {
    #line 928 
    union __anonunion___u_1533 __u_4;
    #line 927 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 927 
    u32 *hw_addr_4 = (__u_4.__val);
    #line 927 
    if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                              #line 927 
                                              writel((unsigned int)((int)hw->mac.itr_scale << 9),(void *)(hw_addr_4 + ((unsigned long)((int)vf_q_idx * 64) + (unsigned long)32770U)));
  }
  #line 930 
  err_out: 
           #line 930 
  ;
  {
    #line 933 
    union __anonunion___u_1535 __u_5;
    #line 932 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 932 
    u32 *hw_addr_5 = (__u_5.__val);
    #line 932 
    if ((long)(hw_addr_5 == (u32 *)0U) == 0L) 
                                              #line 932 
                                              writel((unsigned int)vf_q_idx,(void *)(hw_addr_5 + ((unsigned long)qmap_idx + (unsigned long)10240U)));
  }
  #line 933 
  return err;
}

#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_iov_reset_resources_pf(struct fm10k_hw *hw, struct fm10k_vf_info *vf_info)
{
  #line 946 
  u16 qmap_stride;
  #line 946 
  u16 queues_per_pool;
  #line 946 
  u16 vf_q_idx;
  #line 946 
  u16 qmap_idx;
  #line 947 
  u32 txqctl;
  #line 947 
  u32 rxqctl;
  #line 948 
  u16 vf_v_idx;
  #line 948 
  u16 vf_v_limit;
  #line 948 
  u16 vf_vid;
  #line 950 
  int i;
  #line 947 
  u32 tdbal = 0U;
  #line 947 
  u32 tdbah = 0U;
  #line 949 
  u8 vf_idx = vf_info->vf_idx;
  #line 953 
  if ((int)((unsigned short)vf_idx) >= (int)hw->iov.num_vfs) 
                                                             #line 954 
                                                             return -2;
  {
    #line 958 
    union __anonunion___u_1537 __u;
    #line 957 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 957 
    u32 *hw_addr = (__u.__val);
    #line 957 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 957 
                                            writel((unsigned int)(1UL << ((int)vf_idx & 31)),(void *)(hw_addr + ((unsigned long)((unsigned int)vf_idx / 32U) + (unsigned long)100422U)));
  }
  #line 960 
  vf_info->mbx.timeout = 0U;
  #line 961 
  if (vf_info->mbx.ops.disconnect != (void (*)(struct fm10k_hw *, struct fm10k_mbx_info *))0) 
    #line 962 
    (*(vf_info->mbx.ops.disconnect))(hw,& vf_info->mbx);
  #line 965 
  vf_v_idx = fm10k_vf_vector_index(hw,(unsigned short)((int)vf_idx));
  #line 966 
  vf_v_limit = (unsigned short)((int)fm10k_vectors_per_pool(hw) + (int)vf_v_idx);
  #line 969 
  if ((unsigned int)hw->iov.num_vfs > 8U) 
                                          #line 969 
                                          qmap_stride = (unsigned short)32U; else 
                                                                    #line 969 
                                                                    qmap_stride = (unsigned short)256U;
  #line 970 
  queues_per_pool = fm10k_queues_per_pool(hw);
  #line 971 
  qmap_idx = (unsigned short)((int)((unsigned short)vf_idx) * (int)qmap_stride);
  #line 974 
  i = (int)qmap_idx;
  #line 974 
  while ((int)qmap_idx + (int)qmap_stride > i) {
    {
      #line 976 
      union __anonunion___u_1539 __u_0;
      #line 975 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 975 
      u32 *hw_addr_0 = (__u_0.__val);
      #line 975 
      if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                                #line 975 
                                                writel(0U,(void *)(hw_addr_0 + ((unsigned long)i + (unsigned long)10240U)));
    }
    {
      #line 977 
      union __anonunion___u_1541 __u_1;
      #line 976 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 976 
      u32 *hw_addr_1 = (__u_1.__val);
      #line 976 
      if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                                #line 976 
                                                writel(0U,(void *)(hw_addr_1 + ((unsigned long)i + (unsigned long)12288U)));
    }
    #line 974 
    i ++;
  }
  #line 980 
  vf_q_idx = fm10k_vf_queue_index(hw,(unsigned short)((int)vf_idx));
  #line 983 
  if ((unsigned int)vf_info->pf_vid != 0U) 
                                           #line 984 
                                           vf_vid = vf_info->pf_vid; else 
                                                                    #line 986 
                                                                    vf_vid = vf_info->sw_vid;
  #line 989 
  txqctl = ((((unsigned int)vf_vid << 16) | (unsigned int)((int)vf_idx << 10)) | (unsigned int)vf_idx) | 64U;
  #line 992 
  rxqctl = (unsigned int)(((int)vf_idx << 2) | 256);
  #line 995 
  i = (int)vf_q_idx;
  #line 995 
  while ((int)queues_per_pool + (int)vf_q_idx > i) {
    {
      #line 997 
      union __anonunion___u_1543 __u_2;
      #line 996 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 996 
      u32 *hw_addr_2 = (__u_2.__val);
      #line 996 
      if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                                #line 996 
                                                writel(0U,(void *)(hw_addr_2 + ((unsigned long)(i * 64) + (unsigned long)32774U)));
    }
    {
      #line 998 
      union __anonunion___u_1545 __u_3;
      #line 997 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 997 
      u32 *hw_addr_3 = (__u_3.__val);
      #line 997 
      if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                                #line 997 
                                                writel(txqctl,(void *)(hw_addr_3 + ((unsigned long)(i * 64) + (unsigned long)32775U)));
    }
    {
      #line 999 
      union __anonunion___u_1547 __u_4;
      #line 998 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 998 
      u32 *hw_addr_4 = (__u_4.__val);
      #line 998 
      if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                                #line 998 
                                                writel(513U,(void *)(hw_addr_4 + ((unsigned long)(i * 64) + (unsigned long)16391U)));
    }
    {
      #line 1002 
      union __anonunion___u_1549 __u_5;
      #line 1001 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 1001 
      u32 *hw_addr_5 = (__u_5.__val);
      #line 1001 
      if ((long)(hw_addr_5 == (u32 *)0U) == 0L) 
                                                #line 1001 
                                                writel(rxqctl,(void *)(hw_addr_5 + ((unsigned long)(i * 64) + (unsigned long)16390U)));
    }
    #line 995 
    i ++;
  }
  {
    #line 1006 
    union __anonunion___u_1551 __u_6;
    #line 1005 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
    #line 1005 
    u32 *hw_addr_6 = (__u_6.__val);
    #line 1005 
    if ((long)(hw_addr_6 == (u32 *)0U) == 0L) 
                                              #line 1005 
                                              writel(0U,(void *)(hw_addr_6 + ((unsigned long)vf_idx + (unsigned long)8256U)));
  }
  {
    #line 1007 
    union __anonunion___u_1553 __u_7;
    #line 1006 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
    #line 1006 
    u32 *hw_addr_7 = (__u_7.__val);
    #line 1006 
    if ((long)(hw_addr_7 == (u32 *)0U) == 0L) 
                                              #line 1006 
                                              writel(0U,(void *)(hw_addr_7 + ((unsigned long)vf_idx + (unsigned long)8320U)));
  }
  {
    #line 1008 
    union __anonunion___u_1555 __u_8;
    #line 1007 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
    #line 1007 
    u32 *hw_addr_8 = (__u_8.__val);
    #line 1007 
    if ((long)(hw_addr_8 == (u32 *)0U) == 0L) 
                                              #line 1007 
                                              writel(2097151U,(void *)(hw_addr_8 + ((unsigned long)vf_idx + (unsigned long)8192U)));
  }
  #line 1011 
  if ((unsigned int)vf_idx == 0U) 
                                  #line 1012 
                                  (*(hw->mac.ops.update_int_moderator))(hw); else 
                                                                    #line 1014 
                                                                    (*(hw->iov.ops.assign_int_moderator))(hw,(unsigned short)((int)((unsigned int)((unsigned short)vf_idx) + 65535U)));
  #line 1017 
  if ((int)vf_idx == (int)hw->iov.num_vfs + -1) {
    #line 1019 
    union __anonunion___u_1557 __u_9;
    #line 1018 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_9.__c),8);
    #line 1018 
    u32 *hw_addr_9 = (__u_9.__val);
    #line 1018 
    if ((long)(hw_addr_9 == (u32 *)0U) == 0L) 
                                              #line 1018 
                                              writel((unsigned int)vf_v_idx,(void *)(hw_addr_9 + 75776U));
  }
  else {
    #line 1021 
    union __anonunion___u_1559 __u_10;
    #line 1020 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_10.__c),8);
    #line 1020 
    u32 *hw_addr_10 = (__u_10.__val);
    #line 1020 
    if ((long)(hw_addr_10 == (u32 *)0U) == 0L) 
                                               #line 1020 
                                               writel((unsigned int)vf_v_idx,(void *)(hw_addr_10 + ((unsigned long)((int)vf_v_limit * 2) + (unsigned long)75776U)));
  }
  #line 1023 
  vf_v_idx = (u16)((int)vf_v_idx + 1);
  #line 1023 
  while ((int)vf_v_idx < (int)vf_v_limit) {
    {
      #line 1025 
      union __anonunion___u_1561 __u_11;
      #line 1024 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_11.__c),8);
      #line 1024 
      u32 *hw_addr_11 = (__u_11.__val);
      #line 1024 
      if ((long)(hw_addr_11 == (u32 *)0U) == 0L) 
                                                 #line 1024 
                                                 writel((unsigned int)((int)vf_v_idx + -1),(void *)(hw_addr_11 + ((unsigned long)((int)vf_v_idx * 2) + (unsigned long)75776U)));
    }
    #line 1023 
    vf_v_idx = (u16)((int)vf_v_idx + 1);
  }
  #line 1027 
  i = 16;
  #line 1027 
  while (1) {
    #line 1027 
    int tmp_14;
    #line 1027 
    tmp_14 = i;
    #line 1027 
    i --;
    #line 1027 
    ;
    #line 1027 
    if (! (tmp_14 != 0)) 
                         #line 1027 
                         break;
    {
      #line 1029 
      union __anonunion___u_1563 __u_12;
      #line 1028 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_12.__c),8);
      #line 1028 
      u32 *hw_addr_12 = (__u_12.__val);
      #line 1028 
      if ((long)(hw_addr_12 == (u32 *)0U) == 0L) 
                                                 #line 1028 
                                                 writel(0U,(void *)(hw_addr_12 + ((unsigned long)((int)vf_idx * 16 + i) + (unsigned long)98304U)));
    }
  }
  #line 1029 
  i = 128;
  #line 1029 
  while (1) {
    #line 1029 
    int tmp_16;
    #line 1029 
    tmp_16 = i;
    #line 1029 
    i --;
    #line 1029 
    ;
    #line 1029 
    if (! (tmp_16 != 0)) 
                         #line 1029 
                         break;
    {
      #line 1031 
      union __anonunion___u_1565 __u_13;
      #line 1030 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_13.__c),8);
      #line 1030 
      u32 *hw_addr_13 = (__u_13.__val);
      #line 1030 
      if ((long)(hw_addr_13 == (u32 *)0U) == 0L) 
                                                 #line 1030 
                                                 writel(0U,(void *)(hw_addr_13 + ((unsigned long)((int)vf_info->vsi * 128 + i) + (unsigned long)81920U)));
    }
  }
  #line 1031 
  i = 32;
  #line 1031 
  while (1) {
    #line 1031 
    int tmp_18;
    #line 1031 
    tmp_18 = i;
    #line 1031 
    i --;
    #line 1031 
    ;
    #line 1031 
    if (! (tmp_18 != 0)) 
                         #line 1031 
                         break;
    {
      #line 1033 
      union __anonunion___u_1567 __u_14;
      #line 1032 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_14.__c),8);
      #line 1032 
      u32 *hw_addr_14 = (__u_14.__val);
      #line 1032 
      if ((long)(hw_addr_14 == (u32 *)0U) == 0L) 
                                                 #line 1032 
                                                 writel(0U,(void *)(hw_addr_14 + ((unsigned long)((int)vf_info->vsi * 32 + i) + (unsigned long)4096U)));
    }
  }
  #line 1033 
  i = 10;
  #line 1033 
  while (1) {
    #line 1033 
    int tmp_20;
    #line 1033 
    tmp_20 = i;
    #line 1033 
    i --;
    #line 1033 
    ;
    #line 1033 
    if (! (tmp_20 != 0)) 
                         #line 1033 
                         break;
    {
      #line 1035 
      union __anonunion___u_1569 __u_15;
      #line 1034 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_15.__c),8);
      #line 1034 
      u32 *hw_addr_15 = (__u_15.__val);
      #line 1034 
      if ((long)(hw_addr_15 == (u32 *)0U) == 0L) 
                                                 #line 1034 
                                                 writel(0U,(void *)(hw_addr_15 + ((unsigned long)((int)vf_info->vsi * 16 + i) + (unsigned long)2048U)));
    }
  }
  {
    #line 1036 
    union __anonunion___u_1571 __u_16;
    #line 1035 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_16.__c),8);
    #line 1035 
    u32 *hw_addr_16 = (__u_16.__val);
    #line 1035 
    if ((long)(hw_addr_16 == (u32 *)0U) == 0L) 
                                               #line 1035 
                                               writel(0U,(void *)(hw_addr_16 + ((unsigned long)vf_info->vsi + (unsigned long)8448U)));
  }
  #line 1038 
  if ((int)is_valid_ether_addr((u8 *)(& vf_info->mac)) != 0) {
    #line 1039 
    tdbal = (((unsigned int)vf_info->mac[3] << 24) | ((unsigned int)vf_info->mac[4] << 16)) | ((unsigned int)vf_info->mac[5] << 8);
    #line 1042 
    tdbah = ((((unsigned int)vf_info->mac[0] << 16) | ((unsigned int)vf_info->mac[1] << 8)) | (unsigned int)vf_info->mac[2]) | 4278190080U;
  }
  #line 1049 
  i = (int)queues_per_pool;
  #line 1049 
  while (1) {
    #line 1049 
    int tmp_28;
    #line 1049 
    tmp_28 = i;
    #line 1049 
    i --;
    #line 1049 
    ;
    #line 1049 
    if (! (tmp_28 != 0)) 
                         #line 1049 
                         break;
    {
      #line 1051 
      union __anonunion___u_1573 __u_17;
      #line 1050 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_17.__c),8);
      #line 1050 
      u32 *hw_addr_17 = (__u_17.__val);
      #line 1050 
      if ((long)(hw_addr_17 == (u32 *)0U) == 0L) 
                                                 #line 1050 
                                                 writel(tdbal,(void *)(hw_addr_17 + ((unsigned long)(((int)vf_q_idx + i) * 64) + (unsigned long)32768U)));
    }
    {
      #line 1052 
      union __anonunion___u_1575 __u_18;
      #line 1051 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_18.__c),8);
      #line 1051 
      u32 *hw_addr_18 = (__u_18.__val);
      #line 1051 
      if ((long)(hw_addr_18 == (u32 *)0U) == 0L) 
                                                 #line 1051 
                                                 writel(tdbah,(void *)(hw_addr_18 + ((unsigned long)(((int)vf_q_idx + i) * 64) + (unsigned long)32769U)));
    }
    {
      #line 1056 
      union __anonunion___u_1577 __u_19;
      #line 1055 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_19.__c),8);
      #line 1055 
      u32 *hw_addr_19 = (__u_19.__val);
      #line 1055 
      if ((long)(hw_addr_19 == (u32 *)0U) == 0L) 
                                                 #line 1055 
                                                 writel((unsigned int)((int)hw->mac.itr_scale << 9),(void *)(hw_addr_19 + ((unsigned long)(((int)vf_q_idx + i) * 64) + (unsigned long)32770U)));
    }
    {
      #line 1059 
      union __anonunion___u_1579 __u_20;
      #line 1058 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_20.__c),8);
      #line 1058 
      u32 *hw_addr_20 = (__u_20.__val);
      #line 1058 
      if ((long)(hw_addr_20 == (u32 *)0U) == 0L) 
                                                 #line 1058 
                                                 writel((unsigned int)((int)vf_q_idx + i),(void *)(hw_addr_20 + ((unsigned long)((int)qmap_idx + i) + (unsigned long)10240U)));
    }
    {
      #line 1060 
      union __anonunion___u_1581 __u_21;
      #line 1059 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_21.__c),8);
      #line 1059 
      u32 *hw_addr_21 = (__u_21.__val);
      #line 1059 
      if ((long)(hw_addr_21 == (u32 *)0U) == 0L) 
                                                 #line 1059 
                                                 writel((unsigned int)((int)vf_q_idx + i),(void *)(hw_addr_21 + ((unsigned long)((int)qmap_idx + i) + (unsigned long)12288U)));
    }
  }
  #line 1063 
  i = (int)queues_per_pool;
  #line 1063 
  while ((int)qmap_stride > i) {
    {
      #line 1065 
      union __anonunion___u_1583 __u_22;
      #line 1064 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_22.__c),8);
      #line 1064 
      u32 *hw_addr_22 = (__u_22.__val);
      #line 1064 
      if ((long)(hw_addr_22 == (u32 *)0U) == 0L) 
                                                 #line 1064 
                                                 writel((unsigned int)vf_q_idx,(void *)(hw_addr_22 + ((unsigned long)((int)qmap_idx + i) + (unsigned long)10240U)));
    }
    {
      #line 1066 
      union __anonunion___u_1585 __u_23;
      #line 1065 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_23.__c),8);
      #line 1065 
      u32 *hw_addr_23 = (__u_23.__val);
      #line 1065 
      if ((long)(hw_addr_23 == (u32 *)0U) == 0L) 
                                                 #line 1065 
                                                 writel((unsigned int)vf_q_idx,(void *)(hw_addr_23 + ((unsigned long)((int)qmap_idx + i) + (unsigned long)12288U)));
    }
    #line 1063 
    i ++;
  }
  #line 1068 
  return 0;
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_iov_set_lport_pf(struct fm10k_hw *hw, struct fm10k_vf_info *vf_info, u16 lport_idx, u8 flags)
{
  #line 1085 
  u16 glort = (unsigned short)((int)((unsigned short)hw->mac.dglort_map) + (int)lport_idx);
  #line 1088 
  if (! fm10k_glort_valid_pf(hw,(unsigned short)((int)glort))) 
                                                               #line 1089 
                                                               return -2;
  #line 1091 
  vf_info->vf_flags = (unsigned char)((unsigned int)flags | 8U);
  #line 1092 
  vf_info->glort = glort;
  #line 1094 
  return 0;
}

#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static void fm10k_iov_reset_lport_pf(struct fm10k_hw *hw, struct fm10k_vf_info *vf_info)
{
  #line 1108 
  u32 msg[1U];
  #line 1111 
  if ((unsigned int)((int)vf_info->vf_flags >> 4) != 0U) {
    #line 1113 
    fm10k_update_lport_state_pf(hw,(unsigned short)((int)vf_info->glort),(unsigned short)1,(_Bool)0);
    #line 1116 
    fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)3);
    #line 1117 
    (*(vf_info->mbx.ops.enqueue_tx))(hw,& vf_info->mbx,(u32 *)(& msg));
  }
  #line 1121 
  vf_info->vf_flags = (unsigned char)0U;
  #line 1122 
  vf_info->glort = (unsigned short)0U;
  #line 1123 
  return;
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static void fm10k_iov_update_stats_pf(struct fm10k_hw *hw, struct fm10k_hw_stats_q *q, u16 vf_idx)
{
  #line 1137 
  u32 idx;
  #line 1137 
  u32 qpp;
  #line 1140 
  qpp = (unsigned int)fm10k_queues_per_pool(hw);
  #line 1141 
  idx = (unsigned int)fm10k_vf_queue_index(hw,(unsigned short)((int)vf_idx));
  #line 1142 
  fm10k_update_hw_stats_q(hw,q,idx,qpp);
  #line 1143 
  return;
}

#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_iov_msg_msix_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1158 
  struct fm10k_vf_info *vf_info = (struct fm10k_vf_info *)mbx;
  #line 1159 
  u8 vf_idx = vf_info->vf_idx;
  #line 1161 
  return (*(hw->iov.ops.assign_int_moderator))(hw,(unsigned short)((int)vf_idx));
}

#line 1172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_iov_select_vid(struct fm10k_vf_info *vf_info, u16 vid)
{
  #line 1174 
  if ((unsigned int)vid == 0U) {
    #line 1175 
    int tmp;
    #line 1175 
    if ((unsigned int)vf_info->pf_vid != 0U) 
                                             #line 1175 
                                             tmp = (int)vf_info->pf_vid; else 
                                                                    #line 1175 
                                                                    tmp = (int)vf_info->sw_vid;
    #line 1175 
    return tmp;
  }
  else 
    #line 1176 
    if ((unsigned int)vf_info->pf_vid != 0U && (int)vf_info->pf_vid != (int)vid) 
      #line 1177 
      return -2; else 
                      #line 1179 
                      return (int)vid;
}

#line 1192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_iov_msg_mac_vlan_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1196 
  u8 mac[6U];
  #line 1197 
  u32 *result;
  #line 1199 
  bool set;
  #line 1200 
  u16 vlan;
  #line 1201 
  u32 vid;
  #line 1195 
  struct fm10k_vf_info *vf_info = (struct fm10k_vf_info *)mbx;
  #line 1198 
  int err = 0;
  #line 1204 
  if ((unsigned int)((int)vf_info->vf_flags >> 4) == 0U) 
                                                         #line 1205 
                                                         err = -2;
  #line 1207 
  if (err == 0 && *results != (u32 *)0U) {
    #line 1208 
    result = *results;
    #line 1211 
    err = fm10k_tlv_attr_get_value(result,(void *)(& vid),4U);
    #line 1212 
    if (err != 0) 
                  #line 1213 
                  return err;
    #line 1215 
    set = (_Bool)(((unsigned long)vid & 32768UL) == 0UL);
    #line 1216 
    vid &= 4294934527U;
    #line 1228 
    if (vid >> 16 != 0U) {
      #line 1232 
      if ((unsigned int)vf_info->pf_vid != 0U) 
                                               #line 1233 
                                               return -2;
    }
    else {
      #line 1235 
      err = fm10k_iov_select_vid(vf_info,(unsigned short)((int)((unsigned short)vid)));
      #line 1236 
      if (err < 0) 
                   #line 1237 
                   return err;
      #line 1239 
      vid = (unsigned int)err;
    }
    #line 1243 
    err = (*(hw->mac.ops.update_vlan))(hw,vid,(unsigned char)((int)vf_info->vsi),(_Bool)((bool)((int)set) != 0));
  }
  #line 1246 
  if (err == 0 && *(results + 2U) != (u32 *)0U) {
    #line 1247 
    result = *(results + 2U);
    #line 1250 
    err = fm10k_tlv_attr_get_mac_vlan(result,(u8 *)(& mac),& vlan);
    #line 1251 
    if (err != 0) 
                  #line 1252 
                  return err;
    #line 1255 
    if ((int)is_valid_ether_addr((u8 *)(& vf_info->mac)) != 0) {
      #line 1256 
      if (! ether_addr_equal((u8 *)(& mac),(u8 *)(& vf_info->mac))) 
                                                                    #line 1257 
                                                                    return -2;
    }
    #line 1259 
    set = (_Bool)(((unsigned long)vlan & 32768UL) == 0UL);
    #line 1260 
    vlan = (unsigned short)((unsigned int)vlan & 32767U);
    #line 1262 
    err = fm10k_iov_select_vid(vf_info,(unsigned short)((int)vlan));
    #line 1263 
    if (err < 0) 
                 #line 1264 
                 return err;
    #line 1266 
    vlan = (unsigned short)err;
    #line 1269 
    err = (*(hw->mac.ops.update_uc_addr))(hw,(unsigned short)((int)vf_info->glort),(u8 *)(& mac),(unsigned short)((int)vlan),(_Bool)((bool)((int)set) != 0),(unsigned char)0);
  }
  #line 1273 
  if (err == 0 && *(results + 4U) != (u32 *)0U) {
    #line 1274 
    result = *(results + 4U);
    #line 1277 
    err = fm10k_tlv_attr_get_mac_vlan(result,(u8 *)(& mac),& vlan);
    #line 1278 
    if (err != 0) 
                  #line 1279 
                  return err;
    #line 1282 
    if (((int)vf_info->vf_flags & 112) == 0) 
                                             #line 1283 
                                             return -2;
    #line 1285 
    set = (_Bool)(((unsigned long)vlan & 32768UL) == 0UL);
    #line 1286 
    vlan = (unsigned short)((unsigned int)vlan & 32767U);
    #line 1288 
    err = fm10k_iov_select_vid(vf_info,(unsigned short)((int)vlan));
    #line 1289 
    if (err < 0) 
                 #line 1290 
                 return err;
    #line 1292 
    vlan = (unsigned short)err;
    #line 1295 
    err = (*(hw->mac.ops.update_mc_addr))(hw,(unsigned short)((int)vf_info->glort),(u8 *)(& mac),(unsigned short)((int)vlan),(_Bool)((bool)((int)set) != 0));
  }
  #line 1299 
  return err;
}

#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static u8 fm10k_iov_supported_xcast_mode_pf(struct fm10k_vf_info *vf_info, u8 mode)
{
  #line 1313 
  u8 vf_flags = vf_info->vf_flags;
  #line 1316 
  switch ((int)mode) {
    #line 1317 
    case 2: 
            #line 1317 
    ;
    #line 1318 
    if (((int)vf_flags & 4) != 0) 
                                  #line 1319 
                                  return (unsigned char)2U;
    #line 1321 
    case 0: 
            #line 1321 
    ;
    #line 1322 
    if (((int)vf_flags & 1) != 0) 
                                  #line 1323 
                                  return (unsigned char)0U;
    #line 1325 
    case 1: 
            #line 1325 
    ;
    #line 1326 
    if (((int)vf_flags & 2) != 0) 
                                  #line 1327 
                                  return (unsigned char)1U;
    #line 1329 
    case 3: 
            #line 1329 
    ;
    #line 1330 
    if (((int)vf_flags & 8) != 0) 
                                  #line 1331 
                                  return (unsigned char)3U;
    #line 1333 
    default: 
             #line 1333 
    ;
    #line 1334 
    break;
  }
  #line 1338 
  return (unsigned char)4U;
}

#line 1351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_iov_msg_lport_state_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1356 
  u32 msg[2U];
  #line 1354 
  struct fm10k_vf_info *vf_info = (struct fm10k_vf_info *)mbx;
  #line 1355 
  s32 err = 0;
  #line 1357 
  u8 mode = (unsigned char)0U;
  #line 1360 
  if (((int)vf_info->vf_flags & 8) == 0) 
                                         #line 1361 
                                         return -2;
  #line 1363 
  if (*(results + 1U) != (u32 *)0U) {
    #line 1364 
    u32 *result = *(results + 1U);
    #line 1367 
    err = fm10k_tlv_attr_get_value(result,(void *)(& mode),1U);
    #line 1368 
    if (err != 0) 
                  #line 1369 
                  return -2;
    #line 1372 
    mode = fm10k_iov_supported_xcast_mode_pf(vf_info,(unsigned char)((int)mode));
    #line 1375 
    if ((((unsigned long)((int)vf_info->vf_flags >> 4) >> (int)mode) & 1UL) == 0UL) 
      #line 1376 
      fm10k_update_xcast_mode_pf(hw,(unsigned short)((int)vf_info->glort),(unsigned char)((int)mode));
    #line 1379 
    mode = (unsigned char)(16 << (int)mode);
  }
  else 
    #line 1380 
    if (*results == (u32 *)0U) {
      #line 1382 
      if ((unsigned int)((int)vf_info->vf_flags >> 4) != 0U) 
                                                             #line 1383 
                                                             err = fm10k_update_lport_state_pf(hw,(unsigned short)((int)vf_info->glort),(unsigned short)1,(_Bool)0);
      #line 1391 
      if (err == 0) 
                    #line 1392 
                    vf_info->vf_flags = (unsigned char)((unsigned int)vf_info->vf_flags & 15U);
      #line 1395 
      (*(hw->iov.ops.configure_tc))(hw,(unsigned short)((int)vf_info->vf_idx),vf_info->rate);
      #line 1398 
      mode = (unsigned char)128U;
      #line 1401 
      fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)3);
      #line 1402 
      fm10k_tlv_attr_put_bool((u32 *)(& msg),(unsigned short)2);
      #line 1403 
      (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
    }
  #line 1407 
  if (err == 0 && ((unsigned int)((int)vf_info->vf_flags >> 4) == 0U) ^ ((unsigned int)mode == 0U)) 
    #line 1408 
    err = fm10k_update_lport_state_pf(hw,(unsigned short)((int)vf_info->glort),(unsigned short)1,(_Bool)((unsigned int)mode != 0U));
  #line 1412 
  mode = (unsigned char)(((int)vf_info->vf_flags & 15) | (int)mode);
  #line 1413 
  if (err == 0) 
                #line 1414 
                vf_info->vf_flags = mode;
  #line 1416 
  return err;
}

#line 1427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static void fm10k_update_hw_stats_pf(struct fm10k_hw *hw, struct fm10k_hw_stats *stats)
{
  #line 1430 
  u32 timeout;
  #line 1430 
  u32 ur;
  #line 1430 
  u32 ca;
  #line 1430 
  u32 um;
  #line 1430 
  u32 xec;
  #line 1430 
  u32 vlan_drop;
  #line 1430 
  u32 loopback_drop;
  #line 1430 
  u32 nodesc_drop;
  #line 1431 
  u32 id;
  #line 1431 
  u32 id_prev;
  #line 1434 
  id = fm10k_read_reg(hw,32775);
  #line 1437 
  while (1) {
    #line 1438 
    timeout = fm10k_read_hw_stats_32b(hw,14336U,& stats->timeout);
    #line 1440 
    ur = fm10k_read_hw_stats_32b(hw,14337U,& stats->ur);
    #line 1441 
    ca = fm10k_read_hw_stats_32b(hw,14338U,& stats->ca);
    #line 1442 
    um = fm10k_read_hw_stats_32b(hw,14339U,& stats->um);
    #line 1443 
    xec = fm10k_read_hw_stats_32b(hw,14340U,& stats->xec);
    #line 1444 
    vlan_drop = fm10k_read_hw_stats_32b(hw,14341U,& stats->vlan_drop);
    #line 1446 
    loopback_drop = fm10k_read_hw_stats_32b(hw,14342U,& stats->loopback_drop);
    #line 1450 
    nodesc_drop = fm10k_read_hw_stats_32b(hw,14343U,& stats->nodesc_drop);
    #line 1455 
    id_prev = id;
    #line 1456 
    id = fm10k_read_reg(hw,32775);
    #line 1457 
    if (! (((id ^ id_prev) & 127U) != 0U)) 
                                           #line 1437 
                                           break;
  }
  #line 1460 
  id &= 127U;
  #line 1461 
  id |= 2147483648U;
  #line 1464 
  if (stats->timeout.base_h == id) {
    #line 1465 
    stats->timeout.count += (unsigned long long)timeout;
    #line 1466 
    stats->ur.count += (unsigned long long)ur;
    #line 1467 
    stats->ca.count += (unsigned long long)ca;
    #line 1468 
    stats->um.count += (unsigned long long)um;
    #line 1469 
    stats->xec.count += (unsigned long long)xec;
    #line 1470 
    stats->vlan_drop.count += (unsigned long long)vlan_drop;
    #line 1471 
    stats->loopback_drop.count += (unsigned long long)loopback_drop;
    #line 1472 
    stats->nodesc_drop.count += (unsigned long long)nodesc_drop;
  }
  #line 1476 
  stats->timeout.base_l += timeout;
  #line 1477 
  stats->ur.base_l += ur;
  #line 1478 
  stats->ca.base_l += ca;
  #line 1479 
  stats->um.base_l += um;
  #line 1480 
  stats->xec.base_l += xec;
  #line 1481 
  stats->vlan_drop.base_l += vlan_drop;
  #line 1482 
  stats->loopback_drop.base_l += loopback_drop;
  #line 1483 
  stats->nodesc_drop.base_l += nodesc_drop;
  #line 1484 
  stats->timeout.base_h = id;
  #line 1487 
  fm10k_update_hw_stats_q(hw,(struct fm10k_hw_stats_q *)(& stats->q),0U,(unsigned int)hw->mac.max_queues);
  #line 1488 
  return;
}

#line 1498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static void fm10k_rebind_hw_stats_pf(struct fm10k_hw *hw, struct fm10k_hw_stats *stats)
{
  #line 1502 
  stats->timeout.base_h = 0U;
  #line 1503 
  stats->ur.base_h = 0U;
  #line 1504 
  stats->ca.base_h = 0U;
  #line 1505 
  stats->um.base_h = 0U;
  #line 1506 
  stats->xec.base_h = 0U;
  #line 1507 
  stats->vlan_drop.base_h = 0U;
  #line 1508 
  stats->loopback_drop.base_h = 0U;
  #line 1509 
  stats->nodesc_drop.base_h = 0U;
  #line 1512 
  fm10k_unbind_hw_stats_q((struct fm10k_hw_stats_q *)(& stats->q),0U,(unsigned int)hw->mac.max_queues);
  #line 1515 
  fm10k_update_hw_stats_pf(hw,stats);
  #line 1516 
  return;
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static void fm10k_set_dma_mask_pf(struct fm10k_hw *hw, u64 dma_mask)
{
  #line 1529 
  u32 phyaddr = (unsigned int)(dma_mask >> 32);
  {
    #line 1532 
    union __anonunion___u_1587 __u;
    #line 1531 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1531 
    u32 *hw_addr = (__u.__val);
    #line 1531 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1531 
                                            writel(phyaddr,(void *)(hw_addr + 14364U));
  }
  #line 1533 
  return;
}

#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_get_fault_pf(struct fm10k_hw *hw, int type, struct fm10k_fault *fault)
{
  #line 1548 
  u32 func;
  #line 1551 
  switch (type) {
    #line 1552 
    case 8: 
            #line 1552 
    ;
    #line 1553 
    case 16: 
             #line 1553 
    ;
    #line 1554 
    case 28: 
             #line 1554 
    ;
    #line 1555 
    break;
    #line 1556 
    default: 
             #line 1556 
    ;
    #line 1557 
    return -2;
  }
  #line 1561 
  func = fm10k_read_reg(hw,type + 3);
  #line 1562 
  if ((func & 32768U) == 0U) 
                             #line 1563 
                             return -2;
  #line 1566 
  fault->address = (unsigned long long)fm10k_read_reg(hw,type + 1);
  #line 1567 
  fault->address <<= 32;
  #line 1568 
  fault->address |= (unsigned long long)fm10k_read_reg(hw,type);
  #line 1569 
  fault->specinfo = fm10k_read_reg(hw,type + 2);
  {
    #line 1573 
    union __anonunion___u_1589 __u;
    #line 1572 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1572 
    u32 *hw_addr = (__u.__val);
    #line 1572 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1572 
                                            writel(32768U,(void *)(hw_addr + ((unsigned long)type + (unsigned long)3U)));
  }
  #line 1575 
  if ((func & 16384U) != 0U) 
                             #line 1576 
                             fault->func = (unsigned char)0U; else 
                                                                   #line 1578 
                                                                   fault->func = (unsigned char)(((unsigned int)((unsigned char)(func >> 8)) & 63U) + 1U);
  #line 1582 
  fault->type = (unsigned char)func;
  #line 1584 
  return 0;
}

#line 1592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_request_lport_map_pf(struct fm10k_hw *hw)
{
  #line 1595 
  u32 msg[1U];
  #line 1594 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 1598 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)256);
  #line 1601 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 1613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_get_host_state_pf(struct fm10k_hw *hw, bool *switch_ready)
{
  #line 1615 
  u32 dma_ctrl2;
  #line 1618 
  dma_ctrl2 = fm10k_read_reg(hw,8388);
  #line 1619 
  if ((dma_ctrl2 & 8192U) == 0U) 
                                 #line 1620 
                                 return 0;
  #line 1623 
  return fm10k_get_host_state_generic(hw,switch_ready);
}

#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_tlv_attr fm10k_lport_map_msg_attr[3U] = {{.type = FM10K_TLV_LE_STRUCT, .len = (unsigned short)28U}, {.id = 1U, .type = FM10K_TLV_UNSIGNED, .len = (unsigned short)4U}, {.id = 4294967295U}};
#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_msg_lport_map_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1646 
  u16 glort;
  #line 1646 
  u16 mask;
  #line 1647 
  u32 dglort_map;
  #line 1648 
  s32 err;
  #line 1650 
  err = fm10k_tlv_attr_get_value(*(results + 1U),(void *)(& dglort_map),4U);
  #line 1652 
  if (err != 0) 
                #line 1653 
                return err;
  #line 1656 
  glort = (unsigned short)dglort_map;
  #line 1657 
  mask = (unsigned short)(dglort_map >> 16);
  #line 1660 
  if ((unsigned int)mask == 0U || ((int)glort & ~ ((int)mask)) != 0) 
    #line 1661 
    return -2;
  #line 1664 
  if ((((- ((int)mask) & (int)mask) + (int)mask) & 65535) != 0) 
                                                                #line 1665 
                                                                return -2;
  #line 1668 
  hw->mac.dglort_map = dglort_map;
  #line 1670 
  return 0;
}

#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_tlv_attr fm10k_update_pvid_msg_attr[2U] = {{.id = 13U, .type = FM10K_TLV_UNSIGNED, .len = (unsigned short)4U}, {.id = 4294967295U}};
#line 1686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_msg_update_pvid_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1689 
  u16 glort;
  #line 1689 
  u16 pvid;
  #line 1690 
  u32 pvid_update;
  #line 1691 
  s32 err;
  #line 1693 
  err = fm10k_tlv_attr_get_value(*(results + 13U),(void *)(& pvid_update),4U);
  #line 1695 
  if (err != 0) 
                #line 1696 
                return err;
  #line 1699 
  glort = (unsigned short)pvid_update;
  #line 1700 
  pvid = (unsigned short)(pvid_update >> 16);
  #line 1703 
  if (! fm10k_glort_valid_pf(hw,(unsigned short)((int)glort))) 
                                                               #line 1704 
                                                               return -2;
  #line 1707 
  if ((unsigned int)pvid > 4095U) 
                                  #line 1708 
                                  return -2;
  #line 1711 
  hw->mac.default_vid = pvid;
  #line 1713 
  return 0;
}

#line 1724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static void fm10k_record_global_table_data(struct fm10k_global_table_data *from, struct fm10k_swapi_table_info *to)
{
  #line 1728 
  to->used = from->used;
  #line 1729 
  to->avail = from->avail;
  #line 1730 
  return;
}

#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_tlv_attr fm10k_err_msg_attr[2U] = {{.type = FM10K_TLV_LE_STRUCT, .len = (unsigned short)28U}, {.id = 4294967295U}};
#line 1747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
s32 fm10k_msg_err_pf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1750 
  struct fm10k_swapi_error err_msg;
  #line 1751 
  s32 err;
  #line 1754 
  err = fm10k_tlv_attr_get_le_struct(*results,(void *)(& err_msg),28U);
  #line 1756 
  if (err != 0) 
                #line 1757 
                return err;
  #line 1760 
  fm10k_record_global_table_data(& err_msg.mac,& hw->swapi.mac);
  #line 1761 
  fm10k_record_global_table_data(& err_msg.nexthop,& hw->swapi.nexthop);
  #line 1762 
  fm10k_record_global_table_data(& err_msg.ffu,& hw->swapi.ffu);
  #line 1765 
  hw->swapi.status = err_msg.status;
  #line 1767 
  return 0;
}

#line 1770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static struct fm10k_msg_data fm10k_msg_data_pf[7U] = {{.id = 1U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 2U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 256U, .attr = (struct fm10k_tlv_attr *)(& fm10k_lport_map_msg_attr), .func = & fm10k_msg_lport_map_pf}, {.id = 512U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 513U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 1024U, .attr = (struct fm10k_tlv_attr *)(& fm10k_update_pvid_msg_attr), .func = & fm10k_msg_update_pvid_pf}, {.id = 4294967295U, .func = & fm10k_tlv_msg_error}};
#line 1780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static struct fm10k_mac_ops mac_ops_pf = {.reset_hw = & fm10k_reset_hw_pf, .init_hw = & fm10k_init_hw_pf, .start_hw = & fm10k_start_hw_generic, .stop_hw = & fm10k_stop_hw_generic, .get_bus_info = & fm10k_get_bus_info_generic, .get_host_state = & fm10k_get_host_state_pf, .request_lport_map = & fm10k_request_lport_map_pf, .update_vlan = & fm10k_update_vlan_pf, .read_mac_addr = & fm10k_read_mac_addr_pf, .update_uc_addr = & fm10k_update_uc_addr_pf, .update_mc_addr = & fm10k_update_mc_addr_pf, .update_xcast_mode = & fm10k_update_xcast_mode_pf, .update_int_moderator = & fm10k_update_int_moderator_pf, .update_lport_state = & fm10k_update_lport_state_pf, .update_hw_stats = & fm10k_update_hw_stats_pf, .rebind_hw_stats = & fm10k_rebind_hw_stats_pf, .configure_dglort_map = & fm10k_configure_dglort_map_pf, .set_dma_mask = & fm10k_set_dma_mask_pf, .get_fault = & fm10k_get_fault_pf};
#line 1802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static struct fm10k_iov_ops iov_ops_pf = {.assign_resources = & fm10k_iov_assign_resources_pf, .configure_tc = & fm10k_iov_configure_tc_pf, .assign_int_moderator = & fm10k_iov_assign_int_moderator_pf, .assign_default_mac_vlan = & fm10k_iov_assign_default_mac_vlan_pf, .reset_resources = & fm10k_iov_reset_resources_pf, .set_lport = & fm10k_iov_set_lport_pf, .reset_lport = & fm10k_iov_reset_lport_pf, .update_stats = & fm10k_iov_update_stats_pf};
#line 1813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
static s32 fm10k_get_invariants_pf(struct fm10k_hw *hw)
{
  #line 1815 
  fm10k_get_invariants_generic(hw);
  #line 1817 
  return fm10k_sm_mbx_init(hw,& hw->mbx,
                        (struct fm10k_msg_data *)(& fm10k_msg_data_pf));
}

#line 1820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pf.c"
struct fm10k_info fm10k_pf_info = {.mac = fm10k_mac_pf, .get_invariants = & fm10k_get_invariants_pf, .mac_ops = & mac_ops_pf, .iov_ops = & iov_ops_pf};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.h"
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_msg_parse(struct fm10k_hw *hw, u32 *msg, struct fm10k_mbx_info *mbx, struct fm10k_msg_data *data);
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.h"
#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
void fm10k_tlv_msg_test_create(u32 *msg, u32 attr_flags);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_msg_init(u32 *msg, u16 msg_id)
{
  #line 16 
  if (msg == (u32 *)0U) 
                        #line 17 
                        return -2;
  #line 19 
  *msg = (unsigned int)((int)msg_id | 65536);
  #line 21 
  return 0;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static s32 fm10k_tlv_attr_put_null_string(u32 *msg, u16 attr_id, unsigned char *string)
{
  #line 38 
  u32 *attr;
  #line 37 
  u32 attr_data = 0U;
  #line 37 
  u32 len = 0U;
  #line 41 
  if (string == (unsigned char *)0U || msg == (u32 *)0U) 
                                                         #line 42 
                                                         return -2;
  #line 44 
  attr = msg + ((unsigned long)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (unsigned long)1U);
  #line 47 
  while (1) {
    #line 59 
    unsigned char *tmp;
    #line 49 
    if (len != 0U && (len & 3U) == 0U) {
      #line 50 
      *(attr + (unsigned long)(len / 4U)) = attr_data;
      #line 51 
      attr_data = 0U;
    }
    #line 55 
    attr_data = ((unsigned int)*string << (len & 3U) * 8U) | attr_data;
    #line 56 
    len ++;
    #line 59 
    tmp = string;
    #line 59 
    string ++;
    #line 59 
    ;
    #line 59 
    if (! ((unsigned int)*tmp != 0U)) 
                                      #line 47 
                                      break;
  }
  #line 62 
  *(attr + (unsigned long)((len + 3U) / 4U)) = attr_data;
  #line 65 
  len <<= 20;
  #line 66 
  *attr = (unsigned int)attr_id | len;
  #line 69 
  len += 4194304U;
  #line 70 
  *msg += (len + 3145728U) & 4291821567U;
  #line 72 
  return 0;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static s32 fm10k_tlv_attr_get_null_string(u32 *attr, unsigned char *string)
{
  #line 86 
  u32 len;
  #line 89 
  if (string == (unsigned char *)0U || attr == (u32 *)0U) 
                                                          #line 90 
                                                          return -2;
  #line 92 
  len = *attr >> 20;
  #line 93 
  attr ++;
  #line 95 
  while (1) {
    #line 95 
    u32 tmp;
    #line 95 
    tmp = len;
    #line 95 
    len --;
    #line 95 
    ;
    #line 95 
    if (! (tmp != 0U)) 
                       #line 95 
                       break;
    #line 96 
    *(string + (unsigned long)len) = (unsigned char)(*(attr + (unsigned long)(len / 4U)) >> (len & 3U) * 8U);
  }
  #line 98 
  return 0;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_attr_put_mac_vlan(u32 *msg, u16 attr_id, u8 *mac_addr, u16 vlan)
{
  #line 116 
  u32 *attr;
  #line 115 
  u32 len = 6291456U;
  #line 119 
  if (msg == (u32 *)0U || mac_addr == (u8 *)0U) 
                                                #line 120 
                                                return -2;
  #line 122 
  attr = msg + ((unsigned long)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (unsigned long)1U);
  #line 125 
  *attr = (unsigned int)attr_id | len;
  #line 128 
  *(attr + 1U) = *((__le32 *)mac_addr);
  #line 129 
  *(attr + 2U) = (unsigned int)*((__le16 *)(mac_addr + 4U));
  #line 130 
  *(attr + 2U) |= (unsigned int)vlan << 16;
  #line 133 
  len += 4194304U;
  #line 134 
  *msg += (len + 3145728U) & 4291821567U;
  #line 136 
  return 0;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_attr_get_mac_vlan(u32 *attr, u8 *mac_addr, u16 *vlan)
{
  #line 152 
  if (mac_addr == (u8 *)0U || attr == (u32 *)0U) 
                                                 #line 153 
                                                 return -2;
  #line 155 
  *((__le32 *)mac_addr) = *(attr + 1U);
  #line 156 
  *((__le16 *)(mac_addr + 4U)) = (unsigned short)*(attr + 2U);
  #line 157 
  *vlan = (unsigned short)(*(attr + 2U) >> 16);
  #line 159 
  return 0;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_attr_put_bool(u32 *msg, u16 attr_id)
{
  #line 175 
  if (msg == (u32 *)0U) 
                        #line 176 
                        return -2;
  #line 179 
  *(msg + ((unsigned long)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (unsigned long)1U)) = (unsigned int)attr_id;
  #line 182 
  *msg += 4194304U;
  #line 184 
  return 0;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_attr_put_value(u32 *msg, u16 attr_id, s64 value, u32 len)
{
  #line 200 
  u32 *attr;
  #line 203 
  if (((msg == (u32 *)0U || len == 0U) || len > 8U) || ((len + 4294967295U) & len) != 0U) 
    #line 204 
    return -2;
  #line 206 
  attr = msg + ((unsigned long)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (unsigned long)1U);
  #line 208 
  if (len <= 3U) 
                 #line 209 
                 *(attr + 1U) = (unsigned int)value & ~ ((unsigned int)(18446744073709551615UL << len * 8U));
  else {
    #line 211 
    *(attr + 1U) = (unsigned int)value;
    #line 212 
    if (len > 4U) 
                  #line 213 
                  *(attr + 2U) = (unsigned int)(value >> 32);
  }
  #line 217 
  len <<= 20;
  #line 218 
  *attr = (unsigned int)attr_id | len;
  #line 221 
  len += 4194304U;
  #line 222 
  *msg += (len + 3145728U) & 4291821567U;
  #line 224 
  return 0;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_attr_get_value(u32 *attr, void *value, u32 len)
{
  #line 241 
  if (attr == (u32 *)0U || value == (void *)0) 
                                               #line 242 
                                               return -2;
  #line 244 
  if (*attr >> 20 != len) 
                          #line 245 
                          return -2;
  #line 247 
  if (len == 8U) 
                 #line 248 
                 *((u64 *)value) = ((unsigned long long)*(attr + 2U) << 32) | (unsigned long long)*(attr + 1U);
  else 
    #line 249 
    if (len == 4U) 
                   #line 250 
                   *((u32 *)value) = *(attr + 1U);
    else 
      #line 251 
      if (len == 2U) 
                     #line 252 
                     *((u16 *)value) = (unsigned short)*(attr + 1U); else 
                                                                    #line 254 
                                                                    *((u8 *)value) = (unsigned char)*(attr + 1U);
  #line 256 
  return 0;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_attr_put_le_struct(u32 *msg, u16 attr_id, void *le_struct, u32 len)
{
  #line 274 
  u32 *attr;
  #line 275 
  u32 i;
  #line 273 
  __le32 *le32_ptr = (__le32 *)le_struct;
  #line 278 
  if ((msg == (u32 *)0U || len == 0U) || (len & 3U) != 0U) 
                                                           #line 279 
                                                           return -2;
  #line 281 
  attr = msg + ((unsigned long)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (unsigned long)1U);
  #line 284 
  i = 0U;
  #line 284 
  while (len / 4U > i) {
    #line 285 
    *(attr + (unsigned long)(i + 1U)) = *(le32_ptr + (unsigned long)i);
    #line 284 
    i ++;
  }
  #line 288 
  len <<= 20;
  #line 289 
  *attr = (unsigned int)attr_id | len;
  #line 292 
  len += 4194304U;
  #line 293 
  *msg += (len + 3145728U) & 4291821567U;
  #line 295 
  return 0;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_attr_get_le_struct(u32 *attr, void *le_struct, u32 len)
{
  #line 312 
  u32 i;
  #line 311 
  __le32 *le32_ptr = (__le32 *)le_struct;
  #line 315 
  if (le_struct == (void *)0 || attr == (u32 *)0U) 
                                                   #line 316 
                                                   return -2;
  #line 318 
  if (*attr >> 20 != len) 
                          #line 319 
                          return -2;
  #line 321 
  attr ++;
  #line 323 
  i = 0U;
  #line 323 
  while (len != 0U) {
    #line 324 
    *(le32_ptr + (unsigned long)i) = *(attr + (unsigned long)i);
    #line 323 
    i ++;
    #line 323 
    len += 4294967292U;
  }
  #line 326 
  return 0;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static u32 *fm10k_tlv_attr_nest_start(u32 *msg, u16 attr_id)
{
  #line 342 
  u32 *attr;
  #line 345 
  if (msg == (u32 *)0U) 
                        #line 346 
                        return (u32 *)0U;
  #line 348 
  attr = msg + ((unsigned long)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (unsigned long)1U);
  #line 350 
  *attr = (unsigned int)attr_id;
  #line 353 
  return attr;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static s32 fm10k_tlv_attr_nest_stop(u32 *msg)
{
  #line 367 
  u32 *attr;
  #line 368 
  u32 len;
  #line 371 
  if (msg == (u32 *)0U) 
                        #line 372 
                        return -2;
  #line 375 
  attr = msg + ((unsigned long)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (unsigned long)1U);
  #line 376 
  len = *attr & 4293918720U;
  #line 379 
  if (len != 0U) {
    #line 380 
    len += 4194304U;
    #line 381 
    *msg += len;
  }
  #line 384 
  return 0;
}

#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static s32 fm10k_tlv_attr_validate(u32 *attr, struct fm10k_tlv_attr *tlv_attr)
{
  #line 401 
  u32 attr_id = *attr & 65535U;
  #line 402 
  u16 len = (unsigned short)(*attr >> 20);
  #line 405 
  if ((*attr & 65536U) != 0U) 
                              #line 406 
                              return -2;
  #line 409 
  while (tlv_attr->id < attr_id) 
                                 #line 410 
                                 tlv_attr ++;
  #line 413 
  if (tlv_attr->id != attr_id) 
                               #line 414 
                               return 2147483647;
  #line 417 
  attr ++;
  #line 419 
  switch ((unsigned int)tlv_attr->type) {
    #line 420 
    case (unsigned int)0: 
                          #line 420 
    ;
    #line 421 
    if ((unsigned int)len == 0U || (*(attr + (unsigned long)(((int)len + -1) / 4)) & (unsigned int)(255 << (((int)len + -1) % 4) * 8)) != 0U) 
      #line 423 
      return -2;
    #line 424 
    if ((int)tlv_attr->len < (int)len) 
                                       #line 425 
                                       return -2;
    #line 426 
    break;
    #line 427 
    case (unsigned int)1: 
                          #line 427 
    ;
    #line 428 
    if ((unsigned int)len != 6U) 
                                 #line 429 
                                 return -2;
    #line 430 
    break;
    #line 431 
    case (unsigned int)2: 
                          #line 431 
    ;
    #line 432 
    if ((unsigned int)len != 0U) 
                                 #line 433 
                                 return -2;
    #line 434 
    break;
    #line 435 
    case (unsigned int)3: 
                          #line 435 
    ;
    #line 436 
    case (unsigned int)4: 
                          #line 436 
    ;
    #line 437 
    if ((int)tlv_attr->len != (int)len) 
                                        #line 438 
                                        return -2;
    #line 439 
    break;
    #line 440 
    case (unsigned int)5: 
                          #line 440 
    ;
    #line 442 
    if (((unsigned int)len & 3U) != 0U || (int)tlv_attr->len != (int)len) 
      #line 443 
      return -2;
    #line 444 
    break;
    #line 445 
    case (unsigned int)6: 
                          #line 445 
    ;
    #line 447 
    if (((unsigned int)len & 3U) != 0U) 
                                        #line 448 
                                        return -2;
    #line 449 
    break;
    #line 450 
    default: 
             #line 450 
    ;
    #line 452 
    return -2;
  }
  #line 455 
  return 0;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static s32 fm10k_tlv_attr_parse(u32 *attr, u32 **results, struct fm10k_tlv_attr *tlv_attr)
{
  #line 474 
  u32 i;
  #line 474 
  u32 attr_id;
  #line 475 
  s32 err;
  #line 476 
  u16 len;
  #line 474 
  u32 offset = 0U;
  #line 479 
  if (attr == (u32 *)0U || results == (u32 **)0U) 
                                                  #line 480 
                                                  return -2;
  #line 483 
  i = 0U;
  #line 483 
  while (i <= 31U) {
    #line 484 
    *(results + (unsigned long)i) = (u32 *)0U;
    #line 483 
    i ++;
  }
  #line 487 
  len = (unsigned short)(*attr >> 20);
  #line 490 
  if ((unsigned int)len == 0U) 
                               #line 491 
                               return 0;
  #line 494 
  if (tlv_attr == (struct fm10k_tlv_attr *)0) {
    #line 495 
    *results = attr;
    #line 496 
    return 0;
  }
  #line 500 
  attr ++;
  #line 503 
  while ((unsigned int)len > offset) {
    #line 504 
    attr_id = *attr & 65535U;
    #line 506 
    if (attr_id > 31U) 
                       #line 507 
                       return 2147483647;
    #line 509 
    err = fm10k_tlv_attr_validate(attr,tlv_attr);
    #line 510 
    if (! (err == 2147483647)) 
      #line 512 
      if (err != 0) 
                    #line 513 
                    return err; else 
                                     #line 515 
                                     *(results + (unsigned long)attr_id) = attr;
    #line 518 
    offset = (unsigned int)(((int)((unsigned short)(((unsigned long)*attr + 3145728UL) >> 22)) + 1) * 4) + offset;
    #line 521 
    attr += (unsigned long)((unsigned short)(((unsigned long)*attr + 3145728UL) >> 22)) + (unsigned long)1U;
  }
  #line 525 
  if ((unsigned int)len != offset) 
                                   #line 526 
                                   return -2;
  #line 528 
  return 0;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_msg_parse(struct fm10k_hw *hw, u32 *msg, struct fm10k_mbx_info *mbx, struct fm10k_msg_data *data)
{
  #line 548 
  u32 *results[32U];
  #line 549 
  u32 msg_id;
  #line 550 
  s32 err;
  #line 553 
  if (msg == (u32 *)0U || data == (struct fm10k_msg_data *)0) 
                                                              #line 554 
                                                              return -2;
  #line 557 
  if ((*msg & 65536U) == 0U) 
                             #line 558 
                             return -2;
  #line 561 
  msg_id = *msg & 65535U;
  #line 563 
  while (data->id < msg_id) 
                            #line 564 
                            data ++;
  #line 567 
  if (data->id != msg_id) 
    #line 568 
    while (data->id != 4294967295U) 
                                    #line 569 
                                    data ++;
  #line 573 
  err = fm10k_tlv_attr_parse(msg,(u32 **)(& results),data->attr);
  #line 574 
  if (err < 0) 
               #line 575 
               return err;
  #line 577 
  return (*(data->func))(hw,(u32 **)(& results),mbx);
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_msg_error(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 594 
  return 2147483647;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static unsigned char test_str[6U] = {(unsigned char)'f', (unsigned char)'m', (unsigned char)'1', (unsigned char)'0', (unsigned char)'k'};
#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static unsigned char test_mac[6U] = {(unsigned char)18U, (unsigned char)52U, (unsigned char)86U, (unsigned char)120U, (unsigned char)154U, (unsigned char)188U};
#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static __le32 test_le[2U] = {305419896U, 2596069104U};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
struct fm10k_tlv_attr fm10k_tlv_msg_test_attr[14U] = {{.id = 1U, .len = (unsigned short)80U}, {.id = 2U, .type = FM10K_TLV_MAC_ADDR, .len = (unsigned short)6U}, {.id = 3U, .type = FM10K_TLV_UNSIGNED, .len = (unsigned short)1U}, {.id = 4U, .type = FM10K_TLV_UNSIGNED, .len = (unsigned short)2U}, {.id = 5U, .type = FM10K_TLV_UNSIGNED, .len = (unsigned short)4U}, {.id = 6U, .type = FM10K_TLV_UNSIGNED, .len = (unsigned short)8U}, {.id = 7U, .type = FM10K_TLV_SIGNED, .len = (unsigned short)1U}, {.id = 8U, .type = FM10K_TLV_SIGNED, .len = (unsigned short)2U}, {.id = 9U, .type = FM10K_TLV_SIGNED, .len = (unsigned short)4U}, {.id = 10U, .type = FM10K_TLV_SIGNED, .len = (unsigned short)8U}, {.id = 11U, .type = FM10K_TLV_LE_STRUCT, .len = (unsigned short)8U}, {.id = 12U, .type = FM10K_TLV_NESTED}, {.id = 13U, .type = FM10K_TLV_SIGNED, .len = (unsigned short)4U}, {.id = 4294967295U}};
#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
static void fm10k_tlv_msg_test_generate_data(u32 *msg, u32 attr_flags)
{
  #line 642 
  if (((unsigned long)attr_flags & 2UL) != 0UL) 
                                                #line 643 
                                                fm10k_tlv_attr_put_null_string(msg,(unsigned short)1,(unsigned char *)(& test_str));
  #line 645 
  if (((unsigned long)attr_flags & 4UL) != 0UL) 
                                                #line 646 
                                                fm10k_tlv_attr_put_mac_vlan(msg,(unsigned short)2,(u8 *)(& test_mac),(unsigned short)4077);
  #line 648 
  if (((unsigned long)attr_flags & 8UL) != 0UL) 
                                                #line 649 
                                                fm10k_tlv_attr_put_value(msg,(unsigned short)3,135LL,1U);
  #line 650 
  if (((unsigned long)attr_flags & 16UL) != 0UL) 
                                                 #line 651 
                                                 fm10k_tlv_attr_put_value(msg,(unsigned short)4,34661LL,2U);
  #line 652 
  if (((unsigned long)attr_flags & 32UL) != 0UL) 
                                                 #line 653 
                                                 fm10k_tlv_attr_put_value(msg,(unsigned short)5,2271560481LL,4U);
  #line 654 
  if (((unsigned long)attr_flags & 64UL) != 0UL) 
                                                 #line 655 
                                                 fm10k_tlv_attr_put_value(msg,(unsigned short)6,-81985529216486896LL,8U);
  #line 656 
  if (((unsigned long)attr_flags & 128UL) != 0UL) 
                                                  #line 657 
                                                  fm10k_tlv_attr_put_value(msg,(unsigned short)7,-18LL,1U);
  #line 658 
  if (((unsigned long)attr_flags & 256UL) != 0UL) 
                                                  #line 659 
                                                  fm10k_tlv_attr_put_value(msg,(unsigned short)8,-4660LL,2U);
  #line 660 
  if (((unsigned long)attr_flags & 512UL) != 0UL) 
                                                  #line 661 
                                                  fm10k_tlv_attr_put_value(msg,(unsigned short)9,-19093112LL,4U);
  #line 662 
  if (((unsigned long)attr_flags & 1024UL) != 0UL) 
                                                   #line 663 
                                                   fm10k_tlv_attr_put_value(msg,(unsigned short)10,-1311768467463790320LL,8U);
  #line 664 
  if (((unsigned long)attr_flags & 2048UL) != 0UL) 
                                                   #line 665 
                                                   fm10k_tlv_attr_put_le_struct(msg,(unsigned short)11,(void *)(& test_le),8U);
  #line 667 
  return;
}

#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
void fm10k_tlv_msg_test_create(u32 *msg, u32 attr_flags)
{
  #line 679 
  u32 *nest = (u32 *)0U;
  #line 681 
  fm10k_tlv_msg_init(msg,(unsigned short)0);
  #line 683 
  fm10k_tlv_msg_test_generate_data(msg,attr_flags);
  #line 686 
  attr_flags >>= 12;
  #line 688 
  if (attr_flags != 0U) {
    #line 689 
    nest = fm10k_tlv_attr_nest_start(msg,(unsigned short)12);
    #line 691 
    fm10k_tlv_msg_test_generate_data(nest,attr_flags);
    #line 693 
    fm10k_tlv_attr_nest_stop(msg);
  }
  #line 695 
  return;
}

#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_tlv.c"
s32 fm10k_tlv_msg_test(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 710 
  u32 *nest_results[32U];
  #line 711 
  unsigned char result_str[80U];
  #line 712 
  unsigned char result_mac[6U];
  #line 714 
  __le32 result_le[2U];
  #line 715 
  u16 result_vlan;
  #line 716 
  u64 result_u64;
  #line 717 
  u32 result_u32;
  #line 718 
  u16 result_u16;
  #line 719 
  u8 result_u8;
  #line 720 
  s64 result_s64;
  #line 721 
  s32 result_s32;
  #line 722 
  s16 result_s16;
  #line 723 
  s8 result_s8;
  #line 724 
  u32 reply[3U];
  #line 713 
  s32 err = 0;
  #line 727 
  if (*(results + 13U) != (u32 *)0U) {
    #line 728 
    return fm10k_tlv_attr_get_value(*(results + 13U),(void *)(& mbx->test_result),
                               4U);
  }
  #line 731 
  parse_nested: 
                #line 731 
  ;
  #line 732 
  if (*(results + 1U) != (u32 *)0U) {
    #line 733 
    err = fm10k_tlv_attr_get_null_string(*(results + 1U),(unsigned char *)(& result_str));
    #line 736 
    if (err == 0) {
      #line 736 
      if (memcmp((void *)(& test_str),(void *)(& result_str),6UL) != 0) 
        #line 737 
        err = -9;
    }
    #line 738 
    if (err != 0) 
                  #line 739 
                  goto report_result;
  }
  #line 741 
  if (*(results + 2U) != (u32 *)0U) {
    #line 742 
    err = fm10k_tlv_attr_get_mac_vlan(*(results + 2U),(u8 *)(& result_mac),& result_vlan);
    #line 745 
    if (err == 0) {
      #line 745 
      if (! ether_addr_equal((u8 *)(& test_mac),(u8 *)(& result_mac))) 
        #line 746 
        err = -9;
    }
    #line 747 
    if (err == 0 && (unsigned int)result_vlan != 4077U) 
                                                        #line 748 
                                                        err = -9;
    #line 749 
    if (err != 0) 
                  #line 750 
                  goto report_result;
  }
  #line 752 
  if (*(results + 3U) != (u32 *)0U) {
    #line 753 
    err = fm10k_tlv_attr_get_value(*(results + 3U),(void *)(& result_u8),1U);
    #line 755 
    if (err == 0 && (unsigned int)result_u8 != 135U) 
                                                     #line 756 
                                                     err = -9;
    #line 757 
    if (err != 0) 
                  #line 758 
                  goto report_result;
  }
  #line 760 
  if (*(results + 4U) != (u32 *)0U) {
    #line 761 
    err = fm10k_tlv_attr_get_value(*(results + 4U),(void *)(& result_u16),2U);
    #line 763 
    if (err == 0 && (unsigned int)result_u16 != 34661U) 
                                                        #line 764 
                                                        err = -9;
    #line 765 
    if (err != 0) 
                  #line 766 
                  goto report_result;
  }
  #line 768 
  if (*(results + 5U) != (u32 *)0U) {
    #line 769 
    err = fm10k_tlv_attr_get_value(*(results + 5U),(void *)(& result_u32),4U);
    #line 771 
    if (err == 0 && result_u32 != 2271560481U) 
                                               #line 772 
                                               err = -9;
    #line 773 
    if (err != 0) 
                  #line 774 
                  goto report_result;
  }
  #line 776 
  if (*(results + 6U) != (u32 *)0U) {
    #line 777 
    err = fm10k_tlv_attr_get_value(*(results + 6U),(void *)(& result_u64),8U);
    #line 779 
    if (err == 0 && result_u64 != 18364758544493064720ULL) 
                                                           #line 780 
                                                           err = -9;
    #line 781 
    if (err != 0) 
                  #line 782 
                  goto report_result;
  }
  #line 784 
  if (*(results + 7U) != (u32 *)0U) {
    #line 785 
    err = fm10k_tlv_attr_get_value(*(results + 7U),(void *)(& result_s8),1U);
    #line 787 
    if (err == 0 && (int)result_s8 != -18) 
                                           #line 788 
                                           err = -9;
    #line 789 
    if (err != 0) 
                  #line 790 
                  goto report_result;
  }
  #line 792 
  if (*(results + 8U) != (u32 *)0U) {
    #line 793 
    err = fm10k_tlv_attr_get_value(*(results + 8U),(void *)(& result_s16),2U);
    #line 795 
    if (err == 0 && (int)result_s16 != -4660) 
                                              #line 796 
                                              err = -9;
    #line 797 
    if (err != 0) 
                  #line 798 
                  goto report_result;
  }
  #line 800 
  if (*(results + 9U) != (u32 *)0U) {
    #line 801 
    err = fm10k_tlv_attr_get_value(*(results + 9U),(void *)(& result_s32),4U);
    #line 803 
    if (err == 0 && result_s32 != -19093112) 
                                             #line 804 
                                             err = -9;
    #line 805 
    if (err != 0) 
                  #line 806 
                  goto report_result;
  }
  #line 808 
  if (*(results + 10U) != (u32 *)0U) {
    #line 809 
    err = fm10k_tlv_attr_get_value(*(results + 10U),(void *)(& result_s64),8U);
    #line 811 
    if (err == 0 && result_s64 != -1311768467463790320LL) 
                                                          #line 812 
                                                          err = -9;
    #line 813 
    if (err != 0) 
                  #line 814 
                  goto report_result;
  }
  #line 816 
  if (*(results + 11U) != (u32 *)0U) {
    #line 817 
    err = fm10k_tlv_attr_get_le_struct(*(results + 11U),(void *)(& result_le),8U);
    #line 821 
    if (err == 0) {
      #line 821 
      if (memcmp((void *)(& test_le),(void *)(& result_le),8UL) != 0) 
        #line 822 
        err = -9;
    }
    #line 823 
    if (err != 0) 
                  #line 824 
                  goto report_result;
  }
  #line 827 
  if (*(results + 12U) != (u32 *)0U) {
    #line 829 
    memset((void *)(& nest_results),0,256UL);
    #line 832 
    err = fm10k_tlv_attr_parse(*(results + 12U),(u32 **)(& nest_results),(struct fm10k_tlv_attr *)(& fm10k_tlv_msg_test_attr));
    #line 835 
    if (err != 0) 
                  #line 836 
                  goto report_result;
    #line 839 
    results = (u32 **)(& nest_results);
    #line 840 
    goto parse_nested;
  }
  #line 843 
  report_result: 
                 #line 843 
  ;
  #line 845 
  fm10k_tlv_msg_init((u32 *)(& reply),(unsigned short)0);
  #line 846 
  fm10k_tlv_attr_put_value((u32 *)(& reply),(unsigned short)13,(long long)err,4U);
  #line 849 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& reply));
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.h"
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
s32 fm10k_msg_mac_vlan_vf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.h"
#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
s32 fm10k_msg_lport_state_vf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.h"
#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
struct fm10k_info fm10k_vf_info;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_stop_hw_vf(struct fm10k_hw *hw)
{
  #line 14 
  u32 tdlen;
  #line 15 
  s32 err;
  #line 16 
  u16 i;
  #line 13 
  u8 *perm_addr = (u8 *)(& hw->mac.perm_addr);
  #line 14 
  u32 bal = 0U;
  #line 14 
  u32 bah = 0U;
  #line 19 
  err = fm10k_stop_hw_generic(hw);
  #line 20 
  if (err != 0 && err != -4) 
                             #line 21 
                             return err;
  #line 24 
  if ((int)is_valid_ether_addr(perm_addr) != 0) {
    #line 25 
    bal = (((unsigned int)*(perm_addr + 3U) << 24) | ((unsigned int)*(perm_addr + 4U) << 16)) | ((unsigned int)*(perm_addr + 5U) << 8);
    #line 28 
    bah = ((((unsigned int)*perm_addr << 16) | ((unsigned int)*(perm_addr + 1U) << 8)) | (unsigned int)*(perm_addr + 2U)) | 4278190080U;
  }
  #line 35 
  tdlen = (unsigned int)((int)hw->mac.itr_scale << 9);
  #line 40 
  i = (unsigned short)0U;
  #line 40 
  while ((int)hw->mac.max_queues > (int)i) {
    {
      #line 42 
      union __anonunion___u_2977 __u;
      #line 41 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 41 
      u32 *hw_addr = (__u.__val);
      #line 41 
      if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                              #line 41 
                                              writel(bal,(void *)(hw_addr + ((unsigned long)((int)i * 64) + (unsigned long)32768U)));
    }
    {
      #line 43 
      union __anonunion___u_2979 __u_0;
      #line 42 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 42 
      u32 *hw_addr_0 = (__u_0.__val);
      #line 42 
      if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                                #line 42 
                                                writel(bah,(void *)(hw_addr_0 + ((unsigned long)((int)i * 64) + (unsigned long)32769U)));
    }
    {
      #line 44 
      union __anonunion___u_2981 __u_1;
      #line 43 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 43 
      u32 *hw_addr_1 = (__u_1.__val);
      #line 43 
      if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                                #line 43 
                                                writel(bal,(void *)(hw_addr_1 + ((unsigned long)((int)i * 64) + (unsigned long)16384U)));
    }
    {
      #line 45 
      union __anonunion___u_2983 __u_2;
      #line 44 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 44 
      u32 *hw_addr_2 = (__u_2.__val);
      #line 44 
      if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                                #line 44 
                                                writel(bah,(void *)(hw_addr_2 + ((unsigned long)((int)i * 64) + (unsigned long)16385U)));
    }
    {
      #line 51 
      union __anonunion___u_2985 __u_3;
      #line 50 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 50 
      u32 *hw_addr_3 = (__u_3.__val);
      #line 50 
      if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                                #line 50 
                                                writel(tdlen,(void *)(hw_addr_3 + ((unsigned long)((int)i * 64) + (unsigned long)32770U)));
    }
    #line 40 
    i = (u16)((int)i + 1);
  }
  #line 53 
  return err;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_reset_hw_vf(struct fm10k_hw *hw)
{
  #line 65 
  s32 err;
  #line 68 
  err = fm10k_stop_hw_vf(hw);
  #line 69 
  if (err == -4) 
                 #line 70 
                 (hw->mac.reset_while_pending) ++;
  else 
    #line 71 
    if (err != 0) 
                  #line 72 
                  return err;
  {
    #line 76 
    union __anonunion___u_2987 __u;
    #line 75 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 75 
    u32 *hw_addr = (__u.__val);
    #line 75 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 75 
                                            writel(8U,(void *)hw_addr);
  }
  #line 78 
  fm10k_read_reg(hw,0);
  #line 79 
  __const_udelay(644250UL);
  {
    #line 83 
    union __anonunion___u_2989 __u_0;
    #line 82 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 82 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 82 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 82 
                                              writel(0U,(void *)hw_addr_0);
  }
  #line 83 
  if ((fm10k_read_reg(hw,0) & 8U) != 0U) 
                                         #line 84 
                                         return -7;
  #line 86 
  return 0;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_init_hw_vf(struct fm10k_hw *hw)
{
  #line 96 
  u32 tqdloc;
  #line 97 
  s32 err;
  #line 98 
  u16 i;
  #line 96 
  u32 tqdloc0 = ~ fm10k_read_reg(hw,32780);
  #line 101 
  if (fm10k_read_reg(hw,32775) == 4294967295U) 
                                               #line 101 
                                               goto _LOR;
  else {
    #line 101 
    if (fm10k_read_reg(hw,16390) == 4294967295U) {
      #line 101 
      _LOR: {
              #line 103 
              err = -3;
              #line 104 
              goto reset_max_queues;
            }
    }
  }
  #line 108 
  i = (unsigned short)1U;
  #line 108 
  while (tqdloc0 != 0U && (unsigned int)i <= 15U) {
    {
      #line 110 
      tqdloc = ~ fm10k_read_reg(hw,(int)i * 64 + 32780);
      #line 111 
      if (tqdloc == 0U || tqdloc == tqdloc0) 
                                             #line 112 
                                             break;
      #line 115 
      if (fm10k_read_reg(hw,(int)i * 64 + 32775) == 4294967295U) 
                                                                 #line 117 
                                                                 break;
      else {
        #line 115 
        if (fm10k_read_reg(hw,(int)i * 64 + 16390) == 4294967295U) 
                                                                   #line 117 
                                                                   break;
      }
    }
    #line 108 
    i = (u16)((int)i + 1);
  }
  #line 121 
  err = fm10k_disable_queues_generic(hw,(unsigned short)((int)i));
  #line 122 
  if (err != 0) 
                #line 123 
                goto reset_max_queues;
  #line 126 
  hw->mac.max_queues = i;
  #line 129 
  hw->mac.default_vid = (unsigned short)((unsigned int)((unsigned short)(fm10k_read_reg(hw,32775) >> 16)) & 4095U);
  #line 135 
  hw->mac.itr_scale = (unsigned char)((unsigned int)((unsigned char)(fm10k_read_reg(hw,32770) >> 9)) & 7U);
  #line 139 
  return 0;
  #line 141 
  reset_max_queues: 
                    #line 141 
  ;
  #line 142 
  hw->mac.max_queues = (unsigned short)0U;
  #line 144 
  return err;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
struct fm10k_tlv_attr fm10k_mac_vlan_msg_attr[6U] = {{.type = FM10K_TLV_UNSIGNED, .len = (unsigned short)4U}, {.id = 1U, .type = FM10K_TLV_BOOL}, {.id = 2U, .type = FM10K_TLV_MAC_ADDR, .len = (unsigned short)6U}, {.id = 3U, .type = FM10K_TLV_MAC_ADDR, .len = (unsigned short)6U}, {.id = 4U, .type = FM10K_TLV_MAC_ADDR, .len = (unsigned short)6U}, {.id = 4294967295U}};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_update_vlan_vf(struct fm10k_hw *hw, u32 vid, u8 vsi, bool set)
{
  #line 170 
  u32 msg[4U];
  #line 169 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 173 
  if ((unsigned int)vsi != 0U) 
                               #line 174 
                               return -2;
  #line 177 
  if (((vid << 16) | vid) >> 28 != 0U) 
                                       #line 178 
                                       return -2;
  #line 181 
  if (! set) 
             #line 182 
             vid |= 32768U;
  #line 185 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)2);
  #line 186 
  fm10k_tlv_attr_put_value((u32 *)(& msg),(unsigned short)0,(long long)vid,4U);
  #line 189 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
s32 fm10k_msg_mac_vlan_vf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 203 
  u8 perm_addr[6U];
  #line 204 
  u16 vid;
  #line 205 
  s32 err;
  #line 208 
  err = fm10k_tlv_attr_get_mac_vlan(*(results + 3U),(u8 *)(& perm_addr),& vid);
  #line 211 
  if (err != 0) 
                #line 212 
                return err;
  #line 214 
  ether_addr_copy((u8 *)(& hw->mac.perm_addr),(u8 *)(& perm_addr));
  #line 215 
  hw->mac.default_vid = (unsigned short)((unsigned int)vid & 4095U);
  #line 216 
  hw->mac.vlan_override = (_Bool)(((unsigned long)vid & 32768UL) != 0UL);
  #line 218 
  return 0;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_read_mac_addr_vf(struct fm10k_hw *hw)
{
  #line 229 
  u8 perm_addr[6U];
  #line 230 
  u32 base_addr;
  #line 232 
  base_addr = fm10k_read_reg(hw,32768);
  #line 235 
  if (base_addr << 24 != 0U) 
                             #line 236 
                             return -8;
  #line 238 
  perm_addr[3] = (unsigned char)(base_addr >> 24);
  #line 239 
  perm_addr[4] = (unsigned char)(base_addr >> 16);
  #line 240 
  perm_addr[5] = (unsigned char)(base_addr >> 8);
  #line 242 
  base_addr = fm10k_read_reg(hw,32769);
  #line 245 
  if (~ base_addr >> 24 != 0U) 
                               #line 246 
                               return -8;
  #line 248 
  perm_addr[0] = (unsigned char)(base_addr >> 16);
  #line 249 
  perm_addr[1] = (unsigned char)(base_addr >> 8);
  #line 250 
  perm_addr[2] = (unsigned char)base_addr;
  #line 252 
  ether_addr_copy((u8 *)(& hw->mac.perm_addr),(u8 *)(& perm_addr));
  #line 253 
  ether_addr_copy((u8 *)(& hw->mac.addr),(u8 *)(& perm_addr));
  #line 255 
  return 0;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_update_uc_addr_vf(struct fm10k_hw *hw, u16 glort, u8 *mac, u16 vid, bool add, u8 flags)
{
  #line 276 
  u32 msg[7U];
  #line 275 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 279 
  if ((unsigned int)vid > 4095U) 
                                 #line 280 
                                 return -2;
  #line 283 
  if (! is_valid_ether_addr(mac)) 
                                  #line 284 
                                  return -2;
  #line 287 
  if ((int)is_valid_ether_addr((u8 *)(& hw->mac.perm_addr)) != 0) {
    #line 288 
    if (! ether_addr_equal((u8 *)(& hw->mac.perm_addr),mac)) 
                                                             #line 289 
                                                             return -2;
  }
  #line 292 
  if (! add) 
             #line 293 
             vid = (unsigned short)((unsigned int)vid | 32768U);
  #line 296 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)2);
  #line 297 
  fm10k_tlv_attr_put_mac_vlan((u32 *)(& msg),(unsigned short)2,mac,(unsigned short)((int)vid));
  #line 300 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_update_mc_addr_vf(struct fm10k_hw *hw, u16 glort, u8 *mac, u16 vid, bool add)
{
  #line 319 
  u32 msg[7U];
  #line 318 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 322 
  if ((unsigned int)vid > 4095U) 
                                 #line 323 
                                 return -2;
  #line 326 
  if (! is_multicast_ether_addr(mac)) 
                                      #line 327 
                                      return -2;
  #line 330 
  if (! add) 
             #line 331 
             vid = (unsigned short)((unsigned int)vid | 32768U);
  #line 334 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)2);
  #line 335 
  fm10k_tlv_attr_put_mac_vlan((u32 *)(& msg),(unsigned short)4,mac,(unsigned short)((int)vid));
  #line 339 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static void fm10k_update_int_moderator_vf(struct fm10k_hw *hw)
{
  #line 352 
  u32 msg[1U];
  #line 351 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 355 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)1);
  #line 358 
  (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
  #line 359 
  return;
}

#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
struct fm10k_tlv_attr fm10k_lport_state_msg_attr[4U] = {{.type = FM10K_TLV_BOOL}, {.id = 1U, .type = FM10K_TLV_UNSIGNED, .len = (unsigned short)1U}, {.id = 2U, .type = FM10K_TLV_BOOL}, {.id = 4294967295U}};
#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
s32 fm10k_msg_lport_state_vf(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 381 
  if (*(results + 2U) == (u32 *)0U) 
                                    #line 381 
                                    hw->mac.dglort_map = 65535U; else 
                                                                   #line 381 
                                                                   hw->mac.dglort_map = 4294901760U;
  #line 384 
  return 0;
}

#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_update_lport_state_vf(struct fm10k_hw *hw, u16 glort, u16 count, bool enable)
{
  #line 403 
  u32 msg[2U];
  #line 402 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 406 
  hw->mac.dglort_map = 65535U;
  #line 409 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)3);
  #line 410 
  if (! enable) 
                #line 411 
                fm10k_tlv_attr_put_bool((u32 *)(& msg),(unsigned short)0);
  #line 414 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_update_xcast_mode_vf(struct fm10k_hw *hw, u16 glort, u8 mode)
{
  #line 431 
  u32 msg[3U];
  #line 430 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 433 
  if ((unsigned int)mode > 3U) 
                               #line 434 
                               return -2;
  #line 437 
  fm10k_tlv_msg_init((u32 *)(& msg),(unsigned short)3);
  #line 438 
  fm10k_tlv_attr_put_value((u32 *)(& msg),(unsigned short)1,(long long)mode,1U);
  #line 441 
  return (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& msg));
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static void fm10k_update_hw_stats_vf(struct fm10k_hw *hw, struct fm10k_hw_stats *stats)
{
  #line 454 
  fm10k_update_hw_stats_q(hw,(struct fm10k_hw_stats_q *)(& stats->q),0U,(unsigned int)hw->mac.max_queues);
  #line 455 
  return;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static void fm10k_rebind_hw_stats_vf(struct fm10k_hw *hw, struct fm10k_hw_stats *stats)
{
  #line 468 
  fm10k_unbind_hw_stats_q((struct fm10k_hw_stats_q *)(& stats->q),0U,(unsigned int)hw->mac.max_queues);
  #line 471 
  fm10k_update_hw_stats_vf(hw,stats);
  #line 472 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_configure_dglort_map_vf(struct fm10k_hw *hw, struct fm10k_dglort_cfg *dglort)
{
  #line 487 
  if (dglort == (struct fm10k_dglort_cfg *)0) 
                                              #line 488 
                                              return -2;
  #line 492 
  return 0;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static struct fm10k_msg_data fm10k_msg_data_vf[4U] = {{.attr = (struct fm10k_tlv_attr *)(& fm10k_tlv_msg_test_attr), .func = & fm10k_tlv_msg_test}, {.id = 2U, .attr = (struct fm10k_tlv_attr *)(& fm10k_mac_vlan_msg_attr), .func = & fm10k_msg_mac_vlan_vf}, {.id = 3U, .attr = (struct fm10k_tlv_attr *)(& fm10k_lport_state_msg_attr), .func = & fm10k_msg_lport_state_vf}, {.id = 4294967295U, .func = & fm10k_tlv_msg_error}};
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static struct fm10k_mac_ops mac_ops_vf = {.reset_hw = & fm10k_reset_hw_vf, .init_hw = & fm10k_init_hw_vf, .start_hw = & fm10k_start_hw_generic, .stop_hw = & fm10k_stop_hw_vf, .get_bus_info = & fm10k_get_bus_info_generic, .get_host_state = & fm10k_get_host_state_generic, .update_vlan = & fm10k_update_vlan_vf, .read_mac_addr = & fm10k_read_mac_addr_vf, .update_uc_addr = & fm10k_update_uc_addr_vf, .update_mc_addr = & fm10k_update_mc_addr_vf, .update_xcast_mode = & fm10k_update_xcast_mode_vf, .update_int_moderator = & fm10k_update_int_moderator_vf, .update_lport_state = & fm10k_update_lport_state_vf, .update_hw_stats = & fm10k_update_hw_stats_vf, .rebind_hw_stats = & fm10k_rebind_hw_stats_vf, .configure_dglort_map = & fm10k_configure_dglort_map_vf};
#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
static s32 fm10k_get_invariants_vf(struct fm10k_hw *hw)
{
  #line 523 
  fm10k_get_invariants_generic(hw);
  #line 525 
  return fm10k_pfvf_mbx_init(hw,& hw->mbx,
                          (struct fm10k_msg_data *)(& fm10k_msg_data_vf),
                          (unsigned char)0);
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_vf.c"
struct fm10k_info fm10k_vf_info = {.mac = fm10k_mac_vf, .get_invariants = & fm10k_get_invariants_vf, .mac_ops = & mac_ops_vf};
/* compiler builtin: 
   void __builtin_unreachable(void);   */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list);   */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list);   */
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 474 
int vsnprintf(char *, size_t, char *, __builtin_va_list);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 795  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc_0(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_vfree(void *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 2115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_get_num_tc(struct net_device *dev)
{
  #line 2117 
  return (int)dev->num_tc;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_lock_0(struct fm10k_intfc *interface)
{
  #line 401 
  cif_spin_lock_mbx_lock_of_fm10k_intfc_0(& interface->mbx_lock);
  #line 402 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_unlock_0(struct fm10k_intfc *interface)
{
  #line 406 
  cif_spin_unlock_mbx_lock_of_fm10k_intfc_0(& interface->mbx_lock);
  #line 407 
  return;
}

#line 478 
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
char fm10k_driver_name[6U];
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
char fm10k_driver_version[9U];
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 497 
void fm10k_up(struct fm10k_intfc *interface);
#line 498 
#line 498 
void fm10k_down(struct fm10k_intfc *interface);
#line 499 
#line 499 
void fm10k_update_stats(struct fm10k_intfc *interface);
#line 502 
#line 502 
void fm10k_update_rx_drop_en(struct fm10k_intfc *interface);
#line 506 
#line 506 
int fm10k_setup_rx_resources(struct fm10k_ring *rx_ring);
#line 507 
#line 507 
int fm10k_setup_tx_resources(struct fm10k_ring *tx_ring);
#line 508 
#line 508 
void fm10k_free_rx_resources(struct fm10k_ring *rx_ring);
#line 509 
#line 509 
void fm10k_free_tx_resources(struct fm10k_ring *tx_ring);
#line 516 
#line 516 
int fm10k_setup_tc(struct net_device *dev, u8 tc);
#line 527 
#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
void fm10k_set_ethtool_ops(struct net_device *dev);
#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
void fm10k_write_reta(struct fm10k_intfc *interface, u32 *indir);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static struct fm10k_stats fm10k_gstrings_net_stats[10U] = {{.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 8}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 24}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 40}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 16}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 32}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 48}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 80}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 96}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 112}};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static struct fm10k_stats fm10k_gstrings_global_stats[17U] = {{.stat_string = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'s', (char)'t', (char)'a', (char)'r', (char)'t', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .sizeof_stat = 8, .stat_offset = 1600}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'u', (char)'s', (char)'y'}, .sizeof_stat = 8, .stat_offset = 1608}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1616}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 1624}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1632}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1648}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1640}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1664}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1656}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1672}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'_', (char)'p', (char)'f'}, .sizeof_stat = 8, .stat_offset = 1680}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'_', (char)'v', (char)'f'}, .sizeof_stat = 8, .stat_offset = 1688}, {.stat_string = {(char)'s', (char)'w', (char)'a', (char)'p', (char)'i', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'u', (char)'s'}, .sizeof_stat = 4, .stat_offset = 18352}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'u', (char)'l', (char)'e', (char)'s', (char)'_', (char)'u', (char)'s', (char)'e', (char)'d'}, .sizeof_stat = 4, .stat_offset = 18356}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'u', (char)'l', (char)'e', (char)'s', (char)'_', (char)'a', (char)'v', (char)'a', (char)'i', (char)'l'}, .sizeof_stat = 4, .stat_offset = 18360}, {.stat_string = {(char)'r', (char)'e', (char)'s', (char)'e', (char)'t', (char)'_', (char)'w', (char)'h', (char)'i', (char)'l', (char)'e', (char)'_', (char)'p', (char)'e', (char)'n', (char)'d', (char)'i', (char)'n', (char)'g'}, .sizeof_stat = 8, .stat_offset = 15456}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'a', (char)'n', (char)'g', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .sizeof_stat = 4, .stat_offset = 1760}};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static struct fm10k_stats fm10k_gstrings_pf_stats[8U] = {{.stat_string = {(char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t'}, .sizeof_stat = 8, .stat_offset = 4880}, {.stat_string = {(char)'u', (char)'r'}, .sizeof_stat = 8, .stat_offset = 4896}, {.stat_string = {(char)'c', (char)'a'}, .sizeof_stat = 8, .stat_offset = 4912}, {.stat_string = {(char)'u', (char)'m'}, .sizeof_stat = 8, .stat_offset = 4928}, {.stat_string = {(char)'x', (char)'e', (char)'c'}, .sizeof_stat = 8, .stat_offset = 4944}, {.stat_string = {(char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .sizeof_stat = 8, .stat_offset = 4960}, {.stat_string = {(char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .sizeof_stat = 8, .stat_offset = 4976}, {.stat_string = {(char)'n', (char)'o', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .sizeof_stat = 8, .stat_offset = 4992}};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static struct fm10k_stats fm10k_gstrings_mbx_stats[9U] = {{.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'u', (char)'s', (char)'y'}, .sizeof_stat = 8, .stat_offset = 160}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 168}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'e', (char)'s', (char)'s', (char)'a', (char)'g', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 176}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'w', (char)'o', (char)'r', (char)'d', (char)'s'}, .sizeof_stat = 8, .stat_offset = 184}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'b', (char)'m', (char)'e', (char)'m', (char)'_', (char)'p', (char)'u', (char)'l', (char)'l', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 192}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'e', (char)'s', (char)'s', (char)'a', (char)'g', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 200}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'w', (char)'o', (char)'r', (char)'d', (char)'s'}, .sizeof_stat = 8, .stat_offset = 208}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'r', (char)'s', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r'}, .sizeof_stat = 8, .stat_offset = 224}, {.stat_string = {(char)'m', (char)'b', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'b', (char)'m', (char)'e', (char)'m', (char)'_', (char)'p', (char)'u', (char)'s', (char)'h', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 216}};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static struct fm10k_stats fm10k_gstrings_queue_stats[2U] = {{.stat_string = {(char)'%', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'%', (char)'u', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 96}, {.stat_string = {(char)'%', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'%', (char)'u', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 104}};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static char fm10k_gstrings_test[1U][32U] = {{(char)'M', (char)'a', (char)'i', (char)'l', (char)'b', (char)'o', (char)'x', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static char fm10k_prv_flags[0U][32U] = {};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void __fm10k_add_stat_strings(u8 **p, struct fm10k_stats *stats, unsigned int size , ...)
{
  #line 141 
  unsigned int i;
  #line 143 
  i = 0U;
  #line 143 
  while (i < size) {
    {
      #line 144 
      va_list args;
      #line 146 
      #line 146 
      __builtin_va_start(args,size);
      #line 147 
      vsnprintf((char *)*p,32UL,(char *)(& (stats + (unsigned long)i)->stat_string),args);
      #line 148 
      *p += 32U;
      #line 149 
      __builtin_va_end(args);
    }
    #line 143 
    i ++;
  }
  #line 151 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_stat_strings(struct net_device *dev, u8 *data)
{
  #line 159 
  unsigned int i;
  #line 158 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 161 
  __fm10k_add_stat_strings(& data,(struct fm10k_stats *)(& fm10k_gstrings_net_stats),10U);
  #line 163 
  __fm10k_add_stat_strings(& data,(struct fm10k_stats *)(& fm10k_gstrings_global_stats),17U);
  #line 165 
  __fm10k_add_stat_strings(& data,(struct fm10k_stats *)(& fm10k_gstrings_mbx_stats),9U);
  #line 167 
  if (interface->hw.mac.type != (unsigned int)fm10k_mac_vf) 
                                                            #line 168 
                                                            __fm10k_add_stat_strings(& data,(struct fm10k_stats *)(& fm10k_gstrings_pf_stats),8U);
  #line 170 
  i = 0U;
  #line 170 
  while ((unsigned int)interface->hw.mac.max_queues > i) {
    #line 171 
    __fm10k_add_stat_strings(& data,(struct fm10k_stats *)(& fm10k_gstrings_queue_stats),2U,(char *)"tx",i);
    #line 174 
    __fm10k_add_stat_strings(& data,(struct fm10k_stats *)(& fm10k_gstrings_queue_stats),2U,(char *)"rx",i);
    #line 170 
    i ++;
  }
  #line 176 
  return;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 182 
  switch (stringset) {
    #line 183 
    case (u32)0: 
                 #line 183 
    ;
    #line 184 
    memcpy((void *)data,(void *)(& fm10k_gstrings_test),32UL);
    #line 186 
    break;
    #line 187 
    case (u32)1: 
                 #line 187 
    ;
    #line 188 
    fm10k_get_stat_strings(dev,data);
    #line 189 
    break;
    #line 190 
    case (u32)2: 
                 #line 190 
    ;
    #line 191 
    memcpy((void *)data,(void *)(& fm10k_prv_flags),0UL);
    #line 193 
    break;
  }
  #line 195 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_get_sset_count(struct net_device *dev, int sset)
{
  #line 199 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 200 
  struct fm10k_hw *hw = & interface->hw;
  #line 201 
  int stats_len = 36;
  #line 203 
  switch (sset) {
    #line 204 
    case 0: 
            #line 204 
    ;
    #line 205 
    return 1;
    #line 206 
    case 1: 
            #line 206 
    ;
    #line 207 
    stats_len = (int)((unsigned long)((int)hw->mac.max_queues * 2) * (unsigned long)2U + (unsigned long)stats_len);
    #line 209 
    if (hw->mac.type != (unsigned int)fm10k_mac_vf) 
                                                    #line 210 
                                                    stats_len = (int)((unsigned int)stats_len + 8U);
    #line 212 
    return stats_len;
    #line 213 
    case 2: 
            #line 213 
    ;
    #line 214 
    return 0;
    #line 215 
    default: 
             #line 215 
    ;
    #line 216 
    return -95;
  }
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void __fm10k_add_ethtool_stats(u64 **data, void *pointer, struct fm10k_stats *stats, unsigned int size)
{
  #line 224 
  unsigned int i;
  #line 226 
  if (pointer == (void *)0) {
    #line 228 
    i = 0U;
    #line 228 
    while (i < size) {
      #line 229 
      u64 *tmp;
      #line 229 
      tmp = *data;
      #line 229 
      (*data) ++;
      #line 229 
      *tmp = 0ULL;
      #line 228 
      i ++;
    }
    #line 230 
    return;
  }
  #line 233 
  i = 0U;
  #line 233 
  while (i < size) {
    {
      #line 234 
      char *p = (char *)pointer + (unsigned long)(stats + (unsigned long)i)->stat_offset;
      #line 236 
      switch ((stats + (unsigned long)i)->sizeof_stat) {
        #line 238 
        u64 *tmp_0;
        #line 241 
        u64 *tmp_1;
        #line 244 
        u64 *tmp_2;
        #line 247 
        u64 *tmp_3;
        #line 252 
        u64 *tmp_4_0;
        #line 237 
        case 8: 
                #line 237 
        ;
        #line 238 
        tmp_0 = *data;
        #line 238 
        (*data) ++;
        #line 238 
        *tmp_0 = *((u64 *)p);
        #line 239 
        break;
        #line 240 
        case 4: 
                #line 240 
        ;
        #line 241 
        tmp_1 = *data;
        #line 241 
        (*data) ++;
        #line 241 
        *tmp_1 = (unsigned long long)*((u32 *)p);
        #line 242 
        break;
        #line 243 
        case 2: 
                #line 243 
        ;
        #line 244 
        tmp_2 = *data;
        #line 244 
        (*data) ++;
        #line 244 
        *tmp_2 = (unsigned long long)*((u16 *)p);
        #line 245 
        break;
        #line 246 
        case 1: 
                #line 246 
        ;
        #line 247 
        tmp_3 = *data;
        #line 247 
        (*data) ++;
        #line 247 
        *tmp_3 = (unsigned long long)*((u8 *)p);
        #line 248 
        break;
        #line 249 
        default: 
                 #line 249 
        ;
        {
          #line 250 
          bool __warned;
          #line 250 
          int __ret_warn_once = 1;
          #line 250 
          if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
            #line 250 
            __warned = (_Bool)1;
            {
              #line 250 
              int __ret_warn_on = 1;
              #line 250 
              if ((long)(__ret_warn_on != 0) != 0L) {
                #line 250 
                __warn_printk((char *)"unexpected stat size for %s",(char *)(& (stats + (unsigned long)i)->stat_string));
                #line 251 
                ldv_inline_asm();
                #line 252 
                ldv_inline_asm();
              }
              #line 250 
              long tmp_4 = (long)(__ret_warn_on != 0);
            }
          }
          #line 250 
          long tmp_6 = (long)(__ret_warn_once != 0);
        }
        #line 252 
        tmp_4_0 = *data;
        #line 252 
        (*data) ++;
        #line 252 
        *tmp_4_0 = 0ULL;
      }
    }
    #line 233 
    i ++;
  }
  #line 255 
  return;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 266 
  int i;
  #line 264 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 265 
  struct net_device_stats *net_stats = & netdev->stats;
  #line 268 
  fm10k_update_stats(interface);
  #line 270 
  __fm10k_add_ethtool_stats(& data,(void *)net_stats,(struct fm10k_stats *)(& fm10k_gstrings_net_stats),10U);
  #line 272 
  __fm10k_add_ethtool_stats(& data,(void *)interface,(struct fm10k_stats *)(& fm10k_gstrings_global_stats),17U);
  #line 274 
  __fm10k_add_ethtool_stats(& data,(void *)(& interface->hw.mbx),(struct fm10k_stats *)(& fm10k_gstrings_mbx_stats),9U);
  #line 277 
  if (interface->hw.mac.type != (unsigned int)fm10k_mac_vf) 
                                                            #line 278 
                                                            __fm10k_add_ethtool_stats(& data,(void *)interface,(struct fm10k_stats *)(& fm10k_gstrings_pf_stats),8U);
  #line 282 
  i = 0;
  #line 282 
  while ((int)interface->hw.mac.max_queues > i) {
    {
      #line 283 
      struct fm10k_ring *ring;
      #line 285 
      ring = interface->tx_ring[i];
      #line 286 
      __fm10k_add_ethtool_stats(& data,(void *)ring,(struct fm10k_stats *)(& fm10k_gstrings_queue_stats),2U);
      #line 289 
      ring = interface->rx_ring[i];
      #line 290 
      __fm10k_add_ethtool_stats(& data,(void *)ring,(struct fm10k_stats *)(& fm10k_gstrings_queue_stats),2U);
    }
    #line 282 
    i ++;
  }
  #line 292 
  return;
}

#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_reg_q(struct fm10k_hw *hw, u32 *buff, int i)
{
  #line 302 
  int tmp;
  #line 303 
  int tmp_0;
  #line 304 
  int tmp_1;
  #line 305 
  int tmp_2;
  #line 306 
  int tmp_3;
  #line 307 
  int tmp_4;
  #line 308 
  int tmp_5;
  #line 309 
  int tmp_6;
  #line 310 
  int tmp_7;
  #line 311 
  int tmp_8;
  #line 312 
  int tmp_9;
  #line 313 
  int tmp_10;
  #line 314 
  int tmp_11;
  #line 315 
  int tmp_12;
  #line 316 
  int tmp_13;
  #line 317 
  int tmp_14;
  #line 318 
  int tmp_15;
  #line 319 
  int tmp_16;
  #line 320 
  int tmp_17;
  #line 321 
  int tmp_18;
  #line 322 
  int tmp_19;
  #line 323 
  int tmp_20;
  #line 324 
  int tmp_21;
  #line 325 
  int tmp_22;
  #line 326 
  int tmp_23;
  #line 327 
  int tmp_24;
  #line 328 
  int tmp_25;
  #line 329 
  int tmp_26;
  #line 330 
  int tmp_27;
  #line 300 
  int idx = 0;
  #line 302 
  tmp = idx;
  #line 302 
  idx ++;
  #line 302 
  *(buff + (unsigned long)tmp) = fm10k_read_reg(hw,(i + 256) * 64);
  #line 303 
  tmp_0 = idx;
  #line 303 
  idx ++;
  #line 303 
  *(buff + (unsigned long)tmp_0) = fm10k_read_reg(hw,i * 64 + 16385);
  #line 304 
  tmp_1 = idx;
  #line 304 
  idx ++;
  #line 304 
  *(buff + (unsigned long)tmp_1) = fm10k_read_reg(hw,i * 64 + 16386);
  #line 305 
  tmp_2 = idx;
  #line 305 
  idx ++;
  #line 305 
  *(buff + (unsigned long)tmp_2) = fm10k_read_reg(hw,i * 64 + 16387);
  #line 306 
  tmp_3 = idx;
  #line 306 
  idx ++;
  #line 306 
  *(buff + (unsigned long)tmp_3) = fm10k_read_reg(hw,i * 64 + 16388);
  #line 307 
  tmp_4 = idx;
  #line 307 
  idx ++;
  #line 307 
  *(buff + (unsigned long)tmp_4) = fm10k_read_reg(hw,i * 64 + 16389);
  #line 308 
  tmp_5 = idx;
  #line 308 
  idx ++;
  #line 308 
  *(buff + (unsigned long)tmp_5) = fm10k_read_reg(hw,i * 64 + 16390);
  #line 309 
  tmp_6 = idx;
  #line 309 
  idx ++;
  #line 309 
  *(buff + (unsigned long)tmp_6) = fm10k_read_reg(hw,i * 64 + 16391);
  #line 310 
  tmp_7 = idx;
  #line 310 
  idx ++;
  #line 310 
  *(buff + (unsigned long)tmp_7) = fm10k_read_reg(hw,i * 64 + 16392);
  #line 311 
  tmp_8 = idx;
  #line 311 
  idx ++;
  #line 311 
  *(buff + (unsigned long)tmp_8) = fm10k_read_reg(hw,i * 64 + 16393);
  #line 312 
  tmp_9 = idx;
  #line 312 
  idx ++;
  #line 312 
  *(buff + (unsigned long)tmp_9) = fm10k_read_reg(hw,i * 64 + 16394);
  #line 313 
  tmp_10 = idx;
  #line 313 
  idx ++;
  #line 313 
  *(buff + (unsigned long)tmp_10) = fm10k_read_reg(hw,i * 64 + 16395);
  #line 314 
  tmp_11 = idx;
  #line 314 
  idx ++;
  #line 314 
  *(buff + (unsigned long)tmp_11) = fm10k_read_reg(hw,i * 64 + 16396);
  #line 315 
  tmp_12 = idx;
  #line 315 
  idx ++;
  #line 315 
  *(buff + (unsigned long)tmp_12) = fm10k_read_reg(hw,i * 64 + 16397);
  #line 316 
  tmp_13 = idx;
  #line 316 
  idx ++;
  #line 316 
  *(buff + (unsigned long)tmp_13) = fm10k_read_reg(hw,(i + 512) * 64);
  #line 317 
  tmp_14 = idx;
  #line 317 
  idx ++;
  #line 317 
  *(buff + (unsigned long)tmp_14) = fm10k_read_reg(hw,i * 64 + 32769);
  #line 318 
  tmp_15 = idx;
  #line 318 
  idx ++;
  #line 318 
  *(buff + (unsigned long)tmp_15) = fm10k_read_reg(hw,i * 64 + 32770);
  #line 319 
  tmp_16 = idx;
  #line 319 
  idx ++;
  #line 319 
  *(buff + (unsigned long)tmp_16) = fm10k_read_reg(hw,i * 64 + 32771);
  #line 320 
  tmp_17 = idx;
  #line 320 
  idx ++;
  #line 320 
  *(buff + (unsigned long)tmp_17) = fm10k_read_reg(hw,i * 64 + 32772);
  #line 321 
  tmp_18 = idx;
  #line 321 
  idx ++;
  #line 321 
  *(buff + (unsigned long)tmp_18) = fm10k_read_reg(hw,i * 64 + 32773);
  #line 322 
  tmp_19 = idx;
  #line 322 
  idx ++;
  #line 322 
  *(buff + (unsigned long)tmp_19) = fm10k_read_reg(hw,i * 64 + 32774);
  #line 323 
  tmp_20 = idx;
  #line 323 
  idx ++;
  #line 323 
  *(buff + (unsigned long)tmp_20) = fm10k_read_reg(hw,i * 64 + 32775);
  #line 324 
  tmp_21 = idx;
  #line 324 
  idx ++;
  #line 324 
  *(buff + (unsigned long)tmp_21) = fm10k_read_reg(hw,i * 64 + 32776);
  #line 325 
  tmp_22 = idx;
  #line 325 
  idx ++;
  #line 325 
  *(buff + (unsigned long)tmp_22) = fm10k_read_reg(hw,i * 64 + 32777);
  #line 326 
  tmp_23 = idx;
  #line 326 
  idx ++;
  #line 326 
  *(buff + (unsigned long)tmp_23) = fm10k_read_reg(hw,i * 64 + 32778);
  #line 327 
  tmp_24 = idx;
  #line 327 
  idx ++;
  #line 327 
  *(buff + (unsigned long)tmp_24) = fm10k_read_reg(hw,i * 64 + 32779);
  #line 328 
  tmp_25 = idx;
  #line 328 
  idx ++;
  #line 328 
  *(buff + (unsigned long)tmp_25) = fm10k_read_reg(hw,i * 64 + 32780);
  #line 329 
  tmp_26 = idx;
  #line 329 
  idx ++;
  #line 329 
  *(buff + (unsigned long)tmp_26) = fm10k_read_reg(hw,i * 64 + 32781);
  #line 330 
  tmp_27 = idx;
  #line 330 
  idx ++;
  #line 330 
  *(buff + (unsigned long)tmp_27) = fm10k_read_reg(hw,i * 64 + 32782);
  #line 332 
  if ((long)(idx != 29) != 0L) {
    #line 333 
    ldv_inline_asm();
    #line 334 
    ldv_inline_asm();
    #line 335 
    ldv_inline_asm();
    #line 332 
    ;
  }
  #line 335 
  return;
}

#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_reg_vsi(struct fm10k_hw *hw, u32 *buff, int i)
{
  #line 340 
  int j;
  #line 342 
  int tmp;
  #line 340 
  int idx = 0;
  #line 342 
  tmp = idx;
  #line 342 
  idx ++;
  #line 342 
  *(buff + (unsigned long)tmp) = fm10k_read_reg(hw,i + 8448);
  #line 343 
  j = 0;
  #line 343 
  while (j <= 9) {
    #line 344 
    int tmp_0;
    #line 344 
    tmp_0 = idx;
    #line 344 
    idx ++;
    #line 344 
    *(buff + (unsigned long)tmp_0) = fm10k_read_reg(hw,(i * 16 + j) + 2048);
    #line 343 
    j ++;
  }
  #line 345 
  j = 0;
  #line 345 
  while (j <= 31) {
    #line 346 
    int tmp_1;
    #line 346 
    tmp_1 = idx;
    #line 346 
    idx ++;
    #line 346 
    *(buff + (unsigned long)tmp_1) = fm10k_read_reg(hw,(i * 32 + j) + 4096);
    #line 345 
    j ++;
  }
  #line 348 
  if ((long)(idx != 43) != 0L) {
    #line 349 
    ldv_inline_asm();
    #line 350 
    ldv_inline_asm();
    #line 351 
    ldv_inline_asm();
    #line 348 
    ;
  }
  #line 351 
  return;
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  #line 357 
  u16 i;
  #line 354 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 355 
  struct fm10k_hw *hw = & interface->hw;
  #line 356 
  u32 *buff = (u32 *)p;
  #line 359 
  regs->version = ((unsigned int)((int)hw->revision_id << 16) | (unsigned int)hw->device_id) | 16777216U;
  #line 361 
  switch ((unsigned int)hw->mac.type) {
    #line 364 
    u32 *tmp_0;
    #line 365 
    u32 *tmp_1;
    #line 366 
    u32 *tmp_2;
    #line 367 
    u32 *tmp_3;
    #line 379 
    u32 *tmp_6;
    #line 380 
    u32 *tmp_7;
    #line 387 
    u32 *tmp_8;
    #line 399 
    u32 *tmp_11;
    #line 400 
    u32 *tmp_12;
    #line 401 
    u32 *tmp_13;
    #line 362 
    case (unsigned int)1: 
                          #line 362 
    ;
    #line 364 
    tmp_0 = buff;
    #line 364 
    buff ++;
    #line 364 
    *tmp_0 = fm10k_read_reg(hw,0);
    #line 365 
    tmp_1 = buff;
    #line 365 
    buff ++;
    #line 365 
    *tmp_1 = fm10k_read_reg(hw,1);
    #line 366 
    tmp_2 = buff;
    #line 366 
    buff ++;
    #line 366 
    *tmp_2 = fm10k_read_reg(hw,3);
    #line 367 
    tmp_3 = buff;
    #line 367 
    buff ++;
    #line 367 
    *tmp_3 = fm10k_read_reg(hw,5);
    #line 369 
    i = (unsigned short)0U;
    #line 369 
    while ((unsigned int)i <= 7U) {
      {
        #line 370 
        u32 *tmp_4;
        #line 371 
        u32 *tmp_5;
        #line 370 
        tmp_4 = buff;
        #line 370 
        buff ++;
        #line 370 
        *tmp_4 = fm10k_read_reg(hw,(int)i + 48);
        #line 371 
        tmp_5 = buff;
        #line 371 
        buff ++;
        #line 371 
        *tmp_5 = fm10k_read_reg(hw,(int)i + 56);
      }
      #line 369 
      i = (u16)((int)i + 1);
    }
    #line 374 
    i = (unsigned short)0U;
    #line 374 
    while ((unsigned int)i <= 64U) {
      #line 375 
      fm10k_get_reg_vsi(hw,buff,(int)i);
      #line 376 
      buff += 43U;
      #line 374 
      i = (u16)((int)i + 1);
    }
    #line 379 
    tmp_6 = buff;
    #line 379 
    buff ++;
    #line 379 
    *tmp_6 = fm10k_read_reg(hw,8387);
    #line 380 
    tmp_7 = buff;
    #line 380 
    buff ++;
    #line 380 
    *tmp_7 = fm10k_read_reg(hw,8388);
    #line 382 
    i = (unsigned short)0U;
    #line 382 
    while ((unsigned int)i <= 127U) {
      #line 383 
      fm10k_get_reg_q(hw,buff,(int)i);
      #line 384 
      buff += 29U;
      #line 382 
      i = (u16)((int)i + 1);
    }
    #line 387 
    tmp_8 = buff;
    #line 387 
    buff ++;
    #line 387 
    *tmp_8 = fm10k_read_reg(hw,8391);
    #line 389 
    i = (unsigned short)0U;
    #line 389 
    while ((unsigned int)i <= 7U) {
      #line 390 
      u32 *tmp_9;
      #line 390 
      tmp_9 = buff;
      #line 390 
      buff ++;
      #line 390 
      *tmp_9 = fm10k_read_reg(hw,(int)i + 65664);
      #line 389 
      i = (u16)((int)i + 1);
    }
    #line 393 
    i = (unsigned short)0U;
    #line 393 
    while ((unsigned int)i <= 129U) {
      #line 394 
      u32 *tmp_10;
      #line 394 
      tmp_10 = buff;
      #line 394 
      buff ++;
      #line 394 
      *tmp_10 = fm10k_read_reg(hw,(int)i + 74752);
      #line 393 
      i = (u16)((int)i + 1);
    }
    #line 396 
    break;
    #line 397 
    case (unsigned int)2: 
                          #line 397 
    ;
    #line 399 
    tmp_11 = buff;
    #line 399 
    buff ++;
    #line 399 
    *tmp_11 = fm10k_read_reg(hw,0);
    #line 400 
    tmp_12 = buff;
    #line 400 
    buff ++;
    #line 400 
    *tmp_12 = fm10k_read_reg(hw,48);
    #line 401 
    tmp_13 = buff;
    #line 401 
    buff ++;
    #line 401 
    *tmp_13 = fm10k_read_reg(hw,64);
    #line 404 
    i = (unsigned short)0U;
    #line 404 
    while ((unsigned int)i <= 7U) {
      #line 405 
      u32 *tmp_14;
      #line 405 
      tmp_14 = buff;
      #line 405 
      buff ++;
      #line 405 
      *tmp_14 = fm10k_read_reg(hw,(int)i + 96);
      #line 404 
      i = (u16)((int)i + 1);
    }
    #line 407 
    fm10k_get_reg_vsi(hw,buff,0);
    #line 408 
    buff += 43U;
    #line 410 
    i = (unsigned short)0U;
    #line 410 
    while ((unsigned int)i <= 15U) {
      #line 411 
      if ((int)hw->mac.max_queues > (int)i) 
                                            #line 412 
                                            fm10k_get_reg_q(hw,buff,(int)i); else 
                                                                    #line 414 
                                                                    memset((void *)buff,0,116UL);
      #line 415 
      buff += 29U;
      #line 410 
      i = (u16)((int)i + 1);
    }
    #line 418 
    break;
    #line 419 
    default: 
             #line 419 
    ;
    #line 420 
    return;
  }
  #line 422 
  return;
}

#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_get_regs_len(struct net_device *netdev)
{
  #line 432 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 433 
  struct fm10k_hw *hw = & interface->hw;
  #line 435 
  switch ((unsigned int)hw->mac.type) {
    #line 436 
    case (unsigned int)1: 
                          #line 436 
    ;
    #line 437 
    return 26676;
    #line 438 
    case (unsigned int)2: 
                          #line 438 
    ;
    #line 439 
    return 2072;
    #line 440 
    default: 
             #line 440 
    ;
    #line 441 
    return 0;
  }
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 448 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 450 
  strncpy((char *)(& info->driver),(char *)(& fm10k_driver_name),31UL);
  #line 452 
  strncpy((char *)(& info->version),(char *)(& fm10k_driver_version),31UL);
  #line 454 
  ;
  #line 454 
  strncpy((char *)(& info->bus_info),pci_name(interface->pdev),31UL);
  #line 455 
  return;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 461 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 464 
  pause->autoneg = 0U;
  #line 465 
  pause->tx_pause = 1U;
  #line 467 
  pause->rx_pause = (unsigned int)((unsigned int)interface->rx_pause != 0U);
  #line 468 
  return;
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 473 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 474 
  struct fm10k_hw *hw = & interface->hw;
  #line 476 
  if (pause->autoneg != 0U || pause->tx_pause == 0U) 
                                                     #line 477 
                                                     return -22;
  #line 480 
  if (hw->mac.type == (unsigned int)fm10k_mac_pf) 
    #line 481 
    if (pause->rx_pause != 0U) 
                               #line 481 
                               interface->rx_pause = (unsigned char)255U; else 
                                                                    #line 481 
                                                                    interface->rx_pause = (unsigned char)0U;
  else 
    #line 482 
    if (pause->rx_pause != 0U) 
                               #line 483 
                               return -22;
  #line 485 
  if ((int)netif_running(dev) != 0) 
                                    #line 486 
                                    fm10k_update_rx_drop_en(interface);
  #line 488 
  return 0;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static u32 fm10k_get_msglevel(struct net_device *netdev)
{
  #line 493 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 495 
  return (unsigned int)interface->msg_enable;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_set_msglevel(struct net_device *netdev, u32 data)
{
  #line 500 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 502 
  interface->msg_enable = (unsigned short)data;
  #line 503 
  return;
}

#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 508 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 510 
  ring->rx_max_pending = 4096U;
  #line 511 
  ring->tx_max_pending = 4096U;
  #line 512 
  ring->rx_mini_max_pending = 0U;
  #line 513 
  ring->rx_jumbo_max_pending = 0U;
  #line 514 
  ring->rx_pending = (unsigned int)interface->rx_ring_count;
  #line 515 
  ring->tx_pending = (unsigned int)interface->tx_ring_count;
  #line 516 
  ring->rx_mini_pending = 0U;
  #line 517 
  ring->rx_jumbo_pending = 0U;
  #line 518 
  return;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 531 
  unsigned int __UNIQUE_ID___x446;
  #line 559 
  int __UNIQUE_ID___x452;
  #line 559 
  int tmp_10;
  #line 531 
  unsigned int tmp_2;
  #line 535 
  unsigned int __UNIQUE_ID___x450;
  #line 535 
  unsigned int tmp_6;
  #line 524 
  struct fm10k_ring *temp_ring;
  #line 525 
  int i;
  #line 526 
  u32 new_rx_count;
  #line 526 
  u32 new_tx_count;
  #line 523 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 525 
  int err = 0;
  #line 528 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) 
                                                                   #line 529 
                                                                   return -22;
  {
    #line 531 
    unsigned int __UNIQUE_ID___x444;
    #line 531 
    unsigned int tmp_0;
    {
      #line 531 
      __UNIQUE_ID___x444 = ring->tx_pending;
      #line 531 
      unsigned int __UNIQUE_ID___y445 = 128U;
      #line 531 
      if (__UNIQUE_ID___x444 > __UNIQUE_ID___y445) 
                                                   #line 531 
                                                   tmp_0 = __UNIQUE_ID___x444; else 
                                                                    #line 531 
                                                                    tmp_0 = __UNIQUE_ID___y445;
      }
    #line 531 
    __UNIQUE_ID___x446 = tmp_0;
    #line 531 
    unsigned int __UNIQUE_ID___y447 = 4096U;
    #line 531 
    if (__UNIQUE_ID___x446 < __UNIQUE_ID___y447) 
                                                 #line 531 
                                                 tmp_2 = __UNIQUE_ID___x446; else 
                                                                    #line 531 
                                                                    tmp_2 = __UNIQUE_ID___y447;
    }
  #line 531 
  new_tx_count = tmp_2;
  #line 533 
  new_tx_count = (new_tx_count + 7U) & 4294967288U;
  {
    #line 535 
    unsigned int __UNIQUE_ID___x448;
    #line 535 
    unsigned int tmp_4;
    {
      #line 535 
      __UNIQUE_ID___x448 = ring->rx_pending;
      #line 535 
      unsigned int __UNIQUE_ID___y449 = 128U;
      #line 535 
      if (__UNIQUE_ID___x448 > __UNIQUE_ID___y449) 
                                                   #line 535 
                                                   tmp_4 = __UNIQUE_ID___x448; else 
                                                                    #line 535 
                                                                    tmp_4 = __UNIQUE_ID___y449;
      }
    #line 535 
    __UNIQUE_ID___x450 = tmp_4;
    #line 535 
    unsigned int __UNIQUE_ID___y451 = 4096U;
    #line 535 
    if (__UNIQUE_ID___x450 < __UNIQUE_ID___y451) 
                                                 #line 535 
                                                 tmp_6 = __UNIQUE_ID___x450; else 
                                                                    #line 535 
                                                                    tmp_6 = __UNIQUE_ID___y451;
    }
  #line 535 
  new_rx_count = tmp_6;
  #line 537 
  new_rx_count = (new_rx_count + 7U) & 4294967288U;
  #line 539 
  if ((unsigned int)interface->tx_ring_count == new_tx_count && (unsigned int)interface->rx_ring_count == new_rx_count) 
    #line 542 
    return 0;
  #line 545 
  while (1) {
    #line 545 
    if (! ((int)test_and_set_bit(0L,(unsigned long *)(& interface->state)) != 0)) 
      #line 545 
      break;
    #line 546 
    usleep_range(1000UL,2000UL);
  }
  #line 548 
  if (! netif_running(interface->netdev)) {
    #line 549 
    i = 0;
    #line 549 
    while (interface->num_tx_queues > i) {
      #line 550 
      (interface->tx_ring[i])->count = (unsigned short)new_tx_count;
      #line 549 
      i ++;
    }
    #line 551 
    i = 0;
    #line 551 
    while (interface->num_rx_queues > i) {
      #line 552 
      (interface->rx_ring[i])->count = (unsigned short)new_rx_count;
      #line 551 
      i ++;
    }
    #line 553 
    interface->tx_ring_count = (unsigned short)new_tx_count;
    #line 554 
    interface->rx_ring_count = (unsigned short)new_rx_count;
    #line 555 
    goto clear_reset;
  }
  {
    #line 559 
    __UNIQUE_ID___x452 = interface->num_tx_queues;
    #line 559 
    int __UNIQUE_ID___y453 = interface->num_rx_queues;
    #line 559 
    if (__UNIQUE_ID___x452 > __UNIQUE_ID___y453) 
                                                 #line 559 
                                                 tmp_10 = __UNIQUE_ID___x452; else 
                                                                    #line 559 
                                                                    tmp_10 = __UNIQUE_ID___y453;
    }
  #line 559 
  i = tmp_10;
  #line 560 
  temp_ring = (struct fm10k_ring *)cif_vmalloc(array_size((unsigned long)i,4096UL));
  #line 562 
  if (temp_ring == (struct fm10k_ring *)0) {
    #line 563 
    err = -12;
    #line 564 
    goto clear_reset;
  }
  #line 567 
  fm10k_down(interface);
  #line 574 
  if ((unsigned int)interface->tx_ring_count != new_tx_count) {
    #line 575 
    i = 0;
    #line 575 
    while (interface->num_tx_queues > i) {
      #line 576 
      memcpy((void *)(temp_ring + (unsigned long)i),(void *)interface->tx_ring[i],4096UL);
      #line 579 
      (temp_ring + (unsigned long)i)->count = (unsigned short)new_tx_count;
      #line 580 
      err = fm10k_setup_tx_resources(temp_ring + (unsigned long)i);
      #line 581 
      if (err != 0) {
        #line 582 
        while (i != 0) {
          #line 583 
          i --;
          #line 584 
          fm10k_free_tx_resources(temp_ring + (unsigned long)i);
        }
        #line 586 
        goto err_setup;
      }
      #line 575 
      i ++;
    }
    #line 590 
    i = 0;
    #line 590 
    while (interface->num_tx_queues > i) {
      #line 591 
      fm10k_free_tx_resources(interface->tx_ring[i]);
      #line 593 
      memcpy((void *)interface->tx_ring[i],(void *)(temp_ring + (unsigned long)i),4096UL);
      #line 590 
      i ++;
    }
    #line 597 
    interface->tx_ring_count = (unsigned short)new_tx_count;
  }
  #line 601 
  if ((unsigned int)interface->rx_ring_count != new_rx_count) {
    #line 602 
    i = 0;
    #line 602 
    while (interface->num_rx_queues > i) {
      #line 603 
      memcpy((void *)(temp_ring + (unsigned long)i),(void *)interface->rx_ring[i],4096UL);
      #line 606 
      (temp_ring + (unsigned long)i)->count = (unsigned short)new_rx_count;
      #line 607 
      err = fm10k_setup_rx_resources(temp_ring + (unsigned long)i);
      #line 608 
      if (err != 0) {
        #line 609 
        while (i != 0) {
          #line 610 
          i --;
          #line 611 
          fm10k_free_rx_resources(temp_ring + (unsigned long)i);
        }
        #line 613 
        goto err_setup;
      }
      #line 602 
      i ++;
    }
    #line 617 
    i = 0;
    #line 617 
    while (interface->num_rx_queues > i) {
      #line 618 
      fm10k_free_rx_resources(interface->rx_ring[i]);
      #line 620 
      memcpy((void *)interface->rx_ring[i],(void *)(temp_ring + (unsigned long)i),4096UL);
      #line 617 
      i ++;
    }
    #line 624 
    interface->rx_ring_count = (unsigned short)new_rx_count;
  }
  #line 627 
  err_setup: 
             #line 627 
  ;
  #line 628 
  fm10k_up(interface);
  #line 629 
  cif_vfree((void *)temp_ring);
  #line 630 
  clear_reset: 
               #line 630 
  ;
  #line 631 
  cif_clear_bit(0L,(unsigned long *)(& interface->state));
  #line 632 
  return err;
}

#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_get_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 638 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 640 
  ec->use_adaptive_tx_coalesce = (unsigned int)(((int)interface->tx_itr & 32768) != 0);
  #line 641 
  ec->tx_coalesce_usecs = (unsigned int)interface->tx_itr & 4294934527U;
  #line 643 
  ec->use_adaptive_rx_coalesce = (unsigned int)(((int)interface->rx_itr & 32768) != 0);
  #line 644 
  ec->rx_coalesce_usecs = (unsigned int)interface->rx_itr & 4294934527U;
  #line 646 
  return 0;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 653 
  u16 tx_itr;
  #line 653 
  u16 rx_itr;
  #line 654 
  int i;
  #line 652 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 657 
  if (ec->rx_coalesce_usecs > 4095U || ec->tx_coalesce_usecs > 4095U) 
    #line 659 
    return -22;
  #line 662 
  tx_itr = (unsigned short)ec->tx_coalesce_usecs;
  #line 663 
  rx_itr = (unsigned short)ec->rx_coalesce_usecs;
  #line 666 
  if (ec->use_adaptive_tx_coalesce != 0U) 
                                          #line 667 
                                          tx_itr = (unsigned short)32793U;
  #line 669 
  if (ec->use_adaptive_rx_coalesce != 0U) 
                                          #line 670 
                                          rx_itr = (unsigned short)32818U;
  #line 673 
  interface->tx_itr = tx_itr;
  #line 674 
  interface->rx_itr = rx_itr;
  #line 677 
  i = 0;
  #line 677 
  while (interface->num_q_vectors > i) {
    {
      #line 678 
      struct fm10k_q_vector *qv = interface->q_vector[i];
      #line 680 
      qv->tx.itr = tx_itr;
      #line 681 
      qv->rx.itr = rx_itr;
    }
    #line 677 
    i ++;
  }
  #line 684 
  return 0;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_get_rss_hash_opts(struct fm10k_intfc *interface, struct ethtool_rxnfc *cmd)
{
  #line 690 
  cmd->data = 0ULL;
  #line 693 
  switch (cmd->flow_type) {
    #line 694 
    case (__u32)1: 
                   #line 694 
    ;
    #line 695 
    case (__u32)5: 
                   #line 695 
    ;
    #line 696 
    cmd->data |= 192ULL;
    #line 698 
    case (__u32)2: 
                   #line 698 
    ;
    #line 699 
    if ((int)test_bit(1L,(unsigned long *)(& interface->flags)) != 0) 
      #line 701 
      cmd->data |= 192ULL;
    #line 703 
    case (__u32)3: 
                   #line 703 
    ;
    #line 704 
    case (__u32)7: 
                   #line 704 
    ;
    #line 705 
    case (__u32)4: 
                   #line 705 
    ;
    #line 706 
    case (__u32)8: 
                   #line 706 
    ;
    #line 707 
    case (__u32)9: 
                   #line 707 
    ;
    #line 708 
    case (__u32)11: 
                    #line 708 
    ;
    #line 709 
    case (__u32)10: 
                    #line 709 
    ;
    #line 710 
    case (__u32)12: 
                    #line 710 
    ;
    #line 711 
    case (__u32)16: 
                    #line 711 
    ;
    #line 712 
    case (__u32)17: 
                    #line 712 
    ;
    #line 713 
    cmd->data |= 48ULL;
    #line 714 
    break;
    #line 715 
    case (__u32)6: 
                   #line 715 
    ;
    #line 716 
    if ((int)test_bit(2L,(unsigned long *)(& interface->flags)) != 0) 
      #line 718 
      cmd->data |= 192ULL;
    #line 719 
    cmd->data |= 48ULL;
    #line 720 
    break;
    #line 721 
    default: 
             #line 721 
    ;
    #line 722 
    return -22;
  }
  #line 725 
  return 0;
}

#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 731 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 732 
  int ret = -95;
  #line 734 
  switch (cmd->cmd) {
    #line 735 
    case (__u32)45: 
                    #line 735 
    ;
    #line 736 
    cmd->data = (unsigned long long)interface->num_rx_queues;
    #line 737 
    ret = 0;
    #line 738 
    break;
    #line 739 
    case (__u32)41: 
                    #line 739 
    ;
    #line 740 
    ret = fm10k_get_rss_hash_opts(interface,cmd);
    #line 741 
    break;
    #line 742 
    default: 
             #line 742 
    ;
    #line 743 
    break;
  }
  #line 746 
  return ret;
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_rss_hash_opt(struct fm10k_intfc *interface, struct ethtool_rxnfc *nfc)
{
  #line 752 
  int rss_ipv4_udp = (int)test_bit(1L,(unsigned long *)(& interface->flags));
  #line 754 
  int rss_ipv6_udp = (int)test_bit(2L,(unsigned long *)(& interface->flags));
  #line 760 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) 
                                                     #line 762 
                                                     return -22;
  #line 764 
  switch (nfc->flow_type) {
    #line 765 
    case (__u32)1: 
                   #line 765 
    ;
    #line 766 
    case (__u32)5: 
                   #line 766 
    ;
    #line 767 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) == 0ULL) || (nfc->data & 128ULL) == 0ULL) 
      #line 771 
      return -22;
    #line 772 
    break;
    #line 773 
    case (__u32)2: 
                   #line 773 
    ;
    #line 774 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) 
                                                                    #line 776 
                                                                    return -22;
    #line 777 
    switch (nfc->data & 192ULL) {
      #line 778 
      case (unsigned long long)0: 
                                  #line 778 
      ;
      #line 779 
      cif_clear_bit(1L,(unsigned long *)(& interface->flags));
      #line 781 
      break;
      #line 782 
      case (unsigned long long)192: 
                                    #line 782 
      ;
      #line 783 
      cif_set_bit(1L,(unsigned long *)(& interface->flags));
      #line 785 
      break;
      #line 786 
      default: 
               #line 786 
      ;
      #line 787 
      return -22;
    }
    #line 789 
    break;
    #line 790 
    case (__u32)6: 
                   #line 790 
    ;
    #line 791 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) 
                                                                    #line 793 
                                                                    return -22;
    #line 794 
    switch (nfc->data & 192ULL) {
      #line 795 
      case (unsigned long long)0: 
                                  #line 795 
      ;
      #line 796 
      cif_clear_bit(2L,(unsigned long *)(& interface->flags));
      #line 798 
      break;
      #line 799 
      case (unsigned long long)192: 
                                    #line 799 
      ;
      #line 800 
      cif_set_bit(2L,(unsigned long *)(& interface->flags));
      #line 802 
      break;
      #line 803 
      default: 
               #line 803 
      ;
      #line 804 
      return -22;
    }
    #line 806 
    break;
    #line 807 
    case (__u32)4: 
                   #line 807 
    ;
    #line 808 
    case (__u32)9: 
                   #line 808 
    ;
    #line 809 
    case (__u32)10: 
                    #line 809 
    ;
    #line 810 
    case (__u32)3: 
                   #line 810 
    ;
    #line 811 
    case (__u32)8: 
                   #line 811 
    ;
    #line 812 
    case (__u32)11: 
                    #line 812 
    ;
    #line 813 
    case (__u32)12: 
                    #line 813 
    ;
    #line 814 
    case (__u32)7: 
                   #line 814 
    ;
    #line 815 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) != 0ULL) || (nfc->data & 128ULL) != 0ULL) 
      #line 819 
      return -22;
    #line 820 
    break;
    #line 821 
    default: 
             #line 821 
    ;
    #line 822 
    return -22;
  }
  #line 829 
  ;
  #line 829 
  if ((int)test_bit(1L,(unsigned long *)(& interface->flags)) != rss_ipv4_udp) 
    #line 829 
    goto _LOR;
  else {
    #line 831 
    ;
    #line 831 
    if ((int)test_bit(2L,(unsigned long *)(& interface->flags)) != rss_ipv6_udp) {
      #line 829 
      _LOR: {
              #line 835 
              u32 mrqc;
              #line 833 
              struct fm10k_hw *hw = & interface->hw;
              #line 834 
              bool warn = (_Bool)0;
              #line 838 
              mrqc = 51U;
              #line 843 
              if ((int)test_bit(1L,(unsigned long *)(& interface->flags)) != 0) {
                #line 845 
                mrqc |= 64U;
                #line 846 
                warn = (_Bool)1;
              }
              #line 848 
              if ((int)test_bit(2L,(unsigned long *)(& interface->flags)) != 0) {
                #line 850 
                mrqc |= 128U;
                #line 851 
                warn = (_Bool)1;
              }
              #line 857 
              if ((int)warn != 0) 
                #line 858 
                if (((int)interface->msg_enable & 1) != 0) 
                                                           #line 858 
                                                           netdev_warn(interface->netdev,(char *)"enabling UDP RSS: fragmented packets may arrive out of order to the stack above\n");
              {
                #line 862 
                union __anonunion___u_3716 __u;
                #line 861 
                __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
                #line 861 
                u32 *hw_addr = (__u.__val);
                #line 861 
                if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                                        #line 861 
                                                        writel(mrqc,(void *)(hw_addr + 8448U));
              }
            }
    }
  }
  #line 864 
  return 0;
}

#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
{
  #line 869 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 870 
  int ret = -95;
  #line 872 
  switch (cmd->cmd) {
    #line 873 
    case (__u32)42: 
                    #line 873 
    ;
    #line 874 
    ret = fm10k_set_rss_hash_opt(interface,cmd);
    #line 875 
    break;
    #line 876 
    default: 
             #line 876 
    ;
    #line 877 
    break;
  }
  #line 880 
  return ret;
}

#line 883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_mbx_test(struct fm10k_intfc *interface, u64 *data)
{
  #line 887 
  u32 attr_flag;
  #line 887 
  u32 test_msg[6U];
  #line 888 
  unsigned long timeout;
  #line 930 
  unsigned int tmp_1;
  #line 885 
  struct fm10k_hw *hw = & interface->hw;
  #line 886 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 889 
  int err = -22;
  #line 892 
  if (hw->mac.type != (unsigned int)fm10k_mac_vf) 
                                                  #line 893 
                                                  return 0;
  #line 896 
  attr_flag = 1U;
  #line 896 
  while (attr_flag <= 16777215U) {
    #line 900 
    fm10k_tlv_msg_test_create((u32 *)(& test_msg),attr_flag);
    #line 902 
    fm10k_mbx_lock_0(interface);
    #line 903 
    mbx->test_result = 2147483647;
    #line 904 
    err = (*(mbx->ops.enqueue_tx))(hw,mbx,(u32 *)(& test_msg));
    #line 905 
    fm10k_mbx_unlock_0(interface);
    #line 908 
    timeout = jiffies + 250UL;
    #line 909 
    while (1) {
      #line 910 
      if (err < 0) 
                   #line 911 
                   goto err_out;
      #line 913 
      usleep_range(500UL,1000UL);
      #line 915 
      fm10k_mbx_lock_0(interface);
      #line 916 
      (*(mbx->ops.process))(hw,mbx);
      #line 917 
      fm10k_mbx_unlock_0(interface);
      #line 919 
      err = mbx->test_result;
      #line 920 
      if (err == 0) 
                    #line 921 
                    break;
      {
        #line 922 
        unsigned long __dummy;
        #line 922 
        unsigned long __dummy2;
        }
      #line 922 
      if (1 != 0) {
        {
          #line 922 
          unsigned long __dummy_0;
          #line 922 
          unsigned long __dummy2_0;
          }
        #line 922 
        if (1 != 0) {
          #line 922 
          if (! ((long)(jiffies - timeout) < 0L)) 
                                                  #line 909 
                                                  break;
        }
        else 
             #line 909 
             break;
      }
      else 
           #line 909 
           break;
    }
    #line 925 
    if (err != 0) 
                  #line 926 
                  goto err_out;
    #line 897 
    attr_flag *= 2U;
  }
  #line 929 
  err_out: 
           #line 929 
  ;
  #line 930 
  if (err >= 0) 
                #line 930 
                tmp_1 = (unsigned int)(err > 0); else 
                                                      #line 930 
                                                      tmp_1 = attr_flag;
  #line 930 
  *data = (unsigned long long)tmp_1;
  #line 931 
  return err;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_self_test(struct net_device *dev, struct ethtool_test *eth_test, u64 *data)
{
  #line 937 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 938 
  struct fm10k_hw *hw = & interface->hw;
  #line 940 
  memset((void *)data,0,8UL);
  #line 942 
  if ((long)(hw->hw_addr == (u32 *)0U) != 0L) {
    #line 943 
    if (((int)interface->msg_enable & 1) != 0) 
                                               #line 943 
                                               netdev_err(dev,(char *)"Interface removed - test blocked\n");
    #line 945 
    eth_test->flags |= 2U;
    #line 946 
    return;
  }
  #line 949 
  if (fm10k_mbx_test(interface,data) != 0) 
                                           #line 950 
                                           eth_test->flags |= 2U;
  #line 951 
  return;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static u32 fm10k_get_priv_flags(struct net_device *netdev)
{
  #line 955 
  return 0U;
}

#line 958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_priv_flags(struct net_device *netdev, u32 priv_flags)
{
  #line 960 
  if (priv_flags != 0U) 
                        #line 961 
                        return -22;
  #line 963 
  return 0;
}

#line 966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static u32 fm10k_get_reta_size(struct net_device *netdev)
{
  #line 968 
  return 128U;
}

#line 971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
void fm10k_write_reta(struct fm10k_intfc *interface, u32 *indir)
{
  #line 975 
  u32 table[4U];
  #line 976 
  int i;
  #line 976 
  int j;
  #line 973 
  u16 rss_i = interface->ring_feature[0].indices;
  #line 974 
  struct fm10k_hw *hw = & interface->hw;
  #line 979 
  i = 0;
  #line 979 
  while (i <= 31) {
    {
      #line 980 
      u32 reta;
      #line 980 
      u32 n;
      #line 983 
      j = 0;
      #line 983 
      while (j <= 3) {
        #line 984 
        if (indir != (u32 *)0U) 
                                #line 985 
                                n = *(indir + (unsigned long)(i * 4 + j)); else 
                                                                    #line 987 
                                                                    n = ethtool_rxfh_indir_default((unsigned int)(i * 4 + j),(unsigned int)rss_i);
        #line 990 
        table[j] = n;
        #line 983 
        j ++;
      }
      #line 993 
      reta = ((table[0] | (table[1] << 8)) | (table[2] << 16)) | (table[3] << 24);
      #line 998 
      if (interface->reta[i] == reta) 
                                      #line 999 
                                      goto __Cont;
      #line 1001 
      interface->reta[i] = reta;
      {
        #line 1003 
        union __anonunion___u_3718 __u;
        #line 1002 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 1002 
        u32 *hw_addr = (__u.__val);
        #line 1002 
        if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                                #line 1002 
                                                writel(reta,(void *)(hw_addr + ((unsigned long)i + (unsigned long)4096U)));
      }
    }
    #line 979 
    __Cont: 
            #line 979 
    i ++;
  }
  #line 1005 
  return;
}

#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_get_reta(struct net_device *netdev, u32 *indir)
{
  #line 1009 
  int i;
  #line 1008 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 1011 
  if (indir == (u32 *)0U) 
                          #line 1012 
                          return 0;
  #line 1014 
  i = 0;
  #line 1014 
  while (i <= 31) {
    {
      #line 1015 
      u32 reta = interface->reta[i];
      #line 1017 
      *indir = reta & 255U;
      #line 1018 
      *(indir + 1U) = (reta << 16) >> 24;
      #line 1019 
      *(indir + 2U) = (reta << 8) >> 24;
      #line 1020 
      *(indir + 3U) = reta >> 24;
    }
    #line 1014 
    i ++;
    #line 1014 
    indir += 4U;
  }
  #line 1023 
  return 0;
}

#line 1026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_reta(struct net_device *netdev, u32 *indir)
{
  #line 1029 
  int i;
  #line 1030 
  u16 rss_i;
  #line 1028 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 1032 
  if (indir == (u32 *)0U) 
                          #line 1033 
                          return 0;
  #line 1036 
  rss_i = interface->ring_feature[0].indices;
  #line 1037 
  i = (int)fm10k_get_reta_size(netdev);
  #line 1037 
  while (1) {
    #line 1037 
    int tmp_1;
    #line 1037 
    tmp_1 = i;
    #line 1037 
    i --;
    #line 1037 
    ;
    #line 1037 
    if (! (tmp_1 != 0)) 
                        #line 1037 
                        break;
    #line 1038 
    if (*(indir + (unsigned long)i) < (unsigned int)rss_i) 
                                                           #line 1039 
                                                           goto __Cont;
    #line 1040 
    return -22;
    #line 1037 
    __Cont: 
            #line 1037 
    ;
  }
  #line 1043 
  fm10k_write_reta(interface,indir);
  #line 1045 
  return 0;
}

#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static u32 fm10k_get_rssrk_size(struct net_device *netdev)
{
  #line 1050 
  return 40U;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_get_rssh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 1057 
  int i;
  #line 1057 
  int err;
  #line 1056 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 1059 
  if (hfunc != (u8 *)0U) 
                         #line 1060 
                         *hfunc = (unsigned char)1U;
  #line 1062 
  err = fm10k_get_reta(netdev,indir);
  #line 1063 
  if (err != 0 || key == (u8 *)0U) 
                                   #line 1064 
                                   return err;
  #line 1066 
  i = 0;
  #line 1066 
  while (i <= 9) {
    #line 1067 
    *((__le32 *)key) = interface->rssrk[i];
    #line 1066 
    i ++;
    #line 1066 
    key += 4U;
  }
  #line 1069 
  return 0;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_rssh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 1077 
  int i;
  #line 1077 
  int err;
  #line 1075 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 1076 
  struct fm10k_hw *hw = & interface->hw;
  #line 1080 
  if ((unsigned int)hfunc > 1U) 
                                #line 1081 
                                return -95;
  #line 1083 
  err = fm10k_set_reta(netdev,indir);
  #line 1084 
  if (err != 0 || key == (u8 *)0U) 
                                   #line 1085 
                                   return err;
  #line 1087 
  i = 0;
  #line 1087 
  while (i <= 9) {
    {
      #line 1088 
      u32 rssrk = *((__le32 *)key);
      #line 1090 
      if (interface->rssrk[i] == rssrk) 
                                        #line 1091 
                                        goto __Cont;
      #line 1093 
      interface->rssrk[i] = rssrk;
      {
        #line 1095 
        union __anonunion___u_3720 __u;
        #line 1094 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 1094 
        u32 *hw_addr = (__u.__val);
        #line 1094 
        if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                                #line 1094 
                                                writel(rssrk,(void *)(hw_addr + ((unsigned long)i + (unsigned long)2048U)));
      }
    }
    #line 1087 
    __Cont: 
            #line 1087 
    i ++;
    #line 1087 
    key += 4U;
  }
  #line 1097 
  return 0;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static unsigned int fm10k_max_channels(struct net_device *dev)
{
  #line 1102 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1103 
  unsigned int max_combined = (unsigned int)interface->hw.mac.max_queues;
  #line 1104 
  u8 tcs = (unsigned char)netdev_get_num_tc(dev);
  #line 1107 
  if ((unsigned int)tcs > 1U) {
    #line 1108 
    max_combined = (unsigned int)(1UL << (fls(max_combined / (unsigned int)tcs) + -1));
  }
  #line 1110 
  return max_combined;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static void fm10k_get_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  #line 1116 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1119 
  ch->max_combined = fm10k_max_channels(dev);
  #line 1122 
  ch->max_other = 1U;
  #line 1123 
  ch->other_count = ch->max_other;
  #line 1126 
  ch->combined_count = (unsigned int)interface->ring_feature[0].indices;
  #line 1127 
  return;
}

#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static int fm10k_set_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  #line 1132 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1133 
  unsigned int count = ch->combined_count;
  #line 1136 
  if ((count == 0U || ch->rx_count != 0U) || ch->tx_count != 0U) 
                                                                 #line 1137 
                                                                 return -22;
  #line 1140 
  if (ch->other_count != 1U) 
                             #line 1141 
                             return -22;
  #line 1144 
  ;
  #line 1144 
  if (fm10k_max_channels(dev) < count) 
                                       #line 1145 
                                       return -22;
  #line 1147 
  interface->ring_feature[0].limit = (unsigned short)count;
  #line 1150 
  ;
  #line 1150 
  return fm10k_setup_tc(dev,
                       (unsigned char)((int)((unsigned char)netdev_get_num_tc(dev))));
}

#line 1153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
static struct ethtool_ops fm10k_ethtool_ops = {.get_drvinfo = & fm10k_get_drvinfo, .get_regs_len = & fm10k_get_regs_len, .get_regs = & fm10k_get_regs, .get_msglevel = & fm10k_get_msglevel, .set_msglevel = & fm10k_set_msglevel, .get_link = & ethtool_op_get_link, .get_coalesce = & fm10k_get_coalesce, .set_coalesce = & fm10k_set_coalesce, .get_ringparam = & fm10k_get_ringparam, .set_ringparam = & fm10k_set_ringparam, .get_pauseparam = & fm10k_get_pauseparam, .set_pauseparam = & fm10k_set_pauseparam, .self_test = & fm10k_self_test, .get_strings = & fm10k_get_strings, .get_ethtool_stats = & fm10k_get_ethtool_stats, .get_priv_flags = & fm10k_get_priv_flags, .set_priv_flags = & fm10k_set_priv_flags, .get_sset_count = & fm10k_get_sset_count, .get_rxnfc = & fm10k_get_rxnfc, .set_rxnfc = & fm10k_set_rxnfc, .get_rxfh_key_size = & fm10k_get_rssrk_size, .get_rxfh_indir_size = & fm10k_get_reta_size, .get_rxfh = & fm10k_get_rssh, .set_rxfh = & fm10k_set_rssh, .get_channels = & fm10k_get_channels, .set_channels = & fm10k_set_channels, .get_ts_info = & ethtool_op_get_ts_info};
#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_ethtool.c"
void fm10k_set_ethtool_ops(struct net_device *dev)
{
  #line 1185 
  dev->ethtool_ops = & fm10k_ethtool_ops;
  #line 1186 
  return;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 110 
  fm10k_get_channels(arg0,arg1);
  #line 111 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 115 
  return fm10k_get_coalesce(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 120 
  fm10k_get_drvinfo(arg0,arg1);
  #line 121 
  return;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 125 
  fm10k_get_ethtool_stats(arg0,arg1,arg2);
  #line 126 
  return;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
unsigned int emg_wrapper_fm10k_get_msglevel(struct net_device *arg0)
{
  #line 130 
  return fm10k_get_msglevel(arg0);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 135 
  fm10k_get_pauseparam(arg0,arg1);
  #line 136 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
unsigned int emg_wrapper_fm10k_get_priv_flags(struct net_device *arg0)
{
  #line 140 
  return fm10k_get_priv_flags(arg0);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 145 
  fm10k_get_regs(arg0,arg1,arg2);
  #line 146 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_get_regs_len(struct net_device *arg0)
{
  #line 150 
  return fm10k_get_regs_len(arg0);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
unsigned int emg_wrapper_fm10k_get_reta_size(struct net_device *arg0)
{
  #line 155 
  return fm10k_get_reta_size(arg0);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 160 
  fm10k_get_ringparam(arg0,arg1);
  #line 161 
  return;
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_get_rssh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 165 
  return fm10k_get_rssh(arg0,arg1,arg2,arg3);
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
unsigned int emg_wrapper_fm10k_get_rssrk_size(struct net_device *arg0)
{
  #line 170 
  return fm10k_get_rssrk_size(arg0);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 175 
  return fm10k_get_rxnfc(arg0,arg1,arg2);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 180 
  return fm10k_get_sset_count(arg0,arg1);
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 185 
  fm10k_get_strings(arg0,arg1,arg2);
  #line 186 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 190 
  fm10k_self_test(arg0,arg1,arg2);
  #line 191 
  return;
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 195 
  return fm10k_set_channels(arg0,arg1);
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 200 
  return fm10k_set_coalesce(arg0,arg1);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
void emg_wrapper_fm10k_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 205 
  fm10k_set_msglevel(arg0,arg1);
  #line 206 
  return;
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 210 
  return fm10k_set_pauseparam(arg0,arg1);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_set_priv_flags(struct net_device *arg0, unsigned int arg1)
{
  #line 215 
  return fm10k_set_priv_flags(arg0,arg1);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 220 
  return fm10k_set_ringparam(arg0,arg1);
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_set_rssh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 225 
  return fm10k_set_rssh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
int emg_wrapper_fm10k_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 230 
  return fm10k_set_rxnfc(arg0,arg1);
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 252 
  ldv_set_bit(nr,addr);
  #line 253 
  return;
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 259 
  ldv_clear_bit(nr,addr);
  #line 260 
  return;
}

#line 795  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc_0(spinlock_t *lock)
{
  #line 798 
  ldv_spin_model_lock((char *)"mbx_lock_of_fm10k_intfc");
  #line 800 
  spin_lock_0(lock);
  #line 801 
  return;
}

#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc_0(spinlock_t *lock)
{
  #line 807 
  ldv_spin_model_unlock((char *)"mbx_lock_of_fm10k_intfc");
  #line 809 
  spin_unlock_0(lock);
  #line 810 
  return;
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 838 
  return ldv_vmalloc(size);
}

#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_ethtool.i.aux"
static void cif_vfree(void *addr)
{
  #line 845 
  ldv_vfree(addr);
  #line 846 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3733 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3735 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_init(struct list_head *entry)
{
  #line 190 
  __list_del_entry(entry);
  #line 191 
  INIT_LIST_HEAD(entry);
  #line 192 
  return;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_3787 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 598  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc_1(spinlock_t *lock);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 728  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_spin_trylock_mbx_lock_of_fm10k_intfc(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 638  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc_1(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 767  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc(spinlock_t *lock, unsigned long flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 758 
static void cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 750  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
__inline static struct delayed_work *to_delayed_work(struct work_struct *work)
{
  #line 160 
  void *__mptr;
  #line 160 
  __mptr = (void *)work;
  #line 160 
  return ((struct delayed_work *)__mptr);
}

#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 496 
#line 348  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 784  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 776  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static u64 dma_get_mask(struct device *dev)
{
  #line 658 
  if (dev->dma_mask != (u64 *)0ULL && *(dev->dma_mask) != 0ULL) 
                                                                #line 659 
                                                                return *(dev->dma_mask);
  #line 660 
  return 4294967295ULL;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 2094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_get_prio_tc_map(struct net_device *dev, u32 prio)
{
  #line 2096 
  return (int)dev->prio_tc_map[prio & 15U];
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2679 
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_0(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_0(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3462 
#line 3462 
int netif_set_xps_queue(struct net_device *, struct cpumask *, u16);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_device_present(struct net_device *dev)
{
  #line 3878 
  return test_bit(1L,& dev->state);
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 35 
#line 35 
int rtnl_trylock(void);
#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1134 
#line 1134 
int pci_reenable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1185 
#line 1185 
void pcie_print_link_status(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1286 
#line 1286 
int pci_request_selected_regions(struct pci_dev *, int, char *);
#line 1288 
#line 1288 
void pci_release_selected_regions(struct pci_dev *, int);
#line 1346 
#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_request_mem_regions(struct pci_dev *pdev, char *name)
{
  #line 1628 
  ;
  #line 1628 
  ;
  #line 1628 
  return pci_request_selected_regions(pdev,pci_select_bars(pdev,512UL),name);
}

#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_release_mem_regions(struct pci_dev *pdev)
{
  #line 1635 
  ;
  #line 1635 
  pci_release_selected_regions(pdev,pci_select_bars(pdev,512UL));
  #line 1637 
  return;
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2035 
#line 2035 
int pci_sriov_set_totalvfs(struct pci_dev *, u16);
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
struct workqueue_struct *fm10k_workqueue;
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_lock_1(struct fm10k_intfc *interface)
{
  #line 401 
  cif_spin_lock_mbx_lock_of_fm10k_intfc_1(& interface->mbx_lock);
  #line 402 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_unlock_1(struct fm10k_intfc *interface)
{
  #line 406 
  cif_spin_unlock_mbx_lock_of_fm10k_intfc_1(& interface->mbx_lock);
  #line 407 
  return;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static int fm10k_mbx_trylock(struct fm10k_intfc *interface)
{
  #line 411 
  return cif_spin_trylock_mbx_lock_of_fm10k_intfc(& interface->mbx_lock);
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static u16 fm10k_desc_unused(struct fm10k_ring *ring)
{
  #line 426 
  int tmp;
  #line 424 
  s16 unused = (short)((unsigned int)((int)ring->next_to_clean - (int)ring->next_to_use) + 65535U);
  #line 426 
  if ((long)((int)unused < 0) != 0L) 
                                     #line 426 
                                     tmp = (int)ring->count + (int)((unsigned short)unused); else 
                                                                    #line 426 
                                                                    tmp = (int)((unsigned short)unused);
  #line 426 
  return (unsigned short)tmp;
}

#line 480 
#line 480 
int fm10k_init_queueing_scheme(struct fm10k_intfc *interface);
#line 481 
#line 481 
void fm10k_clear_queueing_scheme(struct fm10k_intfc *interface);
#line 486 
#line 486 
u64 fm10k_get_tx_pending(struct fm10k_ring *ring, bool in_sw);
#line 488 
#line 488 
void fm10k_alloc_rx_buffers(struct fm10k_ring *rx_ring, u16 cleaned_count);
#line 491 
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_mbx_free_irq(struct fm10k_intfc *interface);
#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 1694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
int fm10k_mbx_request_irq(struct fm10k_intfc *interface);
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_qv_free_irq(struct fm10k_intfc *interface);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 1757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
int fm10k_qv_request_irq(struct fm10k_intfc *interface);
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 2535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
int fm10k_register_pci_driver(void);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 2545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_unregister_pci_driver(void);
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_macvlan_schedule(struct fm10k_intfc *interface);
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 505 
struct net_device *fm10k_alloc_netdev(struct fm10k_info *info);
#line 510 
#line 510 
void fm10k_clean_all_rx_rings(struct fm10k_intfc *interface);
#line 511 
#line 511 
void fm10k_clean_all_tx_rings(struct fm10k_intfc *interface);
#line 514 
#line 514 
void fm10k_restore_rx_state(struct fm10k_intfc *interface);
#line 515 
#line 515 
void fm10k_reset_rx_state(struct fm10k_intfc *interface);
#line 517 
#line 517 
int fm10k_open(struct net_device *netdev);
#line 518 
#line 518 
int fm10k_close(struct net_device *netdev);
#line 553 
#line 553 
void fm10k_dbg_intfc_init(struct fm10k_intfc *interface);
#line 554 
#line 554 
void fm10k_dbg_intfc_exit(struct fm10k_intfc *interface);
#line 568 
#line 568 
void fm10k_dcbnl_set_ops(struct net_device *dev);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static struct fm10k_info *fm10k_info_tbl[2U] = {& fm10k_pf_info, & fm10k_vf_info};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static struct pci_device_id fm10k_pci_tbl[5U] = {{.vendor = 32902U, .device = 5540U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5584U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5589U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5541U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
struct pci_device_id __mod_pci__fm10k_pci_tbl_device_table[5U];
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
u16 fm10k_read_pci_cfg_word(struct fm10k_hw *hw, u32 reg)
{
  #line 36 
  struct fm10k_intfc *interface = (struct fm10k_intfc *)hw->back;
  #line 37 
  u16 value = (unsigned short)0U;
  #line 39 
  if ((long)(hw->hw_addr == (u32 *)0U) != 0L) 
                                              #line 40 
                                              return (unsigned short)(~ ((int)value));
  #line 42 
  pci_read_config_word(interface->pdev,(int)reg,& value);
  #line 43 
  if ((unsigned int)value == 65535U) 
                                     #line 44 
                                     fm10k_read_reg(hw,0);
  #line 46 
  return value;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
u32 fm10k_read_reg(struct fm10k_hw *hw, int reg)
{
  #line 52 
  union __anonunion___u_4434 __u;
  #line 51 
  __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
  #line 51 
  u32 *hw_addr = (__u.__val);
  #line 52 
  u32 value = 0U;
  #line 54 
  if ((long)(hw_addr == (u32 *)0U) != 0L) 
                                          #line 55 
                                          return ~ value;
  #line 57 
  value = readl((void *)(hw_addr + (unsigned long)reg));
  #line 58 
  if (value == 4294967295U) 
    #line 58 
    if (reg == 0) 
                  #line 58 
                  goto _LOR;
    else {
      #line 58 
      if (readl((void *)hw_addr) == 4294967295U) {
        #line 58 
        _LOR: {
                #line 59 
                struct fm10k_intfc *interface = (struct fm10k_intfc *)hw->back;
                #line 60 
                struct net_device *netdev = interface->netdev;
                #line 62 
                hw->hw_addr = (u32 *)0U;
                #line 63 
                netif_device_detach(netdev);
                #line 64 
                netdev_err(netdev,(char *)"PCIe link lost, device now detached\n");
              }
      }
    }
  #line 67 
  return value;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_hw_ready(struct fm10k_intfc *interface)
{
  #line 76 
  int tmp;
  #line 72 
  struct fm10k_hw *hw = & interface->hw;
  #line 74 
  fm10k_read_reg(hw,0);
  #line 76 
  if ((long)(hw->hw_addr == (u32 *)0U) != 0L) 
                                              #line 76 
                                              tmp = -19; else 
                                                              #line 76 
                                                              tmp = 0;
  #line 76 
  return tmp;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_macvlan_schedule(struct fm10k_intfc *interface)
{
  #line 91 
  if (test_bit(9L,(unsigned long *)(& interface->state))) 
                                                          #line 102 
                                                          cif_set_bit_0(8L,(unsigned long *)(& interface->state));
  else {
    #line 92 
    if (test_and_set_bit(7L,(unsigned long *)(& interface->state))) 
                                                                    #line 102 
                                                                    cif_set_bit_0(8L,(unsigned long *)(& interface->state));
    else {
      #line 93 
      cif_clear_bit_0(8L,(unsigned long *)(& interface->state));
      #line 99 
      cif_queue_delayed_work(fm10k_workqueue,& interface->macvlan_task,10UL);
    }
  }
  #line 103 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_stop_macvlan_task(struct fm10k_intfc *interface)
{
  #line 116 
  cif_set_bit_0(9L,(unsigned long *)(& interface->state));
  #line 119 
  cancel_delayed_work_sync(& interface->macvlan_task);
  #line 127 
  cif_clear_bit_0(7L,(unsigned long *)(& interface->state));
  #line 128 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_resume_macvlan_task(struct fm10k_intfc *interface)
{
  #line 140 
  cif_clear_bit_0(9L,(unsigned long *)(& interface->state));
  #line 145 
  if ((int)test_bit(8L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 146 
                                                                    fm10k_macvlan_schedule(interface);
  #line 147 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_service_event_schedule(struct fm10k_intfc *interface)
{
  #line 151 
  if (test_bit(6L,(unsigned long *)(& interface->state))) 
                                                          #line 156 
                                                          cif_set_bit_0(5L,(unsigned long *)(& interface->state));
  else {
    #line 152 
    if (test_and_set_bit(4L,(unsigned long *)(& interface->state))) 
                                                                    #line 156 
                                                                    cif_set_bit_0(5L,(unsigned long *)(& interface->state));
    else {
      #line 153 
      cif_clear_bit_0(5L,(unsigned long *)(& interface->state));
      #line 154 
      cif_queue_work(fm10k_workqueue,& interface->service_task);
    }
  }
  #line 157 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_service_event_complete(struct fm10k_intfc *interface)
{
  {
    #line 162 
    int tmp_0;
    #line 162 
    if (test_bit(4L,(unsigned long *)(& interface->state))) 
                                                            #line 162 
                                                            tmp_0 = 0; else 
                                                                    #line 162 
                                                                    tmp_0 = 1;
    #line 162 
    int __ret_warn_on = tmp_0;
    #line 162 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 163 
      ldv_inline_asm();
      #line 164 
      ldv_inline_asm();
    }
    #line 162 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 166 
  cif_clear_bit_0(4L,(unsigned long *)(& interface->state));
  #line 172 
  if ((int)test_bit(5L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 173 
                                                                    fm10k_service_event_schedule(interface);
  #line 174 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_stop_service_event(struct fm10k_intfc *interface)
{
  #line 178 
  cif_set_bit_0(6L,(unsigned long *)(& interface->state));
  #line 179 
  cancel_work_sync(& interface->service_task);
  #line 188 
  cif_clear_bit_0(4L,(unsigned long *)(& interface->state));
  #line 189 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_start_service_event(struct fm10k_intfc *interface)
{
  #line 193 
  cif_clear_bit_0(6L,(unsigned long *)(& interface->state));
  #line 194 
  fm10k_service_event_schedule(interface);
  #line 195 
  return;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_service_timer(struct timer_list *t)
{
  #line 203 
  void *__mptr;
  #line 203 
  __mptr = (void *)t;
  #line 203 
  struct fm10k_intfc *interface = ((struct fm10k_intfc *)(__mptr + 18446744073709533128U));
  #line 207 
  cif_mod_timer(& interface->service_timer,jiffies + 500UL);
  #line 209 
  fm10k_service_event_schedule(interface);
  #line 210 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static bool fm10k_prepare_for_reset(struct fm10k_intfc *interface)
{
  #line 222 
  struct net_device *netdev = interface->netdev;
  {
    #line 224 
    int __ret_warn_on = ((unsigned long)preempt_count() & 2096896UL) != 0UL;
    #line 224 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 225 
      ldv_inline_asm();
      #line 226 
      ldv_inline_asm();
    }
    #line 224 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 227 
  netif_trans_update(netdev);
  #line 230 
  if ((int)test_and_set_bit(0L,(unsigned long *)(& interface->state)) != 0) 
    #line 231 
    return (_Bool)0;
  #line 237 
  fm10k_stop_macvlan_task(interface);
  #line 239 
  rtnl_lock();
  #line 241 
  fm10k_iov_suspend(interface->pdev);
  #line 243 
  if ((int)netif_running(netdev) != 0) 
                                       #line 244 
                                       fm10k_close(netdev);
  #line 246 
  fm10k_mbx_free_irq(interface);
  #line 249 
  fm10k_clear_queueing_scheme(interface);
  #line 252 
  interface->last_reset = jiffies + 2500UL;
  #line 254 
  rtnl_unlock();
  #line 256 
  return (_Bool)1;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_handle_reset(struct fm10k_intfc *interface)
{
  #line 263 
  int err;
  #line 261 
  struct net_device *netdev = interface->netdev;
  #line 262 
  struct fm10k_hw *hw = & interface->hw;
  {
    #line 265 
    int tmp_0;
    #line 265 
    if (test_bit(0L,(unsigned long *)(& interface->state))) 
                                                            #line 265 
                                                            tmp_0 = 0; else 
                                                                    #line 265 
                                                                    tmp_0 = 1;
    #line 265 
    int __ret_warn_on = tmp_0;
    #line 265 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 266 
      ldv_inline_asm();
      #line 267 
      ldv_inline_asm();
    }
    #line 265 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 267 
  rtnl_lock();
  #line 269 
  pci_set_master(interface->pdev);
  #line 272 
  err = (*(hw->mac.ops.reset_hw))(hw);
  #line 273 
  if (err != 0) {
    #line 274 
    _dev_err(& (interface->pdev)->dev,(char *)"reset_hw failed: %d\n",err);
    #line 275 
    goto reinit_err;
  }
  #line 278 
  err = (*(hw->mac.ops.init_hw))(hw);
  #line 279 
  if (err != 0) {
    #line 280 
    _dev_err(& (interface->pdev)->dev,(char *)"init_hw failed: %d\n",err);
    #line 281 
    goto reinit_err;
  }
  #line 284 
  err = fm10k_init_queueing_scheme(interface);
  #line 285 
  if (err != 0) {
    #line 286 
    _dev_err(& (interface->pdev)->dev,(char *)"init_queueing_scheme failed: %d\n",err);
    #line 288 
    goto reinit_err;
  }
  #line 292 
  err = fm10k_mbx_request_irq(interface);
  #line 293 
  if (err != 0) 
                #line 294 
                goto err_mbx_irq;
  #line 296 
  err = fm10k_hw_ready(interface);
  #line 297 
  if (err != 0) 
                #line 298 
                goto err_open;
  #line 301 
  if (hw->mac.type == (unsigned int)fm10k_mac_vf) {
    #line 302 
    if ((int)is_valid_ether_addr((u8 *)(& hw->mac.perm_addr)) != 0) {
      #line 303 
      ether_addr_copy((u8 *)(& hw->mac.addr),(u8 *)(& hw->mac.perm_addr));
      #line 304 
      ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 *)(& hw->mac.perm_addr));
      #line 305 
      ether_addr_copy(netdev->dev_addr,(u8 *)(& hw->mac.perm_addr));
      #line 306 
      netdev->addr_assign_type = (unsigned char)((unsigned int)netdev->addr_assign_type & 254U);
    }
    #line 309 
    if ((int)hw->mac.vlan_override != 0) 
                                         #line 310 
                                         netdev->features &= 18446744073709551359ULL; else 
                                                                    #line 312 
                                                                    netdev->features |= 256ULL;
  }
  #line 315 
  if ((int)netif_running(netdev) != 0) 
                                       #line 315 
                                       err = fm10k_open(netdev); else 
                                                                   #line 315 
                                                                   err = 0;
  #line 316 
  if (err != 0) 
                #line 317 
                goto err_open;
  #line 319 
  fm10k_iov_resume(interface->pdev);
  #line 321 
  rtnl_unlock();
  #line 323 
  fm10k_resume_macvlan_task(interface);
  #line 325 
  cif_clear_bit_0(0L,(unsigned long *)(& interface->state));
  #line 327 
  return err;
  #line 328 
  err_open: 
            #line 328 
  ;
  #line 329 
  fm10k_mbx_free_irq(interface);
  #line 330 
  err_mbx_irq: 
               #line 330 
  ;
  #line 331 
  fm10k_clear_queueing_scheme(interface);
  #line 332 
  reinit_err: 
              #line 332 
  ;
  #line 333 
  netif_device_detach(netdev);
  #line 335 
  rtnl_unlock();
  #line 337 
  cif_clear_bit_0(0L,(unsigned long *)(& interface->state));
  #line 339 
  return err;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_detach_subtask(struct fm10k_intfc *interface)
{
  #line 362 
  union __anonunion___u_4436 __u;
  #line 345 
  u32 *hw_addr;
  #line 346 
  u32 value;
  #line 344 
  struct net_device *netdev = interface->netdev;
  #line 349 
  if ((int)netif_device_present(netdev) != 0) 
                                              #line 350 
                                              return;
  else 
    #line 349 
    if (interface->hw.hw_addr != (u32 *)0U) 
                                            #line 350 
                                            return;
  #line 357 
  if ((int)fm10k_prepare_for_reset(interface) != 0) 
                                                    #line 358 
                                                    cif_set_bit_0(1L,(unsigned long *)(& interface->state));
  #line 361 
  __read_once_size((void *)(& interface->uc_addr),(void *)(& __u.__c),8);
  #line 361 
  hw_addr = (__u.__val);
  #line 362 
  value = readl((void *)hw_addr);
  #line 363 
  if (value != 4294967295U) {
    #line 364 
    int err;
    #line 369 
    if (! test_and_set_bit(1L,(unsigned long *)(& interface->state))) 
      #line 371 
      return;
    #line 374 
    interface->hw.hw_addr = interface->uc_addr;
    #line 379 
    err = fm10k_handle_reset(interface);
    #line 380 
    if (err != 0) {
      #line 381 
      netdev_err(netdev,(char *)"Unable to reset device: %d\n",err);
      #line 382 
      interface->hw.hw_addr = (u32 *)0U;
      #line 383 
      return;
    }
    #line 387 
    netif_device_attach(netdev);
    #line 388 
    netdev_warn(netdev,(char *)"PCIe link restored, device now attached\n");
    #line 389 
    return;
  }
  #line 391 
  return;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_reset_subtask(struct fm10k_intfc *interface)
{
  #line 395 
  int err;
  #line 397 
  if (! test_and_set_bit(0L,(unsigned long *)(& interface->flags))) 
                                                                    #line 399 
                                                                    return;
  #line 408 
  if (! fm10k_prepare_for_reset(interface)) 
                                            #line 409 
                                            return;
  #line 411 
  netdev_err(interface->netdev,(char *)"Reset interface\n");
  #line 413 
  err = fm10k_handle_reset(interface);
  #line 414 
  if (err != 0) 
                #line 415 
                _dev_err(& (interface->pdev)->dev,(char *)"fm10k_handle_reset failed: %d\n",err);
  #line 416 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_configure_swpri_map(struct fm10k_intfc *interface)
{
  #line 429 
  int i;
  #line 427 
  struct net_device *netdev = interface->netdev;
  #line 428 
  struct fm10k_hw *hw = & interface->hw;
  #line 432 
  cif_clear_bit_0(3L,(unsigned long *)(& interface->flags));
  #line 435 
  if (hw->mac.type != (unsigned int)fm10k_mac_pf) 
                                                  #line 436 
                                                  return;
  #line 439 
  i = 0;
  #line 439 
  while (i <= 15) {
    {
      #line 441 
      union __anonunion___u_4438 __u;
      #line 440 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 440 
      u32 *hw_addr = (__u.__val);
      #line 440 
      if ((long)(hw_addr == (u32 *)0U) == 0L) {
        #line 440 
        ;
        #line 440 
        writel((unsigned int)netdev_get_prio_tc_map(netdev,(unsigned int)i),(void *)(hw_addr + ((unsigned long)i + (unsigned long)80U)));
      }
    }
    #line 439 
    i ++;
  }
  #line 442 
  return;
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_watchdog_update_host_state(struct fm10k_intfc *interface)
{
  #line 451 
  s32 err;
  #line 450 
  struct fm10k_hw *hw = & interface->hw;
  #line 453 
  if ((int)test_bit(10L,(unsigned long *)(& interface->state)) != 0) {
    #line 454 
    interface->host_ready = (_Bool)0;
    {
      #line 455 
      unsigned long __dummy;
      #line 455 
      unsigned long __dummy2;
      }
    #line 455 
    if (1 != 0) {
      {
        #line 455 
        unsigned long __dummy_0;
        #line 455 
        unsigned long __dummy2_0;
        }
      #line 455 
      if (1 != 0) 
        #line 455 
        if ((long)(jiffies - interface->link_down_event) < 0L) 
                                                               #line 456 
                                                               return;
    }
    #line 457 
    cif_clear_bit_0(10L,(unsigned long *)(& interface->state));
  }
  #line 460 
  if ((int)test_bit(3L,(unsigned long *)(& interface->flags)) != 0) {
    #line 461 
    if (rtnl_trylock() != 0) {
      #line 462 
      fm10k_configure_swpri_map(interface);
      #line 463 
      rtnl_unlock();
    }
  }
  #line 468 
  fm10k_mbx_lock_1(interface);
  #line 470 
  err = (*(hw->mac.ops.get_host_state))(hw,& interface->host_ready);
  {
    #line 471 
    unsigned long __dummy_1;
    #line 471 
    unsigned long __dummy2_1;
    }
  #line 471 
  if (1 != 0) {
    {
      #line 471 
      unsigned long __dummy_2;
      #line 471 
      unsigned long __dummy2_2;
      }
    #line 471 
    if (1 != 0) 
      #line 471 
      if ((long)(interface->last_reset - jiffies) < 0L) 
        #line 471 
        if (err != 0) 
                      #line 472 
                      cif_set_bit_0(0L,(unsigned long *)(& interface->flags));
  }
  #line 475 
  fm10k_mbx_unlock_1(interface);
  #line 476 
  return;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_mbx_subtask(struct fm10k_intfc *interface)
{
  #line 487 
  if ((int)test_bit(0L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 488 
                                                                    return;
  #line 491 
  fm10k_watchdog_update_host_state(interface);
  #line 494 
  fm10k_iov_mbx(interface);
  #line 495 
  return;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_watchdog_host_is_ready(struct fm10k_intfc *interface)
{
  #line 503 
  struct net_device *netdev = interface->netdev;
  #line 506 
  if ((int)netif_carrier_ok(netdev) != 0) 
                                          #line 507 
                                          return;
  #line 509 
  if (((int)interface->msg_enable & 1) != 0) 
                                             #line 509 
                                             netdev_info(netdev,(char *)"NIC Link is up\n");
  #line 511 
  netif_carrier_on(netdev);
  #line 512 
  netif_tx_wake_all_queues(netdev);
  #line 513 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_watchdog_host_not_ready(struct fm10k_intfc *interface)
{
  #line 521 
  struct net_device *netdev = interface->netdev;
  #line 524 
  if (! netif_carrier_ok(netdev)) 
                                  #line 525 
                                  return;
  #line 527 
  if (((int)interface->msg_enable & 1) != 0) 
                                             #line 527 
                                             netdev_info(netdev,(char *)"NIC Link is down\n");
  #line 529 
  netif_carrier_off(netdev);
  #line 530 
  netif_tx_stop_all_queues(netdev);
  #line 531 
  return;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_update_stats(struct fm10k_intfc *interface)
{
  #line 548 
  u64 bytes;
  #line 548 
  u64 pkts;
  #line 549 
  int i;
  #line 539 
  struct net_device_stats *net_stats = & (interface->netdev)->stats;
  #line 540 
  struct fm10k_hw *hw = & interface->hw;
  #line 541 
  u64 hw_csum_tx_good = 0ULL;
  #line 541 
  u64 hw_csum_rx_good = 0ULL;
  #line 541 
  u64 rx_length_errors = 0ULL;
  #line 542 
  u64 rx_switch_errors = 0ULL;
  #line 542 
  u64 rx_drops = 0ULL;
  #line 542 
  u64 rx_pp_errors = 0ULL;
  #line 543 
  u64 rx_link_errors = 0ULL;
  #line 544 
  u64 rx_errors = 0ULL;
  #line 544 
  u64 rx_csum_errors = 0ULL;
  #line 544 
  u64 tx_csum_errors = 0ULL;
  #line 545 
  u64 restart_queue = 0ULL;
  #line 545 
  u64 tx_busy = 0ULL;
  #line 545 
  u64 alloc_failed = 0ULL;
  #line 546 
  u64 rx_bytes_nic = 0ULL;
  #line 546 
  u64 rx_pkts_nic = 0ULL;
  #line 546 
  u64 rx_drops_nic = 0ULL;
  #line 547 
  u64 tx_bytes_nic = 0ULL;
  #line 547 
  u64 tx_pkts_nic = 0ULL;
  #line 552 
  if ((int)test_and_set_bit(11L,(unsigned long *)(& interface->state)) != 0) 
    #line 553 
    return;
  #line 556 
  interface->next_stats_update = jiffies + 250UL;
  #line 559 
  bytes = 0ULL;
  #line 559 
  pkts = 0ULL;
  #line 559 
  i = 0;
  #line 559 
  while (interface->num_tx_queues > i) {
    {
      #line 561 
      union __anonunion___u_4440 __u;
      #line 560 
      __read_once_size((void *)(& interface->tx_ring[i]),(void *)(& __u.__c),8);
      #line 560 
      struct fm10k_ring *tx_ring = (__u.__val);
      #line 562 
      if (tx_ring == (struct fm10k_ring *)0) 
                                             #line 563 
                                             goto __Cont;
      #line 565 
      restart_queue = tx_ring->__anonCompField_fm10k_ring_163.tx_stats.restart_queue + restart_queue;
      #line 566 
      tx_busy = tx_ring->__anonCompField_fm10k_ring_163.tx_stats.tx_busy + tx_busy;
      #line 567 
      tx_csum_errors = tx_ring->__anonCompField_fm10k_ring_163.tx_stats.csum_err + tx_csum_errors;
      #line 568 
      bytes = tx_ring->stats.bytes + bytes;
      #line 569 
      pkts = tx_ring->stats.packets + pkts;
      #line 570 
      hw_csum_tx_good = tx_ring->__anonCompField_fm10k_ring_163.tx_stats.csum_good + hw_csum_tx_good;
    }
    #line 559 
    __Cont: 
            #line 559 
    i ++;
  }
  #line 573 
  interface->restart_queue = restart_queue;
  #line 574 
  interface->tx_busy = tx_busy;
  #line 575 
  net_stats->tx_bytes = (unsigned long)bytes;
  #line 576 
  net_stats->tx_packets = (unsigned long)pkts;
  #line 577 
  interface->tx_csum_errors = tx_csum_errors;
  #line 578 
  interface->hw_csum_tx_good = hw_csum_tx_good;
  #line 581 
  bytes = 0ULL;
  #line 581 
  pkts = 0ULL;
  #line 581 
  i = 0;
  #line 581 
  while (interface->num_rx_queues > i) {
    {
      #line 583 
      union __anonunion___u_4442 __u_0;
      #line 582 
      __read_once_size((void *)(& interface->rx_ring[i]),(void *)(& __u_0.__c),8);
      #line 582 
      struct fm10k_ring *rx_ring = (__u_0.__val);
      #line 584 
      if (rx_ring == (struct fm10k_ring *)0) 
                                             #line 585 
                                             goto __Cont_0;
      #line 587 
      bytes = rx_ring->stats.bytes + bytes;
      #line 588 
      pkts = rx_ring->stats.packets + pkts;
      #line 589 
      alloc_failed = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.alloc_failed + alloc_failed;
      #line 590 
      rx_csum_errors = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.csum_err + rx_csum_errors;
      #line 591 
      rx_errors = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.errors + rx_errors;
      #line 592 
      hw_csum_rx_good = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.csum_good + hw_csum_rx_good;
      #line 593 
      rx_switch_errors = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.switch_errors + rx_switch_errors;
      #line 594 
      rx_drops = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.drops + rx_drops;
      #line 595 
      rx_pp_errors = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.pp_errors + rx_pp_errors;
      #line 596 
      rx_link_errors = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.link_errors + rx_link_errors;
      #line 597 
      rx_length_errors = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.length_errors + rx_length_errors;
    }
    #line 581 
    __Cont_0: 
              #line 581 
    i ++;
  }
  #line 600 
  net_stats->rx_bytes = (unsigned long)bytes;
  #line 601 
  net_stats->rx_packets = (unsigned long)pkts;
  #line 602 
  interface->alloc_failed = alloc_failed;
  #line 603 
  interface->rx_csum_errors = rx_csum_errors;
  #line 604 
  interface->hw_csum_rx_good = hw_csum_rx_good;
  #line 605 
  interface->rx_switch_errors = rx_switch_errors;
  #line 606 
  interface->rx_drops = rx_drops;
  #line 607 
  interface->rx_pp_errors = rx_pp_errors;
  #line 608 
  interface->rx_link_errors = rx_link_errors;
  #line 609 
  interface->rx_length_errors = rx_length_errors;
  #line 611 
  (*(hw->mac.ops.update_hw_stats))(hw,& interface->stats);
  #line 613 
  i = 0;
  #line 613 
  while ((int)hw->mac.max_queues > i) {
    {
      #line 614 
      struct fm10k_hw_stats_q *q = & interface->stats.q[i];
      #line 616 
      tx_bytes_nic = q->tx_bytes.count + tx_bytes_nic;
      #line 617 
      tx_pkts_nic = q->tx_packets.count + tx_pkts_nic;
      #line 618 
      rx_bytes_nic = q->rx_bytes.count + rx_bytes_nic;
      #line 619 
      rx_pkts_nic = q->rx_packets.count + rx_pkts_nic;
      #line 620 
      rx_drops_nic = q->rx_drops.count + rx_drops_nic;
    }
    #line 613 
    i ++;
  }
  #line 623 
  interface->tx_bytes_nic = tx_bytes_nic;
  #line 624 
  interface->tx_packets_nic = tx_pkts_nic;
  #line 625 
  interface->rx_bytes_nic = rx_bytes_nic;
  #line 626 
  interface->rx_packets_nic = rx_pkts_nic;
  #line 627 
  interface->rx_drops_nic = rx_drops_nic;
  #line 630 
  net_stats->rx_errors = (unsigned long)rx_errors;
  #line 631 
  net_stats->rx_dropped = (unsigned long)interface->stats.nodesc_drop.count;
  #line 634 
  fm10k_iov_update_stats(interface);
  #line 636 
  cif_clear_bit_0(11L,(unsigned long *)(& interface->state));
  #line 637 
  return;
}

#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_watchdog_flush_tx(struct fm10k_intfc *interface)
{
  #line 646 
  int i;
  #line 645 
  int some_tx_pending = 0;
  #line 649 
  if ((int)netif_carrier_ok(interface->netdev) != 0) 
                                                     #line 650 
                                                     return;
  #line 652 
  i = 0;
  #line 652 
  while (interface->num_tx_queues > i) {
    {
      #line 653 
      struct fm10k_ring *tx_ring = interface->tx_ring[i];
      #line 655 
      if ((int)tx_ring->next_to_use != (int)tx_ring->next_to_clean) {
        #line 656 
        some_tx_pending = 1;
        #line 657 
        break;
      }
    }
    #line 652 
    i ++;
  }
  #line 665 
  if (some_tx_pending != 0) 
                            #line 666 
                            cif_set_bit_0(0L,(unsigned long *)(& interface->flags));
  #line 667 
  return;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_watchdog_subtask(struct fm10k_intfc *interface)
{
  #line 676 
  if ((int)test_bit(3L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 678 
                                                                    return;
  else {
    #line 676 
    if ((int)test_bit(0L,(unsigned long *)(& interface->state)) != 0) 
      #line 678 
      return;
  }
  #line 680 
  if ((int)interface->host_ready != 0) 
                                       #line 681 
                                       fm10k_watchdog_host_is_ready(interface); else 
                                                                    #line 683 
                                                                    fm10k_watchdog_host_not_ready(interface);
  {
    #line 686 
    unsigned long __dummy;
    #line 686 
    unsigned long __dummy2;
    }
  #line 686 
  if (1 != 0) {
    {
      #line 686 
      unsigned long __dummy_0;
      #line 686 
      unsigned long __dummy2_0;
      }
    #line 686 
    if (1 != 0) 
      #line 686 
      if ((long)(interface->next_stats_update - jiffies) < 0L) 
                                                               #line 687 
                                                               fm10k_update_stats(interface);
  }
  #line 690 
  fm10k_watchdog_flush_tx(interface);
  #line 691 
  return;
}

#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_check_hang_subtask(struct fm10k_intfc *interface)
{
  #line 705 
  if ((int)test_bit(3L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 707 
                                                                    return;
  else {
    #line 705 
    if ((int)test_bit(0L,(unsigned long *)(& interface->state)) != 0) 
      #line 707 
      return;
  }
  {
    #line 710 
    unsigned long __dummy;
    #line 710 
    unsigned long __dummy2;
    }
  #line 710 
  if (1 != 0) {
    {
      #line 710 
      unsigned long __dummy_0;
      #line 710 
      unsigned long __dummy2_0;
      }
    #line 710 
    if (1 != 0) 
      #line 710 
      if ((long)(interface->next_tx_hang_check - jiffies) >= 0L) 
                                                                 #line 711 
                                                                 return;
  }
  #line 712 
  interface->next_tx_hang_check = jiffies + 500UL;
  #line 714 
  if ((int)netif_carrier_ok(interface->netdev) != 0) {
    #line 715 
    int i;
    #line 718 
    i = 0;
    #line 718 
    while (interface->num_tx_queues > i) {
      #line 719 
      cif_set_bit_0(0L,(unsigned long *)(& (interface->tx_ring[i])->state));
      #line 718 
      i ++;
    }
    #line 722 
    i = 0;
    #line 722 
    while (interface->num_q_vectors > i) {
      {
        #line 723 
        struct fm10k_q_vector *qv = interface->q_vector[i];
        #line 725 
        if ((unsigned int)qv->tx.count == 0U && (unsigned int)qv->rx.count == 0U) 
          #line 726 
          goto __Cont;
        #line 727 
        writel(2952790016U,(void *)qv->itr);
      }
      #line 722 
      __Cont: 
              #line 722 
      i ++;
    }
  }
  #line 730 
  return;
}

#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_service_task(struct work_struct *work)
{
  #line 740 
  void *__mptr;
  #line 738 
  struct fm10k_intfc *interface;
  #line 740 
  __mptr = (void *)work;
  #line 740 
  interface = ((struct fm10k_intfc *)(__mptr + 18446744073709533040U));
  #line 743 
  fm10k_detach_subtask(interface);
  #line 746 
  fm10k_mbx_subtask(interface);
  #line 747 
  fm10k_reset_subtask(interface);
  #line 750 
  fm10k_watchdog_subtask(interface);
  #line 751 
  fm10k_check_hang_subtask(interface);
  #line 754 
  fm10k_service_event_complete(interface);
  #line 755 
  return;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_macvlan_task(struct work_struct *work)
{
  #line 778 
  void *__mptr;
  #line 770 
  struct fm10k_macvlan_request *item;
  #line 771 
  struct fm10k_intfc *interface;
  #line 772 
  struct delayed_work *dwork;
  #line 773 
  struct list_head *requests;
  #line 774 
  struct fm10k_hw *hw;
  #line 775 
  unsigned long flags;
  #line 777 
  dwork = to_delayed_work(work);
  #line 778 
  __mptr = (void *)dwork;
  #line 778 
  interface = ((struct fm10k_intfc *)(__mptr + 18446744073709532704U));
  #line 779 
  hw = & interface->hw;
  #line 780 
  requests = & interface->macvlan_requests;
  #line 782 
  while (1) {
    #line 785 
    struct fm10k_macvlan_request *tmp_2;
    #line 785 
    void *__mptr_0;
    #line 784 
    cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc(& interface->macvlan_lock);
    {
      #line 786 
      union __anonunion___u_4444 __u;
      #line 785 
      struct list_head *head__ = requests;
      #line 785 
      __read_once_size((void *)(& head__->next),(void *)(& __u.__c),8);
      #line 785 
      struct list_head *pos__ = (__u.__val);
      #line 785 
      if (pos__ != head__) {
        #line 785 
        __mptr_0 = (void *)pos__;
        #line 785 
        tmp_2 = ((struct fm10k_macvlan_request *)(__mptr_0 + 18446744073709551608U));
      }
      else 
           #line 785 
           tmp_2 = (struct fm10k_macvlan_request *)0;
      }
    #line 785 
    item = tmp_2;
    #line 788 
    if (item != (struct fm10k_macvlan_request *)0) 
                                                   #line 789 
                                                   list_del_init(& item->list);
    #line 791 
    cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc(& interface->macvlan_lock,flags);
    #line 794 
    if (item == (struct fm10k_macvlan_request *)0) 
                                                   #line 795 
                                                   goto done;
    #line 797 
    fm10k_mbx_lock_1(interface);
    #line 804 
    if (! (*(hw->mbx.ops.tx_ready))(& hw->mbx,(unsigned short)12)) {
      #line 805 
      (*(hw->mbx.ops.process))(hw,& hw->mbx);
      #line 806 
      cif_set_bit_0(8L,(unsigned long *)(& interface->state));
      #line 807 
      fm10k_mbx_unlock_1(interface);
      #line 810 
      cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc(& interface->macvlan_lock);
      #line 811 
      list_add(& item->list,requests);
      #line 812 
      cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc(& interface->macvlan_lock,flags);
      #line 813 
      break;
    }
    #line 816 
    switch ((unsigned int)item->type) {
      #line 817 
      case (unsigned int)1: 
                            #line 817 
      ;
      #line 818 
      (*(hw->mac.ops.update_mc_addr))(hw,(unsigned short)((int)item->__anonCompField_fm10k_macvlan_request_165.mac.glort),(u8 *)(& item->__anonCompField_fm10k_macvlan_request_165.mac.addr),(unsigned short)((int)item->__anonCompField_fm10k_macvlan_request_165.mac.vid),(_Bool)((bool)((int)item->set) != 0));
      #line 823 
      break;
      #line 824 
      case (unsigned int)0: 
                            #line 824 
      ;
      #line 825 
      (*(hw->mac.ops.update_uc_addr))(hw,(unsigned short)((int)item->__anonCompField_fm10k_macvlan_request_165.mac.glort),(u8 *)(& item->__anonCompField_fm10k_macvlan_request_165.mac.addr),(unsigned short)((int)item->__anonCompField_fm10k_macvlan_request_165.mac.vid),(_Bool)((bool)((int)item->set) != 0),(unsigned char)0);
      #line 831 
      break;
      #line 832 
      case (unsigned int)2: 
                            #line 832 
      ;
      #line 833 
      (*(hw->mac.ops.update_vlan))(hw,item->__anonCompField_fm10k_macvlan_request_165.vlan.vid,(unsigned char)((int)item->__anonCompField_fm10k_macvlan_request_165.vlan.vsi),(_Bool)((bool)((int)item->set) != 0));
      #line 837 
      break;
      #line 838 
      default: 
               #line 838 
      ;
      #line 839 
      break;
    }
    #line 842 
    fm10k_mbx_unlock_1(interface);
    #line 845 
    kfree((void *)item);
  }
  #line 848 
  done: 
        #line 848 
  ;
  {
    #line 849 
    int tmp_6;
    #line 849 
    if (test_bit(7L,(unsigned long *)(& interface->state))) 
                                                            #line 849 
                                                            tmp_6 = 0; else 
                                                                    #line 849 
                                                                    tmp_6 = 1;
    #line 849 
    int __ret_warn_on = tmp_6;
    #line 849 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 850 
      ldv_inline_asm();
      #line 851 
      ldv_inline_asm();
    }
    #line 849 
    long tmp_7 = (long)(__ret_warn_on != 0);
  }
  #line 853 
  cif_clear_bit_0(7L,(unsigned long *)(& interface->state));
  #line 859 
  if ((int)test_bit(8L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 860 
                                                                    fm10k_macvlan_schedule(interface);
  #line 861 
  return;
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_configure_tx_ring(struct fm10k_intfc *interface, struct fm10k_ring *ring)
{
  #line 873 
  struct fm10k_hw *hw = & interface->hw;
  #line 874 
  u64 tdba = ring->dma;
  #line 875 
  u32 size = (unsigned int)ring->count * 16U;
  #line 876 
  u32 txint = 768U;
  #line 877 
  u32 txdctl = 81920U;
  #line 878 
  u8 reg_idx = ring->reg_idx;
  {
    #line 882 
    union __anonunion___u_4446 __u;
    #line 881 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 881 
    u32 *hw_addr = (__u.__val);
    #line 881 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 881 
                                            writel(0U,(void *)(hw_addr + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32774U)));
  }
  #line 882 
  fm10k_read_reg(hw,0);
  {
    #line 888 
    union __anonunion___u_4448 __u_0;
    #line 887 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 887 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 887 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 887 
                                              writel((unsigned int)tdba,(void *)(hw_addr_0 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32768U)));
  }
  {
    #line 889 
    union __anonunion___u_4450 __u_1;
    #line 888 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 888 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 888 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 888 
                                              writel((unsigned int)(tdba >> 32),(void *)(hw_addr_1 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32769U)));
  }
  {
    #line 890 
    union __anonunion___u_4452 __u_2;
    #line 889 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 889 
    u32 *hw_addr_2 = (__u_2.__val);
    #line 889 
    if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                              #line 889 
                                              writel(size,(void *)(hw_addr_2 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32770U)));
  }
  {
    #line 893 
    union __anonunion___u_4454 __u_3;
    #line 892 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 892 
    u32 *hw_addr_3 = (__u_3.__val);
    #line 892 
    if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                              #line 892 
                                              writel(0U,(void *)(hw_addr_3 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32772U)));
  }
  {
    #line 894 
    union __anonunion___u_4456 __u_4;
    #line 893 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 893 
    u32 *hw_addr_4 = (__u_4.__val);
    #line 893 
    if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                              #line 893 
                                              writel(0U,(void *)(hw_addr_4 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32773U)));
  }
  #line 896 
  ring->tail = interface->uc_addr + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32773U);
  #line 899 
  ring->next_to_clean = (unsigned short)0U;
  #line 900 
  ring->next_to_use = (unsigned short)0U;
  #line 903 
  if (ring->q_vector != (struct fm10k_q_vector *)0) {
    #line 904 
    txint = (unsigned int)((int)(ring->q_vector)->v_idx + 1);
    #line 905 
    txint = txint;
  }
  {
    #line 909 
    union __anonunion___u_4458 __u_5;
    #line 908 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 908 
    u32 *hw_addr_5 = (__u_5.__val);
    #line 908 
    if ((long)(hw_addr_5 == (u32 *)0U) == 0L) 
                                              #line 908 
                                              writel(txint,(void *)(hw_addr_5 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32776U)));
  }
  {
    #line 912 
    union __anonunion___u_4460 __u_6;
    #line 911 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
    #line 911 
    u32 *hw_addr_6 = (__u_6.__val);
    #line 911 
    if ((long)(hw_addr_6 == (u32 *)0U) == 0L) 
                                              #line 911 
                                              writel(1U,(void *)(hw_addr_6 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32782U)));
  }
  #line 915 
  if (! test_and_set_bit(2L,(unsigned long *)(& ring->state))) 
    #line 915 
    if (ring->q_vector != (struct fm10k_q_vector *)0) 
                                                      #line 917 
                                                      netif_set_xps_queue(ring->netdev,& (ring->q_vector)->affinity_mask,(unsigned short)((int)ring->queue_index));
  {
    #line 923 
    union __anonunion___u_4462 __u_7;
    #line 922 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
    #line 922 
    u32 *hw_addr_7 = (__u_7.__val);
    #line 922 
    if ((long)(hw_addr_7 == (u32 *)0U) == 0L) 
                                              #line 922 
                                              writel(txdctl,(void *)(hw_addr_7 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)32774U)));
  }
  #line 924 
  return;
}

#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_enable_tx_ring(struct fm10k_intfc *interface, struct fm10k_ring *ring)
{
  #line 937 
  u32 txdctl;
  #line 935 
  struct fm10k_hw *hw = & interface->hw;
  #line 936 
  int wait_loop = 10;
  #line 938 
  u8 reg_idx = ring->reg_idx;
  #line 941 
  if ((fm10k_read_reg(hw,(int)reg_idx * 64 + 32774) & 16384U) != 0U) 
    #line 942 
    return;
  #line 945 
  while (1) {
    #line 946 
    usleep_range(1000UL,2000UL);
    #line 947 
    txdctl = fm10k_read_reg(hw,(int)reg_idx * 64 + 32774);
    #line 948 
    if ((txdctl & 16384U) == 0U) {
      #line 948 
      wait_loop --;
      #line 948 
      if (! (wait_loop != 0)) 
                              #line 945 
                              break;
    }
    else 
         #line 945 
         break;
  }
  #line 949 
  if (wait_loop == 0) 
    #line 950 
    if (((int)interface->msg_enable & 1) != 0) 
                                               #line 950 
                                               netdev_err(interface->netdev,(char *)"Could not enable Tx Queue %d\n",(int)reg_idx);
  #line 951 
  return;
}

#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_configure_tx(struct fm10k_intfc *interface)
{
  #line 962 
  int i;
  #line 965 
  i = 0;
  #line 965 
  while (interface->num_tx_queues > i) {
    #line 966 
    fm10k_configure_tx_ring(interface,interface->tx_ring[i]);
    #line 965 
    i ++;
  }
  #line 969 
  i = 0;
  #line 969 
  while (interface->num_tx_queues > i) {
    #line 970 
    fm10k_enable_tx_ring(interface,interface->tx_ring[i]);
    #line 969 
    i ++;
  }
  #line 971 
  return;
}

#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_configure_rx_ring(struct fm10k_intfc *interface, struct fm10k_ring *ring)
{
  #line 986 
  u32 rxqctl;
  #line 983 
  u64 rdba = ring->dma;
  #line 984 
  struct fm10k_hw *hw = & interface->hw;
  #line 985 
  u32 size = (unsigned int)ring->count * 32U;
  #line 986 
  u32 rxdctl = 1U;
  #line 987 
  u32 srrctl = 2147483648U;
  #line 988 
  u32 rxint = 768U;
  #line 989 
  u8 rx_pause = interface->rx_pause;
  #line 990 
  u8 reg_idx = ring->reg_idx;
  #line 993 
  rxqctl = fm10k_read_reg(hw,(int)reg_idx * 64 + 16390);
  #line 994 
  rxqctl &= 4294967294U;
  {
    #line 996 
    union __anonunion___u_4464 __u;
    #line 995 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 995 
    u32 *hw_addr = (__u.__val);
    #line 995 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 995 
                                            writel(rxqctl,(void *)(hw_addr + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16390U)));
  }
  #line 996 
  fm10k_read_reg(hw,0);
  {
    #line 1002 
    union __anonunion___u_4466 __u_0;
    #line 1001 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1001 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 1001 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 1001 
                                              writel((unsigned int)rdba,(void *)(hw_addr_0 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16384U)));
  }
  {
    #line 1003 
    union __anonunion___u_4468 __u_1;
    #line 1002 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 1002 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 1002 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 1002 
                                              writel((unsigned int)(rdba >> 32),(void *)(hw_addr_1 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16385U)));
  }
  {
    #line 1004 
    union __anonunion___u_4470 __u_2;
    #line 1003 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 1003 
    u32 *hw_addr_2 = (__u_2.__val);
    #line 1003 
    if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                              #line 1003 
                                              writel(size,(void *)(hw_addr_2 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16386U)));
  }
  {
    #line 1007 
    union __anonunion___u_4472 __u_3;
    #line 1006 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 1006 
    u32 *hw_addr_3 = (__u_3.__val);
    #line 1006 
    if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                              #line 1006 
                                              writel(0U,(void *)(hw_addr_3 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16388U)));
  }
  {
    #line 1008 
    union __anonunion___u_4474 __u_4;
    #line 1007 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 1007 
    u32 *hw_addr_4 = (__u_4.__val);
    #line 1007 
    if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                              #line 1007 
                                              writel(0U,(void *)(hw_addr_4 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16389U)));
  }
  #line 1010 
  ring->tail = interface->uc_addr + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16389U);
  #line 1013 
  ring->next_to_clean = (unsigned short)0U;
  #line 1014 
  ring->next_to_use = (unsigned short)0U;
  #line 1015 
  ring->next_to_alloc = (unsigned short)0U;
  #line 1018 
  srrctl |= 8U;
  #line 1021 
  srrctl |= 1073741824U;
  {
    #line 1023 
    union __anonunion___u_4476 __u_5;
    #line 1022 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 1022 
    u32 *hw_addr_5 = (__u_5.__val);
    #line 1022 
    if ((long)(hw_addr_5 == (u32 *)0U) == 0L) 
                                              #line 1022 
                                              writel(srrctl,(void *)(hw_addr_5 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16393U)));
  }
  #line 1026 
  if ((unsigned int)interface->pfc_en != 0U) 
                                             #line 1027 
                                             rx_pause = interface->pfc_en;
  #line 1029 
  if ((((unsigned long)rx_pause >> (int)ring->qos_pc) & 1UL) == 0UL) 
    #line 1030 
    rxdctl |= 512U;
  {
    #line 1033 
    union __anonunion___u_4478 __u_6;
    #line 1032 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
    #line 1032 
    u32 *hw_addr_6 = (__u_6.__val);
    #line 1032 
    if ((long)(hw_addr_6 == (u32 *)0U) == 0L) 
                                              #line 1032 
                                              writel(rxdctl,(void *)(hw_addr_6 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16391U)));
  }
  #line 1035 
  ring->vid = hw->mac.default_vid;
  #line 1038 
  if ((int)test_bit((long)hw->mac.default_vid,
                 (unsigned long *)(& interface->active_vlans)) != 0) 
    #line 1039 
    ring->vid = (unsigned short)((unsigned int)ring->vid | 32768U);
  #line 1042 
  if (ring->q_vector != (struct fm10k_q_vector *)0) {
    #line 1043 
    rxint = (unsigned int)((int)(ring->q_vector)->v_idx + 1);
    #line 1044 
    rxint |= 256U;
  }
  {
    #line 1048 
    union __anonunion___u_4480 __u_7;
    #line 1047 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
    #line 1047 
    u32 *hw_addr_7 = (__u_7.__val);
    #line 1047 
    if ((long)(hw_addr_7 == (u32 *)0U) == 0L) 
                                              #line 1047 
                                              writel(rxint,(void *)(hw_addr_7 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16392U)));
  }
  #line 1050 
  rxqctl = fm10k_read_reg(hw,(int)reg_idx * 64 + 16390);
  #line 1051 
  rxqctl |= 1U;
  {
    #line 1053 
    union __anonunion___u_4482 __u_8;
    #line 1052 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
    #line 1052 
    u32 *hw_addr_8 = (__u_8.__val);
    #line 1052 
    if ((long)(hw_addr_8 == (u32 *)0U) == 0L) 
                                              #line 1052 
                                              writel(rxqctl,(void *)(hw_addr_8 + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16390U)));
  }
  #line 1055 
  ;
  #line 1055 
  fm10k_alloc_rx_buffers(ring,(unsigned short)((int)fm10k_desc_unused(ring)));
  #line 1056 
  return;
}

#line 1064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_update_rx_drop_en(struct fm10k_intfc *interface)
{
  #line 1068 
  int i;
  #line 1066 
  struct fm10k_hw *hw = & interface->hw;
  #line 1067 
  u8 rx_pause = interface->rx_pause;
  #line 1071 
  if ((unsigned int)interface->pfc_en != 0U) 
                                             #line 1072 
                                             rx_pause = interface->pfc_en;
  #line 1075 
  i = 0;
  #line 1075 
  while (interface->num_rx_queues > i) {
    {
      #line 1076 
      struct fm10k_ring *ring = interface->rx_ring[i];
      #line 1077 
      u32 rxdctl = 1U;
      #line 1078 
      u8 reg_idx = ring->reg_idx;
      #line 1080 
      if ((((unsigned long)rx_pause >> (int)ring->qos_pc) & 1UL) == 0UL) 
        #line 1081 
        rxdctl |= 512U;
      {
        #line 1084 
        union __anonunion___u_4484 __u;
        #line 1083 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 1083 
        u32 *hw_addr = (__u.__val);
        #line 1083 
        if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                                #line 1083 
                                                writel(rxdctl,(void *)(hw_addr + ((unsigned long)((int)reg_idx * 64) + (unsigned long)16391U)));
      }
    }
    #line 1075 
    i ++;
  }
  #line 1086 
  return;
}

#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_configure_dglort(struct fm10k_intfc *interface)
{
  #line 1097 
  int i;
  #line 1098 
  u32 mrqc;
  #line 1095 
  struct fm10k_dglort_cfg dglort = {.glort = (unsigned short)0U, .queue_b = (unsigned short)0, .vsi_b = (unsigned char)0, .idx = (unsigned char)0, .rss_l = (unsigned char)0, .pc_l = (unsigned char)0, .vsi_l = (unsigned char)0, .queue_l = (unsigned char)0, .shared_l = (unsigned char)0, .inner_rss = (unsigned char)0};
  #line 1096 
  struct fm10k_hw *hw = & interface->hw;
  #line 1101 
  i = 0;
  #line 1101 
  while (i <= 9) {
    {
      #line 1103 
      union __anonunion___u_4486 __u;
      #line 1102 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1102 
      u32 *hw_addr = (__u.__val);
      #line 1102 
      if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                              #line 1102 
                                              writel(interface->rssrk[i],(void *)(hw_addr + ((unsigned long)i + (unsigned long)2048U)));
    }
    #line 1101 
    i ++;
  }
  #line 1105 
  i = 0;
  #line 1105 
  while (i <= 31) {
    {
      #line 1107 
      union __anonunion___u_4488 __u_0;
      #line 1106 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 1106 
      u32 *hw_addr_0 = (__u_0.__val);
      #line 1106 
      if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                                #line 1106 
                                                writel(interface->reta[i],(void *)(hw_addr_0 + ((unsigned long)i + (unsigned long)4096U)));
    }
    #line 1105 
    i ++;
  }
  #line 1111 
  mrqc = 51U;
  #line 1116 
  if ((int)test_bit(1L,(unsigned long *)(& interface->flags)) != 0) 
                                                                    #line 1117 
                                                                    mrqc |= 64U;
  #line 1118 
  if ((int)test_bit(2L,(unsigned long *)(& interface->flags)) != 0) 
                                                                    #line 1119 
                                                                    mrqc |= 128U;
  {
    #line 1122 
    union __anonunion___u_4490 __u_1;
    #line 1121 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 1121 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 1121 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 1121 
                                              writel(mrqc,(void *)(hw_addr_1 + 8448U));
  }
  #line 1124 
  dglort.inner_rss = (unsigned char)1U;
  #line 1125 
  dglort.rss_l = (unsigned char)fls((unsigned int)interface->ring_feature[0].mask);
  #line 1126 
  dglort.pc_l = (unsigned char)fls((unsigned int)interface->ring_feature[1].mask);
  #line 1127 
  (*(hw->mac.ops.configure_dglort_map))(hw,& dglort);
  #line 1130 
  if ((unsigned int)interface->glort_count > 64U) {
    #line 1131 
    memset((void *)(& dglort),0,12UL);
    #line 1132 
    dglort.inner_rss = (unsigned char)1U;
    #line 1133 
    dglort.glort = (unsigned short)((unsigned int)interface->glort + 64U);
    #line 1134 
    dglort.idx = (unsigned char)4U;
    #line 1135 
    dglort.queue_l = (unsigned char)fls((unsigned int)(interface->num_rx_queues + -1));
    #line 1136 
    (*(hw->mac.ops.configure_dglort_map))(hw,& dglort);
  }
  #line 1140 
  memset((void *)(& dglort),0,12UL);
  #line 1141 
  dglort.inner_rss = (unsigned char)1U;
  #line 1142 
  dglort.glort = interface->glort;
  #line 1143 
  dglort.rss_l = (unsigned char)fls((unsigned int)interface->ring_feature[0].mask);
  #line 1144 
  dglort.pc_l = (unsigned char)fls((unsigned int)interface->ring_feature[1].mask);
  #line 1146 
  dglort.idx = (unsigned char)7U;
  #line 1147 
  if (interface->l2_accel != (struct fm10k_l2_accel *)0) {
    #line 1148 
    dglort.shared_l = (unsigned char)fls((unsigned int)(interface->l2_accel)->size);
  }
  #line 1149 
  (*(hw->mac.ops.configure_dglort_map))(hw,& dglort);
  #line 1150 
  return;
}

#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_configure_rx(struct fm10k_intfc *interface)
{
  #line 1160 
  int i;
  #line 1163 
  fm10k_configure_swpri_map(interface);
  #line 1166 
  fm10k_configure_dglort(interface);
  #line 1169 
  i = 0;
  #line 1169 
  while (interface->num_rx_queues > i) {
    #line 1170 
    fm10k_configure_rx_ring(interface,interface->rx_ring[i]);
    #line 1169 
    i ++;
  }
  #line 1171 
  return;
}

#line 1175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_napi_enable_all(struct fm10k_intfc *interface)
{
  #line 1177 
  struct fm10k_q_vector *q_vector;
  #line 1178 
  int q_idx;
  #line 1180 
  q_idx = 0;
  #line 1180 
  while (interface->num_q_vectors > q_idx) {
    #line 1181 
    q_vector = interface->q_vector[q_idx];
    #line 1182 
    napi_enable(& q_vector->napi);
    #line 1180 
    q_idx ++;
  }
  #line 1184 
  return;
}

#line 1186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static irqreturn_t fm10k_msix_clean_rings(int irq, void *data)
{
  #line 1188 
  struct fm10k_q_vector *q_vector = (struct fm10k_q_vector *)data;
  #line 1190 
  if ((unsigned int)q_vector->rx.count != 0U || (unsigned int)q_vector->tx.count != 0U) 
    #line 1191 
    napi_schedule_irqoff(& q_vector->napi);
  #line 1193 
  return IRQ_HANDLED;
}

#line 1196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static irqreturn_t fm10k_msix_mbx_vf(int irq, void *data)
{
  #line 1198 
  struct fm10k_intfc *interface = (struct fm10k_intfc *)data;
  #line 1199 
  struct fm10k_hw *hw = & interface->hw;
  #line 1200 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  {
    #line 1204 
    union __anonunion___u_4492 __u;
    #line 1203 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1203 
    u32 *hw_addr = (__u.__val);
    #line 1203 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1203 
                                            writel((unsigned int)(20 >> (int)hw->mac.itr_scale) | 2684354560U,(void *)(hw_addr + 96U));
  }
  #line 1208 
  if (fm10k_mbx_trylock(interface) != 0) {
    #line 1209 
    (*(mbx->ops.process))(hw,mbx);
    #line 1210 
    fm10k_mbx_unlock_1(interface);
  }
  #line 1213 
  hw->mac.get_host_state = (_Bool)1;
  #line 1214 
  fm10k_service_event_schedule(interface);
  #line 1216 
  return IRQ_HANDLED;
}

#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_handle_fault(struct fm10k_intfc *interface, int type, struct fm10k_fault *fault)
{
  #line 1226 
  char *error;
  #line 1223 
  struct pci_dev *pdev = interface->pdev;
  #line 1224 
  struct fm10k_hw *hw = & interface->hw;
  #line 1225 
  struct fm10k_iov_data *iov_data = interface->iov_data;
  #line 1228 
  switch (type) {
    #line 1229 
    case 8: 
            #line 1229 
    ;
    #line 1230 
    switch ((int)fault->type) {
      #line 1231 
      default: 
               #line 1231 
      ;
      #line 1232 
      error = (char *)"Unknown PCA error";
      #line 1233 
      break;
      #line 1234 
      case 0: 
              #line 1234 
      ;
      #line 1234 
      error = (char *)"PCA_NO_FAULT";
      #line 1234 
      break;
      #line 1235 
      case 1: 
              #line 1235 
      ;
      #line 1235 
      error = (char *)"PCA_UNMAPPED_ADDR";
      #line 1235 
      break;
      #line 1236 
      case 2: 
              #line 1236 
      ;
      #line 1236 
      error = (char *)"PCA_BAD_QACCESS_PF";
      #line 1236 
      break;
      #line 1237 
      case 3: 
              #line 1237 
      ;
      #line 1237 
      error = (char *)"PCA_BAD_QACCESS_VF";
      #line 1237 
      break;
      #line 1238 
      case 4: 
              #line 1238 
      ;
      #line 1238 
      error = (char *)"PCA_MALICIOUS_REQ";
      #line 1238 
      break;
      #line 1239 
      case 5: 
              #line 1239 
      ;
      #line 1239 
      error = (char *)"PCA_POISONED_TLP";
      #line 1239 
      break;
      #line 1240 
      case 6: 
              #line 1240 
      ;
      #line 1240 
      error = (char *)"PCA_TLP_ABORT";
      #line 1240 
      break;
    }
    #line 1242 
    break;
    #line 1243 
    case 16: 
             #line 1243 
    ;
    #line 1244 
    switch ((int)fault->type) {
      #line 1245 
      default: 
               #line 1245 
      ;
      #line 1246 
      error = (char *)"Unknown THI error";
      #line 1247 
      break;
      #line 1248 
      case 0: 
              #line 1248 
      ;
      #line 1248 
      error = (char *)"THI_NO_FAULT";
      #line 1248 
      break;
      #line 1249 
      case 1: 
              #line 1249 
      ;
      #line 1249 
      error = (char *)"THI_MAL_DIS_Q_FAULT";
      #line 1249 
      break;
    }
    #line 1251 
    break;
    #line 1252 
    case 28: 
             #line 1252 
    ;
    #line 1253 
    switch ((int)fault->type) {
      #line 1254 
      default: 
               #line 1254 
      ;
      #line 1255 
      error = (char *)"Unknown FUM error";
      #line 1256 
      break;
      #line 1257 
      case 0: 
              #line 1257 
      ;
      #line 1257 
      error = (char *)"FUM_NO_FAULT";
      #line 1257 
      break;
      #line 1258 
      case 1: 
              #line 1258 
      ;
      #line 1258 
      error = (char *)"FUM_UNMAPPED_ADDR";
      #line 1258 
      break;
      #line 1259 
      case 3: 
              #line 1259 
      ;
      #line 1259 
      error = (char *)"FUM_BAD_VF_QACCESS";
      #line 1259 
      break;
      #line 1260 
      case 4: 
              #line 1260 
      ;
      #line 1260 
      error = (char *)"FUM_ADD_DECODE_ERR";
      #line 1260 
      break;
      #line 1261 
      case 5: 
              #line 1261 
      ;
      #line 1261 
      error = (char *)"FUM_RO_ERROR";
      #line 1261 
      break;
      #line 1262 
      case 6: 
              #line 1262 
      ;
      #line 1262 
      error = (char *)"FUM_QPRC_CRC_ERROR";
      #line 1262 
      break;
      #line 1263 
      case 7: 
              #line 1263 
      ;
      #line 1263 
      error = (char *)"FUM_CSR_TIMEOUT";
      #line 1263 
      break;
      #line 1264 
      case 8: 
              #line 1264 
      ;
      #line 1264 
      error = (char *)"FUM_INVALID_TYPE";
      #line 1264 
      break;
      #line 1265 
      case 9: 
              #line 1265 
      ;
      #line 1265 
      error = (char *)"FUM_INVALID_LENGTH";
      #line 1265 
      break;
      #line 1266 
      case 10: 
               #line 1266 
      ;
      #line 1266 
      error = (char *)"FUM_INVALID_BE";
      #line 1266 
      break;
      #line 1267 
      case 11: 
               #line 1267 
      ;
      #line 1267 
      error = (char *)"FUM_INVALID_ALIGN";
      #line 1267 
      break;
    }
    #line 1269 
    break;
    #line 1270 
    default: 
             #line 1270 
    ;
    #line 1271 
    error = (char *)"Undocumented fault";
    #line 1272 
    break;
  }
  #line 1275 
  _dev_warn(& pdev->dev,(char *)"%s Address: 0x%llx SpecInfo: 0x%x Func: %02x.%0x\n",error,fault->address,fault->specinfo,((int)fault->func >> 3) & 31,(int)fault->func & 7);
  #line 1289 
  if ((unsigned int)fault->func != 0U && iov_data != (struct fm10k_iov_data *)0) {
    #line 1290 
    int vf = (int)fault->func + -1;
    #line 1291 
    struct fm10k_vf_info *vf_info = & iov_data->vf_info[vf];
    #line 1293 
    (*(hw->iov.ops.reset_lport))(hw,vf_info);
    #line 1294 
    (*(hw->iov.ops.reset_resources))(hw,vf_info);
    #line 1297 
    (*(hw->iov.ops.set_lport))(hw,vf_info,(unsigned short)((int)((unsigned short)vf)),(unsigned char)2);
    #line 1301 
    (*(vf_info->mbx.ops.connect))(hw,& vf_info->mbx);
  }
  #line 1303 
  return;
}

#line 1305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_report_fault(struct fm10k_intfc *interface, u32 eicr)
{
  #line 1309 
  int type;
  #line 1309 
  int err;
  #line 1307 
  struct fm10k_hw *hw = & interface->hw;
  #line 1308 
  struct fm10k_fault fault = {.address = 0ULL, .specinfo = 0U, .type = (unsigned char)0, .func = (unsigned char)0};
  #line 1311 
  eicr &= 63U;
  #line 1311 
  type = 8;
  #line 1311 
  while (eicr != 0U) {
    #line 1315 
    if ((eicr & 1U) == 0U) 
                           #line 1316 
                           goto __Cont;
    #line 1319 
    err = (*(hw->mac.ops.get_fault))(hw,type,& fault);
    #line 1320 
    if (err != 0) {
      #line 1321 
      _dev_err(& (interface->pdev)->dev,(char *)"error reading fault\n");
      #line 1323 
      goto __Cont;
    }
    #line 1326 
    fm10k_handle_fault(interface,type,& fault);
    #line 1311 
    __Cont: 
            #line 1312 
    eicr >>= 1;
    #line 1313 
    type += 4;
  }
  #line 1328 
  return;
}

#line 1330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_reset_drop_on_empty(struct fm10k_intfc *interface, u32 eicr)
{
  #line 1334 
  u32 maxholdq;
  #line 1335 
  int q;
  #line 1332 
  struct fm10k_hw *hw = & interface->hw;
  #line 1333 
  u32 rxdctl = 1U;
  #line 1337 
  if ((eicr & 4096U) == 0U) 
                            #line 1338 
                            return;
  #line 1340 
  maxholdq = fm10k_read_reg(hw,39);
  #line 1341 
  if (maxholdq != 0U) {
    #line 1343 
    union __anonunion___u_4494 __u;
    #line 1342 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1342 
    u32 *hw_addr = (__u.__val);
    #line 1342 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1342 
                                            writel(maxholdq,(void *)(hw_addr + 39U));
  }
  #line 1343 
  q = 255;
  #line 1343 
  while (1) {
    {
      #line 1360 
      int tmp_1;
      #line 1344 
      if (((unsigned long)maxholdq & 2147483648UL) != 0UL) 
        #line 1345 
        if (q <= 127) {
          #line 1346 
          (interface->rx_overrun_pf) ++;
          {
            #line 1348 
            union __anonunion___u_4496 __u_0;
            #line 1347 
            __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
            #line 1347 
            u32 *hw_addr_0 = (__u_0.__val);
            #line 1347 
            if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                                      #line 1347 
                                                      writel(1U,(void *)(hw_addr_0 + ((unsigned long)(q * 64) + (unsigned long)16391U)));
          }
        }
        else 
             #line 1349 
             (interface->rx_overrun_vf) ++;
      #line 1353 
      maxholdq *= 2U;
      #line 1354 
      if (maxholdq == 0U) 
                          #line 1355 
                          q &= -32;
      #line 1357 
      if (q == 0) 
                  #line 1358 
                  break;
      #line 1360 
      tmp_1 = q;
      #line 1360 
      q --;
      #line 1360 
      ;
      #line 1360 
      if (((unsigned int)tmp_1 & 31U) != 0U) 
                                             #line 1361 
                                             goto __Cont;
      #line 1363 
      maxholdq = fm10k_read_reg(hw,q / 32 + 32);
      #line 1364 
      if (maxholdq != 0U) {
        #line 1366 
        union __anonunion___u_4498 __u_1;
        #line 1365 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
        #line 1365 
        u32 *hw_addr_1 = (__u_1.__val);
        #line 1365 
        if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                                  #line 1365 
                                                  writel(maxholdq,(void *)(hw_addr_1 + ((unsigned long)(q / 32) + (unsigned long)32U)));
      }
    }
    #line 1343 
    __Cont: 
            #line 1343 
    ;
  }
  #line 1368 
  return;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static irqreturn_t fm10k_msix_mbx_pf(int irq, void *data)
{
  #line 1374 
  u32 eicr;
  #line 1371 
  struct fm10k_intfc *interface = (struct fm10k_intfc *)data;
  #line 1372 
  struct fm10k_hw *hw = & interface->hw;
  #line 1373 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 1375 
  s32 err = 0;
  #line 1378 
  eicr = fm10k_read_reg(hw,6);
  {
    #line 1380 
    union __anonunion___u_4500 __u;
    #line 1379 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1379 
    u32 *hw_addr = (__u.__val);
    #line 1379 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1379 
                                            writel(eicr & 448U,(void *)(hw_addr + 6U));
  }
  #line 1384 
  fm10k_report_fault(interface,eicr);
  #line 1387 
  fm10k_reset_drop_on_empty(interface,eicr);
  #line 1390 
  if (fm10k_mbx_trylock(interface) != 0) {
    #line 1391 
    err = (*(mbx->ops.process))(hw,mbx);
    #line 1393 
    fm10k_iov_event(interface);
    #line 1394 
    fm10k_mbx_unlock_1(interface);
  }
  #line 1397 
  if (err == -5) 
                 #line 1398 
                 cif_set_bit_0(0L,(unsigned long *)(& interface->flags));
  #line 1401 
  if ((eicr & 256U) != 0U) {
    #line 1403 
    interface->link_down_event = jiffies + 1000UL;
    #line 1404 
    cif_set_bit_0(10L,(unsigned long *)(& interface->state));
    #line 1407 
    hw->mac.dglort_map = 65535U;
  }
  #line 1411 
  hw->mac.get_host_state = (_Bool)1;
  #line 1414 
  fm10k_service_event_schedule(interface);
  {
    #line 1418 
    union __anonunion___u_4502 __u_0;
    #line 1417 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1417 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 1417 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 1417 
                                              writel((unsigned int)(20 >> (int)hw->mac.itr_scale) | 2684354560U,(void *)(hw_addr_0 + 74752U));
  }
  #line 1421 
  return IRQ_HANDLED;
}

#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_mbx_free_irq(struct fm10k_intfc *interface)
{
  #line 1427 
  struct msix_entry *entry;
  #line 1428 
  int itr_reg;
  #line 1426 
  struct fm10k_hw *hw = & interface->hw;
  #line 1431 
  if (interface->msix_entries == (struct msix_entry *)0) 
                                                         #line 1432 
                                                         return;
  #line 1434 
  entry = interface->msix_entries;
  #line 1437 
  (*(hw->mbx.ops.disconnect))(hw,& hw->mbx);
  #line 1440 
  if (hw->mac.type == (unsigned int)fm10k_mac_pf) {
    {
      #line 1442 
      union __anonunion___u_4504 __u;
      #line 1441 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1441 
      u32 *hw_addr = (__u.__val);
      #line 1441 
      if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                              #line 1441 
                                              writel(22107137U,(void *)(hw_addr + 7U));
    }
    #line 1450 
    itr_reg = 74752;
  }
  else 
       #line 1452 
       itr_reg = 96;
  {
    #line 1456 
    union __anonunion___u_4506 __u_0;
    #line 1455 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1455 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 1455 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 1455 
                                              writel(1073741824U,(void *)(hw_addr_0 + (unsigned long)itr_reg));
  }
  #line 1457 
  cif_free_irq(entry->vector,(void *)interface);
  #line 1458 
  return;
}

#line 1460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static s32 fm10k_mbx_mac_addr(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1472 
  void *__mptr;
  #line 1465 
  struct fm10k_intfc *interface;
  #line 1466 
  s32 err;
  #line 1463 
  bool vlan_override = hw->mac.vlan_override;
  #line 1464 
  u16 default_vid = hw->mac.default_vid;
  #line 1468 
  err = fm10k_msg_mac_vlan_vf(hw,results,mbx);
  #line 1469 
  if (err != 0) 
                #line 1470 
                return err;
  #line 1472 
  __mptr = (void *)hw;
  #line 1472 
  interface = ((struct fm10k_intfc *)(__mptr + 18446744073709536368U));
  #line 1475 
  if ((int)is_valid_ether_addr((u8 *)(& hw->mac.perm_addr)) != 0) {
    #line 1476 
    if (! ether_addr_equal((u8 *)(& hw->mac.perm_addr),(u8 *)(& hw->mac.addr))) 
      #line 1477 
      cif_set_bit_0(0L,(unsigned long *)(& interface->flags));
  }
  #line 1480 
  if ((int)hw->mac.vlan_override != (int)vlan_override || (int)hw->mac.default_vid != (int)default_vid) 
    #line 1482 
    cif_set_bit_0(0L,(unsigned long *)(& interface->flags));
  #line 1484 
  return 0;
}

#line 1488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static s32 fm10k_mbx_error(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1494 
  void *__mptr;
  #line 1491 
  struct fm10k_intfc *interface;
  #line 1492 
  struct pci_dev *pdev;
  #line 1494 
  __mptr = (void *)hw;
  #line 1494 
  interface = ((struct fm10k_intfc *)(__mptr + 18446744073709536368U));
  #line 1495 
  pdev = interface->pdev;
  #line 1497 
  _dev_err(& pdev->dev,(char *)"Unknown message ID %u\n",*(*results) & 65535U);
  #line 1500 
  return 0;
}

#line 1503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static struct fm10k_msg_data vf_mbx_data[4U] = {{.attr = (struct fm10k_tlv_attr *)(& fm10k_tlv_msg_test_attr), .func = & fm10k_tlv_msg_test}, {.id = 2U, .attr = (struct fm10k_tlv_attr *)(& fm10k_mac_vlan_msg_attr), .func = & fm10k_mbx_mac_addr}, {.id = 3U, .attr = (struct fm10k_tlv_attr *)(& fm10k_lport_state_msg_attr), .func = & fm10k_msg_lport_state_vf}, {.id = 4294967295U, .func = & fm10k_mbx_error}};
#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_mbx_request_irq_vf(struct fm10k_intfc *interface)
{
  #line 1515 
  int err;
  #line 1512 
  struct msix_entry *entry = interface->msix_entries;
  #line 1513 
  struct net_device *dev = interface->netdev;
  #line 1514 
  struct fm10k_hw *hw = & interface->hw;
  #line 1518 
  u32 itr = (unsigned int)entry->entry;
  #line 1521 
  err = (*(hw->mbx.ops.register_handlers))(& hw->mbx,(struct fm10k_msg_data *)(& vf_mbx_data));
  #line 1522 
  if (err != 0) 
                #line 1523 
                return err;
  #line 1526 
  err = cif_request_irq(entry->vector,& fm10k_msix_mbx_vf,0UL,(char *)(& dev->name),(void *)interface);
  #line 1528 
  if (err != 0) {
    #line 1529 
    if (((int)interface->msg_enable & 2) != 0) 
                                               #line 1529 
                                               netdev_err(dev,(char *)"request_irq for msix_mbx failed: %d\n",err);
    #line 1531 
    return err;
  }
  {
    #line 1536 
    union __anonunion___u_4508 __u;
    #line 1535 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1535 
    u32 *hw_addr = (__u.__val);
    #line 1535 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1535 
                                            writel(itr,(void *)(hw_addr + 48U));
  }
  {
    #line 1539 
    union __anonunion___u_4510 __u_0;
    #line 1538 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1538 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 1538 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 1538 
                                              writel(2684354560U,(void *)(hw_addr_0 + ((unsigned long)entry->entry + (unsigned long)96U)));
  }
  #line 1540 
  return 0;
}

#line 1543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static s32 fm10k_lport_map(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1550 
  void *__mptr;
  #line 1546 
  struct fm10k_intfc *interface;
  #line 1548 
  s32 err;
  #line 1547 
  u32 dglort_map = hw->mac.dglort_map;
  #line 1550 
  __mptr = (void *)hw;
  #line 1550 
  interface = ((struct fm10k_intfc *)(__mptr + 18446744073709536368U));
  #line 1552 
  err = fm10k_msg_err_pf(hw,results,mbx);
  #line 1553 
  if (err == 0 && hw->swapi.status != 0U) {
    #line 1555 
    interface->link_down_event = jiffies + 500UL;
    #line 1556 
    cif_set_bit_0(10L,(unsigned long *)(& interface->state));
    #line 1559 
    hw->mac.dglort_map = 65535U;
    #line 1561 
    fm10k_service_event_schedule(interface);
    #line 1564 
    if ((int)interface->lport_map_failed != 0) 
                                               #line 1565 
                                               return 0;
    #line 1567 
    interface->lport_map_failed = (_Bool)1;
    #line 1569 
    if (hw->swapi.status == 280U) 
                                  #line 1570 
                                  _dev_warn(& (interface->pdev)->dev,(char *)"cannot obtain link because the host interface is configured for a PCIe host interface bandwidth of zero\n");
    #line 1572 
    _dev_warn(& (interface->pdev)->dev,(char *)"request logical port map failed: %d\n",hw->swapi.status);
    #line 1576 
    return 0;
  }
  #line 1579 
  err = fm10k_msg_lport_map_pf(hw,results,mbx);
  #line 1580 
  if (err != 0) 
                #line 1581 
                return err;
  #line 1583 
  interface->lport_map_failed = (_Bool)0;
  #line 1586 
  if (hw->mac.dglort_map != dglort_map) 
                                        #line 1587 
                                        cif_set_bit_0(0L,(unsigned long *)(& interface->flags));
  #line 1589 
  return 0;
}

#line 1592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static s32 fm10k_update_pvid(struct fm10k_hw *hw, u32 **results, struct fm10k_mbx_info *mbx)
{
  #line 1617 
  void *__mptr;
  #line 1595 
  struct fm10k_intfc *interface;
  #line 1596 
  u16 glort;
  #line 1596 
  u16 pvid;
  #line 1597 
  u32 pvid_update;
  #line 1598 
  s32 err;
  #line 1600 
  err = fm10k_tlv_attr_get_value(*(results + 13U),(void *)(& pvid_update),4U);
  #line 1602 
  if (err != 0) 
                #line 1603 
                return err;
  #line 1606 
  glort = (unsigned short)pvid_update;
  #line 1607 
  pvid = (unsigned short)(pvid_update >> 16);
  #line 1610 
  if (! fm10k_glort_valid_pf(hw,(unsigned short)((int)glort))) 
                                                               #line 1611 
                                                               return -2;
  #line 1614 
  if ((unsigned int)pvid > 4095U) 
                                  #line 1615 
                                  return -2;
  #line 1617 
  __mptr = (void *)hw;
  #line 1617 
  interface = ((struct fm10k_intfc *)(__mptr + 18446744073709536368U));
  #line 1620 
  err = fm10k_iov_update_pvid(interface,(unsigned short)((int)glort),(unsigned short)((int)pvid));
  #line 1621 
  if (err == 0) 
                #line 1622 
                return 0;
  #line 1625 
  if ((int)hw->mac.default_vid != (int)pvid) 
                                             #line 1626 
                                             cif_set_bit_0(0L,(unsigned long *)(& interface->flags));
  #line 1628 
  hw->mac.default_vid = pvid;
  #line 1630 
  return 0;
}

#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static struct fm10k_msg_data pf_mbx_data[7U] = {{.id = 1U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 2U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 256U, .attr = (struct fm10k_tlv_attr *)(& fm10k_lport_map_msg_attr), .func = & fm10k_lport_map}, {.id = 512U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 513U, .attr = (struct fm10k_tlv_attr *)(& fm10k_err_msg_attr), .func = & fm10k_msg_err_pf}, {.id = 1024U, .attr = (struct fm10k_tlv_attr *)(& fm10k_update_pvid_msg_attr), .func = & fm10k_update_pvid}, {.id = 4294967295U, .func = & fm10k_mbx_error}};
#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_mbx_request_irq_pf(struct fm10k_intfc *interface)
{
  #line 1648 
  int err;
  #line 1645 
  struct msix_entry *entry = interface->msix_entries;
  #line 1646 
  struct net_device *dev = interface->netdev;
  #line 1647 
  struct fm10k_hw *hw = & interface->hw;
  #line 1651 
  u32 mbx_itr = (unsigned int)entry->entry;
  #line 1652 
  u32 other_itr = (unsigned int)entry->entry | 512U;
  #line 1655 
  err = (*(hw->mbx.ops.register_handlers))(& hw->mbx,(struct fm10k_msg_data *)(& pf_mbx_data));
  #line 1656 
  if (err != 0) 
                #line 1657 
                return err;
  #line 1660 
  err = cif_request_irq(entry->vector,& fm10k_msix_mbx_pf,0UL,(char *)(& dev->name),(void *)interface);
  #line 1662 
  if (err != 0) {
    #line 1663 
    if (((int)interface->msg_enable & 2) != 0) 
                                               #line 1663 
                                               netdev_err(dev,(char *)"request_irq for msix_mbx failed: %d\n",err);
    #line 1665 
    return err;
  }
  {
    #line 1670 
    union __anonunion___u_4512 __u;
    #line 1669 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1669 
    u32 *hw_addr = (__u.__val);
    #line 1669 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1669 
                                            writel(other_itr,(void *)(hw_addr + 65665U));
  }
  {
    #line 1671 
    union __anonunion___u_4514 __u_0;
    #line 1670 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1670 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 1670 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 1670 
                                              writel(other_itr,(void *)(hw_addr_0 + 65666U));
  }
  {
    #line 1672 
    union __anonunion___u_4516 __u_1;
    #line 1671 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 1671 
    u32 *hw_addr_1 = (__u_1.__val);
    #line 1671 
    if ((long)(hw_addr_1 == (u32 *)0U) == 0L) 
                                              #line 1671 
                                              writel(other_itr,(void *)(hw_addr_1 + 65668U));
  }
  {
    #line 1673 
    union __anonunion___u_4518 __u_2;
    #line 1672 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 1672 
    u32 *hw_addr_2 = (__u_2.__val);
    #line 1672 
    if ((long)(hw_addr_2 == (u32 *)0U) == 0L) 
                                              #line 1672 
                                              writel(other_itr,(void *)(hw_addr_2 + 65670U));
  }
  {
    #line 1674 
    union __anonunion___u_4520 __u_3;
    #line 1673 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 1673 
    u32 *hw_addr_3 = (__u_3.__val);
    #line 1673 
    if ((long)(hw_addr_3 == (u32 *)0U) == 0L) 
                                              #line 1673 
                                              writel(other_itr,(void *)(hw_addr_3 + 65669U));
  }
  {
    #line 1677 
    union __anonunion___u_4522 __u_4;
    #line 1676 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 1676 
    u32 *hw_addr_4 = (__u_4.__val);
    #line 1676 
    if ((long)(hw_addr_4 == (u32 *)0U) == 0L) 
                                              #line 1676 
                                              writel(mbx_itr,(void *)(hw_addr_4 + 65664U));
  }
  {
    #line 1680 
    union __anonunion___u_4524 __u_5;
    #line 1679 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 1679 
    u32 *hw_addr_5 = (__u_5.__val);
    #line 1679 
    if ((long)(hw_addr_5 == (u32 *)0U) == 0L) 
                                              #line 1679 
                                              writel(44214274U,(void *)(hw_addr_5 + 7U));
  }
  {
    #line 1690 
    union __anonunion___u_4526 __u_6;
    #line 1689 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
    #line 1689 
    u32 *hw_addr_6 = (__u_6.__val);
    #line 1689 
    if ((long)(hw_addr_6 == (u32 *)0U) == 0L) 
                                              #line 1689 
                                              writel(2684354560U,(void *)(hw_addr_6 + ((unsigned long)entry->entry + (unsigned long)74752U)));
  }
  #line 1691 
  return 0;
}

#line 1694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
int fm10k_mbx_request_irq(struct fm10k_intfc *interface)
{
  #line 1697 
  int err;
  #line 1696 
  struct fm10k_hw *hw = & interface->hw;
  #line 1700 
  if (hw->mac.type == (unsigned int)fm10k_mac_pf) 
                                                  #line 1701 
                                                  err = fm10k_mbx_request_irq_pf(interface); else 
                                                                    #line 1703 
                                                                    err = fm10k_mbx_request_irq_vf(interface);
  #line 1704 
  if (err != 0) 
                #line 1705 
                return err;
  #line 1708 
  err = (*(hw->mbx.ops.connect))(hw,& hw->mbx);
  #line 1711 
  if (err != 0) 
                #line 1712 
                fm10k_mbx_free_irq(interface);
  #line 1714 
  return err;
}

#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_qv_free_irq(struct fm10k_intfc *interface)
{
  #line 1726 
  struct msix_entry *entry;
  #line 1725 
  int vector = interface->num_q_vectors;
  #line 1728 
  entry = interface->msix_entries + (unsigned long)(vector + 1);
  #line 1730 
  while (vector != 0) {
    #line 1731 
    struct fm10k_q_vector *q_vector;
    #line 1733 
    vector --;
    #line 1734 
    entry --;
    #line 1735 
    q_vector = interface->q_vector[vector];
    #line 1737 
    if ((unsigned int)q_vector->tx.count == 0U && (unsigned int)q_vector->rx.count == 0U) 
      #line 1738 
      continue;
    #line 1741 
    irq_set_affinity_hint(entry->vector,(struct cpumask *)0);
    #line 1744 
    writel(1073741824U,(void *)q_vector->itr);
    #line 1746 
    cif_free_irq(entry->vector,(void *)q_vector);
  }
  #line 1748 
  return;
}

#line 1757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
int fm10k_qv_request_irq(struct fm10k_intfc *interface)
{
  #line 1761 
  struct msix_entry *entry;
  #line 1763 
  int vector;
  #line 1763 
  int err;
  #line 1759 
  struct net_device *dev = interface->netdev;
  #line 1760 
  struct fm10k_hw *hw = & interface->hw;
  #line 1762 
  unsigned int ri = 0U;
  #line 1762 
  unsigned int ti = 0U;
  #line 1765 
  entry = interface->msix_entries + 1U;
  #line 1767 
  vector = 0;
  #line 1767 
  while (interface->num_q_vectors > vector) {
    {
      #line 1768 
      struct fm10k_q_vector *q_vector = interface->q_vector[vector];
      #line 1771 
      if ((unsigned int)q_vector->tx.count != 0U && (unsigned int)q_vector->rx.count != 0U) {
        #line 1773 
        unsigned int tmp;
        #line 1773 
        tmp = ri;
        #line 1773 
        ri ++;
        #line 1772 
        ;
        #line 1772 
        ;
        #line 1772 
        ;
        #line 1772 
        snprintf((char *)(& q_vector->name),25UL,(char *)"%s-TxRx-%u",(char *)(& dev->name),tmp);
        #line 1774 
        ti ++;
      }
      else 
        #line 1775 
        if ((unsigned int)q_vector->rx.count != 0U) {
          #line 1777 
          unsigned int tmp_0;
          #line 1777 
          tmp_0 = ri;
          #line 1777 
          ri ++;
          #line 1776 
          ;
          #line 1776 
          ;
          #line 1776 
          ;
          #line 1776 
          snprintf((char *)(& q_vector->name),25UL,(char *)"%s-rx-%u",(char *)(& dev->name),tmp_0);
        }
        else 
          #line 1778 
          if ((unsigned int)q_vector->tx.count != 0U) {
            #line 1780 
            unsigned int tmp_1;
            #line 1780 
            tmp_1 = ti;
            #line 1780 
            ti ++;
            #line 1779 
            ;
            #line 1779 
            ;
            #line 1779 
            ;
            #line 1779 
            snprintf((char *)(& q_vector->name),25UL,(char *)"%s-tx-%u",(char *)(& dev->name),tmp_1);
          }
          else 
               #line 1783 
               goto __Cont;
      #line 1787 
      if (hw->mac.type == (unsigned int)fm10k_mac_pf) 
                                                      #line 1787 
                                                      q_vector->itr = interface->uc_addr + ((unsigned long)entry->entry + (unsigned long)74752U); else 
                                                                    #line 1787 
                                                                    q_vector->itr = interface->uc_addr + ((unsigned long)entry->entry + (unsigned long)96U);
      #line 1792 
      err = cif_request_irq(entry->vector,& fm10k_msix_clean_rings,0UL,(char *)(& q_vector->name),(void *)q_vector);
      #line 1794 
      if (err != 0) {
        #line 1795 
        if (((int)interface->msg_enable & 2) != 0) 
                                                   #line 1795 
                                                   netdev_err(dev,(char *)"request_irq failed for MSIX interrupt Error: %d\n",err);
        #line 1798 
        goto err_out;
      }
      #line 1802 
      irq_set_affinity_hint(entry->vector,& q_vector->affinity_mask);
      #line 1805 
      writel(2684354560U,(void *)q_vector->itr);
      #line 1807 
      entry ++;
    }
    #line 1767 
    __Cont: 
            #line 1767 
    vector ++;
  }
  #line 1810 
  return 0;
  #line 1812 
  err_out: 
           #line 1812 
  ;
  #line 1814 
  while (vector != 0) {
    #line 1815 
    struct fm10k_q_vector *q_vector_0;
    #line 1817 
    entry --;
    #line 1818 
    vector --;
    #line 1819 
    q_vector_0 = interface->q_vector[vector];
    #line 1821 
    if ((unsigned int)q_vector_0->tx.count == 0U && (unsigned int)q_vector_0->rx.count == 0U) 
      #line 1822 
      continue;
    #line 1825 
    irq_set_affinity_hint(entry->vector,(struct cpumask *)0);
    #line 1828 
    writel(1073741824U,(void *)q_vector_0->itr);
    #line 1830 
    cif_free_irq(entry->vector,(void *)q_vector_0);
  }
  #line 1833 
  return err;
}

#line 1836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_up(struct fm10k_intfc *interface)
{
  #line 1838 
  struct fm10k_hw *hw = & interface->hw;
  #line 1841 
  (*(hw->mac.ops.start_hw))(hw);
  #line 1844 
  fm10k_configure_tx(interface);
  #line 1847 
  fm10k_configure_rx(interface);
  #line 1850 
  (*(hw->mac.ops.update_int_moderator))(hw);
  #line 1853 
  cif_clear_bit_0(11L,(unsigned long *)(& interface->state));
  #line 1856 
  cif_clear_bit_0(3L,(unsigned long *)(& interface->state));
  #line 1859 
  fm10k_napi_enable_all(interface);
  #line 1862 
  fm10k_restore_rx_state(interface);
  #line 1865 
  netif_tx_start_all_queues(interface->netdev);
  #line 1868 
  hw->mac.get_host_state = (_Bool)1;
  #line 1869 
  cif_mod_timer(& interface->service_timer,jiffies);
  #line 1870 
  return;
}

#line 1872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_napi_disable_all(struct fm10k_intfc *interface)
{
  #line 1874 
  struct fm10k_q_vector *q_vector;
  #line 1875 
  int q_idx;
  #line 1877 
  q_idx = 0;
  #line 1877 
  while (interface->num_q_vectors > q_idx) {
    #line 1878 
    q_vector = interface->q_vector[q_idx];
    #line 1879 
    napi_disable(& q_vector->napi);
    #line 1877 
    q_idx ++;
  }
  #line 1881 
  return;
}

#line 1883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_down(struct fm10k_intfc *interface)
{
  #line 1887 
  int err;
  #line 1885 
  struct net_device *netdev = interface->netdev;
  #line 1886 
  struct fm10k_hw *hw = & interface->hw;
  #line 1887 
  int i = 0;
  #line 1887 
  int count = 0;
  #line 1890 
  if ((int)test_and_set_bit(3L,(unsigned long *)(& interface->state)) != 0) 
    #line 1891 
    return;
  #line 1894 
  netif_carrier_off(netdev);
  #line 1897 
  netif_tx_stop_all_queues(netdev);
  #line 1898 
  netif_tx_disable(netdev);
  #line 1901 
  fm10k_reset_rx_state(interface);
  #line 1904 
  fm10k_napi_disable_all(interface);
  #line 1907 
  fm10k_update_stats(interface);
  #line 1910 
  while (1) {
    #line 1910 
    if (! ((int)test_and_set_bit(11L,(unsigned long *)(& interface->state)) != 0)) 
      #line 1910 
      break;
    #line 1911 
    usleep_range(1000UL,2000UL);
  }
  #line 1914 
  if ((long)(hw->hw_addr == (u32 *)0U) != 0L) 
                                              #line 1915 
                                              goto skip_tx_dma_drain;
  #line 1925 
  err = (*(hw->mac.ops.stop_hw))(hw);
  #line 1926 
  if (err != -4) 
                 #line 1927 
                 goto skip_tx_dma_drain;
  #line 1930 
  count = 0;
  #line 1930 
  while (count <= 24) {
    #line 1931 
    usleep_range(10000UL,20000UL);
    #line 1934 
    while (interface->num_tx_queues > i) {
      #line 1935 
      if (fm10k_get_tx_pending(interface->tx_ring[i],(_Bool)0) != 0ULL) 
        #line 1936 
        break;
      #line 1934 
      i ++;
    }
    #line 1939 
    if (interface->num_tx_queues == i) 
                                       #line 1940 
                                       break;
    #line 1930 
    count ++;
  }
  #line 1943 
  if (count > 24) 
                  #line 1944 
                  _dev_err(& (interface->pdev)->dev,(char *)"Tx queues failed to drain after %d tries. Tx DMA is probably hung.\n",count);
  #line 1947 
  skip_tx_dma_drain: 
                     #line 1947 
  ;
  #line 1949 
  err = (*(hw->mac.ops.stop_hw))(hw);
  #line 1950 
  if (err == -4) 
                 #line 1951 
                 _dev_err(& (interface->pdev)->dev,(char *)"due to pending requests hw was not shut down gracefully\n");
  else 
    #line 1953 
    if (err != 0) 
                  #line 1954 
                  _dev_err(& (interface->pdev)->dev,(char *)"stop_hw failed: %d\n",err);
  #line 1957 
  fm10k_clean_all_tx_rings(interface);
  #line 1958 
  fm10k_clean_all_rx_rings(interface);
  #line 1959 
  return;
}

#line 1970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_sw_init(struct fm10k_intfc *interface, struct pci_device_id *ent)
{
  #line 2001 
  int __UNIQUE_ID___x445;
  #line 2001 
  int tmp_0;
  #line 1977 
  u32 rss_key[10U];
  #line 1978 
  unsigned int rss;
  #line 1979 
  int err;
  #line 1973 
  struct fm10k_info *fi = fm10k_info_tbl[ent->driver_data];
  #line 1974 
  struct fm10k_hw *hw = & interface->hw;
  #line 1975 
  struct pci_dev *pdev = interface->pdev;
  #line 1976 
  struct net_device *netdev = interface->netdev;
  #line 1982 
  hw->back = (void *)interface;
  #line 1983 
  hw->hw_addr = interface->uc_addr;
  #line 1986 
  hw->vendor_id = pdev->vendor;
  #line 1987 
  hw->device_id = pdev->device;
  #line 1988 
  hw->revision_id = pdev->revision;
  #line 1989 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  #line 1990 
  hw->subsystem_device_id = pdev->subsystem_device;
  #line 1993 
  memcpy((void *)(& hw->mac.ops),(void *)fi->mac_ops,152UL);
  #line 1994 
  hw->mac.type = fi->mac;
  #line 1997 
  if (fi->iov_ops != (struct fm10k_iov_ops *)0) 
                                                #line 1998 
                                                memcpy((void *)(& hw->iov.ops),(void *)fi->iov_ops,64UL);
  {
    #line 2001 
    __UNIQUE_ID___x445 = 128;
    #line 2001 
    int __UNIQUE_ID___y446 = (int)num_online_cpus();
    #line 2001 
    if (__UNIQUE_ID___x445 < __UNIQUE_ID___y446) 
                                                 #line 2001 
                                                 tmp_0 = __UNIQUE_ID___x445; else 
                                                                    #line 2001 
                                                                    tmp_0 = __UNIQUE_ID___y446;
    }
  #line 2001 
  rss = (unsigned int)tmp_0;
  #line 2002 
  interface->ring_feature[0].limit = (unsigned short)rss;
  #line 2003 
  (*(fi->get_invariants))(hw);
  #line 2006 
  if (hw->mac.ops.get_bus_info != (s32 (*)(struct fm10k_hw *))0) 
                                                                 #line 2007 
                                                                 (*(hw->mac.ops.get_bus_info))(hw);
  #line 2010 
  if (hw->mac.ops.set_dma_mask != (void (*)(struct fm10k_hw *, u64 ))0) {
    #line 2011 
    ;
    #line 2011 
    (*(hw->mac.ops.set_dma_mask))(hw,dma_get_mask(& pdev->dev));
  }
  #line 2014 
  if (dma_get_mask(& pdev->dev) > 4294967295ULL) {
    #line 2015 
    netdev->features |= 32ULL;
    #line 2016 
    netdev->vlan_features |= 32ULL;
  }
  #line 2020 
  err = (*(hw->mac.ops.reset_hw))(hw);
  #line 2021 
  if (err != 0) {
    #line 2022 
    _dev_err(& pdev->dev,(char *)"reset_hw failed: %d\n",err);
    #line 2023 
    return err;
  }
  #line 2026 
  err = (*(hw->mac.ops.init_hw))(hw);
  #line 2027 
  if (err != 0) {
    #line 2028 
    _dev_err(& pdev->dev,(char *)"init_hw failed: %d\n",err);
    #line 2029 
    return err;
  }
  #line 2033 
  (*(hw->mac.ops.update_hw_stats))(hw,& interface->stats);
  #line 2036 
  pci_sriov_set_totalvfs(pdev,(unsigned short)((int)hw->iov.total_vfs));
  #line 2039 
  eth_random_addr((u8 *)(& hw->mac.addr));
  #line 2042 
  err = (*(hw->mac.ops.read_mac_addr))(hw);
  #line 2043 
  if (err != 0) {
    #line 2044 
    _dev_warn(& pdev->dev,(char *)"Failed to obtain MAC address defaulting to random\n");
    #line 2047 
    netdev->addr_assign_type = (unsigned char)((unsigned int)netdev->addr_assign_type | 1U);
  }
  #line 2050 
  ether_addr_copy(netdev->dev_addr,(u8 *)(& hw->mac.addr));
  #line 2051 
  ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 *)(& hw->mac.addr));
  #line 2053 
  if (! is_valid_ether_addr((u8 *)(& netdev->perm_addr))) {
    #line 2054 
    _dev_err(& pdev->dev,(char *)"Invalid MAC Address\n");
    #line 2055 
    return -5;
  }
  #line 2059 
  fm10k_dcbnl_set_ops(netdev);
  #line 2062 
  interface->tx_ring_count = (unsigned short)256U;
  #line 2063 
  interface->rx_ring_count = (unsigned short)256U;
  #line 2066 
  interface->tx_itr = (unsigned short)25U;
  #line 2067 
  interface->rx_itr = (unsigned short)32818U;
  #line 2070 
  INIT_LIST_HEAD(& interface->vxlan_port);
  #line 2071 
  INIT_LIST_HEAD(& interface->geneve_port);
  #line 2074 
  INIT_LIST_HEAD(& interface->macvlan_requests);
  #line 2076 
  netdev_rss_key_fill((void *)(& rss_key),40UL);
  #line 2077 
  memcpy((void *)(& interface->rssrk),(void *)(& rss_key),40UL);
  #line 2080 
  spinlock_check(& interface->mbx_lock);
  {
    #line 2080 
    struct lock_class_key __key;
    #line 2080 
    __raw_spin_lock_init(& interface->mbx_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&interface->mbx_lock)->rlock",& __key);
  }
  #line 2081 
  spinlock_check(& interface->macvlan_lock);
  {
    #line 2081 
    struct lock_class_key __key_0;
    #line 2081 
    __raw_spin_lock_init(& interface->macvlan_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&interface->macvlan_lock)->rlock",& __key_0);
  }
  #line 2084 
  cif_set_bit_0(3L,(unsigned long *)(& interface->state));
  #line 2085 
  cif_set_bit_0(11L,(unsigned long *)(& interface->state));
  #line 2087 
  return 0;
}

#line 2101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 2103 
  struct net_device *netdev;
  #line 2104 
  struct fm10k_intfc *interface;
  #line 2105 
  int err;
  #line 2107 
  if (pdev->error_state != 1U) {
    #line 2108 
    _dev_err(& pdev->dev,(char *)"PCI device still in an error state. Unable to load...\n");
    #line 2110 
    return -5;
  }
  #line 2113 
  err = pci_enable_device_mem(pdev);
  #line 2114 
  if (err != 0) {
    #line 2115 
    _dev_err(& pdev->dev,(char *)"PCI enable device failed: %d\n",err);
    #line 2117 
    return err;
  }
  #line 2120 
  err = dma_set_mask_and_coherent(& pdev->dev,281474976710655ULL);
  #line 2121 
  if (err != 0) 
                #line 2122 
                err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
  #line 2123 
  if (err != 0) {
    #line 2124 
    _dev_err(& pdev->dev,(char *)"DMA configuration failed: %d\n",err);
    #line 2126 
    goto err_dma;
  }
  #line 2129 
  err = pci_request_mem_regions(pdev,(char *)(& fm10k_driver_name));
  #line 2130 
  if (err != 0) {
    #line 2131 
    _dev_err(& pdev->dev,(char *)"pci_request_selected_regions failed: %d\n",err);
    #line 2133 
    goto err_pci_reg;
  }
  #line 2136 
  pci_enable_pcie_error_reporting(pdev);
  #line 2138 
  pci_set_master(pdev);
  #line 2139 
  pci_save_state(pdev);
  #line 2141 
  netdev = fm10k_alloc_netdev(fm10k_info_tbl[ent->driver_data]);
  #line 2142 
  if (netdev == (struct net_device *)0) {
    #line 2143 
    err = -12;
    #line 2144 
    goto err_alloc_netdev;
  }
  #line 2147 
  netdev->dev.parent = & pdev->dev;
  #line 2149 
  interface = (struct fm10k_intfc *)netdev_priv(netdev);
  #line 2150 
  pci_set_drvdata(pdev,(void *)interface);
  #line 2152 
  interface->netdev = netdev;
  #line 2153 
  interface->pdev = pdev;
  #line 2155 
  interface->uc_addr = (u32 *)ioremap(pdev->resource[0].start,1048576UL);
  #line 2157 
  if (interface->uc_addr == (u32 *)0U) {
    #line 2158 
    err = -5;
    #line 2159 
    goto err_ioremap;
  }
  #line 2162 
  err = fm10k_sw_init(interface,ent);
  #line 2163 
  if (err != 0) 
                #line 2164 
                goto err_sw_init;
  #line 2167 
  fm10k_dbg_intfc_init(interface);
  #line 2169 
  err = fm10k_init_queueing_scheme(interface);
  #line 2170 
  if (err != 0) 
                #line 2171 
                goto err_sw_init;
  #line 2177 
  cif_set_bit_0(6L,(unsigned long *)(& interface->state));
  #line 2179 
  err = fm10k_mbx_request_irq(interface);
  #line 2180 
  if (err != 0) 
                #line 2181 
                goto err_mbx_interrupt;
  #line 2184 
  err = fm10k_hw_ready(interface);
  #line 2185 
  if (err != 0) 
                #line 2186 
                goto err_register;
  #line 2188 
  err = cif_register_netdev(netdev);
  #line 2189 
  if (err != 0) 
                #line 2190 
                goto err_register;
  #line 2193 
  netif_carrier_off(netdev);
  #line 2196 
  netif_tx_stop_all_queues(netdev);
  {
    #line 2201 
    struct lock_class_key __key;
    #line 2201 
    init_timer_key(& interface->service_timer,& fm10k_service_timer,0U,(char *)"(&interface->service_timer)",& __key);
  }
  {
    #line 2202 
    struct lock_class_key __key_0;
    #line 2202 
    __init_work(& interface->service_task,0);
    #line 2202 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 2202 
    interface->service_task.data = __constr_expr_34;
    #line 2202 
    lockdep_init_map(& interface->service_task.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 2202 
    INIT_LIST_HEAD(& interface->service_task.entry);
    #line 2202 
    interface->service_task.func = & fm10k_service_task;
  }
  {
    #line 2205 
    struct lock_class_key __key_1;
    #line 2205 
    __init_work(& interface->macvlan_task.work,0);
    #line 2205 
    atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
    #line 2205 
    interface->macvlan_task.work.data = __constr_expr_35;
    #line 2205 
    lockdep_init_map(& interface->macvlan_task.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 2205 
    INIT_LIST_HEAD(& interface->macvlan_task.work.entry);
    #line 2205 
    interface->macvlan_task.work.func = & fm10k_macvlan_task;
  }
  {
    #line 2205 
    struct lock_class_key __key_2;
    #line 2205 
    init_timer_key(& interface->macvlan_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&interface->macvlan_task)->timer",& __key_2);
  }
  #line 2208 
  cif_mod_timer(& interface->service_timer,jiffies + 500UL);
  #line 2211 
  pcie_print_link_status(interface->pdev);
  #line 2214 
  _dev_info(& pdev->dev,(char *)"%pM\n",netdev->dev_addr);
  #line 2217 
  fm10k_iov_configure(pdev,0);
  #line 2220 
  cif_clear_bit_0(6L,(unsigned long *)(& interface->state));
  #line 2221 
  fm10k_service_event_schedule(interface);
  #line 2223 
  return 0;
  #line 2225 
  err_register: 
                #line 2225 
  ;
  #line 2226 
  fm10k_mbx_free_irq(interface);
  #line 2227 
  err_mbx_interrupt: 
                     #line 2227 
  ;
  #line 2228 
  fm10k_clear_queueing_scheme(interface);
  #line 2229 
  err_sw_init: 
               #line 2229 
  ;
  #line 2230 
  if (interface->sw_addr != (u32 *)0U) 
                                       #line 2231 
                                       iounmap((void *)interface->sw_addr);
  #line 2232 
  iounmap((void *)interface->uc_addr);
  #line 2233 
  err_ioremap: 
               #line 2233 
  ;
  #line 2234 
  cif_free_netdev(netdev);
  #line 2235 
  err_alloc_netdev: 
                    #line 2235 
  ;
  #line 2236 
  pci_release_mem_regions(pdev);
  #line 2237 
  err_pci_reg: 
               #line 2237 
  ;
  #line 2238 
  err_dma: 
           #line 2238 
  ;
  #line 2239 
  pci_disable_device(pdev);
  #line 2240 
  return err;
}

#line 2252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_remove(struct pci_dev *pdev)
{
  #line 2254 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 2255 
  struct net_device *netdev = interface->netdev;
  #line 2257 
  cif_del_timer_sync(& interface->service_timer);
  #line 2259 
  fm10k_stop_service_event(interface);
  #line 2260 
  fm10k_stop_macvlan_task(interface);
  #line 2263 
  fm10k_clear_macvlan_queue(interface,(unsigned short)((int)interface->glort),(_Bool)1);
  #line 2266 
  if ((unsigned int)netdev->reg_state == 1U) 
                                             #line 2267 
                                             cif_unregister_netdev(netdev);
  #line 2270 
  fm10k_iov_disable(pdev);
  #line 2273 
  fm10k_mbx_free_irq(interface);
  #line 2276 
  fm10k_clear_queueing_scheme(interface);
  #line 2279 
  fm10k_dbg_intfc_exit(interface);
  #line 2281 
  if (interface->sw_addr != (u32 *)0U) 
                                       #line 2282 
                                       iounmap((void *)interface->sw_addr);
  #line 2283 
  iounmap((void *)interface->uc_addr);
  #line 2285 
  cif_free_netdev(netdev);
  #line 2287 
  pci_release_mem_regions(pdev);
  #line 2289 
  pci_disable_pcie_error_reporting(pdev);
  #line 2291 
  pci_disable_device(pdev);
  #line 2292 
  return;
}

#line 2294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_prepare_suspend(struct fm10k_intfc *interface)
{
  #line 2304 
  fm10k_stop_service_event(interface);
  #line 2306 
  if ((int)fm10k_prepare_for_reset(interface) != 0) 
                                                    #line 2307 
                                                    cif_set_bit_0(2L,(unsigned long *)(& interface->state));
  #line 2308 
  return;
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_handle_resume(struct fm10k_intfc *interface)
{
  #line 2313 
  int err;
  #line 2312 
  struct fm10k_hw *hw = & interface->hw;
  #line 2318 
  if (! test_and_set_bit(2L,(unsigned long *)(& interface->state))) 
                                                                    #line 2319 
                                                                    _dev_warn(& (interface->pdev)->dev,(char *)"Device was shut down as part of suspend... Attempting to recover\n");
  #line 2323 
  (*(hw->mac.ops.rebind_hw_stats))(hw,& interface->stats);
  #line 2325 
  err = fm10k_handle_reset(interface);
  #line 2326 
  if (err != 0) 
                #line 2327 
                return err;
  #line 2332 
  interface->host_ready = (_Bool)0;
  #line 2333 
  fm10k_watchdog_host_not_ready(interface);
  #line 2336 
  interface->link_down_event = jiffies + 250UL;
  #line 2337 
  cif_set_bit_0(10L,(unsigned long *)(& interface->state));
  #line 2340 
  fm10k_start_service_event(interface);
  #line 2343 
  fm10k_macvlan_schedule(interface);
  #line 2345 
  return 0;
}

#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_resume(struct device *dev)
{
  #line 2361 
  int err;
  #line 2358 
  struct fm10k_intfc *interface = dev_get_drvdata(dev);
  #line 2359 
  struct net_device *netdev = interface->netdev;
  #line 2360 
  struct fm10k_hw *hw = & interface->hw;
  #line 2364 
  hw->hw_addr = interface->uc_addr;
  #line 2366 
  err = fm10k_handle_resume(interface);
  #line 2367 
  if (err != 0) 
                #line 2368 
                return err;
  #line 2370 
  netif_device_attach(netdev);
  #line 2372 
  return 0;
}

#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static int fm10k_suspend(struct device *dev)
{
  #line 2385 
  struct fm10k_intfc *interface = dev_get_drvdata(dev);
  #line 2386 
  struct net_device *netdev = interface->netdev;
  #line 2388 
  netif_device_detach(netdev);
  #line 2390 
  fm10k_prepare_suspend(interface);
  #line 2392 
  return 0;
}

#line 2403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static pci_ers_result_t fm10k_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 2406 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 2407 
  struct net_device *netdev = interface->netdev;
  #line 2409 
  netif_device_detach(netdev);
  #line 2411 
  if (state == 3U) 
                   #line 2412 
                   return 4U;
  #line 2414 
  fm10k_prepare_suspend(interface);
  #line 2417 
  return 3U;
}

#line 2426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static pci_ers_result_t fm10k_io_slot_reset(struct pci_dev *pdev)
{
  #line 2428 
  pci_ers_result_t result;
  #line 2430 
  if (pci_reenable_device(pdev) != 0) {
    #line 2431 
    _dev_err(& pdev->dev,(char *)"Cannot re-enable PCI device after reset.\n");
    #line 2433 
    result = 4U;
  }
  else {
    #line 2435 
    pci_set_master(pdev);
    #line 2436 
    pci_restore_state(pdev);
    #line 2441 
    pci_save_state(pdev);
    #line 2443 
    pci_wake_from_d3(pdev,(_Bool)0);
    #line 2445 
    result = 5U;
  }
  #line 2448 
  return result;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_io_resume(struct pci_dev *pdev)
{
  #line 2462 
  int err;
  #line 2460 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 2461 
  struct net_device *netdev = interface->netdev;
  #line 2464 
  err = fm10k_handle_resume(interface);
  #line 2466 
  if (err != 0) 
                #line 2467 
                _dev_warn(& pdev->dev,(char *)"%s failed: %d\n",(char *)"fm10k_io_resume",err); else 
                                                                    #line 2470 
                                                                    netif_device_attach(netdev);
  #line 2471 
  return;
}

#line 2480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_io_reset_prepare(struct pci_dev *pdev)
{
  #line 2483 
  if (pci_num_vf(pdev) != 0) 
                             #line 2484 
                             _dev_warn(& pdev->dev,(char *)"PCIe FLR may cause issues for any active VF devices\n");
  #line 2486 
  fm10k_prepare_suspend((struct fm10k_intfc *)pci_get_drvdata(pdev));
  #line 2487 
  return;
}

#line 2496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static void fm10k_io_reset_done(struct pci_dev *pdev)
{
  #line 2498 
  struct fm10k_intfc *interface = pci_get_drvdata(pdev);
  #line 2499 
  int err = fm10k_handle_resume(interface);
  #line 2501 
  if (err != 0) {
    #line 2502 
    _dev_warn(& pdev->dev,(char *)"%s failed: %d\n",(char *)"fm10k_io_reset_done",err);
    #line 2504 
    netif_device_detach(interface->netdev);
  }
  #line 2506 
  return;
}

#line 2508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static struct pci_error_handlers fm10k_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& fm10k_io_error_detected), .slot_reset = & fm10k_io_slot_reset, .reset_prepare = & fm10k_io_reset_prepare, .reset_done = & fm10k_io_reset_done, .resume = & fm10k_io_resume};
#line 2516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static struct dev_pm_ops fm10k_pm_ops = {.suspend = & fm10k_suspend, .resume = & fm10k_resume, .freeze = & fm10k_suspend, .thaw = & fm10k_resume, .poweroff = & fm10k_suspend, .restore = & fm10k_resume};
#line 2518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
static struct pci_driver fm10k_driver = {.name = (char *)(& fm10k_driver_name), .id_table = (struct pci_device_id *)(& fm10k_pci_tbl), .probe = & fm10k_probe, .remove = & fm10k_remove, .sriov_configure = & fm10k_iov_configure, .err_handler = & fm10k_err_handler, .driver = {.pm = & fm10k_pm_ops}};
#line 2535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
int fm10k_register_pci_driver(void)
{
  #line 2537 
  return cif___pci_register_driver(& fm10k_driver,& __this_module,
                                (char *)"fm10k");
}

#line 2545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_pci.c"
void fm10k_unregister_pci_driver(void)
{
  #line 2547 
  cif_pci_unregister_driver(& fm10k_driver);
  #line 2548 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
struct pci_driver *emg_alias_fm10k_driver = & fm10k_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
struct pci_device_id (*emg_alias_fm10k_pci_tbl)[5U] = & fm10k_pci_tbl;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
struct dev_pm_ops *emg_alias_fm10k_pm_ops = & fm10k_pm_ops;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 105 
#line 105 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 106 
#line 106 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 107 
#line 107 
int emg_register_netdev(struct net_device *arg0);
#line 108 
#line 108 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 110 
#line 110 
void emg_unregister_netdev(struct net_device *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
enum irqreturn emg_wrapper_fm10k_msix_clean_rings(int arg0, void *arg1)
{
  #line 115 
  return fm10k_msix_clean_rings(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
enum irqreturn emg_wrapper_fm10k_msix_mbx_pf(int arg0, void *arg1)
{
  #line 120 
  return fm10k_msix_mbx_pf(arg0,arg1);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
enum irqreturn emg_wrapper_fm10k_msix_mbx_vf(int arg0, void *arg1)
{
  #line 125 
  return fm10k_msix_mbx_vf(arg0,arg1);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
int emg_wrapper_fm10k_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 130 
  return fm10k_probe(arg0,arg1);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
void emg_wrapper_fm10k_remove(struct pci_dev *arg0)
{
  #line 135 
  fm10k_remove(arg0);
  #line 136 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
int emg_wrapper_fm10k_resume(struct device *arg0)
{
  #line 140 
  return fm10k_resume(arg0);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
int emg_wrapper_fm10k_suspend(struct device *arg0)
{
  #line 145 
  return fm10k_suspend(arg0);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 167 
  ldv_set_bit(nr,addr);
  #line 168 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 174 
  ldv_clear_bit(nr,addr);
  #line 175 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 181 
  ldv_init_list_head(list);
  #line 182 
  return;
}

#line 348  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 352 
  return emg_queue_work(wq,work);
}

#line 356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 360 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 598  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 601 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 603 
  spin_lock_1(lock);
  #line 604 
  return;
}

#line 638  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 641 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 643 
  spin_unlock_1(lock);
  #line 644 
  return;
}

#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc_1(spinlock_t *lock)
{
  #line 713 
  ldv_spin_model_lock((char *)"mbx_lock_of_fm10k_intfc");
  #line 715 
  spin_lock_1(lock);
  #line 716 
  return;
}

#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc_1(spinlock_t *lock)
{
  #line 722 
  ldv_spin_model_unlock((char *)"mbx_lock_of_fm10k_intfc");
  #line 724 
  spin_unlock_1(lock);
  #line 725 
  return;
}

#line 728  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_spin_trylock_mbx_lock_of_fm10k_intfc(spinlock_t *lock)
{
  #line 732 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  #line 734 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 736 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 739 
                                           return 0;
  else {
    #line 741 
    ldv_spin_model_lock((char *)"mbx_lock_of_fm10k_intfc");
    #line 743 
    return 1;
  }
  #line 746 
  return ldv_func_res;
}

#line 750  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 754 
  return emg_mod_timer(timer,expires);
}

#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc(spinlock_t *lock)
{
  #line 761 
  ldv_spin_model_lock((char *)"macvlan_lock_of_fm10k_intfc");
  #line 763 
  __ldv_spin_lock(lock);
  #line 764 
  return;
}

#line 767  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc(spinlock_t *lock, unsigned long flags)
{
  #line 770 
  ldv_spin_model_unlock((char *)"macvlan_lock_of_fm10k_intfc");
  #line 772 
  spin_unlock_irqrestore(lock,flags);
  #line 773 
  return;
}

#line 776  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 780 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 784  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 788 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 796 
  return emg_register_netdev(dev);
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 804 
  emg_free_netdev(dev);
  #line 805 
  return;
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 812 
  return emg_del_timer_sync(timer);
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 820 
  emg_unregister_netdev(dev);
  #line 821 
  return;
}

#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 828 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 836 
  emg_pci_unregister_driver(dev);
  #line 837 
  return;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
s32 fm10k_get_bus_info_generic(struct fm10k_hw *hw)
{
  #line 15 
  u16 link_cap;
  #line 15 
  u16 link_status;
  #line 15 
  u16 device_cap;
  #line 15 
  u16 device_control;
  #line 18 
  link_cap = fm10k_read_pci_cfg_word(hw,124U);
  #line 20 
  switch ((int)link_cap & 1008) {
    #line 21 
    case 16: 
             #line 21 
    ;
    #line 22 
    hw->bus_caps.width = fm10k_bus_width_pcie_x1;
    #line 23 
    break;
    #line 24 
    case 32: 
             #line 24 
    ;
    #line 25 
    hw->bus_caps.width = fm10k_bus_width_pcie_x2;
    #line 26 
    break;
    #line 27 
    case 64: 
             #line 27 
    ;
    #line 28 
    hw->bus_caps.width = fm10k_bus_width_pcie_x4;
    #line 29 
    break;
    #line 30 
    case 128: 
              #line 30 
    ;
    #line 31 
    hw->bus_caps.width = fm10k_bus_width_pcie_x8;
    #line 32 
    break;
    #line 33 
    default: 
             #line 33 
    ;
    #line 34 
    hw->bus_caps.width = fm10k_bus_width_unknown;
    #line 35 
    break;
  }
  #line 38 
  switch ((int)link_cap & 15) {
    #line 39 
    case 1: 
            #line 39 
    ;
    #line 40 
    hw->bus_caps.speed = fm10k_bus_speed_2500;
    #line 41 
    break;
    #line 42 
    case 2: 
            #line 42 
    ;
    #line 43 
    hw->bus_caps.speed = fm10k_bus_speed_5000;
    #line 44 
    break;
    #line 45 
    case 3: 
            #line 45 
    ;
    #line 46 
    hw->bus_caps.speed = fm10k_bus_speed_8000;
    #line 47 
    break;
    #line 48 
    default: 
             #line 48 
    ;
    #line 49 
    hw->bus_caps.speed = fm10k_bus_speed_unknown;
    #line 50 
    break;
  }
  #line 54 
  device_cap = fm10k_read_pci_cfg_word(hw,116U);
  #line 56 
  switch ((int)device_cap & 7) {
    #line 57 
    case 0: 
            #line 57 
    ;
    #line 58 
    hw->bus_caps.payload = fm10k_bus_payload_128;
    #line 59 
    break;
    #line 60 
    case 1: 
            #line 60 
    ;
    #line 61 
    hw->bus_caps.payload = fm10k_bus_payload_256;
    #line 62 
    break;
    #line 63 
    case 2: 
            #line 63 
    ;
    #line 64 
    hw->bus_caps.payload = fm10k_bus_payload_512;
    #line 65 
    break;
    #line 66 
    default: 
             #line 66 
    ;
    #line 67 
    hw->bus_caps.payload = fm10k_bus_payload_unknown;
    #line 68 
    break;
  }
  #line 72 
  link_status = fm10k_read_pci_cfg_word(hw,130U);
  #line 74 
  switch ((int)link_status & 1008) {
    #line 75 
    case 16: 
             #line 75 
    ;
    #line 76 
    hw->bus.width = fm10k_bus_width_pcie_x1;
    #line 77 
    break;
    #line 78 
    case 32: 
             #line 78 
    ;
    #line 79 
    hw->bus.width = fm10k_bus_width_pcie_x2;
    #line 80 
    break;
    #line 81 
    case 64: 
             #line 81 
    ;
    #line 82 
    hw->bus.width = fm10k_bus_width_pcie_x4;
    #line 83 
    break;
    #line 84 
    case 128: 
              #line 84 
    ;
    #line 85 
    hw->bus.width = fm10k_bus_width_pcie_x8;
    #line 86 
    break;
    #line 87 
    default: 
             #line 87 
    ;
    #line 88 
    hw->bus.width = fm10k_bus_width_unknown;
    #line 89 
    break;
  }
  #line 92 
  switch ((int)link_status & 15) {
    #line 93 
    case 1: 
            #line 93 
    ;
    #line 94 
    hw->bus.speed = fm10k_bus_speed_2500;
    #line 95 
    break;
    #line 96 
    case 2: 
            #line 96 
    ;
    #line 97 
    hw->bus.speed = fm10k_bus_speed_5000;
    #line 98 
    break;
    #line 99 
    case 3: 
            #line 99 
    ;
    #line 100 
    hw->bus.speed = fm10k_bus_speed_8000;
    #line 101 
    break;
    #line 102 
    default: 
             #line 102 
    ;
    #line 103 
    hw->bus.speed = fm10k_bus_speed_unknown;
    #line 104 
    break;
  }
  #line 108 
  device_control = fm10k_read_pci_cfg_word(hw,120U);
  #line 110 
  switch ((int)device_control & 224) {
    #line 111 
    case 0: 
            #line 111 
    ;
    #line 112 
    hw->bus.payload = fm10k_bus_payload_128;
    #line 113 
    break;
    #line 114 
    case 32: 
             #line 114 
    ;
    #line 115 
    hw->bus.payload = fm10k_bus_payload_256;
    #line 116 
    break;
    #line 117 
    case 64: 
             #line 117 
    ;
    #line 118 
    hw->bus.payload = fm10k_bus_payload_512;
    #line 119 
    break;
    #line 120 
    default: 
             #line 120 
    ;
    #line 121 
    hw->bus.payload = fm10k_bus_payload_unknown;
    #line 122 
    break;
  }
  #line 125 
  return 0;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
static u16 fm10k_get_pcie_msix_count_generic(struct fm10k_hw *hw)
{
  #line 130 
  u16 msix_count;
  #line 133 
  msix_count = fm10k_read_pci_cfg_word(hw,178U);
  #line 134 
  msix_count = (unsigned short)((unsigned int)msix_count & 2047U);
  #line 137 
  msix_count = (u16)((int)msix_count + 1);
  #line 139 
  if ((unsigned int)msix_count > 256U) 
                                       #line 140 
                                       msix_count = (unsigned short)256U;
  #line 142 
  return msix_count;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
s32 fm10k_get_invariants_generic(struct fm10k_hw *hw)
{
  #line 153 
  struct fm10k_mac_info *mac = & hw->mac;
  #line 156 
  mac->dglort_map = 65535U;
  #line 159 
  mac->max_msix_vectors = fm10k_get_pcie_msix_count_generic(hw);
  #line 161 
  return 0;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
s32 fm10k_start_hw_generic(struct fm10k_hw *hw)
{
  #line 174 
  hw->mac.tx_ready = (_Bool)1;
  #line 176 
  return 0;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
s32 fm10k_disable_queues_generic(struct fm10k_hw *hw, u16 q_cnt)
{
  #line 187 
  u32 reg;
  #line 188 
  u16 i;
  #line 188 
  u16 time;
  #line 191 
  hw->mac.tx_ready = (_Bool)0;
  #line 193 
  if ((long)(hw->hw_addr == (u32 *)0U) != 0L) 
                                              #line 194 
                                              return 0;
  #line 197 
  i = (unsigned short)0U;
  #line 197 
  while ((int)i < (int)q_cnt) {
    #line 198 
    reg = fm10k_read_reg(hw,(int)i * 64 + 32774);
    {
      #line 200 
      union __anonunion___u_5221 __u;
      #line 199 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 199 
      u32 *hw_addr = (__u.__val);
      #line 199 
      if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                              #line 199 
                                              writel(reg & 4294950911U,(void *)(hw_addr + ((unsigned long)((int)i * 64) + (unsigned long)32774U)));
    }
    #line 201 
    reg = fm10k_read_reg(hw,(int)i * 64 + 16390);
    {
      #line 203 
      union __anonunion___u_5223 __u_0;
      #line 202 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 202 
      u32 *hw_addr_0 = (__u_0.__val);
      #line 202 
      if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                                #line 202 
                                                writel(reg & 4294967294U,(void *)(hw_addr_0 + ((unsigned long)((int)i * 64) + (unsigned long)16390U)));
    }
    #line 197 
    i = (u16)((int)i + 1);
  }
  #line 206 
  fm10k_read_reg(hw,0);
  #line 207 
  __const_udelay(4295UL);
  #line 210 
  i = (unsigned short)0U;
  #line 210 
  time = (unsigned short)100U;
  #line 210 
  while ((unsigned int)time != 0U) {
    #line 212 
    if ((int)i == (int)q_cnt) 
                              #line 213 
                              return 0;
    #line 216 
    reg = fm10k_read_reg(hw,(int)i * 64 + 32774);
    #line 217 
    if (reg == 4294967295U || (reg & 16384U) == 0U) {
      #line 218 
      reg = fm10k_read_reg(hw,(int)i * 64 + 16390);
      #line 219 
      if (reg == 4294967295U || (reg & 1U) == 0U) {
        #line 220 
        i = (u16)((int)i + 1);
        #line 221 
        goto __Cont;
      }
    }
    #line 226 
    time = (u16)((int)time - 1);
    #line 227 
    if ((unsigned int)time != 0U) 
                                  #line 228 
                                  __const_udelay(4295UL);
    #line 210 
    __Cont: 
            #line 210 
    ;
  }
  #line 231 
  return -4;
}

#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
s32 fm10k_stop_hw_generic(struct fm10k_hw *hw)
{
  #line 241 
  return fm10k_disable_queues_generic(hw,
                                   (unsigned short)((int)hw->mac.max_queues));
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
u32 fm10k_read_hw_stats_32b(struct fm10k_hw *hw, u32 addr, struct fm10k_hw_stat *stat)
{
  #line 256 
  u32 delta = fm10k_read_reg(hw,(int)addr) - stat->base_l;
  #line 258 
  if ((long)(hw->hw_addr == (u32 *)0U) != 0L) 
                                              #line 259 
                                              stat->base_h = 0U;
  #line 261 
  return delta;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
static u64 fm10k_read_hw_stats_48b(struct fm10k_hw *hw, u32 addr, struct fm10k_hw_stat *stat)
{
  #line 278 
  u32 count_l;
  #line 279 
  u32 count_h;
  #line 280 
  u32 count_tmp;
  #line 281 
  u64 delta;
  #line 283 
  count_h = fm10k_read_reg(hw,(int)(addr + 1U));
  #line 286 
  while (1) {
    #line 287 
    count_tmp = count_h;
    #line 288 
    count_l = fm10k_read_reg(hw,(int)addr);
    #line 289 
    count_h = fm10k_read_reg(hw,(int)(addr + 1U));
    #line 290 
    if (! (count_h != count_tmp)) 
                                  #line 286 
                                  break;
  }
  #line 292 
  delta = ((unsigned long long)(count_h - stat->base_h) << 32) + (unsigned long long)count_l;
  #line 293 
  delta -= (unsigned long long)stat->base_l;
  #line 295 
  return delta & 281474976710655ULL;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
static void fm10k_update_hw_base_48b(struct fm10k_hw_stat *stat, u64 delta)
{
  #line 308 
  if (delta == 0ULL) 
                     #line 309 
                     return;
  #line 312 
  delta = (unsigned long long)stat->base_l + delta;
  #line 313 
  stat->base_l = (unsigned int)delta;
  #line 316 
  stat->base_h += (unsigned int)(delta >> 32);
  #line 317 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
static void fm10k_update_hw_stats_tx_q(struct fm10k_hw *hw, struct fm10k_hw_stats_q *q, u32 idx)
{
  #line 332 
  u32 id_tx;
  #line 332 
  u32 id_tx_prev;
  #line 332 
  u32 tx_packets;
  #line 333 
  u64 tx_bytes = 0ULL;
  #line 336 
  id_tx = fm10k_read_reg(hw,(int)(idx * 64U + 32775U));
  #line 339 
  while (1) {
    #line 340 
    tx_packets = fm10k_read_hw_stats_32b(hw,idx * 64U + 32777U,& q->tx_packets);
    #line 343 
    if (tx_packets != 0U) 
                          #line 344 
                          tx_bytes = fm10k_read_hw_stats_48b(hw,idx * 64U + 32778U,& q->tx_bytes);
    #line 349 
    id_tx_prev = id_tx;
    #line 350 
    id_tx = fm10k_read_reg(hw,(int)(idx * 64U + 32775U));
    #line 351 
    if (! (((id_tx ^ id_tx_prev) & 127U) != 0U)) 
                                                 #line 339 
                                                 break;
  }
  #line 354 
  id_tx &= 127U;
  #line 355 
  id_tx |= 2147483648U;
  #line 358 
  if (q->tx_packets.base_h == id_tx) {
    #line 359 
    q->tx_packets.count += (unsigned long long)tx_packets;
    #line 360 
    q->tx_bytes.count += tx_bytes;
  }
  #line 364 
  q->tx_packets.base_l += tx_packets;
  #line 365 
  fm10k_update_hw_base_48b(& q->tx_bytes,tx_bytes);
  #line 367 
  q->tx_packets.base_h = id_tx;
  #line 368 
  return;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
static void fm10k_update_hw_stats_rx_q(struct fm10k_hw *hw, struct fm10k_hw_stats_q *q, u32 idx)
{
  #line 383 
  u32 id_rx;
  #line 383 
  u32 id_rx_prev;
  #line 383 
  u32 rx_packets;
  #line 383 
  u32 rx_drops;
  #line 384 
  u64 rx_bytes = 0ULL;
  #line 387 
  id_rx = fm10k_read_reg(hw,(int)(idx * 64U + 16390U));
  #line 390 
  while (1) {
    #line 391 
    rx_drops = fm10k_read_hw_stats_32b(hw,idx * 64U + 16395U,& q->rx_drops);
    #line 394 
    rx_packets = fm10k_read_hw_stats_32b(hw,idx * 64U + 16394U,& q->rx_packets);
    #line 397 
    if (rx_packets != 0U) 
                          #line 398 
                          rx_bytes = fm10k_read_hw_stats_48b(hw,idx * 64U + 16396U,& q->rx_bytes);
    #line 403 
    id_rx_prev = id_rx;
    #line 404 
    id_rx = fm10k_read_reg(hw,(int)(idx * 64U + 16390U));
    #line 405 
    if (! (((id_rx ^ id_rx_prev) & 508U) != 0U)) 
                                                 #line 390 
                                                 break;
  }
  #line 408 
  id_rx &= 508U;
  #line 409 
  id_rx |= 2147483648U;
  #line 412 
  if (q->rx_packets.base_h == id_rx) {
    #line 413 
    q->rx_drops.count += (unsigned long long)rx_drops;
    #line 414 
    q->rx_packets.count += (unsigned long long)rx_packets;
    #line 415 
    q->rx_bytes.count += rx_bytes;
  }
  #line 419 
  q->rx_drops.base_l += rx_drops;
  #line 420 
  q->rx_packets.base_l += rx_packets;
  #line 421 
  fm10k_update_hw_base_48b(& q->rx_bytes,rx_bytes);
  #line 423 
  q->rx_packets.base_h = id_rx;
  #line 424 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
void fm10k_update_hw_stats_q(struct fm10k_hw *hw, struct fm10k_hw_stats_q *q, u32 idx, u32 count)
{
  #line 439 
  u32 i;
  #line 441 
  i = 0U;
  #line 441 
  while (i < count) {
    #line 442 
    fm10k_update_hw_stats_tx_q(hw,q,idx);
    #line 443 
    fm10k_update_hw_stats_rx_q(hw,q,idx);
    #line 441 
    i ++;
    #line 441 
    idx ++;
    #line 441 
    q ++;
  }
  #line 445 
  return;
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
void fm10k_unbind_hw_stats_q(struct fm10k_hw_stats_q *q, u32 idx, u32 count)
{
  #line 458 
  u32 i;
  #line 460 
  i = 0U;
  #line 460 
  while (i < count) {
    #line 461 
    q->rx_packets.base_h = 0U;
    #line 462 
    q->tx_packets.base_h = 0U;
    #line 460 
    i ++;
    #line 460 
    idx ++;
    #line 460 
    q ++;
  }
  #line 464 
  return;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_common.c"
s32 fm10k_get_host_state_generic(struct fm10k_hw *hw, bool *host_ready)
{
  #line 476 
  struct fm10k_mbx_info *mbx = & hw->mbx;
  #line 477 
  struct fm10k_mac_info *mac = & hw->mac;
  #line 478 
  s32 ret_val = 0;
  #line 479 
  u32 txdctl = fm10k_read_reg(hw,32774);
  #line 482 
  (*(mbx->ops.process))(hw,mbx);
  #line 485 
  if (txdctl == 4294967295U || (txdctl & 16384U) == 0U) 
                                                        #line 486 
                                                        mac->get_host_state = (_Bool)1;
  #line 489 
  if (! mac->get_host_state || txdctl == 4294967295U) 
                                                      #line 490 
                                                      goto out;
  #line 493 
  if ((int)mac->tx_ready != 0 && (txdctl & 16384U) == 0U) {
    #line 494 
    ret_val = -5;
    #line 495 
    goto out;
  }
  #line 499 
  if (mbx->timeout == 0U) {
    #line 500 
    ret_val = -5;
    #line 501 
    goto out;
  }
  #line 505 
  if (mbx->state != (unsigned int)FM10K_STATE_OPEN) 
                                                    #line 506 
                                                    goto out;
  #line 509 
  if (mac->dglort_map == 65535U) {
    #line 510 
    if (mac->ops.request_lport_map != (s32 (*)(struct fm10k_hw *))0) 
      #line 511 
      ret_val = (*(mac->ops.request_lport_map))(hw);
    #line 513 
    goto out;
  }
  #line 519 
  mac->get_host_state = (_Bool)0;
  #line 521 
  out: 
       #line 521 
  ;
  #line 522 
  *host_ready = (_Bool)(! ((int)mac->get_host_state != 0));
  #line 523 
  return ret_val;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_fifo_init(struct fm10k_mbx_fifo *fifo, u32 *buffer, u16 size)
{
  #line 14 
  fifo->buffer = buffer;
  #line 15 
  fifo->size = size;
  #line 16 
  fifo->head = (unsigned short)0U;
  #line 17 
  fifo->tail = (unsigned short)0U;
  #line 18 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_fifo_used(struct fm10k_mbx_fifo *fifo)
{
  #line 28 
  return (unsigned short)((int)fifo->tail - (int)fifo->head);
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_fifo_unused(struct fm10k_mbx_fifo *fifo)
{
  #line 39 
  return (unsigned short)(((int)fifo->size + (int)fifo->head) - (int)fifo->tail);
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static bool fm10k_fifo_empty(struct fm10k_mbx_fifo *fifo)
{
  #line 50 
  return (_Bool)((int)fifo->head == (int)fifo->tail);
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_fifo_head_offset(struct fm10k_mbx_fifo *fifo, u16 offset)
{
  #line 62 
  return (unsigned short)((unsigned int)((int)fifo->head + (int)offset) & ((unsigned int)fifo->size + 65535U));
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_fifo_tail_offset(struct fm10k_mbx_fifo *fifo, u16 offset)
{
  #line 74 
  return (unsigned short)((unsigned int)((int)fifo->tail + (int)offset) & ((unsigned int)fifo->size + 65535U));
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_fifo_head_len(struct fm10k_mbx_fifo *fifo)
{
  #line 85 
  u32 *head = fifo->buffer + (unsigned long)fm10k_fifo_head_offset(fifo,(unsigned short)0);
  #line 88 
  if ((int)fm10k_fifo_empty(fifo) != 0) 
                                        #line 89 
                                        return (unsigned short)0U;
  #line 92 
  return (unsigned short)((unsigned int)((unsigned short)(((unsigned long)*head + 3145728UL) >> 22)) + 1U);
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_fifo_head_drop(struct fm10k_mbx_fifo *fifo)
{
  #line 103 
  u16 len = fm10k_fifo_head_len(fifo);
  #line 106 
  fifo->head = (unsigned short)((int)fifo->head + (int)len);
  #line 108 
  return len;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_fifo_drop_all(struct fm10k_mbx_fifo *fifo)
{
  #line 120 
  fifo->head = fifo->tail;
  #line 121 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_index_len(struct fm10k_mbx_info *mbx, u16 head, u16 tail)
{
  #line 134 
  u16 len = (unsigned short)((int)tail - (int)head);
  #line 137 
  if ((int)len > (int)tail) 
                            #line 138 
                            len = (unsigned short)((unsigned int)len + 65534U);
  #line 140 
  return (unsigned short)(((unsigned int)((int)mbx->mbmem_len << 1U) + 65535U) & (unsigned int)len);
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_tail_add(struct fm10k_mbx_info *mbx, u16 offset)
{
  #line 156 
  int tmp;
  #line 153 
  u16 tail = (unsigned short)(((unsigned int)((int)mbx->tail + (int)offset) + 1U) & ((unsigned int)((int)mbx->mbmem_len << 1U) + 65535U));
  #line 156 
  if ((int)mbx->tail < (int)tail) {
    #line 156 
    tail = (u16)((int)tail - 1);
    #line 156 
    tmp = (int)tail;
  }
  else {
    #line 156 
    tail = (u16)((int)tail + 1);
    #line 156 
    tmp = (int)tail;
  }
  #line 156 
  return (unsigned short)tmp;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_tail_sub(struct fm10k_mbx_info *mbx, u16 offset)
{
  #line 172 
  int tmp;
  #line 169 
  u16 tail = (unsigned short)(((unsigned int)((int)mbx->tail - (int)offset) + 65535U) & ((unsigned int)((int)mbx->mbmem_len << 1U) + 65535U));
  #line 172 
  if ((int)mbx->tail > (int)tail) {
    #line 172 
    tail = (u16)((int)tail + 1);
    #line 172 
    tmp = (int)tail;
  }
  else {
    #line 172 
    tail = (u16)((int)tail - 1);
    #line 172 
    tmp = (int)tail;
  }
  #line 172 
  return (unsigned short)tmp;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_head_add(struct fm10k_mbx_info *mbx, u16 offset)
{
  #line 188 
  int tmp;
  #line 185 
  u16 head = (unsigned short)(((unsigned int)((int)mbx->head + (int)offset) + 1U) & ((unsigned int)((int)mbx->mbmem_len << 1U) + 65535U));
  #line 188 
  if ((int)mbx->head < (int)head) {
    #line 188 
    head = (u16)((int)head - 1);
    #line 188 
    tmp = (int)head;
  }
  else {
    #line 188 
    head = (u16)((int)head + 1);
    #line 188 
    tmp = (int)head;
  }
  #line 188 
  return (unsigned short)tmp;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_head_sub(struct fm10k_mbx_info *mbx, u16 offset)
{
  #line 204 
  int tmp;
  #line 201 
  u16 head = (unsigned short)(((unsigned int)((int)mbx->head - (int)offset) + 65535U) & ((unsigned int)((int)mbx->mbmem_len << 1U) + 65535U));
  #line 204 
  if ((int)mbx->head > (int)head) {
    #line 204 
    head = (u16)((int)head + 1);
    #line 204 
    tmp = (int)head;
  }
  else {
    #line 204 
    head = (u16)((int)head - 1);
    #line 204 
    tmp = (int)head;
  }
  #line 204 
  return (unsigned short)tmp;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_pushed_tail_len(struct fm10k_mbx_info *mbx)
{
  #line 216 
  u32 *tail = mbx->rx.buffer + (unsigned long)fm10k_fifo_tail_offset(& mbx->rx,(unsigned short)0);
  #line 219 
  if ((unsigned int)mbx->pushed == 0U) 
                                       #line 220 
                                       return (unsigned short)0U;
  #line 222 
  return (unsigned short)((unsigned int)((unsigned short)(((unsigned long)*tail + 3145728UL) >> 22)) + 1U);
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_fifo_write_copy(struct fm10k_mbx_fifo *fifo, u32 *msg, u16 tail_offset, u16 len)
{
  #line 239 
  u16 end = fm10k_fifo_tail_offset(fifo,(unsigned short)((int)tail_offset));
  #line 240 
  u32 *tail = fifo->buffer + (unsigned long)end;
  #line 243 
  end = (unsigned short)((int)fifo->size - (int)end);
  #line 246 
  if ((int)end < (int)len) 
                           #line 247 
                           memcpy((void *)fifo->buffer,(void *)(msg + (unsigned long)end),(unsigned long)(((int)len - (int)end) << 2)); else 
                                                                    #line 249 
                                                                    end = len;
  #line 252 
  memcpy((void *)tail,(void *)msg,(unsigned long)((int)end << 2));
  #line 253 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_fifo_enqueue(struct fm10k_mbx_fifo *fifo, u32 *msg)
{
  #line 266 
  u16 len = (unsigned short)((unsigned int)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + 1U);
  #line 269 
  if ((int)fifo->size < (int)len) 
                                  #line 270 
                                  return -501;
  #line 273 
  ;
  #line 273 
  if ((int)fm10k_fifo_unused(fifo) < (int)len) 
                                               #line 274 
                                               return -509;
  #line 277 
  fm10k_fifo_write_copy(fifo,msg,(unsigned short)0,(unsigned short)((int)len));
  #line 278 
  ldv_inline_asm();
  #line 283 
  fifo->tail = (unsigned short)((int)fifo->tail + (int)len);
  #line 285 
  return 0;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_validate_msg_size(struct fm10k_mbx_info *mbx, u16 len)
{
  #line 299 
  u16 msg_len;
  #line 318 
  int tmp_0;
  #line 298 
  struct fm10k_mbx_fifo *fifo = & mbx->rx;
  #line 299 
  u16 total_len = (unsigned short)0U;
  #line 302 
  len = (unsigned short)((int)mbx->pushed + (int)len);
  #line 305 
  while (1) {
    {
      #line 306 
      u32 *msg;
      #line 308 
      msg = fifo->buffer + (unsigned long)fm10k_fifo_tail_offset(fifo,(unsigned short)((int)total_len));
      #line 309 
      msg_len = (unsigned short)((unsigned int)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + 1U);
      #line 310 
      total_len = (unsigned short)((int)total_len + (int)msg_len);
    }
    #line 311 
    if (! ((int)total_len < (int)len)) 
                                       #line 305 
                                       break;
  }
  #line 314 
  if ((int)len < (int)total_len && (int)mbx->max_size >= (int)msg_len) 
    #line 315 
    return (unsigned short)0U;
  #line 318 
  if ((int)len >= (int)total_len) 
                                  #line 318 
                                  tmp_0 = (int)len - (int)total_len; else 
                                                                    #line 318 
                                                                    tmp_0 = (int)len;
  #line 318 
  return (unsigned short)tmp_0;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_write_copy(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 336 
  u16 end;
  #line 336 
  u16 len;
  #line 336 
  u16 tail;
  #line 336 
  u16 mask;
  #line 333 
  struct fm10k_mbx_fifo *fifo = & mbx->tx;
  #line 334 
  u32 mbmem = mbx->mbmem_reg;
  #line 335 
  u32 *head = fifo->buffer;
  #line 338 
  if ((unsigned int)mbx->tail_len == 0U) 
                                         #line 339 
                                         return;
  #line 342 
  mask = (unsigned short)((unsigned int)mbx->mbmem_len + 65535U);
  #line 343 
  len = mbx->tail_len;
  #line 344 
  tail = fm10k_mbx_tail_sub(mbx,(unsigned short)((int)len));
  #line 345 
  if ((int)tail > (int)mask) 
                             #line 346 
                             tail = (u16)((int)tail + 1);
  #line 349 
  end = fm10k_fifo_head_offset(fifo,(unsigned short)((int)mbx->pulled));
  #line 350 
  head += (unsigned long)end;
  #line 351 
  ldv_inline_asm();
  #line 356 
  end = (unsigned short)((int)fifo->size - (int)end);
  #line 356 
  while ((unsigned int)len != 0U) {
    #line 357 
    while (1) {
      #line 359 
      tail = (unsigned short)((int)tail & (int)mask);
      #line 360 
      if ((unsigned int)tail == 0U) 
                                    #line 361 
                                    tail = (u16)((int)tail + 1);
      #line 363 
      (mbx->tx_mbmem_pulled) ++;
      {
        #line 367 
        union __anonunion___u_5918 __u;
        #line 366 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 366 
        u32 *hw_addr = (__u.__val);
        #line 366 
        if ((long)(hw_addr == (u32 *)0U) == 0L) {
          #line 366 
          u16 tmp_0;
          #line 366 
          u32 *tmp_1;
          #line 366 
          tmp_0 = tail;
          #line 366 
          tail = (u16)((int)tail + 1);
          #line 366 
          ;
          #line 366 
          tmp_1 = head;
          #line 366 
          head ++;
          #line 366 
          ;
          #line 366 
          writel(*tmp_1,(void *)(hw_addr + (unsigned long)((unsigned int)tmp_0 + mbmem)));
        }
      }
      #line 367 
      len = (u16)((int)len - 1);
      #line 367 
      if ((unsigned int)len != 0U) {
        #line 367 
        end = (u16)((int)end - 1);
        #line 367 
        if (! ((unsigned int)end != 0U)) 
                                         #line 357 
                                         break;
      }
      else 
           #line 357 
           break;
    }
    #line 356 
    head = fifo->buffer;
  }
  #line 368 
  return;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_pull_head(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, u16 head)
{
  #line 385 
  u16 mbmem_len;
  #line 385 
  u16 len;
  #line 385 
  u16 ack = fm10k_mbx_index_len(mbx,(unsigned short)((int)head),(unsigned short)((int)mbx->tail));
  #line 386 
  struct fm10k_mbx_fifo *fifo = & mbx->tx;
  #line 389 
  mbx->pulled = (unsigned short)((int)mbx->pulled + ((int)mbx->tail_len - (int)ack));
  #line 392 
  mbmem_len = (unsigned short)((unsigned int)mbx->mbmem_len + 65535U);
  #line 393 
  len = (unsigned short)((int)fm10k_fifo_used(fifo) - (int)mbx->pulled);
  #line 394 
  if ((int)len > (int)mbmem_len) 
                                 #line 395 
                                 len = mbmem_len;
  #line 398 
  mbx->tail = fm10k_mbx_tail_add(mbx,(unsigned short)((int)len - (int)ack));
  #line 399 
  mbx->tail_len = len;
  #line 402 
  len = fm10k_fifo_head_len(fifo);
  #line 402 
  while ((unsigned int)len != 0U && (int)mbx->pulled >= (int)len) {
    {
      #line 405 
      mbx->pulled = (unsigned short)((int)mbx->pulled - (int)fm10k_fifo_head_drop(fifo));
      #line 406 
      (mbx->tx_messages) ++;
      #line 407 
      mbx->tx_dwords += (unsigned long long)len;
    }
    #line 404 
    len = fm10k_fifo_head_len(fifo);
  }
  #line 411 
  fm10k_mbx_write_copy(hw,mbx);
  #line 412 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_read_copy(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 429 
  u16 end;
  #line 429 
  u16 len;
  #line 429 
  u16 head;
  #line 426 
  struct fm10k_mbx_fifo *fifo = & mbx->rx;
  #line 427 
  u32 mbmem = mbx->mbmem_reg ^ (unsigned int)mbx->mbmem_len;
  #line 428 
  u32 *tail = fifo->buffer;
  #line 432 
  len = mbx->head_len;
  #line 433 
  head = fm10k_mbx_head_sub(mbx,(unsigned short)((int)len));
  #line 434 
  if ((int)mbx->mbmem_len <= (int)head) 
                                        #line 435 
                                        head = (u16)((int)head + 1);
  #line 438 
  end = fm10k_fifo_tail_offset(fifo,(unsigned short)((int)mbx->pushed));
  #line 439 
  tail += (unsigned long)end;
  #line 442 
  end = (unsigned short)((int)fifo->size - (int)end);
  #line 442 
  while ((unsigned int)len != 0U) {
    #line 443 
    while (1) {
      {
        #line 452 
        u32 *tmp;
        #line 452 
        u16 tmp_0;
        #line 445 
        head = (unsigned short)(((unsigned int)mbx->mbmem_len + 65535U) & (unsigned int)head);
        #line 446 
        if ((unsigned int)head == 0U) 
                                      #line 447 
                                      head = (u16)((int)head + 1);
        #line 449 
        (mbx->rx_mbmem_pushed) ++;
        #line 452 
        tmp = tail;
        #line 452 
        tail ++;
        #line 452 
        tmp_0 = head;
        #line 452 
        head = (u16)((int)head + 1);
        #line 452 
        ;
        #line 452 
        ;
        #line 452 
        *tmp = fm10k_read_reg(hw,(int)((unsigned int)tmp_0 + mbmem));
      }
      #line 453 
      len = (u16)((int)len - 1);
      #line 453 
      if ((unsigned int)len != 0U) {
        #line 453 
        end = (u16)((int)end - 1);
        #line 453 
        if (! ((unsigned int)end != 0U)) 
                                         #line 443 
                                         break;
      }
      else 
           #line 443 
           break;
    }
    #line 442 
    tail = fifo->buffer;
  }
  #line 454 
  ldv_inline_asm();
  #line 455 
  return;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_push_tail(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, u16 tail)
{
  #line 476 
  u16 len;
  #line 475 
  struct fm10k_mbx_fifo *fifo = & mbx->rx;
  #line 476 
  u16 seq = fm10k_mbx_index_len(mbx,(unsigned short)((int)mbx->head),(unsigned short)((int)tail));
  #line 479 
  len = (unsigned short)((int)fm10k_fifo_unused(fifo) - (int)mbx->pushed);
  #line 480 
  if ((int)len > (int)seq) 
                           #line 481 
                           len = seq;
  #line 484 
  mbx->head = fm10k_mbx_head_add(mbx,(unsigned short)((int)len));
  #line 485 
  mbx->head_len = len;
  #line 488 
  if ((unsigned int)len == 0U) 
                               #line 489 
                               return 0;
  #line 492 
  fm10k_mbx_read_copy(hw,mbx);
  #line 495 
  if ((unsigned int)fm10k_mbx_validate_msg_size(mbx,(unsigned short)((int)len)) != 0U) 
    #line 496 
    return -501;
  #line 499 
  mbx->pushed = (unsigned short)((int)mbx->pushed + (int)len);
  #line 502 
  len = fm10k_mbx_pushed_tail_len(mbx);
  #line 502 
  while ((unsigned int)len != 0U && (int)mbx->pushed >= (int)len) {
    #line 505 
    fifo->tail = (unsigned short)((int)fifo->tail + (int)len);
    #line 506 
    mbx->pushed = (unsigned short)((int)mbx->pushed - (int)len);
    #line 507 
    (mbx->rx_messages) ++;
    #line 508 
    mbx->rx_dwords += (unsigned long long)len;
    #line 504 
    len = fm10k_mbx_pushed_tail_len(mbx);
  }
  #line 511 
  return 0;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_crc_16b_table[256U] = {[1] = (unsigned short)31062U, (unsigned short)62124U, (unsigned short)35834U, (unsigned short)48237U, (unsigned short)50491U, (unsigned short)20161U, (unsigned short)14231U, (unsigned short)8687U, (unsigned short)22713U, (unsigned short)54083U, (unsigned short)43541U, (unsigned short)40322U, (unsigned short)58580U, (unsigned short)28462U, (unsigned short)5752U, (unsigned short)17374U, (unsigned short)14984U, (unsigned short)45426U, (unsigned short)51236U, (unsigned short)65459U, (unsigned short)34533U, (unsigned short)3359U, (unsigned short)29769U, (unsigned short)25137U, (unsigned short)7015U, (unsigned short)37021U, (unsigned short)59851U, (unsigned short)56924U, (unsigned short)42762U, (unsigned short)11504U, (unsigned short)21926U, (unsigned short)34748U, (unsigned short)65258U, (unsigned short)29968U, (unsigned short)3142U, (unsigned short)15313U, (unsigned short)17031U, (unsigned short)51581U, (unsigned short)45099U, (unsigned short)42579U, (unsigned short)57093U, (unsigned short)21759U, (unsigned short)11689U, (unsigned short)6718U, (unsigned short)25448U, (unsigned short)59538U, (unsigned short)37316U, (unsigned short)50274U, (unsigned short)48436U, (unsigned short)14030U, (unsigned short)20376U, (unsigned short)30735U, (unsigned short)345U, (unsigned short)35491U, (unsigned short)62453U, (unsigned short)58765U, (unsigned short)40155U, (unsigned short)5921U, (unsigned short)28279U, (unsigned short)23008U, (unsigned short)8374U, (unsigned short)43852U, (unsigned short)53786U, (unsigned short)22093U, (unsigned short)12059U, (unsigned short)42209U, (unsigned short)56759U, (unsigned short)59936U, (unsigned short)37750U, (unsigned short)6284U, (unsigned short)25050U, (unsigned short)30626U, (unsigned short)3828U, (unsigned short)34062U, (unsigned short)64600U, (unsigned short)52175U, (unsigned short)45721U, (unsigned short)14691U, (unsigned short)16437U, (unsigned short)5523U, (unsigned short)27845U, (unsigned short)59199U, (unsigned short)40553U, (unsigned short)43518U, (unsigned short)53416U, (unsigned short)23378U, (unsigned short)8708U, (unsigned short)13436U, (unsigned short)19754U, (unsigned short)50896U, (unsigned short)49030U, (unsigned short)34833U, (unsigned short)61767U, (unsigned short)31421U, (unsigned short)1003U, (unsigned short)53745U, (unsigned short)43175U, (unsigned short)9053U, (unsigned short)23051U, (unsigned short)28060U, (unsigned short)5322U, (unsigned short)40752U, (unsigned short)58982U, (unsigned short)61470U, (unsigned short)35144U, (unsigned short)690U, (unsigned short)31716U, (unsigned short)19571U, (unsigned short)13605U, (unsigned short)48863U, (unsigned short)51081U, (unsigned short)37423U, (unsigned short)60281U, (unsigned short)24707U, (unsigned short)6613U, (unsigned short)11842U, (unsigned short)22292U, (unsigned short)56558U, (unsigned short)42424U, (unsigned short)46016U, (unsigned short)51862U, (unsigned short)16748U, (unsigned short)14394U, (unsigned short)4013U, (unsigned short)30459U, (unsigned short)64769U, (unsigned short)33879U, (unsigned short)44186U, (unsigned short)54732U, (unsigned short)24118U, (unsigned short)10080U, (unsigned short)4343U, (unsigned short)27041U, (unsigned short)57947U, (unsigned short)39693U, (unsigned short)36213U, (unsigned short)62499U, (unsigned short)32729U, (unsigned short)1679U, (unsigned short)12568U, (unsigned short)18510U, (unsigned short)50100U, (unsigned short)47842U, (unsigned short)61252U, (unsigned short)38418U, (unsigned short)7656U, (unsigned short)25790U, (unsigned short)21289U, (unsigned short)10879U, (unsigned short)41349U, (unsigned short)55507U, (unsigned short)52907U, (unsigned short)47101U, (unsigned short)15367U, (unsigned short)17745U, (unsigned short)29382U, (unsigned short)2960U, (unsigned short)32874U, (unsigned short)63804U, (unsigned short)11046U, (unsigned short)21104U, (unsigned short)55690U, (unsigned short)41180U, (unsigned short)38731U, (unsigned short)60957U, (unsigned short)26087U, (unsigned short)7345U, (unsigned short)2761U, (unsigned short)29599U, (unsigned short)63589U, (unsigned short)33075U, (unsigned short)46756U, (unsigned short)53234U, (unsigned short)17416U, (unsigned short)15710U, (unsigned short)26872U, (unsigned short)4526U, (unsigned short)39508U, (unsigned short)58114U, (unsigned short)54421U, (unsigned short)44483U, (unsigned short)9785U, (unsigned short)24431U, (unsigned short)18711U, (unsigned short)12353U, (unsigned short)48059U, (unsigned short)49901U, (unsigned short)62842U, (unsigned short)35884U, (unsigned short)2006U, (unsigned short)32384U, (unsigned short)64215U, (unsigned short)33665U, (unsigned short)2171U, (unsigned short)28973U, (unsigned short)18106U, (unsigned short)16364U, (unsigned short)46102U, (unsigned short)52544U, (unsigned short)56120U, (unsigned short)41582U, (unsigned short)10644U, (unsigned short)20674U, (unsigned short)26453U, (unsigned short)7683U, (unsigned short)38393U, (unsigned short)60591U, (unsigned short)47369U, (unsigned short)49247U, (unsigned short)19365U, (unsigned short)13043U, (unsigned short)1380U, (unsigned short)31794U, (unsigned short)63432U, (unsigned short)36510U, (unsigned short)39142U, (unsigned short)57776U, (unsigned short)27210U, (unsigned short)4892U, (unsigned short)9355U, (unsigned short)24029U, (unsigned short)54823U, (unsigned short)44913U, (unsigned short)32107U, (unsigned short)1085U, (unsigned short)36807U, (unsigned short)63121U, (unsigned short)49414U, (unsigned short)47184U, (unsigned short)13226U, (unsigned short)19196U, (unsigned short)23684U, (unsigned short)9682U, (unsigned short)44584U, (unsigned short)55166U, (unsigned short)57577U, (unsigned short)39359U, (unsigned short)4677U, (unsigned short)27411U, (unsigned short)16053U, (unsigned short)18403U, (unsigned short)52249U, (unsigned short)46415U, (unsigned short)33496U, (unsigned short)64398U, (unsigned short)28788U, (unsigned short)2338U, (unsigned short)8026U, (unsigned short)26124U, (unsigned short)60918U, (unsigned short)38048U, (unsigned short)41783U, (unsigned short)55905U, (unsigned short)20891U, (unsigned short)10445U};
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_crc_16b(u32 *data, u16 seed, u16 len)
{
  #line 562 
  u32 result = (unsigned int)seed;
  #line 564 
  while (1) {
    #line 564 
    u16 tmp_1;
    #line 564 
    tmp_1 = len;
    #line 564 
    len = (u16)((int)len - 1);
    #line 564 
    ;
    #line 564 
    if (! ((unsigned int)tmp_1 != 0U)) 
                                       #line 564 
                                       break;
    {
      #line 565 
      u32 *tmp;
      #line 569 
      u16 tmp_0;
      #line 565 
      tmp = data;
      #line 565 
      data ++;
      #line 565 
      result = *tmp ^ result;
      #line 566 
      result = (result >> 8) ^ (unsigned int)fm10k_crc_16b_table[result & 255U];
      #line 567 
      result = (result >> 8) ^ (unsigned int)fm10k_crc_16b_table[result & 255U];
      #line 569 
      tmp_0 = len;
      #line 569 
      len = (u16)((int)len - 1);
      #line 569 
      ;
      #line 569 
      if ((unsigned int)tmp_0 == 0U) 
                                     #line 570 
                                     break;
      #line 572 
      result = (result >> 8) ^ (unsigned int)fm10k_crc_16b_table[result & 255U];
      #line 573 
      result = (result >> 8) ^ (unsigned int)fm10k_crc_16b_table[result & 255U];
    }
  }
  #line 576 
  return (unsigned short)result;
}

#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_fifo_crc(struct fm10k_mbx_fifo *fifo, u16 offset, u16 len, u16 seed)
{
  #line 591 
  u32 *data = fifo->buffer + (unsigned long)offset;
  #line 594 
  offset = (unsigned short)((int)fifo->size - (int)offset);
  #line 597 
  if ((int)offset < (int)len) {
    #line 598 
    seed = fm10k_crc_16b(data,(unsigned short)((int)seed),(unsigned short)((int)((unsigned int)offset * 2U)));
    #line 599 
    data = fifo->buffer;
    #line 600 
    len = (unsigned short)((int)len - (int)offset);
  }
  #line 604 
  return fm10k_crc_16b(data,(unsigned short)((int)seed),
                    (unsigned short)((int)((unsigned int)len * 2U)));
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_update_local_crc(struct fm10k_mbx_info *mbx, u16 head)
{
  #line 619 
  u16 len = (unsigned short)((int)mbx->tail_len - (int)fm10k_mbx_index_len(mbx,(unsigned short)((int)head),
                          (unsigned short)((int)mbx->tail)));
  #line 622 
  head = fm10k_fifo_head_offset(& mbx->tx,(unsigned short)((int)mbx->pulled));
  #line 625 
  mbx->local = fm10k_fifo_crc(& mbx->tx,(unsigned short)((int)head),(unsigned short)((int)len),(unsigned short)((int)mbx->local));
  #line 626 
  return;
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_verify_remote_crc(struct fm10k_mbx_info *mbx)
{
  #line 643 
  u16 crc;
  #line 653 
  int tmp_0;
  #line 640 
  struct fm10k_mbx_fifo *fifo = & mbx->rx;
  #line 641 
  u16 len = mbx->head_len;
  #line 642 
  u16 offset = (unsigned short)((int)fm10k_fifo_tail_offset(fifo,(unsigned short)((int)mbx->pushed)) - (int)len);
  #line 646 
  if ((unsigned int)len != 0U) 
                               #line 647 
                               mbx->remote = fm10k_fifo_crc(fifo,(unsigned short)((int)offset),(unsigned short)((int)len),(unsigned short)((int)mbx->remote));
  #line 650 
  crc = fm10k_crc_16b(& mbx->mbx_hdr,(unsigned short)((int)mbx->remote),(unsigned short)1);
  #line 653 
  if ((unsigned int)crc != 0U) 
                               #line 653 
                               tmp_0 = -497; else 
                                                  #line 653 
                                                  tmp_0 = 0;
  #line 653 
  return tmp_0;
}

#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static bool fm10k_mbx_rx_ready(struct fm10k_mbx_info *mbx)
{
  #line 666 
  int tmp_1;
  #line 664 
  u16 msg_size = fm10k_fifo_head_len(& mbx->rx);
  #line 666 
  if ((unsigned int)msg_size != 0U) {
    #line 666 
    ;
    #line 666 
    if ((int)fm10k_fifo_used(& mbx->rx) >= (int)msg_size) 
                                                          #line 666 
                                                          tmp_1 = 1; else 
                                                                    #line 666 
                                                                    tmp_1 = 0;
  }
  else 
       #line 666 
       tmp_1 = 0;
  #line 666 
  return (_Bool)(tmp_1 != 0);
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static bool fm10k_mbx_tx_ready(struct fm10k_mbx_info *mbx, u16 len)
{
  #line 678 
  u16 fifo_unused = fm10k_fifo_unused(& mbx->tx);
  #line 680 
  return (_Bool)((mbx->state == (unsigned int)FM10K_STATE_OPEN && (int)fifo_unused >= (int)len) != 0);
}

#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static bool fm10k_mbx_tx_complete(struct fm10k_mbx_info *mbx)
{
  #line 691 
  return fm10k_fifo_empty(& mbx->tx);
}

#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static u16 fm10k_mbx_dequeue_rx(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 706 
  s32 err;
  #line 707 
  u16 cnt;
  #line 705 
  struct fm10k_mbx_fifo *fifo = & mbx->rx;
  #line 710 
  cnt = (unsigned short)0U;
  #line 710 
  while (1) {
    #line 710 
    if (fm10k_fifo_empty(fifo)) 
                                #line 710 
                                break;
    #line 711 
    err = fm10k_tlv_msg_parse(hw,fifo->buffer + (unsigned long)fifo->head,mbx,mbx->msg_data);
    #line 713 
    if (err < 0) 
                 #line 714 
                 (mbx->rx_parse_err) ++;
    #line 716 
    fm10k_fifo_head_drop(fifo);
    #line 710 
    cnt = (u16)((int)cnt + 1);
  }
  #line 720 
  __memmove((void *)fifo->buffer,(void *)(fifo->buffer + (unsigned long)fifo->tail),(unsigned long)((int)mbx->pushed << 2));
  #line 723 
  fifo->tail = (unsigned short)((int)fifo->tail - (int)fifo->head);
  #line 724 
  fifo->head = (unsigned short)0U;
  #line 726 
  return cnt;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_enqueue_tx(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, u32 *msg)
{
  #line 743 
  s32 err;
  #line 742 
  u32 countdown = mbx->timeout;
  #line 745 
  switch ((unsigned int)mbx->state) {
    #line 746 
    case (unsigned int)0: 
                          #line 746 
    ;
    #line 747 
    case (unsigned int)3: 
                          #line 747 
    ;
    #line 748 
    return -511;
    #line 749 
    default: 
             #line 749 
    ;
    #line 750 
    break;
  }
  #line 754 
  err = fm10k_fifo_enqueue(& mbx->tx,msg);
  #line 757 
  while (err != 0 && countdown != 0U) {
    #line 758 
    countdown --;
    #line 759 
    if (0 != 0) 
      #line 759 
      if (mbx->udelay > 19999U) 
                                #line 759 
                                __bad_udelay(); else 
                                                     #line 759 
                                                     __const_udelay((unsigned long)mbx->udelay * 4295UL);
    else 
         #line 759 
         __udelay((unsigned long)mbx->udelay);
    #line 760 
    (*(mbx->ops.process))(hw,mbx);
    #line 761 
    err = fm10k_fifo_enqueue(& mbx->tx,msg);
  }
  #line 765 
  if (err != 0) {
    #line 766 
    mbx->timeout = 0U;
    #line 767 
    (mbx->tx_busy) ++;
  }
  #line 774 
  if ((unsigned int)mbx->tail_len == 0U) 
                                         #line 775 
                                         (*(mbx->ops.process))(hw,mbx);
  #line 777 
  return 0;
}

#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_read(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 790 
  if (mbx->mbx_hdr != 0U) 
                          #line 791 
                          return -500;
  #line 794 
  if ((fm10k_read_reg(hw,(int)mbx->mbx_reg) & 8U) != 0U) 
                                                         #line 795 
                                                         mbx->mbx_lock = 4U;
  {
    #line 799 
    union __anonunion___u_5920 __u;
    #line 798 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 798 
    u32 *hw_addr = (__u.__val);
    #line 798 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 798 
                                            writel(24U,(void *)(hw_addr + (unsigned long)mbx->mbx_reg));
  }
  #line 802 
  mbx->mbx_hdr = fm10k_read_reg(hw,(int)(mbx->mbmem_reg ^ (unsigned int)mbx->mbmem_len));
  #line 804 
  return 0;
}

#line 814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_write(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 816 
  u32 mbmem = mbx->mbmem_reg;
  {
    #line 820 
    union __anonunion___u_5922 __u;
    #line 819 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 819 
    u32 *hw_addr = (__u.__val);
    #line 819 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 819 
                                            writel(mbx->mbx_hdr,(void *)(hw_addr + (unsigned long)mbmem));
  }
  #line 822 
  if (mbx->mbx_lock != 0U) {
    #line 824 
    union __anonunion___u_5924 __u_0;
    #line 823 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 823 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 823 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 823 
                                              writel(mbx->mbx_lock,(void *)(hw_addr_0 + (unsigned long)mbx->mbx_reg));
  }
  #line 826 
  mbx->mbx_hdr = 0U;
  #line 827 
  mbx->mbx_lock = 0U;
  #line 828 
  return;
}

#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_create_connect_hdr(struct fm10k_mbx_info *mbx)
{
  #line 838 
  mbx->mbx_lock |= 2U;
  #line 840 
  mbx->mbx_hdr = ((((unsigned int)mbx->head << 8) & 3840U) | ((unsigned int)((int)mbx->rx.size + -1) << 16)) | 12U;
  #line 842 
  return;
}

#line 851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_create_data_hdr(struct fm10k_mbx_info *mbx)
{
  #line 857 
  u16 crc;
  #line 853 
  u32 hdr = ((((unsigned int)mbx->tail << 4) & 255U) | (((unsigned int)mbx->head << 8) & 3840U)) | 8U;
  #line 856 
  struct fm10k_mbx_fifo *fifo = & mbx->tx;
  #line 859 
  if ((unsigned int)mbx->tail_len != 0U) 
                                         #line 860 
                                         mbx->mbx_lock |= 2U;
  #line 863 
  ;
  #line 863 
  ;
  #line 863 
  ;
  #line 863 
  crc = fm10k_fifo_crc(fifo,(unsigned short)((int)fm10k_fifo_head_offset(fifo,(unsigned short)((int)mbx->pulled))),(unsigned short)((int)mbx->tail_len),(unsigned short)((int)mbx->local));
  #line 865 
  crc = fm10k_crc_16b(& hdr,(unsigned short)((int)crc),(unsigned short)1);
  #line 868 
  mbx->mbx_hdr = ((unsigned int)crc << 16) | hdr;
  #line 869 
  return;
}

#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_create_disconnect_hdr(struct fm10k_mbx_info *mbx)
{
  #line 879 
  u32 hdr = ((((unsigned int)mbx->tail << 4) & 255U) | (((unsigned int)mbx->head << 8) & 3840U)) | 13U;
  #line 882 
  u16 crc = fm10k_crc_16b(& hdr,(unsigned short)((int)mbx->local),(unsigned short)1);
  #line 884 
  mbx->mbx_lock |= 4U;
  #line 887 
  mbx->mbx_hdr = ((unsigned int)crc << 16) | hdr;
  #line 888 
  return;
}

#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_create_fake_disconnect_hdr(struct fm10k_mbx_info *mbx)
{
  #line 900 
  u32 hdr = ((((unsigned int)mbx->head << 4) & 255U) | (((unsigned int)mbx->tail << 8) & 3840U)) | 13U;
  #line 903 
  u16 crc = fm10k_crc_16b(& hdr,(unsigned short)((int)mbx->local),(unsigned short)1);
  #line 905 
  mbx->mbx_lock |= 4U;
  #line 908 
  mbx->mbx_hdr = ((unsigned int)crc << 16) | hdr;
  #line 909 
  return;
}

#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_create_error_msg(struct fm10k_mbx_info *mbx, s32 err)
{
  #line 923 
  switch (err) {
    #line 924 
    case -507: 
               #line 924 
    ;
    #line 925 
    case -506: 
               #line 925 
    ;
    #line 926 
    case -503: 
               #line 926 
    ;
    #line 927 
    case -501: 
               #line 927 
    ;
    #line 928 
    case -498: 
               #line 928 
    ;
    #line 929 
    case -497: 
               #line 929 
    ;
    #line 930 
    break;
    #line 931 
    default: 
             #line 931 
    ;
    #line 932 
    return;
  }
  #line 935 
  mbx->mbx_lock |= 2U;
  #line 937 
  mbx->mbx_hdr = (((unsigned int)err << 16) | (((unsigned int)mbx->head << 8) & 3840U)) | 14U;
  #line 939 
  return;
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_validate_msg_hdr(struct fm10k_mbx_info *mbx)
{
  #line 952 
  u16 type;
  #line 952 
  u16 rsvd0;
  #line 952 
  u16 head;
  #line 952 
  u16 tail;
  #line 952 
  u16 size;
  #line 953 
  u32 *hdr = & mbx->mbx_hdr;
  #line 955 
  type = (unsigned short)((unsigned int)((unsigned short)*hdr) & 15U);
  #line 956 
  rsvd0 = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 12)) & 15U);
  #line 957 
  tail = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 4)) & 15U);
  #line 958 
  head = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 8)) & 15U);
  #line 959 
  size = (unsigned short)(*hdr >> 16);
  #line 961 
  if ((unsigned int)rsvd0 != 0U) 
                                 #line 962 
                                 return -498;
  #line 964 
  switch ((int)type) {
    #line 965 
    case 13: 
             #line 965 
    ;
    #line 967 
    if ((int)mbx->head != (int)tail) 
                                     #line 968 
                                     return -507;
    #line 971 
    case 8: 
            #line 971 
    ;
    #line 973 
    if ((unsigned int)head == 0U || (unsigned int)head == 15U) 
                                                               #line 974 
                                                               return -506;
    #line 975 
    ;
    #line 975 
    if ((int)fm10k_mbx_index_len(mbx,(unsigned short)((int)head),
                          (unsigned short)((int)mbx->tail)) > (int)mbx->tail_len) 
      #line 976 
      return -506;
    #line 979 
    if ((unsigned int)tail == 0U || (unsigned int)tail == 15U) 
                                                               #line 980 
                                                               return -507;
    #line 981 
    ;
    #line 981 
    if ((int)fm10k_mbx_index_len(mbx,(unsigned short)((int)mbx->head),
                            (unsigned short)((int)tail)) < (int)mbx->mbmem_len) 
      #line 982 
      break;
    #line 984 
    return -507;
    #line 985 
    case 12: 
             #line 985 
    ;
    #line 987 
    if ((unsigned int)size <= 6U || ((int)size & ((int)size + 1)) != 0) 
      #line 988 
      return -501;
    #line 991 
    case 14: 
             #line 991 
    ;
    #line 992 
    if ((unsigned int)head == 0U || (unsigned int)head == 15U) 
                                                               #line 993 
                                                               return -506;
    #line 995 
    if ((unsigned int)tail != 0U) 
                                  #line 996 
                                  return -507;
    #line 998 
    break;
    #line 999 
    default: 
             #line 999 
    ;
    #line 1000 
    return -503;
  }
  #line 1003 
  return 0;
}

#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_create_reply(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, u16 head)
{
  #line 1020 
  switch ((unsigned int)mbx->state) {
    #line 1021 
    case (unsigned int)2: 
                          #line 1021 
    ;
    #line 1022 
    case (unsigned int)3: 
                          #line 1022 
    ;
    #line 1024 
    fm10k_mbx_update_local_crc(mbx,(unsigned short)((int)head));
    #line 1027 
    fm10k_mbx_pull_head(hw,mbx,(unsigned short)((int)head));
    #line 1030 
    if ((unsigned int)mbx->tail_len != 0U || mbx->state == (unsigned int)FM10K_STATE_OPEN) 
      #line 1031 
      fm10k_mbx_create_data_hdr(mbx); else 
                                           #line 1033 
                                           fm10k_mbx_create_disconnect_hdr(mbx);
    #line 1034 
    break;
    #line 1035 
    case (unsigned int)1: 
                          #line 1035 
    ;
    #line 1037 
    fm10k_mbx_create_connect_hdr(mbx);
    #line 1038 
    break;
    #line 1039 
    case (unsigned int)0: 
                          #line 1039 
    ;
    #line 1041 
    fm10k_mbx_create_disconnect_hdr(mbx);
    #line 1042 
    default: 
             #line 1042 
    ;
    #line 1043 
    break;
  }
  #line 1046 
  return 0;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_reset_work(struct fm10k_mbx_info *mbx)
{
  #line 1059 
  u16 len;
  #line 1059 
  u16 head;
  #line 1059 
  u16 ack;
  #line 1062 
  mbx->max_size = (unsigned short)((unsigned int)mbx->rx.size + 65535U);
  #line 1065 
  head = (unsigned short)((unsigned int)((unsigned short)(mbx->mbx_hdr >> 8)) & 15U);
  #line 1066 
  ack = fm10k_mbx_index_len(mbx,(unsigned short)((int)head),(unsigned short)((int)mbx->tail));
  #line 1067 
  mbx->pulled = (unsigned short)((int)mbx->pulled + ((int)mbx->tail_len - (int)ack));
  #line 1070 
  while (1) {
    #line 1070 
    if ((unsigned int)fm10k_fifo_head_len(& mbx->tx) != 0U) {
      #line 1070 
      if (! ((unsigned int)mbx->pulled != 0U)) 
                                               #line 1070 
                                               break;
    }
    else 
         #line 1070 
         break;
    #line 1071 
    len = fm10k_fifo_head_drop(& mbx->tx);
    #line 1072 
    (mbx->tx_dropped) ++;
    #line 1073 
    if ((int)mbx->pulled >= (int)len) 
                                      #line 1074 
                                      mbx->pulled = (unsigned short)((int)mbx->pulled - (int)len); else 
                                                                    #line 1076 
                                                                    mbx->pulled = (unsigned short)0U;
  }
  #line 1080 
  mbx->pushed = (unsigned short)0U;
  #line 1081 
  mbx->pulled = (unsigned short)0U;
  #line 1082 
  mbx->tail_len = (unsigned short)0U;
  #line 1083 
  mbx->head_len = (unsigned short)0U;
  #line 1084 
  mbx->rx.tail = (unsigned short)0U;
  #line 1085 
  mbx->rx.head = (unsigned short)0U;
  #line 1086 
  return;
}

#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_update_max_size(struct fm10k_mbx_info *mbx, u16 size)
{
  #line 1101 
  u16 len;
  #line 1103 
  mbx->max_size = size;
  #line 1106 
  len = fm10k_fifo_head_len(& mbx->tx);
  #line 1106 
  while ((int)len > (int)size) {
    #line 1109 
    fm10k_fifo_head_drop(& mbx->tx);
    #line 1110 
    (mbx->tx_dropped) ++;
    #line 1108 
    len = fm10k_fifo_head_len(& mbx->tx);
  }
  #line 1112 
  return;
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_connect_reset(struct fm10k_mbx_info *mbx)
{
  #line 1124 
  fm10k_mbx_reset_work(mbx);
  #line 1127 
  mbx->local = (unsigned short)65535U;
  #line 1128 
  mbx->remote = (unsigned short)65535U;
  #line 1131 
  if (mbx->state == (unsigned int)FM10K_STATE_OPEN) 
                                                    #line 1132 
                                                    mbx->state = FM10K_STATE_CONNECT; else 
                                                                    #line 1134 
                                                                    mbx->state = FM10K_STATE_CLOSED;
  #line 1135 
  return;
}

#line 1146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_process_connect(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1151 
  u16 size;
  #line 1151 
  u16 head;
  #line 1149 
  enum fm10k_mbx_state state = mbx->state;
  #line 1150 
  u32 *hdr = & mbx->mbx_hdr;
  #line 1154 
  size = (unsigned short)(*hdr >> 16);
  #line 1155 
  head = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 8)) & 15U);
  #line 1157 
  switch ((unsigned int)state) {
    #line 1158 
    case (unsigned int)3: 
                          #line 1158 
    ;
    #line 1159 
    case (unsigned int)2: 
                          #line 1159 
    ;
    #line 1161 
    fm10k_mbx_connect_reset(mbx);
    #line 1162 
    break;
    #line 1163 
    case (unsigned int)1: 
                          #line 1163 
    ;
    #line 1165 
    if ((int)mbx->rx.size < (int)size) 
                                       #line 1166 
                                       mbx->max_size = (unsigned short)((unsigned int)mbx->rx.size + 65535U);
    else {
      #line 1169 
      mbx->state = FM10K_STATE_OPEN;
      #line 1171 
      fm10k_mbx_update_max_size(mbx,(unsigned short)((int)size));
    }
    #line 1173 
    break;
    #line 1174 
    default: 
             #line 1174 
    ;
    #line 1175 
    break;
  }
  #line 1179 
  mbx->tail = head;
  #line 1181 
  return fm10k_mbx_create_reply(hw,mbx,(unsigned short)((int)head));
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_process_data(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1197 
  u16 head;
  #line 1197 
  u16 tail;
  #line 1198 
  s32 err;
  #line 1196 
  u32 *hdr = & mbx->mbx_hdr;
  #line 1201 
  head = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 8)) & 15U);
  #line 1202 
  tail = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 4)) & 15U);
  #line 1205 
  if (mbx->state == (unsigned int)FM10K_STATE_CONNECT) {
    #line 1206 
    mbx->tail = head;
    #line 1207 
    mbx->state = FM10K_STATE_OPEN;
  }
  #line 1211 
  err = fm10k_mbx_push_tail(hw,mbx,(unsigned short)((int)tail));
  #line 1212 
  if (err < 0) 
               #line 1213 
               return err;
  #line 1216 
  err = fm10k_mbx_verify_remote_crc(mbx);
  #line 1217 
  if (err != 0) 
                #line 1218 
                return err;
  #line 1221 
  fm10k_mbx_dequeue_rx(hw,mbx);
  #line 1223 
  return fm10k_mbx_create_reply(hw,mbx,(unsigned short)((int)head));
}

#line 1235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_process_disconnect(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1240 
  u16 head;
  #line 1241 
  s32 err;
  #line 1238 
  enum fm10k_mbx_state state = mbx->state;
  #line 1239 
  u32 *hdr = & mbx->mbx_hdr;
  #line 1244 
  head = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 8)) & 15U);
  #line 1247 
  if ((unsigned int)mbx->pushed != 0U) 
                                       #line 1248 
                                       return -507;
  #line 1251 
  mbx->head_len = (unsigned short)0U;
  #line 1254 
  err = fm10k_mbx_verify_remote_crc(mbx);
  #line 1255 
  if (err != 0) 
                #line 1256 
                return err;
  #line 1258 
  switch ((unsigned int)state) {
    #line 1259 
    case (unsigned int)3: 
                          #line 1259 
    ;
    #line 1260 
    case (unsigned int)2: 
                          #line 1260 
    ;
    #line 1262 
    if (! fm10k_mbx_tx_complete(mbx)) 
                                      #line 1263 
                                      break;
    #line 1266 
    if ((int)mbx->tail != (int)head) 
                                     #line 1267 
                                     return -506;
    #line 1270 
    fm10k_mbx_connect_reset(mbx);
    #line 1271 
    break;
    #line 1272 
    default: 
             #line 1272 
    ;
    #line 1273 
    break;
  }
  #line 1276 
  return fm10k_mbx_create_reply(hw,mbx,(unsigned short)((int)head));
}

#line 1288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_process_error(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1292 
  u16 head;
  #line 1291 
  u32 *hdr = & mbx->mbx_hdr;
  #line 1295 
  head = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 8)) & 15U);
  #line 1297 
  switch ((unsigned int)mbx->state) {
    #line 1298 
    case (unsigned int)2: 
                          #line 1298 
    ;
    #line 1299 
    case (unsigned int)3: 
                          #line 1299 
    ;
    #line 1301 
    fm10k_mbx_reset_work(mbx);
    #line 1304 
    mbx->local = (unsigned short)65535U;
    #line 1305 
    mbx->remote = (unsigned short)65535U;
    #line 1308 
    mbx->tail = head;
    #line 1311 
    if (mbx->state == (unsigned int)FM10K_STATE_OPEN) {
      #line 1312 
      mbx->state = FM10K_STATE_CONNECT;
      #line 1313 
      break;
    }
    #line 1317 
    fm10k_mbx_create_connect_hdr(mbx);
    #line 1318 
    return 0;
    #line 1319 
    default: 
             #line 1319 
    ;
    #line 1320 
    break;
  }
  #line 1323 
  return fm10k_mbx_create_reply(hw,mbx,(unsigned short)((int)mbx->tail));
}

#line 1335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_process(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1338 
  s32 err;
  #line 1341 
  if (mbx->state == (unsigned int)FM10K_STATE_CLOSED) 
                                                      #line 1342 
                                                      return 0;
  #line 1345 
  err = fm10k_mbx_read(hw,mbx);
  #line 1346 
  if (err != 0) 
                #line 1347 
                return err;
  #line 1350 
  err = fm10k_mbx_validate_msg_hdr(mbx);
  #line 1351 
  if (err < 0) 
               #line 1352 
               goto msg_err;
  #line 1354 
  switch ((unsigned int)((unsigned short)mbx->mbx_hdr) & 15U) {
    #line 1355 
    case (unsigned int)12: 
                           #line 1355 
    ;
    #line 1356 
    err = fm10k_mbx_process_connect(hw,mbx);
    #line 1357 
    break;
    #line 1358 
    case (unsigned int)8: 
                          #line 1358 
    ;
    #line 1359 
    err = fm10k_mbx_process_data(hw,mbx);
    #line 1360 
    break;
    #line 1361 
    case (unsigned int)13: 
                           #line 1361 
    ;
    #line 1362 
    err = fm10k_mbx_process_disconnect(hw,mbx);
    #line 1363 
    break;
    #line 1364 
    case (unsigned int)14: 
                           #line 1364 
    ;
    #line 1365 
    err = fm10k_mbx_process_error(hw,mbx);
    #line 1366 
    break;
    #line 1367 
    default: 
             #line 1367 
    ;
    #line 1368 
    err = -503;
    #line 1369 
    break;
  }
  #line 1372 
  msg_err: 
           #line 1372 
  ;
  #line 1374 
  if (err < 0) 
               #line 1375 
               fm10k_mbx_create_error_msg(mbx,err);
  #line 1378 
  fm10k_mbx_write(hw,mbx);
  #line 1380 
  return err;
}

#line 1396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_mbx_disconnect(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1399 
  int tmp;
  #line 1399 
  if (mbx->timeout != 0U) 
                          #line 1399 
                          tmp = 500; else 
                                          #line 1399 
                                          tmp = 0;
  #line 1399 
  int timeout = tmp;
  #line 1402 
  mbx->state = FM10K_STATE_DISCONNECT;
  {
    #line 1406 
    union __anonunion___u_5926 __u;
    #line 1405 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1405 
    u32 *hw_addr = (__u.__val);
    #line 1405 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1405 
                                            writel(66U,(void *)(hw_addr + (unsigned long)mbx->mbx_reg));
  }
  #line 1407 
  while (1) {
    #line 1408 
    __const_udelay(81605UL);
    #line 1409 
    (*(mbx->ops.process))(hw,mbx);
    #line 1410 
    timeout += -19;
    #line 1411 
    if (! (timeout > 0 && mbx->state != (unsigned int)FM10K_STATE_CLOSED)) 
      #line 1407 
      break;
  }
  #line 1416 
  fm10k_mbx_connect_reset(mbx);
  #line 1417 
  fm10k_fifo_drop_all(& mbx->tx);
  {
    #line 1420 
    union __anonunion___u_5928 __u_0;
    #line 1419 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1419 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 1419 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 1419 
                                              writel(0U,(void *)(hw_addr_0 + (unsigned long)mbx->mbmem_reg));
  }
  #line 1421 
  return;
}

#line 1435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_connect(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1438 
  if (mbx->rx.buffer == (u32 *)0U) 
                                   #line 1439 
                                   return -509;
  #line 1442 
  if (mbx->state != (unsigned int)FM10K_STATE_CLOSED) 
                                                      #line 1443 
                                                      return -500;
  #line 1446 
  mbx->timeout = 2000U;
  #line 1449 
  mbx->state = FM10K_STATE_CONNECT;
  #line 1451 
  fm10k_mbx_reset_work(mbx);
  #line 1454 
  fm10k_mbx_create_fake_disconnect_hdr(mbx);
  {
    #line 1456 
    union __anonunion___u_5930 __u;
    #line 1455 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1455 
    u32 *hw_addr = (__u.__val);
    #line 1455 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1455 
                                            writel(mbx->mbx_hdr,(void *)(hw_addr + (unsigned long)(mbx->mbmem_reg ^ (unsigned int)mbx->mbmem_len)));
  }
  #line 1458 
  mbx->mbx_lock = 56U;
  #line 1462 
  fm10k_mbx_create_connect_hdr(mbx);
  #line 1463 
  fm10k_mbx_write(hw,mbx);
  #line 1465 
  return 0;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_validate_handlers(struct fm10k_msg_data *msg_data)
{
  #line 1478 
  struct fm10k_tlv_attr *attr;
  #line 1479 
  unsigned int id;
  #line 1482 
  if (msg_data == (struct fm10k_msg_data *)0) 
                                              #line 1483 
                                              return 0;
  #line 1485 
  while (msg_data->id != 4294967295U) {
    #line 1487 
    if (msg_data->func == (s32 (*)(struct fm10k_hw *, u32 **, struct fm10k_mbx_info *))0) 
      #line 1488 
      return -2;
    #line 1491 
    attr = msg_data->attr;
    #line 1492 
    if (attr != (struct fm10k_tlv_attr *)0) {
      #line 1493 
      while (attr->id != 4294967295U) {
        #line 1494 
        id = attr->id;
        #line 1495 
        attr ++;
        #line 1497 
        if (attr->id <= id) 
                            #line 1498 
                            return -2;
        #line 1500 
        if (id > 31U) 
                      #line 1501 
                      return -2;
      }
      #line 1505 
      if (attr->id != 4294967295U) 
                                   #line 1506 
                                   return -2;
    }
    #line 1509 
    id = msg_data->id;
    #line 1510 
    msg_data ++;
    #line 1512 
    if (msg_data->id <= id) 
                            #line 1513 
                            return -2;
  }
  #line 1517 
  if (msg_data->id != 4294967295U || msg_data->func == (s32 (*)(struct fm10k_hw *, u32 **, struct fm10k_mbx_info *))0) 
    #line 1518 
    return -2;
  #line 1520 
  return 0;
}

#line 1530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_mbx_register_handlers(struct fm10k_mbx_info *mbx, struct fm10k_msg_data *msg_data)
{
  #line 1534 
  if (fm10k_mbx_validate_handlers(msg_data) != 0) 
                                                  #line 1535 
                                                  return -2;
  #line 1538 
  mbx->msg_data = msg_data;
  #line 1540 
  return 0;
}

#line 1557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
s32 fm10k_pfvf_mbx_init(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, struct fm10k_msg_data *msg_data, u8 id)
{
  #line 1561 
  switch ((unsigned int)hw->mac.type) {
    #line 1562 
    case (unsigned int)2: 
                          #line 1562 
    ;
    #line 1563 
    mbx->mbx_reg = 16U;
    #line 1564 
    mbx->mbmem_reg = 40U;
    #line 1565 
    break;
    #line 1566 
    case (unsigned int)1: 
                          #line 1566 
    ;
    #line 1568 
    if ((unsigned int)id <= 63U) {
      #line 1569 
      mbx->mbx_reg = (unsigned int)((int)id + 100352);
      #line 1570 
      mbx->mbmem_reg = (unsigned int)(((int)id + 6144) * 16);
      #line 1571 
      break;
    }
    #line 1574 
    default: 
             #line 1574 
    ;
    #line 1575 
    return -511;
  }
  #line 1579 
  mbx->state = FM10K_STATE_CLOSED;
  #line 1582 
  if (fm10k_mbx_validate_handlers(msg_data) != 0) 
                                                  #line 1583 
                                                  return -2;
  #line 1586 
  mbx->msg_data = msg_data;
  #line 1591 
  mbx->timeout = 0U;
  #line 1592 
  mbx->udelay = 500U;
  #line 1595 
  mbx->tail = (unsigned short)1U;
  #line 1596 
  mbx->head = (unsigned short)1U;
  #line 1599 
  mbx->local = (unsigned short)65535U;
  #line 1600 
  mbx->remote = (unsigned short)65535U;
  #line 1603 
  mbx->max_size = (unsigned short)127U;
  #line 1604 
  mbx->mbmem_len = (unsigned short)8U;
  #line 1607 
  fm10k_fifo_init(& mbx->tx,(u32 *)(& mbx->buffer),(unsigned short)512);
  #line 1608 
  fm10k_fifo_init(& mbx->rx,& mbx->buffer[512],(unsigned short)128);
  #line 1612 
  mbx->ops.connect = & fm10k_mbx_connect;
  #line 1613 
  mbx->ops.disconnect = & fm10k_mbx_disconnect;
  #line 1614 
  mbx->ops.rx_ready = & fm10k_mbx_rx_ready;
  #line 1615 
  mbx->ops.tx_ready = & fm10k_mbx_tx_ready;
  #line 1616 
  mbx->ops.tx_complete = & fm10k_mbx_tx_complete;
  #line 1617 
  mbx->ops.enqueue_tx = & fm10k_mbx_enqueue_tx;
  #line 1618 
  mbx->ops.process = & fm10k_mbx_process;
  #line 1619 
  mbx->ops.register_handlers = & fm10k_mbx_register_handlers;
  #line 1621 
  return 0;
}

#line 1630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_create_data_hdr(struct fm10k_mbx_info *mbx)
{
  #line 1632 
  if ((unsigned int)mbx->tail_len != 0U) 
                                         #line 1633 
                                         mbx->mbx_lock |= 2U;
  #line 1635 
  mbx->mbx_hdr = (((unsigned int)mbx->tail & 4095U) | (((unsigned int)mbx->remote << 12) & 65535U)) | (((unsigned int)mbx->head << 16) & 268369920U);
  #line 1638 
  return;
}

#line 1647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_create_connect_hdr(struct fm10k_mbx_info *mbx, u8 err)
{
  #line 1649 
  if ((unsigned int)mbx->local != 0U) 
                                      #line 1650 
                                      mbx->mbx_lock |= 2U;
  #line 1652 
  mbx->mbx_hdr = ((((unsigned int)mbx->tail & 4095U) | (((unsigned int)mbx->remote << 12) & 65535U)) | (((unsigned int)mbx->head << 16) & 268369920U)) | ((unsigned int)err << 28);
  #line 1656 
  return;
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_connect_reset(struct fm10k_mbx_info *mbx)
{
  #line 1667 
  fm10k_mbx_reset_work(mbx);
  #line 1670 
  mbx->local = (unsigned short)1U;
  #line 1671 
  mbx->remote = (unsigned short)0U;
  #line 1674 
  mbx->tail = (unsigned short)1U;
  #line 1675 
  mbx->head = (unsigned short)1U;
  #line 1678 
  mbx->state = FM10K_STATE_CONNECT;
  #line 1679 
  return;
}

#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_sm_mbx_connect(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1696 
  if (mbx->rx.buffer == (u32 *)0U) 
                                   #line 1697 
                                   return -509;
  #line 1700 
  if (mbx->state != (unsigned int)FM10K_STATE_CLOSED) 
                                                      #line 1701 
                                                      return -500;
  #line 1704 
  mbx->timeout = 2000U;
  #line 1707 
  mbx->state = FM10K_STATE_CONNECT;
  #line 1708 
  mbx->max_size = (unsigned short)127U;
  #line 1711 
  fm10k_sm_mbx_connect_reset(mbx);
  #line 1714 
  mbx->mbx_lock = 56U;
  #line 1718 
  fm10k_sm_mbx_create_connect_hdr(mbx,(unsigned char)0);
  #line 1719 
  fm10k_mbx_write(hw,mbx);
  #line 1721 
  return 0;
}

#line 1737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_disconnect(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 1740 
  int tmp;
  #line 1740 
  if (mbx->timeout != 0U) 
                          #line 1740 
                          tmp = 500; else 
                                          #line 1740 
                                          tmp = 0;
  #line 1740 
  int timeout = tmp;
  #line 1743 
  mbx->state = FM10K_STATE_DISCONNECT;
  {
    #line 1747 
    union __anonunion___u_5932 __u;
    #line 1746 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1746 
    u32 *hw_addr = (__u.__val);
    #line 1746 
    if ((long)(hw_addr == (u32 *)0U) == 0L) 
                                            #line 1746 
                                            writel(66U,(void *)(hw_addr + (unsigned long)mbx->mbx_reg));
  }
  #line 1748 
  while (1) {
    #line 1749 
    __const_udelay(81605UL);
    #line 1750 
    (*(mbx->ops.process))(hw,mbx);
    #line 1751 
    timeout += -19;
    #line 1752 
    if (! (timeout > 0 && mbx->state != (unsigned int)FM10K_STATE_CLOSED)) 
      #line 1748 
      break;
  }
  #line 1755 
  mbx->state = FM10K_STATE_CLOSED;
  #line 1756 
  mbx->remote = (unsigned short)0U;
  #line 1757 
  fm10k_mbx_reset_work(mbx);
  #line 1758 
  fm10k_fifo_drop_all(& mbx->tx);
  {
    #line 1761 
    union __anonunion___u_5934 __u_0;
    #line 1760 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 1760 
    u32 *hw_addr_0 = (__u_0.__val);
    #line 1760 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) 
                                              #line 1760 
                                              writel(0U,(void *)(hw_addr_0 + (unsigned long)mbx->mbmem_reg));
  }
  #line 1762 
  return;
}

#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_sm_mbx_validate_fifo_hdr(struct fm10k_mbx_info *mbx)
{
  #line 1774 
  u16 tail;
  #line 1774 
  u16 head;
  #line 1774 
  u16 ver;
  #line 1773 
  u32 *hdr = & mbx->mbx_hdr;
  #line 1776 
  tail = (unsigned short)((unsigned int)((unsigned short)*hdr) & 4095U);
  #line 1777 
  ver = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 12)) & 15U);
  #line 1778 
  head = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 16)) & 4095U);
  #line 1780 
  switch ((int)ver) {
    #line 1781 
    case 0: 
            #line 1781 
    ;
    #line 1782 
    break;
    #line 1783 
    case 1: 
            #line 1783 
    ;
    #line 1784 
    if ((unsigned int)head + 65535U > 510U) 
                                            #line 1785 
                                            return -506;
    #line 1786 
    if ((unsigned int)tail + 65535U > 510U) 
                                            #line 1787 
                                            return -507;
    #line 1788 
    if ((int)mbx->tail < (int)head) 
                                    #line 1789 
                                    head = (unsigned short)((unsigned int)((int)mbx->mbmem_len + (int)head) + 65535U);
    #line 1790 
    if ((int)mbx->head > (int)tail) 
                                    #line 1791 
                                    tail = (unsigned short)((unsigned int)((int)mbx->mbmem_len + (int)tail) + 65535U);
    #line 1792 
    ;
    #line 1792 
    if ((int)fm10k_mbx_index_len(mbx,(unsigned short)((int)head),
                          (unsigned short)((int)mbx->tail)) > (int)mbx->tail_len) 
      #line 1793 
      return -506;
    #line 1794 
    ;
    #line 1794 
    if ((int)fm10k_mbx_index_len(mbx,(unsigned short)((int)mbx->head),
                            (unsigned short)((int)tail)) < (int)mbx->mbmem_len) 
      #line 1795 
      break;
    #line 1796 
    return -507;
    #line 1797 
    default: 
             #line 1797 
    ;
    #line 1798 
    return -504;
  }
  #line 1801 
  return 0;
}

#line 1813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_process_error(struct fm10k_mbx_info *mbx)
{
  #line 1815 
  enum fm10k_mbx_state state = mbx->state;
  #line 1817 
  switch ((unsigned int)state) {
    #line 1818 
    case (unsigned int)3: 
                          #line 1818 
    ;
    #line 1820 
    mbx->remote = (unsigned short)0U;
    #line 1821 
    break;
    #line 1822 
    case (unsigned int)2: 
                          #line 1822 
    ;
    #line 1824 
    fm10k_sm_mbx_connect_reset(mbx);
    #line 1825 
    break;
    #line 1826 
    case (unsigned int)1: 
                          #line 1826 
    ;
    #line 1828 
    if ((unsigned int)mbx->remote != 0U) {
      #line 1829 
      while ((unsigned int)mbx->local > 1U) 
                                            #line 1830 
                                            mbx->local = (u16)((int)mbx->local - 1);
      #line 1831 
      mbx->remote = (unsigned short)0U;
    }
    #line 1833 
    break;
    #line 1834 
    default: 
             #line 1834 
    ;
    #line 1835 
    break;
  }
  #line 1838 
  fm10k_sm_mbx_create_connect_hdr(mbx,(unsigned char)0);
  #line 1839 
  return;
}

#line 1849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_create_error_msg(struct fm10k_mbx_info *mbx, s32 err)
{
  #line 1852 
  switch (err) {
    #line 1853 
    case -507: 
               #line 1853 
    ;
    #line 1854 
    case -506: 
               #line 1854 
    ;
    #line 1855 
    case -504: 
               #line 1855 
    ;
    #line 1856 
    case -501: 
               #line 1856 
    ;
    #line 1857 
    case -498: 
               #line 1857 
    ;
    #line 1858 
    break;
    #line 1859 
    default: 
             #line 1859 
    ;
    #line 1860 
    return;
  }
  #line 1864 
  fm10k_sm_mbx_process_error(mbx);
  #line 1865 
  fm10k_sm_mbx_create_connect_hdr(mbx,(unsigned char)1);
  #line 1866 
  return;
}

#line 1877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_sm_mbx_receive(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, u16 tail)
{
  #line 1883 
  s32 err;
  #line 1882 
  u16 mbmem_len = (unsigned short)((unsigned int)mbx->mbmem_len + 65535U);
  #line 1886 
  if ((int)mbx->head > (int)tail) 
                                  #line 1887 
                                  tail = (unsigned short)((int)tail + (int)mbmem_len);
  #line 1890 
  err = fm10k_mbx_push_tail(hw,mbx,(unsigned short)((int)tail));
  #line 1891 
  if (err < 0) 
               #line 1892 
               return err;
  #line 1895 
  fm10k_mbx_dequeue_rx(hw,mbx);
  #line 1898 
  mbx->head = fm10k_mbx_head_sub(mbx,(unsigned short)((int)mbx->pushed));
  #line 1899 
  mbx->pushed = (unsigned short)0U;
  #line 1902 
  if ((int)mbx->head > (int)mbmem_len) 
                                       #line 1903 
                                       mbx->head = (unsigned short)((int)mbx->head - (int)mbmem_len);
  #line 1905 
  return err;
}

#line 1917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_transmit(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, u16 head)
{
  #line 1923 
  u16 tail_len;
  #line 1920 
  struct fm10k_mbx_fifo *fifo = & mbx->tx;
  #line 1922 
  u16 mbmem_len = (unsigned short)((unsigned int)mbx->mbmem_len + 65535U);
  #line 1923 
  u16 len = (unsigned short)0U;
  #line 1926 
  if ((int)mbx->tail < (int)head) 
                                  #line 1927 
                                  head = (unsigned short)((int)head + (int)mbmem_len);
  #line 1929 
  fm10k_mbx_pull_head(hw,mbx,(unsigned short)((int)head));
  #line 1932 
  while (1) {
    {
      #line 1933 
      u32 *msg;
      #line 1935 
      msg = fifo->buffer + (unsigned long)fm10k_fifo_head_offset(fifo,(unsigned short)((int)len));
      #line 1936 
      tail_len = len;
      #line 1937 
      len = (unsigned short)((unsigned int)((int)((unsigned short)(((unsigned long)*msg + 3145728UL) >> 22)) + (int)len) + 1U);
    }
    #line 1938 
    if (! ((int)mbx->tail_len >= (int)len && (int)len < (int)mbmem_len)) 
      #line 1932 
      break;
  }
  #line 1941 
  if ((int)mbx->tail_len > (int)tail_len) {
    #line 1942 
    mbx->tail = fm10k_mbx_tail_sub(mbx,(unsigned short)((int)mbx->tail_len - (int)tail_len));
    #line 1943 
    mbx->tail_len = tail_len;
  }
  #line 1947 
  if ((int)mbx->tail > (int)mbmem_len) 
                                       #line 1948 
                                       mbx->tail = (unsigned short)((int)mbx->tail - (int)mbmem_len);
  #line 1949 
  return;
}

#line 1962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static void fm10k_sm_mbx_create_reply(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, u16 head)
{
  #line 1965 
  switch ((unsigned int)mbx->state) {
    #line 1966 
    case (unsigned int)2: 
                          #line 1966 
    ;
    #line 1967 
    case (unsigned int)3: 
                          #line 1967 
    ;
    #line 1969 
    fm10k_sm_mbx_transmit(hw,mbx,(unsigned short)((int)head));
    #line 1972 
    if ((unsigned int)mbx->tail_len != 0U || mbx->state == (unsigned int)FM10K_STATE_OPEN) 
      #line 1973 
      fm10k_sm_mbx_create_data_hdr(mbx);
    else {
      #line 1975 
      mbx->remote = (unsigned short)0U;
      #line 1976 
      fm10k_sm_mbx_create_connect_hdr(mbx,(unsigned char)0);
    }
    #line 1978 
    break;
    #line 1979 
    case (unsigned int)1: 
                          #line 1979 
    ;
    #line 1980 
    case (unsigned int)0: 
                          #line 1980 
    ;
    #line 1981 
    fm10k_sm_mbx_create_connect_hdr(mbx,(unsigned char)0);
    #line 1982 
    break;
    #line 1983 
    default: 
             #line 1983 
    ;
    #line 1984 
    break;
  }
  #line 1986 
  return;
}

#line 1999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_sm_mbx_process_reset(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 2002 
  s32 err = 0;
  #line 2003 
  enum fm10k_mbx_state state = mbx->state;
  #line 2005 
  switch ((unsigned int)state) {
    #line 2006 
    case (unsigned int)3: 
                          #line 2006 
    ;
    #line 2008 
    mbx->state = FM10K_STATE_CLOSED;
    #line 2009 
    mbx->remote = (unsigned short)0U;
    #line 2010 
    mbx->local = (unsigned short)0U;
    #line 2011 
    break;
    #line 2012 
    case (unsigned int)2: 
                          #line 2012 
    ;
    #line 2014 
    fm10k_sm_mbx_connect_reset(mbx);
    #line 2015 
    err = -5;
    #line 2016 
    break;
    #line 2017 
    case (unsigned int)1: 
                          #line 2017 
    ;
    #line 2019 
    mbx->remote = mbx->local;
    #line 2020 
    default: 
             #line 2020 
    ;
    #line 2021 
    break;
  }
  #line 2024 
  fm10k_sm_mbx_create_reply(hw,mbx,(unsigned short)((int)mbx->tail));
  #line 2026 
  return err;
}

#line 2037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_sm_mbx_process_version_1(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 2041 
  u16 head;
  #line 2041 
  u16 tail;
  #line 2042 
  s32 len;
  #line 2040 
  u32 *hdr = & mbx->mbx_hdr;
  #line 2045 
  tail = (unsigned short)((unsigned int)((unsigned short)*hdr) & 4095U);
  #line 2046 
  head = (unsigned short)((unsigned int)((unsigned short)(*hdr >> 16)) & 4095U);
  #line 2049 
  if (mbx->state == (unsigned int)FM10K_STATE_CONNECT) {
    #line 2050 
    if ((unsigned int)mbx->remote == 0U) 
                                         #line 2051 
                                         goto send_reply;
    #line 2052 
    if ((unsigned int)mbx->remote != 1U) 
                                         #line 2053 
                                         return -504;
    #line 2055 
    mbx->state = FM10K_STATE_OPEN;
  }
  #line 2058 
  while (1) {
    #line 2060 
    len = fm10k_sm_mbx_receive(hw,mbx,(unsigned short)((int)tail));
    #line 2061 
    if (len < 0) 
                 #line 2062 
                 return len;
    #line 2063 
    if (! (len != 0)) 
                      #line 2058 
                      break;
  }
  #line 2067 
  send_reply: 
              #line 2067 
  ;
  #line 2068 
  fm10k_sm_mbx_create_reply(hw,mbx,(unsigned short)((int)head));
  #line 2070 
  return 0;
}

#line 2082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
static s32 fm10k_sm_mbx_process(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx)
{
  #line 2085 
  s32 err;
  #line 2088 
  if (mbx->state == (unsigned int)FM10K_STATE_CLOSED) 
                                                      #line 2089 
                                                      return 0;
  #line 2092 
  err = fm10k_mbx_read(hw,mbx);
  #line 2093 
  if (err != 0) 
                #line 2094 
                return err;
  #line 2096 
  err = fm10k_sm_mbx_validate_fifo_hdr(mbx);
  #line 2097 
  if (err < 0) 
               #line 2098 
               goto fifo_err;
  #line 2100 
  if (((unsigned int)((unsigned short)(mbx->mbx_hdr >> 28)) & 15U) != 0U) {
    #line 2101 
    fm10k_sm_mbx_process_error(mbx);
    #line 2102 
    goto fifo_err;
  }
  #line 2105 
  switch ((unsigned int)((unsigned short)(mbx->mbx_hdr >> 12)) & 15U) {
    #line 2106 
    case (unsigned int)0: 
                          #line 2106 
    ;
    #line 2107 
    err = fm10k_sm_mbx_process_reset(hw,mbx);
    #line 2108 
    break;
    #line 2109 
    case (unsigned int)1: 
                          #line 2109 
    ;
    #line 2110 
    err = fm10k_sm_mbx_process_version_1(hw,mbx);
    #line 2111 
    break;
  }
  #line 2114 
  fifo_err: 
            #line 2114 
  ;
  #line 2115 
  if (err < 0) 
               #line 2116 
               fm10k_sm_mbx_create_error_msg(mbx,err);
  #line 2119 
  fm10k_mbx_write(hw,mbx);
  #line 2121 
  return err;
}

#line 2137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_mbx.c"
s32 fm10k_sm_mbx_init(struct fm10k_hw *hw, struct fm10k_mbx_info *mbx, struct fm10k_msg_data *msg_data)
{
  #line 2141 
  mbx->mbx_reg = 100418U;
  #line 2142 
  mbx->mbmem_reg = 99840U;
  #line 2145 
  mbx->state = FM10K_STATE_CLOSED;
  #line 2148 
  if (fm10k_mbx_validate_handlers(msg_data) != 0) 
                                                  #line 2149 
                                                  return -2;
  #line 2152 
  mbx->msg_data = msg_data;
  #line 2157 
  mbx->timeout = 0U;
  #line 2158 
  mbx->udelay = 500U;
  #line 2161 
  mbx->max_size = (unsigned short)127U;
  #line 2162 
  mbx->mbmem_len = (unsigned short)512U;
  #line 2165 
  fm10k_fifo_init(& mbx->tx,(u32 *)(& mbx->buffer),(unsigned short)512);
  #line 2166 
  fm10k_fifo_init(& mbx->rx,& mbx->buffer[512],(unsigned short)128);
  #line 2170 
  mbx->ops.connect = & fm10k_sm_mbx_connect;
  #line 2171 
  mbx->ops.disconnect = & fm10k_sm_mbx_disconnect;
  #line 2172 
  mbx->ops.rx_ready = & fm10k_mbx_rx_ready;
  #line 2173 
  mbx->ops.tx_ready = & fm10k_mbx_tx_ready;
  #line 2174 
  mbx->ops.tx_complete = & fm10k_mbx_tx_complete;
  #line 2175 
  mbx->ops.enqueue_tx = & fm10k_mbx_enqueue_tx;
  #line 2176 
  mbx->ops.process = & fm10k_sm_mbx_process;
  #line 2177 
  mbx->ops.register_handlers = & fm10k_mbx_register_handlers;
  #line 2179 
  return 0;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_5947 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_5949 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_6001 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *ERR_PTR(long error);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 735  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc_2(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 744  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc_2(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 937 
static void cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc_0(spinlock_t *lock);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25 
void *ldv_err_ptr(long error);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 923  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_vfree_0(void *addr);
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static bool gfpflags_allow_blocking(gfp_t gfp_flags)
{
  #line 325 
  return (_Bool)((gfp_flags & 1024U) != 0U);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static unsigned int refcount_read(refcount_t *r)
{
  #line 134 
  return (unsigned int)atomic_read_0(& r->refs);
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 470  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 505  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1105 
#line 1105 
struct sk_buff *skb_clone(struct sk_buff *, gfp_t);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_pad(struct sk_buff *skb, int pad)
{
  #line 1141 
  return __skb_pad(skb,pad,(_Bool)1);
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read_0(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_shared(struct sk_buff *skb)
{
  #line 1663 
  return refcount_read(& skb->users) != 1U;
}

#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
  #line 1681 
  if ((int)gfpflags_allow_blocking(pri) != 0) 
                                              #line 1681 
                                              __might_sleep((char *)"./include/linux/skbuff.h",1681,0);
  #line 1682 
  if (skb_shared(skb) != 0) {
    #line 1683 
    struct sk_buff *nskb = skb_clone(skb,pri);
    #line 1685 
    if ((long)(nskb != (struct sk_buff *)0) != 0L) 
                                                   #line 1686 
                                                   consume_skb(skb); else 
                                                                    #line 1688 
                                                                    kfree_skb(skb);
    #line 1689 
    skb = nskb;
  }
  #line 1691 
  return skb;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2256 
  skb->len -= len;
  #line 2257 
  if ((long)(skb->len < skb->data_len) != 0L) {
    #line 2258 
    ldv_inline_asm();
    #line 2259 
    ldv_inline_asm();
    #line 2260 
    ldv_inline_asm();
    #line 2257 
    ;
  }
  #line 2258 
  skb->data += (unsigned long)len;
  #line 2258 
  return (void *)skb->data;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  #line 2513 
  skb->mac_header = (unsigned short)(skb->data - skb->head);
  #line 2514 
  return;
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
#line 99 
void dql_reset(struct dql *);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 2110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 2110 
void netdev_reset_tc(struct net_device *);
#line 2112 
#line 2112 
int netdev_set_num_tc(struct net_device *, u8);
#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_1(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 4138 
#line 4138 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4153 
#line 4153 
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_uc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4206 
  __hw_addr_unsync_dev(& dev->uc,dev,unsync);
  #line 4207 
  return;
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_mc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4250 
  __hw_addr_unsync_dev(& dev->mc,dev,unsync);
  #line 4251 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 36 
int rtnl_is_locked(void);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static struct netdev_queue *txring_txq(struct fm10k_ring *ring)
{
  #line 169 
  return (ring->netdev)->_tx + (unsigned long)ring->queue_index;
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_lock_2(struct fm10k_intfc *interface)
{
  #line 401 
  cif_spin_lock_mbx_lock_of_fm10k_intfc_2(& interface->mbx_lock);
  #line 402 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static void fm10k_mbx_unlock_2(struct fm10k_intfc *interface)
{
  #line 406 
  cif_spin_unlock_mbx_lock_of_fm10k_intfc_2(& interface->mbx_lock);
  #line 407 
  return;
}

#line 482 
#line 482 
__be16 fm10k_tx_encap_offload(struct sk_buff *skb);
#line 483 
#line 483 
netdev_tx_t fm10k_xmit_frame_ring(struct sk_buff *skb, struct fm10k_ring *tx_ring);
#line 485 
#line 485 
void fm10k_tx_timeout_reset(struct fm10k_intfc *interface);
#line 487 
#line 487 
bool fm10k_check_tx_hang(struct fm10k_ring *tx_ring);
#line 512 
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_unmap_and_free_tx_resource(struct fm10k_ring *ring, struct fm10k_tx_buffer *tx_buffer);
#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
#line 756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_queue_vlan_request(struct fm10k_intfc *interface, u32 vid, u8 vsi, bool set);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
__inline static void udp_tunnel_get_rx_info(struct net_device *dev)
{
  {
    #line 130 
    bool __warned;
    #line 130 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 130 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 130 
      __warned = (_Bool)1;
      {
        #line 130 
        int __ret_warn_on = 1;
        #line 130 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 130 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"./include/net/udp_tunnel.h",130);
          #line 131 
          ldv_inline_asm();
          #line 132 
          ldv_inline_asm();
        }
        #line 130 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 130 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 131 
  call_netdevice_notifiers(28UL,dev);
  #line 132 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_macvlan.h"
__inline static bool macvlan_supports_dest_filter(struct net_device *dev)
{
  #line 93 
  struct macvlan_dev *macvlan = netdev_priv(dev);
  #line 96 
  return (_Bool)(((unsigned int)macvlan->mode + 4294967295U <= 1U || macvlan->mode == (unsigned int)MACVLAN_MODE_BRIDGE) != 0);
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_setup_tx_resources(struct fm10k_ring *tx_ring)
{
  #line 18 
  int size;
  #line 17 
  struct device *dev = tx_ring->dev;
  #line 20 
  size = (int)((unsigned int)tx_ring->count * 40U);
  #line 22 
  tx_ring->__anonCompField_fm10k_ring_161.tx_buffer = (struct fm10k_tx_buffer *)cif_vzalloc((unsigned long)size);
  #line 23 
  if (tx_ring->__anonCompField_fm10k_ring_161.tx_buffer == (struct fm10k_tx_buffer *)0) 
    #line 24 
    goto err;
  #line 26 
  u64_stats_init(& tx_ring->syncp);
  #line 29 
  tx_ring->size = (unsigned int)tx_ring->count * 16U;
  #line 30 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  #line 32 
  tx_ring->desc = dma_alloc_coherent(dev,(unsigned long)tx_ring->size,& tx_ring->dma,3264U);
  #line 34 
  if (tx_ring->desc == (void *)0) 
                                  #line 35 
                                  goto err;
  #line 37 
  return 0;
  #line 39 
  err: 
       #line 39 
  ;
  #line 40 
  cif_vfree_0((void *)tx_ring->__anonCompField_fm10k_ring_161.tx_buffer);
  #line 41 
  tx_ring->__anonCompField_fm10k_ring_161.tx_buffer = (struct fm10k_tx_buffer *)0;
  #line 42 
  return -12;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_setup_all_tx_resources(struct fm10k_intfc *interface)
{
  #line 57 
  int i;
  #line 57 
  int err;
  #line 59 
  i = 0;
  #line 59 
  while (interface->num_tx_queues > i) {
    #line 60 
    err = fm10k_setup_tx_resources(interface->tx_ring[i]);
    #line 61 
    if (err == 0) 
                  #line 62 
                  goto __Cont;
    #line 64 
    if (((int)interface->msg_enable & 2) != 0) 
                                               #line 64 
                                               netdev_err(interface->netdev,(char *)"Allocation for Tx Queue %u failed\n",i);
    #line 66 
    goto err_setup_tx;
    #line 59 
    __Cont: 
            #line 59 
    i ++;
  }
  #line 69 
  return 0;
  #line 70 
  err_setup_tx: 
                #line 70 
  ;
  #line 72 
  while (1) {
    #line 72 
    int tmp;
    #line 72 
    tmp = i;
    #line 72 
    i --;
    #line 72 
    ;
    #line 72 
    if (! (tmp != 0)) 
                      #line 72 
                      break;
    #line 73 
    fm10k_free_tx_resources(interface->tx_ring[i]);
  }
  #line 74 
  return err;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_setup_rx_resources(struct fm10k_ring *rx_ring)
{
  #line 86 
  int size;
  #line 85 
  struct device *dev = rx_ring->dev;
  #line 88 
  size = (int)((unsigned int)rx_ring->count * 24U);
  #line 90 
  rx_ring->__anonCompField_fm10k_ring_161.rx_buffer = (struct fm10k_rx_buffer *)cif_vzalloc((unsigned long)size);
  #line 91 
  if (rx_ring->__anonCompField_fm10k_ring_161.rx_buffer == (struct fm10k_rx_buffer *)0) 
    #line 92 
    goto err;
  #line 94 
  u64_stats_init(& rx_ring->syncp);
  #line 97 
  rx_ring->size = (unsigned int)rx_ring->count * 32U;
  #line 98 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  #line 100 
  rx_ring->desc = dma_alloc_coherent(dev,(unsigned long)rx_ring->size,& rx_ring->dma,3264U);
  #line 102 
  if (rx_ring->desc == (void *)0) 
                                  #line 103 
                                  goto err;
  #line 105 
  return 0;
  #line 106 
  err: 
       #line 106 
  ;
  #line 107 
  cif_vfree_0((void *)rx_ring->__anonCompField_fm10k_ring_161.rx_buffer);
  #line 108 
  rx_ring->__anonCompField_fm10k_ring_161.rx_buffer = (struct fm10k_rx_buffer *)0;
  #line 109 
  return -12;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_setup_all_rx_resources(struct fm10k_intfc *interface)
{
  #line 124 
  int i;
  #line 124 
  int err;
  #line 126 
  i = 0;
  #line 126 
  while (interface->num_rx_queues > i) {
    #line 127 
    err = fm10k_setup_rx_resources(interface->rx_ring[i]);
    #line 128 
    if (err == 0) 
                  #line 129 
                  goto __Cont;
    #line 131 
    if (((int)interface->msg_enable & 2) != 0) 
                                               #line 131 
                                               netdev_err(interface->netdev,(char *)"Allocation for Rx Queue %u failed\n",i);
    #line 133 
    goto err_setup_rx;
    #line 126 
    __Cont: 
            #line 126 
    i ++;
  }
  #line 136 
  return 0;
  #line 137 
  err_setup_rx: 
                #line 137 
  ;
  #line 139 
  while (1) {
    #line 139 
    int tmp;
    #line 139 
    tmp = i;
    #line 139 
    i --;
    #line 139 
    ;
    #line 139 
    if (! (tmp != 0)) 
                      #line 139 
                      break;
    #line 140 
    fm10k_free_rx_resources(interface->rx_ring[i]);
  }
  #line 141 
  return err;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_unmap_and_free_tx_resource(struct fm10k_ring *ring, struct fm10k_tx_buffer *tx_buffer)
{
  #line 147 
  if (tx_buffer->skb != (struct sk_buff *)0) {
    #line 148 
    dev_kfree_skb_any(tx_buffer->skb);
    #line 149 
    if (tx_buffer->len != 0U) 
                              #line 150 
                              dma_unmap_single_attrs(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  else 
    #line 154 
    if (tx_buffer->len != 0U) 
                              #line 155 
                              dma_unmap_page_attrs(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 160 
  tx_buffer->next_to_watch = (struct fm10k_tx_desc *)0;
  #line 161 
  tx_buffer->skb = (struct sk_buff *)0;
  #line 162 
  tx_buffer->len = 0U;
  #line 163 
  return;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_clean_tx_ring(struct fm10k_ring *tx_ring)
{
  #line 172 
  unsigned long size;
  #line 173 
  u16 i;
  #line 176 
  if (tx_ring->__anonCompField_fm10k_ring_161.tx_buffer == (struct fm10k_tx_buffer *)0) 
    #line 177 
    return;
  #line 180 
  i = (unsigned short)0U;
  #line 180 
  while ((int)tx_ring->count > (int)i) {
    {
      #line 181 
      struct fm10k_tx_buffer *tx_buffer = tx_ring->__anonCompField_fm10k_ring_161.tx_buffer + (unsigned long)i;
      #line 183 
      fm10k_unmap_and_free_tx_resource(tx_ring,tx_buffer);
    }
    #line 180 
    i = (u16)((int)i + 1);
  }
  #line 187 
  netdev_tx_reset_queue(txring_txq(tx_ring));
  #line 189 
  size = (unsigned long)tx_ring->count * 40UL;
  #line 190 
  memset((void *)tx_ring->__anonCompField_fm10k_ring_161.tx_buffer,0,size);
  #line 193 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  #line 194 
  return;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_free_tx_resources(struct fm10k_ring *tx_ring)
{
  #line 204 
  fm10k_clean_tx_ring(tx_ring);
  #line 206 
  cif_vfree_0((void *)tx_ring->__anonCompField_fm10k_ring_161.tx_buffer);
  #line 207 
  tx_ring->__anonCompField_fm10k_ring_161.tx_buffer = (struct fm10k_tx_buffer *)0;
  #line 210 
  if (tx_ring->desc == (void *)0) 
                                  #line 211 
                                  return;
  #line 213 
  dma_free_coherent(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
  #line 215 
  tx_ring->desc = (void *)0;
  #line 216 
  return;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_clean_all_tx_rings(struct fm10k_intfc *interface)
{
  #line 224 
  int i;
  #line 226 
  i = 0;
  #line 226 
  while (interface->num_tx_queues > i) {
    #line 227 
    fm10k_clean_tx_ring(interface->tx_ring[i]);
    #line 226 
    i ++;
  }
  #line 228 
  return;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_free_all_tx_resources(struct fm10k_intfc *interface)
{
  #line 238 
  int i = interface->num_tx_queues;
  #line 240 
  while (1) {
    #line 240 
    int tmp;
    #line 240 
    tmp = i;
    #line 240 
    i --;
    #line 240 
    ;
    #line 240 
    if (! (tmp != 0)) 
                      #line 240 
                      break;
    #line 241 
    fm10k_free_tx_resources(interface->tx_ring[i]);
  }
  #line 242 
  return;
}

#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_clean_rx_ring(struct fm10k_ring *rx_ring)
{
  #line 250 
  unsigned long size;
  #line 251 
  u16 i;
  #line 253 
  if (rx_ring->__anonCompField_fm10k_ring_161.rx_buffer == (struct fm10k_rx_buffer *)0) 
    #line 254 
    return;
  #line 256 
  consume_skb(rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.skb);
  #line 257 
  rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.skb = (struct sk_buff *)0;
  #line 260 
  i = (unsigned short)0U;
  #line 260 
  while ((int)rx_ring->count > (int)i) {
    {
      #line 261 
      struct fm10k_rx_buffer *buffer = rx_ring->__anonCompField_fm10k_ring_161.rx_buffer + (unsigned long)i;
      #line 263 
      if (buffer->page == (struct page *)0) 
                                            #line 264 
                                            goto __Cont;
      #line 266 
      dma_unmap_page_attrs(rx_ring->dev,buffer->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 268 
      __free_pages(buffer->page,0U);
      #line 270 
      buffer->page = (struct page *)0;
    }
    #line 260 
    __Cont: 
            #line 260 
    i = (u16)((int)i + 1);
  }
  #line 273 
  size = (unsigned long)rx_ring->count * 24UL;
  #line 274 
  memset((void *)rx_ring->__anonCompField_fm10k_ring_161.rx_buffer,0,size);
  #line 277 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  #line 279 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 280 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 281 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 282 
  return;
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_free_rx_resources(struct fm10k_ring *rx_ring)
{
  #line 292 
  fm10k_clean_rx_ring(rx_ring);
  #line 294 
  cif_vfree_0((void *)rx_ring->__anonCompField_fm10k_ring_161.rx_buffer);
  #line 295 
  rx_ring->__anonCompField_fm10k_ring_161.rx_buffer = (struct fm10k_rx_buffer *)0;
  #line 298 
  if (rx_ring->desc == (void *)0) 
                                  #line 299 
                                  return;
  #line 301 
  dma_free_coherent(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
  #line 304 
  rx_ring->desc = (void *)0;
  #line 305 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_clean_all_rx_rings(struct fm10k_intfc *interface)
{
  #line 313 
  int i;
  #line 315 
  i = 0;
  #line 315 
  while (interface->num_rx_queues > i) {
    #line 316 
    fm10k_clean_rx_ring(interface->rx_ring[i]);
    #line 315 
    i ++;
  }
  #line 317 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_free_all_rx_resources(struct fm10k_intfc *interface)
{
  #line 327 
  int i = interface->num_rx_queues;
  #line 329 
  while (1) {
    #line 329 
    int tmp;
    #line 329 
    tmp = i;
    #line 329 
    i --;
    #line 329 
    ;
    #line 329 
    if (! (tmp != 0)) 
                      #line 329 
                      break;
    #line 330 
    fm10k_free_rx_resources(interface->rx_ring[i]);
  }
  #line 331 
  return;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_request_glort_range(struct fm10k_intfc *interface)
{
  #line 341 
  struct fm10k_hw *hw = & interface->hw;
  #line 342 
  u16 mask = (unsigned short)(~ hw->mac.dglort_map >> 16);
  #line 345 
  interface->glort = (unsigned short)hw->mac.dglort_map;
  #line 346 
  interface->glort_count = (unsigned short)0U;
  #line 349 
  if (hw->mac.dglort_map == 65535U) 
                                    #line 350 
                                    return;
  #line 357 
  if ((int)hw->iov.total_vfs >= (int)mask) {
    #line 358 
    interface->glort_count = (unsigned short)1U;
    #line 359 
    interface->glort = (unsigned short)((int)interface->glort + (int)mask);
  }
  else 
    #line 360 
    if ((unsigned int)mask <= 63U) {
      #line 361 
      interface->glort_count = (unsigned short)(((int)mask + 1) / 2);
      #line 362 
      interface->glort = (unsigned short)((int)interface->glort + (int)interface->glort_count);
    }
    else {
      #line 364 
      interface->glort_count = (unsigned short)((unsigned int)mask + 65473U);
      #line 365 
      interface->glort = (unsigned short)((unsigned int)interface->glort + 64U);
    }
  #line 367 
  return;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_free_udp_port_info(struct fm10k_intfc *interface)
{
  #line 391 
  struct fm10k_udp_port *tmp_9;
  #line 380 
  void *__mptr;
  #line 380 
  struct fm10k_udp_port *tmp_1;
  #line 391 
  void *__mptr_1;
  #line 377 
  struct fm10k_udp_port *port;
  {
    #line 381 
    union __anonunion___u_6988 __u;
    #line 380 
    struct list_head *head__ = & interface->vxlan_port;
    #line 380 
    __read_once_size((void *)(& head__->next),(void *)(& __u.__c),8);
    #line 380 
    struct list_head *pos__ = (__u.__val);
    #line 380 
    if (pos__ != head__) {
      #line 380 
      __mptr = (void *)pos__;
      #line 380 
      tmp_1 = ((struct fm10k_udp_port *)__mptr);
    }
    else 
         #line 380 
         tmp_1 = (struct fm10k_udp_port *)0;
    }
  #line 380 
  port = tmp_1;
  #line 382 
  while (port != (struct fm10k_udp_port *)0) {
    #line 385 
    void *__mptr_0;
    #line 385 
    struct fm10k_udp_port *tmp_5;
    #line 383 
    list_del(& port->list);
    #line 384 
    kfree((void *)port);
    {
      #line 386 
      union __anonunion___u_6990 __u_0;
      #line 385 
      struct list_head *head___0 = & interface->vxlan_port;
      #line 385 
      __read_once_size((void *)(& head___0->next),(void *)(& __u_0.__c),8);
      #line 385 
      struct list_head *pos___0 = (__u_0.__val);
      #line 385 
      if (pos___0 != head___0) {
        #line 385 
        __mptr_0 = (void *)pos___0;
        #line 385 
        tmp_5 = ((struct fm10k_udp_port *)__mptr_0);
      }
      else 
           #line 385 
           tmp_5 = (struct fm10k_udp_port *)0;
      }
    #line 385 
    port = tmp_5;
  }
  {
    #line 392 
    union __anonunion___u_6992 __u_1;
    #line 391 
    struct list_head *head___1 = & interface->geneve_port;
    #line 391 
    __read_once_size((void *)(& head___1->next),(void *)(& __u_1.__c),8);
    #line 391 
    struct list_head *pos___1 = (__u_1.__val);
    #line 391 
    if (pos___1 != head___1) {
      #line 391 
      __mptr_1 = (void *)pos___1;
      #line 391 
      tmp_9 = ((struct fm10k_udp_port *)__mptr_1);
    }
    else 
         #line 391 
         tmp_9 = (struct fm10k_udp_port *)0;
    }
  #line 391 
  port = tmp_9;
  #line 393 
  while (port != (struct fm10k_udp_port *)0) {
    #line 396 
    struct fm10k_udp_port *tmp_13;
    #line 396 
    void *__mptr_2;
    #line 394 
    list_del(& port->list);
    #line 395 
    kfree((void *)port);
    {
      #line 397 
      union __anonunion___u_6994 __u_2;
      #line 396 
      struct list_head *head___2 = & interface->vxlan_port;
      #line 396 
      __read_once_size((void *)(& head___2->next),(void *)(& __u_2.__c),8);
      #line 396 
      struct list_head *pos___2 = (__u_2.__val);
      #line 396 
      if (pos___2 != head___2) {
        #line 396 
        __mptr_2 = (void *)pos___2;
        #line 396 
        tmp_13 = ((struct fm10k_udp_port *)__mptr_2);
      }
      else 
           #line 396 
           tmp_13 = (struct fm10k_udp_port *)0;
      }
    #line 396 
    port = tmp_13;
  }
  #line 399 
  return;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_restore_udp_port_info(struct fm10k_intfc *interface)
{
  #line 417 
  void *__mptr;
  #line 425 
  void *__mptr_0;
  #line 417 
  struct fm10k_udp_port *tmp_1;
  #line 425 
  struct fm10k_udp_port *tmp_8;
  #line 411 
  struct fm10k_udp_port *port;
  #line 410 
  struct fm10k_hw *hw = & interface->hw;
  #line 414 
  if (hw->mac.type != (unsigned int)fm10k_mac_pf) 
                                                  #line 415 
                                                  return;
  {
    #line 418 
    union __anonunion___u_6996 __u;
    #line 417 
    struct list_head *head__ = & interface->vxlan_port;
    #line 417 
    __read_once_size((void *)(& head__->next),(void *)(& __u.__c),8);
    #line 417 
    struct list_head *pos__ = (__u.__val);
    #line 417 
    if (pos__ != head__) {
      #line 417 
      __mptr = (void *)pos__;
      #line 417 
      tmp_1 = ((struct fm10k_udp_port *)__mptr);
    }
    else 
         #line 417 
         tmp_1 = (struct fm10k_udp_port *)0;
    }
  #line 417 
  port = tmp_1;
  {
    #line 422 
    union __anonunion___u_6998 __u_0;
    #line 421 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 421 
    u32 *hw_addr = (__u_0.__val);
    #line 421 
    if ((long)(hw_addr == (u32 *)0U) == 0L) {
      #line 421 
      unsigned int tmp_5;
      #line 421 
      ;
      #line 421 
      if (port != (struct fm10k_udp_port *)0) {
        #line 421 
        tmp_5 = (unsigned int)((int)__builtin_bswap16((unsigned short)((int)port->port)) | 1700265984);
      }
      else 
           #line 421 
           tmp_5 = 1700265984U;
      #line 421 
      writel(tmp_5,(void *)(hw_addr + 64U));
    }
  }
  {
    #line 426 
    union __anonunion___u_7000 __u_1;
    #line 425 
    struct list_head *head___0 = & interface->geneve_port;
    #line 425 
    __read_once_size((void *)(& head___0->next),(void *)(& __u_1.__c),8);
    #line 425 
    struct list_head *pos___0 = (__u_1.__val);
    #line 425 
    if (pos___0 != head___0) {
      #line 425 
      __mptr_0 = (void *)pos___0;
      #line 425 
      tmp_8 = ((struct fm10k_udp_port *)__mptr_0);
    }
    else 
         #line 425 
         tmp_8 = (struct fm10k_udp_port *)0;
    }
  #line 425 
  port = tmp_8;
  {
    #line 430 
    union __anonunion___u_7002 __u_2;
    #line 429 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 429 
    u32 *hw_addr_0 = (__u_2.__val);
    #line 429 
    if ((long)(hw_addr_0 == (u32 *)0U) == 0L) {
      #line 429 
      unsigned int tmp_12;
      #line 429 
      ;
      #line 429 
      if (port != (struct fm10k_udp_port *)0) {
        #line 429 
        tmp_12 = (unsigned int)__builtin_bswap16((unsigned short)((int)port->port));
      }
      else 
           #line 429 
           tmp_12 = 0U;
      #line 429 
      writel(tmp_12,(void *)(hw_addr_0 + 65U));
    }
  }
  #line 431 
  return;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static struct fm10k_udp_port *fm10k_remove_tunnel_port(struct list_head *ports, struct udp_tunnel_info *ti)
{
  #line 439 
  void *__mptr;
  #line 437 
  struct fm10k_udp_port *port;
  #line 439 
  __mptr = (void *)ports->next;
  #line 439 
  port = ((struct fm10k_udp_port *)__mptr);
  #line 439 
  while (& port->list != ports) {
    #line 439 
    void *__mptr_0;
    #line 440 
    if ((int)port->port == (int)ti->port && (int)port->sa_family == (int)ti->sa_family) {
      #line 442 
      list_del(& port->list);
      #line 443 
      return port;
    }
    #line 439 
    __mptr_0 = (void *)port->list.next;
    #line 439 
    port = ((struct fm10k_udp_port *)__mptr_0);
  }
  #line 447 
  return (struct fm10k_udp_port *)0;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_insert_tunnel_port(struct list_head *ports, struct udp_tunnel_info *ti)
{
  #line 453 
  struct fm10k_udp_port *port;
  #line 458 
  port = fm10k_remove_tunnel_port(ports,ti);
  #line 459 
  if (port == (struct fm10k_udp_port *)0) {
    #line 460 
    port = (struct fm10k_udp_port *)kmalloc(24UL,2592U);
    #line 461 
    if (port == (struct fm10k_udp_port *)0) 
                                            #line 462 
                                            return;
    #line 463 
    port->port = ti->port;
    #line 464 
    port->sa_family = ti->sa_family;
  }
  #line 467 
  list_add_tail(& port->list,ports);
  #line 468 
  return;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_udp_tunnel_add(struct net_device *dev, struct udp_tunnel_info *ti)
{
  #line 482 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 485 
  if (interface->hw.mac.type != (unsigned int)fm10k_mac_pf) 
                                                            #line 486 
                                                            return;
  #line 488 
  switch ((int)ti->type) {
    #line 489 
    case 0: 
            #line 489 
    ;
    #line 490 
    fm10k_insert_tunnel_port(& interface->vxlan_port,ti);
    #line 491 
    break;
    #line 492 
    case 1: 
            #line 492 
    ;
    #line 493 
    fm10k_insert_tunnel_port(& interface->geneve_port,ti);
    #line 494 
    break;
    #line 495 
    default: 
             #line 495 
    ;
    #line 496 
    return;
  }
  #line 499 
  fm10k_restore_udp_port_info(interface);
  #line 500 
  return;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_udp_tunnel_del(struct net_device *dev, struct udp_tunnel_info *ti)
{
  #line 514 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 515 
  struct fm10k_udp_port *port = (struct fm10k_udp_port *)0;
  #line 517 
  if (interface->hw.mac.type != (unsigned int)fm10k_mac_pf) 
                                                            #line 518 
                                                            return;
  #line 520 
  switch ((int)ti->type) {
    #line 521 
    case 0: 
            #line 521 
    ;
    #line 522 
    port = fm10k_remove_tunnel_port(& interface->vxlan_port,ti);
    #line 523 
    break;
    #line 524 
    case 1: 
            #line 524 
    ;
    #line 525 
    port = fm10k_remove_tunnel_port(& interface->geneve_port,ti);
    #line 526 
    break;
    #line 527 
    default: 
             #line 527 
    ;
    #line 528 
    return;
  }
  #line 532 
  kfree((void *)port);
  #line 534 
  fm10k_restore_udp_port_info(interface);
  #line 535 
  return;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_open(struct net_device *netdev)
{
  #line 552 
  int err;
  #line 551 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 555 
  err = fm10k_setup_all_tx_resources(interface);
  #line 556 
  if (err != 0) 
                #line 557 
                goto err_setup_tx;
  #line 560 
  err = fm10k_setup_all_rx_resources(interface);
  #line 561 
  if (err != 0) 
                #line 562 
                goto err_setup_rx;
  #line 565 
  err = fm10k_qv_request_irq(interface);
  #line 566 
  if (err != 0) 
                #line 567 
                goto err_req_irq;
  #line 570 
  fm10k_request_glort_range(interface);
  #line 573 
  err = netif_set_real_num_tx_queues(netdev,(unsigned int)interface->num_tx_queues);
  #line 575 
  if (err != 0) 
                #line 576 
                goto err_set_queues;
  #line 578 
  err = netif_set_real_num_rx_queues(netdev,(unsigned int)interface->num_rx_queues);
  #line 580 
  if (err != 0) 
                #line 581 
                goto err_set_queues;
  #line 583 
  udp_tunnel_get_rx_info(netdev);
  #line 585 
  fm10k_up(interface);
  #line 587 
  return 0;
  #line 589 
  err_set_queues: 
                  #line 589 
  ;
  #line 590 
  fm10k_qv_free_irq(interface);
  #line 591 
  err_req_irq: 
               #line 591 
  ;
  #line 592 
  fm10k_free_all_rx_resources(interface);
  #line 593 
  err_setup_rx: 
                #line 593 
  ;
  #line 594 
  fm10k_free_all_tx_resources(interface);
  #line 595 
  err_setup_tx: 
                #line 595 
  ;
  #line 596 
  return err;
}

#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_close(struct net_device *netdev)
{
  #line 612 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 614 
  fm10k_down(interface);
  #line 616 
  fm10k_qv_free_irq(interface);
  #line 618 
  fm10k_free_udp_port_info(interface);
  #line 620 
  fm10k_free_all_tx_resources(interface);
  #line 621 
  fm10k_free_all_rx_resources(interface);
  #line 623 
  return 0;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static netdev_tx_t fm10k_xmit_frame(struct sk_buff *skb, struct net_device *dev)
{
  #line 630 
  union __anonunion___u_7004 __u;
  #line 631 
  int err;
  #line 628 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 629 
  __read_once_size((void *)(& interface->num_tx_queues),(void *)(& __u.__c),4);
  #line 629 
  int num_tx_queues = (__u.__val);
  #line 630 
  unsigned int r_idx = (unsigned int)skb->queue_mapping;
  #line 633 
  if (num_tx_queues == 0) 
                          #line 634 
                          return NETDEV_TX_BUSY;
  #line 636 
  if ((unsigned int)skb->protocol == 129U && (unsigned int)skb->vlan_present == 0U) {
    #line 641 
    struct vlan_hdr *vhdr;
    #line 642 
    __be16 proto;
    #line 650 
    int tmp_2;
    #line 645 
    skb = skb_share_check(skb,2592U);
    #line 646 
    if (skb == (struct sk_buff *)0) 
                                    #line 647 
                                    return NETDEV_TX_OK;
    #line 650 
    if (pskb_may_pull(skb,18U)) 
                                #line 650 
                                tmp_2 = 0; else 
                                                #line 650 
                                                tmp_2 = 1;
    #line 650 
    if ((long)tmp_2 != 0L) 
                           #line 651 
                           return NETDEV_TX_OK;
    #line 654 
    err = skb_cow_head(skb,0U);
    #line 655 
    if (err != 0) {
      #line 656 
      consume_skb(skb);
      #line 657 
      return NETDEV_TX_OK;
    }
    #line 661 
    vhdr = (struct vlan_hdr *)(skb->data + 14U);
    #line 664 
    ;
    #line 664 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)vhdr->h_vlan_TCI))));
    #line 667 
    proto = vhdr->h_vlan_encapsulated_proto;
    #line 668 
    if ((unsigned int)__builtin_bswap16((unsigned short)((int)proto)) > 1535U) 
      #line 668 
      skb->protocol = proto; else 
                                  #line 668 
                                  skb->protocol = (unsigned short)1024U;
    #line 672 
    __memmove((void *)(skb->data + 4U),(void *)skb->data,12UL);
    #line 673 
    __skb_pull(skb,4U);
    #line 674 
    skb_reset_mac_header(skb);
  }
  #line 680 
  if ((long)(skb->len <= 16U) != 0L) {
    #line 681 
    int pad_len = (int)(17U - skb->len);
    #line 683 
    if (skb_pad(skb,pad_len) != 0) 
                                   #line 684 
                                   return NETDEV_TX_OK;
    #line 685 
    __skb_put(skb,(unsigned int)pad_len);
  }
  #line 688 
  if (r_idx >= (unsigned int)num_tx_queues) 
                                            #line 689 
                                            r_idx %= (unsigned int)num_tx_queues;
  #line 691 
  err = (int)fm10k_xmit_frame_ring(skb,interface->tx_ring[r_idx]);
  #line 693 
  return (enum netdev_tx)err;
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_tx_timeout(struct net_device *netdev)
{
  #line 704 
  int i;
  #line 702 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 703 
  bool real_tx_hang = (_Bool)0;
  #line 707 
  i = 0;
  #line 707 
  while (interface->num_tx_queues > i) {
    {
      #line 708 
      struct fm10k_ring *tx_ring = interface->tx_ring[i];
      #line 710 
      if ((int)test_bit(0L,(unsigned long *)(& tx_ring->state)) != 0) {
        #line 710 
        if ((int)fm10k_check_tx_hang(tx_ring) != 0) 
                                                    #line 711 
                                                    real_tx_hang = (_Bool)1;
      }
    }
    #line 707 
    i ++;
  }
  #line 714 
  if ((int)real_tx_hang != 0) 
                              #line 715 
                              fm10k_tx_timeout_reset(interface);
  else {
    #line 717 
    if (((int)interface->msg_enable & 1) != 0) 
                                               #line 717 
                                               netdev_info(netdev,(char *)"Fake Tx hang detected with timeout of %d seconds\n",netdev->watchdog_timeo / 250);
    #line 722 
    if (netdev->watchdog_timeo <= 15999) 
                                         #line 723 
                                         netdev->watchdog_timeo *= 2;
  }
  #line 725 
  return;
}

#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static bool fm10k_host_mbx_ready(struct fm10k_intfc *interface)
{
  #line 739 
  struct fm10k_hw *hw = & interface->hw;
  #line 741 
  return (_Bool)((hw->mac.type == (unsigned int)fm10k_mac_vf || (int)interface->host_ready != 0) != 0);
}

#line 756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_queue_vlan_request(struct fm10k_intfc *interface, u32 vid, u8 vsi, bool set)
{
  #line 759 
  struct fm10k_macvlan_request *request;
  #line 760 
  unsigned long flags;
  #line 765 
  request = (struct fm10k_macvlan_request *)kzalloc_0(40UL,2592U);
  #line 766 
  if (request == (struct fm10k_macvlan_request *)0) 
                                                    #line 767 
                                                    return -12;
  #line 769 
  request->type = FM10K_VLAN_REQUEST;
  #line 770 
  request->__anonCompField_fm10k_macvlan_request_165.vlan.vid = vid;
  #line 771 
  request->__anonCompField_fm10k_macvlan_request_165.vlan.vsi = vsi;
  #line 772 
  request->set = set;
  #line 774 
  cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc_0(& interface->macvlan_lock);
  #line 775 
  list_add_tail(& request->list,& interface->macvlan_requests);
  #line 776 
  cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc_0(& interface->macvlan_lock,flags);
  #line 778 
  fm10k_macvlan_schedule(interface);
  #line 780 
  return 0;
}

#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_queue_mac_request(struct fm10k_intfc *interface, u16 glort, unsigned char *addr, u16 vid, bool set)
{
  #line 798 
  struct fm10k_macvlan_request *request;
  #line 799 
  unsigned long flags;
  #line 804 
  request = (struct fm10k_macvlan_request *)kzalloc_0(40UL,2592U);
  #line 805 
  if (request == (struct fm10k_macvlan_request *)0) 
                                                    #line 806 
                                                    return -12;
  #line 808 
  if ((int)is_multicast_ether_addr(addr) != 0) 
                                               #line 809 
                                               request->type = FM10K_MC_MAC_REQUEST; else 
                                                                    #line 811 
                                                                    request->type = FM10K_UC_MAC_REQUEST;
  #line 813 
  ether_addr_copy((u8 *)(& request->__anonCompField_fm10k_macvlan_request_165.mac.addr),addr);
  #line 814 
  request->__anonCompField_fm10k_macvlan_request_165.mac.glort = glort;
  #line 815 
  request->__anonCompField_fm10k_macvlan_request_165.mac.vid = vid;
  #line 816 
  request->set = set;
  #line 818 
  cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc_0(& interface->macvlan_lock);
  #line 819 
  list_add_tail(& request->list,& interface->macvlan_requests);
  #line 820 
  cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc_0(& interface->macvlan_lock,flags);
  #line 822 
  fm10k_macvlan_schedule(interface);
  #line 824 
  return 0;
}

#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_clear_macvlan_queue(struct fm10k_intfc *interface, u16 glort, bool vlans)
{
  #line 846 
  void *__mptr;
  #line 846 
  void *__mptr_0;
  #line 840 
  struct fm10k_macvlan_request *r;
  #line 840 
  struct fm10k_macvlan_request *tmp;
  #line 841 
  unsigned long flags;
  #line 843 
  cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc_0(& interface->macvlan_lock);
  #line 846 
  __mptr = (void *)interface->macvlan_requests.next;
  #line 846 
  r = ((struct fm10k_macvlan_request *)(__mptr + 18446744073709551608U));
  #line 846 
  __mptr_0 = (void *)r->list.next;
  #line 847 
  tmp = ((struct fm10k_macvlan_request *)(__mptr_0 + 18446744073709551608U));
  #line 846 
  while (& r->list != & interface->macvlan_requests) {
    #line 846 
    void *__mptr_1;
    #line 847 
    switch ((unsigned int)r->type) {
      #line 848 
      case (unsigned int)1: 
                            #line 848 
      ;
      #line 849 
      case (unsigned int)0: 
                            #line 849 
      ;
      #line 851 
      if ((int)r->__anonCompField_fm10k_macvlan_request_165.mac.glort != (int)glort) 
        #line 852 
        break;
      #line 854 
      case (unsigned int)2: 
                            #line 854 
      ;
      #line 855 
      if ((int)vlans != 0) {
        #line 856 
        list_del(& r->list);
        #line 857 
        kfree((void *)r);
      }
      #line 859 
      break;
    }
    #line 846 
    r = tmp;
    #line 846 
    __mptr_1 = (void *)tmp->list.next;
    #line 846 
    tmp = ((struct fm10k_macvlan_request *)(__mptr_1 + 18446744073709551608U));
  }
  #line 863 
  cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc_0(& interface->macvlan_lock,flags);
  #line 864 
  return;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_uc_vlan_unsync(struct net_device *netdev, unsigned char *uc_addr)
{
  #line 873 
  int err;
  #line 869 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 870 
  u16 glort = interface->glort;
  #line 871 
  u16 vid = interface->vid;
  #line 872 
  bool set = (_Bool)((unsigned int)vid > 4095U);
  #line 876 
  vid = (unsigned short)((unsigned int)vid & 4095U);
  #line 878 
  err = fm10k_queue_mac_request(interface,(unsigned short)((int)glort),uc_addr,(unsigned short)((int)vid),(_Bool)((bool)((int)set) != 0));
  #line 879 
  if (err != 0) 
                #line 880 
                return err;
  #line 883 
  return 1;
}

#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_mc_vlan_unsync(struct net_device *netdev, unsigned char *mc_addr)
{
  #line 893 
  int err;
  #line 889 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 890 
  u16 glort = interface->glort;
  #line 891 
  u16 vid = interface->vid;
  #line 892 
  bool set = (_Bool)((unsigned int)vid > 4095U);
  #line 896 
  vid = (unsigned short)((unsigned int)vid & 4095U);
  #line 898 
  err = fm10k_queue_mac_request(interface,(unsigned short)((int)glort),mc_addr,(unsigned short)((int)vid),(_Bool)((bool)((int)set) != 0));
  #line 899 
  if (err != 0) 
                #line 900 
                return err;
  #line 903 
  return 1;
}

#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_update_vid(struct net_device *netdev, u16 vid, bool set)
{
  #line 911 
  u16 glort;
  #line 912 
  s32 err;
  #line 913 
  int i;
  #line 996 
  unsigned int tmp_2;
  #line 908 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 909 
  struct fm10k_l2_accel *l2_accel = interface->l2_accel;
  #line 910 
  struct fm10k_hw *hw = & interface->hw;
  #line 916 
  if ((unsigned int)vid == 0U) 
                               #line 917 
                               return 0;
  #line 919 
  if ((unsigned int)vid > 4095U) 
                                 #line 920 
                                 return -22;
  #line 927 
  if ((int)set != 0 && (int)hw->mac.vlan_override != 0) 
                                                        #line 928 
                                                        return -13;
  #line 931 
  cif_set_bit_1((long)vid,(unsigned long *)(& interface->active_vlans));
  #line 932 
  if (! set) 
             #line 933 
             cif_clear_bit_1((long)vid,(unsigned long *)(& interface->active_vlans));
  #line 936 
  i = 0;
  #line 936 
  while (interface->num_rx_queues > i) {
    {
      #line 937 
      struct fm10k_ring *rx_ring = interface->rx_ring[i];
      #line 938 
      u16 rx_vid = (unsigned short)((unsigned int)rx_ring->vid & 4095U);
      #line 940 
      if ((int)test_bit((long)rx_vid,(unsigned long *)(& interface->active_vlans)) != 0) 
        #line 941 
        rx_ring->vid = (unsigned short)((unsigned int)rx_ring->vid | 32768U); else 
                                                                    #line 943 
                                                                    rx_ring->vid = (unsigned short)((unsigned int)rx_ring->vid & 32767U);
    }
    #line 936 
    i ++;
  }
  #line 949 
  if ((int)hw->mac.vlan_override != 0) 
                                       #line 950 
                                       return 0;
  #line 955 
  if (! set && (int)hw->mac.default_vid == (int)vid) 
                                                     #line 956 
                                                     return 0;
  #line 961 
  if ((int)test_bit(3L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 962 
                                                                    return 0;
  #line 964 
  fm10k_mbx_lock_2(interface);
  #line 967 
  if ((netdev->flags & 256U) == 0U) {
    #line 968 
    err = fm10k_queue_vlan_request(interface,(unsigned int)vid,(unsigned char)0,(_Bool)((bool)((int)set) != 0));
    #line 969 
    if (err != 0) 
                  #line 970 
                  goto err_out;
  }
  #line 974 
  err = fm10k_queue_mac_request(interface,(unsigned short)((int)interface->glort),(unsigned char *)(& hw->mac.addr),(unsigned short)((int)vid),(_Bool)((bool)((int)set) != 0));
  #line 976 
  if (err != 0) 
                #line 977 
                goto err_out;
  #line 980 
  if (l2_accel != (struct fm10k_l2_accel *)0) {
    #line 981 
    i = 0;
    #line 981 
    while (l2_accel->size > i) {
      {
        #line 982 
        struct net_device *sdev = l2_accel->macvlan[i];
        #line 984 
        if (sdev == (struct net_device *)0) 
                                            #line 985 
                                            goto __Cont;
        #line 987 
        glort = (unsigned short)((unsigned int)((int)l2_accel->dglort + (int)((unsigned short)i)) + 1U);
        #line 989 
        fm10k_queue_mac_request(interface,(unsigned short)((int)glort),sdev->dev_addr,(unsigned short)((int)vid),(_Bool)((bool)((int)set) != 0));
      }
      #line 981 
      __Cont: 
              #line 981 
      i ++;
    }
  }
  #line 996 
  if ((int)set != 0) 
                     #line 996 
                     tmp_2 = 4096U; else 
                                         #line 996 
                                         tmp_2 = 0U;
  #line 996 
  interface->vid = (unsigned short)(tmp_2 + (unsigned int)vid);
  #line 999 
  __dev_uc_unsync(netdev,& fm10k_uc_vlan_unsync);
  #line 1000 
  __dev_mc_unsync(netdev,& fm10k_mc_vlan_unsync);
  #line 1002 
  err_out: 
           #line 1002 
  ;
  #line 1003 
  fm10k_mbx_unlock_2(interface);
  #line 1005 
  return err;
}

#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1012 
  return fm10k_update_vid(netdev,(unsigned short)((int)vid),(_Bool)1);
}

#line 1015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1019 
  return fm10k_update_vid(netdev,(unsigned short)((int)vid),(_Bool)0);
}

#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static u16 fm10k_find_next_vlan(struct fm10k_intfc *interface, u16 vid)
{
  #line 1026 
  unsigned int tmp;
  #line 1024 
  struct fm10k_hw *hw = & interface->hw;
  #line 1025 
  u16 default_vid = hw->mac.default_vid;
  #line 1026 
  if ((int)vid < (int)default_vid) 
                                   #line 1026 
                                   tmp = (unsigned int)default_vid; else 
                                                                    #line 1026 
                                                                    tmp = 4096U;
  #line 1026 
  u16 vid_limit = (unsigned short)tmp;
  #line 1028 
  vid = (u16)((int)vid + 1);
  #line 1028 
  ;
  #line 1028 
  ;
  #line 1028 
  vid = (unsigned short)cif_find_next_bit((unsigned long *)(& interface->active_vlans),
                          (unsigned long)vid_limit,(unsigned long)vid);
  #line 1030 
  return vid;
}

#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_clear_unused_vlans(struct fm10k_intfc *interface)
{
  #line 1035 
  u32 vid;
  #line 1035 
  u32 prev_vid;
  #line 1038 
  vid = 0U;
  #line 1038 
  prev_vid = 0U;
  #line 1038 
  while (prev_vid <= 4095U) {
    #line 1041 
    if (prev_vid == vid) 
                         #line 1042 
                         goto __Cont;
    #line 1045 
    prev_vid = (((vid - prev_vid) + 4294967295U) << 16) + prev_vid;
    #line 1046 
    fm10k_queue_vlan_request(interface,prev_vid,(unsigned char)0,(_Bool)0);
    #line 1038 
    __Cont: 
            #line 1039 
    prev_vid = vid + 1U;
    #line 1040 
    vid = (unsigned int)fm10k_find_next_vlan(interface,
                           (unsigned short)((int)((unsigned short)vid)));
  }
  #line 1048 
  return;
}

#line 1050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int __fm10k_uc_sync(struct net_device *dev, unsigned char *addr, bool sync)
{
  #line 1054 
  u16 vid;
  #line 1055 
  s32 err;
  #line 1053 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1054 
  u16 glort = interface->glort;
  #line 1057 
  if (! is_valid_ether_addr(addr)) 
                                   #line 1058 
                                   return -99;
  #line 1060 
  vid = fm10k_find_next_vlan(interface,(unsigned short)0);
  #line 1060 
  while ((unsigned int)vid <= 4095U) {
    #line 1063 
    err = fm10k_queue_mac_request(interface,(unsigned short)((int)glort),addr,(unsigned short)((int)vid),(_Bool)((bool)((int)sync) != 0));
    #line 1065 
    if (err != 0) 
                  #line 1066 
                  return err;
    #line 1062 
    vid = fm10k_find_next_vlan(interface,(unsigned short)((int)vid));
  }
  #line 1069 
  return 0;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_uc_sync(struct net_device *dev, unsigned char *addr)
{
  #line 1075 
  return __fm10k_uc_sync(dev,addr,(_Bool)1);
}

#line 1078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_uc_unsync(struct net_device *dev, unsigned char *addr)
{
  #line 1081 
  return __fm10k_uc_sync(dev,addr,(_Bool)0);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_set_mac(struct net_device *dev, void *p)
{
  #line 1112 
  int tmp_1;
  #line 1086 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1087 
  struct fm10k_hw *hw = & interface->hw;
  #line 1088 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 1089 
  s32 err = 0;
  #line 1091 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 1092 
                                                      return -99;
  #line 1094 
  if ((dev->flags & 1U) != 0U) {
    #line 1096 
    fm10k_mbx_lock_2(interface);
    #line 1098 
    err = fm10k_uc_sync(dev,(unsigned char *)(& addr->sa_data));
    #line 1099 
    if (err == 0) 
                  #line 1100 
                  fm10k_uc_unsync(dev,(unsigned char *)(& hw->mac.addr));
    #line 1102 
    fm10k_mbx_unlock_2(interface);
  }
  #line 1105 
  if (err == 0) {
    #line 1106 
    ether_addr_copy(dev->dev_addr,(u8 *)(& addr->sa_data));
    #line 1107 
    ether_addr_copy((u8 *)(& hw->mac.addr),(u8 *)(& addr->sa_data));
    #line 1108 
    dev->addr_assign_type = (unsigned char)((unsigned int)dev->addr_assign_type & 254U);
  }
  #line 1112 
  if (err != 0) 
                #line 1112 
                tmp_1 = -11; else 
                                  #line 1112 
                                  tmp_1 = 0;
  #line 1112 
  return tmp_1;
}

#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int __fm10k_mc_sync(struct net_device *dev, unsigned char *addr, bool sync)
{
  #line 1119 
  u16 vid;
  #line 1120 
  s32 err;
  #line 1118 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1119 
  u16 glort = interface->glort;
  #line 1122 
  if (! is_multicast_ether_addr(addr)) 
                                       #line 1123 
                                       return -99;
  #line 1125 
  vid = fm10k_find_next_vlan(interface,(unsigned short)0);
  #line 1125 
  while ((unsigned int)vid <= 4095U) {
    #line 1128 
    err = fm10k_queue_mac_request(interface,(unsigned short)((int)glort),addr,(unsigned short)((int)vid),(_Bool)((bool)((int)sync) != 0));
    #line 1130 
    if (err != 0) 
                  #line 1131 
                  return err;
    #line 1127 
    vid = fm10k_find_next_vlan(interface,(unsigned short)((int)vid));
  }
  #line 1134 
  return 0;
}

#line 1137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_mc_sync(struct net_device *dev, unsigned char *addr)
{
  #line 1140 
  return __fm10k_mc_sync(dev,addr,(_Bool)1);
}

#line 1143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int fm10k_mc_unsync(struct net_device *dev, unsigned char *addr)
{
  #line 1146 
  return __fm10k_mc_sync(dev,addr,(_Bool)0);
}

#line 1149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_set_rx_mode(struct net_device *dev)
{
  #line 1153 
  int xcast_mode;
  #line 1151 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1152 
  struct fm10k_hw *hw = & interface->hw;
  #line 1156 
  if ((dev->flags & 1U) == 0U) 
                               #line 1157 
                               return;
  #line 1160 
  if ((dev->flags & 256U) == 0U) {
    #line 1161 
    int tmp_0;
    #line 1160 
    int tmp_1;
    #line 1160 
    if ((dev->flags & 512U) == 0U) {
      #line 1161 
      if ((dev->flags & 4098U) != 0U) 
                                      #line 1161 
                                      tmp_0 = 1; else 
                                                      #line 1161 
                                                      tmp_0 = 3;
      #line 1160 
      tmp_1 = tmp_0;
    }
    else 
         #line 1160 
         tmp_1 = 0;
    #line 1160 
    xcast_mode = tmp_1;
  }
  else 
       #line 1160 
       xcast_mode = 2;
  #line 1165 
  fm10k_mbx_lock_2(interface);
  #line 1168 
  if (interface->xcast_mode != xcast_mode) {
    #line 1170 
    if (xcast_mode == 2) 
                         #line 1171 
                         fm10k_queue_vlan_request(interface,268369920U,(unsigned char)0,(_Bool)1);
    #line 1175 
    if (interface->xcast_mode == 2) 
                                    #line 1176 
                                    fm10k_clear_unused_vlans(interface);
    #line 1179 
    if ((int)fm10k_host_mbx_ready(interface) != 0) 
                                                   #line 1180 
                                                   (*(hw->mac.ops.update_xcast_mode))(hw,(unsigned short)((int)interface->glort),(unsigned char)((int)((unsigned char)xcast_mode)));
    #line 1184 
    interface->xcast_mode = xcast_mode;
  }
  #line 1188 
  __dev_uc_sync(dev,& fm10k_uc_sync,& fm10k_uc_unsync);
  #line 1189 
  __dev_mc_sync(dev,& fm10k_mc_sync,& fm10k_mc_unsync);
  #line 1191 
  fm10k_mbx_unlock_2(interface);
  #line 1192 
  return;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_restore_rx_state(struct fm10k_intfc *interface)
{
  #line 1199 
  int xcast_mode;
  #line 1199 
  int i;
  #line 1200 
  u16 vid;
  #line 1200 
  u16 glort;
  #line 1196 
  struct fm10k_l2_accel *l2_accel = interface->l2_accel;
  #line 1197 
  struct net_device *netdev = interface->netdev;
  #line 1198 
  struct fm10k_hw *hw = & interface->hw;
  #line 1203 
  glort = interface->glort;
  #line 1206 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 1207 
                                    xcast_mode = 2;
  else 
    #line 1208 
    if ((netdev->flags & 512U) != 0U) 
                                      #line 1209 
                                      xcast_mode = 0;
    else 
      #line 1210 
      if ((netdev->flags & 4098U) != 0U) 
                                         #line 1211 
                                         xcast_mode = 1; else 
                                                              #line 1213 
                                                              xcast_mode = 3;
  #line 1215 
  fm10k_mbx_lock_2(interface);
  #line 1218 
  if ((int)fm10k_host_mbx_ready(interface) != 0) 
                                                 #line 1219 
                                                 (*(hw->mac.ops.update_lport_state))(hw,(unsigned short)((int)glort),(unsigned short)((int)interface->glort_count),(_Bool)1);
  #line 1223 
  fm10k_queue_vlan_request(interface,268369920U,(unsigned char)0,(_Bool)(xcast_mode == 2));
  #line 1227 
  vid = fm10k_find_next_vlan(interface,(unsigned short)0);
  #line 1227 
  while ((unsigned int)vid <= 4095U) {
    #line 1230 
    fm10k_queue_vlan_request(interface,(unsigned int)vid,(unsigned char)0,(_Bool)1);
    #line 1232 
    fm10k_queue_mac_request(interface,(unsigned short)((int)glort),(unsigned char *)(& hw->mac.addr),(unsigned short)((int)vid),(_Bool)1);
    #line 1236 
    if (l2_accel != (struct fm10k_l2_accel *)0) {
      #line 1237 
      i = 0;
      #line 1237 
      while (l2_accel->size > i) {
        {
          #line 1238 
          struct net_device *sdev = l2_accel->macvlan[i];
          #line 1240 
          if (sdev == (struct net_device *)0) 
                                              #line 1241 
                                              goto __Cont;
          #line 1243 
          glort = (unsigned short)((unsigned int)((int)l2_accel->dglort + (int)((unsigned short)i)) + 1U);
          #line 1245 
          fm10k_queue_mac_request(interface,(unsigned short)((int)glort),sdev->dev_addr,(unsigned short)((int)vid),(_Bool)1);
        }
        #line 1237 
        __Cont: 
                #line 1237 
        i ++;
      }
    }
    #line 1229 
    vid = fm10k_find_next_vlan(interface,(unsigned short)((int)vid));
  }
  #line 1255 
  if ((int)fm10k_host_mbx_ready(interface) != 0) 
                                                 #line 1256 
                                                 (*(hw->mac.ops.update_xcast_mode))(hw,(unsigned short)((int)glort),(unsigned char)((int)((unsigned char)xcast_mode)));
  #line 1259 
  __dev_uc_sync(netdev,& fm10k_uc_sync,& fm10k_uc_unsync);
  #line 1260 
  __dev_mc_sync(netdev,& fm10k_mc_sync,& fm10k_mc_unsync);
  #line 1263 
  if (l2_accel != (struct fm10k_l2_accel *)0) {
    #line 1264 
    i = 0;
    #line 1264 
    while (l2_accel->size > i) {
      {
        #line 1265 
        struct net_device *sdev_0 = l2_accel->macvlan[i];
        #line 1267 
        if (sdev_0 == (struct net_device *)0) 
                                              #line 1268 
                                              goto __Cont_0;
        #line 1270 
        glort = (unsigned short)((unsigned int)((int)l2_accel->dglort + (int)((unsigned short)i)) + 1U);
        #line 1272 
        (*(hw->mac.ops.update_xcast_mode))(hw,(unsigned short)((int)glort),(unsigned char)3);
        #line 1274 
        fm10k_queue_mac_request(interface,(unsigned short)((int)glort),sdev_0->dev_addr,(unsigned short)((int)hw->mac.default_vid),(_Bool)1);
      }
      #line 1264 
      __Cont_0: 
                #line 1264 
      i ++;
    }
  }
  #line 1280 
  fm10k_mbx_unlock_2(interface);
  #line 1283 
  interface->xcast_mode = xcast_mode;
  #line 1286 
  fm10k_restore_udp_port_info(interface);
  #line 1287 
  return;
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
void fm10k_reset_rx_state(struct fm10k_intfc *interface)
{
  #line 1291 
  struct net_device *netdev = interface->netdev;
  #line 1292 
  struct fm10k_hw *hw = & interface->hw;
  #line 1295 
  while (1) {
    #line 1295 
    if (! ((int)test_bit(7L,(unsigned long *)(& interface->state)) != 0)) 
      #line 1295 
      break;
    #line 1296 
    usleep_range(1000UL,2000UL);
  }
  #line 1299 
  fm10k_clear_macvlan_queue(interface,(unsigned short)((int)interface->glort),(_Bool)1);
  #line 1301 
  fm10k_mbx_lock_2(interface);
  #line 1306 
  if ((int)fm10k_host_mbx_ready(interface) != 0) 
                                                 #line 1307 
                                                 (*(hw->mac.ops.update_lport_state))(hw,(unsigned short)((int)interface->glort),(unsigned short)((int)interface->glort_count),(_Bool)0);
  #line 1310 
  fm10k_mbx_unlock_2(interface);
  #line 1313 
  interface->xcast_mode = 3;
  #line 1316 
  __dev_uc_unsync(netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 1317 
  __dev_mc_unsync(netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 1318 
  return;
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 1332 
  struct fm10k_ring *ring;
  #line 1333 
  unsigned int start;
  #line 1333 
  unsigned int i;
  #line 1334 
  u64 bytes;
  #line 1334 
  u64 packets;
  #line 1331 
  struct fm10k_intfc *interface = netdev_priv(netdev);
  #line 1336 
  rcu_read_lock();
  #line 1338 
  i = 0U;
  #line 1338 
  while ((unsigned int)interface->num_rx_queues > i) {
    {
      #line 1340 
      union __anonunion___u_7006 __u;
      #line 1339 
      __read_once_size((void *)(& interface->rx_ring[i]),(void *)(& __u.__c),8);
      #line 1339 
      ring = (__u.__val);
      #line 1341 
      if (ring == (struct fm10k_ring *)0) 
                                          #line 1342 
                                          goto __Cont;
      #line 1344 
      while (1) {
        #line 1345 
        start = u64_stats_fetch_begin_irq(& ring->syncp);
        #line 1346 
        packets = ring->stats.packets;
        #line 1347 
        bytes = ring->stats.bytes;
        #line 1348 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->syncp,start) != 0)) 
          #line 1344 
          break;
      }
      #line 1350 
      stats->rx_packets += packets;
      #line 1351 
      stats->rx_bytes += bytes;
    }
    #line 1338 
    __Cont: 
            #line 1338 
    i ++;
  }
  #line 1354 
  i = 0U;
  #line 1354 
  while ((unsigned int)interface->num_tx_queues > i) {
    {
      #line 1356 
      union __anonunion___u_7008 __u_0;
      #line 1355 
      __read_once_size((void *)(& interface->tx_ring[i]),(void *)(& __u_0.__c),8);
      #line 1355 
      ring = (__u_0.__val);
      #line 1357 
      if (ring == (struct fm10k_ring *)0) 
                                          #line 1358 
                                          goto __Cont_0;
      #line 1360 
      while (1) {
        #line 1361 
        start = u64_stats_fetch_begin_irq(& ring->syncp);
        #line 1362 
        packets = ring->stats.packets;
        #line 1363 
        bytes = ring->stats.bytes;
        #line 1364 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->syncp,start) != 0)) 
          #line 1360 
          break;
      }
      #line 1366 
      stats->tx_packets += packets;
      #line 1367 
      stats->tx_bytes += bytes;
    }
    #line 1354 
    __Cont_0: 
              #line 1354 
    i ++;
  }
  #line 1370 
  rcu_read_unlock();
  #line 1373 
  stats->rx_missed_errors = (unsigned long long)netdev->stats.rx_missed_errors;
  #line 1374 
  return;
}

#line 1376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
int fm10k_setup_tc(struct net_device *dev, u8 tc)
{
  #line 1379 
  int err;
  #line 1378 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1382 
  if ((unsigned int)tc != 0U && interface->hw.mac.type != (unsigned int)fm10k_mac_pf) 
    #line 1383 
    return -22;
  #line 1386 
  if ((unsigned int)tc > 8U) 
                             #line 1387 
                             return -22;
  #line 1393 
  if ((int)netif_running(dev) != 0) 
                                    #line 1394 
                                    fm10k_close(dev);
  #line 1396 
  fm10k_mbx_free_irq(interface);
  #line 1398 
  fm10k_clear_queueing_scheme(interface);
  #line 1401 
  netdev_reset_tc(dev);
  #line 1402 
  netdev_set_num_tc(dev,(unsigned char)((int)tc));
  #line 1404 
  err = fm10k_init_queueing_scheme(interface);
  #line 1405 
  if (err != 0) 
                #line 1406 
                goto err_queueing_scheme;
  #line 1408 
  err = fm10k_mbx_request_irq(interface);
  #line 1409 
  if (err != 0) 
                #line 1410 
                goto err_mbx_irq;
  #line 1412 
  if ((int)netif_running(dev) != 0) 
                                    #line 1412 
                                    err = fm10k_open(dev); else 
                                                                #line 1412 
                                                                err = 0;
  #line 1413 
  if (err != 0) 
                #line 1414 
                goto err_open;
  #line 1417 
  cif_set_bit_1(3L,(unsigned long *)(& interface->flags));
  #line 1419 
  return 0;
  #line 1420 
  err_open: 
            #line 1420 
  ;
  #line 1421 
  fm10k_mbx_free_irq(interface);
  #line 1422 
  err_mbx_irq: 
               #line 1422 
  ;
  #line 1423 
  fm10k_clear_queueing_scheme(interface);
  #line 1424 
  err_queueing_scheme: 
                       #line 1424 
  ;
  #line 1425 
  netif_device_detach(dev);
  #line 1427 
  return err;
}

#line 1430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static int __fm10k_setup_tc(struct net_device *dev, enum tc_setup_type type, void *type_data)
{
  #line 1433 
  struct tc_mqprio_qopt *mqprio = (struct tc_mqprio_qopt *)type_data;
  #line 1435 
  if (type != (unsigned int)TC_SETUP_QDISC_MQPRIO) 
                                                   #line 1436 
                                                   return -95;
  #line 1438 
  mqprio->hw = (unsigned char)1U;
  #line 1440 
  return fm10k_setup_tc(dev,(unsigned char)((int)mqprio->num_tc));
}

#line 1443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_assign_l2_accel(struct fm10k_intfc *interface, struct fm10k_l2_accel *l2_accel)
{
  #line 1446 
  int i;
  #line 1448 
  i = 0;
  #line 1448 
  while (interface->num_rx_queues > i) {
    {
      #line 1449 
      struct fm10k_ring *ring = interface->rx_ring[i];
      {
        #line 1451 
        uintptr_t _r_a_p__v = (unsigned long)l2_accel;
        #line 1453 
        ldv_inline_asm();
        {
          #line 1452 
          union __anonunion___u_7012 __u = {.__val = (struct fm10k_l2_accel *)_r_a_p__v};
          #line 1451 
          __write_once_size((void *)(& ring->l2_accel),(void *)(& __u.__c),8);
          #line 1451 
          struct fm10k_l2_accel *tmp_3 = __u.__val;
        }
      }
    }
    #line 1448 
    i ++;
  }
  #line 1454 
  interface->l2_accel = l2_accel;
  #line 1455 
  return;
}

#line 1457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void *fm10k_dfwd_add_station(struct net_device *dev, struct net_device *sdev)
{
  #line 1465 
  int size;
  #line 1465 
  int i;
  #line 1466 
  u16 vid;
  #line 1466 
  u16 glort;
  #line 1460 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1461 
  struct fm10k_l2_accel *l2_accel = interface->l2_accel;
  #line 1462 
  struct fm10k_l2_accel *old_l2_accel = (struct fm10k_l2_accel *)0;
  #line 1463 
  struct fm10k_dglort_cfg dglort = {.glort = (unsigned short)0U, .queue_b = (unsigned short)0, .vsi_b = (unsigned char)0, .idx = (unsigned char)0, .rss_l = (unsigned char)0, .pc_l = (unsigned char)0, .vsi_l = (unsigned char)0, .queue_l = (unsigned char)0, .shared_l = (unsigned char)0, .inner_rss = (unsigned char)0};
  #line 1464 
  struct fm10k_hw *hw = & interface->hw;
  #line 1472 
  if (! macvlan_supports_dest_filter(sdev)) {
    #line 1473 
    return ERR_PTR(-124L);
  }
  #line 1476 
  if (l2_accel == (struct fm10k_l2_accel *)0) {
    #line 1478 
    if ((unsigned int)interface->glort_count <= 6U) {
      #line 1479 
      return ERR_PTR(-16L);
    }
    #line 1481 
    size = 80;
    #line 1482 
    l2_accel = (struct fm10k_l2_accel *)kzalloc_0((unsigned long)size,3264U);
    #line 1483 
    if (l2_accel == (struct fm10k_l2_accel *)0) {
      #line 1484 
      return ERR_PTR(-12L);
    }
    #line 1486 
    l2_accel->size = 7;
    #line 1487 
    l2_accel->dglort = interface->glort;
    #line 1490 
    fm10k_assign_l2_accel(interface,l2_accel);
  }
  else 
    #line 1492 
    if ((unsigned int)l2_accel->count == 63U || (int)l2_accel->count == (int)interface->glort_count + -1) {
      #line 1494 
      return ERR_PTR(-16L);
    }
    else 
      #line 1496 
      if ((int)l2_accel->count == l2_accel->size) {
        #line 1497 
        old_l2_accel = l2_accel;
        #line 1498 
        size = (int)(((unsigned long)(l2_accel->size * 2 + 1) + 3UL) * (unsigned long)8U);
        #line 1500 
        l2_accel = (struct fm10k_l2_accel *)kzalloc_0((unsigned long)size,3264U);
        #line 1501 
        if (l2_accel == (struct fm10k_l2_accel *)0) {
          #line 1502 
          return ERR_PTR(-12L);
        }
        #line 1504 
        memcpy((void *)l2_accel,(void *)old_l2_accel,((unsigned long)old_l2_accel->size + 3UL) * 8UL);
        #line 1508 
        l2_accel->size = old_l2_accel->size * 2 + 1;
        #line 1511 
        fm10k_assign_l2_accel(interface,l2_accel);
        {
          #line 1512 
          struct fm10k_l2_accel *___p = old_l2_accel;
          #line 1512 
          if (___p != (struct fm10k_l2_accel *)0) 
                                                  #line 1512 
                                                  kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))8);
        }
      }
  #line 1516 
  i = 0;
  #line 1516 
  while (l2_accel->size > i) {
    #line 1517 
    if (l2_accel->macvlan[i] == (struct net_device *)0) 
                                                        #line 1518 
                                                        break;
    #line 1516 
    i ++;
  }
  #line 1522 
  l2_accel->macvlan[i] = sdev;
  #line 1523 
  l2_accel->count = (u16)((int)l2_accel->count + 1);
  #line 1526 
  dglort.idx = (unsigned char)7U;
  #line 1527 
  dglort.inner_rss = (unsigned char)1U;
  #line 1528 
  dglort.rss_l = (unsigned char)fls((unsigned int)interface->ring_feature[0].mask);
  #line 1529 
  dglort.pc_l = (unsigned char)fls((unsigned int)interface->ring_feature[1].mask);
  #line 1530 
  dglort.glort = interface->glort;
  #line 1531 
  dglort.shared_l = (unsigned char)fls((unsigned int)l2_accel->size);
  #line 1532 
  (*(hw->mac.ops.configure_dglort_map))(hw,& dglort);
  #line 1535 
  fm10k_mbx_lock_2(interface);
  #line 1537 
  glort = (unsigned short)((unsigned int)((int)l2_accel->dglort + (int)((unsigned short)i)) + 1U);
  #line 1539 
  if ((int)fm10k_host_mbx_ready(interface) != 0) 
                                                 #line 1540 
                                                 (*(hw->mac.ops.update_xcast_mode))(hw,(unsigned short)((int)glort),(unsigned char)3);
  #line 1543 
  fm10k_queue_mac_request(interface,(unsigned short)((int)glort),sdev->dev_addr,(unsigned short)((int)hw->mac.default_vid),(_Bool)1);
  #line 1546 
  vid = fm10k_find_next_vlan(interface,(unsigned short)0);
  #line 1546 
  while ((unsigned int)vid <= 4095U) {
    #line 1549 
    fm10k_queue_mac_request(interface,(unsigned short)((int)glort),sdev->dev_addr,(unsigned short)((int)vid),(_Bool)1);
    #line 1548 
    vid = fm10k_find_next_vlan(interface,(unsigned short)((int)vid));
  }
  #line 1552 
  fm10k_mbx_unlock_2(interface);
  #line 1554 
  return (void *)sdev;
}

#line 1557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static void fm10k_dfwd_del_station(struct net_device *dev, void *priv)
{
  #line 1561 
  union __anonunion___u_7014 __u;
  #line 1564 
  u16 vid;
  #line 1564 
  u16 glort;
  #line 1565 
  int i;
  #line 1559 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 1560 
  __read_once_size((void *)(& interface->l2_accel),(void *)(& __u.__c),8);
  #line 1560 
  struct fm10k_l2_accel *l2_accel = (__u.__val);
  #line 1561 
  struct fm10k_dglort_cfg dglort = {.glort = (unsigned short)0U, .queue_b = (unsigned short)0, .vsi_b = (unsigned char)0, .idx = (unsigned char)0, .rss_l = (unsigned char)0, .pc_l = (unsigned char)0, .vsi_l = (unsigned char)0, .queue_l = (unsigned char)0, .shared_l = (unsigned char)0, .inner_rss = (unsigned char)0};
  #line 1562 
  struct fm10k_hw *hw = & interface->hw;
  #line 1563 
  struct net_device *sdev = (struct net_device *)priv;
  #line 1567 
  if (l2_accel == (struct fm10k_l2_accel *)0) 
                                              #line 1568 
                                              return;
  #line 1571 
  i = 0;
  #line 1571 
  while (l2_accel->size > i) {
    #line 1572 
    if (l2_accel->macvlan[i] == sdev) 
                                      #line 1573 
                                      break;
    #line 1571 
    i ++;
  }
  #line 1577 
  if (l2_accel->size == i) 
                           #line 1578 
                           return;
  #line 1581 
  fm10k_mbx_lock_2(interface);
  #line 1583 
  glort = (unsigned short)((unsigned int)((int)l2_accel->dglort + (int)((unsigned short)i)) + 1U);
  #line 1585 
  if ((int)fm10k_host_mbx_ready(interface) != 0) 
                                                 #line 1586 
                                                 (*(hw->mac.ops.update_xcast_mode))(hw,(unsigned short)((int)glort),(unsigned char)3);
  #line 1589 
  fm10k_queue_mac_request(interface,(unsigned short)((int)glort),sdev->dev_addr,(unsigned short)((int)hw->mac.default_vid),(_Bool)0);
  #line 1592 
  vid = fm10k_find_next_vlan(interface,(unsigned short)0);
  #line 1592 
  while ((unsigned int)vid <= 4095U) {
    #line 1595 
    fm10k_queue_mac_request(interface,(unsigned short)((int)glort),sdev->dev_addr,(unsigned short)((int)vid),(_Bool)0);
    #line 1594 
    vid = fm10k_find_next_vlan(interface,(unsigned short)((int)vid));
  }
  #line 1598 
  fm10k_mbx_unlock_2(interface);
  #line 1601 
  l2_accel->macvlan[i] = (struct net_device *)0;
  #line 1602 
  l2_accel->count = (u16)((int)l2_accel->count - 1);
  #line 1605 
  dglort.idx = (unsigned char)7U;
  #line 1606 
  dglort.inner_rss = (unsigned char)1U;
  #line 1607 
  dglort.rss_l = (unsigned char)fls((unsigned int)interface->ring_feature[0].mask);
  #line 1608 
  dglort.pc_l = (unsigned char)fls((unsigned int)interface->ring_feature[1].mask);
  #line 1609 
  dglort.glort = interface->glort;
  #line 1610 
  dglort.shared_l = (unsigned char)fls((unsigned int)l2_accel->size);
  #line 1611 
  (*(hw->mac.ops.configure_dglort_map))(hw,& dglort);
  #line 1614 
  if ((unsigned int)l2_accel->count == 0U) {
    #line 1615 
    fm10k_assign_l2_accel(interface,(struct fm10k_l2_accel *)0);
    {
      #line 1616 
      struct fm10k_l2_accel *___p = l2_accel;
      #line 1616 
      if (___p != (struct fm10k_l2_accel *)0) 
                                              #line 1616 
                                              kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))8);
    }
  }
  #line 1620 
  return;
}

#line 1620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static netdev_features_t fm10k_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 1624 
  if ((unsigned int)skb->encapsulation == 0U) 
                                              #line 1625 
                                              return features;
  else {
    #line 1624 
    if ((unsigned int)fm10k_tx_encap_offload(skb) != 0U) 
                                                         #line 1625 
                                                         return features;
  }
  #line 1627 
  return features & 18446744056529747941ULL;
}

#line 1630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
static struct net_device_ops fm10k_netdev_ops = {.ndo_open = & fm10k_open, .ndo_stop = & fm10k_close, .ndo_start_xmit = & fm10k_xmit_frame, .ndo_features_check = & fm10k_features_check, .ndo_set_rx_mode = & fm10k_set_rx_mode, .ndo_set_mac_address = & fm10k_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_tx_timeout = & fm10k_tx_timeout, .ndo_get_stats64 = & fm10k_get_stats64, .ndo_vlan_rx_add_vid = & fm10k_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & fm10k_vlan_rx_kill_vid, .ndo_set_vf_mac = & fm10k_ndo_set_vf_mac, .ndo_set_vf_vlan = & fm10k_ndo_set_vf_vlan, .ndo_set_vf_rate = & fm10k_ndo_set_vf_bw, .ndo_get_vf_config = & fm10k_ndo_get_vf_config, .ndo_get_vf_stats = & fm10k_ndo_get_vf_stats, .ndo_setup_tc = & __fm10k_setup_tc, .ndo_udp_tunnel_add = & fm10k_udp_tunnel_add, .ndo_udp_tunnel_del = & fm10k_udp_tunnel_del, .ndo_dfwd_add_station = & fm10k_dfwd_add_station, .ndo_dfwd_del_station = & fm10k_dfwd_del_station};
#line 1656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c"
struct net_device *fm10k_alloc_netdev(struct fm10k_info *info)
{
  #line 1658 
  netdev_features_t hw_features;
  #line 1659 
  struct fm10k_intfc *interface;
  #line 1660 
  struct net_device *dev;
  #line 1662 
  dev = cif_alloc_etherdev_mqs(19200,128U,128U);
  #line 1663 
  if (dev == (struct net_device *)0) 
                                     #line 1664 
                                     return (struct net_device *)0;
  #line 1667 
  dev->netdev_ops = & fm10k_netdev_ops;
  #line 1668 
  fm10k_set_ethtool_ops(dev);
  #line 1671 
  interface = (struct fm10k_intfc *)netdev_priv(dev);
  #line 1672 
  interface->msg_enable = (unsigned short)7U;
  #line 1675 
  dev->features |= 824635097107ULL;
  #line 1685 
  if (info->mac == (unsigned int)fm10k_mac_pf) {
    #line 1686 
    dev->hw_enc_features = 68485139ULL;
    #line 1694 
    dev->features |= 67108864ULL;
  }
  #line 1698 
  hw_features = dev->features;
  #line 1701 
  hw_features |= 140737488355328ULL;
  #line 1704 
  dev->vlan_features |= dev->features;
  #line 1710 
  dev->features |= 896ULL;
  #line 1714 
  dev->priv_flags |= 4096U;
  #line 1716 
  dev->hw_features |= hw_features;
  #line 1719 
  dev->min_mtu = 68U;
  #line 1720 
  dev->max_mtu = 15342U;
  #line 1722 
  return dev;
}

#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
#line 94 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
int emg_wrapper___fm10k_setup_tc(struct net_device *arg0, enum tc_setup_type arg1, void *arg2)
{
  #line 110 
  return __fm10k_setup_tc(arg0,arg1,arg2);
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
void *emg_wrapper_fm10k_dfwd_add_station(struct net_device *arg0, struct net_device *arg1)
{
  #line 115 
  return fm10k_dfwd_add_station(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
void emg_wrapper_fm10k_dfwd_del_station(struct net_device *arg0, void *arg1)
{
  #line 120 
  fm10k_dfwd_del_station(arg0,arg1);
  #line 121 
  return;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
unsigned long long emg_wrapper_fm10k_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 125 
  return fm10k_features_check(arg0,arg1,arg2);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
void emg_wrapper_fm10k_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 130 
  fm10k_get_stats64(arg0,arg1);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
int emg_wrapper_fm10k_set_mac(struct net_device *arg0, void *arg1)
{
  #line 135 
  return fm10k_set_mac(arg0,arg1);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
void emg_wrapper_fm10k_set_rx_mode(struct net_device *arg0)
{
  #line 140 
  fm10k_set_rx_mode(arg0);
  #line 141 
  return;
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
void emg_wrapper_fm10k_tx_timeout(struct net_device *arg0)
{
  #line 145 
  fm10k_tx_timeout(arg0);
  #line 146 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
void emg_wrapper_fm10k_udp_tunnel_add(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 150 
  fm10k_udp_tunnel_add(arg0,arg1);
  #line 151 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
void emg_wrapper_fm10k_udp_tunnel_del(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 155 
  fm10k_udp_tunnel_del(arg0,arg1);
  #line 156 
  return;
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
int emg_wrapper_fm10k_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 160 
  return fm10k_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
int emg_wrapper_fm10k_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 165 
  return fm10k_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                             (unsigned short)((int)arg2));
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
enum netdev_tx emg_wrapper_fm10k_xmit_frame(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 170 
  return fm10k_xmit_frame(arg0,arg1);
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 185 
  return ldv_find_next_bit(addr,size,offset);
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 192 
  ldv_set_bit(nr,addr);
  #line 193 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 199 
  ldv_clear_bit(nr,addr);
  #line 200 
  return;
}

#line 273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *ERR_PTR(long error)
{
  #line 276 
  return ldv_err_ptr(error);
}

#line 470  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 473 
  return ldv_kmalloc(size,flags);
}

#line 505  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 508 
  return ldv_kzalloc(size,flags);
}

#line 735  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_spin_lock_mbx_lock_of_fm10k_intfc_2(spinlock_t *lock)
{
  #line 738 
  ldv_spin_model_lock((char *)"mbx_lock_of_fm10k_intfc");
  #line 740 
  spin_lock_2(lock);
  #line 741 
  return;
}

#line 744  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_spin_unlock_mbx_lock_of_fm10k_intfc_2(spinlock_t *lock)
{
  #line 747 
  ldv_spin_model_unlock((char *)"mbx_lock_of_fm10k_intfc");
  #line 749 
  spin_unlock_2(lock);
  #line 750 
  return;
}

#line 923  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 926 
  return ldv_vzalloc(size);
}

#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 933 
  ldv_vfree(addr);
  #line 934 
  return;
}

#line 937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif___ldv_spin_lock_macvlan_lock_of_fm10k_intfc_0(spinlock_t *lock)
{
  #line 940 
  ldv_spin_model_lock((char *)"macvlan_lock_of_fm10k_intfc");
  #line 942 
  __ldv_spin_lock(lock);
  #line 943 
  return;
}

#line 946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static void cif_spin_unlock_irqrestore_macvlan_lock_of_fm10k_intfc_0(spinlock_t *lock, unsigned long flags)
{
  #line 949 
  ldv_spin_model_unlock((char *)"macvlan_lock_of_fm10k_intfc");
  #line 951 
  spin_unlock_irqrestore_0(lock,flags);
  #line 952 
  return;
}

#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_netdev.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 959 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_7081 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 237 
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void atomic_inc(atomic_t *v);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus_0(void)
{
  #line 112 
  return (unsigned int)atomic_read_1(& __num_online_cpus);
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 222 
int rcu_read_lock_bh_held(void);
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_7163 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_129_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static int PagePoisoned(struct page *page)
{
  #line 194 
  return page->flags == 18446744073709551615UL;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    int pfo_ret___2;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_count(struct page *page)
{
  #line 72 
  return atomic_read_1(& compound_head(page)->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int page_to_nid(struct page *page)
{
  #line 1085 
  struct page *p = page;
  {
    #line 1087 
    if ((long)(PagePoisoned(p) != 0) != 0L) {
      #line 1087 
      dump_page(p,(char *)"VM_BUG_ON_PAGE(");
      #line 1088 
      ldv_inline_asm();
      #line 1089 
      ldv_inline_asm();
      #line 1090 
      ldv_inline_asm();
      #line 1087 
      ;
    }
  }
  #line 1087 
  ;
  #line 1087 
  return (int)(p->flags >> 54UL) & 1023;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_129_31.index == 18446744073709551615UL);
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 427  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 448  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 602 
  dma_sync_single_for_cpu(dev,addr + (unsigned long long)offset,size,dir);
  #line 603 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 609 
  dma_sync_single_for_device(dev,addr + (unsigned long long)offset,size,dir);
  #line 610 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_mac_header(struct sk_buff *skb)
{
  #line 2493 
  return skb->head + (unsigned long)skb->mac_header;
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2827 
#line 2827 
void napi_consume_skb(struct sk_buff *, int);
#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  #line 2859 
  return __dev_alloc_pages(10784U,order);
}

#line 2875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_page(void)
{
  #line 2877 
  return dev_alloc_pages(0U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_7552 __u;
  #line 93 
  union __anonunion___u_7554 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 2111 
#line 2111 
int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue_0(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_2(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_2(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_2(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_2(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3408 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3410 
  netif_tx_start_queue_0(txq);
  #line 3411 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue_0(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 4373 
#line 4373 
int skb_checksum_help(struct sk_buff *);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_rxfh_configured(struct net_device *dev)
{
  #line 4681 
  return (_Bool)((dev->priv_flags & 8388608U) != 0U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 31 
u32 eth_get_headlen(struct net_device *, void *, unsigned int);
#line 32 
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff *skb)
{
  #line 41 
  return (struct tcphdr *)skb_inner_transport_header(skb);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff *skb)
{
  #line 46 
  ;
  #line 46 
  return (unsigned int)((int)inner_tcp_hdr(skb)->doff * 4);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff *skb)
{
  #line 23 
  return (struct udphdr *)skb_transport_header(skb);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *inner_ipv6_hdr(struct sk_buff *skb)
{
  #line 99 
  return (struct ipv6hdr *)skb_inner_network_header(skb);
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1057 
int ipv6_skip_exthdr(struct sk_buff *, int, u8 *, __be16 *);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *inner_ip_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct iphdr *)skb_inner_network_header(skb);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
__inline static unsigned int ip_hdrlen(struct sk_buff *skb)
{
  #line 67 
  ;
  #line 67 
  return (unsigned int)((int)ip_hdr(skb)->ihl * 4);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_macvlan.h"
__inline static void macvlan_count_rx(struct macvlan_dev *vlan, unsigned int len, bool success, bool multicast)
{
  #line 42 
  if ((long)((int)success != 0) != 0L) {
    #line 45 
    unsigned long tcp_ptr__;
    #line 43 
    struct vlan_pcpu_stats *pcpu_stats;
    {
      #line 45 
      void *__vpp_verify = (void *)0;
      #line 45 
      void *tmp = __vpp_verify;
    }
    #line 46 
    ldv_inline_asm();
    #line 45 
    pcpu_stats = ((struct vlan_pcpu_stats *)tcp_ptr__);
    #line 46 
    u64_stats_init(& pcpu_stats->syncp);
    #line 47 
    (pcpu_stats->rx_packets) ++;
    #line 48 
    pcpu_stats->rx_bytes += (unsigned long long)len;
    #line 49 
    if ((int)multicast != 0) 
                             #line 50 
                             (pcpu_stats->rx_multicast) ++;
    #line 51 
    u64_stats_init(& pcpu_stats->syncp);
  }
  else {
    {
      #line 53 
      void *__vpp_verify_0 = (void *)0;
      #line 53 
      void *tmp_3 = __vpp_verify_0;
    }
    #line 53 
    switch (4UL) {
      #line 53 
      case (unsigned long)1: 
                             #line 53 
      ;
      {
        #line 53 
        int pao_ID__ = 1;
        #line 53 
        switch (4UL) {
          #line 53 
          case (unsigned long)1: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)2: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)4: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)8: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          default: 
                   #line 53 
          ;
          #line 53 
          __bad_percpu_size();
        }
      }
      #line 53 
      break;
      #line 53 
      case (unsigned long)2: 
                             #line 53 
      ;
      {
        #line 53 
        int pao_ID___0 = 1;
        #line 53 
        switch (4UL) {
          #line 53 
          case (unsigned long)1: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)2: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)4: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)8: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          default: 
                   #line 53 
          ;
          #line 53 
          __bad_percpu_size();
        }
      }
      #line 53 
      break;
      #line 53 
      case (unsigned long)4: 
                             #line 53 
      ;
      {
        #line 53 
        int pao_ID___1 = 1;
        #line 53 
        switch (4UL) {
          #line 53 
          case (unsigned long)1: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)2: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)4: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)8: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          default: 
                   #line 53 
          ;
          #line 53 
          __bad_percpu_size();
        }
      }
      #line 53 
      break;
      #line 53 
      case (unsigned long)8: 
                             #line 53 
      ;
      {
        #line 53 
        int pao_ID___2 = 1;
        #line 53 
        switch (4UL) {
          #line 53 
          case (unsigned long)1: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)2: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)4: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          case (unsigned long)8: 
                                 #line 53 
          ;
          #line 55 
          ldv_inline_asm();
          #line 53 
          break;
          #line 53 
          default: 
                   #line 53 
          ;
          #line 53 
          __bad_percpu_size();
        }
      }
      #line 53 
      break;
      #line 53 
      default: 
               #line 53 
      ;
      #line 53 
      __bad_size_call_parameter();
      #line 53 
      break;
    }
  }
  #line 56 
  return;
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
struct workqueue_struct *fm10k_workqueue;
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k.h"
__inline static __le32 fm10k_test_staterr(union fm10k_rx_desc *rx_desc, u32 stat_err_bits)
{
  #line 418 
  return rx_desc->d.staterr & stat_err_bits;
}

#line 551 
#line 551 
void fm10k_dbg_q_vector_init(struct fm10k_q_vector *q_vector);
#line 552 
#line 552 
void fm10k_dbg_q_vector_exit(struct fm10k_q_vector *q_vector);
#line 555 
#line 555 
void fm10k_dbg_init(void);
#line 556 
#line 556 
void fm10k_dbg_exit(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
char fm10k_driver_version[9U] = {(char)'0', (char)'.', (char)'2', (char)'7', (char)'.', (char)'1', (char)'-', (char)'k'};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
char fm10k_driver_name[6U] = {(char)'f', (char)'m', (char)'1', (char)'0', (char)'k'};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static char fm10k_driver_string[47U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'S', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)' ', (char)'H', (char)'o', (char)'s', (char)'t', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'f', (char)'a', (char)'c', (char)'e', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r'};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static char fm10k_copyright[44U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'1', (char)'3', (char)' ', (char)'-', (char)' ', (char)'2', (char)'0', (char)'1', (char)'9', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.'};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int fm10k_init_module(void)
{
  #line 38 
  printk((char *)"\001",(char *)(& fm10k_driver_string),(char *)(& fm10k_driver_version));
  #line 39 
  printk((char *)"\001",(char *)(& fm10k_copyright));
  #line 42 
  fm10k_workqueue = alloc_workqueue((char *)"%s",8U,0,(char *)(& fm10k_driver_name));
  #line 44 
  if (fm10k_workqueue == (struct workqueue_struct *)0) 
                                                       #line 45 
                                                       return -12;
  #line 47 
  fm10k_dbg_init();
  #line 49 
  return fm10k_register_pci_driver();
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_exit_module(void)
{
  #line 61 
  fm10k_unregister_pci_driver();
  #line 63 
  fm10k_dbg_exit();
  #line 66 
  destroy_workqueue(fm10k_workqueue);
  #line 67 
  return;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_alloc_mapped_page(struct fm10k_ring *rx_ring, struct fm10k_rx_buffer *bi)
{
  #line 74 
  dma_addr_t dma;
  #line 73 
  struct page *page = bi->page;
  #line 77 
  if ((long)(page != (struct page *)0) != 0L) 
                                              #line 78 
                                              return (_Bool)1;
  #line 81 
  page = dev_alloc_page();
  #line 82 
  if ((long)(page == (struct page *)0) != 0L) {
    #line 83 
    (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.alloc_failed) ++;
    #line 84 
    return (_Bool)0;
  }
  #line 88 
  dma = dma_map_page_attrs(rx_ring->dev,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 93 
  if (dma_mapping_error(rx_ring->dev,dma) != 0) {
    #line 94 
    __free_pages(page,0U);
    #line 96 
    (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.alloc_failed) ++;
    #line 97 
    return (_Bool)0;
  }
  #line 100 
  bi->dma = dma;
  #line 101 
  bi->page = page;
  #line 102 
  bi->page_offset = 0U;
  #line 104 
  return (_Bool)1;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
void fm10k_alloc_rx_buffers(struct fm10k_ring *rx_ring, u16 cleaned_count)
{
  #line 114 
  union fm10k_rx_desc *rx_desc;
  #line 115 
  struct fm10k_rx_buffer *bi;
  #line 116 
  u16 i = rx_ring->next_to_use;
  #line 119 
  if ((unsigned int)cleaned_count == 0U) 
                                         #line 120 
                                         return;
  #line 122 
  rx_desc = (union fm10k_rx_desc *)rx_ring->desc + (unsigned long)i;
  #line 123 
  bi = rx_ring->__anonCompField_fm10k_ring_161.rx_buffer + (unsigned long)i;
  #line 124 
  i = (unsigned short)((int)i - (int)rx_ring->count);
  #line 126 
  while (1) {
    {
      #line 127 
      if (! fm10k_alloc_mapped_page(rx_ring,bi)) 
                                                 #line 128 
                                                 break;
      #line 133 
      rx_desc->q.pkt_addr = bi->dma + (unsigned long long)bi->page_offset;
      #line 135 
      rx_desc ++;
      #line 136 
      bi ++;
      #line 137 
      i = (u16)((int)i + 1);
      #line 138 
      if ((long)((unsigned int)i == 0U) != 0L) {
        #line 139 
        rx_desc = (union fm10k_rx_desc *)rx_ring->desc;
        #line 140 
        bi = rx_ring->__anonCompField_fm10k_ring_161.rx_buffer;
        #line 141 
        i = (unsigned short)((int)i - (int)rx_ring->count);
      }
      #line 145 
      rx_desc->d.staterr = 0U;
      #line 147 
      cleaned_count = (u16)((int)cleaned_count - 1);
    }
    #line 148 
    if (! ((unsigned int)cleaned_count != 0U)) 
                                               #line 126 
                                               break;
  }
  #line 150 
  i = (unsigned short)((int)rx_ring->count + (int)i);
  #line 152 
  if ((int)rx_ring->next_to_use != (int)i) {
    #line 154 
    rx_ring->next_to_use = i;
    #line 157 
    rx_ring->next_to_alloc = i;
    #line 158 
    ldv_inline_asm();
    #line 167 
    writel((unsigned int)i,(void *)rx_ring->tail);
  }
  #line 169 
  return;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_reuse_rx_page(struct fm10k_ring *rx_ring, struct fm10k_rx_buffer *old_buff)
{
  #line 181 
  struct fm10k_rx_buffer *new_buff;
  #line 182 
  u16 nta = rx_ring->next_to_alloc;
  #line 184 
  new_buff = rx_ring->__anonCompField_fm10k_ring_161.rx_buffer + (unsigned long)nta;
  #line 187 
  nta = (u16)((int)nta + 1);
  #line 188 
  if ((int)rx_ring->count > (int)nta) 
                                      #line 188 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    #line 188 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  #line 191 
  *new_buff = *old_buff;
  #line 194 
  dma_sync_single_range_for_device(rx_ring->dev,old_buff->dma,(unsigned long)old_buff->page_offset,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 196 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
__inline static bool fm10k_page_is_reserved(struct page *page)
{
  #line 202 
  int tmp_2;
  #line 202 
  if (page_to_nid(page) != numa_mem_id()) 
                                          #line 202 
                                          tmp_2 = 1;
  else {
    #line 202 
    if ((int)page_is_pfmemalloc(page) != 0) 
                                            #line 202 
                                            tmp_2 = 1; else 
                                                            #line 202 
                                                            tmp_2 = 0;
  }
  #line 202 
  return (_Bool)(tmp_2 != 0);
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_can_reuse_rx_page(struct fm10k_rx_buffer *rx_buffer, struct page *page, unsigned int truesize)
{
  #line 210 
  if ((long)((int)fm10k_page_is_reserved(page) != 0) != 0L) 
                                                            #line 211 
                                                            return (_Bool)0;
  #line 215 
  if ((long)(page_count(page) != 1) != 0L) 
                                           #line 216 
                                           return (_Bool)0;
  #line 219 
  rx_buffer->page_offset ^= 2048U;
  #line 231 
  page_ref_inc(page);
  #line 233 
  return (_Bool)1;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_add_rx_frag(struct fm10k_rx_buffer *rx_buffer, unsigned int size, union fm10k_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 263 
  unsigned int pull_len;
  #line 256 
  struct page *page = rx_buffer->page;
  #line 257 
  unsigned char *va = (unsigned char *)(lowmem_page_address(page) + (unsigned long)rx_buffer->page_offset);
  #line 259 
  unsigned int truesize = 2048U;
  #line 265 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) 
                                                     #line 266 
                                                     goto add_tail_frag;
  #line 268 
  if ((long)(size <= 256U) != 0L) {
    #line 272 
    int tmp_3;
    #line 269 
    ;
    #line 269 
    ;
    #line 269 
    memcpy(__skb_put(skb,size),(void *)va,(unsigned long)(size + 7U) & 4294967288UL);
    #line 272 
    if (fm10k_page_is_reserved(page)) 
                                      #line 272 
                                      tmp_3 = 0; else 
                                                      #line 272 
                                                      tmp_3 = 1;
    #line 272 
    if ((long)tmp_3 != 0L) 
                           #line 273 
                           return (_Bool)1;
    #line 276 
    __free_pages(page,0U);
    #line 277 
    return (_Bool)0;
  }
  #line 283 
  pull_len = eth_get_headlen(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev,(void *)va,256U);
  #line 286 
  ;
  #line 286 
  ;
  #line 286 
  memcpy(__skb_put(skb,pull_len),(void *)va,(unsigned long)(pull_len + 7U) & 4294967288UL);
  #line 289 
  va += (unsigned long)pull_len;
  #line 290 
  size -= pull_len;
  #line 292 
  add_tail_frag: 
                 #line 292 
  ;
  #line 293 
  ;
  #line 293 
  ;
  #line 293 
  ;
  #line 293 
  ;
  #line 293 
  ;
  #line 293 
  skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,page,(int)((long)va) & 4095,(int)size,truesize);
  #line 296 
  return fm10k_can_reuse_rx_page(rx_buffer,page,truesize);
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static struct sk_buff *fm10k_fetch_rx_buffer(struct fm10k_ring *rx_ring, union fm10k_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 304 
  struct fm10k_rx_buffer *rx_buffer;
  #line 305 
  struct page *page;
  #line 303 
  unsigned int size = (unsigned int)rx_desc->w.length;
  #line 307 
  rx_buffer = rx_ring->__anonCompField_fm10k_ring_161.rx_buffer + (unsigned long)rx_ring->next_to_clean;
  #line 308 
  page = rx_buffer->page;
  #line 309 
  prefetchw((void *)page);
  #line 311 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 312 
    void *page_addr = lowmem_page_address(page) + (unsigned long)rx_buffer->page_offset;
    #line 316 
    __builtin_prefetch((void const *)page_addr);
    #line 318 
    __builtin_prefetch((void const *)((void *)((u8 *)page_addr + 64U)));
    #line 322 
    skb = napi_alloc_skb(& (rx_ring->q_vector)->napi,256U);
    #line 324 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      #line 325 
      (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.alloc_failed) ++;
      #line 326 
      return (struct sk_buff *)0;
    }
    #line 333 
    prefetchw((void *)skb->data);
  }
  #line 337 
  dma_sync_single_range_for_cpu(rx_ring->dev,rx_buffer->dma,(unsigned long)rx_buffer->page_offset,(unsigned long)size,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 344 
  if ((int)fm10k_add_rx_frag(rx_buffer,size,rx_desc,skb) != 0) 
                                                               #line 346 
                                                               fm10k_reuse_rx_page(rx_ring,rx_buffer); else 
                                                                    #line 349 
                                                                    dma_unmap_page_attrs(rx_ring->dev,rx_buffer->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 354 
  rx_buffer->page = (struct page *)0;
  #line 356 
  return skb;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
__inline static void fm10k_rx_checksum(struct fm10k_ring *ring, union fm10k_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 363 
  skb_checksum_none_assert(skb);
  #line 366 
  if (((ring->netdev)->features & 549755813888ULL) == 0ULL) 
                                                            #line 367 
                                                            return;
  #line 370 
  if (fm10k_test_staterr(rx_desc,55296U) != 0U) {
    #line 375 
    (ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.csum_err) ++;
    #line 376 
    return;
  }
  #line 380 
  if (fm10k_test_staterr(rx_desc,64U) != 0U) 
                                             #line 381 
                                             skb->encapsulation = (unsigned char)1U;
  else {
    #line 382 
    if (fm10k_test_staterr(rx_desc,16U) == 0U) 
                                               #line 383 
                                               return;
  }
  #line 385 
  skb->ip_summed = (unsigned char)1U;
  #line 387 
  (ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.csum_good) ++;
  #line 388 
  return;
}

#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
__inline static void fm10k_rx_hash(struct fm10k_ring *ring, union fm10k_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 400 
  u16 rss_type;
  #line 409 
  int tmp;
  #line 402 
  if (((ring->netdev)->features & 274877906944ULL) == 0ULL) 
                                                            #line 403 
                                                            return;
  #line 405 
  rss_type = (unsigned short)((unsigned int)rx_desc->w.pkt_info & 15U);
  #line 406 
  if ((unsigned int)rss_type == 0U) 
                                    #line 407 
                                    return;
  #line 409 
  if (((394UL >> (int)rss_type) & 1UL) != 0UL) 
                                               #line 409 
                                               tmp = PKT_HASH_TYPE_L4; else 
                                                                    #line 409 
                                                                    tmp = PKT_HASH_TYPE_L3;
  #line 409 
  ;
  #line 409 
  ;
  #line 409 
  skb_set_hash(skb,rx_desc->d.rss,(enum pkt_hash_types)tmp);
  #line 412 
  return;
}

#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_type_trans(struct fm10k_ring *rx_ring, union fm10k_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 419 
  struct fm10k_l2_accel *________p1;
  #line 418 
  struct net_device *dev = rx_ring->netdev;
  {
    #line 420 
    union __anonunion___u_8065 __u;
    #line 419 
    __read_once_size((void *)(& rx_ring->l2_accel),(void *)(& __u.__c),8);
    #line 419 
    ________p1 = (__u.__val);
    {
      #line 419 
      bool __warned;
      #line 419 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 419 
        if (! __warned) {
          #line 419 
          if (rcu_read_lock_bh_held() == 0) {
            #line 419 
            __warned = (_Bool)1;
            #line 419 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c",419,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 419 
  struct fm10k_l2_accel *l2_accel = ________p1;
  #line 422 
  if (l2_accel != (struct fm10k_l2_accel *)0) {
    #line 423 
    u16 idx = (unsigned short)((unsigned int)((struct fm10k_cb *)(& skb->cb))->fi.w.dglort + 65535U);
    #line 425 
    idx = (unsigned short)((int)idx - (int)l2_accel->dglort);
    #line 426 
    if ((int)idx < l2_accel->size && l2_accel->macvlan[(int)idx] != (struct net_device *)0) 
      #line 427 
      dev = l2_accel->macvlan[(int)idx]; else 
                                              #line 429 
                                              l2_accel = (struct fm10k_l2_accel *)0;
  }
  #line 433 
  if (l2_accel == (struct fm10k_l2_accel *)0) 
                                              #line 434 
                                              skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
  else {
    #line 436 
    ;
    #line 436 
    macvlan_count_rx((struct macvlan_dev *)netdev_priv(dev),skb->len + 14U,(_Bool)1,(_Bool)0);
  }
  #line 439 
  skb->protocol = eth_type_trans(skb,dev);
  #line 440 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static unsigned int fm10k_process_skb_fields(struct fm10k_ring *rx_ring, union fm10k_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 456 
  unsigned int len = skb->len;
  #line 458 
  fm10k_rx_hash(rx_ring,rx_desc,skb);
  #line 460 
  fm10k_rx_checksum(rx_ring,rx_desc,skb);
  #line 462 
  ((struct fm10k_cb *)(& skb->cb))->__anonCompField_fm10k_cb_205.tstamp = rx_desc->q.timestamp;
  #line 464 
  ((struct fm10k_cb *)(& skb->cb))->fi.w.vlan = rx_desc->w.vlan;
  #line 466 
  ((struct fm10k_cb *)(& skb->cb))->fi.d.glort = rx_desc->d.glort;
  #line 468 
  if ((unsigned int)rx_desc->w.vlan != 0U) {
    #line 469 
    u16 vid = rx_desc->w.vlan;
    #line 471 
    if (((int)vid & 4095) != (int)rx_ring->vid) 
                                                #line 472 
                                                __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
    else 
      #line 473 
      if (((int)vid & 57344) != 0) 
                                   #line 474 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid & 57344));
  }
  #line 478 
  fm10k_type_trans(rx_ring,rx_desc,skb);
  #line 480 
  return len;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_is_non_eop(struct fm10k_ring *rx_ring, union fm10k_rx_desc *rx_desc)
{
  #line 496 
  u32 ntc = (unsigned int)((int)rx_ring->next_to_clean + 1);
  #line 499 
  if ((unsigned int)rx_ring->count > ntc) 
                                          #line 499 
                                          ntc = ntc; else 
                                                          #line 499 
                                                          ntc = 0U;
  #line 500 
  rx_ring->next_to_clean = (unsigned short)ntc;
  #line 502 
  __builtin_prefetch((void const *)((void *)((union fm10k_rx_desc *)rx_ring->desc + (unsigned long)ntc)));
  #line 504 
  if ((long)(fm10k_test_staterr(rx_desc,2U) != 0U) != 0L) 
                                                          #line 505 
                                                          return (_Bool)0;
  #line 507 
  return (_Bool)1;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_cleanup_headers(struct fm10k_ring *rx_ring, union fm10k_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 528 
  if ((long)(fm10k_test_staterr(rx_desc,8192U) != 0U) != 0L) {
    #line 532 
    if (((int)rx_desc->w.csum_err & 1) != 0) 
                                             #line 533 
                                             (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.switch_errors) ++;
    #line 534 
    if (((int)rx_desc->w.csum_err & 2) != 0) 
                                             #line 535 
                                             (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.drops) ++;
    #line 536 
    if (((int)rx_desc->w.csum_err & 4) != 0) 
                                             #line 537 
                                             (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.pp_errors) ++;
    #line 538 
    if (((int)rx_desc->w.csum_err & 8) != 0) 
                                             #line 539 
                                             (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.link_errors) ++;
    #line 540 
    if (((int)rx_desc->w.csum_err & 16) != 0) 
                                              #line 541 
                                              (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.length_errors) ++;
    #line 542 
    dev_kfree_skb_any(skb);
    #line 543 
    (rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.rx_stats.errors) ++;
    #line 544 
    return (_Bool)1;
  }
  #line 548 
  if (eth_skb_pad(skb) != 0) 
                             #line 549 
                             return (_Bool)1;
  #line 551 
  return (_Bool)0;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_receive_skb(struct fm10k_q_vector *q_vector, struct sk_buff *skb)
{
  #line 562 
  napi_gro_receive(& q_vector->napi,skb);
  #line 563 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int fm10k_clean_rx_irq(struct fm10k_q_vector *q_vector, struct fm10k_ring *rx_ring, int budget)
{
  #line 569 
  struct sk_buff *skb = rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.skb;
  #line 570 
  unsigned int total_bytes = 0U;
  #line 570 
  unsigned int total_packets = 0U;
  #line 571 
  u16 cleaned_count = fm10k_desc_unused(rx_ring);
  #line 573 
  while ((long)(total_packets < (unsigned int)budget) != 0L) {
    #line 574 
    union fm10k_rx_desc *rx_desc;
    #line 577 
    if ((unsigned int)cleaned_count > 15U) {
      #line 578 
      fm10k_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count));
      #line 579 
      cleaned_count = (unsigned short)0U;
    }
    #line 582 
    rx_desc = (union fm10k_rx_desc *)rx_ring->desc + (unsigned long)rx_ring->next_to_clean;
    #line 584 
    if (rx_desc->d.staterr == 0U) 
                                  #line 585 
                                  break;
    #line 586 
    ldv_inline_asm();
    #line 594 
    skb = fm10k_fetch_rx_buffer(rx_ring,rx_desc,skb);
    #line 597 
    if (skb == (struct sk_buff *)0) 
                                    #line 598 
                                    break;
    #line 600 
    cleaned_count = (u16)((int)cleaned_count + 1);
    #line 603 
    if ((int)fm10k_is_non_eop(rx_ring,rx_desc) != 0) 
                                                     #line 604 
                                                     continue;
    #line 607 
    if ((int)fm10k_cleanup_headers(rx_ring,rx_desc,skb) != 0) {
      #line 608 
      skb = (struct sk_buff *)0;
      #line 609 
      continue;
    }
    #line 613 
    total_bytes = fm10k_process_skb_fields(rx_ring,rx_desc,skb) + total_bytes;
    #line 615 
    fm10k_receive_skb(q_vector,skb);
    #line 618 
    skb = (struct sk_buff *)0;
    #line 621 
    total_packets ++;
  }
  #line 625 
  rx_ring->__anonCompField_fm10k_ring_163.__anonCompField___anonunion_703_162.skb = skb;
  #line 627 
  u64_stats_init(& rx_ring->syncp);
  #line 628 
  rx_ring->stats.packets += (unsigned long long)total_packets;
  #line 629 
  rx_ring->stats.bytes += (unsigned long long)total_bytes;
  #line 630 
  u64_stats_init(& rx_ring->syncp);
  #line 631 
  q_vector->rx.total_packets += total_packets;
  #line 632 
  q_vector->rx.total_bytes += total_bytes;
  #line 634 
  return (int)total_packets;
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static struct ethhdr *fm10k_port_is_vxlan(struct sk_buff *skb)
{
  #line 644 
  void *__mptr;
  #line 644 
  struct fm10k_udp_port *tmp_2;
  #line 641 
  struct fm10k_udp_port *vxlan_port;
  #line 640 
  struct fm10k_intfc *interface = netdev_priv(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev);
  {
    #line 645 
    union __anonunion___u_8067 __u;
    #line 644 
    struct list_head *head__ = & interface->vxlan_port;
    #line 644 
    __read_once_size((void *)(& head__->next),(void *)(& __u.__c),8);
    #line 644 
    struct list_head *pos__ = (__u.__val);
    #line 644 
    if (pos__ != head__) {
      #line 644 
      __mptr = (void *)pos__;
      #line 644 
      tmp_2 = ((struct fm10k_udp_port *)__mptr);
    }
    else 
         #line 644 
         tmp_2 = (struct fm10k_udp_port *)0;
    }
  #line 644 
  vxlan_port = tmp_2;
  #line 647 
  if (vxlan_port == (struct fm10k_udp_port *)0) 
                                                #line 648 
                                                return (struct ethhdr *)0;
  #line 649 
  ;
  #line 649 
  if ((int)vxlan_port->port != (int)udp_hdr(skb)->dest) 
                                                        #line 650 
                                                        return (struct ethhdr *)0;
  #line 653 
  return (struct ethhdr *)(skb_transport_header(skb) + 16UL);
}

#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static struct ethhdr *fm10k_gre_is_nvgre(struct sk_buff *skb)
{
  #line 666 
  struct fm10k_nvgre_hdr *nvgre_hdr;
  #line 667 
  int hlen = (int)ip_hdrlen(skb);
  #line 670 
  if ((unsigned int)vlan_get_protocol(skb) != 8U) 
                                                  #line 671 
                                                  return (struct ethhdr *)0;
  #line 674 
  nvgre_hdr = (struct fm10k_nvgre_hdr *)(skb_network_header(skb) + (unsigned long)hlen);
  #line 677 
  if (((int)nvgre_hdr->flags & 65439) != 0) 
                                            #line 678 
                                            return (struct ethhdr *)0;
  #line 681 
  if (((int)nvgre_hdr->flags & 32) != 0) 
                                         #line 682 
                                         return (struct ethhdr *)(nvgre_hdr + 1U);
  #line 684 
  return (struct ethhdr *)(& nvgre_hdr->tni);
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
__be16 fm10k_tx_encap_offload(struct sk_buff *skb)
{
  #line 689 
  u8 inner_l4_hlen;
  #line 690 
  struct ethhdr *eth_hdr;
  #line 689 
  u8 l4_hdr = (unsigned char)0U;
  #line 689 
  u8 inner_l4_hdr = (unsigned char)0U;
  #line 692 
  if ((unsigned int)skb->inner_protocol_type != 0U || (unsigned int)skb->__anonCompField_sk_buff_96.inner_protocol != 22629U) 
    #line 694 
    return (unsigned short)0U;
  #line 696 
  switch ((int)vlan_get_protocol(skb)) {
    #line 697 
    case 8: 
            #line 697 
    ;
    #line 698 
    l4_hdr = ip_hdr(skb)->protocol;
    #line 699 
    break;
    #line 700 
    case 56710: 
                #line 700 
    ;
    #line 701 
    l4_hdr = ipv6_hdr(skb)->nexthdr;
    #line 702 
    break;
    #line 703 
    default: 
             #line 703 
    ;
    #line 704 
    return (unsigned short)0U;
  }
  #line 707 
  switch ((int)l4_hdr) {
    #line 708 
    case 17: 
             #line 708 
    ;
    #line 709 
    eth_hdr = fm10k_port_is_vxlan(skb);
    #line 710 
    break;
    #line 711 
    case 47: 
             #line 711 
    ;
    #line 712 
    eth_hdr = fm10k_gre_is_nvgre(skb);
    #line 713 
    break;
    #line 714 
    default: 
             #line 714 
    ;
    #line 715 
    return (unsigned short)0U;
  }
  #line 718 
  if (eth_hdr == (struct ethhdr *)0) 
                                     #line 719 
                                     return (unsigned short)0U;
  #line 721 
  switch ((int)eth_hdr->h_proto) {
    #line 722 
    case 8: 
            #line 722 
    ;
    #line 723 
    inner_l4_hdr = inner_ip_hdr(skb)->protocol;
    #line 724 
    break;
    #line 725 
    case 56710: 
                #line 725 
    ;
    #line 726 
    inner_l4_hdr = inner_ipv6_hdr(skb)->nexthdr;
    #line 727 
    break;
    #line 728 
    default: 
             #line 728 
    ;
    #line 729 
    return (unsigned short)0U;
  }
  #line 732 
  switch ((int)inner_l4_hdr) {
    #line 733 
    case 6: 
            #line 733 
    ;
    #line 734 
    inner_l4_hlen = (unsigned char)inner_tcp_hdrlen(skb);
    #line 735 
    break;
    #line 736 
    case 17: 
             #line 736 
    ;
    #line 737 
    inner_l4_hlen = (unsigned char)8U;
    #line 738 
    break;
    #line 739 
    default: 
             #line 739 
    ;
    #line 740 
    return (unsigned short)0U;
  }
  #line 746 
  ;
  #line 746 
  if ((skb_inner_transport_header(skb) + (unsigned long)inner_l4_hlen) - skb_mac_header(skb) > 184L) 
    #line 748 
    return (unsigned short)0U;
  #line 750 
  return eth_hdr->h_proto;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int fm10k_tso(struct fm10k_ring *tx_ring, struct fm10k_tx_buffer *first)
{
  #line 757 
  struct fm10k_tx_desc *tx_desc;
  #line 758 
  unsigned char *th;
  #line 759 
  u8 hdrlen;
  #line 756 
  struct sk_buff *skb = first->skb;
  #line 761 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 762 
                                          return 0;
  #line 764 
  if (! skb_is_gso(skb)) 
                         #line 765 
                         return 0;
  #line 768 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 769 
    if ((unsigned int)fm10k_tx_encap_offload(skb) == 0U) 
                                                         #line 770 
                                                         goto err_vxlan;
    #line 771 
    th = skb_inner_transport_header(skb);
  }
  else 
       #line 773 
       th = skb_transport_header(skb);
  #line 777 
  hdrlen = (unsigned char)((int)((unsigned char)(th - skb->data)) + ((int)((unsigned char)((struct tcphdr *)th)->doff) << 2U));
  #line 779 
  first->tx_flags = (unsigned short)((unsigned int)first->tx_flags | 1U);
  #line 782 
  first->gso_segs = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs;
  #line 783 
  first->bytecount += (unsigned int)(((int)first->gso_segs + -1) * (int)hdrlen);
  #line 786 
  tx_desc = (struct fm10k_tx_desc *)tx_ring->desc + (unsigned long)tx_ring->next_to_use;
  #line 787 
  tx_desc->hdrlen = hdrlen;
  #line 788 
  tx_desc->mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 790 
  return 1;
  #line 792 
  err_vxlan: 
             #line 792 
  ;
  #line 793 
  (tx_ring->netdev)->features &= 18446744073642442751ULL;
  #line 794 
  if (net_ratelimit() != 0) 
                            #line 795 
                            netdev_err(tx_ring->netdev,(char *)"TSO requested for unsupported tunnel, disabling offload\n");
  #line 797 
  return -1;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_tx_csum(struct fm10k_ring *tx_ring, struct fm10k_tx_buffer *first)
{
  #line 804 
  struct fm10k_tx_desc *tx_desc;
  #line 809 
  union __anonunion_network_hdr_8069 network_hdr;
  #line 810 
  u8 *transport_hdr;
  #line 811 
  __be16 frag_off;
  #line 812 
  __be16 protocol;
  #line 803 
  struct sk_buff *skb = first->skb;
  #line 813 
  u8 l4_hdr = (unsigned char)0U;
  #line 815 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 816 
                                          goto no_csum;
  #line 818 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 819 
    protocol = fm10k_tx_encap_offload(skb);
    #line 820 
    if ((unsigned int)protocol == 0U) {
      #line 821 
      if (skb_checksum_help(skb) != 0) {
        #line 822 
        _dev_warn(tx_ring->dev,(char *)"failed to offload encap csum!\n");
        #line 824 
        (tx_ring->__anonCompField_fm10k_ring_163.tx_stats.csum_err) ++;
      }
      #line 826 
      goto no_csum;
    }
    #line 828 
    network_hdr.raw = skb_inner_network_header(skb);
    #line 829 
    transport_hdr = skb_inner_transport_header(skb);
  }
  else {
    #line 831 
    protocol = vlan_get_protocol(skb);
    #line 832 
    network_hdr.raw = skb_network_header(skb);
    #line 833 
    transport_hdr = skb_transport_header(skb);
  }
  #line 836 
  switch ((int)protocol) {
    #line 837 
    case 8: 
            #line 837 
    ;
    #line 838 
    l4_hdr = (network_hdr.ipv4)->protocol;
    #line 839 
    break;
    #line 840 
    case 56710: 
                #line 840 
    ;
    #line 841 
    l4_hdr = (network_hdr.ipv6)->nexthdr;
    #line 842 
    if ((long)(transport_hdr - network_hdr.raw == 40L) != 0L) 
                                                              #line 844 
                                                              break;
    #line 845 
    ipv6_skip_exthdr(skb,(int)((network_hdr.raw - skb->data) + (long)40U),& l4_hdr,& frag_off);
    #line 848 
    if ((long)((unsigned int)frag_off != 0U) != 0L) 
                                                    #line 849 
                                                    l4_hdr = (unsigned char)44U;
    #line 850 
    break;
    #line 851 
    default: 
             #line 851 
    ;
    #line 852 
    break;
  }
  #line 855 
  switch ((int)l4_hdr) {
    #line 856 
    case 6: 
            #line 856 
    ;
    #line 857 
    case 17: 
             #line 857 
    ;
    #line 858 
    break;
    #line 859 
    case 47: 
             #line 859 
    ;
    #line 860 
    if ((unsigned int)skb->encapsulation != 0U) 
                                                #line 861 
                                                break;
    #line 863 
    default: 
             #line 863 
    ;
    #line 864 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 865 
                                            _dev_warn(tx_ring->dev,(char *)"partial checksum, version=%d l4 proto=%x\n",(int)protocol,(int)l4_hdr);
    #line 869 
    skb_checksum_help(skb);
    #line 870 
    (tx_ring->__anonCompField_fm10k_ring_163.tx_stats.csum_err) ++;
    #line 871 
    goto no_csum;
  }
  #line 875 
  first->tx_flags = (unsigned short)((unsigned int)first->tx_flags | 1U);
  #line 876 
  (tx_ring->__anonCompField_fm10k_ring_163.tx_stats.csum_good) ++;
  #line 878 
  no_csum: 
           #line 878 
  ;
  #line 880 
  tx_desc = (struct fm10k_tx_desc *)tx_ring->desc + (unsigned long)tx_ring->next_to_use;
  #line 881 
  tx_desc->hdrlen = (unsigned char)0U;
  #line 882 
  tx_desc->mss = (unsigned short)0U;
  #line 883 
  return;
}

#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static u8 fm10k_tx_desc_flags(struct sk_buff *skb, u32 tx_flags)
{
  #line 893 
  u32 desc_flags = 0U;
  #line 896 
  desc_flags = (tx_flags & 1U) * 4U | desc_flags;
  #line 899 
  return (unsigned char)desc_flags;
}

#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_tx_desc_push(struct fm10k_ring *tx_ring, struct fm10k_tx_desc *tx_desc, u16 i, dma_addr_t dma, unsigned int size, u8 desc_flags)
{
  #line 907 
  i = (u16)((int)i + 1);
  #line 907 
  if (((int)i & 3) == 0) 
                         #line 908 
                         desc_flags = (unsigned char)((unsigned int)desc_flags | 33U);
  #line 911 
  tx_desc->buffer_addr = dma;
  #line 912 
  tx_desc->flags = desc_flags;
  #line 913 
  tx_desc->buflen = (unsigned short)size;
  #line 916 
  return (_Bool)((int)tx_ring->count == (int)i);
}

#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int __fm10k_maybe_stop_tx(struct fm10k_ring *tx_ring, u16 size)
{
  #line 921 
  netif_stop_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 922 
  ldv_inline_asm();
  #line 927 
  ;
  #line 927 
  if ((long)((int)fm10k_desc_unused(tx_ring) < (int)size) != 0L) 
                                                                 #line 928 
                                                                 return -16;
  #line 931 
  netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 932 
  (tx_ring->__anonCompField_fm10k_ring_163.tx_stats.restart_queue) ++;
  #line 933 
  return 0;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
__inline static int fm10k_maybe_stop_tx(struct fm10k_ring *tx_ring, u16 size)
{
  #line 938 
  ;
  #line 938 
  if ((long)((int)fm10k_desc_unused(tx_ring) >= (int)size) != 0L) 
                                                                  #line 939 
                                                                  return 0;
  #line 940 
  return __fm10k_maybe_stop_tx(tx_ring,(unsigned short)((int)size));
}

#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_tx_map(struct fm10k_ring *tx_ring, struct fm10k_tx_buffer *first)
{
  #line 947 
  struct fm10k_tx_buffer *tx_buffer;
  #line 948 
  struct fm10k_tx_desc *tx_desc;
  #line 949 
  skb_frag_t *frag;
  #line 950 
  unsigned char *data;
  #line 951 
  dma_addr_t dma;
  #line 952 
  unsigned int data_len;
  #line 952 
  unsigned int size;
  #line 1013 
  u16 tmp_8;
  #line 946 
  struct sk_buff *skb = first->skb;
  #line 953 
  u32 tx_flags = (unsigned int)first->tx_flags;
  #line 954 
  u16 i = tx_ring->next_to_use;
  #line 955 
  u8 flags = fm10k_tx_desc_flags(skb,tx_flags);
  #line 957 
  tx_desc = (struct fm10k_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 960 
  if ((unsigned int)skb->vlan_present != 0U) 
                                             #line 961 
                                             tx_desc->vlan = skb->vlan_tci; else 
                                                                    #line 963 
                                                                    tx_desc->vlan = (unsigned short)0U;
  #line 965 
  size = skb_headlen(skb);
  #line 966 
  data = skb->data;
  #line 968 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 970 
  data_len = skb->data_len;
  #line 971 
  tx_buffer = first;
  #line 973 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 973 
  while (1) {
    {
      #line 995 
      u16 tmp_5;
      #line 995 
      struct fm10k_tx_desc *tmp_6;
      #line 974 
      if (dma_mapping_error(tx_ring->dev,dma) != 0) 
                                                    #line 975 
                                                    goto dma_error;
      #line 978 
      tx_buffer->len = size;
      #line 979 
      tx_buffer->dma = dma;
      #line 981 
      while ((long)(size > 16384U) != 0L) {
        #line 982 
        u16 tmp_2;
        #line 982 
        struct fm10k_tx_desc *tmp_3;
        #line 982 
        ;
        #line 982 
        ;
        #line 982 
        tmp_2 = i;
        #line 982 
        i = (u16)((int)i + 1);
        #line 982 
        ;
        #line 982 
        tmp_3 = tx_desc;
        #line 982 
        tx_desc ++;
        #line 982 
        ;
        #line 982 
        ;
        #line 982 
        if ((int)fm10k_tx_desc_push(tx_ring,tmp_3,(unsigned short)((int)tmp_2),dma,
                           16384U,(unsigned char)((int)flags)) != 0) {
          #line 984 
          tx_desc = (struct fm10k_tx_desc *)tx_ring->desc;
          #line 985 
          i = (unsigned short)0U;
        }
        #line 988 
        dma += 16384ULL;
        #line 989 
        size += 4294950912U;
      }
      #line 992 
      if ((long)(data_len == 0U) != 0L) 
                                        #line 993 
                                        break;
      #line 995 
      ;
      #line 995 
      ;
      #line 995 
      ;
      #line 995 
      tmp_5 = i;
      #line 995 
      i = (u16)((int)i + 1);
      #line 995 
      ;
      #line 995 
      tmp_6 = tx_desc;
      #line 995 
      tx_desc ++;
      #line 995 
      ;
      #line 995 
      ;
      #line 995 
      if ((int)fm10k_tx_desc_push(tx_ring,tmp_6,(unsigned short)((int)tmp_5),dma,
                           size,(unsigned char)((int)flags)) != 0) {
        #line 997 
        tx_desc = (struct fm10k_tx_desc *)tx_ring->desc;
        #line 998 
        i = (unsigned short)0U;
      }
      #line 1001 
      size = skb_frag_size(frag);
      #line 1002 
      data_len -= size;
      #line 1004 
      dma = skb_frag_dma_map(tx_ring->dev,frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 1007 
      tx_buffer = tx_ring->__anonCompField_fm10k_ring_161.tx_buffer + (unsigned long)i;
    }
    #line 973 
    frag ++;
  }
  #line 1011 
  flags = (unsigned char)((unsigned int)flags | 64U);
  #line 1013 
  ;
  #line 1013 
  ;
  #line 1013 
  ;
  #line 1013 
  tmp_8 = i;
  #line 1013 
  i = (u16)((int)i + 1);
  #line 1013 
  ;
  #line 1013 
  ;
  #line 1013 
  ;
  #line 1013 
  if ((int)fm10k_tx_desc_push(tx_ring,tx_desc,(unsigned short)((int)tmp_8),dma,
                           size,(unsigned char)((int)flags)) != 0) 
    #line 1014 
    i = (unsigned short)0U;
  #line 1017 
  ;
  #line 1017 
  netdev_tx_sent_queue(txring_txq(tx_ring),first->bytecount);
  #line 1020 
  skb_tx_timestamp(first->skb);
  #line 1021 
  ldv_inline_asm();
  #line 1032 
  first->next_to_watch = tx_desc;
  #line 1034 
  tx_ring->next_to_use = i;
  #line 1037 
  fm10k_maybe_stop_tx(tx_ring,(unsigned short)21);
  #line 1040 
  if ((int)netif_xmit_stopped(txring_txq(tx_ring)) != 0) 
                                                         #line 1041 
                                                         writel((unsigned int)i,(void *)tx_ring->tail);
  else {
    #line 1040 
    if (! netdev_xmit_more()) 
                              #line 1041 
                              writel((unsigned int)i,(void *)tx_ring->tail);
  }
  #line 1044 
  return;
  #line 1045 
  dma_error: 
             #line 1045 
  ;
  #line 1046 
  _dev_err(tx_ring->dev,(char *)"TX DMA map failed\n");
  #line 1049 
  while (1) {
    #line 1050 
    tx_buffer = tx_ring->__anonCompField_fm10k_ring_161.tx_buffer + (unsigned long)i;
    #line 1051 
    fm10k_unmap_and_free_tx_resource(tx_ring,tx_buffer);
    #line 1052 
    if (tx_buffer == first) 
                            #line 1053 
                            break;
    #line 1054 
    if ((unsigned int)i == 0U) 
                               #line 1055 
                               i = tx_ring->count;
    #line 1056 
    i = (u16)((int)i - 1);
  }
  #line 1059 
  tx_ring->next_to_use = i;
  #line 1060 
  return;
}

#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
netdev_tx_t fm10k_xmit_frame_ring(struct sk_buff *skb, struct fm10k_ring *tx_ring)
{
  #line 1090 
  unsigned int __UNIQUE_ID___x556;
  #line 1090 
  unsigned int tmp_4;
  #line 1066 
  struct fm10k_tx_buffer *first;
  #line 1067 
  unsigned short f;
  #line 1069 
  int tso;
  #line 1065 
  u16 count = (unsigned short)((skb_headlen(skb) + 16383U) / 16384U);
  #line 1068 
  u32 tx_flags = 0U;
  #line 1076 
  f = (unsigned short)0U;
  #line 1076 
  while (1) {
    #line 1076 
    ;
    #line 1076 
    if (! ((int)((unsigned short)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags) > (int)f)) 
      #line 1076 
      break;
    {
      #line 1077 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)f];
      #line 1079 
      count = (unsigned short)((int)((unsigned short)((skb_frag_size(frag) + 16383U) / 16384U)) + (int)count);
    }
    #line 1076 
    f = (unsigned short)((int)f + 1);
  }
  #line 1082 
  if (fm10k_maybe_stop_tx(tx_ring,
                            (unsigned short)((int)((unsigned int)count + 3U))) != 0) {
    #line 1083 
    (tx_ring->__anonCompField_fm10k_ring_163.tx_stats.tx_busy) ++;
    #line 1084 
    return NETDEV_TX_BUSY;
  }
  #line 1088 
  first = tx_ring->__anonCompField_fm10k_ring_161.tx_buffer + (unsigned long)tx_ring->next_to_use;
  #line 1089 
  first->skb = skb;
  {
    #line 1090 
    __UNIQUE_ID___x556 = skb->len;
    #line 1090 
    unsigned int __UNIQUE_ID___y557 = 60U;
    #line 1090 
    if (__UNIQUE_ID___x556 > __UNIQUE_ID___y557) 
                                                 #line 1090 
                                                 tmp_4 = __UNIQUE_ID___x556; else 
                                                                    #line 1090 
                                                                    tmp_4 = __UNIQUE_ID___y557;
    }
  #line 1090 
  first->bytecount = tmp_4;
  #line 1091 
  first->gso_segs = (unsigned short)1U;
  #line 1094 
  first->tx_flags = (unsigned short)tx_flags;
  #line 1096 
  tso = fm10k_tso(tx_ring,first);
  #line 1097 
  if (tso < 0) 
               #line 1098 
               goto out_drop;
  else 
    #line 1099 
    if (tso == 0) 
                  #line 1100 
                  fm10k_tx_csum(tx_ring,first);
  #line 1102 
  fm10k_tx_map(tx_ring,first);
  #line 1104 
  return NETDEV_TX_OK;
  #line 1106 
  out_drop: 
            #line 1106 
  ;
  #line 1107 
  dev_kfree_skb_any(first->skb);
  #line 1108 
  first->skb = (struct sk_buff *)0;
  #line 1110 
  return NETDEV_TX_OK;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static u64 fm10k_get_tx_completed(struct fm10k_ring *ring)
{
  #line 1115 
  return ring->stats.packets;
}

#line 1123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
u64 fm10k_get_tx_pending(struct fm10k_ring *ring, bool in_sw)
{
  #line 1127 
  u32 head;
  #line 1127 
  u32 tail;
  #line 1137 
  unsigned int tmp;
  #line 1125 
  struct fm10k_intfc *interface = (ring->q_vector)->interface;
  #line 1126 
  struct fm10k_hw *hw = & interface->hw;
  #line 1129 
  if ((long)((int)in_sw != 0) != 0L) {
    #line 1130 
    head = (unsigned int)ring->next_to_clean;
    #line 1131 
    tail = (unsigned int)ring->next_to_use;
  }
  else {
    #line 1133 
    head = fm10k_read_reg(hw,(int)ring->reg_idx * 64 + 32772);
    #line 1134 
    tail = fm10k_read_reg(hw,(int)ring->reg_idx * 64 + 32773);
  }
  #line 1137 
  if (head > tail) 
                   #line 1137 
                   tmp = (unsigned int)ring->count + tail; else 
                                                                #line 1137 
                                                                tmp = tail;
  #line 1137 
  ;
  #line 1137 
  return (unsigned long long)(tmp - head);
}

#line 1140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
bool fm10k_check_tx_hang(struct fm10k_ring *tx_ring)
{
  #line 1142 
  u32 tx_done = (unsigned int)fm10k_get_tx_completed(tx_ring);
  #line 1143 
  u32 tx_done_old = (unsigned int)tx_ring->__anonCompField_fm10k_ring_163.tx_stats.tx_done_old;
  #line 1144 
  u32 tx_pending = (unsigned int)fm10k_get_tx_pending(tx_ring,(_Bool)1);
  #line 1146 
  cif_clear_bit_2(0L,(unsigned long *)(& tx_ring->state));
  #line 1156 
  if (tx_pending == 0U || tx_done_old != tx_done) {
    #line 1158 
    tx_ring->__anonCompField_fm10k_ring_163.tx_stats.tx_done_old = (unsigned long long)tx_done;
    #line 1160 
    cif_clear_bit_2(1L,(unsigned long *)(& tx_ring->state));
    #line 1162 
    return (_Bool)0;
  }
  #line 1166 
  return test_and_set_bit(1L,(unsigned long *)(& tx_ring->state));
}

#line 1173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
void fm10k_tx_timeout_reset(struct fm10k_intfc *interface)
{
  #line 1176 
  if (! test_bit(3L,(unsigned long *)(& interface->state))) {
    #line 1177 
    (interface->tx_timeout_count) ++;
    #line 1178 
    cif_set_bit_2(0L,(unsigned long *)(& interface->flags));
    #line 1179 
    fm10k_service_event_schedule(interface);
  }
  #line 1181 
  return;
}

#line 1189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_clean_tx_irq(struct fm10k_q_vector *q_vector, struct fm10k_ring *tx_ring, int napi_budget)
{
  #line 1193 
  struct fm10k_tx_buffer *tx_buffer;
  #line 1194 
  struct fm10k_tx_desc *tx_desc;
  #line 1321 
  int tmp_8;
  #line 1192 
  struct fm10k_intfc *interface = q_vector->interface;
  #line 1195 
  unsigned int total_bytes = 0U;
  #line 1195 
  unsigned int total_packets = 0U;
  #line 1196 
  unsigned int budget = (unsigned int)q_vector->tx.work_limit;
  #line 1197 
  unsigned int i = (unsigned int)tx_ring->next_to_clean;
  #line 1199 
  if ((int)test_bit(3L,(unsigned long *)(& interface->state)) != 0) 
                                                                    #line 1200 
                                                                    return (_Bool)1;
  #line 1202 
  tx_buffer = tx_ring->__anonCompField_fm10k_ring_161.tx_buffer + (unsigned long)i;
  #line 1203 
  tx_desc = (struct fm10k_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 1204 
  i -= (unsigned int)tx_ring->count;
  #line 1206 
  while (1) {
    {
      #line 1207 
      struct fm10k_tx_desc *eop_desc = tx_buffer->next_to_watch;
      #line 1210 
      if (eop_desc == (struct fm10k_tx_desc *)0) 
                                                 #line 1211 
                                                 break;
      #line 1212 
      ldv_inline_asm();
      #line 1217 
      if (((int)eop_desc->flags & 128) == 0) 
                                             #line 1218 
                                             break;
      #line 1221 
      tx_buffer->next_to_watch = (struct fm10k_tx_desc *)0;
      #line 1224 
      total_bytes = tx_buffer->bytecount + total_bytes;
      #line 1225 
      total_packets = (unsigned int)tx_buffer->gso_segs + total_packets;
      #line 1228 
      napi_consume_skb(tx_buffer->skb,napi_budget);
      #line 1231 
      dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 1237 
      tx_buffer->skb = (struct sk_buff *)0;
      #line 1238 
      tx_buffer->len = 0U;
      #line 1241 
      while (tx_desc != eop_desc) {
        #line 1242 
        tx_buffer ++;
        #line 1243 
        tx_desc ++;
        #line 1244 
        i ++;
        #line 1245 
        if ((long)(i == 0U) != 0L) {
          #line 1246 
          i -= (unsigned int)tx_ring->count;
          #line 1247 
          tx_buffer = tx_ring->__anonCompField_fm10k_ring_161.tx_buffer;
          #line 1248 
          tx_desc = (struct fm10k_tx_desc *)tx_ring->desc;
        }
        #line 1252 
        if (tx_buffer->len != 0U) {
          #line 1253 
          dma_unmap_page_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 1257 
          tx_buffer->len = 0U;
        }
      }
      #line 1262 
      tx_buffer ++;
      #line 1263 
      tx_desc ++;
      #line 1264 
      i ++;
      #line 1265 
      if ((long)(i == 0U) != 0L) {
        #line 1266 
        i -= (unsigned int)tx_ring->count;
        #line 1267 
        tx_buffer = tx_ring->__anonCompField_fm10k_ring_161.tx_buffer;
        #line 1268 
        tx_desc = (struct fm10k_tx_desc *)tx_ring->desc;
      }
      #line 1272 
      __builtin_prefetch((void const *)((void *)tx_desc));
      #line 1275 
      budget --;
    }
    #line 1276 
    if (! ((long)(budget != 0U) != 0L)) 
                                        #line 1206 
                                        break;
  }
  #line 1278 
  i = (unsigned int)tx_ring->count + i;
  #line 1279 
  tx_ring->next_to_clean = (unsigned short)i;
  #line 1280 
  u64_stats_init(& tx_ring->syncp);
  #line 1281 
  tx_ring->stats.bytes += (unsigned long long)total_bytes;
  #line 1282 
  tx_ring->stats.packets += (unsigned long long)total_packets;
  #line 1283 
  u64_stats_init(& tx_ring->syncp);
  #line 1284 
  q_vector->tx.total_bytes += total_bytes;
  #line 1285 
  q_vector->tx.total_packets += total_packets;
  #line 1287 
  if ((int)test_bit(0L,(unsigned long *)(& tx_ring->state)) != 0) {
    #line 1287 
    if ((int)fm10k_check_tx_hang(tx_ring) != 0) {
      #line 1289 
      struct fm10k_hw *hw = & interface->hw;
      #line 1291 
      if (((int)interface->msg_enable & 1) != 0) {
        #line 1291 
        ;
        #line 1291 
        ;
        #line 1291 
        ;
        #line 1291 
        ;
        #line 1291 
        netdev_err(tx_ring->netdev,(char *)"Detected Tx Unit Hang\n",(int)tx_ring->queue_index,fm10k_read_reg(hw,(int)tx_ring->reg_idx * 64 + 32772),fm10k_read_reg(hw,(int)tx_ring->reg_idx * 64 + 32773),(int)tx_ring->next_to_use,i);
      }
      #line 1302 
      netif_stop_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
      #line 1305 
      if (((int)interface->msg_enable & 2) != 0) 
                                                 #line 1305 
                                                 netdev_info(tx_ring->netdev,(char *)"tx hang %d detected on queue %d, resetting interface\n",interface->tx_timeout_count + 1U,(int)tx_ring->queue_index);
      #line 1310 
      fm10k_tx_timeout_reset(interface);
      #line 1313 
      return (_Bool)1;
    }
  }
  #line 1317 
  ;
  #line 1317 
  ;
  #line 1317 
  netdev_tx_completed_queue(txring_txq(tx_ring),total_packets,total_bytes);
  #line 1321 
  if ((long)(total_packets != 0U) != 0L) {
    #line 1321 
    if ((long)((int)netif_carrier_ok(tx_ring->netdev) != 0) != 0L) 
                                                                   #line 1321 
                                                                   tmp_8 = 1; else 
                                                                    #line 1321 
                                                                    tmp_8 = 0;
  }
  else 
       #line 1321 
       tmp_8 = 0;
  #line 1321 
  if (tmp_8 != 0) {
    #line 1321 
    if ((long)((unsigned int)fm10k_desc_unused(tx_ring) > 41U) != 0L) {
      #line 1323 
      ldv_inline_asm();
      #line 1327 
      if ((int)__netif_subqueue_stopped(tx_ring->netdev,
                                 (unsigned short)((int)tx_ring->queue_index)) != 0) {
        #line 1329 
        if (! test_bit(3L,(unsigned long *)(& interface->state))) {
          #line 1330 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
          #line 1332 
          (tx_ring->__anonCompField_fm10k_ring_163.tx_stats.restart_queue) ++;
        }
      }
    }
  }
  #line 1336 
  return (_Bool)(budget != 0U);
}

#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_update_itr(struct fm10k_ring_container *ring_container)
{
  #line 1399 
  union __anonunion___u_8071 __u;
  #line 1351 
  unsigned int avg_wire_size;
  #line 1351 
  unsigned int packets;
  #line 1351 
  unsigned int itr_round;
  #line 1354 
  if (((int)ring_container->itr & 32768) == 0) 
                                               #line 1355 
                                               goto clear_counts;
  #line 1357 
  packets = ring_container->total_packets;
  #line 1358 
  if (packets == 0U) 
                     #line 1359 
                     goto clear_counts;
  #line 1361 
  avg_wire_size = ring_container->total_bytes / packets;
  #line 1378 
  if (avg_wire_size <= 360U) {
    #line 1380 
    avg_wire_size *= 8U;
    #line 1381 
    avg_wire_size += 376U;
  }
  else 
    #line 1382 
    if (avg_wire_size <= 1152U) {
      #line 1384 
      avg_wire_size *= 3U;
      #line 1385 
      avg_wire_size += 2176U;
    }
    else 
      #line 1386 
      if (avg_wire_size <= 1920U) 
                                  #line 1388 
                                  avg_wire_size += 4480U; else 
                                                               #line 1391 
                                                               avg_wire_size = 6656U;
  #line 1398 
  __read_once_size((void *)(& ring_container->itr_scale),(void *)(& __u.__c),1);
  #line 1398 
  itr_round = (unsigned int)((int)(__u.__val) + 8);
  #line 1399 
  avg_wire_size = ((unsigned int)(1UL << itr_round) + avg_wire_size) + 4294967295U;
  #line 1400 
  avg_wire_size >>= itr_round;
  #line 1403 
  ring_container->itr = (unsigned short)((unsigned int)((unsigned short)avg_wire_size) | 32768U);
  #line 1405 
  clear_counts: 
                #line 1405 
  ;
  #line 1406 
  ring_container->total_bytes = 0U;
  #line 1407 
  ring_container->total_packets = 0U;
  #line 1408 
  return;
}

#line 1410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_qv_enable(struct fm10k_q_vector *q_vector)
{
  #line 1413 
  u32 itr = 2684354560U;
  #line 1416 
  fm10k_update_itr(& q_vector->tx);
  #line 1419 
  fm10k_update_itr(& q_vector->rx);
  #line 1422 
  itr = ((unsigned int)q_vector->tx.itr & 4095U) | itr;
  #line 1425 
  itr = ((unsigned int)((int)q_vector->rx.itr << 12) & 16773120U) | itr;
  #line 1428 
  writel(itr,(void *)q_vector->itr);
  #line 1429 
  return;
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int fm10k_poll(struct napi_struct *napi, int budget)
{
  #line 1474 
  int __UNIQUE_ID___x562;
  #line 1434 
  void *__mptr;
  #line 1474 
  int tmp_5;
  #line 1435 
  struct fm10k_ring *ring;
  #line 1436 
  int per_ring_budget;
  #line 1434 
  __mptr = (void *)napi;
  #line 1433 
  struct fm10k_q_vector *q_vector = ((struct fm10k_q_vector *)(__mptr + 18446744073709551544U));
  #line 1436 
  int work_done = 0;
  #line 1437 
  bool clean_complete = (_Bool)1;
  #line 1439 
  ring = q_vector->tx.ring + (unsigned long)q_vector->tx.count;
  #line 1439 
  while (1) {
    #line 1439 
    ring --;
    #line 1439 
    ;
    #line 1439 
    if (! (ring >= q_vector->tx.ring)) 
                                       #line 1439 
                                       break;
    #line 1440 
    if (! fm10k_clean_tx_irq(q_vector,ring,budget)) 
                                                    #line 1441 
                                                    clean_complete = (_Bool)0;
  }
  #line 1445 
  if (budget <= 0) 
                   #line 1446 
                   return budget;
  #line 1451 
  if ((unsigned int)q_vector->rx.count > 1U) {
    #line 1452 
    int tmp_1;
    #line 1452 
    int __UNIQUE_ID___x560;
    {
      #line 1452 
      __UNIQUE_ID___x560 = budget / (int)q_vector->rx.count;
      #line 1452 
      int __UNIQUE_ID___y561 = 1;
      #line 1452 
      if (__UNIQUE_ID___x560 > __UNIQUE_ID___y561) 
                                                   #line 1452 
                                                   tmp_1 = __UNIQUE_ID___x560; else 
                                                                    #line 1452 
                                                                    tmp_1 = __UNIQUE_ID___y561;
      }
    #line 1452 
    per_ring_budget = tmp_1;
  }
  else 
       #line 1454 
       per_ring_budget = budget;
  #line 1456 
  ring = q_vector->rx.ring + (unsigned long)q_vector->rx.count;
  #line 1456 
  while (1) {
    #line 1456 
    ring --;
    #line 1456 
    ;
    #line 1456 
    if (! (ring >= q_vector->rx.ring)) 
                                       #line 1456 
                                       break;
    {
      #line 1457 
      int work = fm10k_clean_rx_irq(q_vector,ring,per_ring_budget);
      #line 1459 
      work_done += work;
      #line 1460 
      if (work >= per_ring_budget) 
                                   #line 1461 
                                   clean_complete = (_Bool)0;
    }
  }
  #line 1465 
  if (! clean_complete) 
                        #line 1466 
                        return budget;
  #line 1471 
  if ((long)((int)napi_complete_done(napi,work_done) != 0) != 0L) 
                                                                  #line 1472 
                                                                  fm10k_qv_enable(q_vector);
  {
    #line 1474 
    __UNIQUE_ID___x562 = work_done;
    #line 1474 
    int __UNIQUE_ID___y563 = budget + -1;
    #line 1474 
    if (__UNIQUE_ID___x562 < __UNIQUE_ID___y563) 
                                                 #line 1474 
                                                 tmp_5 = __UNIQUE_ID___x562; else 
                                                                    #line 1474 
                                                                    tmp_5 = __UNIQUE_ID___y563;
    }
  #line 1474 
  return tmp_5;
}

#line 1488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_set_qos_queues(struct fm10k_intfc *interface)
{
  #line 1512 
  unsigned short __UNIQUE_ID___x564;
  #line 1512 
  int tmp_1;
  #line 1491 
  struct fm10k_ring_feature *f;
  #line 1492 
  int rss_i;
  #line 1492 
  int i;
  #line 1493 
  int pcs;
  #line 1490 
  struct net_device *dev = interface->netdev;
  #line 1496 
  pcs = netdev_get_num_tc(dev);
  #line 1498 
  if (pcs <= 1) 
                #line 1499 
                return (_Bool)0;
  #line 1502 
  f = & interface->ring_feature[1];
  #line 1503 
  f->indices = (unsigned short)pcs;
  #line 1504 
  f->mask = (unsigned short)((unsigned int)((unsigned short)(1UL << fls((unsigned int)(pcs + -1)))) + 65535U);
  #line 1507 
  rss_i = (int)interface->hw.mac.max_queues / pcs;
  #line 1508 
  rss_i = (int)(1UL << (fls((unsigned int)rss_i) + -1));
  #line 1511 
  f = & interface->ring_feature[0];
  {
    #line 1512 
    __UNIQUE_ID___x564 = (unsigned short)rss_i;
    #line 1512 
    unsigned short __UNIQUE_ID___y565 = f->limit;
    #line 1512 
    if ((int)__UNIQUE_ID___x564 < (int)__UNIQUE_ID___y565) 
                                                           #line 1512 
                                                           tmp_1 = (int)__UNIQUE_ID___x564; else 
                                                                    #line 1512 
                                                                    tmp_1 = (int)__UNIQUE_ID___y565;
    }
  #line 1512 
  rss_i = tmp_1;
  #line 1513 
  f->indices = (unsigned short)rss_i;
  #line 1514 
  f->mask = (unsigned short)((unsigned int)((unsigned short)(1UL << fls((unsigned int)(rss_i + -1)))) + 65535U);
  #line 1517 
  i = 0;
  #line 1517 
  while (i < pcs) {
    #line 1518 
    netdev_set_tc_queue(dev,(unsigned char)((int)((unsigned char)i)),(unsigned short)((int)((unsigned short)rss_i)),(unsigned short)((int)((unsigned short)rss_i) * (int)((unsigned short)i)));
    #line 1517 
    i ++;
  }
  #line 1520 
  interface->num_rx_queues = rss_i * pcs;
  #line 1521 
  interface->num_tx_queues = rss_i * pcs;
  #line 1523 
  return (_Bool)1;
}

#line 1534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_set_rss_queues(struct fm10k_intfc *interface)
{
  #line 1540 
  int tmp;
  #line 1540 
  unsigned short __UNIQUE_ID___x566;
  #line 1536 
  struct fm10k_ring_feature *f;
  #line 1537 
  u16 rss_i;
  #line 1539 
  f = & interface->ring_feature[0];
  {
    #line 1540 
    __UNIQUE_ID___x566 = interface->hw.mac.max_queues;
    #line 1540 
    unsigned short __UNIQUE_ID___y567 = f->limit;
    #line 1540 
    if ((int)__UNIQUE_ID___x566 < (int)__UNIQUE_ID___y567) 
                                                           #line 1540 
                                                           tmp = (int)__UNIQUE_ID___x566; else 
                                                                    #line 1540 
                                                                    tmp = (int)__UNIQUE_ID___y567;
    }
  #line 1540 
  rss_i = (unsigned short)tmp;
  #line 1543 
  f->indices = rss_i;
  #line 1544 
  f->mask = (unsigned short)((unsigned int)((unsigned short)(1UL << fls((unsigned int)((int)rss_i + -1)))) + 65535U);
  #line 1546 
  interface->num_rx_queues = (int)rss_i;
  #line 1547 
  interface->num_tx_queues = (int)rss_i;
  #line 1549 
  return (_Bool)1;
}

#line 1563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_set_num_queues(struct fm10k_intfc *interface)
{
  #line 1566 
  if ((int)fm10k_set_qos_queues(interface) != 0) 
                                                 #line 1567 
                                                 return;
  #line 1570 
  fm10k_set_rss_queues(interface);
  #line 1571 
  return;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_reset_num_queues(struct fm10k_intfc *interface)
{
  #line 1582 
  interface->num_tx_queues = 0;
  #line 1583 
  interface->num_rx_queues = 0;
  #line 1584 
  interface->num_q_vectors = 0;
  #line 1585 
  return;
}

#line 1599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int fm10k_alloc_q_vector(struct fm10k_intfc *interface, unsigned int v_count, unsigned int v_idx, unsigned int txr_count, unsigned int txr_idx, unsigned int rxr_count, unsigned int rxr_idx)
{
  #line 1604 
  struct fm10k_q_vector *q_vector;
  #line 1605 
  struct fm10k_ring *ring;
  #line 1606 
  int ring_count;
  #line 1608 
  ring_count = (int)(txr_count + rxr_count);
  #line 1611 
  q_vector = (struct fm10k_q_vector *)kzalloc_1(__ab_c_size((unsigned long)ring_count,4096UL,4096UL),3264U);
  #line 1612 
  if (q_vector == (struct fm10k_q_vector *)0) 
                                              #line 1613 
                                              return -12;
  #line 1616 
  netif_napi_add(interface->netdev,& q_vector->napi,& fm10k_poll,64);
  #line 1620 
  interface->q_vector[v_idx] = q_vector;
  #line 1621 
  q_vector->interface = interface;
  #line 1622 
  q_vector->v_idx = (unsigned short)v_idx;
  #line 1625 
  ring = (struct fm10k_ring *)(& q_vector->ring);
  #line 1628 
  q_vector->tx.ring = ring;
  #line 1629 
  q_vector->tx.work_limit = (unsigned short)256U;
  #line 1630 
  q_vector->tx.itr = interface->tx_itr;
  #line 1631 
  q_vector->tx.itr_scale = interface->hw.mac.itr_scale;
  #line 1632 
  q_vector->tx.count = (unsigned char)txr_count;
  #line 1634 
  while (txr_count != 0U) {
    #line 1636 
    ring->dev = & (interface->pdev)->dev;
    #line 1637 
    ring->netdev = interface->netdev;
    #line 1640 
    ring->q_vector = q_vector;
    #line 1643 
    ring->count = interface->tx_ring_count;
    #line 1644 
    ring->queue_index = (unsigned char)txr_idx;
    #line 1647 
    interface->tx_ring[txr_idx] = ring;
    #line 1650 
    txr_count --;
    #line 1651 
    txr_idx += v_count;
    #line 1654 
    ring ++;
  }
  #line 1658 
  q_vector->rx.ring = ring;
  #line 1659 
  q_vector->rx.itr = interface->rx_itr;
  #line 1660 
  q_vector->rx.itr_scale = interface->hw.mac.itr_scale;
  #line 1661 
  q_vector->rx.count = (unsigned char)rxr_count;
  #line 1663 
  while (rxr_count != 0U) {
    #line 1665 
    ring->dev = & (interface->pdev)->dev;
    #line 1666 
    ring->netdev = interface->netdev;
    {
      #line 1667 
      uintptr_t _r_a_p__v = (unsigned long)interface->l2_accel;
      #line 1669 
      ldv_inline_asm();
      {
        #line 1668 
        union __anonunion___u_8076 __u = {.__val = (struct fm10k_l2_accel *)_r_a_p__v};
        #line 1667 
        __write_once_size((void *)(& ring->l2_accel),(void *)(& __u.__c),8);
        #line 1667 
        struct fm10k_l2_accel *tmp_4 = __u.__val;
      }
    }
    #line 1670 
    ring->q_vector = q_vector;
    #line 1673 
    ring->count = interface->rx_ring_count;
    #line 1674 
    ring->queue_index = (unsigned char)rxr_idx;
    #line 1677 
    interface->rx_ring[rxr_idx] = ring;
    #line 1680 
    rxr_count --;
    #line 1681 
    rxr_idx += v_count;
    #line 1684 
    ring ++;
  }
  #line 1687 
  fm10k_dbg_q_vector_init(q_vector);
  #line 1689 
  return 0;
}

#line 1701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_free_q_vector(struct fm10k_intfc *interface, int v_idx)
{
  #line 1704 
  struct fm10k_ring *ring;
  #line 1703 
  struct fm10k_q_vector *q_vector = interface->q_vector[v_idx];
  #line 1706 
  fm10k_dbg_q_vector_exit(q_vector);
  #line 1708 
  ring = q_vector->tx.ring + (unsigned long)q_vector->tx.count;
  #line 1708 
  while (1) {
    #line 1708 
    ring --;
    #line 1708 
    ;
    #line 1708 
    if (! (ring >= q_vector->tx.ring)) 
                                       #line 1708 
                                       break;
    #line 1709 
    interface->tx_ring[(int)ring->queue_index] = (struct fm10k_ring *)0;
  }
  #line 1711 
  ring = q_vector->rx.ring + (unsigned long)q_vector->rx.count;
  #line 1711 
  while (1) {
    #line 1711 
    ring --;
    #line 1711 
    ;
    #line 1711 
    if (! (ring >= q_vector->rx.ring)) 
                                       #line 1711 
                                       break;
    #line 1712 
    interface->rx_ring[(int)ring->queue_index] = (struct fm10k_ring *)0;
  }
  #line 1714 
  interface->q_vector[v_idx] = (struct fm10k_q_vector *)0;
  #line 1715 
  netif_napi_del(& q_vector->napi);
  {
    #line 1716 
    struct fm10k_q_vector *___p = q_vector;
    #line 1716 
    if (___p != (struct fm10k_q_vector *)0) 
                                            #line 1716 
                                            kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))1528);
  }
  #line 1719 
  return;
}

#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int fm10k_alloc_q_vectors(struct fm10k_intfc *interface)
{
  #line 1732 
  int err;
  #line 1728 
  unsigned int q_vectors = (unsigned int)interface->num_q_vectors;
  #line 1729 
  unsigned int rxr_remaining = (unsigned int)interface->num_rx_queues;
  #line 1730 
  unsigned int txr_remaining = (unsigned int)interface->num_tx_queues;
  #line 1731 
  unsigned int rxr_idx = 0U;
  #line 1731 
  unsigned int txr_idx = 0U;
  #line 1731 
  unsigned int v_idx = 0U;
  #line 1734 
  if (rxr_remaining + txr_remaining <= q_vectors) 
    #line 1735 
    while (rxr_remaining != 0U) {
      #line 1736 
      err = fm10k_alloc_q_vector(interface,q_vectors,v_idx,0U,0U,1U,rxr_idx);
      #line 1738 
      if (err != 0) 
                    #line 1739 
                    goto err_out;
      #line 1742 
      rxr_remaining --;
      #line 1743 
      rxr_idx ++;
      #line 1735 
      v_idx ++;
    }
  #line 1747 
  while (v_idx < q_vectors) {
    {
      #line 1748 
      int rqpv = (int)((((q_vectors - v_idx) + rxr_remaining) + 4294967295U) / (q_vectors - v_idx));
      #line 1749 
      int tqpv = (int)((((q_vectors - v_idx) + txr_remaining) + 4294967295U) / (q_vectors - v_idx));
      #line 1751 
      err = fm10k_alloc_q_vector(interface,q_vectors,v_idx,(unsigned int)tqpv,txr_idx,(unsigned int)rqpv,rxr_idx);
      #line 1755 
      if (err != 0) 
                    #line 1756 
                    goto err_out;
      #line 1759 
      rxr_remaining -= (unsigned int)rqpv;
      #line 1760 
      txr_remaining -= (unsigned int)tqpv;
      #line 1761 
      rxr_idx ++;
      #line 1762 
      txr_idx ++;
    }
    #line 1747 
    v_idx ++;
  }
  #line 1765 
  return 0;
  #line 1767 
  err_out: 
           #line 1767 
  ;
  #line 1768 
  fm10k_reset_num_queues(interface);
  #line 1770 
  while (1) {
    #line 1770 
    unsigned int tmp;
    #line 1770 
    tmp = v_idx;
    #line 1770 
    v_idx --;
    #line 1770 
    ;
    #line 1770 
    if (! (tmp != 0U)) 
                       #line 1770 
                       break;
    #line 1771 
    fm10k_free_q_vector(interface,(int)v_idx);
  }
  #line 1773 
  return -12;
}

#line 1784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_free_q_vectors(struct fm10k_intfc *interface)
{
  #line 1786 
  int v_idx = interface->num_q_vectors;
  #line 1788 
  fm10k_reset_num_queues(interface);
  #line 1790 
  while (1) {
    #line 1790 
    int tmp;
    #line 1790 
    tmp = v_idx;
    #line 1790 
    v_idx --;
    #line 1790 
    ;
    #line 1790 
    if (! (tmp != 0)) 
                      #line 1790 
                      break;
    #line 1791 
    fm10k_free_q_vector(interface,v_idx);
  }
  #line 1792 
  return;
}

#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_reset_msix_capability(struct fm10k_intfc *interface)
{
  #line 1802 
  pci_disable_msix(interface->pdev);
  #line 1803 
  kfree((void *)interface->msix_entries);
  #line 1804 
  interface->msix_entries = (struct msix_entry *)0;
  #line 1805 
  return;
}

#line 1814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static int fm10k_init_msix_capability(struct fm10k_intfc *interface)
{
  #line 1825 
  int __UNIQUE_ID___x568;
  #line 1825 
  int tmp;
  #line 1826 
  unsigned short __UNIQUE_ID___x570;
  #line 1826 
  int tmp_2;
  #line 1837 
  int __UNIQUE_ID___x572;
  #line 1837 
  int tmp_4;
  #line 1817 
  int v_budget;
  #line 1817 
  int vector;
  #line 1816 
  struct fm10k_hw *hw = & interface->hw;
  {
    #line 1825 
    __UNIQUE_ID___x568 = interface->num_rx_queues;
    #line 1825 
    int __UNIQUE_ID___y569 = interface->num_tx_queues;
    #line 1825 
    if (__UNIQUE_ID___x568 > __UNIQUE_ID___y569) 
                                                 #line 1825 
                                                 tmp = __UNIQUE_ID___x568; else 
                                                                    #line 1825 
                                                                    tmp = __UNIQUE_ID___y569;
    }
  #line 1825 
  v_budget = tmp;
  {
    #line 1826 
    __UNIQUE_ID___x570 = (unsigned short)v_budget;
    #line 1826 
    unsigned short __UNIQUE_ID___y571 = (unsigned short)num_online_cpus_0();
    #line 1826 
    if ((int)__UNIQUE_ID___x570 < (int)__UNIQUE_ID___y571) 
                                                           #line 1826 
                                                           tmp_2 = (int)__UNIQUE_ID___x570; else 
                                                                    #line 1826 
                                                                    tmp_2 = (int)__UNIQUE_ID___y571;
    }
  #line 1826 
  v_budget = tmp_2;
  #line 1829 
  v_budget ++;
  {
    #line 1837 
    __UNIQUE_ID___x572 = v_budget;
    #line 1837 
    int __UNIQUE_ID___y573 = (int)hw->mac.max_msix_vectors;
    #line 1837 
    if (__UNIQUE_ID___x572 < __UNIQUE_ID___y573) 
                                                 #line 1837 
                                                 tmp_4 = __UNIQUE_ID___x572; else 
                                                                    #line 1837 
                                                                    tmp_4 = __UNIQUE_ID___y573;
    }
  #line 1837 
  v_budget = tmp_4;
  #line 1840 
  interface->msix_entries = (struct msix_entry *)kcalloc((unsigned long)v_budget,8UL,3264U);
  #line 1842 
  if (interface->msix_entries == (struct msix_entry *)0) 
                                                         #line 1843 
                                                         return -12;
  #line 1846 
  vector = 0;
  #line 1846 
  while (vector < v_budget) {
    #line 1847 
    (interface->msix_entries + (unsigned long)vector)->entry = (unsigned short)vector;
    #line 1846 
    vector ++;
  }
  #line 1850 
  v_budget = pci_enable_msix_range(interface->pdev,interface->msix_entries,2,v_budget);
  #line 1854 
  if (v_budget < 0) {
    #line 1855 
    kfree((void *)interface->msix_entries);
    #line 1856 
    interface->msix_entries = (struct msix_entry *)0;
    #line 1857 
    return v_budget;
  }
  #line 1861 
  interface->num_q_vectors = v_budget + -1;
  #line 1863 
  return 0;
}

#line 1872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static bool fm10k_cache_ring_qos(struct fm10k_intfc *interface)
{
  #line 1875 
  int pc;
  #line 1875 
  int offset;
  #line 1875 
  int rss_i;
  #line 1875 
  int i;
  #line 1874 
  struct net_device *dev = interface->netdev;
  #line 1876 
  u16 pc_stride = (unsigned short)((unsigned int)interface->ring_feature[1].mask + 1U);
  #line 1877 
  u8 num_pcs = (unsigned char)netdev_get_num_tc(dev);
  #line 1879 
  if ((unsigned int)num_pcs <= 1U) 
                                   #line 1880 
                                   return (_Bool)0;
  #line 1882 
  rss_i = (int)interface->ring_feature[0].indices;
  #line 1884 
  pc = 0;
  #line 1884 
  offset = 0;
  #line 1884 
  while ((int)num_pcs > pc) {
    {
      #line 1885 
      int q_idx = pc;
      #line 1887 
      i = 0;
      #line 1887 
      while (i < rss_i) {
        #line 1888 
        (interface->tx_ring[offset + i])->reg_idx = (unsigned char)q_idx;
        #line 1889 
        (interface->tx_ring[offset + i])->qos_pc = (unsigned char)pc;
        #line 1890 
        (interface->rx_ring[offset + i])->reg_idx = (unsigned char)q_idx;
        #line 1891 
        (interface->rx_ring[offset + i])->qos_pc = (unsigned char)pc;
        #line 1892 
        q_idx = (int)pc_stride + q_idx;
        #line 1887 
        i ++;
      }
    }
    #line 1884 
    pc ++;
    #line 1884 
    offset += rss_i;
  }
  #line 1896 
  return (_Bool)1;
}

#line 1905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_cache_ring_rss(struct fm10k_intfc *interface)
{
  #line 1907 
  int i;
  #line 1909 
  i = 0;
  #line 1909 
  while (interface->num_rx_queues > i) {
    #line 1910 
    (interface->rx_ring[i])->reg_idx = (unsigned char)i;
    #line 1909 
    i ++;
  }
  #line 1912 
  i = 0;
  #line 1912 
  while (interface->num_tx_queues > i) {
    #line 1913 
    (interface->tx_ring[i])->reg_idx = (unsigned char)i;
    #line 1912 
    i ++;
  }
  #line 1914 
  return;
}

#line 1924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_assign_rings(struct fm10k_intfc *interface)
{
  #line 1926 
  if ((int)fm10k_cache_ring_qos(interface) != 0) 
                                                 #line 1927 
                                                 return;
  #line 1929 
  fm10k_cache_ring_rss(interface);
  #line 1930 
  return;
}

#line 1932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
static void fm10k_init_reta(struct fm10k_intfc *interface)
{
  #line 1934 
  u16 i;
  #line 1935 
  u32 reta;
  #line 1934 
  u16 rss_i = interface->ring_feature[0].indices;
  #line 1940 
  if ((int)netif_is_rxfh_configured(interface->netdev) != 0) {
    #line 1941 
    i = (unsigned short)32U;
    #line 1941 
    while (1) {
      #line 1941 
      u16 tmp;
      #line 1941 
      tmp = i;
      #line 1941 
      i = (u16)((int)i - 1);
      #line 1941 
      ;
      #line 1941 
      if (! ((unsigned int)tmp != 0U)) 
                                       #line 1941 
                                       break;
      #line 1942 
      reta = interface->reta[(int)i];
      #line 1943 
      if ((((reta & 255U) < (unsigned int)rss_i && (reta << 16) >> 24 < (unsigned int)rss_i) && (reta << 8) >> 24 < (unsigned int)rss_i) && reta >> 24 < (unsigned int)rss_i) 
        #line 1947 
        goto __Cont;
      #line 1950 
      _dev_err(& (interface->pdev)->dev,(char *)"RSS indirection table assigned flows out of queue bounds. Reconfiguring.\n");
      #line 1952 
      goto repopulate_reta;
      #line 1941 
      __Cont: 
              #line 1941 
      ;
    }
    #line 1956 
    return;
  }
  #line 1959 
  repopulate_reta: 
                   #line 1959 
  ;
  #line 1960 
  fm10k_write_reta(interface,(u32 *)0U);
  #line 1961 
  return;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
int fm10k_init_queueing_scheme(struct fm10k_intfc *interface)
{
  #line 1973 
  int err;
  #line 1976 
  fm10k_set_num_queues(interface);
  #line 1979 
  err = fm10k_init_msix_capability(interface);
  #line 1980 
  if (err != 0) {
    #line 1981 
    _dev_err(& (interface->pdev)->dev,(char *)"Unable to initialize MSI-X capability\n");
    #line 1983 
    goto err_init_msix;
  }
  #line 1987 
  err = fm10k_alloc_q_vectors(interface);
  #line 1988 
  if (err != 0) {
    #line 1989 
    _dev_err(& (interface->pdev)->dev,(char *)"Unable to allocate queue vectors\n");
    #line 1991 
    goto err_alloc_q_vectors;
  }
  #line 1995 
  fm10k_assign_rings(interface);
  #line 1998 
  fm10k_init_reta(interface);
  #line 2000 
  return 0;
  #line 2002 
  err_alloc_q_vectors: 
                       #line 2002 
  ;
  #line 2003 
  fm10k_reset_msix_capability(interface);
  #line 2004 
  err_init_msix: 
                 #line 2004 
  ;
  #line 2005 
  fm10k_reset_num_queues(interface);
  #line 2006 
  return err;
}

#line 2016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_main.c"
void fm10k_clear_queueing_scheme(struct fm10k_intfc *interface)
{
  #line 2018 
  fm10k_free_q_vectors(interface);
  #line 2019 
  fm10k_reset_msix_capability(interface);
  #line 2020 
  return;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
void emg_fm10k_exit_module(void)
{
  #line 110 
  fm10k_exit_module();
  #line 111 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
int emg_fm10k_init_module(void)
{
  #line 114 
  return fm10k_init_module();
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 135 
  ldv_set_bit(nr,addr);
  #line 136 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr)
{
  #line 142 
  ldv_clear_bit(nr,addr);
  #line 143 
  return;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 198 
  ldv_atomic_inc(v);
  #line 199 
  return;
}

#line 427  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 430 
  return ldv_kcalloc(n,size,flags);
}

#line 448  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_main.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 451 
  return ldv_kzalloc(size,flags);
}

#line 2100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
  #line 2102 
  if ((int)tc >= (int)dev->num_tc) 
                                   #line 2103 
                                   return -22;
  #line 2105 
  dev->prio_tc_map[(int)prio & 15] = (unsigned char)((unsigned int)tc & 15U);
  #line 2106 
  return 0;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
static int fm10k_dcbnl_ieee_getets(struct net_device *dev, struct ieee_ets *ets)
{
  #line 13 
  int i;
  #line 16 
  ets->ets_cap = (unsigned char)8U;
  #line 17 
  ets->cbs = (unsigned char)0U;
  #line 20 
  memset((void *)(& ets->tc_tx_bw),0,8UL);
  #line 21 
  memset((void *)(& ets->tc_rx_bw),0,8UL);
  #line 22 
  memset((void *)(& ets->tc_tsa),0,8UL);
  #line 25 
  i = 0;
  #line 25 
  while (i <= 7) {
    #line 26 
    ets->prio_tc[i] = (unsigned char)netdev_get_prio_tc_map(dev,(unsigned int)i);
    #line 25 
    i ++;
  }
  #line 28 
  return 0;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
static int fm10k_dcbnl_ieee_setets(struct net_device *dev, struct ieee_ets *ets)
{
  #line 39 
  int i;
  #line 38 
  u8 num_tc = (unsigned char)0U;
  #line 42 
  i = 0;
  #line 42 
  while (i <= 7) {
    #line 43 
    if ((unsigned int)ets->tc_tx_bw[i] != 0U || (unsigned int)ets->tc_rx_bw[i] != 0U) 
      #line 44 
      return -22;
    #line 45 
    if ((unsigned int)ets->tc_tsa[i] != 0U) 
                                            #line 46 
                                            return -22;
    #line 47 
    if ((int)ets->prio_tc[i] > (int)num_tc) 
                                            #line 48 
                                            num_tc = ets->prio_tc[i];
    #line 42 
    i ++;
  }
  #line 52 
  if ((unsigned int)num_tc != 0U) 
                                  #line 53 
                                  num_tc = (u8)((int)num_tc + 1);
  #line 55 
  if ((unsigned int)num_tc > 8U) 
                                 #line 56 
                                 return -22;
  #line 59 
  ;
  #line 59 
  if ((int)num_tc != netdev_get_num_tc(dev)) {
    #line 60 
    int err = fm10k_setup_tc(dev,(unsigned char)((int)num_tc));
    #line 61 
    if (err != 0) 
                  #line 62 
                  return err;
  }
  #line 66 
  i = 0;
  #line 66 
  while (i <= 7) {
    #line 67 
    netdev_set_prio_tc_map(dev,(unsigned char)((int)((unsigned char)i)),(unsigned char)((int)ets->prio_tc[i]));
    #line 66 
    i ++;
  }
  #line 69 
  return 0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
static int fm10k_dcbnl_ieee_getpfc(struct net_device *dev, struct ieee_pfc *pfc)
{
  #line 79 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 82 
  pfc->pfc_cap = (unsigned char)8U;
  #line 83 
  pfc->pfc_en = interface->pfc_en;
  #line 85 
  return 0;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
static int fm10k_dcbnl_ieee_setpfc(struct net_device *dev, struct ieee_pfc *pfc)
{
  #line 95 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 98 
  interface->pfc_en = pfc->pfc_en;
  #line 101 
  if ((int)netif_running(dev) != 0) 
                                    #line 102 
                                    fm10k_update_rx_drop_en(interface);
  #line 104 
  return 0;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
static u8 fm10k_dcbnl_getdcbx(struct net_device *dev)
{
  #line 115 
  return (unsigned char)9U;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
static u8 fm10k_dcbnl_setdcbx(struct net_device *dev, u8 mode)
{
  #line 127 
  return (unsigned char)((unsigned int)mode != 9U);
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
static struct dcbnl_rtnl_ops fm10k_dcbnl_ops = {.ieee_getets = & fm10k_dcbnl_ieee_getets, .ieee_setets = & fm10k_dcbnl_ieee_setets, .ieee_getpfc = & fm10k_dcbnl_ieee_getpfc, .ieee_setpfc = & fm10k_dcbnl_ieee_setpfc, .getdcbx = & fm10k_dcbnl_getdcbx, .setdcbx = & fm10k_dcbnl_setdcbx};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_dcbnl.c"
void fm10k_dcbnl_set_ops(struct net_device *dev)
{
  #line 148 
  struct fm10k_intfc *interface = netdev_priv(dev);
  #line 149 
  struct fm10k_hw *hw = & interface->hw;
  #line 151 
  if (hw->mac.type == (unsigned int)fm10k_mac_pf) 
                                                  #line 152 
                                                  dev->dcbnl_ops = & fm10k_dcbnl_ops;
  #line 153 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 748  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
static int cif_seq_open(struct file *ldv_func_arg1, struct seq_operations *ldv_func_arg2);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 109 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 110 
#line 110 
loff_t seq_lseek(struct file *, loff_t, int);
#line 111 
#line 111 
int seq_release(struct inode *, struct file *);
#line 117 
#line 117 
void seq_printf(struct seq_file *, char * , ...);
#line 118 
#line 118 
void seq_putc(struct seq_file *, char);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 764  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 756  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static struct dentry *dbg_root;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static void *fm10k_dbg_desc_seq_start(struct seq_file *s, loff_t *pos)
{
  #line 17 
  void *tmp;
  #line 15 
  struct fm10k_ring *ring = (struct fm10k_ring *)s->private;
  #line 17 
  if (*pos < (long long)ring->count) 
                                     #line 17 
                                     tmp = (void *)pos; else 
                                                             #line 17 
                                                             tmp = (void *)0;
  #line 17 
  return tmp;
}

#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static void *fm10k_dbg_desc_seq_next(struct seq_file *s, void *v, loff_t *pos)
{
  #line 26 
  void *tmp;
  #line 24 
  struct fm10k_ring *ring = (struct fm10k_ring *)s->private;
  #line 26 
  (*pos) ++;
  #line 26 
  ;
  #line 26 
  if (*pos < (long long)ring->count) 
                                     #line 26 
                                     tmp = (void *)pos; else 
                                                             #line 26 
                                                             tmp = (void *)0;
  #line 26 
  return tmp;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static void fm10k_dbg_desc_seq_stop(struct seq_file *s, void *v)
{
  #line 31 
  return;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static void fm10k_dbg_desc_break(struct seq_file *s, int i)
{
  #line 37 
  while (1) {
    #line 37 
    int tmp;
    #line 37 
    tmp = i;
    #line 37 
    i --;
    #line 37 
    ;
    #line 37 
    if (! (tmp != 0)) 
                      #line 37 
                      break;
    #line 38 
    seq_putc(s,(char)45);
  }
  #line 40 
  seq_putc(s,(char)10);
  #line 41 
  return;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static int fm10k_dbg_tx_desc_seq_show(struct seq_file *s, void *v)
{
  #line 45 
  struct fm10k_ring *ring = (struct fm10k_ring *)s->private;
  #line 46 
  int i = (int)*((loff_t *)v);
  #line 47 
  char tx_desc_hdr[58U] = {(char)'D', (char)'E', (char)'S', (char)' ', (char)'B', (char)'U', (char)'F', (char)'F', (char)'E', (char)'R', (char)'_', (char)'A', (char)'D', (char)'D', (char)'R', (char)'E', (char)'S', (char)'S', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'L', (char)'E', (char)'N', (char)'G', (char)'T', (char)'H', (char)' ', (char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)' ', (char)' ', (char)'M', (char)'S', (char)'S', (char)' ', (char)' ', (char)' ', (char)' ', (char)'H', (char)'D', (char)'R', (char)'L', (char)'E', (char)'N', (char)' ', (char)'F', (char)'L', (char)'A', (char)'G', (char)'S', (char)'\n', (char)'\000'};
  #line 51 
  if (i == 0) {
    #line 52 
    seq_printf(s,(char *)(& tx_desc_hdr));
    #line 53 
    fm10k_dbg_desc_break(s,57);
  }
  #line 57 
  if (ring->desc == (void *)0) 
                               #line 58 
                               seq_printf(s,(char *)"%03X Descriptor ring not allocated.\n",i);
  else {
    #line 60 
    struct fm10k_tx_desc *txd = (struct fm10k_tx_desc *)ring->desc + (unsigned long)i;
    #line 62 
    seq_printf(s,(char *)"%03X %#018llx %#06x %#06x %#06x %#06x %#04x\n",i,txd->buffer_addr,(int)txd->buflen,(int)txd->vlan,(int)txd->mss,(int)txd->hdrlen,(int)txd->flags);
  }
  #line 67 
  return 0;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static int fm10k_dbg_rx_desc_seq_show(struct seq_file *s, void *v)
{
  #line 72 
  struct fm10k_ring *ring = (struct fm10k_ring *)s->private;
  #line 73 
  int i = (int)*((loff_t *)v);
  #line 74 
  char rx_desc_hdr[76U] = {(char)'D', (char)'E', (char)'S', (char)' ', (char)'D', (char)'A', (char)'T', (char)'A', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'R', (char)'S', (char)'S', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'S', (char)'T', (char)'A', (char)'T', (char)'E', (char)'R', (char)'R', (char)' ', (char)' ', (char)' ', (char)' ', (char)'L', (char)'E', (char)'N', (char)'G', (char)'T', (char)'H', (char)' ', (char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)' ', (char)' ', (char)'D', (char)'G', (char)'L', (char)'O', (char)'R', (char)'T', (char)' ', (char)'S', (char)'G', (char)'L', (char)'O', (char)'R', (char)'T', (char)' ', (char)'T', (char)'I', (char)'M', (char)'E', (char)'S', (char)'T', (char)'A', (char)'M', (char)'P', (char)'\n', (char)'\000'};
  #line 78 
  if (i == 0) {
    #line 79 
    seq_printf(s,(char *)(& rx_desc_hdr));
    #line 80 
    fm10k_dbg_desc_break(s,75);
  }
  #line 84 
  if (ring->desc == (void *)0) 
                               #line 85 
                               seq_printf(s,(char *)"%03X Descriptor ring not allocated.\n",i);
  else {
    #line 87 
    union fm10k_rx_desc *rxd = (union fm10k_rx_desc *)ring->desc + (unsigned long)i;
    #line 89 
    seq_printf(s,(char *)"%03X %#010x %#010x %#010x %#06x %#06x %#06x %#06x %#018llx\n",i,rxd->d.data,rxd->d.rss,rxd->d.staterr,(int)rxd->w.length,(int)rxd->w.vlan,(int)rxd->w.dglort,(int)rxd->w.sglort,rxd->q.timestamp);
  }
  #line 96 
  return 0;
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static struct seq_operations fm10k_dbg_tx_desc_seq_ops = {.start = & fm10k_dbg_desc_seq_start, .stop = & fm10k_dbg_desc_seq_stop, .next = & fm10k_dbg_desc_seq_next, .show = & fm10k_dbg_tx_desc_seq_show};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static struct seq_operations fm10k_dbg_rx_desc_seq_ops = {.start = & fm10k_dbg_desc_seq_start, .stop = & fm10k_dbg_desc_seq_stop, .next = & fm10k_dbg_desc_seq_next, .show = & fm10k_dbg_rx_desc_seq_show};
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static int fm10k_dbg_desc_open(struct inode *inode, struct file *filep)
{
  #line 117 
  struct seq_operations *desc_seq_ops;
  #line 118 
  int err;
  #line 115 
  struct fm10k_ring *ring = (struct fm10k_ring *)inode->i_private;
  #line 116 
  struct fm10k_q_vector *q_vector = ring->q_vector;
  #line 120 
  if (q_vector->rx.ring > ring) 
                                #line 121 
                                desc_seq_ops = & fm10k_dbg_tx_desc_seq_ops; else 
                                                                    #line 123 
                                                                    desc_seq_ops = & fm10k_dbg_rx_desc_seq_ops;
  #line 125 
  err = cif_seq_open(filep,desc_seq_ops);
  #line 126 
  if (err != 0) 
                #line 127 
                return err;
  #line 129 
  ((struct seq_file *)filep->private_data)->private = (void *)ring;
  #line 131 
  return 0;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
static struct file_operations fm10k_dbg_desc_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & fm10k_dbg_desc_open, .release = & seq_release};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
void fm10k_dbg_q_vector_init(struct fm10k_q_vector *q_vector)
{
  #line 153 
  char name[16U];
  #line 154 
  int i;
  #line 152 
  struct fm10k_intfc *interface = q_vector->interface;
  #line 156 
  if (interface->dbg_intfc == (struct dentry *)0) 
                                                  #line 157 
                                                  return;
  #line 160 
  snprintf((char *)(& name),16UL,(char *)"q_vector.%03d",(int)q_vector->v_idx);
  #line 162 
  q_vector->dbg_q_vector = cif_debugfs_create_dir((char *)(& name),interface->dbg_intfc);
  #line 165 
  i = 0;
  #line 165 
  while ((int)q_vector->tx.count > i) {
    {
      #line 166 
      struct fm10k_ring *ring = q_vector->tx.ring + (unsigned long)i;
      #line 168 
      snprintf((char *)(& name),16UL,(char *)"tx_ring.%03d",(int)ring->queue_index);
      #line 170 
      cif_debugfs_create_file((char *)(& name),(unsigned short)384,q_vector->dbg_q_vector,(void *)ring,& fm10k_dbg_desc_fops);
    }
    #line 165 
    i ++;
  }
  #line 176 
  i = 0;
  #line 176 
  while ((int)q_vector->rx.count > i) {
    {
      #line 177 
      struct fm10k_ring *ring_0 = q_vector->rx.ring + (unsigned long)i;
      #line 179 
      snprintf((char *)(& name),16UL,(char *)"rx_ring.%03d",(int)ring_0->queue_index);
      #line 181 
      cif_debugfs_create_file((char *)(& name),(unsigned short)384,q_vector->dbg_q_vector,(void *)ring_0,& fm10k_dbg_desc_fops);
    }
    #line 176 
    i ++;
  }
  #line 185 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
void fm10k_dbg_q_vector_exit(struct fm10k_q_vector *q_vector)
{
  #line 193 
  struct fm10k_intfc *interface = q_vector->interface;
  #line 195 
  if (interface->dbg_intfc != (struct dentry *)0) 
                                                  #line 196 
                                                  debugfs_remove_recursive(q_vector->dbg_q_vector);
  #line 197 
  q_vector->dbg_q_vector = (struct dentry *)0;
  #line 198 
  return;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
void fm10k_dbg_intfc_init(struct fm10k_intfc *interface)
{
  #line 207 
  char *name = pci_name(interface->pdev);
  #line 209 
  if (dbg_root != (struct dentry *)0) 
                                      #line 210 
                                      interface->dbg_intfc = cif_debugfs_create_dir(name,dbg_root);
  #line 211 
  return;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
void fm10k_dbg_intfc_exit(struct fm10k_intfc *interface)
{
  #line 219 
  if (dbg_root != (struct dentry *)0) 
                                      #line 220 
                                      debugfs_remove_recursive(interface->dbg_intfc);
  #line 221 
  interface->dbg_intfc = (struct dentry *)0;
  #line 222 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
void fm10k_dbg_init(void)
{
  #line 229 
  dbg_root = cif_debugfs_create_dir((char *)(& fm10k_driver_name),(struct dentry *)0);
  #line 230 
  return;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/fm10k/fm10k_debugfs.c"
void fm10k_dbg_exit(void)
{
  #line 237 
  debugfs_remove_recursive(dbg_root);
  #line 238 
  dbg_root = (struct dentry *)0;
  #line 239 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
struct file_operations *emg_alias_fm10k_dbg_desc_fops = & fm10k_dbg_desc_fops;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
struct seq_operations *emg_alias_fm10k_dbg_rx_desc_seq_ops = & fm10k_dbg_rx_desc_seq_ops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
struct seq_operations *emg_alias_fm10k_dbg_tx_desc_seq_ops = & fm10k_dbg_tx_desc_seq_ops;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
int (*emg_alias_seq_release)(struct inode *, struct file *) = & seq_release;
#line 101 
#line 101 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 102 
#line 102 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 112 
#line 112 
int emg_seq_open(struct file *arg0, struct seq_operations *arg1);
#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
int emg_wrapper_fm10k_dbg_desc_open(struct inode *arg0, struct file *arg1)
{
  #line 118 
  return fm10k_dbg_desc_open(arg0,arg1);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
void *emg_wrapper_fm10k_dbg_desc_seq_next(struct seq_file *arg0, void *arg1, long long *arg2)
{
  #line 123 
  return fm10k_dbg_desc_seq_next(arg0,arg1,arg2);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
void *emg_wrapper_fm10k_dbg_desc_seq_start(struct seq_file *arg0, long long *arg1)
{
  #line 128 
  return fm10k_dbg_desc_seq_start(arg0,arg1);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
void emg_wrapper_fm10k_dbg_desc_seq_stop(struct seq_file *arg0, void *arg1)
{
  #line 133 
  fm10k_dbg_desc_seq_stop(arg0,arg1);
  #line 134 
  return;
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
int emg_wrapper_fm10k_dbg_rx_desc_seq_show(struct seq_file *arg0, void *arg1)
{
  #line 138 
  return fm10k_dbg_rx_desc_seq_show(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
int emg_wrapper_fm10k_dbg_tx_desc_seq_show(struct seq_file *arg0, void *arg1)
{
  #line 143 
  return fm10k_dbg_tx_desc_seq_show(arg0,arg1);
}

#line 748  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
static int cif_seq_open(struct file *ldv_func_arg1, struct seq_operations *ldv_func_arg2)
{
  #line 752 
  return emg_seq_open(ldv_func_arg1,ldv_func_arg2);
}

#line 756  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 760 
  return emg_debugfs_create_dir(name,parent);
}

#line 764  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/0/concurrency safety/weaver/fm10k_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 768 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR_0(long error)
{
  #line 26 
  return (void *)error;
}

#line 82  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 144 
#line 260 
void emg_dispatch_deregister_10(struct pci_driver *arg0);
#line 145 
#line 344 
void emg_dispatch_deregister_16(struct net_device *arg0);
#line 146 
#line 213 
void emg_dispatch_instance_deregister_6(struct timer_list *arg0);
#line 147 
#line 249 
void emg_dispatch_instance_register_9(struct timer_list *arg0);
#line 148 
#line 222 
void emg_dispatch_irq_deregister_7(int arg0);
#line 149 
#line 280 
void emg_dispatch_irq_register_14(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 150 
#line 269 
void emg_dispatch_register_13(struct net_device *arg0);
#line 151 
#line 322 
void emg_dispatch_register_15(struct seq_file *arg0, struct seq_operations *arg1);
#line 152 
#line 191 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 153 
#line 202 
void emg_dispatch_register_5(struct file_operations *arg0);
#line 154 
#line 3290 
void *emg_entry_point_insmod(void *arg0);
#line 155 
#line 353 
void *emg_file_operations_character_driver_scenario_fm10k_dbg_desc_fops(void *arg0);
#line 158 
#line 530 
void *emg_interrupt_interrupt_scenario_fm10k_msix_clean_rings(void *arg0);
#line 159 
#line 593 
void *emg_interrupt_interrupt_scenario_fm10k_msix_mbx_pf(void *arg0);
#line 160 
#line 656 
void *emg_interrupt_interrupt_scenario_fm10k_msix_mbx_vf(void *arg0);
#line 162 
#line 719 
void *emg_net_random_allocationless_scenario_fm10k_get_channels(void *arg0);
#line 163 
#line 1360 
void *emg_pci_pci_scenario_fm10k_driver(void *arg0);
#line 165 
#line 1539 
void *emg_pm_pm_ops_scenario_fm10k_pm_ops(void *arg0);
#line 171 
#line 2534 
void *emg_seq_operations_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops(void *arg0);
#line 172 
#line 2691 
void *emg_seq_operations_traverse_kernel_items_scenario_fm10k_dbg_tx_desc_seq_ops(void *arg0);
#line 173 
#line 2848 
void *emg_timer_timer_scenario_9(void *arg0);
#line 175 
#line 3319 
int main(void);
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 192 
  int ret;
  #line 193 
  struct emg_struct_pci_scenario_fm10k_driver_22 *cf_arg_22;
  #line 194 
  cf_arg_22 = (struct emg_struct_pci_scenario_fm10k_driver_22 *)ldv_xmalloc(16UL);
  #line 195 
  cf_arg_22->arg0 = arg0;
  #line 196 
  ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_pci_pci_scenario_fm10k_driver,(void *)cf_arg_22);
  #line 197 
  __VERIFIER_assume(ret == 0);
  #line 198 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct file_operations *arg0)
{
  #line 203 
  int ret;
  #line 204 
  struct emg_struct_character_driver_scenario_fm10k_dbg_desc_fops_17 *cf_arg_17;
  #line 205 
  cf_arg_17 = (struct emg_struct_character_driver_scenario_fm10k_dbg_desc_fops_17 *)ldv_xmalloc(16UL);
  #line 206 
  cf_arg_17->arg0 = arg0;
  #line 207 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fm10k_dbg_desc_fops,(void *)cf_arg_17);
  #line 208 
  __VERIFIER_assume(ret == 0);
  #line 209 
  return;
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_6(struct timer_list *arg0)
{
  #line 214 
  int ret;
  #line 215 
  struct emg_struct_timer_scenario_9_26 *cf_arg_26;
  #line 216 
  ret = pthread_join(emg_thread_26,(void **)0);
  #line 217 
  __VERIFIER_assume(ret == 0);
  #line 218 
  return;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_7(int arg0)
{
  #line 223 
  int ret;
  #line 224 
  struct emg_struct_free_irq_7 *cf_arg_18;
  #line 225 
  struct emg_struct_free_irq_7 *cf_arg_19;
  #line 226 
  struct emg_struct_free_irq_7 *cf_arg_20;
  #line 227 
  switch (ldv_undef_int()) {
    #line 228 
    case 0: 
            #line 228 
    ;
    #line 229 
    ret = pthread_join(emg_thread_18,(void **)0);
    #line 230 
    __VERIFIER_assume(ret == 0);
    #line 231 
    break;
    #line 233 
    case 1: 
            #line 233 
    ;
    #line 234 
    ret = pthread_join(emg_thread_19,(void **)0);
    #line 235 
    __VERIFIER_assume(ret == 0);
    #line 236 
    break;
    #line 238 
    case 2: 
            #line 238 
    ;
    #line 239 
    ret = pthread_join(emg_thread_20,(void **)0);
    #line 240 
    __VERIFIER_assume(ret == 0);
    #line 241 
    break;
    #line 243 
    default: 
             #line 243 
    ;
    #line 243 
    __VERIFIER_assume(0);
  }
  #line 245 
  return;
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_9(struct timer_list *arg0)
{
  #line 250 
  int ret;
  #line 251 
  struct emg_struct_timer_scenario_9_26 *cf_arg_26;
  #line 252 
  cf_arg_26 = (struct emg_struct_timer_scenario_9_26 *)ldv_xmalloc(16UL);
  #line 253 
  cf_arg_26->arg0 = arg0;
  #line 254 
  ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_timer_timer_scenario_9,(void *)cf_arg_26);
  #line 255 
  __VERIFIER_assume(ret == 0);
  #line 256 
  return;
}

#line 260  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_10(struct pci_driver *arg0)
{
  #line 261 
  int ret;
  #line 262 
  struct emg_struct_pci_scenario_fm10k_driver_22 *cf_arg_22;
  #line 263 
  ret = pthread_join(emg_thread_22,(void **)0);
  #line 264 
  __VERIFIER_assume(ret == 0);
  #line 265 
  return;
}

#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_13(struct net_device *arg0)
{
  #line 270 
  int ret;
  #line 271 
  struct emg_struct_random_allocationless_scenario_fm10k_get_channels_21 *cf_arg_21;
  #line 272 
  cf_arg_21 = (struct emg_struct_random_allocationless_scenario_fm10k_get_channels_21 *)ldv_xmalloc(16UL);
  #line 273 
  cf_arg_21->arg0 = arg0;
  #line 274 
  ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_fm10k_get_channels,(void *)cf_arg_21);
  #line 275 
  __VERIFIER_assume(ret == 0);
  #line 276 
  return;
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_14(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 281 
  int ret;
  #line 282 
  struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *cf_arg_18;
  #line 283 
  struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *cf_arg_19;
  #line 284 
  struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *cf_arg_20;
  #line 285 
  switch (ldv_undef_int()) {
    #line 286 
    case 0: 
            #line 286 
    ;
    #line 287 
    cf_arg_18 = (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)ldv_xmalloc(40UL);
    #line 288 
    cf_arg_18->arg0 = arg0;
    #line 289 
    cf_arg_18->arg1 = arg1;
    #line 290 
    cf_arg_18->arg2 = arg2;
    #line 291 
    cf_arg_18->arg3 = arg3;
    #line 292 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_fm10k_msix_clean_rings,(void *)cf_arg_18);
    #line 293 
    __VERIFIER_assume(ret == 0);
    #line 294 
    break;
    #line 296 
    case 1: 
            #line 296 
    ;
    #line 297 
    cf_arg_19 = (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)ldv_xmalloc(40UL);
    #line 298 
    cf_arg_19->arg0 = arg0;
    #line 299 
    cf_arg_19->arg1 = arg1;
    #line 300 
    cf_arg_19->arg2 = arg2;
    #line 301 
    cf_arg_19->arg3 = arg3;
    #line 302 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_fm10k_msix_mbx_pf,(void *)cf_arg_19);
    #line 303 
    __VERIFIER_assume(ret == 0);
    #line 304 
    break;
    #line 306 
    case 2: 
            #line 306 
    ;
    #line 307 
    cf_arg_20 = (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)ldv_xmalloc(40UL);
    #line 308 
    cf_arg_20->arg0 = arg0;
    #line 309 
    cf_arg_20->arg1 = arg1;
    #line 310 
    cf_arg_20->arg2 = arg2;
    #line 311 
    cf_arg_20->arg3 = arg3;
    #line 312 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_fm10k_msix_mbx_vf,(void *)cf_arg_20);
    #line 313 
    __VERIFIER_assume(ret == 0);
    #line 314 
    break;
    #line 316 
    default: 
             #line 316 
    ;
    #line 316 
    __VERIFIER_assume(0);
  }
  #line 318 
  return;
}

#line 322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_15(struct seq_file *arg0, struct seq_operations *arg1)
{
  #line 323 
  int ret;
  #line 324 
  struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *cf_arg_24;
  #line 325 
  struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *cf_arg_25;
  #line 326 
  if (ldv_undef_int() != 0) {
    #line 327 
    cf_arg_24 = (struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *)ldv_xmalloc(24UL);
    #line 328 
    cf_arg_24->arg0 = arg0;
    #line 329 
    cf_arg_24->arg1 = arg1;
    #line 330 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_seq_operations_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops,(void *)cf_arg_24);
    #line 331 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 334 
    cf_arg_25 = (struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *)ldv_xmalloc(24UL);
    #line 335 
    cf_arg_25->arg0 = arg0;
    #line 336 
    cf_arg_25->arg1 = arg1;
    #line 337 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_seq_operations_traverse_kernel_items_scenario_fm10k_dbg_tx_desc_seq_ops,(void *)cf_arg_25);
    #line 338 
    __VERIFIER_assume(ret == 0);
  }
  #line 340 
  return;
}

#line 344  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_16(struct net_device *arg0)
{
  #line 345 
  int ret;
  #line 346 
  struct emg_struct_random_allocationless_scenario_fm10k_get_channels_21 *cf_arg_21;
  #line 347 
  ret = pthread_join(emg_thread_21,(void **)0);
  #line 348 
  __VERIFIER_assume(ret == 0);
  #line 349 
  return;
}

#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fm10k_dbg_desc_fops(void *arg0)
{
  #line 356 
  struct file_operations *emg_17_container;
  #line 357 
  long long emg_17_emg_param_1_0;
  #line 358 
  char *emg_17_emg_param_1_2;
  #line 359 
  char *emg_17_emg_param_1_4;
  #line 360 
  int emg_17_emg_param_2_1;
  #line 361 
  long long *emg_17_emg_param_3_3;
  #line 362 
  long long *emg_17_emg_param_3_5;
  #line 363 
  struct file *emg_17_resource_0;
  #line 364 
  struct inode *emg_17_resource_1;
  #line 365 
  int emg_17_ret;
  #line 366 
  unsigned long emg_17_size_cnt;
  #line 367 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 368 
  int emg_repeat_cnt_call_17 = 1;
  #line 369 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 371 
  struct emg_struct_character_driver_scenario_fm10k_dbg_desc_fops_17 *data = (struct emg_struct_character_driver_scenario_fm10k_dbg_desc_fops_17 *)arg0;
  #line 375 
  emg_17_ret = ldv_undef_int();
  #line 376 
  emg_17_container = emg_alias_fm10k_dbg_desc_fops;
  #line 377 
  emg_17_ret = ldv_undef_int();
  #line 379 
  __VERIFIER_assume(data->arg0 == emg_alias_fm10k_dbg_desc_fops);
  #line 381 
  if (data != (struct emg_struct_character_driver_scenario_fm10k_dbg_desc_fops_17 *)0) {
    #line 382 
    emg_17_container = data->arg0;
    #line 383 
    ldv_free((void *)data);
  }
  #line 388 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 389 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 393 
  goto emg_main_17;
  #line 397 
  return (void *)0;
  #line 400 
  emg_call_17: 
               #line 400 
  ;
  #line 401 
  if (ldv_undef_int() != 0) {
    #line 402 
    switch (ldv_undef_int()) {
      #line 403 
      case 0: 
              #line 403 
      ;
      #line 405 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 405 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 406 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 406 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 410 
      seq_read(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 414 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 415 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 417 
      break;
      #line 419 
      case 1: 
              #line 419 
      ;
      #line 421 
      seq_lseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 423 
      break;
      #line 425 
      case 2: 
              #line 425 
      ;
      #line 432 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 433 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 433 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 434 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 434 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 438 
      if (emg_17_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 439 
        (*(emg_17_container->write))(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 444 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 445 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 447 
      break;
      #line 449 
      default: 
               #line 449 
      ;
      #line 449 
      __VERIFIER_assume(0);
    }
    #line 452 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 453 
      emg_repeat_cnt_call_17 --;
      #line 455 
      goto emg_call_17;
    }
    else 
         #line 457 
         __VERIFIER_assume(0);
  }
  else {
    #line 463 
    (*emg_alias_seq_release)(emg_17_resource_1,emg_17_resource_0);
    #line 466 
    if (emg_repeat_cnt_main_17_1 > 0) {
      #line 467 
      emg_repeat_cnt_main_17_1 --;
      #line 469 
      goto emg_main_17;
    }
    else 
         #line 471 
         __VERIFIER_assume(0);
  }
  #line 477 
  return (void *)0;
  #line 480 
  emg_main_17: 
               #line 480 
  ;
  #line 481 
  if (ldv_undef_int() != 0) {
    #line 483 
    emg_17_ret = emg_wrapper_fm10k_dbg_desc_open(emg_17_resource_1,emg_17_resource_0);
    #line 488 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 491 
    if (ldv_undef_int() != 0) {
      #line 493 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 497 
      goto emg_call_17;
    }
    else {
      #line 502 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 505 
      if (emg_repeat_cnt_main_17_0 > 0) {
        #line 506 
        emg_repeat_cnt_main_17_0 --;
        #line 508 
        goto emg_main_17;
      }
      else 
           #line 510 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 517 
       ldv_free((void *)emg_17_resource_0);
  #line 525 
  return (void *)0;
}

#line 530  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_fm10k_msix_clean_rings(void *arg0)
{
  #line 533 
  enum irqreturn (*emg_18_callback)(int , void *);
  #line 534 
  void *emg_18_data;
  #line 535 
  int emg_18_line;
  #line 536 
  enum irqreturn emg_18_ret_val;
  #line 537 
  enum irqreturn (*emg_18_thread)(int , void *);
  #line 539 
  struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *data = (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)arg0;
  #line 542 
  emg_18_callback = & emg_wrapper_fm10k_msix_clean_rings;
  #line 545 
  if (data != (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)0) {
    #line 546 
    emg_18_line = data->arg0;
    #line 547 
    emg_18_callback = data->arg1;
    #line 548 
    emg_18_thread = data->arg2;
    #line 549 
    emg_18_data = data->arg3;
    #line 550 
    ldv_free((void *)data);
  }
  #line 556 
  ldv_switch_to_interrupt_context();
  #line 560 
  emg_18_ret_val = emg_wrapper_fm10k_msix_clean_rings(emg_18_line,emg_18_data);
  #line 565 
  ldv_switch_to_process_context();
  #line 568 
  if (ldv_undef_int() != 0) {
    #line 570 
    __VERIFIER_assume(emg_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 574 
    if (emg_18_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 575 
                                                              (*emg_18_thread)(emg_18_line,emg_18_data);
  }
  else 
       #line 580 
       __VERIFIER_assume(emg_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 588 
  return (void *)0;
}

#line 593  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_fm10k_msix_mbx_pf(void *arg0)
{
  #line 596 
  enum irqreturn (*emg_19_callback)(int , void *);
  #line 597 
  void *emg_19_data;
  #line 598 
  int emg_19_line;
  #line 599 
  enum irqreturn emg_19_ret_val;
  #line 600 
  enum irqreturn (*emg_19_thread)(int , void *);
  #line 602 
  struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *data = (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)arg0;
  #line 605 
  emg_19_callback = & emg_wrapper_fm10k_msix_mbx_pf;
  #line 608 
  if (data != (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)0) {
    #line 609 
    emg_19_line = data->arg0;
    #line 610 
    emg_19_callback = data->arg1;
    #line 611 
    emg_19_thread = data->arg2;
    #line 612 
    emg_19_data = data->arg3;
    #line 613 
    ldv_free((void *)data);
  }
  #line 619 
  ldv_switch_to_interrupt_context();
  #line 623 
  emg_19_ret_val = emg_wrapper_fm10k_msix_mbx_pf(emg_19_line,emg_19_data);
  #line 628 
  ldv_switch_to_process_context();
  #line 631 
  if (ldv_undef_int() != 0) {
    #line 633 
    __VERIFIER_assume(emg_19_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 637 
    if (emg_19_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 638 
                                                              (*emg_19_thread)(emg_19_line,emg_19_data);
  }
  else 
       #line 643 
       __VERIFIER_assume(emg_19_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 651 
  return (void *)0;
}

#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_fm10k_msix_mbx_vf(void *arg0)
{
  #line 659 
  enum irqreturn (*emg_20_callback)(int , void *);
  #line 660 
  void *emg_20_data;
  #line 661 
  int emg_20_line;
  #line 662 
  enum irqreturn emg_20_ret_val;
  #line 663 
  enum irqreturn (*emg_20_thread)(int , void *);
  #line 665 
  struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *data = (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)arg0;
  #line 668 
  emg_20_callback = & emg_wrapper_fm10k_msix_mbx_vf;
  #line 671 
  if (data != (struct emg_struct_interrupt_scenario_fm10k_msix_clean_rings_18 *)0) {
    #line 672 
    emg_20_line = data->arg0;
    #line 673 
    emg_20_callback = data->arg1;
    #line 674 
    emg_20_thread = data->arg2;
    #line 675 
    emg_20_data = data->arg3;
    #line 676 
    ldv_free((void *)data);
  }
  #line 682 
  ldv_switch_to_interrupt_context();
  #line 686 
  emg_20_ret_val = emg_wrapper_fm10k_msix_mbx_vf(emg_20_line,emg_20_data);
  #line 691 
  ldv_switch_to_process_context();
  #line 694 
  if (ldv_undef_int() != 0) {
    #line 696 
    __VERIFIER_assume(emg_20_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 700 
    if (emg_20_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 701 
                                                              (*emg_20_thread)(emg_20_line,emg_20_data);
  }
  else 
       #line 706 
       __VERIFIER_assume(emg_20_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 714 
  return (void *)0;
}

#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_fm10k_get_channels(void *arg0)
{
  #line 722 
  struct net_device *emg_21_container;
  #line 723 
  struct sk_buff *emg_21_emg_param_0_20;
  #line 724 
  struct sk_buff *emg_21_emg_param_0_39;
  #line 725 
  struct ethtool_channels *emg_21_emg_param_1_0;
  #line 726 
  struct ethtool_coalesce *emg_21_emg_param_1_1;
  #line 727 
  struct ethtool_rxnfc *emg_21_emg_param_1_12;
  #line 728 
  int emg_21_emg_param_1_14;
  #line 729 
  unsigned int emg_21_emg_param_1_15;
  #line 730 
  struct ethtool_ts_info *emg_21_emg_param_1_17;
  #line 731 
  struct net_device *emg_21_emg_param_1_18;
  #line 732 
  void *emg_21_emg_param_1_19;
  #line 733 
  struct ethtool_drvinfo *emg_21_emg_param_1_2;
  #line 734 
  struct rtnl_link_stats64 *emg_21_emg_param_1_22;
  #line 735 
  int emg_21_emg_param_1_23;
  #line 736 
  int emg_21_emg_param_1_25;
  #line 737 
  void *emg_21_emg_param_1_27;
  #line 738 
  int emg_21_emg_param_1_28;
  #line 739 
  struct ethtool_stats *emg_21_emg_param_1_3;
  #line 740 
  int emg_21_emg_param_1_30;
  #line 741 
  int emg_21_emg_param_1_33;
  #line 742 
  enum tc_setup_type *emg_21_emg_param_1_37;
  #line 743 
  struct udp_tunnel_info *emg_21_emg_param_1_40;
  #line 744 
  struct udp_tunnel_info *emg_21_emg_param_1_41;
  #line 745 
  unsigned short emg_21_emg_param_1_42;
  #line 746 
  unsigned short emg_21_emg_param_1_44;
  #line 747 
  struct ethtool_test *emg_21_emg_param_1_46;
  #line 748 
  struct ethtool_channels *emg_21_emg_param_1_48;
  #line 749 
  struct ethtool_coalesce *emg_21_emg_param_1_49;
  #line 750 
  struct ethtool_pauseparam *emg_21_emg_param_1_5;
  #line 751 
  unsigned int emg_21_emg_param_1_50;
  #line 752 
  struct ethtool_pauseparam *emg_21_emg_param_1_51;
  #line 753 
  unsigned int emg_21_emg_param_1_52;
  #line 754 
  struct ethtool_ringparam *emg_21_emg_param_1_53;
  #line 755 
  unsigned int *emg_21_emg_param_1_54;
  #line 756 
  struct ethtool_rxnfc *emg_21_emg_param_1_57;
  #line 757 
  struct ethtool_regs *emg_21_emg_param_1_6;
  #line 758 
  struct ethtool_ringparam *emg_21_emg_param_1_8;
  #line 759 
  unsigned int *emg_21_emg_param_1_9;
  #line 760 
  unsigned char *emg_21_emg_param_2_10;
  #line 761 
  unsigned int *emg_21_emg_param_2_13;
  #line 762 
  unsigned char *emg_21_emg_param_2_16;
  #line 763 
  unsigned long long emg_21_emg_param_2_21;
  #line 764 
  struct ifla_vf_info *emg_21_emg_param_2_24;
  #line 765 
  struct ifla_vf_stats *emg_21_emg_param_2_26;
  #line 766 
  unsigned char *emg_21_emg_param_2_29;
  #line 767 
  int emg_21_emg_param_2_31;
  #line 768 
  unsigned short emg_21_emg_param_2_34;
  #line 769 
  void *emg_21_emg_param_2_38;
  #line 770 
  unsigned long long *emg_21_emg_param_2_4;
  #line 771 
  unsigned short emg_21_emg_param_2_43;
  #line 772 
  unsigned short emg_21_emg_param_2_45;
  #line 773 
  unsigned long long *emg_21_emg_param_2_47;
  #line 774 
  unsigned char *emg_21_emg_param_2_55;
  #line 775 
  void *emg_21_emg_param_2_7;
  #line 776 
  unsigned char *emg_21_emg_param_3_11;
  #line 777 
  int emg_21_emg_param_3_32;
  #line 778 
  unsigned char emg_21_emg_param_3_35;
  #line 779 
  unsigned char emg_21_emg_param_3_56;
  #line 780 
  unsigned short emg_21_emg_param_4_36;
  #line 781 
  int emg_repeat_cnt_call_21 = 1;
  #line 783 
  struct emg_struct_random_allocationless_scenario_fm10k_get_channels_21 *data = (struct emg_struct_random_allocationless_scenario_fm10k_get_channels_21 *)arg0;
  #line 788 
  if (data != (struct emg_struct_random_allocationless_scenario_fm10k_get_channels_21 *)0) {
    #line 789 
    emg_21_container = data->arg0;
    #line 790 
    ldv_free((void *)data);
  }
  #line 795 
  goto emg_call_21;
  #line 799 
  return (void *)0;
  #line 802 
  emg_call_21: 
               #line 802 
  ;
  #line 803 
  switch (ldv_undef_int()) {
    #line 804 
    case 0: 
            #line 804 
    ;
    #line 806 
    emg_21_emg_param_1_57 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 806 
    emg_21_emg_param_1_57 = emg_21_emg_param_1_57;
    #line 810 
    emg_wrapper_fm10k_set_rxnfc(emg_21_container,emg_21_emg_param_1_57);
    #line 814 
    ldv_free((void *)emg_21_emg_param_1_57);
    #line 816 
    break;
    #line 818 
    case 1: 
            #line 818 
    ;
    #line 820 
    emg_21_emg_param_1_54 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 820 
    emg_21_emg_param_1_54 = emg_21_emg_param_1_54;
    #line 821 
    emg_21_emg_param_2_55 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 821 
    emg_21_emg_param_2_55 = emg_21_emg_param_2_55;
    #line 825 
    emg_wrapper_fm10k_set_rssh(emg_21_container,emg_21_emg_param_1_54,emg_21_emg_param_2_55,(unsigned char)((int)emg_21_emg_param_3_56));
    #line 829 
    ldv_free((void *)emg_21_emg_param_1_54);
    #line 830 
    ldv_free((void *)emg_21_emg_param_2_55);
    #line 832 
    break;
    #line 834 
    case 2: 
            #line 834 
    ;
    #line 836 
    emg_21_emg_param_1_53 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 836 
    emg_21_emg_param_1_53 = emg_21_emg_param_1_53;
    #line 840 
    emg_wrapper_fm10k_set_ringparam(emg_21_container,emg_21_emg_param_1_53);
    #line 844 
    ldv_free((void *)emg_21_emg_param_1_53);
    #line 846 
    break;
    #line 848 
    case 3: 
            #line 848 
    ;
    #line 850 
    emg_wrapper_fm10k_set_priv_flags(emg_21_container,emg_21_emg_param_1_52);
    #line 852 
    break;
    #line 854 
    case 4: 
            #line 854 
    ;
    #line 856 
    emg_21_emg_param_1_51 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 856 
    emg_21_emg_param_1_51 = emg_21_emg_param_1_51;
    #line 860 
    emg_wrapper_fm10k_set_pauseparam(emg_21_container,emg_21_emg_param_1_51);
    #line 864 
    ldv_free((void *)emg_21_emg_param_1_51);
    #line 866 
    break;
    #line 868 
    case 5: 
            #line 868 
    ;
    #line 870 
    emg_wrapper_fm10k_set_msglevel(emg_21_container,emg_21_emg_param_1_50);
    #line 872 
    break;
    #line 874 
    case 6: 
            #line 874 
    ;
    #line 876 
    emg_21_emg_param_1_49 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 876 
    emg_21_emg_param_1_49 = emg_21_emg_param_1_49;
    #line 880 
    emg_wrapper_fm10k_set_coalesce(emg_21_container,emg_21_emg_param_1_49);
    #line 884 
    ldv_free((void *)emg_21_emg_param_1_49);
    #line 886 
    break;
    #line 888 
    case 7: 
            #line 888 
    ;
    #line 890 
    emg_21_emg_param_1_48 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 890 
    emg_21_emg_param_1_48 = emg_21_emg_param_1_48;
    #line 894 
    emg_wrapper_fm10k_set_channels(emg_21_container,emg_21_emg_param_1_48);
    #line 898 
    ldv_free((void *)emg_21_emg_param_1_48);
    #line 900 
    break;
    #line 902 
    case 8: 
            #line 902 
    ;
    #line 904 
    emg_21_emg_param_1_46 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 904 
    emg_21_emg_param_1_46 = emg_21_emg_param_1_46;
    #line 905 
    emg_21_emg_param_2_47 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 905 
    emg_21_emg_param_2_47 = emg_21_emg_param_2_47;
    #line 909 
    emg_wrapper_fm10k_self_test(emg_21_container,emg_21_emg_param_1_46,emg_21_emg_param_2_47);
    #line 913 
    ldv_free((void *)emg_21_emg_param_1_46);
    #line 914 
    ldv_free((void *)emg_21_emg_param_2_47);
    #line 916 
    break;
    #line 918 
    case 9: 
            #line 918 
    ;
    #line 920 
    emg_wrapper_fm10k_vlan_rx_kill_vid(emg_21_container,(unsigned short)((int)emg_21_emg_param_1_44),(unsigned short)((int)emg_21_emg_param_2_45));
    #line 922 
    break;
    #line 924 
    case 10: 
             #line 924 
    ;
    #line 926 
    emg_wrapper_fm10k_vlan_rx_add_vid(emg_21_container,(unsigned short)((int)emg_21_emg_param_1_42),(unsigned short)((int)emg_21_emg_param_2_43));
    #line 928 
    break;
    #line 930 
    case 11: 
             #line 930 
    ;
    #line 932 
    eth_validate_addr(emg_21_container);
    #line 934 
    break;
    #line 936 
    case 12: 
             #line 936 
    ;
    #line 938 
    emg_21_emg_param_1_41 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 938 
    emg_21_emg_param_1_41 = emg_21_emg_param_1_41;
    #line 942 
    emg_wrapper_fm10k_udp_tunnel_del(emg_21_container,emg_21_emg_param_1_41);
    #line 946 
    ldv_free((void *)emg_21_emg_param_1_41);
    #line 948 
    break;
    #line 950 
    case 13: 
             #line 950 
    ;
    #line 952 
    emg_21_emg_param_1_40 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 952 
    emg_21_emg_param_1_40 = emg_21_emg_param_1_40;
    #line 956 
    emg_wrapper_fm10k_udp_tunnel_add(emg_21_container,emg_21_emg_param_1_40);
    #line 960 
    ldv_free((void *)emg_21_emg_param_1_40);
    #line 962 
    break;
    #line 964 
    case 14: 
             #line 964 
    ;
    #line 966 
    emg_wrapper_fm10k_tx_timeout(emg_21_container);
    #line 968 
    break;
    #line 970 
    case 15: 
             #line 970 
    ;
    #line 972 
    emg_21_emg_param_0_39 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 972 
    emg_21_emg_param_0_39 = emg_21_emg_param_0_39;
    #line 976 
    emg_wrapper_fm10k_xmit_frame(emg_21_emg_param_0_39,emg_21_container);
    #line 980 
    ldv_free((void *)emg_21_emg_param_0_39);
    #line 982 
    break;
    #line 984 
    case 16: 
             #line 984 
    ;
    #line 986 
    emg_21_emg_param_1_37 = (enum tc_setup_type *)ldv_xmalloc_unknown_size(0UL);
    #line 986 
    emg_21_emg_param_1_37 = emg_21_emg_param_1_37;
    #line 987 
    emg_21_emg_param_2_38 = ldv_xmalloc_unknown_size(0UL);
    #line 987 
    emg_21_emg_param_2_38 = emg_21_emg_param_2_38;
    #line 991 
    emg_wrapper___fm10k_setup_tc(emg_21_container,*emg_21_emg_param_1_37,emg_21_emg_param_2_38);
    #line 995 
    ldv_free((void *)emg_21_emg_param_1_37);
    #line 996 
    ldv_free(emg_21_emg_param_2_38);
    #line 998 
    break;
    #line 1000 
    case 17: 
             #line 1000 
    ;
    #line 1002 
    fm10k_ndo_set_vf_vlan(emg_21_container,emg_21_emg_param_1_33,(unsigned short)((int)emg_21_emg_param_2_34),(unsigned char)((int)emg_21_emg_param_3_35),(unsigned short)((int)emg_21_emg_param_4_36));
    #line 1004 
    break;
    #line 1006 
    case 18: 
             #line 1006 
    ;
    #line 1008 
    fm10k_ndo_set_vf_bw(emg_21_container,emg_21_emg_param_1_30,emg_21_emg_param_2_31,emg_21_emg_param_3_32);
    #line 1010 
    break;
    #line 1012 
    case 19: 
             #line 1012 
    ;
    #line 1014 
    emg_21_emg_param_2_29 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1014 
    emg_21_emg_param_2_29 = emg_21_emg_param_2_29;
    #line 1018 
    fm10k_ndo_set_vf_mac(emg_21_container,emg_21_emg_param_1_28,emg_21_emg_param_2_29);
    #line 1022 
    ldv_free((void *)emg_21_emg_param_2_29);
    #line 1024 
    break;
    #line 1026 
    case 20: 
             #line 1026 
    ;
    #line 1028 
    emg_wrapper_fm10k_set_rx_mode(emg_21_container);
    #line 1030 
    break;
    #line 1032 
    case 21: 
             #line 1032 
    ;
    #line 1034 
    emg_21_emg_param_1_27 = ldv_xmalloc_unknown_size(0UL);
    #line 1034 
    emg_21_emg_param_1_27 = emg_21_emg_param_1_27;
    #line 1038 
    emg_wrapper_fm10k_set_mac(emg_21_container,emg_21_emg_param_1_27);
    #line 1042 
    ldv_free(emg_21_emg_param_1_27);
    #line 1044 
    break;
    #line 1046 
    case 22: 
             #line 1046 
    ;
    #line 1048 
    emg_21_emg_param_2_26 = (struct ifla_vf_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1048 
    emg_21_emg_param_2_26 = emg_21_emg_param_2_26;
    #line 1052 
    fm10k_ndo_get_vf_stats(emg_21_container,emg_21_emg_param_1_25,emg_21_emg_param_2_26);
    #line 1056 
    ldv_free((void *)emg_21_emg_param_2_26);
    #line 1058 
    break;
    #line 1060 
    case 23: 
             #line 1060 
    ;
    #line 1062 
    emg_21_emg_param_2_24 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1062 
    emg_21_emg_param_2_24 = emg_21_emg_param_2_24;
    #line 1066 
    fm10k_ndo_get_vf_config(emg_21_container,emg_21_emg_param_1_23,emg_21_emg_param_2_24);
    #line 1070 
    ldv_free((void *)emg_21_emg_param_2_24);
    #line 1072 
    break;
    #line 1074 
    case 24: 
             #line 1074 
    ;
    #line 1076 
    emg_21_emg_param_1_22 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1076 
    emg_21_emg_param_1_22 = emg_21_emg_param_1_22;
    #line 1080 
    emg_wrapper_fm10k_get_stats64(emg_21_container,emg_21_emg_param_1_22);
    #line 1084 
    ldv_free((void *)emg_21_emg_param_1_22);
    #line 1086 
    break;
    #line 1088 
    case 25: 
             #line 1088 
    ;
    #line 1090 
    emg_21_emg_param_0_20 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1090 
    emg_21_emg_param_0_20 = emg_21_emg_param_0_20;
    #line 1094 
    emg_wrapper_fm10k_features_check(emg_21_emg_param_0_20,emg_21_container,emg_21_emg_param_2_21);
    #line 1098 
    ldv_free((void *)emg_21_emg_param_0_20);
    #line 1100 
    break;
    #line 1102 
    case 26: 
             #line 1102 
    ;
    #line 1104 
    emg_21_emg_param_1_19 = ldv_xmalloc_unknown_size(0UL);
    #line 1104 
    emg_21_emg_param_1_19 = emg_21_emg_param_1_19;
    #line 1108 
    emg_wrapper_fm10k_dfwd_del_station(emg_21_container,emg_21_emg_param_1_19);
    #line 1112 
    ldv_free(emg_21_emg_param_1_19);
    #line 1114 
    break;
    #line 1116 
    case 27: 
             #line 1116 
    ;
    #line 1118 
    emg_21_emg_param_1_18 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    #line 1118 
    emg_21_emg_param_1_18 = emg_21_emg_param_1_18;
    #line 1122 
    emg_wrapper_fm10k_dfwd_add_station(emg_21_container,emg_21_emg_param_1_18);
    #line 1126 
    ldv_free((void *)emg_21_emg_param_1_18);
    #line 1128 
    break;
    #line 1130 
    case 28: 
             #line 1130 
    ;
    #line 1132 
    emg_21_emg_param_1_17 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1132 
    emg_21_emg_param_1_17 = emg_21_emg_param_1_17;
    #line 1136 
    ethtool_op_get_ts_info(emg_21_container,emg_21_emg_param_1_17);
    #line 1140 
    ldv_free((void *)emg_21_emg_param_1_17);
    #line 1142 
    break;
    #line 1144 
    case 29: 
             #line 1144 
    ;
    #line 1146 
    emg_21_emg_param_2_16 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1146 
    emg_21_emg_param_2_16 = emg_21_emg_param_2_16;
    #line 1150 
    emg_wrapper_fm10k_get_strings(emg_21_container,emg_21_emg_param_1_15,emg_21_emg_param_2_16);
    #line 1154 
    ldv_free((void *)emg_21_emg_param_2_16);
    #line 1156 
    break;
    #line 1158 
    case 30: 
             #line 1158 
    ;
    #line 1160 
    emg_wrapper_fm10k_get_sset_count(emg_21_container,emg_21_emg_param_1_14);
    #line 1162 
    break;
    #line 1164 
    case 31: 
             #line 1164 
    ;
    #line 1166 
    emg_21_emg_param_1_12 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1166 
    emg_21_emg_param_1_12 = emg_21_emg_param_1_12;
    #line 1167 
    emg_21_emg_param_2_13 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1167 
    emg_21_emg_param_2_13 = emg_21_emg_param_2_13;
    #line 1171 
    emg_wrapper_fm10k_get_rxnfc(emg_21_container,emg_21_emg_param_1_12,emg_21_emg_param_2_13);
    #line 1175 
    ldv_free((void *)emg_21_emg_param_1_12);
    #line 1176 
    ldv_free((void *)emg_21_emg_param_2_13);
    #line 1178 
    break;
    #line 1180 
    case 32: 
             #line 1180 
    ;
    #line 1182 
    emg_wrapper_fm10k_get_rssrk_size(emg_21_container);
    #line 1184 
    break;
    #line 1186 
    case 33: 
             #line 1186 
    ;
    #line 1188 
    emg_wrapper_fm10k_get_reta_size(emg_21_container);
    #line 1190 
    break;
    #line 1192 
    case 34: 
             #line 1192 
    ;
    #line 1194 
    emg_21_emg_param_1_9 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1194 
    emg_21_emg_param_1_9 = emg_21_emg_param_1_9;
    #line 1195 
    emg_21_emg_param_2_10 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1195 
    emg_21_emg_param_2_10 = emg_21_emg_param_2_10;
    #line 1196 
    emg_21_emg_param_3_11 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1196 
    emg_21_emg_param_3_11 = emg_21_emg_param_3_11;
    #line 1200 
    emg_wrapper_fm10k_get_rssh(emg_21_container,emg_21_emg_param_1_9,emg_21_emg_param_2_10,emg_21_emg_param_3_11);
    #line 1204 
    ldv_free((void *)emg_21_emg_param_1_9);
    #line 1205 
    ldv_free((void *)emg_21_emg_param_2_10);
    #line 1206 
    ldv_free((void *)emg_21_emg_param_3_11);
    #line 1208 
    break;
    #line 1210 
    case 35: 
             #line 1210 
    ;
    #line 1212 
    emg_21_emg_param_1_8 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1212 
    emg_21_emg_param_1_8 = emg_21_emg_param_1_8;
    #line 1216 
    emg_wrapper_fm10k_get_ringparam(emg_21_container,emg_21_emg_param_1_8);
    #line 1220 
    ldv_free((void *)emg_21_emg_param_1_8);
    #line 1222 
    break;
    #line 1224 
    case 36: 
             #line 1224 
    ;
    #line 1226 
    emg_wrapper_fm10k_get_regs_len(emg_21_container);
    #line 1228 
    break;
    #line 1230 
    case 37: 
             #line 1230 
    ;
    #line 1232 
    emg_21_emg_param_1_6 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1232 
    emg_21_emg_param_1_6 = emg_21_emg_param_1_6;
    #line 1233 
    emg_21_emg_param_2_7 = ldv_xmalloc_unknown_size(0UL);
    #line 1233 
    emg_21_emg_param_2_7 = emg_21_emg_param_2_7;
    #line 1237 
    emg_wrapper_fm10k_get_regs(emg_21_container,emg_21_emg_param_1_6,emg_21_emg_param_2_7);
    #line 1241 
    ldv_free((void *)emg_21_emg_param_1_6);
    #line 1242 
    ldv_free(emg_21_emg_param_2_7);
    #line 1244 
    break;
    #line 1246 
    case 38: 
             #line 1246 
    ;
    #line 1248 
    emg_wrapper_fm10k_get_priv_flags(emg_21_container);
    #line 1250 
    break;
    #line 1252 
    case 39: 
             #line 1252 
    ;
    #line 1254 
    emg_21_emg_param_1_5 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1254 
    emg_21_emg_param_1_5 = emg_21_emg_param_1_5;
    #line 1258 
    emg_wrapper_fm10k_get_pauseparam(emg_21_container,emg_21_emg_param_1_5);
    #line 1262 
    ldv_free((void *)emg_21_emg_param_1_5);
    #line 1264 
    break;
    #line 1266 
    case 40: 
             #line 1266 
    ;
    #line 1268 
    emg_wrapper_fm10k_get_msglevel(emg_21_container);
    #line 1270 
    break;
    #line 1272 
    case 41: 
             #line 1272 
    ;
    #line 1274 
    ethtool_op_get_link(emg_21_container);
    #line 1276 
    break;
    #line 1278 
    case 42: 
             #line 1278 
    ;
    #line 1280 
    emg_21_emg_param_1_3 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1280 
    emg_21_emg_param_1_3 = emg_21_emg_param_1_3;
    #line 1281 
    emg_21_emg_param_2_4 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1281 
    emg_21_emg_param_2_4 = emg_21_emg_param_2_4;
    #line 1285 
    emg_wrapper_fm10k_get_ethtool_stats(emg_21_container,emg_21_emg_param_1_3,emg_21_emg_param_2_4);
    #line 1289 
    ldv_free((void *)emg_21_emg_param_1_3);
    #line 1290 
    ldv_free((void *)emg_21_emg_param_2_4);
    #line 1292 
    break;
    #line 1294 
    case 43: 
             #line 1294 
    ;
    #line 1296 
    emg_21_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1296 
    emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
    #line 1300 
    emg_wrapper_fm10k_get_drvinfo(emg_21_container,emg_21_emg_param_1_2);
    #line 1304 
    ldv_free((void *)emg_21_emg_param_1_2);
    #line 1306 
    break;
    #line 1308 
    case 44: 
             #line 1308 
    ;
    #line 1310 
    emg_21_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1310 
    emg_21_emg_param_1_1 = emg_21_emg_param_1_1;
    #line 1314 
    emg_wrapper_fm10k_get_coalesce(emg_21_container,emg_21_emg_param_1_1);
    #line 1318 
    ldv_free((void *)emg_21_emg_param_1_1);
    #line 1320 
    break;
    #line 1322 
    case 45: 
             #line 1322 
    ;
    #line 1324 
    emg_21_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1324 
    emg_21_emg_param_1_0 = emg_21_emg_param_1_0;
    #line 1328 
    emg_wrapper_fm10k_get_channels(emg_21_container,emg_21_emg_param_1_0);
    #line 1332 
    ldv_free((void *)emg_21_emg_param_1_0);
    #line 1335 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 1336 
      emg_repeat_cnt_call_21 --;
      #line 1338 
      goto emg_call_21;
    }
    else 
         #line 1340 
         __VERIFIER_assume(0);
    #line 1344 
    break;
    #line 1346 
    case 46: 
             #line 1346 
    ;
    #line 1350 
    break;
    #line 1352 
    default: 
             #line 1352 
    ;
    #line 1352 
    __VERIFIER_assume(0);
  }
  #line 1355 
  return (void *)0;
}

#line 1360  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_fm10k_driver(void *arg0)
{
  #line 1363 
  int emg_22_choice;
  #line 1364 
  struct pci_driver *emg_22_container;
  #line 1365 
  struct pci_device_id *emg_22_device_id;
  #line 1366 
  int emg_22_emg_param_1_0;
  #line 1367 
  struct pci_dev *emg_22_resource_0;
  #line 1368 
  struct pm_message emg_22_resource_1;
  #line 1369 
  int emg_22_ret;
  #line 1370 
  int emg_repeat_cnt_call_22_0 = 1;
  #line 1371 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 1372 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 1373 
  int emg_repeat_cnt_call_22_1 = 1;
  #line 1375 
  struct emg_struct_pci_scenario_fm10k_driver_22 *data = (struct emg_struct_pci_scenario_fm10k_driver_22 *)arg0;
  #line 1379 
  emg_22_choice = 0;
  #line 1380 
  emg_22_ret = ldv_undef_int();
  #line 1381 
  emg_22_choice = 0;
  #line 1382 
  emg_22_container = emg_alias_fm10k_driver;
  #line 1383 
  emg_22_ret = ldv_undef_int();
  #line 1385 
  __VERIFIER_assume(data->arg0 == emg_alias_fm10k_driver);
  #line 1387 
  if (data != (struct emg_struct_pci_scenario_fm10k_driver_22 *)0) {
    #line 1388 
    emg_22_container = data->arg0;
    #line 1389 
    ldv_free((void *)data);
  }
  #line 1394 
  emg_22_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1395 
  emg_22_choice = __ldv_undef_int_range(0,4);
  #line 1396 
  emg_22_device_id = emg_22_container->id_table + (unsigned long)emg_22_choice;
  #line 1400 
  goto emg_main_22;
  #line 1404 
  return (void *)0;
  #line 1407 
  emg_call_22: 
               #line 1407 
  ;
  #line 1408 
  switch (ldv_undef_int()) {
    #line 1409 
    case 0: 
            #line 1409 
    ;
    #line 1411 
    fm10k_iov_configure(emg_22_resource_0,emg_22_emg_param_1_0);
    #line 1414 
    if (emg_repeat_cnt_call_22_1 > 0) {
      #line 1415 
      emg_repeat_cnt_call_22_1 --;
      #line 1417 
      goto emg_call_22;
    }
    else 
         #line 1419 
         __VERIFIER_assume(0);
    #line 1423 
    break;
    #line 1425 
    case 1: 
            #line 1425 
    ;
    #line 1427 
    if (emg_22_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1428 
      emg_22_ret = (*(emg_22_container->suspend))(emg_22_resource_0,emg_22_resource_1); else 
                                                                    #line 1430 
                                                                    emg_22_ret = ldv_undef_int();
    #line 1436 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 1440 
    if (emg_22_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1441 
                                                                  (*(emg_22_container->resume))(emg_22_resource_0);
    #line 1445 
    if (emg_repeat_cnt_call_22_0 > 0) {
      #line 1446 
      emg_repeat_cnt_call_22_0 --;
      #line 1448 
      goto emg_call_22;
    }
    else 
         #line 1450 
         __VERIFIER_assume(0);
    #line 1454 
    break;
    #line 1456 
    case 2: 
            #line 1456 
    ;
    #line 1458 
    if (emg_22_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 1459 
      (*(emg_22_container->shutdown))(emg_22_resource_0);
    #line 1464 
    emg_wrapper_fm10k_remove(emg_22_resource_0);
    #line 1467 
    if (emg_repeat_cnt_main_22_0 > 0) {
      #line 1468 
      emg_repeat_cnt_main_22_0 --;
      #line 1470 
      goto emg_main_22;
    }
    else 
         #line 1472 
         __VERIFIER_assume(0);
    #line 1476 
    break;
    #line 1478 
    default: 
             #line 1478 
    ;
    #line 1478 
    __VERIFIER_assume(0);
  }
  #line 1481 
  return (void *)0;
  #line 1484 
  emg_main_22: 
               #line 1484 
  ;
  #line 1485 
  if (ldv_undef_int() != 0) {
    #line 1488 
    ldv_pre_probe();
    #line 1492 
    emg_22_ret = emg_wrapper_fm10k_probe(emg_22_resource_0,emg_22_device_id);
    #line 1497 
    emg_22_ret = ldv_post_probe(emg_22_ret);
    #line 1500 
    if (ldv_undef_int() != 0) {
      #line 1502 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 1506 
      goto emg_call_22;
    }
    else 
         #line 1511 
         __VERIFIER_assume(emg_22_ret != 0);
    #line 1515 
    if (emg_repeat_cnt_main_22_1 > 0) {
      #line 1516 
      emg_repeat_cnt_main_22_1 --;
      #line 1518 
      goto emg_main_22;
    }
    else 
         #line 1520 
         __VERIFIER_assume(0);
  }
  else 
       #line 1526 
       ldv_free((void *)emg_22_resource_0);
  #line 1534 
  return (void *)0;
}

#line 1539  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_fm10k_pm_ops(void *arg0)
{
  #line 1542 
  struct device *emg_23_device;
  #line 1543 
  struct dev_pm_ops *emg_23_pm_ops;
  #line 1544 
  int emg_23_ret;
  #line 1545 
  int emg_repeat_cnt_fnoirq_23 = 1;
  #line 1546 
  int emg_repeat_cnt_no_irq_23 = 1;
  #line 1547 
  int emg_repeat_cnt_poff_23 = 1;
  #line 1548 
  int emg_repeat_cnt_reste_23 = 1;
  #line 1549 
  int emg_repeat_cnt_thlate_23 = 1;
  #line 1550 
  int emg_repeat_cnt_run_resume_23 = 1;
  #line 1551 
  int emg_repeat_cnt_res_23 = 1;
  #line 1552 
  int emg_repeat_cnt_restnoirq_23 = 1;
  #line 1553 
  int emg_repeat_cnt_rest_23 = 1;
  #line 1554 
  int emg_repeat_cnt_tnoirq_23 = 1;
  #line 1555 
  int emg_repeat_cnt_slate_23 = 1;
  #line 1556 
  int emg_repeat_cnt_resnoirq_23 = 1;
  #line 1557 
  int emg_repeat_cnt_flate_23 = 1;
  #line 1558 
  int emg_repeat_cnt_pno_irq_23 = 1;
  #line 1559 
  int emg_repeat_cnt_fr_23 = 1;
  #line 1560 
  int emg_repeat_cnt_plate_23 = 1;
  #line 1561 
  int emg_repeat_cnt_sus_23 = 1;
  #line 1562 
  int emg_repeat_cnt_reslate_23 = 1;
  #line 1563 
  int emg_repeat_cnt_th_23 = 1;
  #line 1566 
  emg_23_ret = ldv_undef_int();
  #line 1567 
  emg_23_pm_ops = emg_alias_fm10k_pm_ops;
  #line 1568 
  emg_23_ret = ldv_undef_int();
  #line 1574 
  goto emg_do_23;
  #line 1578 
  return (void *)0;
  #line 1581 
  emg_compl_23: 
                #line 1581 
  ;
  #line 1583 
  if (emg_23_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 1584 
                                                               (*(emg_23_pm_ops->complete))(emg_23_device);
  #line 1592 
  return (void *)0;
  #line 1595 
  emg_do_23: 
             #line 1595 
  ;
  #line 1596 
  switch (ldv_undef_int()) {
    #line 1597 
    case 0: 
            #line 1597 
    ;
    #line 1599 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 1603 
    goto emg_runt_23;
    #line 1608 
    case 1: 
            #line 1608 
    ;
    #line 1610 
    goto emg_normal_23;
    #line 1615 
    case 2: 
            #line 1615 
    ;
    #line 1619 
    break;
    #line 1621 
    default: 
             #line 1621 
    ;
    #line 1621 
    __VERIFIER_assume(0);
  }
  #line 1624 
  return (void *)0;
  #line 1627 
  emg_flate_23: 
                #line 1627 
  ;
  #line 1629 
  if (emg_23_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 1630 
                                                                 emg_23_ret = (*(emg_23_pm_ops->freeze_late))(emg_23_device); else 
                                                                    #line 1632 
                                                                    emg_23_ret = ldv_undef_int();
  #line 1638 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1641 
  if (ldv_undef_int() != 0) {
    #line 1643 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1647 
    goto emg_thlate_23;
  }
  else 
       #line 1652 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 1656 
  if (emg_repeat_cnt_flate_23 > 0) {
    #line 1657 
    emg_repeat_cnt_flate_23 --;
    #line 1659 
    goto emg_flate_23;
  }
  else 
       #line 1661 
       __VERIFIER_assume(0);
  #line 1666 
  return (void *)0;
  #line 1669 
  emg_fnoirq_23: 
                 #line 1669 
  ;
  #line 1671 
  if (emg_23_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1672 
                                                                  emg_23_ret = (*(emg_23_pm_ops->freeze_noirq))(emg_23_device); else 
                                                                    #line 1674 
                                                                    emg_23_ret = ldv_undef_int();
  #line 1680 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1683 
  if (ldv_undef_int() != 0) {
    #line 1685 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1689 
    goto emg_tnoirq_23;
  }
  else 
       #line 1694 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 1698 
  if (emg_repeat_cnt_fnoirq_23 > 0) {
    #line 1699 
    emg_repeat_cnt_fnoirq_23 --;
    #line 1701 
    goto emg_fnoirq_23;
  }
  else 
       #line 1703 
       __VERIFIER_assume(0);
  #line 1708 
  return (void *)0;
  #line 1711 
  emg_fr_23: 
             #line 1711 
  ;
  #line 1713 
  emg_23_ret = emg_wrapper_fm10k_suspend(emg_23_device);
  #line 1718 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1721 
  if (ldv_undef_int() != 0) {
    #line 1723 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1726 
    if (ldv_undef_int() != 0) 
                              #line 1728 
                              goto emg_fnoirq_23; else 
                                                       #line 1733 
                                                       goto emg_flate_23;
  }
  else {
    #line 1739 
    __VERIFIER_assume(emg_23_ret != 0);
    #line 1742 
    if (emg_repeat_cnt_fr_23 > 0) {
      #line 1743 
      emg_repeat_cnt_fr_23 --;
      #line 1745 
      goto emg_fr_23;
    }
    else 
         #line 1747 
         __VERIFIER_assume(0);
  }
  #line 1753 
  return (void *)0;
  #line 1756 
  emg_no_irq_23: 
                 #line 1756 
  ;
  #line 1758 
  if (emg_23_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1759 
                                                                   emg_23_ret = (*(emg_23_pm_ops->suspend_noirq))(emg_23_device); else 
                                                                    #line 1761 
                                                                    emg_23_ret = ldv_undef_int();
  #line 1767 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1770 
  if (ldv_undef_int() != 0) {
    #line 1772 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1776 
    goto emg_resnoirq_23;
  }
  else 
       #line 1781 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 1785 
  if (emg_repeat_cnt_no_irq_23 > 0) {
    #line 1786 
    emg_repeat_cnt_no_irq_23 --;
    #line 1788 
    goto emg_no_irq_23;
  }
  else 
       #line 1790 
       __VERIFIER_assume(0);
  #line 1795 
  return (void *)0;
  #line 1798 
  emg_normal_23: 
                 #line 1798 
  ;
  #line 1800 
  if (emg_23_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1801 
                                                             emg_23_ret = (*(emg_23_pm_ops->prepare))(emg_23_device); else 
                                                                    #line 1803 
                                                                    emg_23_ret = ldv_undef_int();
  #line 1809 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1812 
  if (ldv_undef_int() != 0) {
    #line 1814 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1817 
    switch (ldv_undef_int()) {
      #line 1818 
      case 0: 
              #line 1818 
      ;
      #line 1820 
      goto emg_sus_23;
      #line 1825 
      case 1: 
              #line 1825 
      ;
      #line 1827 
      goto emg_fr_23;
      #line 1832 
      case 2: 
              #line 1832 
      ;
      #line 1834 
      goto emg_poff_23;
      #line 1839 
      default: 
               #line 1839 
      ;
      #line 1839 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1843 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 1851 
  return (void *)0;
  #line 1854 
  emg_plate_23: 
                #line 1854 
  ;
  #line 1856 
  if (emg_23_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1857 
                                                                   emg_23_ret = (*(emg_23_pm_ops->poweroff_late))(emg_23_device); else 
                                                                    #line 1859 
                                                                    emg_23_ret = ldv_undef_int();
  #line 1865 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1868 
  if (ldv_undef_int() != 0) {
    #line 1870 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1874 
    goto emg_reste_23;
  }
  else 
       #line 1879 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 1883 
  if (emg_repeat_cnt_plate_23 > 0) {
    #line 1884 
    emg_repeat_cnt_plate_23 --;
    #line 1886 
    goto emg_plate_23;
  }
  else 
       #line 1888 
       __VERIFIER_assume(0);
  #line 1893 
  return (void *)0;
  #line 1896 
  emg_pno_irq_23: 
                  #line 1896 
  ;
  #line 1898 
  if (emg_23_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1899 
                                                                    emg_23_ret = (*(emg_23_pm_ops->poweroff_noirq))(emg_23_device); else 
                                                                    #line 1901 
                                                                    emg_23_ret = ldv_undef_int();
  #line 1907 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1910 
  if (ldv_undef_int() != 0) {
    #line 1912 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1916 
    goto emg_restnoirq_23;
  }
  else 
       #line 1921 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 1925 
  if (emg_repeat_cnt_pno_irq_23 > 0) {
    #line 1926 
    emg_repeat_cnt_pno_irq_23 --;
    #line 1928 
    goto emg_pno_irq_23;
  }
  else 
       #line 1930 
       __VERIFIER_assume(0);
  #line 1935 
  return (void *)0;
  #line 1938 
  emg_poff_23: 
               #line 1938 
  ;
  #line 1940 
  emg_23_ret = emg_wrapper_fm10k_suspend(emg_23_device);
  #line 1945 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1948 
  if (ldv_undef_int() != 0) {
    #line 1950 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1953 
    if (ldv_undef_int() != 0) 
                              #line 1955 
                              goto emg_pno_irq_23; else 
                                                        #line 1960 
                                                        goto emg_plate_23;
  }
  else {
    #line 1966 
    __VERIFIER_assume(emg_23_ret != 0);
    #line 1969 
    if (emg_repeat_cnt_poff_23 > 0) {
      #line 1970 
      emg_repeat_cnt_poff_23 --;
      #line 1972 
      goto emg_poff_23;
    }
    else 
         #line 1974 
         __VERIFIER_assume(0);
  }
  #line 1980 
  return (void *)0;
  #line 1983 
  emg_res_23: 
              #line 1983 
  ;
  #line 1985 
  emg_23_ret = emg_wrapper_fm10k_resume(emg_23_device);
  #line 1990 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 1993 
  if (ldv_undef_int() != 0) {
    #line 1995 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 1999 
    goto emg_compl_23;
  }
  else {
    #line 2004 
    __VERIFIER_assume(emg_23_ret != 0);
    #line 2007 
    if (emg_repeat_cnt_res_23 > 0) {
      #line 2008 
      emg_repeat_cnt_res_23 --;
      #line 2010 
      goto emg_res_23;
    }
    else 
         #line 2012 
         __VERIFIER_assume(0);
  }
  #line 2018 
  return (void *)0;
  #line 2021 
  emg_reslate_23: 
                  #line 2021 
  ;
  #line 2023 
  if (emg_23_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 2024 
                                                                  emg_23_ret = (*(emg_23_pm_ops->resume_early))(emg_23_device); else 
                                                                    #line 2026 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2032 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2035 
  if (ldv_undef_int() != 0) {
    #line 2037 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2041 
    goto emg_res_23;
  }
  else 
       #line 2046 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 2050 
  if (emg_repeat_cnt_reslate_23 > 0) {
    #line 2051 
    emg_repeat_cnt_reslate_23 --;
    #line 2053 
    goto emg_reslate_23;
  }
  else 
       #line 2055 
       __VERIFIER_assume(0);
  #line 2060 
  return (void *)0;
  #line 2063 
  emg_resnoirq_23: 
                   #line 2063 
  ;
  #line 2065 
  if (emg_23_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 2066 
                                                                  emg_23_ret = (*(emg_23_pm_ops->resume_noirq))(emg_23_device); else 
                                                                    #line 2068 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2074 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2077 
  if (ldv_undef_int() != 0) {
    #line 2079 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2083 
    goto emg_res_23;
  }
  else 
       #line 2088 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 2092 
  if (emg_repeat_cnt_resnoirq_23 > 0) {
    #line 2093 
    emg_repeat_cnt_resnoirq_23 --;
    #line 2095 
    goto emg_resnoirq_23;
  }
  else 
       #line 2097 
       __VERIFIER_assume(0);
  #line 2102 
  return (void *)0;
  #line 2105 
  emg_rest_23: 
               #line 2105 
  ;
  #line 2107 
  emg_23_ret = emg_wrapper_fm10k_resume(emg_23_device);
  #line 2112 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2115 
  if (ldv_undef_int() != 0) {
    #line 2117 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2121 
    goto emg_compl_23;
  }
  else {
    #line 2126 
    __VERIFIER_assume(emg_23_ret != 0);
    #line 2129 
    if (emg_repeat_cnt_rest_23 > 0) {
      #line 2130 
      emg_repeat_cnt_rest_23 --;
      #line 2132 
      goto emg_rest_23;
    }
    else 
         #line 2134 
         __VERIFIER_assume(0);
  }
  #line 2140 
  return (void *)0;
  #line 2143 
  emg_reste_23: 
                #line 2143 
  ;
  #line 2145 
  if (emg_23_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 2146 
                                                                   emg_23_ret = (*(emg_23_pm_ops->restore_early))(emg_23_device); else 
                                                                    #line 2148 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2154 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2157 
  if (ldv_undef_int() != 0) {
    #line 2159 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2163 
    goto emg_rest_23;
  }
  else 
       #line 2168 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 2172 
  if (emg_repeat_cnt_reste_23 > 0) {
    #line 2173 
    emg_repeat_cnt_reste_23 --;
    #line 2175 
    goto emg_reste_23;
  }
  else 
       #line 2177 
       __VERIFIER_assume(0);
  #line 2182 
  return (void *)0;
  #line 2185 
  emg_restnoirq_23: 
                    #line 2185 
  ;
  #line 2187 
  if (emg_23_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 2188 
                                                                   emg_23_ret = (*(emg_23_pm_ops->restore_noirq))(emg_23_device); else 
                                                                    #line 2190 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2196 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2199 
  if (ldv_undef_int() != 0) {
    #line 2201 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2205 
    goto emg_rest_23;
  }
  else 
       #line 2210 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 2214 
  if (emg_repeat_cnt_restnoirq_23 > 0) {
    #line 2215 
    emg_repeat_cnt_restnoirq_23 --;
    #line 2217 
    goto emg_restnoirq_23;
  }
  else 
       #line 2219 
       __VERIFIER_assume(0);
  #line 2224 
  return (void *)0;
  #line 2227 
  emg_run_resume_23: 
                     #line 2227 
  ;
  #line 2229 
  if (emg_23_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 2230 
                                                                    emg_23_ret = (*(emg_23_pm_ops->runtime_resume))(emg_23_device); else 
                                                                    #line 2232 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2238 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2239 
  if (emg_23_ret != 0) 
                       #line 2240 
                       emg_runtime_lowpower = 0;
  #line 2243 
  if (ldv_undef_int() != 0) 
                            #line 2245 
                            __VERIFIER_assume(emg_23_ret == 0);
  else {
    #line 2249 
    __VERIFIER_assume(emg_23_ret != 0);
    #line 2252 
    if (emg_repeat_cnt_run_resume_23 > 0) {
      #line 2253 
      emg_repeat_cnt_run_resume_23 --;
      #line 2255 
      goto emg_run_resume_23;
    }
    else 
         #line 2257 
         __VERIFIER_assume(0);
  }
  #line 2267 
  return (void *)0;
  #line 2270 
  emg_runt_23: 
               #line 2270 
  ;
  #line 2271 
  if (ldv_undef_int() != 0) {
    #line 2273 
    if (emg_23_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 2274 
                                                                    emg_23_ret = (*(emg_23_pm_ops->runtime_idle))(emg_23_device); else 
                                                                    #line 2276 
                                                                    emg_23_ret = ldv_undef_int();
    #line 2282 
    emg_23_ret = ldv_post_probe(emg_23_ret);
  }
  else {
    #line 2286 
    if (emg_23_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 2287 
      emg_23_ret = (*(emg_23_pm_ops->runtime_suspend))(emg_23_device); else 
                                                                    #line 2289 
                                                                    emg_23_ret = ldv_undef_int();
    #line 2295 
    emg_23_ret = ldv_post_probe(emg_23_ret);
    #line 2296 
    if (emg_23_ret != 0) 
                         #line 2297 
                         emg_runtime_lowpower = 1;
    #line 2300 
    if (ldv_undef_int() != 0) {
      #line 2302 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 2306 
      goto emg_run_resume_23;
    }
    else 
         #line 2311 
         __VERIFIER_assume(emg_23_ret != 0);
  }
  #line 2320 
  return (void *)0;
  #line 2323 
  emg_slate_23: 
                #line 2323 
  ;
  #line 2325 
  if (emg_23_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 2326 
                                                                  emg_23_ret = (*(emg_23_pm_ops->suspend_late))(emg_23_device); else 
                                                                    #line 2328 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2334 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2337 
  if (ldv_undef_int() != 0) {
    #line 2339 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2343 
    goto emg_reslate_23;
  }
  else 
       #line 2348 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 2352 
  if (emg_repeat_cnt_slate_23 > 0) {
    #line 2353 
    emg_repeat_cnt_slate_23 --;
    #line 2355 
    goto emg_slate_23;
  }
  else 
       #line 2357 
       __VERIFIER_assume(0);
  #line 2362 
  return (void *)0;
  #line 2365 
  emg_sus_23: 
              #line 2365 
  ;
  #line 2367 
  emg_23_ret = emg_wrapper_fm10k_suspend(emg_23_device);
  #line 2372 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2375 
  if (ldv_undef_int() != 0) {
    #line 2377 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2380 
    if (ldv_undef_int() != 0) 
                              #line 2382 
                              goto emg_no_irq_23; else 
                                                       #line 2387 
                                                       goto emg_slate_23;
  }
  else {
    #line 2393 
    __VERIFIER_assume(emg_23_ret != 0);
    #line 2396 
    if (emg_repeat_cnt_sus_23 > 0) {
      #line 2397 
      emg_repeat_cnt_sus_23 --;
      #line 2399 
      goto emg_sus_23;
    }
    else 
         #line 2401 
         __VERIFIER_assume(0);
  }
  #line 2407 
  return (void *)0;
  #line 2410 
  emg_th_23: 
             #line 2410 
  ;
  #line 2412 
  emg_23_ret = emg_wrapper_fm10k_resume(emg_23_device);
  #line 2417 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2420 
  if (ldv_undef_int() != 0) {
    #line 2422 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2426 
    goto emg_compl_23;
  }
  else {
    #line 2431 
    __VERIFIER_assume(emg_23_ret != 0);
    #line 2434 
    if (emg_repeat_cnt_th_23 > 0) {
      #line 2435 
      emg_repeat_cnt_th_23 --;
      #line 2437 
      goto emg_th_23;
    }
    else 
         #line 2439 
         __VERIFIER_assume(0);
  }
  #line 2445 
  return (void *)0;
  #line 2448 
  emg_thlate_23: 
                 #line 2448 
  ;
  #line 2450 
  if (emg_23_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 2451 
                                                                emg_23_ret = (*(emg_23_pm_ops->thaw_early))(emg_23_device); else 
                                                                    #line 2453 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2459 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2462 
  if (ldv_undef_int() != 0) {
    #line 2464 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2468 
    goto emg_th_23;
  }
  else 
       #line 2473 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 2477 
  if (emg_repeat_cnt_thlate_23 > 0) {
    #line 2478 
    emg_repeat_cnt_thlate_23 --;
    #line 2480 
    goto emg_thlate_23;
  }
  else 
       #line 2482 
       __VERIFIER_assume(0);
  #line 2487 
  return (void *)0;
  #line 2490 
  emg_tnoirq_23: 
                 #line 2490 
  ;
  #line 2492 
  if (emg_23_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 2493 
                                                                emg_23_ret = (*(emg_23_pm_ops->thaw_noirq))(emg_23_device); else 
                                                                    #line 2495 
                                                                    emg_23_ret = ldv_undef_int();
  #line 2501 
  emg_23_ret = ldv_post_probe(emg_23_ret);
  #line 2504 
  if (ldv_undef_int() != 0) {
    #line 2506 
    __VERIFIER_assume(emg_23_ret == 0);
    #line 2510 
    goto emg_th_23;
  }
  else 
       #line 2515 
       __VERIFIER_assume(emg_23_ret != 0);
  #line 2519 
  if (emg_repeat_cnt_tnoirq_23 > 0) {
    #line 2520 
    emg_repeat_cnt_tnoirq_23 --;
    #line 2522 
    goto emg_tnoirq_23;
  }
  else 
       #line 2524 
       __VERIFIER_assume(0);
  #line 2529 
  return (void *)0;
}

#line 2534  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_seq_operations_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops(void *arg0)
{
  #line 2537 
  long long *emg_24_index;
  #line 2538 
  struct seq_operations *emg_24_ops;
  #line 2539 
  long long *emg_24_ret;
  #line 2540 
  struct seq_file *emg_24_seq_file;
  #line 2541 
  int emg_24_show_ret;
  #line 2542 
  int emg_repeat_cnt_outer_loop_24_0 = 1;
  #line 2543 
  int emg_repeat_cnt_outer_loop_24_1 = 1;
  #line 2544 
  int emg_repeat_cnt_inner_loop_24 = 1;
  #line 2546 
  struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *data = (struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *)arg0;
  #line 2550 
  emg_24_show_ret = ldv_undef_int();
  #line 2551 
  emg_24_ops = emg_alias_fm10k_dbg_rx_desc_seq_ops;
  #line 2552 
  emg_24_show_ret = ldv_undef_int();
  #line 2554 
  __VERIFIER_assume(data->arg1 == emg_alias_fm10k_dbg_rx_desc_seq_ops);
  #line 2556 
  if (data != (struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *)0) {
    #line 2557 
    emg_24_seq_file = data->arg0;
    #line 2558 
    emg_24_ops = data->arg1;
    #line 2559 
    ldv_free((void *)data);
  }
  #line 2564 
  emg_24_index = (long long *)ldv_xmalloc(8UL);
  #line 2568 
  goto emg_outer_loop_24;
  #line 2572 
  return (void *)0;
  #line 2575 
  emg_inner_loop_24: 
                     #line 2575 
  ;
  #line 2576 
  if (ldv_undef_int() != 0) {
    #line 2578 
    int tmp_1;
    #line 2578 
    if (ldv_is_err_or_null((void *)emg_24_ret)) 
                                                #line 2578 
                                                tmp_1 = 0; else 
                                                                #line 2578 
                                                                tmp_1 = 1;
    #line 2578 
    __VERIFIER_assume(tmp_1);
    #line 2582 
    emg_24_show_ret = emg_wrapper_fm10k_dbg_rx_desc_seq_show(emg_24_seq_file,(void *)emg_24_ret);
    #line 2585 
    if (ldv_undef_int() != 0) {
      #line 2587 
      __VERIFIER_assume(emg_24_show_ret >= 0);
      #line 2591 
      emg_24_ret = (long long *)emg_wrapper_fm10k_dbg_desc_seq_next(emg_24_seq_file,(void *)emg_24_ret,emg_24_index);
      #line 2594 
      if (emg_repeat_cnt_inner_loop_24 > 0) {
        #line 2595 
        emg_repeat_cnt_inner_loop_24 --;
        #line 2597 
        goto emg_inner_loop_24;
      }
      else 
           #line 2599 
           __VERIFIER_assume(0);
    }
    else {
      #line 2606 
      emg_24_seq_file->index = *emg_24_index;
      #line 2610 
      emg_wrapper_fm10k_dbg_desc_seq_stop(emg_24_seq_file,(void *)emg_24_ret);
      #line 2615 
      emg_24_seq_file->index = *emg_24_index;
      #line 2618 
      if (emg_repeat_cnt_outer_loop_24_1 > 0) {
        #line 2619 
        emg_repeat_cnt_outer_loop_24_1 --;
        #line 2621 
        goto emg_outer_loop_24;
      }
      else 
           #line 2623 
           __VERIFIER_assume(0);
    }
  }
  else {
    #line 2630 
    __VERIFIER_assume((int)ldv_is_err_or_null((void *)emg_24_ret));
    #line 2635 
    emg_24_seq_file->index = *emg_24_index;
    #line 2639 
    emg_wrapper_fm10k_dbg_desc_seq_stop(emg_24_seq_file,(void *)emg_24_ret);
    #line 2644 
    emg_24_seq_file->index = *emg_24_index;
    #line 2647 
    if (emg_repeat_cnt_outer_loop_24_0 > 0) {
      #line 2648 
      emg_repeat_cnt_outer_loop_24_0 --;
      #line 2650 
      goto emg_outer_loop_24;
    }
    else 
         #line 2652 
         __VERIFIER_assume(0);
  }
  #line 2658 
  return (void *)0;
  #line 2661 
  emg_outer_loop_24: 
                     #line 2661 
  ;
  #line 2662 
  if (ldv_undef_int() != 0) {
    #line 2665 
    *emg_24_index = 0LL;
    #line 2669 
    emg_24_ret = (long long *)emg_wrapper_fm10k_dbg_desc_seq_start(emg_24_seq_file,emg_24_index);
    #line 2673 
    goto emg_inner_loop_24;
  }
  else 
       #line 2678 
       ldv_free((void *)emg_24_index);
  #line 2686 
  return (void *)0;
}

#line 2691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_seq_operations_traverse_kernel_items_scenario_fm10k_dbg_tx_desc_seq_ops(void *arg0)
{
  #line 2694 
  long long *emg_25_index;
  #line 2695 
  struct seq_operations *emg_25_ops;
  #line 2696 
  long long *emg_25_ret;
  #line 2697 
  struct seq_file *emg_25_seq_file;
  #line 2698 
  int emg_25_show_ret;
  #line 2699 
  int emg_repeat_cnt_inner_loop_25 = 1;
  #line 2700 
  int emg_repeat_cnt_outer_loop_25_0 = 1;
  #line 2701 
  int emg_repeat_cnt_outer_loop_25_1 = 1;
  #line 2703 
  struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *data = (struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *)arg0;
  #line 2707 
  emg_25_show_ret = ldv_undef_int();
  #line 2708 
  emg_25_ops = emg_alias_fm10k_dbg_tx_desc_seq_ops;
  #line 2709 
  emg_25_show_ret = ldv_undef_int();
  #line 2711 
  __VERIFIER_assume(data->arg1 == emg_alias_fm10k_dbg_tx_desc_seq_ops);
  #line 2713 
  if (data != (struct emg_struct_traverse_kernel_items_scenario_fm10k_dbg_rx_desc_seq_ops_24 *)0) {
    #line 2714 
    emg_25_seq_file = data->arg0;
    #line 2715 
    emg_25_ops = data->arg1;
    #line 2716 
    ldv_free((void *)data);
  }
  #line 2721 
  emg_25_index = (long long *)ldv_xmalloc(8UL);
  #line 2725 
  goto emg_outer_loop_25;
  #line 2729 
  return (void *)0;
  #line 2732 
  emg_inner_loop_25: 
                     #line 2732 
  ;
  #line 2733 
  if (ldv_undef_int() != 0) {
    #line 2735 
    int tmp_1;
    #line 2735 
    if (ldv_is_err_or_null((void *)emg_25_ret)) 
                                                #line 2735 
                                                tmp_1 = 0; else 
                                                                #line 2735 
                                                                tmp_1 = 1;
    #line 2735 
    __VERIFIER_assume(tmp_1);
    #line 2739 
    emg_25_show_ret = emg_wrapper_fm10k_dbg_tx_desc_seq_show(emg_25_seq_file,(void *)emg_25_ret);
    #line 2742 
    if (ldv_undef_int() != 0) {
      #line 2744 
      __VERIFIER_assume(emg_25_show_ret >= 0);
      #line 2748 
      emg_25_ret = (long long *)emg_wrapper_fm10k_dbg_desc_seq_next(emg_25_seq_file,(void *)emg_25_ret,emg_25_index);
      #line 2751 
      if (emg_repeat_cnt_inner_loop_25 > 0) {
        #line 2752 
        emg_repeat_cnt_inner_loop_25 --;
        #line 2754 
        goto emg_inner_loop_25;
      }
      else 
           #line 2756 
           __VERIFIER_assume(0);
    }
    else {
      #line 2763 
      emg_25_seq_file->index = *emg_25_index;
      #line 2767 
      emg_wrapper_fm10k_dbg_desc_seq_stop(emg_25_seq_file,(void *)emg_25_ret);
      #line 2772 
      emg_25_seq_file->index = *emg_25_index;
      #line 2775 
      if (emg_repeat_cnt_outer_loop_25_1 > 0) {
        #line 2776 
        emg_repeat_cnt_outer_loop_25_1 --;
        #line 2778 
        goto emg_outer_loop_25;
      }
      else 
           #line 2780 
           __VERIFIER_assume(0);
    }
  }
  else {
    #line 2787 
    __VERIFIER_assume((int)ldv_is_err_or_null((void *)emg_25_ret));
    #line 2792 
    emg_25_seq_file->index = *emg_25_index;
    #line 2796 
    emg_wrapper_fm10k_dbg_desc_seq_stop(emg_25_seq_file,(void *)emg_25_ret);
    #line 2801 
    emg_25_seq_file->index = *emg_25_index;
    #line 2804 
    if (emg_repeat_cnt_outer_loop_25_0 > 0) {
      #line 2805 
      emg_repeat_cnt_outer_loop_25_0 --;
      #line 2807 
      goto emg_outer_loop_25;
    }
    else 
         #line 2809 
         __VERIFIER_assume(0);
  }
  #line 2815 
  return (void *)0;
  #line 2818 
  emg_outer_loop_25: 
                     #line 2818 
  ;
  #line 2819 
  if (ldv_undef_int() != 0) {
    #line 2822 
    *emg_25_index = 0LL;
    #line 2826 
    emg_25_ret = (long long *)emg_wrapper_fm10k_dbg_desc_seq_start(emg_25_seq_file,emg_25_index);
    #line 2830 
    goto emg_inner_loop_25;
  }
  else 
       #line 2835 
       ldv_free((void *)emg_25_index);
  #line 2843 
  return (void *)0;
}

#line 2848  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_9(void *arg0)
{
  #line 2851 
  struct timer_list *emg_26_container;
  #line 2852 
  unsigned long emg_26_emg_param_0_0;
  #line 2854 
  struct emg_struct_timer_scenario_9_26 *data = (struct emg_struct_timer_scenario_9_26 *)arg0;
  #line 2859 
  if (data != (struct emg_struct_timer_scenario_9_26 *)0) {
    #line 2860 
    emg_26_container = data->arg0;
    #line 2861 
    ldv_free((void *)data);
  }
  #line 2867 
  ldv_switch_to_interrupt_context();
  #line 2871 
  if (emg_26_container->function != (void (*)(struct timer_list *))0) 
    #line 2872 
    (*(emg_26_container->function))((struct timer_list *)emg_26_emg_param_0_0);
  #line 2878 
  ldv_switch_to_process_context();
  #line 2885 
  return (void *)0;
}

#line 2890  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2893 
  struct pci_driver *emg_2_pci_driver;
  #line 2895 
  emg_2_pci_driver = emg_alias_fm10k_driver;
  #line 2896 
  if (ldv_undef_int() != 0) {
    #line 2898 
    emg_2_pci_driver = arg0;
    #line 2902 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2906 
    return 0;
  }
  else {
    #line 2910 
    return ldv_undef_int_negative();
  }
}

#line 2918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2921 
  struct net_device *emg_3_netdev;
  #line 2923 
  if (ldv_undef_int() != 0) {
    #line 2925 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2929 
    return emg_3_netdev;
  }
  else 
       #line 2933 
       return (struct net_device *)0;
}

#line 2941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 2944 
  struct dentry *emg_4_dentry;
  #line 2945 
  struct inode *emg_4_inode;
  #line 2947 
  if (ldv_undef_int() != 0) {
    #line 2949 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2950 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2951 
    emg_4_inode->i_mode = (unsigned short)16877U;
    #line 2952 
    emg_4_dentry->d_parent = arg1;
    #line 2953 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 2954 
    return emg_4_dentry;
  }
  else {
    #line 2958 
    return (struct dentry *)ERR_PTR_0(-19L);
  }
}

#line 2966  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 2969 
  struct dentry *emg_5_dentry;
  #line 2970 
  struct file_operations *emg_5_file_operations;
  #line 2971 
  struct inode *emg_5_inode;
  #line 2973 
  emg_5_file_operations = emg_alias_fm10k_dbg_desc_fops;
  #line 2974 
  if (ldv_undef_int() != 0) {
    #line 2976 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2977 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2978 
    emg_5_inode->i_mode = arg1;
    #line 2979 
    emg_5_dentry->d_parent = arg2;
    #line 2980 
    emg_5_inode->i_private = arg3;
    #line 2981 
    emg_5_file_operations = arg4;
    #line 2982 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 2983 
    ldv_save_allocated_memory_to_list((void *)emg_5_dentry);
    #line 2987 
    emg_dispatch_register_5(emg_5_file_operations);
    #line 2991 
    return emg_5_dentry;
  }
  else {
    #line 2995 
    return (struct dentry *)ERR_PTR_0(-19L);
  }
}

#line 3003  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 3006 
  struct timer_list *emg_6_timer_list;
  #line 3009 
  emg_6_timer_list = arg0;
  #line 3013 
  emg_dispatch_instance_deregister_6(emg_6_timer_list);
  #line 3014 
  ;
  #line 3014 
  return 0;
}

#line 3020  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 3023 
  int emg_7_line;
  #line 3026 
  emg_7_line = (int)arg0;
  #line 3030 
  emg_dispatch_irq_deregister_7(emg_7_line);
  #line 3031 
  ;
  #line 3031 
  return (void *)0;
}

#line 3037  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 3040 
  struct net_device *emg_8_netdev;
  #line 3043 
  emg_8_netdev = arg0;
  #line 3044 
  ldv_free((void *)emg_8_netdev);
  #line 3047 
  return;
}

#line 3052  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 3055 
  struct timer_list *emg_9_timer_list;
  #line 3057 
  if (ldv_undef_int() != 0) {
    #line 3059 
    emg_9_timer_list = arg0;
    #line 3063 
    emg_dispatch_instance_register_9(emg_9_timer_list);
    #line 3067 
    return 1;
  }
  else 
       #line 3071 
       return 0;
}

#line 3079  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 3082 
  struct pci_driver *emg_10_pci_driver;
  #line 3084 
  emg_10_pci_driver = emg_alias_fm10k_driver;
  #line 3086 
  emg_10_pci_driver = arg0;
  #line 3090 
  emg_dispatch_deregister_10(emg_10_pci_driver);
  #line 3093 
  return;
}

#line 3098  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 3101 
  struct delayed_work *emg_11_delayed_work;
  #line 3102 
  struct work_struct *emg_11_emg_param_0_0;
  #line 3104 
  if (ldv_undef_int() != 0) {
    #line 3106 
    emg_11_delayed_work = arg1;
    #line 3110 
    emg_11_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 3110 
    emg_11_emg_param_0_0 = emg_11_emg_param_0_0;
    #line 3114 
    if (emg_11_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 3115 
      (*(emg_11_delayed_work->work.func))(emg_11_emg_param_0_0);
    #line 3120 
    ldv_free((void *)emg_11_emg_param_0_0);
    #line 3124 
    return (_Bool)1;
  }
  else 
       #line 3128 
       return (_Bool)0;
}

#line 3136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 3139 
  struct work_struct *emg_12_work_struct;
  #line 3141 
  if (ldv_undef_int() != 0) {
    #line 3143 
    emg_12_work_struct = arg1;
    #line 3147 
    if (emg_12_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 3148 
      (*(emg_12_work_struct->func))(emg_12_work_struct);
    #line 3153 
    return (_Bool)1;
  }
  else 
       #line 3157 
       return (_Bool)0;
}

#line 3165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 3168 
  struct net_device *emg_13_netdev;
  #line 3169 
  int emg_13_ret;
  #line 3172 
  emg_13_ret = ldv_undef_int();
  #line 3173 
  emg_13_ret = ldv_undef_int();
  #line 3174 
  if (ldv_undef_int() != 0) {
    #line 3176 
    emg_13_netdev = arg0;
    #line 3180 
    emg_13_ret = fm10k_open(emg_13_netdev);
    #line 3183 
    if (ldv_undef_int() != 0) {
      #line 3185 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 3189 
      emg_dispatch_register_13(emg_13_netdev);
      #line 3193 
      return 0;
    }
    else {
      #line 3197 
      __VERIFIER_assume(emg_13_ret != 0);
      #line 3198 
      ldv_failed_register_netdev();
      #line 3199 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 3204 
    ldv_failed_register_netdev();
    #line 3205 
    return ldv_undef_int_negative();
  }
}

#line 3213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 3216 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 3217 
  void *emg_14_data;
  #line 3218 
  int emg_14_line;
  #line 3219 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 3221 
  emg_14_callback = & emg_wrapper_fm10k_msix_clean_rings;
  #line 3222 
  if (ldv_undef_int() != 0) {
    #line 3224 
    emg_14_line = (int)arg0;
    #line 3225 
    emg_14_callback = arg1;
    #line 3226 
    emg_14_thread = (enum irqreturn (*)(int , void *))0;
    #line 3227 
    emg_14_data = arg4;
    #line 3231 
    emg_dispatch_irq_register_14(emg_14_line,emg_14_callback,emg_14_thread,emg_14_data);
    #line 3235 
    return 0;
  }
  else {
    #line 3239 
    return ldv_undef_int_negative();
  }
}

#line 3247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int emg_seq_open(struct file *arg0, struct seq_operations *arg1)
{
  #line 3250 
  struct file *emg_15_file;
  #line 3251 
  struct seq_operations *emg_15_ops;
  #line 3252 
  struct seq_file *emg_15_seq_file;
  #line 3255 
  emg_15_seq_file = (struct seq_file *)ldv_xmalloc(256UL);
  #line 3256 
  emg_15_ops = arg1;
  #line 3257 
  emg_15_file->private_data = (void *)emg_15_seq_file;
  #line 3261 
  emg_dispatch_register_15(emg_15_seq_file,emg_15_ops);
  #line 3262 
  ;
  #line 3262 
  return 0;
}

#line 3268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 3271 
  struct net_device *emg_16_netdev;
  #line 3274 
  emg_16_netdev = arg0;
  #line 3278 
  fm10k_close(emg_16_netdev);
  #line 3282 
  emg_dispatch_deregister_16(emg_16_netdev);
  #line 3285 
  return;
}

#line 3290  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 3293 
  int emg_1_ret;
  #line 3296 
  emg_1_ret = emg_fm10k_init_module();
  #line 3297 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 3300 
  if (ldv_undef_int() != 0) {
    #line 3302 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 3306 
    emg_fm10k_exit_module();
  }
  else 
       #line 3310 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 3314 
  return (void *)0;
}

#line 3319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/fm10k/fm10k.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 3321 
  ldv_initialize();
  #line 3323 
  emg_entry_point_insmod((void *)0);
  #line 3325 
  return 0;
}

