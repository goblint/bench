/* Generated by Frama-C */
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_69 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_105 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_105 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_118 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_118 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_130 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_128 {
   struct __anonstruct_129 __anonCompField___anonunion_128_28 ;
   struct __anonstruct_130 __anonCompField___anonunion_128_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_128 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_131 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_131 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_136 {
   struct list_head slab_list ;
   struct __anonstruct_137 __anonCompField___anonunion_136_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_138 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_139 __anonCompField___anonunion_138_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_135 {
   union __anonunion_136 __anonCompField___anonstruct_135_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_138 __anonCompField___anonstruct_135_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_143 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_142 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_143 __anonCompField___anonstruct_142_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_144 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_132 {
   struct __anonstruct_133 __anonCompField___anonunion_132_31 ;
   struct __anonstruct_134 __anonCompField___anonunion_132_32 ;
   struct __anonstruct_135 __anonCompField___anonunion_132_37 ;
   struct __anonstruct_140 __anonCompField___anonunion_132_38 ;
   struct __anonstruct_141 __anonCompField___anonunion_132_39 ;
   struct __anonstruct_142 __anonCompField___anonunion_132_41 ;
   struct __anonstruct_144 __anonCompField___anonunion_132_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_145 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_132 __anonCompField_page_43 ;
   union __anonunion_145 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_146 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_147 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_147 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_251 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_251 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_252 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_252 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_253 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_253 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_294 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_294 sigset_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_296 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_297 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_298 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_301 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_302 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_300 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_301 _addr_bnd ;
   struct __anonstruct__addr_pkey_302 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_299 {
   void *_addr ;
   union __anonunion_300 __anonCompField___anonstruct__sigfault_299_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_303 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_304 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_295 _kill ;
   struct __anonstruct__timer_296 _timer ;
   struct __anonstruct__rt_297 _rt ;
   struct __anonstruct__sigchld_298 _sigchld ;
   struct __anonstruct__sigfault_299 _sigfault ;
   struct __anonstruct__sigpoll_303 _sigpoll ;
   struct __anonstruct__sigsys_304 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_309 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_309 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_314 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_314 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 157 
struct perf_event_context;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_316 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_316 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_394 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_394 __anonCompField_pci_dev_56 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_408 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_407 {
   struct __anonstruct_408 __anonCompField___anonunion_407_57 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_407 __anonCompField_lockref_58 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_410 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_59 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_409 __anonCompField_qstr_60 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_412 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_411 __anonCompField_dentry_61 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_412 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/semaphore.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_419 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_420 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_419 __anonCompField_io_cq_62 ;
   union __anonunion_420 __anonCompField_io_cq_63 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_421 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_421 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_422 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_422 __anonCompField_kqid_64 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_429 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_430 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_427 __anonCompField_inode_65 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_428 __anonCompField_inode_66 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_429 __anonCompField_inode_67 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_430 __anonCompField_inode_68 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_431 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_431 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_433 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_432 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_433 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_432 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
enum hinic_func_type {
    HINIC_PF = 0,
    HINIC_PPF = 2
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
struct hinic_func_attr {
   u16 func_idx ;
   u8 pf_idx ;
   u8 pci_intf_idx ;
   enum hinic_func_type func_type ;
   u8 ppf_idx ;
   u16 num_irqs ;
   u8 num_aeqs ;
   u8 num_ceqs ;
   u8 num_dma_attr ;
};
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
struct hinic_hwif {
   struct pci_dev *pdev ;
   void *cfg_regs_bar ;
   void *intr_regs_base ;
   struct hinic_func_attr attr ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.h"
struct hinic_sge {
   u32 hi_addr ;
   u32 lo_addr ;
   u32 len ;
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_cmdq_header {
   u32 header_info ;
   u32 saved_data ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_status {
   u32 status_info ;
};
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_ctrl {
   u32 ctrl_info ;
};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_sge_resp {
   struct hinic_sge sge ;
   u32 rsvd ;
};
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
union __anonunion_444 {
   struct hinic_sge_resp sge_resp ;
   u64 direct_resp ;
};
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_cmdq_completion {
   union __anonunion_444 __anonCompField_hinic_cmdq_completion_69 ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_scmd_bufdesc {
   u32 buf_len ;
   u32 rsvd ;
   u8 data[16U] ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_lcmd_bufdesc {
   struct hinic_sge sge ;
   u32 rsvd1 ;
   u64 rsvd2 ;
   u64 rsvd3 ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_cmdq_wqe_scmd {
   struct hinic_cmdq_header header ;
   u64 rsvd ;
   struct hinic_status status ;
   struct hinic_ctrl ctrl ;
   struct hinic_cmdq_completion completion ;
   struct hinic_scmd_bufdesc buf_desc ;
};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_cmdq_wqe_lcmd {
   struct hinic_cmdq_header header ;
   struct hinic_status status ;
   struct hinic_ctrl ctrl ;
   struct hinic_cmdq_completion completion ;
   struct hinic_lcmd_bufdesc buf_desc ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_cmdq_direct_wqe {
   struct hinic_cmdq_wqe_scmd wqe_scmd ;
};
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
union __anonunion_445 {
   struct hinic_cmdq_direct_wqe direct_wqe ;
   struct hinic_cmdq_wqe_lcmd wqe_lcmd ;
};
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_cmdq_wqe {
   union __anonunion_445 __anonCompField_hinic_cmdq_wqe_70 ;
};
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_sq_ctrl {
   u32 ctrl_info ;
   u32 queue_info ;
};
#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_sq_task {
   u32 pkt_info0 ;
   u32 pkt_info1 ;
   u32 pkt_info2 ;
   u32 ufo_v6_identify ;
   u32 pkt_info4 ;
   u32 zero_pad ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_sq_bufdesc {
   struct hinic_sge sge ;
   u32 rsvd ;
};
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_sq_wqe {
   struct hinic_sq_ctrl ctrl ;
   struct hinic_sq_task task ;
   struct hinic_sq_bufdesc buf_descs[17U] ;
};
#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_rq_ctrl {
   u32 ctrl_info ;
};
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_rq_cqe_sect {
   struct hinic_sge sge ;
   u32 rsvd ;
};
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_rq_bufdesc {
   u32 hi_addr ;
   u32 lo_addr ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_rq_wqe {
   struct hinic_rq_ctrl ctrl ;
   u32 rsvd ;
   struct hinic_rq_cqe_sect cqe_sect ;
   struct hinic_rq_bufdesc buf_desc ;
};
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
union __anonunion_446 {
   struct hinic_cmdq_wqe cmdq_wqe ;
   struct hinic_sq_wqe sq_wqe ;
   struct hinic_rq_wqe rq_wqe ;
};
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_hw_wqe {
   union __anonunion_446 __anonCompField_hinic_hw_wqe_71 ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
struct hinic_free_block {
   int page_idx ;
   int block_idx ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
struct hinic_wq {
   struct hinic_hwif *hwif ;
   int page_idx ;
   int block_idx ;
   u16 wqebb_size ;
   u16 wq_page_size ;
   u16 q_depth ;
   u16 max_wqe_size ;
   u16 num_wqebbs_per_page ;
   u16 wqebbs_per_page_shift ;
   u16 wqebb_size_shift ;
   u64 block_paddr ;
   void **shadow_block_vaddr ;
   u64 *block_vaddr ;
   int num_q_pages ;
   u8 *shadow_wqe ;
   u16 *shadow_idx ;
   atomic_t cons_idx ;
   atomic_t prod_idx ;
   atomic_t delta ;
   u16 mask ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
struct hinic_wqs {
   struct hinic_hwif *hwif ;
   int num_pages ;
   u64 *page_paddr ;
   u64 **page_vaddr ;
   void ***shadow_page_vaddr ;
   struct hinic_free_block *free_blocks ;
   int alloc_blk_pos ;
   int return_blk_pos ;
   int num_free_blks ;
   struct semaphore alloc_blocks_lock ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
struct hinic_cmdq_pages {
   u64 page_paddr ;
   u64 *page_vaddr ;
   void **shadow_page_vaddr ;
   struct hinic_hwif *hwif ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_557 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_557 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_558 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_558 key ;
} __attribute__((__aligned__(8)));
#line 65 
struct net_device;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_661 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_661 seqlock_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct user_struct;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_930 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_932 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_931 {
   unsigned long nr_segs ;
   struct __anonstruct_932 __anonCompField___anonunion_931_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_930 __anonCompField_iov_iter_53 ;
   union __anonunion_931 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_935 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_935 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_936 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_936 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_937 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_937 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_938 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_938 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_939 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_939 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_940 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_940 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_941 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_941 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_942 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_942 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_943 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_944 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_943 ifr_ifrn ;
   union __anonunion_ifr_ifru_944 ifr_ifru ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct net;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_1047 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_1047 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_1048 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_1048 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1070 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1069 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_1070 __anonCompField___anonstruct_1069_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1068 {
   struct __anonstruct_1069 __anonCompField___anonunion_1068_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1071 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1072 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1074 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1073 {
   struct __anonstruct_1074 __anonCompField___anonunion_1073_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1076 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1075 {
   __wsum csum ;
   struct __anonstruct_1076 __anonCompField___anonunion_1075_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1077 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1078 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1079 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_1068 __anonCompField_sk_buff_88 ;
   union __anonunion_1071 __anonCompField_sk_buff_89 ;
   union __anonunion_1072 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_1073 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_1075 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_1077 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_1078 __anonCompField_sk_buff_96 ;
   union __anonunion_1079 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_1105 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_1105 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_1108 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_1108 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_1110 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_1109 {
   struct __anonstruct_1110 __anonCompField___anonunion_1109_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_1109 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_1111 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_1111 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_1112 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_1112 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_1113 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_1113 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_1114 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_1114 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_1116 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_1116 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1129 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1128 {
   struct __anonstruct_1129 __anonCompField___anonunion_1128_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_1128 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1130 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1131 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1133 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1132 {
   struct keyring_index_key index_key ;
   struct __anonstruct_1133 __anonCompField___anonunion_1132_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1135 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1134 {
   union key_payload payload ;
   struct __anonstruct_1135 __anonCompField___anonunion_1134_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_1130 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_1131 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_1132 __anonCompField_key_107 ;
   union __anonunion_1134 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_1138 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_1138 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_1139 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_1139 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_1141 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_1140 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_1141 __anonCompField___anonunion_1140_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_1140 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1143 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_1145 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1144 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_1145 __anonCompField___anonstruct_1144_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1146 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1147 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1148 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_1149 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_1151 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1150 {
   union __anonunion_1151 __anonCompField___anonstruct_1150_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_1152 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_1153 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_1154 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1155 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_1156 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_1143 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_1144 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_1146 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_1147 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_1148 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_1149 test ;
   struct __anonstruct_1150 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_1152 info ;
   struct __anonstruct_query_1153 query ;
   struct __anonstruct_raw_tracepoint_1154 raw_tracepoint ;
   struct __anonstruct_1155 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_1156 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_1189 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_1189 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_1191 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_1190 {
   struct __anonstruct_tail_call_1191 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_1190 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_1192 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_1192 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_1194 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_1194 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_1219 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_1219 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1224 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1225 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1226 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_1227 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_1223 {
   struct __anonstruct_1224 __anonCompField___anonunion_1223_155 ;
   struct __anonstruct_1225 __anonCompField___anonunion_1223_156 ;
   struct __anonstruct_1226 __anonCompField___anonunion_1223_157 ;
   struct __anonstruct_xsk_1227 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_1223 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_1228 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_1229 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_1228 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_1229 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dmapool.h"
struct dma_pool;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
enum hinic_mod_type {
    HINIC_MOD_COMM = 0,
    HINIC_MOD_L2NIC = 1,
    HINIC_MOD_CFGM = 7,
    HINIC_MOD_MAX = 15
};
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
enum hinic_eq_type {
    HINIC_AEQ = 0,
    HINIC_CEQ = 1
};
#line 291 
enum hinic_eqe_state {
    HINIC_EQE_ENABLED = 1,
    HINIC_EQE_RUNNING = 2
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
struct hinic_eq_work {
   struct work_struct work ;
   void *data ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
struct hinic_eq {
   struct hinic_hwif *hwif ;
   enum hinic_eq_type type ;
   int q_id ;
   u32 q_len ;
   u32 page_size ;
   u32 cons_idx ;
   int wrapped ;
   size_t elem_size ;
   int num_pages ;
   int num_elem_in_pg ;
   struct msix_entry msix_entry ;
   dma_addr_t *dma_addr ;
   void **virt_addr ;
   struct hinic_eq_work aeq_work ;
   struct tasklet_struct ceq_tasklet ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
struct hinic_hw_event_cb {
   void (*hwe_handler)(void *, void *, u8 ) ;
   void *handle ;
   unsigned long hwe_state ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
struct hinic_aeqs {
   struct hinic_hwif *hwif ;
   struct hinic_eq aeq[4U] ;
   int num_aeqs ;
   struct hinic_hw_event_cb hwe_cb[3U] ;
   struct workqueue_struct *workq ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
struct hinic_ceq_cb {
   void (*handler)(void *, u32 ) ;
   void *handle ;
   enum hinic_eqe_state ceqe_state ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
struct hinic_ceqs {
   struct hinic_hwif *hwif ;
   struct hinic_eq ceq[32U] ;
   int num_ceqs ;
   struct hinic_ceq_cb ceq_cb[4U] ;
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wqe.h"
struct hinic_rq_cqe {
   u32 status ;
   u32 len ;
   u32 offload_type ;
   u32 rsvd3 ;
   u32 rsvd4 ;
   u32 rsvd5 ;
   u32 rsvd6 ;
   u32 rsvd7 ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
enum hinic_cmdq_type {
    HINIC_CMDQ_SYNC = 0,
    HINIC_MAX_CMDQ_TYPES = 1
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
struct hinic_cmdq_buf {
   void *buf ;
   dma_addr_t dma_addr ;
   size_t size ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
struct hinic_cmdq {
   struct hinic_wq *wq ;
   enum hinic_cmdq_type cmdq_type ;
   int wrapped ;
   spinlock_t cmdq_lock ;
   struct completion **done ;
   int **errcode ;
   void *db_base ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
struct hinic_cmdqs {
   struct hinic_hwif *hwif ;
   struct dma_pool *cmdq_buf_pool ;
   struct hinic_wq *saved_wqs ;
   struct hinic_cmdq_pages cmdq_pages ;
   struct hinic_cmdq cmdq[1U] ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.h"
struct hinic_sq {
   struct hinic_hwif *hwif ;
   struct hinic_wq *wq ;
   u32 irq ;
   u16 msix_entry ;
   void *hw_ci_addr ;
   dma_addr_t hw_ci_dma_addr ;
   void *db_base ;
   struct sk_buff **saved_skb ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.h"
struct hinic_rq {
   struct hinic_hwif *hwif ;
   struct hinic_wq *wq ;
   u32 irq ;
   u16 msix_entry ;
   size_t buf_sz ;
   struct sk_buff **saved_skb ;
   struct hinic_rq_cqe **cqe ;
   dma_addr_t *cqe_dma ;
   u16 *pi_virt_addr ;
   dma_addr_t pi_dma_addr ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.h"
struct hinic_qp {
   struct hinic_sq sq ;
   struct hinic_rq rq ;
   u16 q_id ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.h"
struct hinic_free_db_area {
   int db_idx[1024U] ;
   int alloc_pos ;
   int return_pos ;
   int num_free ;
   struct semaphore idx_lock ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.h"
struct hinic_func_to_io {
   struct hinic_hwif *hwif ;
   struct hinic_ceqs ceqs ;
   struct hinic_wqs wqs ;
   struct hinic_wq *sq_wq ;
   struct hinic_wq *rq_wq ;
   struct hinic_qp *qps ;
   u16 max_qps ;
   void **sq_db ;
   void *db_base ;
   void *ci_addr_base ;
   dma_addr_t ci_dma_base ;
   struct hinic_free_db_area free_db_area ;
   void *cmdq_db_area[1U] ;
   struct hinic_cmdqs cmdqs ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cap {
   u16 max_qps ;
   u16 num_qps ;
};
#line 29 
enum hinic_port_cmd {
    HINIC_PORT_CMD_CHANGE_MTU = 2,
    HINIC_PORT_CMD_ADD_VLAN = 3,
    HINIC_PORT_CMD_DEL_VLAN = 4,
    HINIC_PORT_CMD_SET_MAC = 9,
    HINIC_PORT_CMD_GET_MAC = 10,
    HINIC_PORT_CMD_DEL_MAC = 11,
    HINIC_PORT_CMD_SET_RX_MODE = 12,
    HINIC_PORT_CMD_GET_LINK_STATE = 24,
    HINIC_PORT_CMD_SET_LRO = 25,
    HINIC_PORT_CMD_SET_RX_CSUM = 26,
    HINIC_PORT_CMD_SET_RX_VLAN_OFFLOAD = 27,
    HINIC_PORT_CMD_GET_PORT_STATISTICS = 28,
    HINIC_PORT_CMD_CLEAR_PORT_STATISTICS = 29,
    HINIC_PORT_CMD_GET_VPORT_STAT = 30,
    HINIC_PORT_CMD_CLEAN_VPORT_STAT = 31,
    HINIC_PORT_CMD_GET_RSS_TEMPLATE_INDIR_TBL = 37,
    HINIC_PORT_CMD_SET_PORT_STATE = 41,
    HINIC_PORT_CMD_SET_RSS_TEMPLATE_TBL = 43,
    HINIC_PORT_CMD_GET_RSS_TEMPLATE_TBL = 44,
    HINIC_PORT_CMD_SET_RSS_HASH_ENGINE = 45,
    HINIC_PORT_CMD_GET_RSS_HASH_ENGINE = 46,
    HINIC_PORT_CMD_GET_RSS_CTX_TBL = 47,
    HINIC_PORT_CMD_SET_RSS_CTX_TBL = 48,
    HINIC_PORT_CMD_RSS_TEMP_MGR = 49,
    HINIC_PORT_CMD_RSS_CFG = 66,
    HINIC_PORT_CMD_FWCTXT_INIT = 69,
    HINIC_PORT_CMD_GET_MGMT_VERSION = 88,
    HINIC_PORT_CMD_SET_FUNC_STATE = 93,
    HINIC_PORT_CMD_GET_GLOBAL_QPN = 102,
    HINIC_PORT_CMD_SET_TSO = 112,
    HINIC_PORT_CMD_SET_RQ_IQ_MAP = 115,
    HINIC_PORT_CMD_GET_CAP = 170,
    HINIC_PORT_CMD_SET_LRO_TIMER = 244
};
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_hwdev {
   struct hinic_hwif *hwif ;
   struct msix_entry *msix_entries ;
   struct hinic_aeqs aeqs ;
   struct hinic_func_to_io func_to_io ;
   struct hinic_cap nic_cap ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.h"
struct hinic_txq_stats {
   u64 pkts ;
   u64 bytes ;
   u64 tx_busy ;
   u64 tx_wake ;
   u64 tx_dropped ;
   u64 big_frags_pkts ;
   struct u64_stats_sync syncp ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.h"
struct hinic_txq {
   struct net_device *netdev ;
   struct hinic_sq *sq ;
   struct hinic_txq_stats txq_stats ;
   int max_sges ;
   struct hinic_sge *sges ;
   struct hinic_sge *free_sges ;
   char *irq_name ;
   struct napi_struct napi ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.h"
struct hinic_rxq_stats {
   u64 pkts ;
   u64 bytes ;
   u64 errors ;
   u64 csum_errors ;
   u64 other_errors ;
   u64 alloc_skb_err ;
   struct u64_stats_sync syncp ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.h"
struct hinic_rxq {
   struct net_device *netdev ;
   struct hinic_rq *rq ;
   struct hinic_rxq_stats rxq_stats ;
   char *irq_name ;
   u16 buf_len ;
   u32 rx_buff_shift ;
   struct napi_struct napi ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_dev.h"
struct hinic_rx_mode_work {
   struct work_struct work ;
   u32 rx_mode ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_dev.h"
struct hinic_rss_type {
   u8 tcp_ipv6_ext ;
   u8 ipv6_ext ;
   u8 tcp_ipv6 ;
   u8 ipv6 ;
   u8 tcp_ipv4 ;
   u8 ipv4 ;
   u8 udp_ipv6 ;
   u8 udp_ipv4 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_dev.h"
struct hinic_dev {
   struct net_device *netdev ;
   struct hinic_hwdev *hwdev ;
   u32 msg_enable ;
   unsigned int tx_weight ;
   unsigned int rx_weight ;
   u16 num_qps ;
   u16 max_qps ;
   unsigned int flags ;
   struct semaphore mgmt_lock ;
   unsigned long *vlan_bitmap ;
   struct hinic_rx_mode_work rx_mode_work ;
   struct workqueue_struct *workq ;
   struct hinic_txq *txqs ;
   struct hinic_rxq *rxqs ;
   struct hinic_txq_stats tx_stats ;
   struct hinic_rxq_stats rx_stats ;
   u8 rss_tmpl_idx ;
   u8 rss_hash_engine ;
   u16 num_rss ;
   u16 rss_limit ;
   struct hinic_rss_type rss_type ;
   u8 *rss_hkey_user ;
   s32 *rss_indir_user ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_version_info {
   u8 status ;
   u8 version ;
   u8 rsvd[6U] ;
   u8 ver[16U] ;
   u8 time[20U] ;
};
#line 39 
enum hinic_port_link_state {
    HINIC_LINK_STATE_DOWN = 0,
    HINIC_LINK_STATE_UP = 1
};
#line 44 
enum hinic_port_state {
    HINIC_PORT_DISABLE = 0,
    HINIC_PORT_ENABLE = 3
};
#line 49 
enum hinic_func_port_state {
    HINIC_FUNC_PORT_DISABLE = 0,
    HINIC_FUNC_PORT_ENABLE = 2
};
#line 80 
enum hinic_tso_state {
    HINIC_TSO_DISABLE = 0,
    HINIC_TSO_ENABLE = 1
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_mac_cmd {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 vlan_id ;
   u16 rsvd1 ;
   unsigned char mac[6U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_mtu_cmd {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 rsvd1 ;
   u32 mtu ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_vlan_cmd {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 vlan_id ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_rx_mode_cmd {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 rsvd ;
   u32 rx_mode ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_link_cmd {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u8 state ;
   u8 rsvd1 ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_state_cmd {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u8 state ;
   u8 rsvd1[3U] ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_func_state_cmd {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 rsvd1 ;
   u8 state ;
   u8 rsvd2[3U] ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_cap {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 rsvd1 ;
   u8 port_type ;
   u8 autoneg_cap ;
   u8 autoneg_state ;
   u8 duplex ;
   u8 speed ;
   u8 rsvd2[3U] ;
};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_tso_config {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u16 rsvd1 ;
   u8 tso_en ;
   u8 resv2[3U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_checksum_offload {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u16 rsvd1 ;
   u32 rx_csum_offload ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rq_num {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u16 rsvd1[33U] ;
   u32 num_rqs ;
   u32 rq_depth ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_lro_config {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u16 rsvd1 ;
   u8 lro_ipv4_en ;
   u8 lro_ipv6_en ;
   u8 lro_max_wqe_num ;
   u8 resv2[13U] ;
};
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_lro_timer {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u8 type ;
   u8 enable ;
   u16 rsvd1 ;
   u32 timer ;
};
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_vlan_cfg {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 vlan_rx_offload ;
   u8 rsvd1[5U] ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_template_mgmt {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 cmd ;
   u8 template_id ;
   u8 rsvd1[4U] ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_template_key {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 template_id ;
   u8 rsvd1 ;
   u8 key[40U] ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_context_tbl {
   u32 group_index ;
   u32 offset ;
   u32 size ;
   u32 rsvd ;
   u32 ctx ;
};
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_context_table {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 template_id ;
   u8 rsvd1 ;
   u32 context ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_indirect_tbl {
   u32 group_index ;
   u32 offset ;
   u32 size ;
   u32 rsvd ;
   u8 entry[256U] ;
};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_indir_table {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 template_id ;
   u8 rsvd1 ;
   u8 indir[256U] ;
};
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_key {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 template_id ;
   u8 rsvd1 ;
   u8 key[40U] ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_engine_type {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 template_id ;
   u8 hash_engine ;
   u8 rsvd1[4U] ;
};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_rss_config {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u8 rss_en ;
   u8 template_id ;
   u8 rq_priority_number ;
   u8 rsvd1[11U] ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_vport_stats {
   u64 tx_unicast_pkts_vport ;
   u64 tx_unicast_bytes_vport ;
   u64 tx_multicast_pkts_vport ;
   u64 tx_multicast_bytes_vport ;
   u64 tx_broadcast_pkts_vport ;
   u64 tx_broadcast_bytes_vport ;
   u64 rx_unicast_pkts_vport ;
   u64 rx_unicast_bytes_vport ;
   u64 rx_multicast_pkts_vport ;
   u64 rx_multicast_bytes_vport ;
   u64 rx_broadcast_pkts_vport ;
   u64 rx_broadcast_bytes_vport ;
   u64 tx_discard_vport ;
   u64 rx_discard_vport ;
   u64 tx_err_vport ;
   u64 rx_err_vport ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_phy_port_stats {
   u64 mac_rx_total_pkt_num ;
   u64 mac_rx_total_oct_num ;
   u64 mac_rx_bad_pkt_num ;
   u64 mac_rx_bad_oct_num ;
   u64 mac_rx_good_pkt_num ;
   u64 mac_rx_good_oct_num ;
   u64 mac_rx_uni_pkt_num ;
   u64 mac_rx_multi_pkt_num ;
   u64 mac_rx_broad_pkt_num ;
   u64 mac_tx_total_pkt_num ;
   u64 mac_tx_total_oct_num ;
   u64 mac_tx_bad_pkt_num ;
   u64 mac_tx_bad_oct_num ;
   u64 mac_tx_good_pkt_num ;
   u64 mac_tx_good_oct_num ;
   u64 mac_tx_uni_pkt_num ;
   u64 mac_tx_multi_pkt_num ;
   u64 mac_tx_broad_pkt_num ;
   u64 mac_rx_fragment_pkt_num ;
   u64 mac_rx_undersize_pkt_num ;
   u64 mac_rx_undermin_pkt_num ;
   u64 mac_rx_64_oct_pkt_num ;
   u64 mac_rx_65_127_oct_pkt_num ;
   u64 mac_rx_128_255_oct_pkt_num ;
   u64 mac_rx_256_511_oct_pkt_num ;
   u64 mac_rx_512_1023_oct_pkt_num ;
   u64 mac_rx_1024_1518_oct_pkt_num ;
   u64 mac_rx_1519_2047_oct_pkt_num ;
   u64 mac_rx_2048_4095_oct_pkt_num ;
   u64 mac_rx_4096_8191_oct_pkt_num ;
   u64 mac_rx_8192_9216_oct_pkt_num ;
   u64 mac_rx_9217_12287_oct_pkt_num ;
   u64 mac_rx_12288_16383_oct_pkt_num ;
   u64 mac_rx_1519_max_bad_pkt_num ;
   u64 mac_rx_1519_max_good_pkt_num ;
   u64 mac_rx_oversize_pkt_num ;
   u64 mac_rx_jabber_pkt_num ;
   u64 mac_rx_pause_num ;
   u64 mac_rx_pfc_pkt_num ;
   u64 mac_rx_pfc_pri0_pkt_num ;
   u64 mac_rx_pfc_pri1_pkt_num ;
   u64 mac_rx_pfc_pri2_pkt_num ;
   u64 mac_rx_pfc_pri3_pkt_num ;
   u64 mac_rx_pfc_pri4_pkt_num ;
   u64 mac_rx_pfc_pri5_pkt_num ;
   u64 mac_rx_pfc_pri6_pkt_num ;
   u64 mac_rx_pfc_pri7_pkt_num ;
   u64 mac_rx_control_pkt_num ;
   u64 mac_rx_y1731_pkt_num ;
   u64 mac_rx_sym_err_pkt_num ;
   u64 mac_rx_fcs_err_pkt_num ;
   u64 mac_rx_send_app_good_pkt_num ;
   u64 mac_rx_send_app_bad_pkt_num ;
   u64 mac_tx_fragment_pkt_num ;
   u64 mac_tx_undersize_pkt_num ;
   u64 mac_tx_undermin_pkt_num ;
   u64 mac_tx_64_oct_pkt_num ;
   u64 mac_tx_65_127_oct_pkt_num ;
   u64 mac_tx_128_255_oct_pkt_num ;
   u64 mac_tx_256_511_oct_pkt_num ;
   u64 mac_tx_512_1023_oct_pkt_num ;
   u64 mac_tx_1024_1518_oct_pkt_num ;
   u64 mac_tx_1519_2047_oct_pkt_num ;
   u64 mac_tx_2048_4095_oct_pkt_num ;
   u64 mac_tx_4096_8191_oct_pkt_num ;
   u64 mac_tx_8192_9216_oct_pkt_num ;
   u64 mac_tx_9217_12287_oct_pkt_num ;
   u64 mac_tx_12288_16383_oct_pkt_num ;
   u64 mac_tx_1519_max_bad_pkt_num ;
   u64 mac_tx_1519_max_good_pkt_num ;
   u64 mac_tx_oversize_pkt_num ;
   u64 mac_tx_jabber_pkt_num ;
   u64 mac_tx_pause_num ;
   u64 mac_tx_pfc_pkt_num ;
   u64 mac_tx_pfc_pri0_pkt_num ;
   u64 mac_tx_pfc_pri1_pkt_num ;
   u64 mac_tx_pfc_pri2_pkt_num ;
   u64 mac_tx_pfc_pri3_pkt_num ;
   u64 mac_tx_pfc_pri4_pkt_num ;
   u64 mac_tx_pfc_pri5_pkt_num ;
   u64 mac_tx_pfc_pri6_pkt_num ;
   u64 mac_tx_pfc_pri7_pkt_num ;
   u64 mac_tx_control_pkt_num ;
   u64 mac_tx_y1731_pkt_num ;
   u64 mac_tx_1588_pkt_num ;
   u64 mac_tx_err_all_pkt_num ;
   u64 mac_tx_from_app_good_pkt_num ;
   u64 mac_tx_from_app_bad_pkt_num ;
   u64 mac_rx_higig2_ext_pkt_num ;
   u64 mac_rx_higig2_message_pkt_num ;
   u64 mac_rx_higig2_error_pkt_num ;
   u64 mac_rx_higig2_cpu_ctrl_pkt_num ;
   u64 mac_rx_higig2_unicast_pkt_num ;
   u64 mac_rx_higig2_broadcast_pkt_num ;
   u64 mac_rx_higig2_l2_multicast_pkt_num ;
   u64 mac_rx_higig2_l3_multicast_pkt_num ;
   u64 mac_tx_higig2_message_pkt_num ;
   u64 mac_tx_higig2_ext_pkt_num ;
   u64 mac_tx_higig2_cpu_ctrl_pkt_num ;
   u64 mac_tx_higig2_unicast_pkt_num ;
   u64 mac_tx_higig2_broadcast_pkt_num ;
   u64 mac_tx_higig2_l2_multicast_pkt_num ;
   u64 mac_tx_higig2_l3_multicast_pkt_num ;
};
#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_stats_info {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_id ;
   u16 rsvd1 ;
   u32 stats_version ;
   u32 stats_size ;
};
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_stats {
   u8 status ;
   u8 version ;
   u8 rsvd[6U] ;
   struct hinic_phy_port_stats stats ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_cmd_vport_stats {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   struct hinic_vport_stats stats ;
};
#line 587 
enum mac_op {
    MAC_DEL = 0,
    MAC_SET = 1
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
enum hinic_qp_ctxt_type {
    HINIC_QP_CTXT_TYPE_SQ = 0,
    HINIC_QP_CTXT_TYPE_RQ = 1
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp_ctxt.h"
struct hinic_qp_ctxt_header {
   u16 num_queues ;
   u16 queue_type ;
   u32 addr_offset ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp_ctxt.h"
struct hinic_sq_ctxt {
   u32 ceq_attr ;
   u32 ci_wrapped ;
   u32 wq_hi_pfn_pi ;
   u32 wq_lo_pfn ;
   u32 pref_cache ;
   u32 pref_wrapped ;
   u32 pref_wq_hi_pfn_ci ;
   u32 pref_wq_lo_pfn ;
   u32 rsvd0 ;
   u32 rsvd1 ;
   u32 wq_block_hi_pfn ;
   u32 wq_block_lo_pfn ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp_ctxt.h"
struct hinic_rq_ctxt {
   u32 ceq_attr ;
   u32 pi_intr_attr ;
   u32 wq_hi_pfn_ci ;
   u32 wq_lo_pfn ;
   u32 pref_cache ;
   u32 pref_wrapped ;
   u32 pref_wq_hi_pfn_ci ;
   u32 pref_wq_lo_pfn ;
   u32 pi_paddr_hi ;
   u32 pi_paddr_lo ;
   u32 wq_block_hi_pfn ;
   u32 wq_block_lo_pfn ;
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp_ctxt.h"
struct hinic_clean_queue_ctxt {
   struct hinic_qp_ctxt_header cmdq_hdr ;
   u32 ctxt_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp_ctxt.h"
struct hinic_sq_ctxt_block {
   struct hinic_qp_ctxt_header hdr ;
   struct hinic_sq_ctxt sq_ctxt[42U] ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp_ctxt.h"
struct hinic_rq_ctxt_block {
   struct hinic_qp_ctxt_header hdr ;
   struct hinic_rq_ctxt rq_ctxt[42U] ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1848 {
   int __val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 289 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_2219 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_2218 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_2219 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_2218 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9120 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9120 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_2291 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_2292 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_2293 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_2294 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_2291 ports ;
   struct __anonstruct_icmpt_2292 icmpt ;
   struct __anonstruct_dnports_2293 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_2294 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_2295 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_2295 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_2428 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_2427 {
   struct __anonstruct_2428 __anonCompField___anonunion_2427_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_2427 __anonCompField_sock_cgroup_data_152 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_2470 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_2470 __anonCompField_bdi_writeback_161 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_2471 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_2471 __anonCompField_bio_162 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2474 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2475 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_2477 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_2478 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2476 {
   struct __anonstruct_elv_2477 elv ;
   struct __anonstruct_flush_2478 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2479 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_2474 __anonCompField_request_163 ;
   union __anonunion_2475 __anonCompField_request_164 ;
   union __anonunion_2476 __anonCompField_request_165 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_2479 __anonCompField_request_166 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_2498 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_2498 __anonCompField_kernel_param_167 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_2510 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_2509 {
   void *validation_data ;
   struct __anonstruct_2510 __anonCompField___anonunion_2509_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_2509 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_2584 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_2585 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_2583 {
   struct __anonstruct_2584 __anonCompField___anonunion_2583_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_2585 __anonCompField___anonunion_2583_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_2583 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_2587 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_2587 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_2600 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_2600 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_2622 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_2622 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_2624 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2623 {
   __addrpair skc_addrpair ;
   struct __anonstruct_2624 __anonCompField___anonunion_2623_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2625 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_2627 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2626 {
   __portpair skc_portpair ;
   struct __anonstruct_2627 __anonCompField___anonunion_2626_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2628 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2629 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2630 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2631 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2632 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_2623 __anonCompField_sock_common_178 ;
   union __anonunion_2625 __anonCompField_sock_common_179 ;
   union __anonunion_2626 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_2628 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_2629 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_2630 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_2631 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_2632 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_2633 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2634 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2635 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_2633 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_2634 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_2635 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_2670 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_2670 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_2772 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_2772 __anonCompField_ip_ra_chain_197 ;
   struct callback_head rcu ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.h"
enum hinic_msix_state {
    HINIC_MSIX_ENABLE = 0,
    HINIC_MSIX_DISABLE = 1
};
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
enum hinic_l3_offload_type {
    L3TYPE_UNKNOWN = 0,
    IPV6_PKT = 1,
    IPV4_PKT_NO_CHKSUM_OFFLOAD = 2,
    IPV4_PKT_WITH_CHKSUM_OFFLOAD = 3
};
#line 300 
enum hinic_l4_offload_type {
    OFFLOAD_DISABLE = 0,
    TCP_OFFLOAD_ENABLE = 1,
    SCTP_OFFLOAD_ENABLE = 2,
    UDP_OFFLOAD_ENABLE = 3
};
#line 307 
enum hinic_l4_tunnel_type {
    NOT_TUNNEL = 0,
    TUNNEL_UDP_NO_CSUM = 1,
    TUNNEL_UDP_CSUM = 2
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
union hinic_l3 {
   struct iphdr *v4 ;
   struct ipv6hdr *v6 ;
   unsigned char *hdr ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
union hinic_l4 {
   struct tcphdr *tcp ;
   struct udphdr *udp ;
   unsigned char *hdr ;
};
#line 64 
enum hinic_offload_type {
    TX_OFFLOAD_TSO = 1,
    TX_OFFLOAD_CSUM = 2,
    TX_OFFLOAD_VLAN = 4,
    TX_OFFLOAD_INVALID = 8
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
enum hinic_aeq_type {
    HINIC_MSG_FROM_MGMT_CPU = 2,
    HINIC_MAX_AEQ_EVENTS = 3
};
#line 286 
enum hinic_ceq_type {
    HINIC_CEQ_CMDQ = 3,
    HINIC_MAX_CEQ_EVENTS = 4
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
struct hinic_aeq_elem {
   u8 data[60U] ;
   u32 desc ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
enum hinic_speed {
    HINIC_SPEED_10MB_LINK = 0,
    HINIC_SPEED_100MB_LINK = 1,
    HINIC_SPEED_1000MB_LINK = 2,
    HINIC_SPEED_10GB_LINK = 3,
    HINIC_SPEED_25GB_LINK = 4,
    HINIC_SPEED_40GB_LINK = 5,
    HINIC_SPEED_100GB_LINK = 6,
    HINIC_SPEED_UNKNOWN = 255
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_stats {
   char name[32U] ;
   u32 size ;
   int offset ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4002 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4706 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
enum hinic_api_cmd_chain_type {
    HINIC_API_CMD_WRITE_TO_MGMT_CPU = 2,
    HINIC_API_CMD_MAX = 3
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
struct hinic_api_cmd_status {
   u64 header ;
   u32 status ;
   u32 rsvd0 ;
   u32 rsvd1 ;
   u32 rsvd2 ;
   u64 rsvd3 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
struct __anonstruct_write_5084 {
   u64 hw_cmd_paddr ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
struct __anonstruct_read_5085 {
   u64 hw_wb_resp_paddr ;
   u64 hw_cmd_paddr ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
union __anonunion_5083 {
   struct __anonstruct_write_5084 write ;
   struct __anonstruct_read_5085 read ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
struct hinic_api_cmd_cell {
   u64 ctrl ;
   u64 next_cell_paddr ;
   u64 desc ;
   union __anonunion_5083 __anonCompField_hinic_api_cmd_cell_69 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
struct hinic_api_cmd_cell_ctxt {
   dma_addr_t cell_paddr ;
   struct hinic_api_cmd_cell *cell_vaddr ;
   dma_addr_t api_cmd_paddr ;
   u8 *api_cmd_vaddr ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
struct hinic_api_cmd_chain {
   struct hinic_hwif *hwif ;
   enum hinic_api_cmd_chain_type chain_type ;
   u32 num_cells ;
   u16 cell_size ;
   u32 prod_idx ;
   u32 cons_idx ;
   struct semaphore sem ;
   struct hinic_api_cmd_cell_ctxt *cell_ctxt ;
   dma_addr_t wb_status_paddr ;
   struct hinic_api_cmd_status *wb_status ;
   dma_addr_t head_cell_paddr ;
   struct hinic_api_cmd_cell *head_node ;
   struct hinic_api_cmd_cell *curr_node ;
};
#line 198 
enum hinic_mgmt_msg_type {
    HINIC_MGMT_MSG_SYNC = 1
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.h"
struct hinic_recv_msg {
   u8 *msg ;
   u8 *buf_out ;
   struct completion recv_done ;
   u16 cmd ;
   enum hinic_mod_type mod ;
   int async_mgmt_to_pf ;
   u16 msg_len ;
   u16 msg_id ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.h"
struct hinic_mgmt_cb {
   void (*cb)(void *, u8 , void *, u16 , void *, u16 *) ;
   void *handle ;
   unsigned long state ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.h"
struct hinic_pf_to_mgmt {
   struct hinic_hwif *hwif ;
   struct semaphore sync_msg_lock ;
   u16 sync_msg_id ;
   u8 *sync_msg_buf ;
   struct hinic_recv_msg recv_resp_msg_from_mgmt ;
   struct hinic_recv_msg recv_msg_from_mgmt ;
   struct hinic_api_cmd_chain *cmd_chain[3U] ;
   struct hinic_mgmt_cb mgmt_cb[15U] ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
enum hinic_set_arm_qtype {
    HINIC_SET_ARM_CMDQ = 0
};
#line 118 
enum hinic_cmd_ack_type {
    HINIC_CMD_ACK_TYPE_CMDQ = 0
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
struct hinic_cmdq_arm_bit {
   u32 q_type ;
   u32 q_id ;
};
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
struct hinic_cmdq_ctxt_info {
   u64 curr_wqe_page_pfn ;
   u64 wq_block_pfn ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
struct hinic_cmdq_ctxt {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u8 cmdq_type ;
   u8 rsvd1[1U] ;
   u8 rsvd2[4U] ;
   struct hinic_cmdq_ctxt_info ctxt_info ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_nic_cb {
   void (*handler)(void *, void *, u16 , void *, u16 *) ;
   void *handle ;
   unsigned long cb_state ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_pfhwdev {
   struct hinic_hwdev hwdev ;
   struct hinic_pf_to_mgmt pf_to_mgmt ;
   struct hinic_nic_cb nic_cb[1U] ;
};
#line 294 
enum completion_format {
    COMPLETE_DIRECT = 0,
    COMPLETE_SGE = 1
};
#line 299 
enum data_format {
    DATA_SGE = 0,
    DATA_DIRECT = 1
};
#line 304 
enum bufdesc_len {
    BUFDESC_LCMD_LEN = 2,
    BUFDESC_SCMD_LEN = 3
};
#line 309 
enum ctrl_sect_len {
    CTRL_SECT_LEN = 1,
    CTRL_DIRECT_SECT_LEN = 2
};
#line 318 
enum cmdq_cmd_type {
    CMDQ_CMD_SYNC_DIRECT_RESP = 0,
    CMDQ_CMD_SYNC_SGE_RESP = 1
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
enum hinic_pcie_nosnoop {
    HINIC_PCIE_SNOOP = 0,
    HINIC_PCIE_NO_SNOOP = 1
};
#line 127 
enum hinic_pcie_tph {
    HINIC_PCIE_TPH_DISABLE = 0,
    HINIC_PCIE_TPH_ENABLE = 1
};
#line 148 
enum hinic_pf_action {
    HINIC_PF_MGMT_INIT = 0,
    HINIC_PF_MGMT_ACTIVE = 17
};
#line 153 
enum hinic_outbound_state {
    HINIC_OUTBOUND_ENABLE = 0,
    HINIC_OUTBOUND_DISABLE = 1
};
#line 158 
enum hinic_db_state {
    HINIC_DB_ENABLE = 0,
    HINIC_DB_DISABLE = 1
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
enum hinic_mgmt_msg_cmd {
    HINIC_MGMT_MSG_CMD_BASE = 160,
    HINIC_MGMT_MSG_CMD_LINK_STATUS = 160,
    HINIC_MGMT_MSG_CMD_MAX = 161
};
#line 84 
enum hinic_cb_state {
    HINIC_CB_ENABLED = 1,
    HINIC_CB_RUNNING = 2
};
#line 89 
enum hinic_res_state {
    HINIC_RES_CLEAN = 0,
    HINIC_RES_ACTIVE = 1
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cmd_fw_ctxt {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 rx_buf_sz ;
   u32 rsvd1 ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cmd_hw_ioctxt {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 rsvd1 ;
   u8 set_cmdq_depth ;
   u8 cmdq_depth ;
   u8 lro_en ;
   u8 rsvd3 ;
   u8 rsvd4 ;
   u8 rsvd5 ;
   u16 rq_depth ;
   u16 rx_buf_sz_idx ;
   u16 sq_depth ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cmd_io_status {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u8 rsvd1 ;
   u8 rsvd2 ;
   u32 io_status ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cmd_clear_io_res {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u8 rsvd1 ;
   u8 rsvd2 ;
};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cmd_set_res_state {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u8 state ;
   u8 rsvd1 ;
   u32 rsvd2 ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cmd_base_qpn {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u16 qpn ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
struct hinic_cmd_hw_ci {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 func_idx ;
   u8 dma_attr_off ;
   u8 pending_limit ;
   u8 coalesc_timer ;
   u8 msix_en ;
   u16 msix_entry_idx ;
   u32 sq_id ;
   u32 rsvd1 ;
   u64 ci_addr ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
struct hinic_dev_cap {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u8 rsvd1[5U] ;
   u8 intr_type ;
   u8 rsvd2[66U] ;
   u16 max_sqs ;
   u16 max_rqs ;
   u8 rsvd3[208U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6211 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6739 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
struct hinic_port_link_status {
   u8 status ;
   u8 version ;
   u8 rsvd0[6U] ;
   u16 rsvd1 ;
   u8 link ;
   u8 rsvd2 ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
enum hinic_node_id {
    HINIC_NODE_ID_MGMT = 21
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
struct hinic_api_cmd_chain_attr {
   struct hinic_hwif *hwif ;
   enum hinic_api_cmd_chain_type chain_type ;
   u32 num_cells ;
   u16 cell_size ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
enum mgmt_direction_type {
    MGMT_DIRECT_SEND = 0,
    MGMT_RESP = 1
};
#line 299 
enum msg_ack_type {
    MSG_ACK = 0,
    MSG_NO_ACK = 1
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10426 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_10426 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10427 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_10427 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10443 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_10443 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_10447 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_10447 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10448 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10449 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_10448 __anonCompField_media_link_90 ;
   union __anonunion_10449 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_10451 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_10450 {
   struct __anonstruct_dev_10451 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_10450 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_10465 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_10466 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_10464 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_10465 i2c ;
   struct __anonstruct_custom_10466 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_10464 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_11367 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_11367 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_4 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_aeq_interrupt_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_hinic_get_channels_17 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_hinic_driver_18 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned long __builtin_bswap64(unsigned long);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 5 
#line 5 
void ldv_atomic_sub(int i, atomic_t *v);
#line 11 
#line 11 
int ldv_atomic_add_return(int i, atomic_t *v);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static bool is_power_of_2(unsigned long n)
{
  #line 47 
  return (_Bool)((n != 0UL && ((n + 18446744073709551615UL) & n) == 0UL) != 0);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_69 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_add_return(int i, atomic_t *v)
{
  #line 167 
  int __ret;
  #line 167 
  __ret = i;
  #line 167 
  switch (4UL) {
    #line 167 
    case (unsigned long)1: 
                           #line 167 
    ;
    #line 168 
    ldv_inline_asm();
    #line 167 
    break;
    #line 167 
    case (unsigned long)2: 
                           #line 167 
    ;
    #line 168 
    ldv_inline_asm();
    #line 167 
    break;
    #line 167 
    case (unsigned long)4: 
                           #line 167 
    ;
    #line 168 
    ldv_inline_asm();
    #line 167 
    break;
    #line 167 
    case (unsigned long)8: 
                           #line 167 
    ;
    #line 168 
    ldv_inline_asm();
    #line 167 
    break;
    #line 167 
    default: 
             #line 167 
    ;
    #line 167 
    __xadd_wrong_size();
  }
  #line 167 
  ;
  #line 167 
  return __ret + i;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_sub_return(int i, atomic_t *v)
{
  #line 179 
  return arch_atomic_add_return(- i,v);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 60 
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static int atomic_add_return(int i, atomic_t *v);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void atomic_sub(int i, atomic_t *v);
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_sub_return(int i, atomic_t *v)
{
  #line 159 
  kasan_check_read((void *)v,4U);
  #line 160 
  return arch_atomic_sub_return(i,v);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void *ERR_PTR(long error);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25 
void *ldv_err_ptr(long error);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 504  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void cif_vfree(void *addr);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 511  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem, int val)
{
  #line 33 
  struct lock_class_key __key;
  #line 34 
  struct semaphore __constr_expr_23 = {.lock = {.raw_lock = {.__anonCompField_qspinlock_9 = {.val = {.counter = 0}}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char *)"(*sem).lock", .cpu = 0, .ip = 0UL}}, .count = (unsigned int)val, .wait_list = {.next = & sem->wait_list, .prev = & sem->wait_list}};
  #line 34 
  *sem = __constr_expr_23;
  #line 35 
  lockdep_init_map(& sem->lock.dep_map,(char *)"semaphore->lock",& __key,0);
  #line 36 
  return;
}

#line 38 
#line 38 
void down(struct semaphore *);
#line 43 
#line 43 
void up(struct semaphore *);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
int hinic_wqs_cmdq_alloc(struct hinic_cmdq_pages *cmdq_pages, struct hinic_wq *wq, struct hinic_hwif *hwif, int cmdq_blocks, u16 wqebb_size, u16 wq_page_size, u16 q_depth, u16 max_wqe_size);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_wqs_cmdq_free(struct hinic_cmdq_pages *cmdq_pages, struct hinic_wq *wq, int cmdq_blocks);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
int hinic_wqs_alloc(struct hinic_wqs *wqs, int max_wqs, struct hinic_hwif *hwif);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_wqs_free(struct hinic_wqs *wqs);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
int hinic_wq_allocate(struct hinic_wqs *wqs, struct hinic_wq *wq, u16 wqebb_size, u16 wq_page_size, u16 q_depth, u16 max_wqe_size);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_wq_free(struct hinic_wqs *wqs, struct hinic_wq *wq);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
struct hinic_hw_wqe *hinic_get_wqe(struct hinic_wq *wq, unsigned int wqe_size, u16 *prod_idx);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_return_wqe(struct hinic_wq *wq, unsigned int wqe_size);
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_put_wqe(struct hinic_wq *wq, unsigned int wqe_size);
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
struct hinic_hw_wqe *hinic_read_wqe(struct hinic_wq *wq, unsigned int wqe_size, u16 *cons_idx);
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
struct hinic_hw_wqe *hinic_read_wqe_direct(struct hinic_wq *wq, u16 cons_idx);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.h"
#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_write_wqe(struct hinic_wq *wq, struct hinic_hw_wqe *wqe, unsigned int wqe_size);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
__inline static int WQE_PAGE_OFF(struct hinic_wq *wq, u16 idx)
{
  #line 84 
  return ((int)idx & ((int)wq->num_wqebbs_per_page + -1)) << (int)wq->wqebb_size_shift;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
__inline static int WQE_PAGE_NUM(struct hinic_wq *wq, u16 idx)
{
  #line 90 
  return ((int)idx >> (int)wq->wqebbs_per_page_shift) & (wq->num_q_pages + -1);
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static int queue_alloc_page(struct hinic_hwif *hwif, u64 **vaddr, u64 *paddr, void ***shadow_vaddr, size_t page_sz)
{
  #line 106 
  dma_addr_t dma_addr;
  #line 105 
  struct pci_dev *pdev = hwif->pdev;
  #line 108 
  *vaddr = (u64 *)dma_alloc_coherent(& pdev->dev,page_sz,& dma_addr,3264U);
  #line 110 
  if (*vaddr == (u64 *)0ULL) {
    #line 111 
    _dev_err(& pdev->dev,(char *)"Failed to allocate dma for wqs page\n");
    #line 112 
    return -12;
  }
  #line 115 
  *paddr = dma_addr;
  #line 118 
  *shadow_vaddr = (void **)cif_vzalloc(page_sz);
  #line 119 
  if (*shadow_vaddr == (void **)0) 
                                   #line 120 
                                   goto err_shadow_vaddr;
  #line 122 
  return 0;
  #line 124 
  err_shadow_vaddr: 
                    #line 124 
  ;
  #line 125 
  dma_free_coherent(& pdev->dev,page_sz,(void *)*vaddr,dma_addr);
  #line 126 
  return -12;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static int wqs_allocate_page(struct hinic_wqs *wqs, int page_idx)
{
  #line 138 
  return queue_alloc_page(wqs->hwif,wqs->page_vaddr + (unsigned long)page_idx,
                       wqs->page_paddr + (unsigned long)page_idx,
                       wqs->shadow_page_vaddr + (unsigned long)page_idx,
                       16384UL);
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void wqs_free_page(struct hinic_wqs *wqs, int page_idx)
{
  #line 151 
  struct hinic_hwif *hwif = wqs->hwif;
  #line 152 
  struct pci_dev *pdev = hwif->pdev;
  #line 154 
  dma_free_coherent(& pdev->dev,16384UL,(void *)*(wqs->page_vaddr + (unsigned long)page_idx),*(wqs->page_paddr + (unsigned long)page_idx));
  #line 157 
  cif_vfree((void *)*(wqs->shadow_page_vaddr + (unsigned long)page_idx));
  #line 158 
  return;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static int cmdq_allocate_page(struct hinic_cmdq_pages *cmdq_pages)
{
  #line 168 
  return queue_alloc_page(cmdq_pages->hwif,& cmdq_pages->page_vaddr,
                       & cmdq_pages->page_paddr,
                       & cmdq_pages->shadow_page_vaddr,4096UL);
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void cmdq_free_page(struct hinic_cmdq_pages *cmdq_pages)
{
  #line 182 
  struct hinic_hwif *hwif = cmdq_pages->hwif;
  #line 183 
  struct pci_dev *pdev = hwif->pdev;
  #line 185 
  dma_free_coherent(& pdev->dev,4096UL,(void *)cmdq_pages->page_vaddr,cmdq_pages->page_paddr);
  #line 188 
  cif_vfree((void *)cmdq_pages->shadow_page_vaddr);
  #line 189 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static int alloc_page_arrays(struct hinic_wqs *wqs)
{
  #line 195 
  size_t size;
  #line 193 
  struct hinic_hwif *hwif = wqs->hwif;
  #line 194 
  struct pci_dev *pdev = hwif->pdev;
  #line 197 
  size = (unsigned long)wqs->num_pages * 8UL;
  #line 198 
  wqs->page_paddr = (u64 *)cif_devm_kzalloc(& pdev->dev,size,3264U);
  #line 199 
  if (wqs->page_paddr == (u64 *)0ULL) 
                                      #line 200 
                                      return -12;
  #line 202 
  size = (unsigned long)wqs->num_pages * 8UL;
  #line 203 
  wqs->page_vaddr = (u64 **)cif_devm_kzalloc(& pdev->dev,size,3264U);
  #line 204 
  if (wqs->page_vaddr == (u64 **)0ULL) 
                                       #line 205 
                                       goto err_page_vaddr;
  #line 207 
  size = (unsigned long)wqs->num_pages * 8UL;
  #line 208 
  wqs->shadow_page_vaddr = (void ***)cif_devm_kzalloc(& pdev->dev,size,3264U);
  #line 209 
  if (wqs->shadow_page_vaddr == (void ***)0) 
                                             #line 210 
                                             goto err_page_shadow_vaddr;
  #line 212 
  return 0;
  #line 214 
  err_page_shadow_vaddr: 
                         #line 214 
  ;
  #line 215 
  devm_kfree(& pdev->dev,(void *)wqs->page_vaddr);
  #line 217 
  err_page_vaddr: 
                  #line 217 
  ;
  #line 218 
  devm_kfree(& pdev->dev,(void *)wqs->page_paddr);
  #line 219 
  return -12;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void free_page_arrays(struct hinic_wqs *wqs)
{
  #line 224 
  struct hinic_hwif *hwif = wqs->hwif;
  #line 225 
  struct pci_dev *pdev = hwif->pdev;
  #line 227 
  devm_kfree(& pdev->dev,(void *)wqs->shadow_page_vaddr);
  #line 228 
  devm_kfree(& pdev->dev,(void *)wqs->page_vaddr);
  #line 229 
  devm_kfree(& pdev->dev,(void *)wqs->page_paddr);
  #line 230 
  return;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static int wqs_next_block(struct hinic_wqs *wqs, int *page_idx, int *block_idx)
{
  #line 235 
  int pos;
  #line 247 
  int tmp;
  #line 237 
  down(& wqs->alloc_blocks_lock);
  #line 239 
  (wqs->num_free_blks) --;
  #line 241 
  if (wqs->num_free_blks < 0) {
    #line 242 
    (wqs->num_free_blks) ++;
    #line 243 
    up(& wqs->alloc_blocks_lock);
    #line 244 
    return -12;
  }
  #line 247 
  tmp = wqs->alloc_blk_pos;
  #line 247 
  (wqs->alloc_blk_pos) ++;
  #line 247 
  pos = tmp;
  #line 248 
  pos &= 127;
  #line 250 
  *page_idx = (wqs->free_blocks + (unsigned long)pos)->page_idx;
  #line 251 
  *block_idx = (wqs->free_blocks + (unsigned long)pos)->block_idx;
  #line 253 
  (wqs->free_blocks + (unsigned long)pos)->page_idx = -1;
  #line 254 
  (wqs->free_blocks + (unsigned long)pos)->block_idx = -1;
  #line 256 
  up(& wqs->alloc_blocks_lock);
  #line 257 
  return 0;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void wqs_return_block(struct hinic_wqs *wqs, int page_idx, int block_idx)
{
  #line 263 
  int pos;
  #line 267 
  int tmp;
  #line 265 
  down(& wqs->alloc_blocks_lock);
  #line 267 
  tmp = wqs->return_blk_pos;
  #line 267 
  (wqs->return_blk_pos) ++;
  #line 267 
  pos = tmp;
  #line 268 
  pos &= 127;
  #line 270 
  (wqs->free_blocks + (unsigned long)pos)->page_idx = page_idx;
  #line 271 
  (wqs->free_blocks + (unsigned long)pos)->block_idx = block_idx;
  #line 273 
  (wqs->num_free_blks) ++;
  #line 275 
  up(& wqs->alloc_blocks_lock);
  #line 276 
  return;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void init_wqs_blocks_arr(struct hinic_wqs *wqs)
{
  #line 280 
  int page_idx;
  #line 280 
  int blk_idx;
  #line 280 
  int pos = 0;
  #line 282 
  page_idx = 0;
  #line 282 
  while (wqs->num_pages > page_idx) {
    #line 283 
    blk_idx = 0;
    #line 283 
    while (blk_idx <= 3) {
      #line 284 
      (wqs->free_blocks + (unsigned long)pos)->page_idx = page_idx;
      #line 285 
      (wqs->free_blocks + (unsigned long)pos)->block_idx = blk_idx;
      #line 286 
      pos ++;
      #line 283 
      blk_idx ++;
    }
    #line 282 
    page_idx ++;
  }
  #line 290 
  wqs->alloc_blk_pos = 0;
  #line 291 
  wqs->return_blk_pos = pos;
  #line 292 
  wqs->num_free_blks = pos;
  #line 294 
  sema_init(& wqs->alloc_blocks_lock,1);
  #line 295 
  return;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
int hinic_wqs_alloc(struct hinic_wqs *wqs, int max_wqs, struct hinic_hwif *hwif)
{
  #line 309 
  int err;
  #line 309 
  int i;
  #line 309 
  int page_idx;
  #line 308 
  struct pci_dev *pdev = hwif->pdev;
  #line 311 
  max_wqs = (max_wqs + 3) & -4;
  #line 312 
  if (max_wqs > 128) {
    #line 313 
    _dev_err(& pdev->dev,(char *)"Invalid max_wqs = %d\n",max_wqs);
    #line 314 
    return -22;
  }
  #line 317 
  wqs->hwif = hwif;
  #line 318 
  wqs->num_pages = max_wqs / 4;
  #line 320 
  if (alloc_page_arrays(wqs) != 0) {
    #line 321 
    _dev_err(& pdev->dev,(char *)"Failed to allocate mem for page addresses\n");
    #line 323 
    return -12;
  }
  #line 326 
  page_idx = 0;
  #line 326 
  while (wqs->num_pages > page_idx) {
    #line 327 
    err = wqs_allocate_page(wqs,page_idx);
    #line 328 
    if (err != 0) {
      #line 329 
      _dev_err(& pdev->dev,(char *)"Failed wq page allocation\n");
      #line 330 
      goto err_wq_allocate_page;
    }
    #line 326 
    page_idx ++;
  }
  #line 334 
  wqs->free_blocks = (struct hinic_free_block *)cif_devm_kzalloc(& pdev->dev,1024UL,3264U);
  #line 336 
  if (wqs->free_blocks == (struct hinic_free_block *)0) {
    #line 337 
    err = -12;
    #line 338 
    goto err_alloc_blocks;
  }
  #line 341 
  init_wqs_blocks_arr(wqs);
  #line 342 
  return 0;
  #line 344 
  err_alloc_blocks: 
                    #line 344 
  ;
  #line 345 
  err_wq_allocate_page: 
                        #line 345 
  ;
  #line 346 
  i = 0;
  #line 346 
  while (i < page_idx) {
    #line 347 
    wqs_free_page(wqs,i);
    #line 346 
    i ++;
  }
  #line 349 
  free_page_arrays(wqs);
  #line 350 
  return err;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_wqs_free(struct hinic_wqs *wqs)
{
  #line 361 
  int page_idx;
  #line 359 
  struct hinic_hwif *hwif = wqs->hwif;
  #line 360 
  struct pci_dev *pdev = hwif->pdev;
  #line 363 
  devm_kfree(& pdev->dev,(void *)wqs->free_blocks);
  #line 365 
  page_idx = 0;
  #line 365 
  while (wqs->num_pages > page_idx) {
    #line 366 
    wqs_free_page(wqs,page_idx);
    #line 365 
    page_idx ++;
  }
  #line 368 
  free_page_arrays(wqs);
  #line 369 
  return;
}

#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static int alloc_wqes_shadow(struct hinic_wq *wq)
{
  #line 381 
  size_t size;
  #line 379 
  struct hinic_hwif *hwif = wq->hwif;
  #line 380 
  struct pci_dev *pdev = hwif->pdev;
  #line 383 
  size = (unsigned long)(wq->num_q_pages * (int)wq->max_wqe_size);
  #line 384 
  wq->shadow_wqe = (u8 *)cif_devm_kzalloc(& pdev->dev,size,3264U);
  #line 385 
  if (wq->shadow_wqe == (u8 *)0U) 
                                  #line 386 
                                  return -12;
  #line 388 
  size = (unsigned long)wq->num_q_pages * 4UL;
  #line 389 
  wq->shadow_idx = (u16 *)cif_devm_kzalloc(& pdev->dev,size,3264U);
  #line 390 
  if (wq->shadow_idx == (u16 *)0U) 
                                   #line 391 
                                   goto err_shadow_idx;
  #line 393 
  return 0;
  #line 395 
  err_shadow_idx: 
                  #line 395 
  ;
  #line 396 
  devm_kfree(& pdev->dev,(void *)wq->shadow_wqe);
  #line 397 
  return -12;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void free_wqes_shadow(struct hinic_wq *wq)
{
  #line 406 
  struct hinic_hwif *hwif = wq->hwif;
  #line 407 
  struct pci_dev *pdev = hwif->pdev;
  #line 409 
  devm_kfree(& pdev->dev,(void *)wq->shadow_idx);
  #line 410 
  devm_kfree(& pdev->dev,(void *)wq->shadow_wqe);
  #line 411 
  return;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void free_wq_pages(struct hinic_wq *wq, struct hinic_hwif *hwif, int num_q_pages)
{
  #line 423 
  int i;
  #line 422 
  struct pci_dev *pdev = hwif->pdev;
  #line 425 
  i = 0;
  #line 425 
  while (i < num_q_pages) {
    {
      #line 428 
      dma_addr_t dma_addr;
      #line 426 
      void **vaddr = wq->shadow_block_vaddr + (unsigned long)i;
      #line 427 
      u64 *paddr = wq->block_vaddr + (unsigned long)i;
      #line 430 
      dma_addr = (dma_addr_t)__builtin_bswap64((unsigned long)*paddr);
      #line 431 
      dma_free_coherent(& pdev->dev,(unsigned long)wq->wq_page_size,*vaddr,dma_addr);
    }
    #line 425 
    i ++;
  }
  #line 435 
  free_wqes_shadow(wq);
  #line 436 
  return;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static int alloc_wq_pages(struct hinic_wq *wq, struct hinic_hwif *hwif, int max_pages)
{
  #line 450 
  int i;
  #line 450 
  int err;
  #line 450 
  int num_q_pages;
  #line 449 
  struct pci_dev *pdev = hwif->pdev;
  #line 452 
  num_q_pages = (((int)wq->q_depth * (int)wq->wqebb_size + ((int)wq->wq_page_size + -1)) & - ((int)wq->wq_page_size)) / (int)wq->wq_page_size;
  #line 453 
  if (num_q_pages > max_pages) {
    #line 454 
    _dev_err(& pdev->dev,(char *)"Number wq pages exceeds the limit\n");
    #line 455 
    return -22;
  }
  #line 458 
  if (((num_q_pages + -1) & num_q_pages) != 0) {
    #line 459 
    _dev_err(& pdev->dev,(char *)"Number wq pages must be power of 2\n");
    #line 460 
    return -22;
  }
  #line 463 
  wq->num_q_pages = num_q_pages;
  #line 465 
  err = alloc_wqes_shadow(wq);
  #line 466 
  if (err != 0) {
    #line 467 
    _dev_err(& pdev->dev,(char *)"Failed to allocate wqe shadow\n");
    #line 468 
    return err;
  }
  #line 471 
  i = 0;
  #line 471 
  while (i < num_q_pages) {
    {
      #line 474 
      dma_addr_t dma_addr;
      #line 472 
      void **vaddr = wq->shadow_block_vaddr + (unsigned long)i;
      #line 473 
      u64 *paddr = wq->block_vaddr + (unsigned long)i;
      #line 476 
      *vaddr = dma_alloc_coherent(& pdev->dev,(unsigned long)wq->wq_page_size,& dma_addr,3264U);
      #line 478 
      if (*vaddr == (void *)0) {
        #line 479 
        _dev_err(& pdev->dev,(char *)"Failed to allocate wq page\n");
        #line 480 
        goto err_alloc_wq_pages;
      }
      #line 484 
      *paddr = (u64)__builtin_bswap64((unsigned long)dma_addr);
    }
    #line 471 
    i ++;
  }
  #line 487 
  return 0;
  #line 489 
  err_alloc_wq_pages: 
                      #line 489 
  ;
  #line 490 
  free_wq_pages(wq,hwif,i);
  #line 491 
  return -12;
}

#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
int hinic_wq_allocate(struct hinic_wqs *wqs, struct hinic_wq *wq, u16 wqebb_size, u16 wq_page_size, u16 q_depth, u16 max_wqe_size)
{
  #line 511 
  u16 num_wqebbs_per_page;
  #line 512 
  u16 wqebb_size_shift;
  #line 513 
  int err;
  #line 509 
  struct hinic_hwif *hwif = wqs->hwif;
  #line 510 
  struct pci_dev *pdev = hwif->pdev;
  #line 515 
  if (! is_power_of_2((unsigned long)wqebb_size)) {
    #line 516 
    _dev_err(& pdev->dev,(char *)"wqebb_size must be power of 2\n");
    #line 517 
    return -22;
  }
  #line 520 
  if ((unsigned int)wq_page_size == 0U) {
    #line 521 
    _dev_err(& pdev->dev,(char *)"wq_page_size must be > 0\n");
    #line 522 
    return -22;
  }
  #line 525 
  if (((int)q_depth & ((int)q_depth + -1)) != 0) {
    #line 526 
    _dev_err(& pdev->dev,(char *)"WQ q_depth must be power of 2\n");
    #line 527 
    return -22;
  }
  #line 530 
  if (0 != 0) {
    #line 530 
    unsigned int tmp_57;
    #line 530 
    unsigned int tmp_25;
    #line 530 
    unsigned int tmp_26;
    #line 530 
    unsigned int tmp_58;
    #line 530 
    unsigned int tmp_59;
    #line 530 
    unsigned int tmp_27;
    #line 530 
    unsigned int tmp_28;
    #line 530 
    unsigned int tmp_60;
    #line 530 
    unsigned int tmp_61;
    #line 530 
    unsigned int tmp_29;
    #line 530 
    unsigned int tmp_30;
    #line 530 
    unsigned int tmp_31;
    #line 530 
    unsigned int tmp_0;
    #line 530 
    unsigned int tmp_32;
    #line 530 
    unsigned int tmp_33;
    #line 530 
    unsigned int tmp_1;
    #line 530 
    unsigned int tmp_2;
    #line 530 
    unsigned int tmp_34;
    #line 530 
    unsigned int tmp_35;
    #line 530 
    unsigned int tmp_3;
    #line 530 
    unsigned int tmp_4;
    #line 530 
    unsigned int tmp_36;
    #line 530 
    unsigned int tmp_37;
    #line 530 
    unsigned int tmp_5;
    #line 530 
    unsigned int tmp_6;
    #line 530 
    unsigned int tmp_38;
    #line 530 
    unsigned int tmp_39;
    #line 530 
    unsigned int tmp_7;
    #line 530 
    unsigned int tmp_8;
    #line 530 
    unsigned int tmp_40;
    #line 530 
    unsigned int tmp_41;
    #line 530 
    unsigned int tmp_9;
    #line 530 
    unsigned int tmp_10;
    #line 530 
    unsigned int tmp_42;
    #line 530 
    unsigned int tmp_43;
    #line 530 
    unsigned int tmp_11;
    #line 530 
    unsigned int tmp_12;
    #line 530 
    unsigned int tmp_44;
    #line 530 
    unsigned int tmp_45;
    #line 530 
    unsigned int tmp_13;
    #line 530 
    unsigned int tmp_14;
    #line 530 
    unsigned int tmp_46;
    #line 530 
    unsigned int tmp_47;
    #line 530 
    unsigned int tmp_15;
    #line 530 
    unsigned int tmp_16;
    #line 530 
    unsigned int tmp_48;
    #line 530 
    unsigned int tmp_49;
    #line 530 
    unsigned int tmp_17;
    #line 530 
    unsigned int tmp_18;
    #line 530 
    unsigned int tmp_50;
    #line 530 
    unsigned int tmp_51;
    #line 530 
    unsigned int tmp_19;
    #line 530 
    unsigned int tmp_20;
    #line 530 
    unsigned int tmp_52;
    #line 530 
    unsigned int tmp_53;
    #line 530 
    unsigned int tmp_21;
    #line 530 
    unsigned int tmp_22;
    #line 530 
    unsigned int tmp_54;
    #line 530 
    unsigned int tmp_55;
    #line 530 
    unsigned int tmp_23;
    #line 530 
    unsigned int tmp_24;
    #line 530 
    unsigned int tmp_56;
    #line 530 
    unsigned int tmp_62;
    #line 530 
    if ((unsigned int)wqebb_size > 1U) {
      #line 530 
      if (((unsigned long long)wqebb_size & 9223372036854775808ULL) == 0ULL) {
        #line 530 
        if (((unsigned long long)wqebb_size & 4611686018427387904ULL) == 0ULL) {
          #line 530 
          if (((unsigned long long)wqebb_size & 2305843009213693952ULL) == 0ULL) {
            #line 530 
            if (((unsigned long long)wqebb_size & 1152921504606846976ULL) == 0ULL) {
              #line 530 
              if (((unsigned long long)wqebb_size & 576460752303423488ULL) == 0ULL) {
                #line 530 
                if (((unsigned long long)wqebb_size & 288230376151711744ULL) == 0ULL) {
                  #line 530 
                  if (((unsigned long long)wqebb_size & 144115188075855872ULL) == 0ULL) {
                    #line 530 
                    if (((unsigned long long)wqebb_size & 72057594037927936ULL) == 0ULL) {
                      #line 530 
                      if (((unsigned long long)wqebb_size & 36028797018963968ULL) == 0ULL) {
                        #line 530 
                        if (((unsigned long long)wqebb_size & 18014398509481984ULL) == 0ULL) {
                          #line 530 
                          if (((unsigned long long)wqebb_size & 9007199254740992ULL) == 0ULL) {
                            #line 530 
                            if (((unsigned long long)wqebb_size & 4503599627370496ULL) == 0ULL) {
                              #line 530 
                              if (((unsigned long long)wqebb_size & 2251799813685248ULL) == 0ULL) {
                                #line 530 
                                if (((unsigned long long)wqebb_size & 1125899906842624ULL) == 0ULL) {
                                  #line 530 
                                  if (((unsigned long long)wqebb_size & 562949953421312ULL) == 0ULL) {
                                    #line 530 
                                    if (((unsigned long long)wqebb_size & 281474976710656ULL) == 0ULL) {
                                      #line 530 
                                      if (((unsigned long long)wqebb_size & 140737488355328ULL) == 0ULL) {
                                        #line 530 
                                        if (((unsigned long long)wqebb_size & 70368744177664ULL) == 0ULL) {
                                          #line 530 
                                          if (((unsigned long long)wqebb_size & 35184372088832ULL) == 0ULL) {
                                            #line 530 
                                            if (((unsigned long long)wqebb_size & 17592186044416ULL) == 0ULL) {
                                              #line 530 
                                              if (((unsigned long long)wqebb_size & 8796093022208ULL) == 0ULL) {
                                                #line 530 
                                                if (((unsigned long long)wqebb_size & 4398046511104ULL) == 0ULL) {
                                                  #line 530 
                                                  if (((unsigned long long)wqebb_size & 2199023255552ULL) == 0ULL) {
                                                    #line 530 
                                                    if (((unsigned long long)wqebb_size & 1099511627776ULL) == 0ULL) {
                                                      #line 530 
                                                      if (((unsigned long long)wqebb_size & 549755813888ULL) == 0ULL) {
                                                        #line 530 
                                                        if (((unsigned long long)wqebb_size & 274877906944ULL) == 0ULL) {
                                                          #line 530 
                                                          if (((unsigned long long)wqebb_size & 137438953472ULL) == 0ULL) {
                                                            #line 530 
                                                            if (((unsigned long long)wqebb_size & 68719476736ULL) == 0ULL) {
                                                              #line 530 
                                                              if (((unsigned long long)wqebb_size & 34359738368ULL) == 0ULL) {
                                                                #line 530 
                                                                if (((unsigned long long)wqebb_size & 17179869184ULL) == 0ULL) {
                                                                  #line 530 
                                                                  if (
                                                                    ((unsigned long long)wqebb_size & 8589934592ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4294967296ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 2147483648ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 1073741824ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 536870912ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 268435456ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 134217728ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 67108864ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 33554432ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 16777216ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 8388608ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4194304ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 2097152ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 1048576ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 524288ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 262144ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 131072ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 65536ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 32768ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 16384ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 8192ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4096ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 2048ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 1024ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 512ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 256ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 128ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 64ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 32ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 16ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 8ULL) == 0ULL) {
                                                                    #line 530 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4ULL) != 0ULL) 
                                                                    #line 530 
                                                                    tmp_0 = 2U; else 
                                                                    #line 530 
                                                                    tmp_0 = 1U;
                                                                    #line 530 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_1 = 3U;
                                                                    #line 530 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_2 = 4U;
                                                                    #line 530 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_3 = 5U;
                                                                    #line 530 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_4 = 6U;
                                                                    #line 530 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_5 = 7U;
                                                                    #line 530 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_6 = 8U;
                                                                    #line 530 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_7 = 9U;
                                                                    #line 530 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_8 = 10U;
                                                                    #line 530 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_9 = 11U;
                                                                    #line 530 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_10 = 12U;
                                                                    #line 530 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_11 = 13U;
                                                                    #line 530 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_12 = 14U;
                                                                    #line 530 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_13 = 15U;
                                                                    #line 530 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_14 = 16U;
                                                                    #line 530 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_15 = 17U;
                                                                    #line 530 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_16 = 18U;
                                                                    #line 530 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_17 = 19U;
                                                                    #line 530 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_18 = 20U;
                                                                    #line 530 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_19 = 21U;
                                                                    #line 530 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_20 = 22U;
                                                                    #line 530 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_21 = 23U;
                                                                    #line 530 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_22 = 24U;
                                                                    #line 530 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_23 = 25U;
                                                                    #line 530 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_24 = 26U;
                                                                    #line 530 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_25 = 27U;
                                                                    #line 530 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_26 = 28U;
                                                                    #line 530 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_27 = 29U;
                                                                    #line 530 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_28 = 30U;
                                                                    #line 530 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_29 = 31U;
                                                                    #line 530 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 530 
                                                                    tmp_30 = 32U;
                                                                    #line 530 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 530 
                                                                    tmp_31 = 33U;
                                                                  #line 530 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 530 
                                                                  tmp_32 = 34U;
                                                                #line 530 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 530 
                                                                   tmp_33 = 35U;
                                                              #line 530 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 530 
                                                                 tmp_34 = 36U;
                                                            #line 530 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 530 
                                                               tmp_35 = 37U;
                                                          #line 530 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 530 
                                                             tmp_36 = 38U;
                                                        #line 530 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 530 
                                                           tmp_37 = 39U;
                                                      #line 530 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 530 
                                                         tmp_38 = 40U;
                                                    #line 530 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 530 
                                                       tmp_39 = 41U;
                                                  #line 530 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 530 
                                                     tmp_40 = 42U;
                                                #line 530 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 530 
                                                   tmp_41 = 43U;
                                              #line 530 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 530 
                                                 tmp_42 = 44U;
                                            #line 530 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 530 
                                               tmp_43 = 45U;
                                          #line 530 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 530 
                                             tmp_44 = 46U;
                                        #line 530 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 530 
                                           tmp_45 = 47U;
                                      #line 530 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 530 
                                         tmp_46 = 48U;
                                    #line 530 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 530 
                                       tmp_47 = 49U;
                                  #line 530 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 530 
                                     tmp_48 = 50U;
                                #line 530 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 530 
                                   tmp_49 = 51U;
                              #line 530 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 530 
                                 tmp_50 = 52U;
                            #line 530 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 530 
                               tmp_51 = 53U;
                          #line 530 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 530 
                             tmp_52 = 54U;
                        #line 530 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 530 
                           tmp_53 = 55U;
                      #line 530 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 530 
                         tmp_54 = 56U;
                    #line 530 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 530 
                       tmp_55 = 57U;
                  #line 530 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 530 
                     tmp_56 = 58U;
                #line 530 
                tmp_57 = tmp_56;
              }
              else 
                   #line 530 
                   tmp_57 = 59U;
              #line 530 
              tmp_58 = tmp_57;
            }
            else 
                 #line 530 
                 tmp_58 = 60U;
            #line 530 
            tmp_59 = tmp_58;
          }
          else 
               #line 530 
               tmp_59 = 61U;
          #line 530 
          tmp_60 = tmp_59;
        }
        else 
             #line 530 
             tmp_60 = 62U;
        #line 530 
        tmp_61 = tmp_60;
      }
      else 
           #line 530 
           tmp_61 = 63U;
      #line 530 
      tmp_62 = tmp_61;
    }
    else 
         #line 530 
         tmp_62 = 0U;
    #line 530 
    wqebb_size_shift = (unsigned short)tmp_62;
  }
  else {
    #line 530 
    wqebb_size_shift = (unsigned short)__ilog2_u32((unsigned int)wqebb_size);
  }
  #line 531 
  num_wqebbs_per_page = (unsigned short)((((int)wq_page_size + ((int)wqebb_size + -1)) & - ((int)wqebb_size)) >> (int)wqebb_size_shift);
  #line 534 
  if (! is_power_of_2((unsigned long)num_wqebbs_per_page)) {
    #line 535 
    _dev_err(& pdev->dev,(char *)"num wqebbs per page must be power of 2\n");
    #line 536 
    return -22;
  }
  #line 539 
  wq->hwif = hwif;
  #line 541 
  err = wqs_next_block(wqs,& wq->page_idx,& wq->block_idx);
  #line 542 
  if (err != 0) {
    #line 543 
    _dev_err(& pdev->dev,(char *)"Failed to get free wqs next block\n");
    #line 544 
    return err;
  }
  #line 547 
  wq->wqebb_size = wqebb_size;
  #line 548 
  wq->wq_page_size = wq_page_size;
  #line 549 
  wq->q_depth = q_depth;
  #line 550 
  wq->max_wqe_size = max_wqe_size;
  #line 551 
  wq->num_wqebbs_per_page = num_wqebbs_per_page;
  #line 552 
  if (0 != 0) {
    #line 552 
    unsigned int tmp_89;
    #line 552 
    unsigned int tmp_121;
    #line 552 
    unsigned int tmp_122;
    #line 552 
    unsigned int tmp_90;
    #line 552 
    unsigned int tmp_91;
    #line 552 
    unsigned int tmp_123;
    #line 552 
    unsigned int tmp_124;
    #line 552 
    unsigned int tmp_92;
    #line 552 
    unsigned int tmp_93;
    #line 552 
    unsigned int tmp_125;
    #line 552 
    unsigned int tmp_126;
    #line 552 
    unsigned int tmp_94;
    #line 552 
    unsigned int tmp_95;
    #line 552 
    unsigned int tmp_96;
    #line 552 
    unsigned int tmp_65;
    #line 552 
    unsigned int tmp_97;
    #line 552 
    unsigned int tmp_98;
    #line 552 
    unsigned int tmp_66;
    #line 552 
    unsigned int tmp_67;
    #line 552 
    unsigned int tmp_99;
    #line 552 
    unsigned int tmp_100;
    #line 552 
    unsigned int tmp_68;
    #line 552 
    unsigned int tmp_69;
    #line 552 
    unsigned int tmp_101;
    #line 552 
    unsigned int tmp_102;
    #line 552 
    unsigned int tmp_70;
    #line 552 
    unsigned int tmp_71;
    #line 552 
    unsigned int tmp_103;
    #line 552 
    unsigned int tmp_104;
    #line 552 
    unsigned int tmp_72;
    #line 552 
    unsigned int tmp_73;
    #line 552 
    unsigned int tmp_105;
    #line 552 
    unsigned int tmp_106;
    #line 552 
    unsigned int tmp_74;
    #line 552 
    unsigned int tmp_75;
    #line 552 
    unsigned int tmp_107;
    #line 552 
    unsigned int tmp_108;
    #line 552 
    unsigned int tmp_76;
    #line 552 
    unsigned int tmp_77;
    #line 552 
    unsigned int tmp_109;
    #line 552 
    unsigned int tmp_110;
    #line 552 
    unsigned int tmp_78;
    #line 552 
    unsigned int tmp_79;
    #line 552 
    unsigned int tmp_111;
    #line 552 
    unsigned int tmp_112;
    #line 552 
    unsigned int tmp_80;
    #line 552 
    unsigned int tmp_81;
    #line 552 
    unsigned int tmp_113;
    #line 552 
    unsigned int tmp_114;
    #line 552 
    unsigned int tmp_82;
    #line 552 
    unsigned int tmp_83;
    #line 552 
    unsigned int tmp_115;
    #line 552 
    unsigned int tmp_116;
    #line 552 
    unsigned int tmp_84;
    #line 552 
    unsigned int tmp_85;
    #line 552 
    unsigned int tmp_117;
    #line 552 
    unsigned int tmp_118;
    #line 552 
    unsigned int tmp_86;
    #line 552 
    unsigned int tmp_87;
    #line 552 
    unsigned int tmp_119;
    #line 552 
    unsigned int tmp_120;
    #line 552 
    unsigned int tmp_88;
    #line 552 
    unsigned int tmp_127;
    #line 552 
    if ((unsigned int)num_wqebbs_per_page > 1U) {
      #line 552 
      if (((unsigned long long)num_wqebbs_per_page & 9223372036854775808ULL) == 0ULL) {
        #line 552 
        if (((unsigned long long)num_wqebbs_per_page & 4611686018427387904ULL) == 0ULL) {
          #line 552 
          if (((unsigned long long)num_wqebbs_per_page & 2305843009213693952ULL) == 0ULL) {
            #line 552 
            if (((unsigned long long)num_wqebbs_per_page & 1152921504606846976ULL) == 0ULL) {
              #line 552 
              if (((unsigned long long)num_wqebbs_per_page & 576460752303423488ULL) == 0ULL) {
                #line 552 
                if (((unsigned long long)num_wqebbs_per_page & 288230376151711744ULL) == 0ULL) {
                  #line 552 
                  if (((unsigned long long)num_wqebbs_per_page & 144115188075855872ULL) == 0ULL) {
                    #line 552 
                    if (((unsigned long long)num_wqebbs_per_page & 72057594037927936ULL) == 0ULL) {
                      #line 552 
                      if (((unsigned long long)num_wqebbs_per_page & 36028797018963968ULL) == 0ULL) {
                        #line 552 
                        if (((unsigned long long)num_wqebbs_per_page & 18014398509481984ULL) == 0ULL) {
                          #line 552 
                          if (((unsigned long long)num_wqebbs_per_page & 9007199254740992ULL) == 0ULL) {
                            #line 552 
                            if (((unsigned long long)num_wqebbs_per_page & 4503599627370496ULL) == 0ULL) {
                              #line 552 
                              if (((unsigned long long)num_wqebbs_per_page & 2251799813685248ULL) == 0ULL) {
                                #line 552 
                                if (((unsigned long long)num_wqebbs_per_page & 1125899906842624ULL) == 0ULL) {
                                  #line 552 
                                  if (((unsigned long long)num_wqebbs_per_page & 562949953421312ULL) == 0ULL) {
                                    #line 552 
                                    if (((unsigned long long)num_wqebbs_per_page & 281474976710656ULL) == 0ULL) {
                                      #line 552 
                                      if (((unsigned long long)num_wqebbs_per_page & 140737488355328ULL) == 0ULL) {
                                        #line 552 
                                        if (((unsigned long long)num_wqebbs_per_page & 70368744177664ULL) == 0ULL) {
                                          #line 552 
                                          if (((unsigned long long)num_wqebbs_per_page & 35184372088832ULL) == 0ULL) {
                                            #line 552 
                                            if (((unsigned long long)num_wqebbs_per_page & 17592186044416ULL) == 0ULL) {
                                              #line 552 
                                              if (((unsigned long long)num_wqebbs_per_page & 8796093022208ULL) == 0ULL) {
                                                #line 552 
                                                if (((unsigned long long)num_wqebbs_per_page & 4398046511104ULL) == 0ULL) {
                                                  #line 552 
                                                  if (((unsigned long long)num_wqebbs_per_page & 2199023255552ULL) == 0ULL) {
                                                    #line 552 
                                                    if (((unsigned long long)num_wqebbs_per_page & 1099511627776ULL) == 0ULL) {
                                                      #line 552 
                                                      if (((unsigned long long)num_wqebbs_per_page & 549755813888ULL) == 0ULL) {
                                                        #line 552 
                                                        if (((unsigned long long)num_wqebbs_per_page & 274877906944ULL) == 0ULL) {
                                                          #line 552 
                                                          if (((unsigned long long)num_wqebbs_per_page & 137438953472ULL) == 0ULL) {
                                                            #line 552 
                                                            if (((unsigned long long)num_wqebbs_per_page & 68719476736ULL) == 0ULL) {
                                                              #line 552 
                                                              if (((unsigned long long)num_wqebbs_per_page & 34359738368ULL) == 0ULL) {
                                                                #line 552 
                                                                if (((unsigned long long)num_wqebbs_per_page & 17179869184ULL) == 0ULL) {
                                                                  #line 552 
                                                                  if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8589934592ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4294967296ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 2147483648ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 1073741824ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 536870912ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 268435456ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 134217728ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 67108864ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 33554432ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 16777216ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8388608ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4194304ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 2097152ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 1048576ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 524288ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 262144ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 131072ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 65536ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 32768ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 16384ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8192ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4096ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 2048ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 1024ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 512ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 256ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 128ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 64ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 32ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 16ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8ULL) == 0ULL) {
                                                                    #line 552 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4ULL) != 0ULL) 
                                                                    #line 552 
                                                                    tmp_65 = 2U; else 
                                                                    #line 552 
                                                                    tmp_65 = 1U;
                                                                    #line 552 
                                                                    tmp_66 = tmp_65;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_66 = 3U;
                                                                    #line 552 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_67 = 4U;
                                                                    #line 552 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_68 = 5U;
                                                                    #line 552 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_69 = 6U;
                                                                    #line 552 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_70 = 7U;
                                                                    #line 552 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_71 = 8U;
                                                                    #line 552 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_72 = 9U;
                                                                    #line 552 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_73 = 10U;
                                                                    #line 552 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_74 = 11U;
                                                                    #line 552 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_75 = 12U;
                                                                    #line 552 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_76 = 13U;
                                                                    #line 552 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_77 = 14U;
                                                                    #line 552 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_78 = 15U;
                                                                    #line 552 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_79 = 16U;
                                                                    #line 552 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_80 = 17U;
                                                                    #line 552 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_81 = 18U;
                                                                    #line 552 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_82 = 19U;
                                                                    #line 552 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_83 = 20U;
                                                                    #line 552 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_84 = 21U;
                                                                    #line 552 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_85 = 22U;
                                                                    #line 552 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_86 = 23U;
                                                                    #line 552 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_87 = 24U;
                                                                    #line 552 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_88 = 25U;
                                                                    #line 552 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_89 = 26U;
                                                                    #line 552 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_90 = 27U;
                                                                    #line 552 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_91 = 28U;
                                                                    #line 552 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_92 = 29U;
                                                                    #line 552 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_93 = 30U;
                                                                    #line 552 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_94 = 31U;
                                                                    #line 552 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 552 
                                                                    tmp_95 = 32U;
                                                                    #line 552 
                                                                    tmp_96 = tmp_95;
                                                                  }
                                                                  else 
                                                                    #line 552 
                                                                    tmp_96 = 33U;
                                                                  #line 552 
                                                                  tmp_97 = tmp_96;
                                                                }
                                                                else 
                                                                  #line 552 
                                                                  tmp_97 = 34U;
                                                                #line 552 
                                                                tmp_98 = tmp_97;
                                                              }
                                                              else 
                                                                   #line 552 
                                                                   tmp_98 = 35U;
                                                              #line 552 
                                                              tmp_99 = tmp_98;
                                                            }
                                                            else 
                                                                 #line 552 
                                                                 tmp_99 = 36U;
                                                            #line 552 
                                                            tmp_100 = tmp_99;
                                                          }
                                                          else 
                                                               #line 552 
                                                               tmp_100 = 37U;
                                                          #line 552 
                                                          tmp_101 = tmp_100;
                                                        }
                                                        else 
                                                             #line 552 
                                                             tmp_101 = 38U;
                                                        #line 552 
                                                        tmp_102 = tmp_101;
                                                      }
                                                      else 
                                                           #line 552 
                                                           tmp_102 = 39U;
                                                      #line 552 
                                                      tmp_103 = tmp_102;
                                                    }
                                                    else 
                                                         #line 552 
                                                         tmp_103 = 40U;
                                                    #line 552 
                                                    tmp_104 = tmp_103;
                                                  }
                                                  else 
                                                       #line 552 
                                                       tmp_104 = 41U;
                                                  #line 552 
                                                  tmp_105 = tmp_104;
                                                }
                                                else 
                                                     #line 552 
                                                     tmp_105 = 42U;
                                                #line 552 
                                                tmp_106 = tmp_105;
                                              }
                                              else 
                                                   #line 552 
                                                   tmp_106 = 43U;
                                              #line 552 
                                              tmp_107 = tmp_106;
                                            }
                                            else 
                                                 #line 552 
                                                 tmp_107 = 44U;
                                            #line 552 
                                            tmp_108 = tmp_107;
                                          }
                                          else 
                                               #line 552 
                                               tmp_108 = 45U;
                                          #line 552 
                                          tmp_109 = tmp_108;
                                        }
                                        else 
                                             #line 552 
                                             tmp_109 = 46U;
                                        #line 552 
                                        tmp_110 = tmp_109;
                                      }
                                      else 
                                           #line 552 
                                           tmp_110 = 47U;
                                      #line 552 
                                      tmp_111 = tmp_110;
                                    }
                                    else 
                                         #line 552 
                                         tmp_111 = 48U;
                                    #line 552 
                                    tmp_112 = tmp_111;
                                  }
                                  else 
                                       #line 552 
                                       tmp_112 = 49U;
                                  #line 552 
                                  tmp_113 = tmp_112;
                                }
                                else 
                                     #line 552 
                                     tmp_113 = 50U;
                                #line 552 
                                tmp_114 = tmp_113;
                              }
                              else 
                                   #line 552 
                                   tmp_114 = 51U;
                              #line 552 
                              tmp_115 = tmp_114;
                            }
                            else 
                                 #line 552 
                                 tmp_115 = 52U;
                            #line 552 
                            tmp_116 = tmp_115;
                          }
                          else 
                               #line 552 
                               tmp_116 = 53U;
                          #line 552 
                          tmp_117 = tmp_116;
                        }
                        else 
                             #line 552 
                             tmp_117 = 54U;
                        #line 552 
                        tmp_118 = tmp_117;
                      }
                      else 
                           #line 552 
                           tmp_118 = 55U;
                      #line 552 
                      tmp_119 = tmp_118;
                    }
                    else 
                         #line 552 
                         tmp_119 = 56U;
                    #line 552 
                    tmp_120 = tmp_119;
                  }
                  else 
                       #line 552 
                       tmp_120 = 57U;
                  #line 552 
                  tmp_121 = tmp_120;
                }
                else 
                     #line 552 
                     tmp_121 = 58U;
                #line 552 
                tmp_122 = tmp_121;
              }
              else 
                   #line 552 
                   tmp_122 = 59U;
              #line 552 
              tmp_123 = tmp_122;
            }
            else 
                 #line 552 
                 tmp_123 = 60U;
            #line 552 
            tmp_124 = tmp_123;
          }
          else 
               #line 552 
               tmp_124 = 61U;
          #line 552 
          tmp_125 = tmp_124;
        }
        else 
             #line 552 
             tmp_125 = 62U;
        #line 552 
        tmp_126 = tmp_125;
      }
      else 
           #line 552 
           tmp_126 = 63U;
      #line 552 
      tmp_127 = tmp_126;
    }
    else 
         #line 552 
         tmp_127 = 0U;
    #line 552 
    wq->wqebbs_per_page_shift = (unsigned short)tmp_127;
  }
  else {
    #line 552 
    wq->wqebbs_per_page_shift = (unsigned short)__ilog2_u32((unsigned int)num_wqebbs_per_page);
  }
  #line 553 
  wq->wqebb_size_shift = wqebb_size_shift;
  #line 554 
  wq->block_vaddr = (u64 *)((void *)*(wqs->page_vaddr + (unsigned long)wq->page_idx) + (unsigned long)(wq->block_idx * 4096));
  #line 555 
  wq->shadow_block_vaddr = (void **)((void *)*(wqs->shadow_page_vaddr + (unsigned long)wq->page_idx) + (unsigned long)(wq->block_idx * 4096));
  #line 556 
  wq->block_paddr = *(wqs->page_paddr + (unsigned long)wq->page_idx) + (unsigned long long)(wq->block_idx * 4096);
  #line 558 
  err = alloc_wq_pages(wq,wqs->hwif,512);
  #line 559 
  if (err != 0) {
    #line 560 
    _dev_err(& pdev->dev,(char *)"Failed to allocate wq pages\n");
    #line 561 
    goto err_alloc_wq_pages;
  }
  #line 564 
  atomic_set(& wq->cons_idx,0);
  #line 565 
  atomic_set(& wq->prod_idx,0);
  #line 566 
  atomic_set(& wq->delta,(int)q_depth);
  #line 567 
  wq->mask = (unsigned short)((unsigned int)q_depth + 65535U);
  #line 569 
  return 0;
  #line 571 
  err_alloc_wq_pages: 
                      #line 571 
  ;
  #line 572 
  wqs_return_block(wqs,wq->page_idx,wq->block_idx);
  #line 573 
  return err;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_wq_free(struct hinic_wqs *wqs, struct hinic_wq *wq)
{
  #line 583 
  free_wq_pages(wq,wqs->hwif,wq->num_q_pages);
  #line 585 
  wqs_return_block(wqs,wq->page_idx,wq->block_idx);
  #line 586 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
int hinic_wqs_cmdq_alloc(struct hinic_cmdq_pages *cmdq_pages, struct hinic_wq *wq, struct hinic_hwif *hwif, int cmdq_blocks, u16 wqebb_size, u16 wq_page_size, u16 q_depth, u16 max_wqe_size)
{
  #line 607 
  u16 num_wqebbs_per_page_shift;
  #line 608 
  u16 num_wqebbs_per_page;
  #line 609 
  u16 wqebb_size_shift;
  #line 610 
  int i;
  #line 610 
  int j;
  #line 606 
  struct pci_dev *pdev = hwif->pdev;
  #line 610 
  int err = -12;
  #line 612 
  if (! is_power_of_2((unsigned long)wqebb_size)) {
    #line 613 
    _dev_err(& pdev->dev,(char *)"wqebb_size must be power of 2\n");
    #line 614 
    return -22;
  }
  #line 617 
  if ((unsigned int)wq_page_size == 0U) {
    #line 618 
    _dev_err(& pdev->dev,(char *)"wq_page_size must be > 0\n");
    #line 619 
    return -22;
  }
  #line 622 
  if (((int)q_depth & ((int)q_depth + -1)) != 0) {
    #line 623 
    _dev_err(& pdev->dev,(char *)"WQ q_depth must be power of 2\n");
    #line 624 
    return -22;
  }
  #line 627 
  if (0 != 0) {
    #line 627 
    unsigned int tmp_26;
    #line 627 
    unsigned int tmp_58;
    #line 627 
    unsigned int tmp_59;
    #line 627 
    unsigned int tmp_27;
    #line 627 
    unsigned int tmp_28;
    #line 627 
    unsigned int tmp_60;
    #line 627 
    unsigned int tmp_61;
    #line 627 
    unsigned int tmp_29;
    #line 627 
    unsigned int tmp_30;
    #line 627 
    unsigned int tmp_31;
    #line 627 
    unsigned int tmp_0;
    #line 627 
    unsigned int tmp_32;
    #line 627 
    unsigned int tmp_33;
    #line 627 
    unsigned int tmp_1;
    #line 627 
    unsigned int tmp_2;
    #line 627 
    unsigned int tmp_34;
    #line 627 
    unsigned int tmp_35;
    #line 627 
    unsigned int tmp_3;
    #line 627 
    unsigned int tmp_4;
    #line 627 
    unsigned int tmp_36;
    #line 627 
    unsigned int tmp_37;
    #line 627 
    unsigned int tmp_5;
    #line 627 
    unsigned int tmp_6;
    #line 627 
    unsigned int tmp_38;
    #line 627 
    unsigned int tmp_39;
    #line 627 
    unsigned int tmp_7;
    #line 627 
    unsigned int tmp_8;
    #line 627 
    unsigned int tmp_40;
    #line 627 
    unsigned int tmp_41;
    #line 627 
    unsigned int tmp_9;
    #line 627 
    unsigned int tmp_10;
    #line 627 
    unsigned int tmp_42;
    #line 627 
    unsigned int tmp_43;
    #line 627 
    unsigned int tmp_11;
    #line 627 
    unsigned int tmp_12;
    #line 627 
    unsigned int tmp_44;
    #line 627 
    unsigned int tmp_45;
    #line 627 
    unsigned int tmp_13;
    #line 627 
    unsigned int tmp_14;
    #line 627 
    unsigned int tmp_46;
    #line 627 
    unsigned int tmp_47;
    #line 627 
    unsigned int tmp_15;
    #line 627 
    unsigned int tmp_16;
    #line 627 
    unsigned int tmp_48;
    #line 627 
    unsigned int tmp_49;
    #line 627 
    unsigned int tmp_17;
    #line 627 
    unsigned int tmp_18;
    #line 627 
    unsigned int tmp_50;
    #line 627 
    unsigned int tmp_51;
    #line 627 
    unsigned int tmp_19;
    #line 627 
    unsigned int tmp_20;
    #line 627 
    unsigned int tmp_52;
    #line 627 
    unsigned int tmp_53;
    #line 627 
    unsigned int tmp_21;
    #line 627 
    unsigned int tmp_22;
    #line 627 
    unsigned int tmp_54;
    #line 627 
    unsigned int tmp_55;
    #line 627 
    unsigned int tmp_23;
    #line 627 
    unsigned int tmp_24;
    #line 627 
    unsigned int tmp_56;
    #line 627 
    unsigned int tmp_57;
    #line 627 
    unsigned int tmp_25;
    #line 627 
    unsigned int tmp_62;
    #line 627 
    if ((unsigned int)wqebb_size > 1U) {
      #line 627 
      if (((unsigned long long)wqebb_size & 9223372036854775808ULL) == 0ULL) {
        #line 627 
        if (((unsigned long long)wqebb_size & 4611686018427387904ULL) == 0ULL) {
          #line 627 
          if (((unsigned long long)wqebb_size & 2305843009213693952ULL) == 0ULL) {
            #line 627 
            if (((unsigned long long)wqebb_size & 1152921504606846976ULL) == 0ULL) {
              #line 627 
              if (((unsigned long long)wqebb_size & 576460752303423488ULL) == 0ULL) {
                #line 627 
                if (((unsigned long long)wqebb_size & 288230376151711744ULL) == 0ULL) {
                  #line 627 
                  if (((unsigned long long)wqebb_size & 144115188075855872ULL) == 0ULL) {
                    #line 627 
                    if (((unsigned long long)wqebb_size & 72057594037927936ULL) == 0ULL) {
                      #line 627 
                      if (((unsigned long long)wqebb_size & 36028797018963968ULL) == 0ULL) {
                        #line 627 
                        if (((unsigned long long)wqebb_size & 18014398509481984ULL) == 0ULL) {
                          #line 627 
                          if (((unsigned long long)wqebb_size & 9007199254740992ULL) == 0ULL) {
                            #line 627 
                            if (((unsigned long long)wqebb_size & 4503599627370496ULL) == 0ULL) {
                              #line 627 
                              if (((unsigned long long)wqebb_size & 2251799813685248ULL) == 0ULL) {
                                #line 627 
                                if (((unsigned long long)wqebb_size & 1125899906842624ULL) == 0ULL) {
                                  #line 627 
                                  if (((unsigned long long)wqebb_size & 562949953421312ULL) == 0ULL) {
                                    #line 627 
                                    if (((unsigned long long)wqebb_size & 281474976710656ULL) == 0ULL) {
                                      #line 627 
                                      if (((unsigned long long)wqebb_size & 140737488355328ULL) == 0ULL) {
                                        #line 627 
                                        if (((unsigned long long)wqebb_size & 70368744177664ULL) == 0ULL) {
                                          #line 627 
                                          if (((unsigned long long)wqebb_size & 35184372088832ULL) == 0ULL) {
                                            #line 627 
                                            if (((unsigned long long)wqebb_size & 17592186044416ULL) == 0ULL) {
                                              #line 627 
                                              if (((unsigned long long)wqebb_size & 8796093022208ULL) == 0ULL) {
                                                #line 627 
                                                if (((unsigned long long)wqebb_size & 4398046511104ULL) == 0ULL) {
                                                  #line 627 
                                                  if (((unsigned long long)wqebb_size & 2199023255552ULL) == 0ULL) {
                                                    #line 627 
                                                    if (((unsigned long long)wqebb_size & 1099511627776ULL) == 0ULL) {
                                                      #line 627 
                                                      if (((unsigned long long)wqebb_size & 549755813888ULL) == 0ULL) {
                                                        #line 627 
                                                        if (((unsigned long long)wqebb_size & 274877906944ULL) == 0ULL) {
                                                          #line 627 
                                                          if (((unsigned long long)wqebb_size & 137438953472ULL) == 0ULL) {
                                                            #line 627 
                                                            if (((unsigned long long)wqebb_size & 68719476736ULL) == 0ULL) {
                                                              #line 627 
                                                              if (((unsigned long long)wqebb_size & 34359738368ULL) == 0ULL) {
                                                                #line 627 
                                                                if (((unsigned long long)wqebb_size & 17179869184ULL) == 0ULL) {
                                                                  #line 627 
                                                                  if (
                                                                    ((unsigned long long)wqebb_size & 8589934592ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4294967296ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 2147483648ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 1073741824ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 536870912ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 268435456ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 134217728ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 67108864ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 33554432ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 16777216ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 8388608ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4194304ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 2097152ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 1048576ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 524288ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 262144ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 131072ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 65536ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 32768ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 16384ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 8192ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4096ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 2048ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 1024ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 512ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 256ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 128ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 64ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 32ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 16ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 8ULL) == 0ULL) {
                                                                    #line 627 
                                                                    if (
                                                                    ((unsigned long long)wqebb_size & 4ULL) != 0ULL) 
                                                                    #line 627 
                                                                    tmp_0 = 2U; else 
                                                                    #line 627 
                                                                    tmp_0 = 1U;
                                                                    #line 627 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_1 = 3U;
                                                                    #line 627 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_2 = 4U;
                                                                    #line 627 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_3 = 5U;
                                                                    #line 627 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_4 = 6U;
                                                                    #line 627 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_5 = 7U;
                                                                    #line 627 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_6 = 8U;
                                                                    #line 627 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_7 = 9U;
                                                                    #line 627 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_8 = 10U;
                                                                    #line 627 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_9 = 11U;
                                                                    #line 627 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_10 = 12U;
                                                                    #line 627 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_11 = 13U;
                                                                    #line 627 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_12 = 14U;
                                                                    #line 627 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_13 = 15U;
                                                                    #line 627 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_14 = 16U;
                                                                    #line 627 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_15 = 17U;
                                                                    #line 627 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_16 = 18U;
                                                                    #line 627 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_17 = 19U;
                                                                    #line 627 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_18 = 20U;
                                                                    #line 627 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_19 = 21U;
                                                                    #line 627 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_20 = 22U;
                                                                    #line 627 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_21 = 23U;
                                                                    #line 627 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_22 = 24U;
                                                                    #line 627 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_23 = 25U;
                                                                    #line 627 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_24 = 26U;
                                                                    #line 627 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_25 = 27U;
                                                                    #line 627 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_26 = 28U;
                                                                    #line 627 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_27 = 29U;
                                                                    #line 627 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_28 = 30U;
                                                                    #line 627 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_29 = 31U;
                                                                    #line 627 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 627 
                                                                    tmp_30 = 32U;
                                                                    #line 627 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 627 
                                                                    tmp_31 = 33U;
                                                                  #line 627 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 627 
                                                                  tmp_32 = 34U;
                                                                #line 627 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 627 
                                                                   tmp_33 = 35U;
                                                              #line 627 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 627 
                                                                 tmp_34 = 36U;
                                                            #line 627 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 627 
                                                               tmp_35 = 37U;
                                                          #line 627 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 627 
                                                             tmp_36 = 38U;
                                                        #line 627 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 627 
                                                           tmp_37 = 39U;
                                                      #line 627 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 627 
                                                         tmp_38 = 40U;
                                                    #line 627 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 627 
                                                       tmp_39 = 41U;
                                                  #line 627 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 627 
                                                     tmp_40 = 42U;
                                                #line 627 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 627 
                                                   tmp_41 = 43U;
                                              #line 627 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 627 
                                                 tmp_42 = 44U;
                                            #line 627 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 627 
                                               tmp_43 = 45U;
                                          #line 627 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 627 
                                             tmp_44 = 46U;
                                        #line 627 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 627 
                                           tmp_45 = 47U;
                                      #line 627 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 627 
                                         tmp_46 = 48U;
                                    #line 627 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 627 
                                       tmp_47 = 49U;
                                  #line 627 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 627 
                                     tmp_48 = 50U;
                                #line 627 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 627 
                                   tmp_49 = 51U;
                              #line 627 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 627 
                                 tmp_50 = 52U;
                            #line 627 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 627 
                               tmp_51 = 53U;
                          #line 627 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 627 
                             tmp_52 = 54U;
                        #line 627 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 627 
                           tmp_53 = 55U;
                      #line 627 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 627 
                         tmp_54 = 56U;
                    #line 627 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 627 
                       tmp_55 = 57U;
                  #line 627 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 627 
                     tmp_56 = 58U;
                #line 627 
                tmp_57 = tmp_56;
              }
              else 
                   #line 627 
                   tmp_57 = 59U;
              #line 627 
              tmp_58 = tmp_57;
            }
            else 
                 #line 627 
                 tmp_58 = 60U;
            #line 627 
            tmp_59 = tmp_58;
          }
          else 
               #line 627 
               tmp_59 = 61U;
          #line 627 
          tmp_60 = tmp_59;
        }
        else 
             #line 627 
             tmp_60 = 62U;
        #line 627 
        tmp_61 = tmp_60;
      }
      else 
           #line 627 
           tmp_61 = 63U;
      #line 627 
      tmp_62 = tmp_61;
    }
    else 
         #line 627 
         tmp_62 = 0U;
    #line 627 
    wqebb_size_shift = (unsigned short)tmp_62;
  }
  else {
    #line 627 
    wqebb_size_shift = (unsigned short)__ilog2_u32((unsigned int)wqebb_size);
  }
  #line 628 
  num_wqebbs_per_page = (unsigned short)((((int)wq_page_size + ((int)wqebb_size + -1)) & - ((int)wqebb_size)) >> (int)wqebb_size_shift);
  #line 631 
  if (! is_power_of_2((unsigned long)num_wqebbs_per_page)) {
    #line 632 
    _dev_err(& pdev->dev,(char *)"num wqebbs per page must be power of 2\n");
    #line 633 
    return -22;
  }
  #line 636 
  cmdq_pages->hwif = hwif;
  #line 638 
  err = cmdq_allocate_page(cmdq_pages);
  #line 639 
  if (err != 0) {
    #line 640 
    _dev_err(& pdev->dev,(char *)"Failed to allocate CMDQ page\n");
    #line 641 
    return err;
  }
  #line 643 
  if (0 != 0) {
    #line 643 
    unsigned int tmp_122;
    #line 643 
    unsigned int tmp_90;
    #line 643 
    unsigned int tmp_91;
    #line 643 
    unsigned int tmp_123;
    #line 643 
    unsigned int tmp_124;
    #line 643 
    unsigned int tmp_92;
    #line 643 
    unsigned int tmp_93;
    #line 643 
    unsigned int tmp_125;
    #line 643 
    unsigned int tmp_126;
    #line 643 
    unsigned int tmp_94;
    #line 643 
    unsigned int tmp_95;
    #line 643 
    unsigned int tmp_96;
    #line 643 
    unsigned int tmp_65;
    #line 643 
    unsigned int tmp_97;
    #line 643 
    unsigned int tmp_98;
    #line 643 
    unsigned int tmp_66;
    #line 643 
    unsigned int tmp_67;
    #line 643 
    unsigned int tmp_99;
    #line 643 
    unsigned int tmp_100;
    #line 643 
    unsigned int tmp_68;
    #line 643 
    unsigned int tmp_69;
    #line 643 
    unsigned int tmp_101;
    #line 643 
    unsigned int tmp_102;
    #line 643 
    unsigned int tmp_70;
    #line 643 
    unsigned int tmp_71;
    #line 643 
    unsigned int tmp_103;
    #line 643 
    unsigned int tmp_104;
    #line 643 
    unsigned int tmp_72;
    #line 643 
    unsigned int tmp_73;
    #line 643 
    unsigned int tmp_105;
    #line 643 
    unsigned int tmp_106;
    #line 643 
    unsigned int tmp_74;
    #line 643 
    unsigned int tmp_75;
    #line 643 
    unsigned int tmp_107;
    #line 643 
    unsigned int tmp_108;
    #line 643 
    unsigned int tmp_76;
    #line 643 
    unsigned int tmp_77;
    #line 643 
    unsigned int tmp_109;
    #line 643 
    unsigned int tmp_110;
    #line 643 
    unsigned int tmp_78;
    #line 643 
    unsigned int tmp_79;
    #line 643 
    unsigned int tmp_111;
    #line 643 
    unsigned int tmp_112;
    #line 643 
    unsigned int tmp_80;
    #line 643 
    unsigned int tmp_81;
    #line 643 
    unsigned int tmp_113;
    #line 643 
    unsigned int tmp_114;
    #line 643 
    unsigned int tmp_82;
    #line 643 
    unsigned int tmp_83;
    #line 643 
    unsigned int tmp_115;
    #line 643 
    unsigned int tmp_116;
    #line 643 
    unsigned int tmp_84;
    #line 643 
    unsigned int tmp_85;
    #line 643 
    unsigned int tmp_117;
    #line 643 
    unsigned int tmp_118;
    #line 643 
    unsigned int tmp_86;
    #line 643 
    unsigned int tmp_87;
    #line 643 
    unsigned int tmp_119;
    #line 643 
    unsigned int tmp_120;
    #line 643 
    unsigned int tmp_88;
    #line 643 
    unsigned int tmp_89;
    #line 643 
    unsigned int tmp_121;
    #line 643 
    unsigned int tmp_127;
    #line 643 
    if ((unsigned int)num_wqebbs_per_page > 1U) {
      #line 643 
      if (((unsigned long long)num_wqebbs_per_page & 9223372036854775808ULL) == 0ULL) {
        #line 643 
        if (((unsigned long long)num_wqebbs_per_page & 4611686018427387904ULL) == 0ULL) {
          #line 643 
          if (((unsigned long long)num_wqebbs_per_page & 2305843009213693952ULL) == 0ULL) {
            #line 643 
            if (((unsigned long long)num_wqebbs_per_page & 1152921504606846976ULL) == 0ULL) {
              #line 643 
              if (((unsigned long long)num_wqebbs_per_page & 576460752303423488ULL) == 0ULL) {
                #line 643 
                if (((unsigned long long)num_wqebbs_per_page & 288230376151711744ULL) == 0ULL) {
                  #line 643 
                  if (((unsigned long long)num_wqebbs_per_page & 144115188075855872ULL) == 0ULL) {
                    #line 643 
                    if (((unsigned long long)num_wqebbs_per_page & 72057594037927936ULL) == 0ULL) {
                      #line 643 
                      if (((unsigned long long)num_wqebbs_per_page & 36028797018963968ULL) == 0ULL) {
                        #line 643 
                        if (((unsigned long long)num_wqebbs_per_page & 18014398509481984ULL) == 0ULL) {
                          #line 643 
                          if (((unsigned long long)num_wqebbs_per_page & 9007199254740992ULL) == 0ULL) {
                            #line 643 
                            if (((unsigned long long)num_wqebbs_per_page & 4503599627370496ULL) == 0ULL) {
                              #line 643 
                              if (((unsigned long long)num_wqebbs_per_page & 2251799813685248ULL) == 0ULL) {
                                #line 643 
                                if (((unsigned long long)num_wqebbs_per_page & 1125899906842624ULL) == 0ULL) {
                                  #line 643 
                                  if (((unsigned long long)num_wqebbs_per_page & 562949953421312ULL) == 0ULL) {
                                    #line 643 
                                    if (((unsigned long long)num_wqebbs_per_page & 281474976710656ULL) == 0ULL) {
                                      #line 643 
                                      if (((unsigned long long)num_wqebbs_per_page & 140737488355328ULL) == 0ULL) {
                                        #line 643 
                                        if (((unsigned long long)num_wqebbs_per_page & 70368744177664ULL) == 0ULL) {
                                          #line 643 
                                          if (((unsigned long long)num_wqebbs_per_page & 35184372088832ULL) == 0ULL) {
                                            #line 643 
                                            if (((unsigned long long)num_wqebbs_per_page & 17592186044416ULL) == 0ULL) {
                                              #line 643 
                                              if (((unsigned long long)num_wqebbs_per_page & 8796093022208ULL) == 0ULL) {
                                                #line 643 
                                                if (((unsigned long long)num_wqebbs_per_page & 4398046511104ULL) == 0ULL) {
                                                  #line 643 
                                                  if (((unsigned long long)num_wqebbs_per_page & 2199023255552ULL) == 0ULL) {
                                                    #line 643 
                                                    if (((unsigned long long)num_wqebbs_per_page & 1099511627776ULL) == 0ULL) {
                                                      #line 643 
                                                      if (((unsigned long long)num_wqebbs_per_page & 549755813888ULL) == 0ULL) {
                                                        #line 643 
                                                        if (((unsigned long long)num_wqebbs_per_page & 274877906944ULL) == 0ULL) {
                                                          #line 643 
                                                          if (((unsigned long long)num_wqebbs_per_page & 137438953472ULL) == 0ULL) {
                                                            #line 643 
                                                            if (((unsigned long long)num_wqebbs_per_page & 68719476736ULL) == 0ULL) {
                                                              #line 643 
                                                              if (((unsigned long long)num_wqebbs_per_page & 34359738368ULL) == 0ULL) {
                                                                #line 643 
                                                                if (((unsigned long long)num_wqebbs_per_page & 17179869184ULL) == 0ULL) {
                                                                  #line 643 
                                                                  if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8589934592ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4294967296ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 2147483648ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 1073741824ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 536870912ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 268435456ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 134217728ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 67108864ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 33554432ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 16777216ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8388608ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4194304ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 2097152ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 1048576ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 524288ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 262144ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 131072ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 65536ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 32768ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 16384ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8192ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4096ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 2048ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 1024ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 512ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 256ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 128ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 64ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 32ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 16ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 8ULL) == 0ULL) {
                                                                    #line 643 
                                                                    if (
                                                                    ((unsigned long long)num_wqebbs_per_page & 4ULL) != 0ULL) 
                                                                    #line 643 
                                                                    tmp_65 = 2U; else 
                                                                    #line 643 
                                                                    tmp_65 = 1U;
                                                                    #line 643 
                                                                    tmp_66 = tmp_65;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_66 = 3U;
                                                                    #line 643 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_67 = 4U;
                                                                    #line 643 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_68 = 5U;
                                                                    #line 643 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_69 = 6U;
                                                                    #line 643 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_70 = 7U;
                                                                    #line 643 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_71 = 8U;
                                                                    #line 643 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_72 = 9U;
                                                                    #line 643 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_73 = 10U;
                                                                    #line 643 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_74 = 11U;
                                                                    #line 643 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_75 = 12U;
                                                                    #line 643 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_76 = 13U;
                                                                    #line 643 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_77 = 14U;
                                                                    #line 643 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_78 = 15U;
                                                                    #line 643 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_79 = 16U;
                                                                    #line 643 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_80 = 17U;
                                                                    #line 643 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_81 = 18U;
                                                                    #line 643 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_82 = 19U;
                                                                    #line 643 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_83 = 20U;
                                                                    #line 643 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_84 = 21U;
                                                                    #line 643 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_85 = 22U;
                                                                    #line 643 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_86 = 23U;
                                                                    #line 643 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_87 = 24U;
                                                                    #line 643 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_88 = 25U;
                                                                    #line 643 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_89 = 26U;
                                                                    #line 643 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_90 = 27U;
                                                                    #line 643 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_91 = 28U;
                                                                    #line 643 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_92 = 29U;
                                                                    #line 643 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_93 = 30U;
                                                                    #line 643 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_94 = 31U;
                                                                    #line 643 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 643 
                                                                    tmp_95 = 32U;
                                                                    #line 643 
                                                                    tmp_96 = tmp_95;
                                                                  }
                                                                  else 
                                                                    #line 643 
                                                                    tmp_96 = 33U;
                                                                  #line 643 
                                                                  tmp_97 = tmp_96;
                                                                }
                                                                else 
                                                                  #line 643 
                                                                  tmp_97 = 34U;
                                                                #line 643 
                                                                tmp_98 = tmp_97;
                                                              }
                                                              else 
                                                                   #line 643 
                                                                   tmp_98 = 35U;
                                                              #line 643 
                                                              tmp_99 = tmp_98;
                                                            }
                                                            else 
                                                                 #line 643 
                                                                 tmp_99 = 36U;
                                                            #line 643 
                                                            tmp_100 = tmp_99;
                                                          }
                                                          else 
                                                               #line 643 
                                                               tmp_100 = 37U;
                                                          #line 643 
                                                          tmp_101 = tmp_100;
                                                        }
                                                        else 
                                                             #line 643 
                                                             tmp_101 = 38U;
                                                        #line 643 
                                                        tmp_102 = tmp_101;
                                                      }
                                                      else 
                                                           #line 643 
                                                           tmp_102 = 39U;
                                                      #line 643 
                                                      tmp_103 = tmp_102;
                                                    }
                                                    else 
                                                         #line 643 
                                                         tmp_103 = 40U;
                                                    #line 643 
                                                    tmp_104 = tmp_103;
                                                  }
                                                  else 
                                                       #line 643 
                                                       tmp_104 = 41U;
                                                  #line 643 
                                                  tmp_105 = tmp_104;
                                                }
                                                else 
                                                     #line 643 
                                                     tmp_105 = 42U;
                                                #line 643 
                                                tmp_106 = tmp_105;
                                              }
                                              else 
                                                   #line 643 
                                                   tmp_106 = 43U;
                                              #line 643 
                                              tmp_107 = tmp_106;
                                            }
                                            else 
                                                 #line 643 
                                                 tmp_107 = 44U;
                                            #line 643 
                                            tmp_108 = tmp_107;
                                          }
                                          else 
                                               #line 643 
                                               tmp_108 = 45U;
                                          #line 643 
                                          tmp_109 = tmp_108;
                                        }
                                        else 
                                             #line 643 
                                             tmp_109 = 46U;
                                        #line 643 
                                        tmp_110 = tmp_109;
                                      }
                                      else 
                                           #line 643 
                                           tmp_110 = 47U;
                                      #line 643 
                                      tmp_111 = tmp_110;
                                    }
                                    else 
                                         #line 643 
                                         tmp_111 = 48U;
                                    #line 643 
                                    tmp_112 = tmp_111;
                                  }
                                  else 
                                       #line 643 
                                       tmp_112 = 49U;
                                  #line 643 
                                  tmp_113 = tmp_112;
                                }
                                else 
                                     #line 643 
                                     tmp_113 = 50U;
                                #line 643 
                                tmp_114 = tmp_113;
                              }
                              else 
                                   #line 643 
                                   tmp_114 = 51U;
                              #line 643 
                              tmp_115 = tmp_114;
                            }
                            else 
                                 #line 643 
                                 tmp_115 = 52U;
                            #line 643 
                            tmp_116 = tmp_115;
                          }
                          else 
                               #line 643 
                               tmp_116 = 53U;
                          #line 643 
                          tmp_117 = tmp_116;
                        }
                        else 
                             #line 643 
                             tmp_117 = 54U;
                        #line 643 
                        tmp_118 = tmp_117;
                      }
                      else 
                           #line 643 
                           tmp_118 = 55U;
                      #line 643 
                      tmp_119 = tmp_118;
                    }
                    else 
                         #line 643 
                         tmp_119 = 56U;
                    #line 643 
                    tmp_120 = tmp_119;
                  }
                  else 
                       #line 643 
                       tmp_120 = 57U;
                  #line 643 
                  tmp_121 = tmp_120;
                }
                else 
                     #line 643 
                     tmp_121 = 58U;
                #line 643 
                tmp_122 = tmp_121;
              }
              else 
                   #line 643 
                   tmp_122 = 59U;
              #line 643 
              tmp_123 = tmp_122;
            }
            else 
                 #line 643 
                 tmp_123 = 60U;
            #line 643 
            tmp_124 = tmp_123;
          }
          else 
               #line 643 
               tmp_124 = 61U;
          #line 643 
          tmp_125 = tmp_124;
        }
        else 
             #line 643 
             tmp_125 = 62U;
        #line 643 
        tmp_126 = tmp_125;
      }
      else 
           #line 643 
           tmp_126 = 63U;
      #line 643 
      tmp_127 = tmp_126;
    }
    else 
         #line 643 
         tmp_127 = 0U;
    #line 643 
    num_wqebbs_per_page_shift = (unsigned short)tmp_127;
  }
  else {
    #line 643 
    num_wqebbs_per_page_shift = (unsigned short)__ilog2_u32((unsigned int)num_wqebbs_per_page);
  }
  #line 645 
  i = 0;
  #line 645 
  while (i < cmdq_blocks) {
    #line 646 
    (wq + (unsigned long)i)->hwif = hwif;
    #line 647 
    (wq + (unsigned long)i)->page_idx = 0;
    #line 648 
    (wq + (unsigned long)i)->block_idx = i;
    #line 650 
    (wq + (unsigned long)i)->wqebb_size = wqebb_size;
    #line 651 
    (wq + (unsigned long)i)->wq_page_size = wq_page_size;
    #line 652 
    (wq + (unsigned long)i)->q_depth = q_depth;
    #line 653 
    (wq + (unsigned long)i)->max_wqe_size = max_wqe_size;
    #line 654 
    (wq + (unsigned long)i)->num_wqebbs_per_page = num_wqebbs_per_page;
    #line 655 
    (wq + (unsigned long)i)->wqebbs_per_page_shift = num_wqebbs_per_page_shift;
    #line 656 
    (wq + (unsigned long)i)->wqebb_size_shift = wqebb_size_shift;
    #line 657 
    (wq + (unsigned long)i)->block_vaddr = (u64 *)((void *)cmdq_pages->page_vaddr + (unsigned long)((wq + (unsigned long)i)->block_idx * 512));
    #line 658 
    (wq + (unsigned long)i)->shadow_block_vaddr = (void **)((void *)cmdq_pages->shadow_page_vaddr + (unsigned long)((wq + (unsigned long)i)->block_idx * 512));
    #line 659 
    (wq + (unsigned long)i)->block_paddr = cmdq_pages->page_paddr + (unsigned long long)((wq + (unsigned long)i)->block_idx * 512);
    #line 661 
    err = alloc_wq_pages(wq + (unsigned long)i,cmdq_pages->hwif,64);
    #line 663 
    if (err != 0) {
      #line 664 
      _dev_err(& pdev->dev,(char *)"Failed to alloc CMDQ blocks\n");
      #line 665 
      goto err_cmdq_block;
    }
    #line 668 
    atomic_set(& (wq + (unsigned long)i)->cons_idx,0);
    #line 669 
    atomic_set(& (wq + (unsigned long)i)->prod_idx,0);
    #line 670 
    atomic_set(& (wq + (unsigned long)i)->delta,(int)q_depth);
    #line 671 
    (wq + (unsigned long)i)->mask = (unsigned short)((unsigned int)q_depth + 65535U);
    #line 645 
    i ++;
  }
  #line 674 
  return 0;
  #line 676 
  err_cmdq_block: 
                  #line 676 
  ;
  #line 677 
  j = 0;
  #line 677 
  while (j < i) {
    #line 678 
    free_wq_pages(wq + (unsigned long)j,cmdq_pages->hwif,(wq + (unsigned long)j)->num_q_pages);
    #line 677 
    j ++;
  }
  #line 680 
  cmdq_free_page(cmdq_pages);
  #line 681 
  return err;
}

#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_wqs_cmdq_free(struct hinic_cmdq_pages *cmdq_pages, struct hinic_wq *wq, int cmdq_blocks)
{
  #line 693 
  int i;
  #line 695 
  i = 0;
  #line 695 
  while (i < cmdq_blocks) {
    #line 696 
    free_wq_pages(wq + (unsigned long)i,cmdq_pages->hwif,(wq + (unsigned long)i)->num_q_pages);
    #line 695 
    i ++;
  }
  #line 698 
  cmdq_free_page(cmdq_pages);
  #line 699 
  return;
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void copy_wqe_to_shadow(struct hinic_wq *wq, void *shadow_addr, int num_wqebbs, u16 idx)
{
  #line 704 
  void *wqebb_addr;
  #line 705 
  int i;
  #line 707 
  i = 0;
  #line 707 
  while (i < num_wqebbs) {
    {
      #line 708 
      idx = (unsigned short)((int)wq->mask & (int)idx);
      #line 709 
      wqebb_addr = *(wq->shadow_block_vaddr + (unsigned long)WQE_PAGE_NUM(wq,(unsigned short)((int)idx))) + (unsigned long)WQE_PAGE_OFF(wq,(unsigned short)((int)idx));
      #line 712 
      memcpy(shadow_addr,wqebb_addr,(unsigned long)wq->wqebb_size);
      #line 714 
      shadow_addr += (unsigned long)wq->wqebb_size;
    }
    #line 707 
    i ++;
    #line 707 
    idx = (u16)((int)idx + 1);
  }
  #line 716 
  return;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
static void copy_wqe_from_shadow(struct hinic_wq *wq, void *shadow_addr, int num_wqebbs, u16 idx)
{
  #line 721 
  void *wqebb_addr;
  #line 722 
  int i;
  #line 724 
  i = 0;
  #line 724 
  while (i < num_wqebbs) {
    {
      #line 725 
      idx = (unsigned short)((int)wq->mask & (int)idx);
      #line 726 
      wqebb_addr = *(wq->shadow_block_vaddr + (unsigned long)WQE_PAGE_NUM(wq,(unsigned short)((int)idx))) + (unsigned long)WQE_PAGE_OFF(wq,(unsigned short)((int)idx));
      #line 729 
      memcpy(wqebb_addr,shadow_addr,(unsigned long)wq->wqebb_size);
      #line 730 
      shadow_addr += (unsigned long)wq->wqebb_size;
    }
    #line 724 
    i ++;
    #line 724 
    idx = (u16)((int)idx + 1);
  }
  #line 732 
  return;
}

#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
struct hinic_hw_wqe *hinic_get_wqe(struct hinic_wq *wq, unsigned int wqe_size, u16 *prod_idx)
{
  #line 745 
  int curr_pg;
  #line 745 
  int end_pg;
  #line 745 
  int num_wqebbs;
  #line 746 
  u16 curr_prod_idx;
  #line 746 
  u16 end_prod_idx;
  #line 748 
  *prod_idx = (unsigned short)(atomic_read(& wq->prod_idx) & (int)wq->mask);
  #line 750 
  num_wqebbs = (int)(((((unsigned int)wq->wqebb_size + wqe_size) + 4294967295U) & - ((unsigned int)wq->wqebb_size)) >> (int)wq->wqebb_size_shift);
  #line 752 
  if (atomic_sub_return(num_wqebbs,& wq->delta) <= 0) {
    #line 753 
    atomic_add(num_wqebbs,& wq->delta);
    #line 754 
    return (struct hinic_hw_wqe *)ERR_PTR(-16L);
  }
  #line 757 
  end_prod_idx = (unsigned short)atomic_add_return(num_wqebbs,& wq->prod_idx);
  #line 759 
  end_prod_idx = (unsigned short)((int)wq->mask & (int)end_prod_idx);
  #line 760 
  curr_prod_idx = (unsigned short)((int)end_prod_idx - (int)((unsigned short)num_wqebbs));
  #line 761 
  curr_prod_idx = (unsigned short)((int)wq->mask & (int)curr_prod_idx);
  #line 764 
  end_prod_idx = (unsigned short)(((unsigned int)end_prod_idx + 65535U) & (unsigned int)wq->mask);
  #line 766 
  curr_pg = WQE_PAGE_NUM(wq,(unsigned short)((int)curr_prod_idx));
  #line 767 
  end_pg = WQE_PAGE_NUM(wq,(unsigned short)((int)end_prod_idx));
  #line 769 
  *prod_idx = curr_prod_idx;
  #line 771 
  if (curr_pg != end_pg) {
    #line 772 
    void *shadow_addr = (void *)(wq->shadow_wqe + (unsigned long)((int)wq->max_wqe_size * curr_pg));
    #line 774 
    copy_wqe_to_shadow(wq,shadow_addr,num_wqebbs,(unsigned short)((int)*prod_idx));
    #line 776 
    *(wq->shadow_idx + (unsigned long)curr_pg) = *prod_idx;
    #line 777 
    return (struct hinic_hw_wqe *)shadow_addr;
  }
  #line 780 
  ;
  #line 780 
  return (struct hinic_hw_wqe *)(*(wq->shadow_block_vaddr + (unsigned long)WQE_PAGE_NUM(wq,(unsigned short)((int)*prod_idx))) + (unsigned long)WQE_PAGE_OFF(wq,(unsigned short)((int)*prod_idx)));
}

#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_return_wqe(struct hinic_wq *wq, unsigned int wqe_size)
{
  #line 790 
  int num_wqebbs = (int)(((((unsigned int)wq->wqebb_size + wqe_size) + 4294967295U) & - ((unsigned int)wq->wqebb_size)) / (unsigned int)wq->wqebb_size);
  #line 792 
  atomic_sub(num_wqebbs,& wq->prod_idx);
  #line 794 
  atomic_add(num_wqebbs,& wq->delta);
  #line 795 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_put_wqe(struct hinic_wq *wq, unsigned int wqe_size)
{
  #line 804 
  int num_wqebbs = (int)(((((unsigned int)wq->wqebb_size + wqe_size) + 4294967295U) & - ((unsigned int)wq->wqebb_size)) >> (int)wq->wqebb_size_shift);
  #line 807 
  atomic_add(num_wqebbs,& wq->cons_idx);
  #line 809 
  atomic_add(num_wqebbs,& wq->delta);
  #line 810 
  return;
}

#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
struct hinic_hw_wqe *hinic_read_wqe(struct hinic_wq *wq, unsigned int wqe_size, u16 *cons_idx)
{
  #line 825 
  u16 curr_cons_idx;
  #line 825 
  u16 end_cons_idx;
  #line 826 
  int curr_pg;
  #line 826 
  int end_pg;
  #line 823 
  int num_wqebbs = (int)(((((unsigned int)wq->wqebb_size + wqe_size) + 4294967295U) & - ((unsigned int)wq->wqebb_size)) >> (int)wq->wqebb_size_shift);
  #line 828 
  ;
  #line 828 
  if (atomic_read(& wq->delta) + num_wqebbs > (int)wq->q_depth) {
    #line 829 
    return (struct hinic_hw_wqe *)ERR_PTR(-16L);
  }
  #line 831 
  curr_cons_idx = (unsigned short)atomic_read(& wq->cons_idx);
  #line 833 
  curr_cons_idx = (unsigned short)((int)wq->mask & (int)curr_cons_idx);
  #line 834 
  end_cons_idx = (unsigned short)(((unsigned int)(num_wqebbs + (int)curr_cons_idx) + 65535U) & (unsigned int)wq->mask);
  #line 836 
  curr_pg = WQE_PAGE_NUM(wq,(unsigned short)((int)curr_cons_idx));
  #line 837 
  end_pg = WQE_PAGE_NUM(wq,(unsigned short)((int)end_cons_idx));
  #line 839 
  *cons_idx = curr_cons_idx;
  #line 841 
  if (curr_pg != end_pg) {
    #line 842 
    void *shadow_addr = (void *)(wq->shadow_wqe + (unsigned long)((int)wq->max_wqe_size * curr_pg));
    #line 844 
    copy_wqe_to_shadow(wq,shadow_addr,num_wqebbs,(unsigned short)((int)*cons_idx));
    #line 845 
    return (struct hinic_hw_wqe *)shadow_addr;
  }
  #line 848 
  ;
  #line 848 
  return (struct hinic_hw_wqe *)(*(wq->shadow_block_vaddr + (unsigned long)WQE_PAGE_NUM(wq,(unsigned short)((int)*cons_idx))) + (unsigned long)WQE_PAGE_OFF(wq,(unsigned short)((int)*cons_idx)));
}

#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
struct hinic_hw_wqe *hinic_read_wqe_direct(struct hinic_wq *wq, u16 cons_idx)
{
  #line 860 
  ;
  #line 860 
  return (struct hinic_hw_wqe *)(*(wq->shadow_block_vaddr + (unsigned long)WQE_PAGE_NUM(wq,(unsigned short)((int)cons_idx))) + (unsigned long)WQE_PAGE_OFF(wq,(unsigned short)((int)cons_idx)));
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
__inline static bool wqe_shadow(struct hinic_wq *wq, struct hinic_hw_wqe *wqe)
{
  #line 872 
  size_t wqe_shadow_size = (unsigned long)(wq->num_q_pages * (int)wq->max_wqe_size);
  #line 874 
  return (_Bool)(((unsigned long)wq->shadow_wqe <= (unsigned long)wqe && (unsigned long)(wq->shadow_wqe + wqe_shadow_size) > (unsigned long)wqe) != 0);
}

#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_wq.c"
void hinic_write_wqe(struct hinic_wq *wq, struct hinic_hw_wqe *wqe, unsigned int wqe_size)
{
  #line 887 
  int curr_pg;
  #line 887 
  int num_wqebbs;
  #line 888 
  void *shadow_addr;
  #line 889 
  u16 prod_idx;
  #line 891 
  if ((int)wqe_shadow(wq,wqe) != 0) {
    #line 892 
    curr_pg = (int)(((unsigned long)wqe - (unsigned long)wq->shadow_wqe) / (unsigned long)wq->max_wqe_size);
    #line 894 
    prod_idx = *(wq->shadow_idx + (unsigned long)curr_pg);
    #line 895 
    num_wqebbs = (int)(((((unsigned int)wq->wqebb_size + wqe_size) + 4294967295U) & - ((unsigned int)wq->wqebb_size)) / (unsigned int)wq->wqebb_size);
    #line 896 
    shadow_addr = (void *)(wq->shadow_wqe + (unsigned long)((int)wq->max_wqe_size * curr_pg));
    #line 898 
    copy_wqe_from_shadow(wq,shadow_addr,num_wqebbs,(unsigned short)((int)prod_idx));
  }
  #line 900 
  return;
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 161 
  ldv_atomic_add(i,v);
  #line 162 
  return;
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static int atomic_add_return(int i, atomic_t *v)
{
  #line 168 
  return ldv_atomic_add_return(i,v);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void atomic_sub(int i, atomic_t *v)
{
  #line 175 
  ldv_atomic_sub(i,v);
  #line 176 
  return;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void *ERR_PTR(long error)
{
  #line 203 
  return ldv_err_ptr(error);
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 500 
  return ldv_vzalloc(size);
}

#line 504  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void cif_vfree(void *addr)
{
  #line 507 
  ldv_vfree(addr);
  #line 508 
  return;
}

#line 511  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_wq.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 514 
  return ldv_devm_kzalloc(size,flags);
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.h"
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
void hinic_cpu_to_be32(void *data, int len);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.h"
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
void hinic_be32_to_cpu(void *data, int len);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.h"
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
void hinic_set_sge(struct hinic_sge *sge, dma_addr_t addr, int len);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.h"
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
dma_addr_t hinic_sge_to_dma(struct hinic_sge *sge);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
void hinic_cpu_to_be32(void *data, int len)
{
  #line 21 
  int i;
  #line 20 
  u32 *mem = (u32 *)data;
  #line 23 
  len = (int)((unsigned long)len / 4UL);
  #line 25 
  i = 0;
  #line 25 
  while (i < len) {
    #line 26 
    *mem = __builtin_bswap32(*mem);
    #line 27 
    mem ++;
    #line 25 
    i ++;
  }
  #line 29 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
void hinic_be32_to_cpu(void *data, int len)
{
  #line 39 
  int i;
  #line 38 
  u32 *mem = (u32 *)data;
  #line 41 
  len = (int)((unsigned long)len / 4UL);
  #line 43 
  i = 0;
  #line 43 
  while (i < len) {
    #line 44 
    *mem = __builtin_bswap32(*mem);
    #line 45 
    mem ++;
    #line 43 
    i ++;
  }
  #line 47 
  return;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
void hinic_set_sge(struct hinic_sge *sge, dma_addr_t addr, int len)
{
  #line 57 
  sge->hi_addr = (unsigned int)(addr >> 32);
  #line 58 
  sge->lo_addr = (unsigned int)addr;
  #line 59 
  sge->len = (unsigned int)len;
  #line 60 
  return;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_common.c"
dma_addr_t hinic_sge_to_dma(struct hinic_sge *sge)
{
  #line 70 
  return ((unsigned long long)sge->hi_addr << 32) | (unsigned long long)sge->lo_addr;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 365  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_port.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
#line 160 
int hinic_alloc_cmdq_buf(struct hinic_cmdqs *cmdqs, struct hinic_cmdq_buf *cmdq_buf);
#line 163 
#line 163 
void hinic_free_cmdq_buf(struct hinic_cmdqs *cmdqs, struct hinic_cmdq_buf *cmdq_buf);
#line 166 
#line 166 
int hinic_cmdq_direct_resp(struct hinic_cmdqs *cmdqs, enum hinic_mod_type mod, u8 cmd, struct hinic_cmdq_buf *buf_in, u64 *resp);
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 258 
int hinic_port_msg_cmd(struct hinic_hwdev *hwdev, enum hinic_port_cmd cmd, void *buf_in, u16 in_size, void *buf_out, u16 *out_size);
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_add_mac(struct hinic_dev *nic_dev, u8 *addr, u16 vlan_id);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_del_mac(struct hinic_dev *nic_dev, u8 *addr, u16 vlan_id);
#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_get_mac(struct hinic_dev *nic_dev, u8 *addr);
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_mtu(struct hinic_dev *nic_dev, int new_mtu);
#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_add_vlan(struct hinic_dev *nic_dev, u16 vlan_id);
#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_del_vlan(struct hinic_dev *nic_dev, u16 vlan_id);
#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_rx_mode(struct hinic_dev *nic_dev, u32 rx_mode);
#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_link_state(struct hinic_dev *nic_dev, enum hinic_port_link_state *link_state);
#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_state(struct hinic_dev *nic_dev, enum hinic_port_state state);
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_func_state(struct hinic_dev *nic_dev, enum hinic_func_port_state state);
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_get_cap(struct hinic_dev *nic_dev, struct hinic_port_cap *port_cap);
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_max_qnum(struct hinic_dev *nic_dev, u8 num_rqs);
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_tso(struct hinic_dev *nic_dev, enum hinic_tso_state state);
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rx_csum_offload(struct hinic_dev *nic_dev, u32 en);
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rx_lro_state(struct hinic_dev *nic_dev, u8 lro_en, u32 lro_timer, u32 wqe_num);
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rss_type(struct hinic_dev *nic_dev, u32 tmpl_idx, struct hinic_rss_type rss_type);
#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_set_indir_tbl(struct hinic_dev *nic_dev, u32 tmpl_idx, u32 *indir_table);
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_set_template_tbl(struct hinic_dev *nic_dev, u32 template_id, u8 *temp);
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_set_hash_engine(struct hinic_dev *nic_dev, u8 template_id, u8 type);
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_cfg(struct hinic_dev *nic_dev, u8 rss_en, u8 template_id);
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_template_alloc(struct hinic_dev *nic_dev, u8 *tmpl_idx);
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_template_free(struct hinic_dev *nic_dev, u8 tmpl_idx);
#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_rss_type(struct hinic_dev *nic_dev, u32 tmpl_idx, struct hinic_rss_type *rss_type);
#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_get_indir_tbl(struct hinic_dev *nic_dev, u32 tmpl_idx, u32 *indir_table);
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_get_template_tbl(struct hinic_dev *nic_dev, u32 tmpl_idx, u8 *temp);
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_get_hash_engine(struct hinic_dev *nic_dev, u8 tmpl_idx, u8 *type);
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_phy_port_stats(struct hinic_dev *nic_dev, struct hinic_phy_port_stats *stats);
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_vport_stats(struct hinic_dev *nic_dev, struct hinic_vport_stats *stats);
#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rx_vlan_offload(struct hinic_dev *nic_dev, u8 en);
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_mgmt_version(struct hinic_dev *nic_dev, u8 *mgmt_ver);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
static int change_mac(struct hinic_dev *nic_dev, u8 *addr, u16 vlan_id, enum mac_op op)
{
  #line 42 
  struct hinic_port_mac_cmd port_mac_cmd;
  #line 45 
  enum hinic_port_cmd cmd;
  #line 46 
  u16 out_size;
  #line 47 
  int err;
  #line 40 
  struct net_device *netdev = nic_dev->netdev;
  #line 41 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 43 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 44 
  struct pci_dev *pdev = hwif->pdev;
  #line 49 
  if ((unsigned int)vlan_id > 4095U) {
    #line 50 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 50 
                                          netdev_err(netdev,(char *)"Invalid VLAN number\n");
    #line 51 
    return -22;
  }
  #line 54 
  if (op == (unsigned int)MAC_SET) 
                                   #line 55 
                                   cmd = HINIC_PORT_CMD_SET_MAC; else 
                                                                   #line 57 
                                                                   cmd = HINIC_PORT_CMD_DEL_MAC;
  #line 59 
  port_mac_cmd.func_idx = hwif->attr.func_idx;
  #line 60 
  port_mac_cmd.vlan_id = vlan_id;
  #line 61 
  memcpy((void *)(& port_mac_cmd.mac),(void *)addr,6UL);
  #line 63 
  err = hinic_port_msg_cmd(hwdev,cmd,(void *)(& port_mac_cmd),(unsigned short)20,(void *)(& port_mac_cmd),& out_size);
  #line 66 
  if ((err != 0 || (unsigned int)out_size != 20U) || (unsigned int)port_mac_cmd.status != 0U) {
    #line 67 
    _dev_err(& pdev->dev,(char *)"Failed to change MAC, ret = %d\n",(int)port_mac_cmd.status);
    #line 69 
    return -14;
  }
  #line 72 
  return 0;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_add_mac(struct hinic_dev *nic_dev, u8 *addr, u16 vlan_id)
{
  #line 86 
  return change_mac(nic_dev,addr,(unsigned short)((int)vlan_id),
                 (enum mac_op)MAC_SET);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_del_mac(struct hinic_dev *nic_dev, u8 *addr, u16 vlan_id)
{
  #line 100 
  return change_mac(nic_dev,addr,(unsigned short)((int)vlan_id),
                 (enum mac_op)MAC_DEL);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_get_mac(struct hinic_dev *nic_dev, u8 *addr)
{
  #line 113 
  struct hinic_port_mac_cmd port_mac_cmd;
  #line 116 
  u16 out_size;
  #line 117 
  int err;
  #line 112 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 114 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 115 
  struct pci_dev *pdev = hwif->pdev;
  #line 119 
  port_mac_cmd.func_idx = hwif->attr.func_idx;
  #line 121 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_MAC,(void *)(& port_mac_cmd),(unsigned short)20,(void *)(& port_mac_cmd),& out_size);
  #line 124 
  if ((err != 0 || (unsigned int)out_size != 20U) || (unsigned int)port_mac_cmd.status != 0U) {
    #line 125 
    _dev_err(& pdev->dev,(char *)"Failed to get mac, ret = %d\n",(int)port_mac_cmd.status);
    #line 127 
    return -14;
  }
  #line 130 
  memcpy((void *)addr,(void *)(& port_mac_cmd.mac),6UL);
  #line 131 
  return 0;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_mtu(struct hinic_dev *nic_dev, int new_mtu)
{
  #line 145 
  struct hinic_port_mtu_cmd port_mtu_cmd;
  #line 148 
  int err;
  #line 148 
  int max_frame;
  #line 149 
  u16 out_size;
  #line 143 
  struct net_device *netdev = nic_dev->netdev;
  #line 144 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 146 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 147 
  struct pci_dev *pdev = hwif->pdev;
  #line 151 
  if (new_mtu <= 255) {
    #line 152 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 152 
                                          netdev_err(netdev,(char *)"mtu < MIN MTU size");
    #line 153 
    return -22;
  }
  #line 156 
  max_frame = new_mtu + 18;
  #line 157 
  if (max_frame > 15872) {
    #line 158 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 158 
                                          netdev_err(netdev,(char *)"mtu > MAX MTU size");
    #line 159 
    return -22;
  }
  #line 162 
  port_mtu_cmd.func_idx = hwif->attr.func_idx;
  #line 163 
  port_mtu_cmd.mtu = (unsigned int)new_mtu;
  #line 165 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_CHANGE_MTU,(void *)(& port_mtu_cmd),(unsigned short)16,(void *)(& port_mtu_cmd),& out_size);
  #line 168 
  if ((err != 0 || (unsigned int)out_size != 16U) || (unsigned int)port_mtu_cmd.status != 0U) {
    #line 169 
    _dev_err(& pdev->dev,(char *)"Failed to set mtu, ret = %d\n",(int)port_mtu_cmd.status);
    #line 171 
    return -14;
  }
  #line 174 
  return 0;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_add_vlan(struct hinic_dev *nic_dev, u16 vlan_id)
{
  #line 187 
  struct hinic_port_vlan_cmd port_vlan_cmd;
  #line 186 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 189 
  port_vlan_cmd.func_idx = (hwdev->hwif)->attr.func_idx;
  #line 190 
  port_vlan_cmd.vlan_id = vlan_id;
  #line 192 
  return hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_ADD_VLAN,
                         (void *)(& port_vlan_cmd),(unsigned short)12,
                         (void *)0,(u16 *)0U);
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_del_vlan(struct hinic_dev *nic_dev, u16 vlan_id)
{
  #line 207 
  struct hinic_port_vlan_cmd port_vlan_cmd;
  #line 206 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 209 
  port_vlan_cmd.func_idx = (hwdev->hwif)->attr.func_idx;
  #line 210 
  port_vlan_cmd.vlan_id = vlan_id;
  #line 212 
  return hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_DEL_VLAN,
                         (void *)(& port_vlan_cmd),(unsigned short)12,
                         (void *)0,(u16 *)0U);
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_rx_mode(struct hinic_dev *nic_dev, u32 rx_mode)
{
  #line 227 
  struct hinic_port_rx_mode_cmd rx_mode_cmd;
  #line 226 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 229 
  rx_mode_cmd.func_idx = (hwdev->hwif)->attr.func_idx;
  #line 230 
  rx_mode_cmd.rx_mode = rx_mode;
  #line 232 
  return hinic_port_msg_cmd(hwdev,
                         (enum hinic_port_cmd)HINIC_PORT_CMD_SET_RX_MODE,
                         (void *)(& rx_mode_cmd),(unsigned short)16,
                         (void *)0,(u16 *)0U);
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_link_state(struct hinic_dev *nic_dev, enum hinic_port_link_state *link_state)
{
  #line 249 
  struct hinic_port_link_cmd link_cmd;
  #line 251 
  u16 out_size;
  #line 252 
  int err;
  #line 247 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 248 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 250 
  struct pci_dev *pdev = hwif->pdev;
  #line 254 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 255 
    _dev_err(& pdev->dev,(char *)"unsupported PCI Function type\n");
    #line 256 
    return -22;
  }
  #line 259 
  link_cmd.func_idx = hwif->attr.func_idx;
  #line 261 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_LINK_STATE,(void *)(& link_cmd),(unsigned short)12,(void *)(& link_cmd),& out_size);
  #line 264 
  if ((err != 0 || (unsigned int)out_size != 12U) || (unsigned int)link_cmd.status != 0U) {
    #line 265 
    _dev_err(& pdev->dev,(char *)"Failed to get link state, ret = %d\n",(int)link_cmd.status);
    #line 267 
    return -22;
  }
  #line 270 
  *link_state = (enum hinic_port_link_state)link_cmd.state;
  #line 271 
  return 0;
}

#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_state(struct hinic_dev *nic_dev, enum hinic_port_state state)
{
  #line 284 
  struct hinic_port_state_cmd port_state;
  #line 287 
  u16 out_size;
  #line 288 
  int err;
  #line 283 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 285 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 286 
  struct pci_dev *pdev = hwif->pdev;
  #line 290 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 291 
    _dev_err(& pdev->dev,(char *)"unsupported PCI Function type\n");
    #line 292 
    return -22;
  }
  #line 295 
  port_state.state = (unsigned char)state;
  #line 297 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_PORT_STATE,(void *)(& port_state),(unsigned short)12,(void *)(& port_state),& out_size);
  #line 300 
  if ((err != 0 || (unsigned int)out_size != 12U) || (unsigned int)port_state.status != 0U) {
    #line 301 
    _dev_err(& pdev->dev,(char *)"Failed to set port state, ret = %d\n",(int)port_state.status);
    #line 303 
    return -14;
  }
  #line 306 
  return 0;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_func_state(struct hinic_dev *nic_dev, enum hinic_func_port_state state)
{
  #line 319 
  struct hinic_port_func_state_cmd func_state;
  #line 323 
  u16 out_size;
  #line 324 
  int err;
  #line 320 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 321 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 322 
  struct pci_dev *pdev = hwif->pdev;
  #line 326 
  func_state.func_idx = hwif->attr.func_idx;
  #line 327 
  func_state.state = (unsigned char)state;
  #line 329 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_FUNC_STATE,(void *)(& func_state),(unsigned short)16,(void *)(& func_state),& out_size);
  #line 332 
  if ((err != 0 || (unsigned int)out_size != 16U) || (unsigned int)func_state.status != 0U) {
    #line 333 
    _dev_err(& pdev->dev,(char *)"Failed to set port func state, ret = %d\n",(int)func_state.status);
    #line 335 
    return -14;
  }
  #line 338 
  return 0;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_get_cap(struct hinic_dev *nic_dev, struct hinic_port_cap *port_cap)
{
  #line 354 
  u16 out_size;
  #line 355 
  int err;
  #line 351 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 352 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 353 
  struct pci_dev *pdev = hwif->pdev;
  #line 357 
  port_cap->func_idx = hwif->attr.func_idx;
  #line 359 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_CAP,(void *)port_cap,(unsigned short)20,(void *)port_cap,& out_size);
  #line 362 
  if ((err != 0 || (unsigned int)out_size != 20U) || (unsigned int)port_cap->status != 0U) {
    #line 363 
    _dev_err(& pdev->dev,(char *)"Failed to get port capabilities, ret = %d\n",(int)port_cap->status);
    #line 366 
    return -22;
  }
  #line 369 
  return 0;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_port_set_tso(struct hinic_dev *nic_dev, enum hinic_tso_state state)
{
  #line 385 
  u16 out_size;
  #line 386 
  int err;
  #line 381 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 382 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 383 
  struct hinic_tso_config tso_cfg = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .rsvd1 = (unsigned short)0, .tso_en = (unsigned char)0, .resv2 = {(unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 384 
  struct pci_dev *pdev = hwif->pdev;
  #line 388 
  tso_cfg.func_id = hwif->attr.func_idx;
  #line 389 
  tso_cfg.tso_en = (unsigned char)state;
  #line 391 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_TSO,(void *)(& tso_cfg),(unsigned short)16,(void *)(& tso_cfg),& out_size);
  #line 394 
  if ((err != 0 || (unsigned int)out_size != 16U) || (unsigned int)tso_cfg.status != 0U) {
    #line 395 
    _dev_err(& pdev->dev,(char *)"Failed to set port tso, ret = %d\n",(int)tso_cfg.status);
    #line 398 
    return -22;
  }
  #line 401 
  return 0;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rx_csum_offload(struct hinic_dev *nic_dev, u32 en)
{
  #line 408 
  struct hinic_hwif *hwif;
  #line 409 
  struct pci_dev *pdev;
  #line 410 
  u16 out_size;
  #line 411 
  int err;
  #line 406 
  struct hinic_checksum_offload rx_csum_cfg = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .rsvd1 = (unsigned short)0, .rx_csum_offload = 0U};
  #line 407 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 413 
  if (hwdev == (struct hinic_hwdev *)0) 
                                        #line 414 
                                        return -22;
  #line 416 
  hwif = hwdev->hwif;
  #line 417 
  pdev = hwif->pdev;
  #line 418 
  rx_csum_cfg.func_id = hwif->attr.func_idx;
  #line 419 
  rx_csum_cfg.rx_csum_offload = en;
  #line 421 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_RX_CSUM,(void *)(& rx_csum_cfg),(unsigned short)16,(void *)(& rx_csum_cfg),& out_size);
  #line 424 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)rx_csum_cfg.status != 0U) {
    #line 425 
    _dev_err(& pdev->dev,(char *)"Failed to set rx csum offload, ret = %d\n",(int)rx_csum_cfg.status);
    #line 428 
    return -22;
  }
  #line 431 
  return 0;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rx_vlan_offload(struct hinic_dev *nic_dev, u8 en)
{
  #line 437 
  struct hinic_vlan_cfg vlan_cfg;
  #line 438 
  struct hinic_hwif *hwif;
  #line 439 
  struct pci_dev *pdev;
  #line 440 
  u16 out_size;
  #line 441 
  int err;
  #line 436 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 443 
  if (hwdev == (struct hinic_hwdev *)0) 
                                        #line 444 
                                        return -22;
  #line 446 
  hwif = hwdev->hwif;
  #line 447 
  pdev = hwif->pdev;
  #line 448 
  vlan_cfg.func_id = hwif->attr.func_idx;
  #line 449 
  vlan_cfg.vlan_rx_offload = en;
  #line 451 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_RX_VLAN_OFFLOAD,(void *)(& vlan_cfg),(unsigned short)16,(void *)(& vlan_cfg),& out_size);
  #line 454 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)vlan_cfg.status != 0U) {
    #line 455 
    _dev_err(& pdev->dev,(char *)"Failed to set rx vlan offload, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)vlan_cfg.status,(int)out_size);
    #line 458 
    return -22;
  }
  #line 461 
  return 0;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_max_qnum(struct hinic_dev *nic_dev, u8 num_rqs)
{
  #line 471 
  int err;
  #line 466 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 467 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 468 
  struct pci_dev *pdev = hwif->pdev;
  #line 469 
  struct hinic_rq_num rq_num = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .rsvd1 = {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0}, .num_rqs = 0U, .rq_depth = 0U};
  #line 470 
  u16 out_size = (unsigned short)84U;
  #line 473 
  rq_num.func_id = hwif->attr.func_idx;
  #line 474 
  rq_num.num_rqs = (unsigned int)num_rqs;
  #line 475 
  rq_num.rq_depth = 12U;
  #line 477 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_RQ_IQ_MAP,(void *)(& rq_num),(unsigned short)84,(void *)(& rq_num),& out_size);
  #line 480 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)rq_num.status != 0U) {
    #line 481 
    _dev_err(& pdev->dev,(char *)"Failed to rxq number, ret = %d\n",(int)rq_num.status);
    #line 484 
    return -22;
  }
  #line 487 
  return 0;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
static int hinic_set_rx_lro(struct hinic_dev *nic_dev, u8 ipv4_en, u8 ipv6_en, u8 max_wqe_num)
{
  #line 498 
  int err;
  #line 493 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 494 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 495 
  struct hinic_lro_config lro_cfg = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .rsvd1 = (unsigned short)0, .lro_ipv4_en = (unsigned char)0, .lro_ipv6_en = (unsigned char)0, .lro_max_wqe_num = (unsigned char)0, .resv2 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 496 
  struct pci_dev *pdev = hwif->pdev;
  #line 497 
  u16 out_size = (unsigned short)28U;
  #line 500 
  lro_cfg.func_id = hwif->attr.func_idx;
  #line 501 
  lro_cfg.lro_ipv4_en = ipv4_en;
  #line 502 
  lro_cfg.lro_ipv6_en = ipv6_en;
  #line 503 
  lro_cfg.lro_max_wqe_num = max_wqe_num;
  #line 505 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_LRO,(void *)(& lro_cfg),(unsigned short)28,(void *)(& lro_cfg),& out_size);
  #line 508 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)lro_cfg.status != 0U) {
    #line 509 
    _dev_err(& pdev->dev,(char *)"Failed to set lro offload, ret = %d\n",(int)lro_cfg.status);
    #line 512 
    return -22;
  }
  #line 515 
  return 0;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
static int hinic_set_rx_lro_timer(struct hinic_dev *nic_dev, u32 timer_value)
{
  #line 525 
  int err;
  #line 520 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 521 
  struct hinic_lro_timer lro_timer = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .type = (unsigned char)0, .enable = (unsigned char)0, .rsvd1 = (unsigned short)0, .timer = 0U};
  #line 522 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 523 
  struct pci_dev *pdev = hwif->pdev;
  #line 524 
  u16 out_size = (unsigned short)16U;
  #line 527 
  lro_timer.status = (unsigned char)0U;
  #line 528 
  lro_timer.type = (unsigned char)0U;
  #line 529 
  lro_timer.enable = (unsigned char)1U;
  #line 530 
  lro_timer.timer = timer_value;
  #line 532 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_LRO_TIMER,(void *)(& lro_timer),(unsigned short)16,(void *)(& lro_timer),& out_size);
  #line 535 
  if ((unsigned int)lro_timer.status == 255U) {
    #line 537 
    lro_timer.status = (unsigned char)0U;
    {
      #line 538 
      bool branch;
      #line 538 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"hinic", .function = (char *)"hinic_set_rx_lro_timer", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c", .format = (char *)"Set lro timer not supported by the current FW version, it will be 1ms default\n", .lineno = (unsigned int)538U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 538 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 538 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 538 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug441,& pdev->dev,(char *)"Set lro timer not supported by the current FW version, it will be 1ms default\n");
    }
  }
  #line 542 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)lro_timer.status != 0U) {
    #line 543 
    _dev_err(& pdev->dev,(char *)"Failed to set lro timer, ret = %d\n",(int)lro_timer.status);
    #line 547 
    return -22;
  }
  #line 550 
  return 0;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rx_lro_state(struct hinic_dev *nic_dev, u8 lro_en, u32 lro_timer, u32 wqe_num)
{
  #line 557 
  u8 ipv4_en;
  #line 558 
  u8 ipv6_en;
  #line 559 
  int err;
  #line 556 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 561 
  if (hwdev == (struct hinic_hwdev *)0) 
                                        #line 562 
                                        return -22;
  #line 564 
  ipv4_en = (unsigned char)((unsigned int)lro_en != 0U);
  #line 565 
  ipv6_en = (unsigned char)((unsigned int)lro_en != 0U);
  #line 567 
  err = hinic_set_rx_lro(nic_dev,(unsigned char)((int)ipv4_en),(unsigned char)((int)ipv6_en),(unsigned char)((int)((unsigned char)wqe_num)));
  #line 568 
  if (err != 0) 
                #line 569 
                return err;
  #line 571 
  err = hinic_set_rx_lro_timer(nic_dev,lro_timer);
  #line 572 
  if (err != 0) 
                #line 573 
                return err;
  #line 575 
  return 0;
}

#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_set_indir_tbl(struct hinic_dev *nic_dev, u32 tmpl_idx, u32 *indir_table)
{
  #line 581 
  struct hinic_rss_indirect_tbl *indir_tbl;
  #line 582 
  struct hinic_func_to_io *func_to_io;
  #line 583 
  struct hinic_cmdq_buf cmd_buf;
  #line 584 
  struct hinic_hwdev *hwdev;
  #line 585 
  struct hinic_hwif *hwif;
  #line 586 
  struct pci_dev *pdev;
  #line 587 
  u32 indir_size;
  #line 588 
  u64 out_param;
  #line 589 
  int err;
  #line 589 
  int i;
  #line 590 
  u32 *temp;
  #line 592 
  hwdev = nic_dev->hwdev;
  #line 593 
  func_to_io = & hwdev->func_to_io;
  #line 594 
  hwif = hwdev->hwif;
  #line 595 
  pdev = hwif->pdev;
  #line 597 
  err = hinic_alloc_cmdq_buf(& func_to_io->cmdqs,& cmd_buf);
  #line 598 
  if (err != 0) {
    #line 599 
    _dev_err(& pdev->dev,(char *)"Failed to allocate cmdq buf\n");
    #line 600 
    return err;
  }
  #line 603 
  cmd_buf.size = 272UL;
  #line 605 
  indir_tbl = (struct hinic_rss_indirect_tbl *)cmd_buf.buf;
  #line 606 
  indir_tbl->group_index = __builtin_bswap32(tmpl_idx);
  #line 608 
  i = 0;
  #line 608 
  while (i <= 255) {
    #line 609 
    indir_tbl->entry[i] = (unsigned char)*(indir_table + (unsigned long)i);
    #line 611 
    if ((i & 3) == 3) {
      #line 612 
      temp = (u32 *)(& indir_tbl->entry[i + -3]);
      #line 613 
      *temp = __builtin_bswap32(*temp);
    }
    #line 608 
    i ++;
  }
  #line 618 
  indir_size = 128U;
  #line 619 
  indir_tbl->offset = 0U;
  #line 620 
  indir_tbl->size = __builtin_bswap32(indir_size);
  #line 622 
  err = hinic_cmdq_direct_resp(& func_to_io->cmdqs,(enum hinic_mod_type)HINIC_MOD_L2NIC,(unsigned char)4,& cmd_buf,& out_param);
  #line 625 
  if (err != 0 || out_param != 0ULL) {
    #line 626 
    _dev_err(& pdev->dev,(char *)"Failed to set rss indir table\n");
    #line 627 
    err = -14;
    #line 628 
    goto free_buf;
  }
  #line 631 
  indir_tbl->offset = __builtin_bswap32(indir_size);
  #line 632 
  indir_tbl->size = __builtin_bswap32(indir_size);
  #line 633 
  memcpy((void *)(& indir_tbl->entry[0]),(void *)(& indir_tbl->entry[indir_size]),(unsigned long)indir_size);
  #line 635 
  err = hinic_cmdq_direct_resp(& func_to_io->cmdqs,(enum hinic_mod_type)HINIC_MOD_L2NIC,(unsigned char)4,& cmd_buf,& out_param);
  #line 638 
  if (err != 0 || out_param != 0ULL) {
    #line 639 
    _dev_err(& pdev->dev,(char *)"Failed to set rss indir table\n");
    #line 640 
    err = -14;
  }
  #line 643 
  free_buf: 
            #line 643 
  ;
  #line 644 
  hinic_free_cmdq_buf(& func_to_io->cmdqs,& cmd_buf);
  #line 646 
  return err;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_get_indir_tbl(struct hinic_dev *nic_dev, u32 tmpl_idx, u32 *indir_table)
{
  #line 657 
  int i;
  #line 652 
  struct hinic_rss_indir_table rss_cfg = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .template_id = (unsigned char)0, .rsvd1 = (unsigned char)0, .indir = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 653 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 654 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 655 
  struct pci_dev *pdev = hwif->pdev;
  #line 656 
  u16 out_size = (unsigned short)268U;
  #line 657 
  int err = 0;
  #line 659 
  rss_cfg.func_id = hwif->attr.func_idx;
  #line 660 
  rss_cfg.template_id = (unsigned char)tmpl_idx;
  #line 662 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_RSS_TEMPLATE_INDIR_TBL,(void *)(& rss_cfg),(unsigned short)268,(void *)(& rss_cfg),& out_size);
  #line 666 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)rss_cfg.status != 0U) {
    #line 667 
    _dev_err(& pdev->dev,(char *)"Failed to get indir table, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)rss_cfg.status,(int)out_size);
    #line 669 
    return -22;
  }
  #line 672 
  hinic_be32_to_cpu((void *)(& rss_cfg.indir),256);
  #line 673 
  i = 0;
  #line 673 
  while (i <= 255) {
    #line 674 
    *(indir_table + (unsigned long)i) = (unsigned int)rss_cfg.indir[i];
    #line 673 
    i ++;
  }
  #line 676 
  return 0;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_set_rss_type(struct hinic_dev *nic_dev, u32 tmpl_idx, struct hinic_rss_type rss_type)
{
  #line 682 
  struct hinic_rss_context_tbl *ctx_tbl;
  #line 683 
  struct hinic_func_to_io *func_to_io;
  #line 684 
  struct hinic_cmdq_buf cmd_buf;
  #line 685 
  struct hinic_hwdev *hwdev;
  #line 686 
  struct hinic_hwif *hwif;
  #line 687 
  struct pci_dev *pdev;
  #line 688 
  u64 out_param;
  #line 690 
  int err;
  #line 689 
  u32 ctx = 0U;
  #line 692 
  hwdev = nic_dev->hwdev;
  #line 693 
  func_to_io = & hwdev->func_to_io;
  #line 694 
  hwif = hwdev->hwif;
  #line 695 
  pdev = hwif->pdev;
  #line 697 
  err = hinic_alloc_cmdq_buf(& func_to_io->cmdqs,& cmd_buf);
  #line 698 
  if (err != 0) {
    #line 699 
    _dev_err(& pdev->dev,(char *)"Failed to allocate cmd buf\n");
    #line 700 
    return -12;
  }
  #line 703 
  ctx = (((((((((((unsigned int)rss_type.ipv4 << 29) & 536870912U) | (((unsigned int)rss_type.ipv6 << 27) & 134217728U)) | (((unsigned int)rss_type.ipv6_ext << 25) & 33554432U)) | (((unsigned int)rss_type.tcp_ipv4 << 28) & 268435456U)) | (((unsigned int)rss_type.tcp_ipv6 << 26) & 67108864U)) | (((unsigned int)rss_type.tcp_ipv6_ext << 24) & 16777216U)) | ((unsigned int)rss_type.udp_ipv4 << 31)) | (((unsigned int)rss_type.udp_ipv6 << 30) & 1073741824U)) | ctx) | 8388608U;
  #line 713 
  cmd_buf.size = 20UL;
  #line 715 
  ctx_tbl = (struct hinic_rss_context_tbl *)cmd_buf.buf;
  #line 716 
  ctx_tbl->group_index = __builtin_bswap32(tmpl_idx);
  #line 717 
  ctx_tbl->offset = 0U;
  #line 718 
  ctx_tbl->size = 4U;
  #line 719 
  ctx_tbl->size = __builtin_bswap32(ctx_tbl->size);
  #line 720 
  ctx_tbl->rsvd = 0U;
  #line 721 
  ctx_tbl->ctx = __builtin_bswap32(ctx);
  #line 724 
  err = hinic_cmdq_direct_resp(& func_to_io->cmdqs,(enum hinic_mod_type)HINIC_MOD_L2NIC,(unsigned char)5,& cmd_buf,& out_param);
  #line 728 
  hinic_free_cmdq_buf(& func_to_io->cmdqs,& cmd_buf);
  #line 730 
  if (err != 0 || out_param != 0ULL) {
    #line 731 
    _dev_err(& pdev->dev,(char *)"Failed to set rss context table, err: %d\n",err);
    #line 733 
    return -14;
  }
  #line 736 
  return 0;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_rss_type(struct hinic_dev *nic_dev, u32 tmpl_idx, struct hinic_rss_type *rss_type)
{
  #line 744 
  struct hinic_hwif *hwif;
  #line 745 
  struct pci_dev *pdev;
  #line 747 
  int err;
  #line 742 
  struct hinic_rss_context_table ctx_tbl = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .template_id = (unsigned char)0, .rsvd1 = (unsigned char)0, .context = 0U};
  #line 743 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 746 
  u16 out_size = (unsigned short)16U;
  #line 749 
  if (hwdev == (struct hinic_hwdev *)0 || rss_type == (struct hinic_rss_type *)0) 
    #line 750 
    return -22;
  #line 752 
  hwif = hwdev->hwif;
  #line 753 
  pdev = hwif->pdev;
  #line 755 
  ctx_tbl.func_id = hwif->attr.func_idx;
  #line 756 
  ctx_tbl.template_id = (unsigned char)tmpl_idx;
  #line 758 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_RSS_CTX_TBL,(void *)(& ctx_tbl),(unsigned short)16,(void *)(& ctx_tbl),& out_size);
  #line 761 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)ctx_tbl.status != 0U) {
    #line 762 
    _dev_err(& pdev->dev,(char *)"Failed to get hash type, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)ctx_tbl.status,(int)out_size);
    #line 764 
    return -22;
  }
  #line 767 
  rss_type->ipv4 = (unsigned char)((unsigned int)((unsigned char)(ctx_tbl.context >> 29)) & 1U);
  #line 768 
  rss_type->ipv6 = (unsigned char)((unsigned int)((unsigned char)(ctx_tbl.context >> 27)) & 1U);
  #line 769 
  rss_type->ipv6_ext = (unsigned char)((unsigned int)((unsigned char)(ctx_tbl.context >> 25)) & 1U);
  #line 770 
  rss_type->tcp_ipv4 = (unsigned char)((unsigned int)((unsigned char)(ctx_tbl.context >> 28)) & 1U);
  #line 771 
  rss_type->tcp_ipv6 = (unsigned char)((unsigned int)((unsigned char)(ctx_tbl.context >> 26)) & 1U);
  #line 772 
  rss_type->tcp_ipv6_ext = (unsigned char)((unsigned int)((unsigned char)(ctx_tbl.context >> 24)) & 1U);
  #line 774 
  rss_type->udp_ipv4 = (unsigned char)(ctx_tbl.context >> 31);
  #line 775 
  rss_type->udp_ipv6 = (unsigned char)((unsigned int)((unsigned char)(ctx_tbl.context >> 30)) & 1U);
  #line 777 
  return 0;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_set_template_tbl(struct hinic_dev *nic_dev, u32 template_id, u8 *temp)
{
  #line 787 
  u16 out_size;
  #line 788 
  int err;
  #line 783 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 784 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 785 
  struct hinic_rss_key rss_key = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .template_id = (unsigned char)0, .rsvd1 = (unsigned char)0, .key = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 786 
  struct pci_dev *pdev = hwif->pdev;
  #line 790 
  rss_key.func_id = hwif->attr.func_idx;
  #line 791 
  rss_key.template_id = (unsigned char)template_id;
  #line 792 
  memcpy((void *)(& rss_key.key),(void *)temp,40UL);
  #line 794 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_RSS_TEMPLATE_TBL,(void *)(& rss_key),(unsigned short)52,(void *)(& rss_key),& out_size);
  #line 797 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)rss_key.status != 0U) {
    #line 798 
    _dev_err(& pdev->dev,(char *)"Failed to set rss hash key, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)rss_key.status,(int)out_size);
    #line 801 
    return -22;
  }
  #line 804 
  return 0;
}

#line 807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_get_template_tbl(struct hinic_dev *nic_dev, u32 tmpl_idx, u8 *temp)
{
  #line 812 
  struct hinic_hwif *hwif;
  #line 813 
  struct pci_dev *pdev;
  #line 815 
  int err;
  #line 810 
  struct hinic_rss_template_key temp_key = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .template_id = (unsigned char)0, .rsvd1 = (unsigned char)0, .key = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 811 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 814 
  u16 out_size = (unsigned short)52U;
  #line 817 
  if (hwdev == (struct hinic_hwdev *)0 || temp == (u8 *)0U) 
                                                            #line 818 
                                                            return -22;
  #line 820 
  hwif = hwdev->hwif;
  #line 821 
  pdev = hwif->pdev;
  #line 823 
  temp_key.func_id = hwif->attr.func_idx;
  #line 824 
  temp_key.template_id = (unsigned char)tmpl_idx;
  #line 826 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_RSS_TEMPLATE_TBL,(void *)(& temp_key),(unsigned short)52,(void *)(& temp_key),& out_size);
  #line 829 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)temp_key.status != 0U) {
    #line 830 
    _dev_err(& pdev->dev,(char *)"Failed to set hash key, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)temp_key.status,(int)out_size);
    #line 832 
    return -22;
  }
  #line 835 
  memcpy((void *)temp,(void *)(& temp_key.key),40UL);
  #line 837 
  return 0;
}

#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_set_hash_engine(struct hinic_dev *nic_dev, u8 template_id, u8 type)
{
  #line 847 
  u16 out_size;
  #line 848 
  int err;
  #line 843 
  struct hinic_rss_engine_type rss_engine = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .template_id = (unsigned char)0, .hash_engine = (unsigned char)0, .rsvd1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 844 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 845 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 846 
  struct pci_dev *pdev = hwif->pdev;
  #line 850 
  rss_engine.func_id = hwif->attr.func_idx;
  #line 851 
  rss_engine.hash_engine = type;
  #line 852 
  rss_engine.template_id = template_id;
  #line 854 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_SET_RSS_HASH_ENGINE,(void *)(& rss_engine),(unsigned short)16,(void *)(& rss_engine),& out_size);
  #line 857 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)rss_engine.status != 0U) {
    #line 858 
    _dev_err(& pdev->dev,(char *)"Failed to set hash engine, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)rss_engine.status,(int)out_size);
    #line 861 
    return -22;
  }
  #line 864 
  return 0;
}

#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_get_hash_engine(struct hinic_dev *nic_dev, u8 tmpl_idx, u8 *type)
{
  #line 871 
  struct hinic_hwif *hwif;
  #line 872 
  struct pci_dev *pdev;
  #line 874 
  int err;
  #line 869 
  struct hinic_rss_engine_type hash_type = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .template_id = (unsigned char)0, .hash_engine = (unsigned char)0, .rsvd1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 870 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 873 
  u16 out_size = (unsigned short)16U;
  #line 876 
  if (hwdev == (struct hinic_hwdev *)0 || type == (u8 *)0U) 
                                                            #line 877 
                                                            return -22;
  #line 879 
  hwif = hwdev->hwif;
  #line 880 
  pdev = hwif->pdev;
  #line 882 
  hash_type.func_id = hwif->attr.func_idx;
  #line 883 
  hash_type.template_id = tmpl_idx;
  #line 885 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_RSS_HASH_ENGINE,(void *)(& hash_type),(unsigned short)16,(void *)(& hash_type),& out_size);
  #line 888 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)hash_type.status != 0U) {
    #line 889 
    _dev_err(& pdev->dev,(char *)"Failed to get hash engine, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)hash_type.status,(int)out_size);
    #line 891 
    return -22;
  }
  #line 894 
  *type = hash_type.hash_engine;
  #line 895 
  return 0;
}

#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_cfg(struct hinic_dev *nic_dev, u8 rss_en, u8 template_id)
{
  #line 904 
  u16 out_size;
  #line 905 
  int err;
  #line 900 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 901 
  struct hinic_rss_config rss_cfg = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .rss_en = (unsigned char)0, .template_id = (unsigned char)0, .rq_priority_number = (unsigned char)0, .rsvd1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 902 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 903 
  struct pci_dev *pdev = hwif->pdev;
  #line 907 
  rss_cfg.func_id = hwif->attr.func_idx;
  #line 908 
  rss_cfg.rss_en = rss_en;
  #line 909 
  rss_cfg.template_id = template_id;
  #line 910 
  rss_cfg.rq_priority_number = (unsigned char)0U;
  #line 912 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_RSS_CFG,(void *)(& rss_cfg),(unsigned short)24,(void *)(& rss_cfg),& out_size);
  #line 915 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)rss_cfg.status != 0U) {
    #line 916 
    _dev_err(& pdev->dev,(char *)"Failed to set rss cfg, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)rss_cfg.status,(int)out_size);
    #line 919 
    return -22;
  }
  #line 922 
  return 0;
}

#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_template_alloc(struct hinic_dev *nic_dev, u8 *tmpl_idx)
{
  #line 931 
  u16 out_size;
  #line 932 
  int err;
  #line 927 
  struct hinic_rss_template_mgmt template_mgmt = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .cmd = (unsigned char)0, .template_id = (unsigned char)0, .rsvd1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 928 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 929 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 930 
  struct pci_dev *pdev = hwif->pdev;
  #line 934 
  template_mgmt.func_id = hwif->attr.func_idx;
  #line 935 
  template_mgmt.cmd = (unsigned char)1U;
  #line 937 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_RSS_TEMP_MGR,(void *)(& template_mgmt),(unsigned short)16,(void *)(& template_mgmt),& out_size);
  #line 940 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)template_mgmt.status != 0U) {
    #line 941 
    _dev_err(& pdev->dev,(char *)"Failed to alloc rss template, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)template_mgmt.status,(int)out_size);
    #line 943 
    return -22;
  }
  #line 946 
  *tmpl_idx = template_mgmt.template_id;
  #line 948 
  return 0;
}

#line 951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_rss_template_free(struct hinic_dev *nic_dev, u8 tmpl_idx)
{
  #line 957 
  u16 out_size;
  #line 958 
  int err;
  #line 953 
  struct hinic_rss_template_mgmt template_mgmt = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .cmd = (unsigned char)0, .template_id = (unsigned char)0, .rsvd1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 954 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 955 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 956 
  struct pci_dev *pdev = hwif->pdev;
  #line 960 
  template_mgmt.func_id = hwif->attr.func_idx;
  #line 961 
  template_mgmt.template_id = tmpl_idx;
  #line 962 
  template_mgmt.cmd = (unsigned char)2U;
  #line 964 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_RSS_TEMP_MGR,(void *)(& template_mgmt),(unsigned short)16,(void *)(& template_mgmt),& out_size);
  #line 967 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)template_mgmt.status != 0U) {
    #line 968 
    _dev_err(& pdev->dev,(char *)"Failed to free rss template, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)template_mgmt.status,(int)out_size);
    #line 970 
    return -22;
  }
  #line 973 
  return 0;
}

#line 976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_vport_stats(struct hinic_dev *nic_dev, struct hinic_vport_stats *stats)
{
  #line 985 
  int err;
  #line 979 
  struct hinic_cmd_vport_stats vport_stats = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .stats = {.tx_unicast_pkts_vport = 0ULL, .tx_unicast_bytes_vport = 0ULL, .tx_multicast_pkts_vport = 0ULL, .tx_multicast_bytes_vport = 0ULL, .tx_broadcast_pkts_vport = 0ULL, .tx_broadcast_bytes_vport = 0ULL, .rx_unicast_pkts_vport = 0ULL, .rx_unicast_bytes_vport = 0ULL, .rx_multicast_pkts_vport = 0ULL, .rx_multicast_bytes_vport = 0ULL, .rx_broadcast_pkts_vport = 0ULL, .rx_broadcast_bytes_vport = 0ULL, .tx_discard_vport = 0ULL, .rx_discard_vport = 0ULL, .tx_err_vport = 0ULL, .rx_err_vport = 0ULL}};
  #line 980 
  struct hinic_port_stats_info stats_info = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .rsvd1 = (unsigned short)0, .stats_version = 0U, .stats_size = 0U};
  #line 981 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 982 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 983 
  u16 out_size = (unsigned short)136U;
  #line 984 
  struct pci_dev *pdev = hwif->pdev;
  #line 987 
  stats_info.stats_version = 0U;
  #line 988 
  stats_info.func_id = hwif->attr.func_idx;
  #line 989 
  stats_info.stats_size = 136U;
  #line 991 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_VPORT_STAT,(void *)(& stats_info),(unsigned short)20,(void *)(& vport_stats),& out_size);
  #line 994 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)vport_stats.status != 0U) {
    #line 995 
    _dev_err(& pdev->dev,(char *)"Failed to get function statistics, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)vport_stats.status,(int)out_size);
    #line 998 
    return -14;
  }
  #line 1001 
  memcpy((void *)stats,(void *)(& vport_stats.stats),128UL);
  #line 1002 
  return 0;
}

#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_phy_port_stats(struct hinic_dev *nic_dev, struct hinic_phy_port_stats *stats)
{
  #line 1011 
  struct hinic_port_stats *port_stats;
  #line 1014 
  int err;
  #line 1008 
  struct hinic_port_stats_info stats_info = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd0 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .func_id = (unsigned short)0, .rsvd1 = (unsigned short)0, .stats_version = 0U, .stats_size = 0U};
  #line 1009 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 1010 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 1012 
  u16 out_size = (unsigned short)832U;
  #line 1013 
  struct pci_dev *pdev = hwif->pdev;
  #line 1016 
  port_stats = (struct hinic_port_stats *)kzalloc(832UL,3264U);
  #line 1017 
  if (port_stats == (struct hinic_port_stats *)0) 
                                                  #line 1018 
                                                  return -12;
  #line 1020 
  stats_info.stats_version = 0U;
  #line 1021 
  stats_info.stats_size = 832U;
  #line 1023 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_PORT_STATISTICS,(void *)(& stats_info),(unsigned short)20,(void *)port_stats,& out_size);
  #line 1026 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)port_stats->status != 0U) {
    #line 1027 
    _dev_err(& pdev->dev,(char *)"Failed to get port statistics, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)port_stats->status,(int)out_size);
    #line 1030 
    err = -22;
    #line 1031 
    goto out;
  }
  #line 1034 
  memcpy((void *)stats,(void *)(& port_stats->stats),824UL);
  #line 1036 
  out: 
       #line 1036 
  ;
  #line 1037 
  kfree((void *)port_stats);
  #line 1039 
  return err;
}

#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.c"
int hinic_get_mgmt_version(struct hinic_dev *nic_dev, u8 *mgmt_ver)
{
  #line 1046 
  struct hinic_hwif *hwif;
  #line 1047 
  struct pci_dev *pdev;
  #line 1048 
  u16 out_size;
  #line 1049 
  int err;
  #line 1044 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 1045 
  struct hinic_version_info up_ver = {.status = (unsigned char)0U, .version = (unsigned char)0, .rsvd = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .ver = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .time = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 1051 
  if (hwdev == (struct hinic_hwdev *)0) 
                                        #line 1052 
                                        return -22;
  #line 1054 
  hwif = hwdev->hwif;
  #line 1055 
  pdev = hwif->pdev;
  #line 1057 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_MGMT_VERSION,(void *)(& up_ver),(unsigned short)44,(void *)(& up_ver),& out_size);
  #line 1060 
  if ((err != 0 || (unsigned int)out_size == 0U) || (unsigned int)up_ver.status != 0U) {
    #line 1061 
    _dev_err(& pdev->dev,(char *)"Failed to get mgmt version, err: %d, status: 0x%x, out size: 0x%x\n",err,(int)up_ver.status,(int)out_size);
    #line 1064 
    return -22;
  }
  #line 1067 
  snprintf((char *)mgmt_ver,32UL,(char *)"%s",(u8 *)(& up_ver.ver));
  #line 1069 
  return 0;
}

#line 365  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_port.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 368 
  return ldv_kzalloc(size,flags);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static void *ERR_PTR_0(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static bool IS_ERR(void *ptr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 209 
void iounmap(void *);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 2022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
#line 250 
int hinic_ceqs_init(struct hinic_ceqs *ceqs, struct hinic_hwif *hwif, int num_ceqs, u32 q_len, u32 page_size, struct msix_entry *msix_entries);
#line 254 
#line 254 
void hinic_ceqs_free(struct hinic_ceqs *ceqs);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
#line 173 
int hinic_init_cmdqs(struct hinic_cmdqs *cmdqs, struct hinic_hwif *hwif, void **db_area);
#line 176 
#line 176 
void hinic_free_cmdqs(struct hinic_cmdqs *cmdqs);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.h"
#line 118 
void hinic_qp_prepare_header(struct hinic_qp_ctxt_header *qp_ctxt_hdr, enum hinic_qp_ctxt_type ctxt_type, u16 num_queues, u16 max_queues);
#line 122 
#line 122 
void hinic_sq_prepare_ctxt(struct hinic_sq_ctxt *sq_ctxt, struct hinic_sq *sq, u16 global_qid);
#line 125 
#line 125 
void hinic_rq_prepare_ctxt(struct hinic_rq_ctxt *rq_ctxt, struct hinic_rq *rq, u16 global_qid);
#line 128 
#line 128 
int hinic_init_sq(struct hinic_sq *sq, struct hinic_hwif *hwif, struct hinic_wq *wq, struct msix_entry *entry, void *ci_addr, dma_addr_t ci_dma_addr, void *db_base);
#line 132 
#line 132 
void hinic_clean_sq(struct hinic_sq *sq);
#line 134 
#line 134 
int hinic_init_rq(struct hinic_rq *rq, struct hinic_hwif *hwif, struct hinic_wq *wq, struct msix_entry *entry);
#line 137 
#line 137 
void hinic_clean_rq(struct hinic_rq *rq);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.h"
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
int hinic_io_create_qps(struct hinic_func_to_io *func_to_io, u16 base_qpn, int num_qps, struct msix_entry *sq_msix_entries, struct msix_entry *rq_msix_entries);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.h"
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
void hinic_io_destroy_qps(struct hinic_func_to_io *func_to_io, int num_qps);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.h"
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
int hinic_io_init(struct hinic_func_to_io *func_to_io, struct hinic_hwif *hwif, u16 max_qps, int num_ceqs, struct msix_entry *ceq_msix_entries);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.h"
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
void hinic_io_free(struct hinic_func_to_io *func_to_io);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static void init_db_area_idx(struct hinic_free_db_area *free_db_area)
{
  #line 44 
  int i;
  #line 46 
  i = 0;
  #line 46 
  while (i <= 1023) {
    #line 47 
    free_db_area->db_idx[i] = i;
    #line 46 
    i ++;
  }
  #line 49 
  free_db_area->alloc_pos = 0;
  #line 50 
  free_db_area->return_pos = 1024;
  #line 52 
  free_db_area->num_free = 1024;
  #line 54 
  sema_init(& free_db_area->idx_lock,1);
  #line 55 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static void *get_db_area(struct hinic_func_to_io *func_to_io)
{
  #line 60 
  int pos;
  #line 60 
  int idx;
  #line 72 
  int tmp_0;
  #line 59 
  struct hinic_free_db_area *free_db_area = & func_to_io->free_db_area;
  #line 62 
  down(& free_db_area->idx_lock);
  #line 64 
  (free_db_area->num_free) --;
  #line 66 
  if (free_db_area->num_free < 0) {
    #line 67 
    (free_db_area->num_free) ++;
    #line 68 
    up(& free_db_area->idx_lock);
    #line 69 
    return ERR_PTR_0(-12L);
  }
  #line 72 
  tmp_0 = free_db_area->alloc_pos;
  #line 72 
  (free_db_area->alloc_pos) ++;
  #line 72 
  pos = tmp_0;
  #line 73 
  pos &= 1023;
  #line 75 
  idx = free_db_area->db_idx[pos];
  #line 77 
  free_db_area->db_idx[pos] = -1;
  #line 79 
  up(& free_db_area->idx_lock);
  #line 81 
  return func_to_io->db_base + (unsigned long)(idx * 4096);
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static void return_db_area(struct hinic_func_to_io *func_to_io, void *db_base)
{
  #line 88 
  int pos;
  #line 92 
  int tmp;
  #line 87 
  struct hinic_free_db_area *free_db_area = & func_to_io->free_db_area;
  #line 88 
  int idx = (int)(((unsigned long)db_base - (unsigned long)func_to_io->db_base) / 4096UL);
  #line 90 
  down(& free_db_area->idx_lock);
  #line 92 
  tmp = free_db_area->return_pos;
  #line 92 
  (free_db_area->return_pos) ++;
  #line 92 
  pos = tmp;
  #line 93 
  pos &= 1023;
  #line 95 
  free_db_area->db_idx[pos] = idx;
  #line 97 
  (free_db_area->num_free) ++;
  #line 99 
  up(& free_db_area->idx_lock);
  #line 100 
  return;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static int write_sq_ctxts(struct hinic_func_to_io *func_to_io, u16 base_qpn, u16 num_sqs)
{
  #line 106 
  struct hinic_sq_ctxt_block *sq_ctxt_block;
  #line 108 
  struct hinic_cmdq_buf cmdq_buf;
  #line 109 
  struct hinic_sq_ctxt *sq_ctxt;
  #line 110 
  struct hinic_qp *qp;
  #line 111 
  u64 out_param;
  #line 112 
  int err;
  #line 112 
  int i;
  #line 105 
  struct hinic_hwif *hwif = func_to_io->hwif;
  #line 107 
  struct pci_dev *pdev = hwif->pdev;
  #line 114 
  err = hinic_alloc_cmdq_buf(& func_to_io->cmdqs,& cmdq_buf);
  #line 115 
  if (err != 0) {
    #line 116 
    _dev_err(& pdev->dev,(char *)"Failed to allocate cmdq buf\n");
    #line 117 
    return err;
  }
  #line 120 
  sq_ctxt_block = (struct hinic_sq_ctxt_block *)cmdq_buf.buf;
  #line 121 
  sq_ctxt = (struct hinic_sq_ctxt *)(& sq_ctxt_block->sq_ctxt);
  #line 123 
  hinic_qp_prepare_header(& sq_ctxt_block->hdr,(enum hinic_qp_ctxt_type)HINIC_QP_CTXT_TYPE_SQ,(unsigned short)((int)num_sqs),(unsigned short)((int)func_to_io->max_qps));
  #line 125 
  i = 0;
  #line 125 
  while ((int)num_sqs > i) {
    #line 126 
    qp = func_to_io->qps + (unsigned long)i;
    #line 128 
    hinic_sq_prepare_ctxt(sq_ctxt + (unsigned long)i,& qp->sq,(unsigned short)((int)qp->q_id + (int)base_qpn));
    #line 125 
    i ++;
  }
  #line 132 
  cmdq_buf.size = (unsigned long)num_sqs * 48UL + 8UL;
  #line 134 
  err = hinic_cmdq_direct_resp(& func_to_io->cmdqs,(enum hinic_mod_type)HINIC_MOD_L2NIC,(unsigned char)0,& cmdq_buf,& out_param);
  #line 137 
  if (err != 0 || out_param != 0ULL) {
    #line 138 
    _dev_err(& pdev->dev,(char *)"Failed to set SQ ctxts\n");
    #line 139 
    err = -14;
  }
  #line 142 
  hinic_free_cmdq_buf(& func_to_io->cmdqs,& cmdq_buf);
  #line 143 
  return err;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static int write_rq_ctxts(struct hinic_func_to_io *func_to_io, u16 base_qpn, u16 num_rqs)
{
  #line 150 
  struct hinic_rq_ctxt_block *rq_ctxt_block;
  #line 152 
  struct hinic_cmdq_buf cmdq_buf;
  #line 153 
  struct hinic_rq_ctxt *rq_ctxt;
  #line 154 
  struct hinic_qp *qp;
  #line 155 
  u64 out_param;
  #line 156 
  int err;
  #line 156 
  int i;
  #line 149 
  struct hinic_hwif *hwif = func_to_io->hwif;
  #line 151 
  struct pci_dev *pdev = hwif->pdev;
  #line 158 
  err = hinic_alloc_cmdq_buf(& func_to_io->cmdqs,& cmdq_buf);
  #line 159 
  if (err != 0) {
    #line 160 
    _dev_err(& pdev->dev,(char *)"Failed to allocate cmdq buf\n");
    #line 161 
    return err;
  }
  #line 164 
  rq_ctxt_block = (struct hinic_rq_ctxt_block *)cmdq_buf.buf;
  #line 165 
  rq_ctxt = (struct hinic_rq_ctxt *)(& rq_ctxt_block->rq_ctxt);
  #line 167 
  hinic_qp_prepare_header(& rq_ctxt_block->hdr,(enum hinic_qp_ctxt_type)HINIC_QP_CTXT_TYPE_RQ,(unsigned short)((int)num_rqs),(unsigned short)((int)func_to_io->max_qps));
  #line 169 
  i = 0;
  #line 169 
  while ((int)num_rqs > i) {
    #line 170 
    qp = func_to_io->qps + (unsigned long)i;
    #line 172 
    hinic_rq_prepare_ctxt(rq_ctxt + (unsigned long)i,& qp->rq,(unsigned short)((int)qp->q_id + (int)base_qpn));
    #line 169 
    i ++;
  }
  #line 176 
  cmdq_buf.size = (unsigned long)num_rqs * 48UL + 8UL;
  #line 178 
  err = hinic_cmdq_direct_resp(& func_to_io->cmdqs,(enum hinic_mod_type)HINIC_MOD_L2NIC,(unsigned char)0,& cmdq_buf,& out_param);
  #line 181 
  if (err != 0 || out_param != 0ULL) {
    #line 182 
    _dev_err(& pdev->dev,(char *)"Failed to set RQ ctxts\n");
    #line 183 
    err = -14;
  }
  #line 186 
  hinic_free_cmdq_buf(& func_to_io->cmdqs,& cmdq_buf);
  #line 187 
  return err;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static int write_qp_ctxts(struct hinic_func_to_io *func_to_io, u16 base_qpn, u16 num_qps)
{
  #line 201 
  int tmp_1;
  #line 201 
  if (write_sq_ctxts(func_to_io,(unsigned short)((int)base_qpn),
                     (unsigned short)((int)num_qps)) != 0) 
    #line 201 
    tmp_1 = 1;
  else {
    #line 201 
    if (write_rq_ctxts(func_to_io,(unsigned short)((int)base_qpn),
                       (unsigned short)((int)num_qps)) != 0) 
      #line 201 
      tmp_1 = 1; else 
                      #line 201 
                      tmp_1 = 0;
  }
  #line 201 
  return tmp_1;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static int hinic_clean_queue_offload_ctxt(struct hinic_func_to_io *func_to_io, enum hinic_qp_ctxt_type ctxt_type)
{
  #line 209 
  struct hinic_clean_queue_ctxt *ctxt_block;
  #line 211 
  struct hinic_cmdq_buf cmdq_buf;
  #line 213 
  int err;
  #line 208 
  struct hinic_hwif *hwif = func_to_io->hwif;
  #line 210 
  struct pci_dev *pdev = hwif->pdev;
  #line 212 
  u64 out_param = 0ULL;
  #line 215 
  err = hinic_alloc_cmdq_buf(& func_to_io->cmdqs,& cmdq_buf);
  #line 216 
  if (err != 0) {
    #line 217 
    _dev_err(& pdev->dev,(char *)"Failed to allocate cmdq buf\n");
    #line 218 
    return err;
  }
  #line 221 
  ctxt_block = (struct hinic_clean_queue_ctxt *)cmdq_buf.buf;
  #line 222 
  ctxt_block->cmdq_hdr.num_queues = func_to_io->max_qps;
  #line 223 
  ctxt_block->cmdq_hdr.queue_type = (unsigned short)ctxt_type;
  #line 224 
  ctxt_block->cmdq_hdr.addr_offset = 0U;
  #line 227 
  ctxt_block->ctxt_size = 3U;
  #line 229 
  hinic_cpu_to_be32((void *)ctxt_block,12);
  #line 231 
  cmdq_buf.size = 12UL;
  #line 233 
  err = hinic_cmdq_direct_resp(& func_to_io->cmdqs,(enum hinic_mod_type)HINIC_MOD_L2NIC,(unsigned char)1,& cmdq_buf,& out_param);
  #line 237 
  if (err != 0 || out_param != 0ULL) {
    #line 238 
    _dev_err(& pdev->dev,(char *)"Failed to clean offload ctxts, err: %d, out_param: 0x%llx\n",err,out_param);
    #line 241 
    err = -14;
  }
  #line 244 
  hinic_free_cmdq_buf(& func_to_io->cmdqs,& cmdq_buf);
  #line 246 
  return err;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static int hinic_clean_qp_offload_ctxt(struct hinic_func_to_io *func_to_io)
{
  #line 253 
  int tmp_1;
  #line 253 
  if (hinic_clean_queue_offload_ctxt(func_to_io,
                                     (enum hinic_qp_ctxt_type)HINIC_QP_CTXT_TYPE_SQ) != 0) 
    #line 253 
    tmp_1 = 1;
  else {
    #line 253 
    if (hinic_clean_queue_offload_ctxt(func_to_io,
                                       (enum hinic_qp_ctxt_type)HINIC_QP_CTXT_TYPE_RQ) != 0) 
      #line 253 
      tmp_1 = 1; else 
                      #line 253 
                      tmp_1 = 0;
  }
  #line 253 
  return tmp_1;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static int init_qp(struct hinic_func_to_io *func_to_io, struct hinic_qp *qp, int q_id, struct msix_entry *sq_msix_entry, struct msix_entry *rq_msix_entry)
{
  #line 275 
  void *db_base;
  #line 276 
  int err;
  #line 273 
  struct hinic_hwif *hwif = func_to_io->hwif;
  #line 274 
  struct pci_dev *pdev = hwif->pdev;
  #line 278 
  qp->q_id = (unsigned short)q_id;
  #line 280 
  err = hinic_wq_allocate(& func_to_io->wqs,func_to_io->sq_wq + (unsigned long)q_id,(unsigned short)64,(unsigned short)4096,(unsigned short)4096,(unsigned short)320);
  #line 283 
  if (err != 0) {
    #line 284 
    _dev_err(& pdev->dev,(char *)"Failed to allocate WQ for SQ\n");
    #line 285 
    return err;
  }
  #line 288 
  err = hinic_wq_allocate(& func_to_io->wqs,func_to_io->rq_wq + (unsigned long)q_id,(unsigned short)32,(unsigned short)4096,(unsigned short)4096,(unsigned short)32);
  #line 291 
  if (err != 0) {
    #line 292 
    _dev_err(& pdev->dev,(char *)"Failed to allocate WQ for RQ\n");
    #line 293 
    goto err_rq_alloc;
  }
  #line 296 
  db_base = get_db_area(func_to_io);
  #line 297 
  if ((int)IS_ERR(db_base) != 0) {
    #line 298 
    _dev_err(& pdev->dev,(char *)"Failed to get DB area for SQ\n");
    #line 299 
    err = (int)PTR_ERR(db_base);
    #line 300 
    goto err_get_db;
  }
  #line 303 
  *(func_to_io->sq_db + (unsigned long)q_id) = db_base;
  #line 305 
  err = hinic_init_sq(& qp->sq,hwif,func_to_io->sq_wq + (unsigned long)q_id,sq_msix_entry,func_to_io->ci_addr_base + (unsigned long)q_id * 4UL,func_to_io->ci_dma_base + (unsigned long long)((unsigned long)q_id * 4UL),db_base);
  #line 309 
  if (err != 0) {
    #line 310 
    _dev_err(& pdev->dev,(char *)"Failed to init SQ\n");
    #line 311 
    goto err_sq_init;
  }
  #line 314 
  err = hinic_init_rq(& qp->rq,hwif,func_to_io->rq_wq + (unsigned long)q_id,rq_msix_entry);
  #line 316 
  if (err != 0) {
    #line 317 
    _dev_err(& pdev->dev,(char *)"Failed to init RQ\n");
    #line 318 
    goto err_rq_init;
  }
  #line 321 
  return 0;
  #line 323 
  err_rq_init: 
               #line 323 
  ;
  #line 324 
  hinic_clean_sq(& qp->sq);
  #line 326 
  err_sq_init: 
               #line 326 
  ;
  #line 327 
  return_db_area(func_to_io,db_base);
  #line 329 
  err_get_db: 
              #line 329 
  ;
  #line 330 
  hinic_wq_free(& func_to_io->wqs,func_to_io->rq_wq + (unsigned long)q_id);
  #line 332 
  err_rq_alloc: 
                #line 332 
  ;
  #line 333 
  hinic_wq_free(& func_to_io->wqs,func_to_io->sq_wq + (unsigned long)q_id);
  #line 334 
  return err;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
static void destroy_qp(struct hinic_func_to_io *func_to_io, struct hinic_qp *qp)
{
  #line 345 
  int q_id = (int)qp->q_id;
  #line 347 
  hinic_clean_rq(& qp->rq);
  #line 348 
  hinic_clean_sq(& qp->sq);
  #line 350 
  return_db_area(func_to_io,*(func_to_io->sq_db + (unsigned long)q_id));
  #line 352 
  hinic_wq_free(& func_to_io->wqs,func_to_io->rq_wq + (unsigned long)q_id);
  #line 353 
  hinic_wq_free(& func_to_io->wqs,func_to_io->sq_wq + (unsigned long)q_id);
  #line 354 
  return;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
int hinic_io_create_qps(struct hinic_func_to_io *func_to_io, u16 base_qpn, int num_qps, struct msix_entry *sq_msix_entries, struct msix_entry *rq_msix_entries)
{
  #line 373 
  size_t qps_size;
  #line 373 
  size_t wq_size;
  #line 373 
  size_t db_size;
  #line 374 
  void *ci_addr_base;
  #line 375 
  int i;
  #line 375 
  int j;
  #line 375 
  int err;
  #line 371 
  struct hinic_hwif *hwif = func_to_io->hwif;
  #line 372 
  struct pci_dev *pdev = hwif->pdev;
  #line 377 
  qps_size = (unsigned long)num_qps * 136UL;
  #line 378 
  func_to_io->qps = (struct hinic_qp *)cif_devm_kzalloc_0(& pdev->dev,qps_size,3264U);
  #line 379 
  if (func_to_io->qps == (struct hinic_qp *)0) 
                                               #line 380 
                                               return -12;
  #line 382 
  wq_size = (unsigned long)num_qps * 96UL;
  #line 383 
  func_to_io->sq_wq = (struct hinic_wq *)cif_devm_kzalloc_0(& pdev->dev,wq_size,3264U);
  #line 384 
  if (func_to_io->sq_wq == (struct hinic_wq *)0) {
    #line 385 
    err = -12;
    #line 386 
    goto err_sq_wq;
  }
  #line 389 
  wq_size = (unsigned long)num_qps * 96UL;
  #line 390 
  func_to_io->rq_wq = (struct hinic_wq *)cif_devm_kzalloc_0(& pdev->dev,wq_size,3264U);
  #line 391 
  if (func_to_io->rq_wq == (struct hinic_wq *)0) {
    #line 392 
    err = -12;
    #line 393 
    goto err_rq_wq;
  }
  #line 396 
  db_size = (unsigned long)num_qps * 8UL;
  #line 397 
  func_to_io->sq_db = (void **)cif_devm_kzalloc_0(& pdev->dev,db_size,3264U);
  #line 398 
  if (func_to_io->sq_db == (void **)0) {
    #line 399 
    err = -12;
    #line 400 
    goto err_sq_db;
  }
  #line 403 
  ci_addr_base = dma_alloc_coherent(& pdev->dev,(unsigned long)num_qps * 4UL,& func_to_io->ci_dma_base,3264U);
  #line 406 
  if (ci_addr_base == (void *)0) {
    #line 407 
    _dev_err(& pdev->dev,(char *)"Failed to allocate CI area\n");
    #line 408 
    err = -12;
    #line 409 
    goto err_ci_base;
  }
  #line 412 
  func_to_io->ci_addr_base = ci_addr_base;
  #line 414 
  i = 0;
  #line 414 
  while (i < num_qps) {
    #line 415 
    err = init_qp(func_to_io,func_to_io->qps + (unsigned long)i,i,sq_msix_entries + (unsigned long)i,rq_msix_entries + (unsigned long)i);
    #line 417 
    if (err != 0) {
      #line 418 
      _dev_err(& pdev->dev,(char *)"Failed to create QP %d\n",i);
      #line 419 
      goto err_init_qp;
    }
    #line 414 
    i ++;
  }
  #line 423 
  err = write_qp_ctxts(func_to_io,(unsigned short)((int)base_qpn),(unsigned short)((int)((unsigned short)num_qps)));
  #line 424 
  if (err != 0) {
    #line 425 
    _dev_err(& pdev->dev,(char *)"Failed to init QP ctxts\n");
    #line 426 
    goto err_write_qp_ctxts;
  }
  #line 429 
  err = hinic_clean_qp_offload_ctxt(func_to_io);
  #line 430 
  if (err != 0) {
    #line 431 
    _dev_err(& pdev->dev,(char *)"Failed to clean QP contexts space\n");
    #line 432 
    goto err_write_qp_ctxts;
  }
  #line 435 
  return 0;
  #line 437 
  err_write_qp_ctxts: 
                      #line 437 
  ;
  #line 438 
  err_init_qp: 
               #line 438 
  ;
  #line 439 
  j = 0;
  #line 439 
  while (j < i) {
    #line 440 
    destroy_qp(func_to_io,func_to_io->qps + (unsigned long)j);
    #line 439 
    j ++;
  }
  #line 442 
  dma_free_coherent(& pdev->dev,(unsigned long)num_qps * 4UL,func_to_io->ci_addr_base,func_to_io->ci_dma_base);
  #line 445 
  err_ci_base: 
               #line 445 
  ;
  #line 446 
  devm_kfree(& pdev->dev,(void *)func_to_io->sq_db);
  #line 448 
  err_sq_db: 
             #line 448 
  ;
  #line 449 
  devm_kfree(& pdev->dev,(void *)func_to_io->rq_wq);
  #line 451 
  err_rq_wq: 
             #line 451 
  ;
  #line 452 
  devm_kfree(& pdev->dev,(void *)func_to_io->sq_wq);
  #line 454 
  err_sq_wq: 
             #line 454 
  ;
  #line 455 
  devm_kfree(& pdev->dev,(void *)func_to_io->qps);
  #line 456 
  return err;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
void hinic_io_destroy_qps(struct hinic_func_to_io *func_to_io, int num_qps)
{
  #line 468 
  size_t ci_table_size;
  #line 469 
  int i;
  #line 466 
  struct hinic_hwif *hwif = func_to_io->hwif;
  #line 467 
  struct pci_dev *pdev = hwif->pdev;
  #line 471 
  ci_table_size = (unsigned long)num_qps * 4UL;
  #line 473 
  i = 0;
  #line 473 
  while (i < num_qps) {
    #line 474 
    destroy_qp(func_to_io,func_to_io->qps + (unsigned long)i);
    #line 473 
    i ++;
  }
  #line 476 
  dma_free_coherent(& pdev->dev,ci_table_size,func_to_io->ci_addr_base,func_to_io->ci_dma_base);
  #line 479 
  devm_kfree(& pdev->dev,(void *)func_to_io->sq_db);
  #line 481 
  devm_kfree(& pdev->dev,(void *)func_to_io->rq_wq);
  #line 482 
  devm_kfree(& pdev->dev,(void *)func_to_io->sq_wq);
  #line 484 
  devm_kfree(& pdev->dev,(void *)func_to_io->qps);
  #line 485 
  return;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
int hinic_io_init(struct hinic_func_to_io *func_to_io, struct hinic_hwif *hwif, u16 max_qps, int num_ceqs, struct msix_entry *ceq_msix_entries)
{
  #line 502 
  enum hinic_cmdq_type cmdq;
  #line 502 
  enum hinic_cmdq_type type;
  #line 503 
  void *db_area;
  #line 504 
  int err;
  #line 501 
  struct pci_dev *pdev = hwif->pdev;
  #line 506 
  func_to_io->hwif = hwif;
  #line 507 
  func_to_io->qps = (struct hinic_qp *)0;
  #line 508 
  func_to_io->max_qps = max_qps;
  #line 510 
  err = hinic_ceqs_init(& func_to_io->ceqs,hwif,num_ceqs,1024U,4096U,ceq_msix_entries);
  #line 513 
  if (err != 0) {
    #line 514 
    _dev_err(& pdev->dev,(char *)"Failed to init CEQs\n");
    #line 515 
    return err;
  }
  #line 518 
  err = hinic_wqs_alloc(& func_to_io->wqs,(int)max_qps * 2,hwif);
  #line 519 
  if (err != 0) {
    #line 520 
    _dev_err(& pdev->dev,(char *)"Failed to allocate WQS for IO\n");
    #line 521 
    goto err_wqs_alloc;
  }
  #line 524 
  func_to_io->db_base = pci_ioremap_bar(pdev,4);
  #line 525 
  if (func_to_io->db_base == (void *)0) {
    #line 526 
    _dev_err(& pdev->dev,(char *)"Failed to remap IO DB area\n");
    #line 527 
    err = -12;
    #line 528 
    goto err_db_ioremap;
  }
  #line 531 
  init_db_area_idx(& func_to_io->free_db_area);
  #line 533 
  cmdq = HINIC_CMDQ_SYNC;
  #line 533 
  while (cmdq == (unsigned int)HINIC_CMDQ_SYNC) {
    {
      #line 534 
      db_area = get_db_area(func_to_io);
      #line 535 
      if ((int)IS_ERR(db_area) != 0) {
        #line 536 
        _dev_err(& pdev->dev,(char *)"Failed to get cmdq db area\n");
        #line 537 
        err = (int)PTR_ERR(db_area);
        #line 538 
        goto err_db_area;
      }
      #line 541 
      func_to_io->cmdq_db_area[(unsigned int)cmdq] = db_area;
    }
    #line 533 
    cmdq ++;
  }
  #line 544 
  err = hinic_init_cmdqs(& func_to_io->cmdqs,hwif,(void **)(& func_to_io->cmdq_db_area));
  #line 546 
  if (err != 0) {
    #line 547 
    _dev_err(& pdev->dev,(char *)"Failed to initialize cmdqs\n");
    #line 548 
    goto err_init_cmdqs;
  }
  #line 551 
  return 0;
  #line 553 
  err_init_cmdqs: 
                  #line 553 
  ;
  #line 554 
  err_db_area: 
               #line 554 
  ;
  #line 555 
  type = HINIC_CMDQ_SYNC;
  #line 555 
  while (type < cmdq) {
    #line 556 
    return_db_area(func_to_io,func_to_io->cmdq_db_area[(unsigned int)type]);
    #line 555 
    type ++;
  }
  #line 558 
  iounmap(func_to_io->db_base);
  #line 560 
  err_db_ioremap: 
                  #line 560 
  ;
  #line 561 
  hinic_wqs_free(& func_to_io->wqs);
  #line 563 
  err_wqs_alloc: 
                 #line 563 
  ;
  #line 564 
  hinic_ceqs_free(& func_to_io->ceqs);
  #line 565 
  return err;
}

#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_io.c"
void hinic_io_free(struct hinic_func_to_io *func_to_io)
{
  #line 574 
  enum hinic_cmdq_type cmdq;
  #line 576 
  hinic_free_cmdqs(& func_to_io->cmdqs);
  #line 578 
  cmdq = HINIC_CMDQ_SYNC;
  #line 578 
  while (cmdq == (unsigned int)HINIC_CMDQ_SYNC) {
    #line 579 
    return_db_area(func_to_io,func_to_io->cmdq_db_area[(unsigned int)cmdq]);
    #line 578 
    cmdq ++;
  }
  #line 581 
  iounmap(func_to_io->db_base);
  #line 582 
  hinic_wqs_free(& func_to_io->wqs);
  #line 583 
  hinic_ceqs_free(& func_to_io->ceqs);
  #line 584 
  return;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static void *ERR_PTR_0(long error)
{
  #line 203 
  return ldv_err_ptr(error);
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 210 
  return ldv_ptr_err(ptr);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_io.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 500 
  return ldv_devm_kzalloc(size,flags);
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1848 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 553  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 593  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 180 
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_pad(struct sk_buff *skb, int pad)
{
  #line 1141 
  return __skb_pad(skb,pad,(_Bool)1);
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read_0(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff *skb)
{
  #line 2566 
  return (unsigned int)((int)skb->transport_header - (int)skb->network_header);
}

#line 2569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u32 skb_inner_network_header_len(struct sk_buff *skb)
{
  #line 2571 
  return (unsigned int)((int)skb->inner_transport_header - (int)skb->inner_network_header);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_inner_network_offset(struct sk_buff *skb)
{
  #line 2581 
  ;
  #line 2581 
  return (int)(skb_inner_network_header(skb) - skb->data);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 172 
  return __u64_stats_fetch_begin(syncp);
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 191 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1057 
int ipv6_skip_exthdr(struct sk_buff *, int, u8 *, __be16 *);
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.h"
#line 139 
int hinic_get_sq_free_wqebbs(struct hinic_sq *sq);
#line 143 
#line 143 
void hinic_task_set_l2hdr(struct hinic_sq_task *task, u32 len);
#line 145 
#line 145 
void hinic_task_set_outter_l3(struct hinic_sq_task *task, enum hinic_l3_offload_type l3_type, u32 network_len);
#line 149 
#line 149 
void hinic_task_set_inner_l3(struct hinic_sq_task *task, enum hinic_l3_offload_type l3_type, u32 network_len);
#line 153 
#line 153 
void hinic_task_set_tunnel_l4(struct hinic_sq_task *task, enum hinic_l4_tunnel_type l4_type, u32 tunnel_len);
#line 157 
#line 157 
void hinic_set_cs_inner_l4(struct hinic_sq_task *task, u32 *queue_info, enum hinic_l4_offload_type l4_offload, u32 l4_len, u32 offset);
#line 162 
#line 162 
void hinic_set_tso_inner_l4(struct hinic_sq_task *task, u32 *queue_info, enum hinic_l4_offload_type l4_offload, u32 l4_len, u32 offset, u32 ip_ident, u32 mss);
#line 168 
#line 168 
void hinic_sq_prepare_wqe(struct hinic_sq *sq, u16 prod_idx, struct hinic_sq_wqe *sq_wqe, struct hinic_sge *sges, int nr_sges);
#line 172 
#line 172 
void hinic_sq_write_db(struct hinic_sq *sq, u16 prod_idx, unsigned int wqe_size, unsigned int cos);
#line 175 
#line 175 
struct hinic_sq_wqe *hinic_sq_get_wqe(struct hinic_sq *sq, unsigned int wqe_size, u16 *prod_idx);
#line 178 
#line 178 
void hinic_sq_return_wqe(struct hinic_sq *sq, unsigned int wqe_size);
#line 180 
#line 180 
void hinic_sq_write_wqe(struct hinic_sq *sq, u16 prod_idx, struct hinic_sq_wqe *sq_wqe, struct sk_buff *skb, unsigned int wqe_size);
#line 184 
#line 184 
struct hinic_sq_wqe *hinic_sq_read_wqe(struct hinic_sq *sq, struct sk_buff **skb, unsigned int wqe_size, u16 *cons_idx);
#line 188 
#line 188 
struct hinic_sq_wqe *hinic_sq_read_wqebb(struct hinic_sq *sq, struct sk_buff **skb, unsigned int *wqe_size, u16 *cons_idx);
#line 192 
#line 192 
void hinic_sq_put_wqe(struct hinic_sq *sq, unsigned int wqe_size);
#line 194 
#line 194 
void hinic_sq_get_sges(struct hinic_sq_wqe *sq_wqe, struct hinic_sge *sges, int nr_sges);
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 278 
int hinic_hwdev_msix_cnt_set(struct hinic_hwdev *hwdev, u16 msix_index);
#line 280 
#line 280 
int hinic_hwdev_msix_set(struct hinic_hwdev *hwdev, u16 msix_index, u8 pending_limit, u8 coalesc_timer, u8 lli_timer_cfg, u8 lli_credit_limit, u8 resend_timer);
#line 285 
#line 285 
int hinic_hwdev_hw_ci_addr_set(struct hinic_hwdev *hwdev, struct hinic_sq *sq, u8 pending_limit, u8 coalesc_timer);
#line 288 
#line 288 
void hinic_hwdev_set_msix_state(struct hinic_hwdev *hwdev, u16 msix_index, enum hinic_msix_state flag);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.h"
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
void hinic_txq_clean_stats(struct hinic_txq *txq);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.h"
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
void hinic_txq_get_stats(struct hinic_txq *txq, struct hinic_txq_stats *stats);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.h"
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
netdev_tx_t hinic_xmit_frame(struct sk_buff *skb, struct net_device *netdev);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.h"
#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
int hinic_init_txq(struct hinic_txq *txq, struct hinic_sq *sq, struct net_device *netdev);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.h"
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
void hinic_clean_txq(struct hinic_txq *txq);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
void hinic_txq_clean_stats(struct hinic_txq *txq)
{
  #line 78 
  struct hinic_txq_stats *txq_stats = & txq->txq_stats;
  #line 80 
  u64_stats_init(& txq_stats->syncp);
  #line 81 
  txq_stats->pkts = 0ULL;
  #line 82 
  txq_stats->bytes = 0ULL;
  #line 83 
  txq_stats->tx_busy = 0ULL;
  #line 84 
  txq_stats->tx_wake = 0ULL;
  #line 85 
  txq_stats->tx_dropped = 0ULL;
  #line 86 
  txq_stats->big_frags_pkts = 0ULL;
  #line 87 
  u64_stats_init(& txq_stats->syncp);
  #line 88 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
void hinic_txq_get_stats(struct hinic_txq *txq, struct hinic_txq_stats *stats)
{
  #line 98 
  unsigned int start;
  #line 97 
  struct hinic_txq_stats *txq_stats = & txq->txq_stats;
  #line 100 
  u64_stats_init(& stats->syncp);
  #line 101 
  while (1) {
    #line 102 
    start = u64_stats_fetch_begin(& txq_stats->syncp);
    #line 103 
    stats->pkts = txq_stats->pkts;
    #line 104 
    stats->bytes = txq_stats->bytes;
    #line 105 
    stats->tx_busy = txq_stats->tx_busy;
    #line 106 
    stats->tx_wake = txq_stats->tx_wake;
    #line 107 
    stats->tx_dropped = txq_stats->tx_dropped;
    #line 108 
    stats->big_frags_pkts = txq_stats->big_frags_pkts;
    #line 109 
    if (! ((int)u64_stats_fetch_retry(& txq_stats->syncp,start) != 0)) 
      #line 101 
      break;
  }
  #line 110 
  u64_stats_init(& stats->syncp);
  #line 111 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void txq_stats_init(struct hinic_txq *txq)
{
  #line 119 
  struct hinic_txq_stats *txq_stats = & txq->txq_stats;
  #line 121 
  u64_stats_init(& txq_stats->syncp);
  #line 122 
  hinic_txq_clean_stats(txq);
  #line 123 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static int tx_map_skb(struct hinic_dev *nic_dev, struct sk_buff *skb, struct hinic_sge *sges)
{
  #line 139 
  skb_frag_t *frag;
  #line 140 
  dma_addr_t dma_addr;
  #line 141 
  int i;
  #line 141 
  int j;
  #line 136 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 137 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 138 
  struct pci_dev *pdev = hwif->pdev;
  #line 143 
  ;
  #line 143 
  ;
  #line 143 
  dma_addr = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 145 
  if (dma_mapping_error(& pdev->dev,dma_addr) != 0) {
    #line 146 
    _dev_err(& pdev->dev,(char *)"Failed to map Tx skb data\n");
    #line 147 
    return -14;
  }
  #line 150 
  ;
  #line 150 
  ;
  #line 150 
  hinic_set_sge(sges,dma_addr,(int)skb_headlen(skb));
  #line 152 
  i = 0;
  #line 152 
  while (1) {
    #line 152 
    ;
    #line 152 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 152 
      break;
    {
      #line 153 
      frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 155 
      ;
      #line 155 
      ;
      #line 155 
      dma_addr = skb_frag_dma_map(& pdev->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 158 
      if (dma_mapping_error(& pdev->dev,dma_addr) != 0) {
        #line 159 
        _dev_err(& pdev->dev,(char *)"Failed to map Tx skb frag\n");
        #line 160 
        goto err_tx_map;
      }
      #line 163 
      ;
      #line 163 
      ;
      #line 163 
      hinic_set_sge(sges + ((unsigned long)i + (unsigned long)1U),dma_addr,(int)skb_frag_size(frag));
    }
    #line 152 
    i ++;
  }
  #line 166 
  return 0;
  #line 168 
  err_tx_map: 
              #line 168 
  ;
  #line 169 
  j = 0;
  #line 169 
  while (j < i) {
    #line 170 
    ;
    #line 170 
    ;
    #line 170 
    dma_unmap_page_attrs(& pdev->dev,hinic_sge_to_dma(sges + ((unsigned long)j + (unsigned long)1U)),(unsigned long)(sges + ((unsigned long)j + (unsigned long)1U))->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 169 
    j ++;
  }
  #line 173 
  ;
  #line 173 
  ;
  #line 173 
  dma_unmap_single_attrs(& pdev->dev,hinic_sge_to_dma(sges),(unsigned long)sges->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 175 
  return -14;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void tx_unmap_skb(struct hinic_dev *nic_dev, struct sk_buff *skb, struct hinic_sge *sges)
{
  #line 190 
  int i;
  #line 187 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 188 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 189 
  struct pci_dev *pdev = hwif->pdev;
  #line 192 
  i = 0;
  #line 192 
  while (1) {
    #line 192 
    ;
    #line 192 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 192 
      break;
    #line 193 
    ;
    #line 193 
    ;
    #line 193 
    dma_unmap_page_attrs(& pdev->dev,hinic_sge_to_dma(sges + ((unsigned long)i + (unsigned long)1U)),(unsigned long)(sges + ((unsigned long)i + (unsigned long)1U))->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 192 
    i ++;
  }
  #line 196 
  ;
  #line 196 
  ;
  #line 196 
  dma_unmap_single_attrs(& pdev->dev,hinic_sge_to_dma(sges),(unsigned long)sges->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 197 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void get_inner_l3_l4_type(struct sk_buff *skb, union hinic_l3 *ip, union hinic_l4 *l4, enum hinic_offload_type offload_type, enum hinic_l3_offload_type *l3_type, u8 *l4_proto)
{
  #line 206 
  u8 *exthdr;
  #line 208 
  if ((unsigned int)(ip->v4)->version == 4U) {
    #line 209 
    if (offload_type == (unsigned int)TX_OFFLOAD_CSUM) 
                                                       #line 209 
                                                       *l3_type = IPV4_PKT_NO_CHKSUM_OFFLOAD; else 
                                                                    #line 209 
                                                                    *l3_type = IPV4_PKT_WITH_CHKSUM_OFFLOAD;
    #line 212 
    *l4_proto = (ip->v4)->protocol;
  }
  else 
    #line 213 
    if ((unsigned int)(ip->v4)->version == 6U) {
      #line 214 
      *l3_type = IPV6_PKT;
      #line 215 
      exthdr = ip->hdr + 40UL;
      #line 216 
      *l4_proto = (ip->v6)->nexthdr;
      #line 217 
      if (l4->hdr != exthdr) {
        #line 219 
        __be16 frag_off;
        #line 218 
        int start = (int)(exthdr - skb->data);
        #line 221 
        ipv6_skip_exthdr(skb,start,l4_proto,& frag_off);
      }
    }
    else {
      #line 224 
      *l3_type = L3TYPE_UNKNOWN;
      #line 225 
      *l4_proto = (unsigned char)0U;
    }
  #line 227 
  return;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void get_inner_l4_info(struct sk_buff *skb, union hinic_l4 *l4, enum hinic_offload_type offload_type, u8 l4_proto, enum hinic_l4_offload_type *l4_offload, u32 *l4_len, u32 *offset)
{
  #line 234 
  *l4_offload = OFFLOAD_DISABLE;
  #line 235 
  *offset = 0U;
  #line 236 
  *l4_len = 0U;
  #line 238 
  switch ((int)l4_proto) {
    #line 239 
    case 6: 
            #line 239 
    ;
    #line 240 
    *l4_offload = TCP_OFFLOAD_ENABLE;
    #line 242 
    *l4_len = (unsigned int)((int)(l4->tcp)->doff * 4);
    #line 243 
    *offset = *l4_len + (unsigned int)(l4->hdr - skb->data);
    #line 244 
    break;
    #line 246 
    case 17: 
             #line 246 
    ;
    #line 247 
    *l4_offload = UDP_OFFLOAD_ENABLE;
    #line 248 
    *l4_len = 8U;
    #line 249 
    *offset = (unsigned int)(l4->hdr - skb->data);
    #line 250 
    break;
    #line 252 
    case 132: 
              #line 252 
    ;
    #line 254 
    if (offload_type != (unsigned int)TX_OFFLOAD_CSUM) 
                                                       #line 255 
                                                       break;
    #line 257 
    *l4_offload = SCTP_OFFLOAD_ENABLE;
    #line 258 
    *l4_len = 12U;
    #line 259 
    *offset = (unsigned int)(l4->hdr - skb->data);
    #line 260 
    break;
    #line 262 
    default: 
             #line 262 
    ;
    #line 263 
    break;
  }
  #line 265 
  return;
}

#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static __sum16 csum_magic(union hinic_l3 *ip, unsigned short proto)
{
  #line 270 
  int tmp_1;
  #line 270 
  if ((unsigned int)(ip->v4)->version == 4U) {
    #line 270 
    tmp_1 = (int)csum_tcpudp_magic((ip->v4)->saddr,(ip->v4)->daddr,0U,
                        (unsigned char)((int)((unsigned char)proto)),0U);
  }
  else {
    #line 270 
    tmp_1 = (int)csum_ipv6_magic(& (ip->v6)->saddr,& (ip->v6)->daddr,0U,
                        (unsigned char)((int)((unsigned char)proto)),0U);
  }
  #line 270 
  return (unsigned short)tmp_1;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static int offload_tso(struct hinic_sq_task *task, u32 *queue_info, struct sk_buff *skb)
{
  #line 277 
  u32 offset;
  #line 277 
  u32 l4_len;
  #line 277 
  u32 ip_identify;
  #line 277 
  u32 network_hdr_len;
  #line 278 
  enum hinic_l3_offload_type l3_offload;
  #line 279 
  enum hinic_l4_offload_type l4_offload;
  #line 280 
  union hinic_l3 ip;
  #line 281 
  union hinic_l4 l4;
  #line 282 
  u8 l4_proto;
  #line 284 
  if (! skb_is_gso(skb)) 
                         #line 285 
                         return 0;
  #line 287 
  if (skb_cow_head(skb,0U) < 0) 
                                #line 288 
                                return -93;
  #line 290 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 293 
    u32 l4_tunnel_len;
    #line 291 
    u32 gso_type = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type;
    #line 292 
    u32 tunnel_type = 0U;
    #line 295 
    ip.hdr = skb_network_header(skb);
    #line 296 
    l4.hdr = skb_transport_header(skb);
    #line 297 
    network_hdr_len = skb_inner_network_header_len(skb);
    #line 299 
    if ((unsigned int)(ip.v4)->version == 4U) {
      #line 300 
      (ip.v4)->tot_len = (unsigned short)0U;
      #line 301 
      l3_offload = IPV4_PKT_WITH_CHKSUM_OFFLOAD;
    }
    else 
      #line 302 
      if ((unsigned int)(ip.v4)->version == 6U) 
                                                #line 303 
                                                l3_offload = IPV6_PKT; else 
                                                                    #line 305 
                                                                    l3_offload = L3TYPE_UNKNOWN;
    #line 308 
    ;
    #line 308 
    ;
    #line 308 
    hinic_task_set_outter_l3(task,l3_offload,skb_network_header_len(skb));
    #line 311 
    if ((gso_type & 2048U) != 0U) {
      #line 312 
      (l4.udp)->check = (unsigned short)(~ ((int)csum_magic(& ip,(unsigned short)17)));
      #line 313 
      tunnel_type = 2U;
    }
    else 
      #line 314 
      if ((gso_type & 1024U) != 0U) 
                                    #line 315 
                                    tunnel_type = 1U;
    #line 318 
    l4_tunnel_len = (unsigned int)(skb_inner_network_offset(skb) - skb_transport_offset(skb));
    #line 320 
    hinic_task_set_tunnel_l4(task,(enum hinic_l4_tunnel_type)tunnel_type,l4_tunnel_len);
    #line 322 
    ip.hdr = skb_inner_network_header(skb);
    #line 323 
    l4.hdr = skb_inner_transport_header(skb);
  }
  else {
    #line 325 
    ip.hdr = skb_network_header(skb);
    #line 326 
    l4.hdr = skb_transport_header(skb);
    #line 327 
    network_hdr_len = skb_network_header_len(skb);
  }
  #line 331 
  if ((unsigned int)(ip.v4)->version == 4U) 
                                            #line 332 
                                            (ip.v4)->tot_len = (unsigned short)0U; else 
                                                                    #line 334 
                                                                    (ip.v6)->payload_len = (unsigned short)0U;
  #line 336 
  get_inner_l3_l4_type(skb,& ip,& l4,(enum hinic_offload_type)TX_OFFLOAD_TSO,& l3_offload,& l4_proto);
  #line 339 
  hinic_task_set_inner_l3(task,l3_offload,network_hdr_len);
  #line 341 
  ip_identify = 0U;
  #line 342 
  if ((unsigned int)l4_proto == 6U) {
    #line 343 
    (l4.tcp)->check = (unsigned short)(~ ((int)csum_magic(& ip,(unsigned short)6)));
  }
  #line 345 
  get_inner_l4_info(skb,& l4,(enum hinic_offload_type)TX_OFFLOAD_TSO,(unsigned char)((int)l4_proto),& l4_offload,& l4_len,& offset);
  #line 348 
  ;
  #line 348 
  ;
  #line 348 
  ;
  #line 348 
  ;
  #line 348 
  ;
  #line 348 
  ;
  #line 348 
  hinic_set_tso_inner_l4(task,queue_info,l4_offload,l4_len,offset,ip_identify,(unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size);
  #line 351 
  return 1;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static int offload_csum(struct hinic_sq_task *task, u32 *queue_info, struct sk_buff *skb)
{
  #line 357 
  enum hinic_l4_offload_type l4_offload;
  #line 358 
  u32 offset;
  #line 358 
  u32 l4_len;
  #line 358 
  u32 network_hdr_len;
  #line 359 
  enum hinic_l3_offload_type l3_type;
  #line 360 
  union hinic_l3 ip;
  #line 361 
  union hinic_l4 l4;
  #line 362 
  u8 l4_proto;
  #line 364 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 365 
                                          return 0;
  #line 367 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 368 
    u32 l4_tunnel_len;
    #line 370 
    ip.hdr = skb_network_header(skb);
    #line 372 
    if ((unsigned int)(ip.v4)->version == 4U) 
                                              #line 373 
                                              l3_type = IPV4_PKT_NO_CHKSUM_OFFLOAD;
    else 
      #line 374 
      if ((unsigned int)(ip.v4)->version == 6U) 
                                                #line 375 
                                                l3_type = IPV6_PKT; else 
                                                                    #line 377 
                                                                    l3_type = L3TYPE_UNKNOWN;
    #line 379 
    ;
    #line 379 
    ;
    #line 379 
    hinic_task_set_outter_l3(task,l3_type,skb_network_header_len(skb));
    #line 382 
    l4_tunnel_len = (unsigned int)(skb_inner_network_offset(skb) - skb_transport_offset(skb));
    #line 385 
    hinic_task_set_tunnel_l4(task,(enum hinic_l4_tunnel_type)TUNNEL_UDP_NO_CSUM,l4_tunnel_len);
    #line 388 
    ip.hdr = skb_inner_network_header(skb);
    #line 389 
    l4.hdr = skb_inner_transport_header(skb);
    #line 390 
    network_hdr_len = skb_inner_network_header_len(skb);
  }
  else {
    #line 392 
    ip.hdr = skb_network_header(skb);
    #line 393 
    l4.hdr = skb_transport_header(skb);
    #line 394 
    network_hdr_len = skb_network_header_len(skb);
  }
  #line 397 
  get_inner_l3_l4_type(skb,& ip,& l4,(enum hinic_offload_type)TX_OFFLOAD_CSUM,& l3_type,& l4_proto);
  #line 400 
  hinic_task_set_inner_l3(task,l3_type,network_hdr_len);
  #line 402 
  get_inner_l4_info(skb,& l4,(enum hinic_offload_type)TX_OFFLOAD_CSUM,(unsigned char)((int)l4_proto),& l4_offload,& l4_len,& offset);
  #line 405 
  hinic_set_cs_inner_l4(task,queue_info,l4_offload,l4_len,offset);
  #line 407 
  return 1;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void offload_vlan(struct hinic_sq_task *task, u32 *queue_info, u16 vlan_tag, u16 vlan_pri)
{
  #line 413 
  task->pkt_info0 = (task->pkt_info0 | ((unsigned int)vlan_tag << 16)) | 4096U;
  #line 416 
  *queue_info |= (unsigned int)vlan_pri << 29;
  #line 417 
  return;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static int hinic_tx_offload(struct sk_buff *skb, struct hinic_sq_task *task, u32 *queue_info)
{
  #line 423 
  u16 vlan_tag;
  #line 424 
  int enabled;
  #line 422 
  enum hinic_offload_type offload = (enum hinic_offload_type)0;
  #line 426 
  enabled = offload_tso(task,queue_info,skb);
  #line 427 
  if (enabled > 0) 
                   #line 428 
                   offload = (enum hinic_offload_type)((unsigned int)offload | 1U);
  else 
    #line 429 
    if (enabled == 0) {
      #line 430 
      enabled = offload_csum(task,queue_info,skb);
      #line 431 
      if (enabled != 0) 
                        #line 432 
                        offload = (enum hinic_offload_type)((unsigned int)offload | 2U);
    }
    else 
         #line 434 
         return -93;
  #line 437 
  if ((long)((unsigned int)skb->vlan_present != 0U) != 0L) {
    #line 438 
    vlan_tag = skb->vlan_tci;
    #line 439 
    offload_vlan(task,queue_info,(unsigned short)((int)vlan_tag),(unsigned short)((int)vlan_tag >> 13));
    #line 441 
    offload = (enum hinic_offload_type)((unsigned int)offload | 4U);
  }
  #line 444 
  if (offload != (unsigned int)0) {
    #line 445 
    ;
    #line 445 
    hinic_task_set_l2hdr(task,(unsigned int)skb_network_offset(skb));
  }
  #line 448 
  if (((*queue_info >> 2) & 255U) > 221U) 
                                          #line 450 
                                          return -93;
  #line 454 
  if (((*queue_info >> 13) & 16383U) <= 79U) {
    #line 455 
    *queue_info &= 4160757759U;
    #line 456 
    *queue_info |= 655360U;
  }
  #line 459 
  return 0;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
netdev_tx_t hinic_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 474 
  void *__mptr;
  #line 465 
  u16 prod_idx;
  #line 466 
  struct netdev_queue *netdev_txq;
  #line 467 
  int nr_sges;
  #line 468 
  struct hinic_sq_wqe *sq_wqe;
  #line 469 
  unsigned int wqe_size;
  #line 470 
  struct hinic_txq *txq;
  #line 471 
  struct hinic_qp *qp;
  #line 464 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 465 
  u16 q_id = skb->queue_mapping;
  #line 467 
  int err = 0;
  #line 473 
  txq = nic_dev->txqs + (unsigned long)q_id;
  #line 474 
  __mptr = (void *)txq->sq;
  #line 474 
  qp = ((struct hinic_qp *)__mptr);
  #line 476 
  if (skb->len <= 16U) {
    #line 477 
    if (skb_pad(skb,(int)(17U - skb->len)) != 0) {
      #line 478 
      netdev_err(netdev,(char *)"Failed to pad skb\n");
      #line 479 
      goto update_error_stats;
    }
    #line 482 
    skb->len = 17U;
  }
  #line 485 
  nr_sges = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
  #line 486 
  if (nr_sges > 17) {
    #line 487 
    u64_stats_init(& txq->txq_stats.syncp);
    #line 488 
    (txq->txq_stats.big_frags_pkts) ++;
    #line 489 
    u64_stats_init(& txq->txq_stats.syncp);
  }
  #line 492 
  if (txq->max_sges < nr_sges) {
    #line 493 
    netdev_err(netdev,(char *)"Too many Tx sges\n");
    #line 494 
    goto skb_error;
  }
  #line 497 
  err = tx_map_skb(nic_dev,skb,txq->sges);
  #line 498 
  if (err != 0) 
                #line 499 
                goto skb_error;
  #line 501 
  wqe_size = (unsigned int)((unsigned long)nr_sges + 2UL) * 16U;
  #line 503 
  sq_wqe = hinic_sq_get_wqe(txq->sq,wqe_size,& prod_idx);
  #line 504 
  if (sq_wqe == (struct hinic_sq_wqe *)0) {
    #line 505 
    netif_stop_subqueue(netdev,(unsigned short)((int)qp->q_id));
    #line 510 
    sq_wqe = hinic_sq_get_wqe(txq->sq,wqe_size,& prod_idx);
    #line 511 
    if (sq_wqe != (struct hinic_sq_wqe *)0) {
      #line 512 
      netif_wake_subqueue(nic_dev->netdev,(unsigned short)((int)qp->q_id));
      #line 513 
      goto process_sq_wqe;
    }
    #line 516 
    tx_unmap_skb(nic_dev,skb,txq->sges);
    #line 518 
    u64_stats_init(& txq->txq_stats.syncp);
    #line 519 
    (txq->txq_stats.tx_busy) ++;
    #line 520 
    u64_stats_init(& txq->txq_stats.syncp);
    #line 521 
    err = 16;
    #line 522 
    wqe_size = 0U;
    #line 523 
    goto flush_skbs;
  }
  #line 526 
  process_sq_wqe: 
                  #line 526 
  ;
  #line 527 
  hinic_sq_prepare_wqe(txq->sq,(unsigned short)((int)prod_idx),sq_wqe,txq->sges,nr_sges);
  #line 529 
  err = hinic_tx_offload(skb,& sq_wqe->task,& sq_wqe->ctrl.queue_info);
  #line 530 
  if (err != 0) 
                #line 531 
                goto offload_error;
  #line 533 
  hinic_sq_write_wqe(txq->sq,(unsigned short)((int)prod_idx),sq_wqe,skb,wqe_size);
  #line 535 
  flush_skbs: 
              #line 535 
  ;
  #line 536 
  netdev_txq = netdev_get_tx_queue(netdev,(unsigned int)q_id);
  #line 537 
  if (netdev_xmit_more()) {
    #line 537 
    if ((int)netif_xmit_stopped(netdev_txq) != 0) 
                                                  #line 538 
                                                  hinic_sq_write_db(txq->sq,(unsigned short)((int)prod_idx),wqe_size,0U);
  }
  else 
       #line 538 
       hinic_sq_write_db(txq->sq,(unsigned short)((int)prod_idx),wqe_size,0U);
  #line 540 
  return (enum netdev_tx)err;
  #line 542 
  offload_error: 
                 #line 542 
  ;
  #line 543 
  hinic_sq_return_wqe(txq->sq,wqe_size);
  #line 544 
  tx_unmap_skb(nic_dev,skb,txq->sges);
  #line 546 
  skb_error: 
             #line 546 
  ;
  #line 547 
  dev_kfree_skb_any(skb);
  #line 549 
  update_error_stats: 
                      #line 549 
  ;
  #line 550 
  u64_stats_init(& txq->txq_stats.syncp);
  #line 551 
  (txq->txq_stats.tx_dropped) ++;
  #line 552 
  u64_stats_init(& txq->txq_stats.syncp);
  #line 554 
  return NETDEV_TX_OK;
}

#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void tx_free_skb(struct hinic_dev *nic_dev, struct sk_buff *skb, struct hinic_sge *sges)
{
  #line 566 
  tx_unmap_skb(nic_dev,skb,sges);
  #line 568 
  dev_kfree_skb_any(skb);
  #line 569 
  return;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void free_all_tx_skbs(struct hinic_txq *txq)
{
  #line 579 
  struct hinic_sq_wqe *sq_wqe;
  #line 580 
  unsigned int wqe_size;
  #line 581 
  struct sk_buff *skb;
  #line 582 
  int nr_sges;
  #line 583 
  u16 ci;
  #line 577 
  struct hinic_dev *nic_dev = netdev_priv(txq->netdev);
  #line 578 
  struct hinic_sq *sq = txq->sq;
  #line 585 
  while (1) {
    #line 585 
    sq_wqe = hinic_sq_read_wqebb(sq,& skb,& wqe_size,& ci);
    #line 585 
    if (! (sq_wqe != (struct hinic_sq_wqe *)0)) 
                                                #line 585 
                                                break;
    {
      #line 586 
      sq_wqe = hinic_sq_read_wqe(sq,& skb,wqe_size,& ci);
      #line 587 
      if (sq_wqe == (struct hinic_sq_wqe *)0) 
                                              #line 588 
                                              break;
      #line 590 
      nr_sges = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
      #line 592 
      hinic_sq_get_sges(sq_wqe,txq->free_sges,nr_sges);
      #line 594 
      hinic_sq_put_wqe(sq,wqe_size);
      #line 596 
      tx_free_skb(nic_dev,skb,txq->free_sges);
    }
  }
  #line 598 
  return;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static int free_tx_poll(struct napi_struct *napi, int budget)
{
  #line 609 
  void *__mptr;
  #line 610 
  void *__mptr_0;
  #line 612 
  struct netdev_queue *netdev_txq;
  #line 615 
  struct hinic_sq_wqe *sq_wqe;
  #line 616 
  unsigned int wqe_size;
  #line 617 
  int nr_sges;
  #line 618 
  struct sk_buff *skb;
  #line 620 
  u16 hw_ci;
  #line 620 
  u16 sw_ci;
  #line 609 
  __mptr = (void *)napi;
  #line 609 
  struct hinic_txq *txq = ((struct hinic_txq *)(__mptr + 18446744073709551520U));
  #line 610 
  __mptr_0 = (void *)txq->sq;
  #line 610 
  struct hinic_qp *qp = ((struct hinic_qp *)__mptr_0);
  #line 611 
  struct hinic_dev *nic_dev = netdev_priv(txq->netdev);
  #line 613 
  struct hinic_sq *sq = txq->sq;
  #line 614 
  struct hinic_wq *wq = sq->wq;
  #line 617 
  int pkts = 0;
  #line 619 
  u64 tx_bytes = 0ULL;
  #line 622 
  while (1) {
    {
      #line 623 
      hw_ci = (unsigned short)((int)__builtin_bswap16((unsigned short)((int)*((u16 *)sq->hw_ci_addr))) & (int)wq->mask);
      #line 626 
      sq_wqe = hinic_sq_read_wqebb(sq,& skb,& wqe_size,& sw_ci);
      #line 627 
      if (sq_wqe == (struct hinic_sq_wqe *)0 || (unsigned int)((((int)hw_ci - (int)sw_ci) & (int)wq->mask) * (int)wq->wqebb_size) < wqe_size) 
        #line 629 
        break;
      #line 634 
      if ((unsigned int)wq->wqebb_size < wqe_size) {
        #line 635 
        sq_wqe = hinic_sq_read_wqe(sq,& skb,wqe_size,& sw_ci);
        #line 636 
        if ((long)(sq_wqe == (struct hinic_sq_wqe *)0) != 0L) 
                                                              #line 637 
                                                              break;
      }
      #line 640 
      tx_bytes = (unsigned long long)skb->len + tx_bytes;
      #line 641 
      pkts ++;
      #line 643 
      nr_sges = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
      #line 645 
      hinic_sq_get_sges(sq_wqe,txq->free_sges,nr_sges);
      #line 647 
      hinic_sq_put_wqe(sq,wqe_size);
      #line 649 
      tx_free_skb(nic_dev,skb,txq->free_sges);
    }
    #line 650 
    if (! (pkts < budget)) 
                           #line 622 
                           break;
  }
  #line 652 
  if ((int)__netif_subqueue_stopped(nic_dev->netdev,
                                  (unsigned short)((int)qp->q_id)) != 0) {
    #line 653 
    ;
    #line 653 
    if ((unsigned long)hinic_get_sq_free_wqebbs(sq) >= (((unsigned long)(sq->wq)->wqebb_size + 47UL) & - ((unsigned long)(sq->wq)->wqebb_size)) / (unsigned long)(sq->wq)->wqebb_size) {
      #line 656 
      int pscr_ret__;
      #line 654 
      netdev_txq = netdev_get_tx_queue(txq->netdev,(unsigned int)qp->q_id);
      #line 656 
      __this_cpu_preempt_check((char *)"read");
      {
        #line 656 
        void *__vpp_verify = (void *)0;
        #line 656 
        void *tmp_4 = __vpp_verify;
      }
      #line 656 
      switch (4UL) {
        #line 656 
        int pfo_ret__;
        #line 656 
        int pfo_ret___0;
        #line 656 
        int pfo_ret___1;
        #line 656 
        int pfo_ret___2;
        #line 656 
        case (unsigned long)1: 
                               #line 656 
        ;
        #line 656 
        switch (4UL) {
          #line 656 
          case (unsigned long)1: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)2: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)4: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)8: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          default: 
                   #line 656 
          ;
          #line 656 
          __bad_percpu_size();
        }
        #line 656 
        pscr_ret__ = pfo_ret__;
        #line 656 
        break;
        #line 656 
        case (unsigned long)2: 
                               #line 656 
        ;
        #line 656 
        switch (4UL) {
          #line 656 
          case (unsigned long)1: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)2: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)4: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)8: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          default: 
                   #line 656 
          ;
          #line 656 
          __bad_percpu_size();
        }
        #line 656 
        pscr_ret__ = pfo_ret___0;
        #line 656 
        break;
        #line 656 
        case (unsigned long)4: 
                               #line 656 
        ;
        #line 656 
        switch (4UL) {
          #line 656 
          case (unsigned long)1: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)2: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)4: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)8: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          default: 
                   #line 656 
          ;
          #line 656 
          __bad_percpu_size();
        }
        #line 656 
        pscr_ret__ = pfo_ret___1;
        #line 656 
        break;
        #line 656 
        case (unsigned long)8: 
                               #line 656 
        ;
        #line 656 
        switch (4UL) {
          #line 656 
          case (unsigned long)1: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)2: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)4: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          case (unsigned long)8: 
                                 #line 656 
          ;
          #line 657 
          ldv_inline_asm();
          #line 656 
          break;
          #line 656 
          default: 
                   #line 656 
          ;
          #line 656 
          __bad_percpu_size();
        }
        #line 656 
        pscr_ret__ = pfo_ret___2;
        #line 656 
        break;
        #line 656 
        default: 
                 #line 656 
        ;
        #line 656 
        __bad_size_call_parameter();
        #line 656 
        break;
      }
      #line 656 
      ;
      #line 656 
      __netif_tx_lock(netdev_txq,pscr_ret__);
      #line 658 
      netif_wake_subqueue(nic_dev->netdev,(unsigned short)((int)qp->q_id));
      #line 660 
      __netif_tx_unlock(netdev_txq);
      #line 662 
      u64_stats_init(& txq->txq_stats.syncp);
      #line 663 
      (txq->txq_stats.tx_wake) ++;
      #line 664 
      u64_stats_init(& txq->txq_stats.syncp);
    }
  }
  #line 667 
  u64_stats_init(& txq->txq_stats.syncp);
  #line 668 
  txq->txq_stats.bytes += tx_bytes;
  #line 669 
  txq->txq_stats.pkts += (unsigned long long)pkts;
  #line 670 
  u64_stats_init(& txq->txq_stats.syncp);
  #line 672 
  if (pkts < budget) {
    #line 673 
    napi_complete(napi);
    #line 674 
    hinic_hwdev_set_msix_state(nic_dev->hwdev,(unsigned short)((int)sq->msix_entry),(enum hinic_msix_state)HINIC_MSIX_ENABLE);
    #line 677 
    return pkts;
  }
  #line 680 
  return budget;
}

#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void tx_napi_add(struct hinic_txq *txq, int weight)
{
  #line 685 
  netif_napi_add(txq->netdev,& txq->napi,& free_tx_poll,weight);
  #line 686 
  napi_enable(& txq->napi);
  #line 687 
  return;
}

#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void tx_napi_del(struct hinic_txq *txq)
{
  #line 691 
  napi_disable(& txq->napi);
  #line 692 
  netif_napi_del(& txq->napi);
  #line 693 
  return;
}

#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static irqreturn_t tx_irq(int irq, void *data)
{
  #line 698 
  struct hinic_dev *nic_dev;
  #line 697 
  struct hinic_txq *txq = (struct hinic_txq *)data;
  #line 700 
  nic_dev = (struct hinic_dev *)netdev_priv(txq->netdev);
  #line 703 
  hinic_hwdev_set_msix_state(nic_dev->hwdev,(unsigned short)((int)(txq->sq)->msix_entry),(enum hinic_msix_state)HINIC_MSIX_DISABLE);
  #line 707 
  hinic_hwdev_msix_cnt_set(nic_dev->hwdev,(unsigned short)((int)(txq->sq)->msix_entry));
  #line 709 
  napi_schedule(& txq->napi);
  #line 710 
  return IRQ_HANDLED;
}

#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static int tx_request_irq(struct hinic_txq *txq)
{
  #line 720 
  int err;
  #line 715 
  struct hinic_dev *nic_dev = netdev_priv(txq->netdev);
  #line 716 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 717 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 718 
  struct pci_dev *pdev = hwif->pdev;
  #line 719 
  struct hinic_sq *sq = txq->sq;
  #line 722 
  tx_napi_add(txq,(int)nic_dev->tx_weight);
  #line 724 
  hinic_hwdev_msix_set(nic_dev->hwdev,(unsigned short)((int)sq->msix_entry),(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 729 
  err = cif_request_irq(sq->irq,& tx_irq,0UL,txq->irq_name,(void *)txq);
  #line 730 
  if (err != 0) {
    #line 731 
    _dev_err(& pdev->dev,(char *)"Failed to request Tx irq\n");
    #line 732 
    tx_napi_del(txq);
    #line 733 
    return err;
  }
  #line 736 
  return 0;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
static void tx_free_irq(struct hinic_txq *txq)
{
  #line 741 
  struct hinic_sq *sq = txq->sq;
  #line 743 
  cif_free_irq(sq->irq,(void *)txq);
  #line 744 
  tx_napi_del(txq);
  #line 745 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
int hinic_init_txq(struct hinic_txq *txq, struct hinic_sq *sq, struct net_device *netdev)
{
  #line 758 
  void *__mptr;
  #line 761 
  int err;
  #line 761 
  int irqname_len;
  #line 762 
  size_t sges_size;
  #line 758 
  __mptr = (void *)sq;
  #line 758 
  struct hinic_qp *qp = ((struct hinic_qp *)__mptr);
  #line 759 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 760 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 764 
  txq->netdev = netdev;
  #line 765 
  txq->sq = sq;
  #line 767 
  txq_stats_init(txq);
  #line 769 
  txq->max_sges = 17;
  #line 771 
  sges_size = (unsigned long)txq->max_sges * 12UL;
  #line 772 
  txq->sges = (struct hinic_sge *)cif_devm_kzalloc_1(& netdev->dev,sges_size,3264U);
  #line 773 
  if (txq->sges == (struct hinic_sge *)0) 
                                          #line 774 
                                          return -12;
  #line 776 
  sges_size = (unsigned long)txq->max_sges * 12UL;
  #line 777 
  txq->free_sges = (struct hinic_sge *)cif_devm_kzalloc_1(& netdev->dev,sges_size,3264U);
  #line 778 
  if (txq->free_sges == (struct hinic_sge *)0) {
    #line 779 
    err = -12;
    #line 780 
    goto err_alloc_free_sges;
  }
  #line 783 
  irqname_len = snprintf((char *)0,0UL,(char *)"hinic_txq%d",(int)qp->q_id) + 1;
  #line 784 
  txq->irq_name = (char *)cif_devm_kzalloc_1(& netdev->dev,(unsigned long)irqname_len,3264U);
  #line 785 
  if (txq->irq_name == (char *)0) {
    #line 786 
    err = -12;
    #line 787 
    goto err_alloc_irqname;
  }
  #line 790 
  sprintf(txq->irq_name,(char *)"hinic_txq%d",(int)qp->q_id);
  #line 792 
  err = hinic_hwdev_hw_ci_addr_set(hwdev,sq,(unsigned char)0,(unsigned char)0);
  #line 794 
  if (err != 0) 
                #line 795 
                goto err_hw_ci;
  #line 797 
  err = tx_request_irq(txq);
  #line 798 
  if (err != 0) {
    #line 799 
    netdev_err(netdev,(char *)"Failed to request Tx irq\n");
    #line 800 
    goto err_req_tx_irq;
  }
  #line 803 
  return 0;
  #line 805 
  err_req_tx_irq: 
                  #line 805 
  ;
  #line 806 
  err_hw_ci: 
             #line 806 
  ;
  #line 807 
  devm_kfree(& netdev->dev,(void *)txq->irq_name);
  #line 809 
  err_alloc_irqname: 
                     #line 809 
  ;
  #line 810 
  devm_kfree(& netdev->dev,(void *)txq->free_sges);
  #line 812 
  err_alloc_free_sges: 
                       #line 812 
  ;
  #line 813 
  devm_kfree(& netdev->dev,(void *)txq->sges);
  #line 814 
  return err;
}

#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_tx.c"
void hinic_clean_txq(struct hinic_txq *txq)
{
  #line 823 
  struct net_device *netdev = txq->netdev;
  #line 825 
  tx_free_irq(txq);
  #line 827 
  free_all_tx_skbs(txq);
  #line 829 
  devm_kfree(& netdev->dev,(void *)txq->irq_name);
  #line 830 
  devm_kfree(& netdev->dev,(void *)txq->free_sges);
  #line 831 
  devm_kfree(& netdev->dev,(void *)txq->sges);
  #line 832 
  return;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
#line 95 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 100 
#line 100 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
enum irqreturn emg_wrapper_tx_irq(int arg0, void *arg1)
{
  #line 108 
  return tx_irq(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 130 
  ldv_set_bit(nr,addr);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 137 
  ldv_clear_bit(nr,addr);
  #line 138 
  return;
}

#line 553  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 556 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 558 
  spin_lock(lock);
  #line 559 
  return;
}

#line 593  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 596 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 598 
  spin_unlock(lock);
  #line 599 
  return;
}

#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 817 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 825 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_tx.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags)
{
  #line 832 
  return ldv_devm_kzalloc(size,flags);
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 496 
#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 224 
void schedule(void);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 517  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 532  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 540  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 509  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 683 
void tasklet_kill(struct tasklet_struct *);
#line 687 
#line 524  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
__inline static u32 hinic_hwif_read_reg(struct hinic_hwif *hwif, u32 reg)
{
  #line 237 
  return __builtin_bswap32(readl(hwif->cfg_regs_bar + (unsigned long)reg));
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
__inline static void hinic_hwif_write_reg(struct hinic_hwif *hwif, u32 reg, u32 val)
{
  #line 243 
  ;
  #line 243 
  writel(__builtin_bswap32(val),hwif->cfg_regs_bar + (unsigned long)reg);
  #line 244 
  return;
}

#line 246 
#line 246 
int hinic_msix_attr_set(struct hinic_hwif *hwif, u16 msix_index, u8 pending_limit, u8 coalesc_timer, u8 lli_timer, u8 lli_credit_limit, u8 resend_timer);
#line 259 
#line 259 
int hinic_msix_attr_cnt_clear(struct hinic_hwif *hwif, u16 msix_index);
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_aeq_register_hw_cb(struct hinic_aeqs *aeqs, enum hinic_aeq_type event, void *handle, void (*hwe_handler)(void *, void *, u8 ));
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_aeq_unregister_hw_cb(struct hinic_aeqs *aeqs, enum hinic_aeq_type event);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_ceq_register_cb(struct hinic_ceqs *ceqs, enum hinic_ceq_type event, void *handle, void (*handler)(void *, u32 ));
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_ceq_unregister_cb(struct hinic_ceqs *ceqs, enum hinic_ceq_type event);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
int hinic_aeqs_init(struct hinic_aeqs *aeqs, struct hinic_hwif *hwif, int num_aeqs, u32 q_len, u32 page_size, struct msix_entry *msix_entries);
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.h"
#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_aeqs_free(struct hinic_aeqs *aeqs);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_aeq_register_hw_cb(struct hinic_aeqs *aeqs, enum hinic_aeq_type event, void *handle, void (*hwe_handler)(void *, void *, u8 ))
{
  #line 115 
  struct hinic_hw_event_cb *hwe_cb = & aeqs->hwe_cb[(unsigned int)event];
  #line 117 
  hwe_cb->hwe_handler = hwe_handler;
  #line 118 
  hwe_cb->handle = handle;
  #line 119 
  hwe_cb->hwe_state = 1UL;
  #line 120 
  return;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_aeq_unregister_hw_cb(struct hinic_aeqs *aeqs, enum hinic_aeq_type event)
{
  #line 130 
  struct hinic_hw_event_cb *hwe_cb = & aeqs->hwe_cb[(unsigned int)event];
  #line 132 
  hwe_cb->hwe_state &= 18446744073709551614UL;
  #line 134 
  while ((hwe_cb->hwe_state & 2UL) != 0UL) 
                                           #line 135 
                                           schedule();
  #line 137 
  hwe_cb->hwe_handler = (void (*)(void *, void *, u8 ))0;
  #line 138 
  return;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_ceq_register_cb(struct hinic_ceqs *ceqs, enum hinic_ceq_type event, void *handle, void (*handler)(void *, u32 ))
{
  #line 151 
  struct hinic_ceq_cb *ceq_cb = & ceqs->ceq_cb[(unsigned int)event];
  #line 153 
  ceq_cb->handler = handler;
  #line 154 
  ceq_cb->handle = handle;
  #line 155 
  ceq_cb->ceqe_state = HINIC_EQE_ENABLED;
  #line 156 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_ceq_unregister_cb(struct hinic_ceqs *ceqs, enum hinic_ceq_type event)
{
  #line 166 
  struct hinic_ceq_cb *ceq_cb = & ceqs->ceq_cb[(unsigned int)event];
  #line 168 
  ceq_cb->ceqe_state = (enum hinic_eqe_state)((unsigned int)ceq_cb->ceqe_state & 4294967294U);
  #line 170 
  while (((unsigned int)ceq_cb->ceqe_state & 2U) != 0U) 
                                                        #line 171 
                                                        schedule();
  #line 173 
  ceq_cb->handler = (void (*)(void *, u32 ))0;
  #line 174 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static u8 eq_cons_idx_checksum_set(u32 val)
{
  #line 179 
  int idx;
  #line 178 
  u8 checksum = (unsigned char)0U;
  #line 181 
  idx = 0;
  #line 181 
  while (idx <= 31) {
    #line 182 
    checksum = (unsigned char)(((unsigned int)((unsigned char)(val >> idx)) & 15U) ^ (unsigned int)checksum);
    #line 181 
    idx += 4;
  }
  #line 184 
  return (unsigned char)((unsigned int)checksum & 15U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void eq_update_ci(struct hinic_eq *eq)
{
  #line 193 
  u32 val;
  #line 193 
  int tmp;
  #line 193 
  if (eq->type == (unsigned int)HINIC_AEQ) 
                                           #line 193 
                                           tmp = eq->q_id * 128 + 3592; else 
                                                                    #line 193 
                                                                    tmp = eq->q_id * 128 + 4104;
  #line 193 
  u32 addr = (unsigned int)tmp;
  #line 196 
  val = hinic_hwif_read_reg(eq->hwif,addr);
  #line 198 
  val &= 1893728256U;
  #line 203 
  val = (((eq->cons_idx & 1048575U) | (((unsigned int)eq->wrapped << 20) & 1048576U)) | val) | 2147483648U;
  #line 207 
  val = (((unsigned int)eq_cons_idx_checksum_set(val) << 24) & 251658240U) | val;
  #line 209 
  hinic_hwif_write_reg(eq->hwif,addr,val);
  #line 210 
  return;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void aeq_irq_handler(struct hinic_eq *eq)
{
  #line 218 
  void *__mptr;
  #line 221 
  struct hinic_aeq_elem *aeqe_curr;
  #line 222 
  struct hinic_hw_event_cb *hwe_cb;
  #line 223 
  enum hinic_aeq_type event;
  #line 224 
  unsigned long eqe_state;
  #line 225 
  u32 aeqe_desc;
  #line 226 
  int i;
  #line 226 
  int size;
  #line 218 
  __mptr = (void *)(eq + - eq->q_id);
  #line 218 
  struct hinic_aeqs *aeqs = ((struct hinic_aeqs *)(__mptr + 18446744073709551608U));
  #line 219 
  struct hinic_hwif *hwif = aeqs->hwif;
  #line 220 
  struct pci_dev *pdev = hwif->pdev;
  #line 228 
  i = 0;
  #line 228 
  while (eq->q_len > (unsigned int)i) {
    #line 229 
    aeqe_curr = (struct hinic_aeq_elem *)(*(eq->virt_addr + (unsigned long)(eq->cons_idx / (unsigned int)eq->num_elem_in_pg)) + (unsigned long)(eq->cons_idx & (unsigned int)(eq->num_elem_in_pg + -1)) * eq->elem_size);
    #line 232 
    aeqe_desc = __builtin_bswap32(aeqe_curr->desc);
    #line 235 
    if (aeqe_desc >> 31 == (unsigned int)eq->wrapped) 
                                                      #line 236 
                                                      break;
    #line 238 
    event = (enum hinic_aeq_type)(aeqe_desc & 127U);
    #line 239 
    if (event > (unsigned int)HINIC_MSG_FROM_MGMT_CPU) {
      #line 240 
      _dev_err(& pdev->dev,(char *)"Unknown AEQ Event %d\n",(unsigned int)event);
      #line 241 
      return;
    }
    #line 244 
    if ((aeqe_desc & 128U) == 0U) {
      #line 249 
      unsigned long __ret;
      #line 245 
      hwe_cb = & aeqs->hwe_cb[(unsigned int)event];
      #line 247 
      size = (int)(aeqe_desc >> 8) & 255;
      {
        #line 249 
        unsigned long *__ai_ptr = & hwe_cb->hwe_state;
        #line 249 
        kasan_check_read((void *)__ai_ptr,8U);
        {
          #line 249 
          unsigned long __old = 1UL;
          #line 249 
          unsigned long __new = 3UL;
          #line 249 
          switch (8UL) {
            #line 249 
            case (unsigned long)1: 
                                   #line 249 
            ;
            {
              #line 249 
              u8 *__ptr = (u8 *)__ai_ptr;
              #line 250 
              ldv_inline_asm();
              #line 249 
              break;
            }
            #line 249 
            case (unsigned long)2: 
                                   #line 249 
            ;
            {
              #line 249 
              u16 *__ptr_0 = (u16 *)__ai_ptr;
              #line 250 
              ldv_inline_asm();
              #line 249 
              break;
            }
            #line 249 
            case (unsigned long)4: 
                                   #line 249 
            ;
            {
              #line 249 
              u32 *__ptr_1 = (u32 *)__ai_ptr;
              #line 250 
              ldv_inline_asm();
              #line 249 
              break;
            }
            #line 249 
            case (unsigned long)8: 
                                   #line 249 
            ;
            {
              #line 249 
              u64 *__ptr_2 = (u64 *)__ai_ptr;
              #line 250 
              ldv_inline_asm();
              #line 249 
              break;
            }
            #line 249 
            default: 
                     #line 249 
            ;
            #line 249 
            __cmpxchg_wrong_size();
          }
          }
        }
      #line 249 
      eqe_state = __ret;
      #line 253 
      if (eqe_state == 1UL && hwe_cb->hwe_handler != (void (*)(void *, void *, u8 ))0) 
        #line 255 
        (*(hwe_cb->hwe_handler))(hwe_cb->handle,(void *)(& aeqe_curr->data),(unsigned char)((int)((unsigned char)size))); else 
                                                                    #line 258 
                                                                    _dev_err(& pdev->dev,(char *)"Unhandled AEQ Event %d\n",(unsigned int)event);
      #line 261 
      hwe_cb->hwe_state &= 18446744073709551613UL;
    }
    #line 264 
    (eq->cons_idx) ++;
    #line 266 
    if (eq->cons_idx == eq->q_len) {
      #line 267 
      eq->cons_idx = 0U;
      #line 268 
      eq->wrapped = eq->wrapped == 0;
    }
    #line 228 
    i ++;
  }
  #line 271 
  return;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void ceq_event_handler(struct hinic_ceqs *ceqs, u32 ceqe)
{
  #line 294 
  enum hinic_eqe_state __ret;
  #line 282 
  struct hinic_ceq_cb *ceq_cb;
  #line 283 
  enum hinic_ceq_type event;
  #line 284 
  unsigned long eqe_state;
  #line 280 
  struct hinic_hwif *hwif = ceqs->hwif;
  #line 281 
  struct pci_dev *pdev = hwif->pdev;
  #line 286 
  event = (enum hinic_ceq_type)((ceqe >> 23) & 7U);
  #line 287 
  if (event > (unsigned int)HINIC_CEQ_CMDQ) {
    #line 288 
    _dev_err(& pdev->dev,(char *)"Unknown CEQ event, event = %d\n",(unsigned int)event);
    #line 289 
    return;
  }
  #line 292 
  ceq_cb = & ceqs->ceq_cb[(unsigned int)event];
  {
    #line 294 
    enum hinic_eqe_state *__ai_ptr = & ceq_cb->ceqe_state;
    #line 294 
    kasan_check_read((void *)__ai_ptr,4U);
    {
      #line 294 
      enum hinic_eqe_state __old = HINIC_EQE_ENABLED;
      #line 294 
      enum hinic_eqe_state __new = (enum hinic_eqe_state)3;
      #line 294 
      switch (4UL) {
        #line 294 
        case (unsigned long)1: 
                               #line 294 
        ;
        {
          #line 294 
          u8 *__ptr = (u8 *)__ai_ptr;
          #line 295 
          ldv_inline_asm();
          #line 294 
          break;
        }
        #line 294 
        case (unsigned long)2: 
                               #line 294 
        ;
        {
          #line 294 
          u16 *__ptr_0 = (u16 *)__ai_ptr;
          #line 295 
          ldv_inline_asm();
          #line 294 
          break;
        }
        #line 294 
        case (unsigned long)4: 
                               #line 294 
        ;
        {
          #line 294 
          u32 *__ptr_1 = (u32 *)__ai_ptr;
          #line 295 
          ldv_inline_asm();
          #line 294 
          break;
        }
        #line 294 
        case (unsigned long)8: 
                               #line 294 
        ;
        {
          #line 294 
          u64 *__ptr_2 = (u64 *)__ai_ptr;
          #line 295 
          ldv_inline_asm();
          #line 294 
          break;
        }
        #line 294 
        default: 
                 #line 294 
        ;
        #line 294 
        __cmpxchg_wrong_size();
      }
      }
    }
  #line 294 
  eqe_state = (unsigned long)__ret;
  #line 298 
  if (eqe_state == 1UL && ceq_cb->handler != (void (*)(void *, u32 ))0) 
    #line 299 
    (*(ceq_cb->handler))(ceq_cb->handle,ceqe & 67108863U); else 
                                                                #line 301 
                                                                _dev_err(& pdev->dev,(char *)"Unhandled CEQ Event %d\n",(unsigned int)event);
  #line 303 
  ceq_cb->ceqe_state = (enum hinic_eqe_state)((unsigned int)ceq_cb->ceqe_state & 4294967293U);
  #line 304 
  return;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void ceq_irq_handler(struct hinic_eq *eq)
{
  #line 312 
  void *__mptr;
  #line 313 
  u32 ceqe;
  #line 314 
  int i;
  #line 312 
  __mptr = (void *)(eq + - eq->q_id);
  #line 312 
  struct hinic_ceqs *ceqs = ((struct hinic_ceqs *)(__mptr + 18446744073709551608U));
  #line 316 
  i = 0;
  #line 316 
  while (eq->q_len > (unsigned int)i) {
    #line 317 
    ceqe = *((u32 *)(*(eq->virt_addr + (unsigned long)(eq->cons_idx / (unsigned int)eq->num_elem_in_pg)) + (unsigned long)(eq->cons_idx & (unsigned int)(eq->num_elem_in_pg + -1)) * eq->elem_size));
    #line 320 
    ceqe = __builtin_bswap32(ceqe);
    #line 323 
    if (ceqe >> 31 == (unsigned int)eq->wrapped) 
                                                 #line 324 
                                                 break;
    #line 326 
    ceq_event_handler(ceqs,ceqe);
    #line 328 
    (eq->cons_idx) ++;
    #line 330 
    if (eq->cons_idx == eq->q_len) {
      #line 331 
      eq->cons_idx = 0U;
      #line 332 
      eq->wrapped = eq->wrapped == 0;
    }
    #line 316 
    i ++;
  }
  #line 335 
  return;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void eq_irq_handler(void *data)
{
  #line 343 
  struct hinic_eq *eq = (struct hinic_eq *)data;
  #line 345 
  if (eq->type == (unsigned int)HINIC_AEQ) 
                                           #line 346 
                                           aeq_irq_handler(eq);
  else 
    #line 347 
    if (eq->type == (unsigned int)HINIC_CEQ) 
                                             #line 348 
                                             ceq_irq_handler(eq);
  #line 350 
  eq_update_ci(eq);
  #line 351 
  return;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void eq_irq_work(struct work_struct *work)
{
  #line 359 
  void *__mptr;
  #line 360 
  struct hinic_eq *aeq;
  #line 359 
  __mptr = (void *)work;
  #line 359 
  struct hinic_eq_work *aeq_work = ((struct hinic_eq_work *)__mptr);
  #line 362 
  aeq = (struct hinic_eq *)aeq_work->data;
  #line 363 
  eq_irq_handler((void *)aeq);
  #line 364 
  return;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void ceq_tasklet(unsigned long ceq_data)
{
  #line 372 
  struct hinic_eq *ceq = (struct hinic_eq *)ceq_data;
  #line 374 
  eq_irq_handler((void *)ceq);
  #line 375 
  return;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static irqreturn_t aeq_interrupt(int irq, void *data)
{
  #line 394 
  void *__mptr;
  #line 384 
  struct hinic_eq_work *aeq_work;
  #line 386 
  struct hinic_aeqs *aeqs;
  #line 385 
  struct hinic_eq *aeq = (struct hinic_eq *)data;
  #line 389 
  hinic_msix_attr_cnt_clear(aeq->hwif,(unsigned short)((int)aeq->msix_entry.entry));
  #line 391 
  aeq_work = & aeq->aeq_work;
  #line 392 
  aeq_work->data = (void *)aeq;
  #line 394 
  __mptr = (void *)(aeq + - aeq->q_id);
  #line 394 
  aeqs = ((struct hinic_aeqs *)(__mptr + 18446744073709551608U));
  #line 395 
  cif_queue_work(aeqs->workq,& aeq_work->work);
  #line 397 
  return IRQ_HANDLED;
}

#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static irqreturn_t ceq_interrupt(int irq, void *data)
{
  #line 407 
  struct hinic_eq *ceq = (struct hinic_eq *)data;
  #line 410 
  hinic_msix_attr_cnt_clear(ceq->hwif,(unsigned short)((int)ceq->msix_entry.entry));
  #line 412 
  cif_tasklet_schedule(& ceq->ceq_tasklet);
  #line 414 
  return IRQ_HANDLED;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void set_ctrl0(struct hinic_eq *eq)
{
  #line 421 
  u32 addr;
  #line 421 
  u32 val;
  #line 421 
  u32 ctrl0;
  #line 419 
  struct msix_entry *msix_entry = & eq->msix_entry;
  #line 420 
  enum hinic_eq_type type = eq->type;
  #line 423 
  if (type == (unsigned int)HINIC_AEQ) {
    #line 425 
    addr = (unsigned int)((eq->q_id + 28) * 128);
    #line 427 
    val = hinic_hwif_read_reg(eq->hwif,addr);
    #line 429 
    val &= 2144078848U;
    #line 434 
    ctrl0 = ((unsigned int)msix_entry->entry & 1023U) | (((unsigned int)(eq->hwif)->attr.pci_intf_idx << 20) & 3145728U);
    #line 440 
    val |= ctrl0;
    #line 442 
    hinic_hwif_write_reg(eq->hwif,addr,val);
  }
  else 
    #line 443 
    if (type == (unsigned int)HINIC_CEQ) {
      #line 445 
      addr = (unsigned int)((eq->q_id + 32) * 128);
      #line 447 
      val = hinic_hwif_read_reg(eq->hwif,addr);
      #line 449 
      val &= 2081164288U;
      #line 455 
      ctrl0 = ((unsigned int)msix_entry->entry & 1023U) | (((unsigned int)(eq->hwif)->attr.pci_intf_idx << 24) & 50331648U);
      #line 462 
      val |= ctrl0;
      #line 464 
      hinic_hwif_write_reg(eq->hwif,addr,val);
    }
  #line 466 
  return;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void set_ctrl1(struct hinic_eq *eq)
{
  #line 471 
  u32 page_size_val;
  #line 471 
  u32 elem_size;
  #line 472 
  u32 addr;
  #line 472 
  u32 val;
  #line 472 
  u32 ctrl1;
  #line 470 
  enum hinic_eq_type type = eq->type;
  #line 474 
  if (type == (unsigned int)HINIC_AEQ) {
    #line 476 
    addr = (unsigned int)(eq->q_id * 128 + 3588);
    #line 478 
    if (0 != 0) {
      #line 478 
      unsigned int tmp_50;
      #line 478 
      unsigned int tmp_18;
      #line 478 
      unsigned int tmp_19;
      #line 478 
      unsigned int tmp_51;
      #line 478 
      unsigned int tmp_52;
      #line 478 
      unsigned int tmp_20;
      #line 478 
      unsigned int tmp_21;
      #line 478 
      unsigned int tmp_53;
      #line 478 
      unsigned int tmp_54;
      #line 478 
      unsigned int tmp_22;
      #line 478 
      unsigned int tmp_23;
      #line 478 
      unsigned int tmp_55;
      #line 478 
      unsigned int tmp_56;
      #line 478 
      unsigned int tmp_24;
      #line 478 
      unsigned int tmp_25;
      #line 478 
      unsigned int tmp_57;
      #line 478 
      unsigned int tmp_58;
      #line 478 
      unsigned int tmp_26;
      #line 478 
      unsigned int tmp_27;
      #line 478 
      unsigned int tmp_59;
      #line 478 
      unsigned int tmp_60;
      #line 478 
      unsigned int tmp_28;
      #line 478 
      unsigned int tmp_29;
      #line 478 
      unsigned int tmp_30;
      #line 478 
      unsigned int tmp;
      #line 478 
      unsigned int tmp_31;
      #line 478 
      unsigned int tmp_32;
      #line 478 
      unsigned int tmp_0;
      #line 478 
      unsigned int tmp_1;
      #line 478 
      unsigned int tmp_33;
      #line 478 
      unsigned int tmp_34;
      #line 478 
      unsigned int tmp_2;
      #line 478 
      unsigned int tmp_3;
      #line 478 
      unsigned int tmp_35;
      #line 478 
      unsigned int tmp_36;
      #line 478 
      unsigned int tmp_4;
      #line 478 
      unsigned int tmp_5;
      #line 478 
      unsigned int tmp_37;
      #line 478 
      unsigned int tmp_38;
      #line 478 
      unsigned int tmp_6;
      #line 478 
      unsigned int tmp_7;
      #line 478 
      unsigned int tmp_39;
      #line 478 
      unsigned int tmp_40;
      #line 478 
      unsigned int tmp_8;
      #line 478 
      unsigned int tmp_9;
      #line 478 
      unsigned int tmp_41;
      #line 478 
      unsigned int tmp_42;
      #line 478 
      unsigned int tmp_10;
      #line 478 
      unsigned int tmp_11;
      #line 478 
      unsigned int tmp_43;
      #line 478 
      unsigned int tmp_44;
      #line 478 
      unsigned int tmp_12;
      #line 478 
      unsigned int tmp_13;
      #line 478 
      unsigned int tmp_45;
      #line 478 
      unsigned int tmp_46;
      #line 478 
      unsigned int tmp_14;
      #line 478 
      unsigned int tmp_15;
      #line 478 
      unsigned int tmp_47;
      #line 478 
      unsigned int tmp_48;
      #line 478 
      unsigned int tmp_16;
      #line 478 
      unsigned int tmp_17;
      #line 478 
      unsigned int tmp_49;
      #line 478 
      unsigned int tmp_61;
      #line 478 
      if (eq->page_size >> 12 > 1U) {
        #line 478 
        if (((unsigned long long)(eq->page_size >> 12) & 9223372036854775808ULL) == 0ULL) {
          #line 478 
          if (((unsigned long long)(eq->page_size >> 12) & 4611686018427387904ULL) == 0ULL) {
            #line 478 
            if (((unsigned long long)(eq->page_size >> 12) & 2305843009213693952ULL) == 0ULL) {
              #line 478 
              if (((unsigned long long)(eq->page_size >> 12) & 1152921504606846976ULL) == 0ULL) {
                #line 478 
                if (((unsigned long long)(eq->page_size >> 12) & 576460752303423488ULL) == 0ULL) {
                  #line 478 
                  if (((unsigned long long)(eq->page_size >> 12) & 288230376151711744ULL) == 0ULL) {
                    #line 478 
                    if (((unsigned long long)(eq->page_size >> 12) & 144115188075855872ULL) == 0ULL) {
                      #line 478 
                      if (((unsigned long long)(eq->page_size >> 12) & 72057594037927936ULL) == 0ULL) {
                        #line 478 
                        if (((unsigned long long)(eq->page_size >> 12) & 36028797018963968ULL) == 0ULL) {
                          #line 478 
                          if (((unsigned long long)(eq->page_size >> 12) & 18014398509481984ULL) == 0ULL) {
                            #line 478 
                            if (((unsigned long long)(eq->page_size >> 12) & 9007199254740992ULL) == 0ULL) {
                              #line 478 
                              if (((unsigned long long)(eq->page_size >> 12) & 4503599627370496ULL) == 0ULL) {
                                #line 478 
                                if (((unsigned long long)(eq->page_size >> 12) & 2251799813685248ULL) == 0ULL) {
                                  #line 478 
                                  if (((unsigned long long)(eq->page_size >> 12) & 1125899906842624ULL) == 0ULL) {
                                    #line 478 
                                    if (((unsigned long long)(eq->page_size >> 12) & 562949953421312ULL) == 0ULL) {
                                      #line 478 
                                      if (((unsigned long long)(eq->page_size >> 12) & 281474976710656ULL) == 0ULL) {
                                        #line 478 
                                        if (((unsigned long long)(eq->page_size >> 12) & 140737488355328ULL) == 0ULL) {
                                          #line 478 
                                          if (((unsigned long long)(eq->page_size >> 12) & 70368744177664ULL) == 0ULL) {
                                            #line 478 
                                            if (((unsigned long long)(eq->page_size >> 12) & 35184372088832ULL) == 0ULL) {
                                              #line 478 
                                              if (((unsigned long long)(eq->page_size >> 12) & 17592186044416ULL) == 0ULL) {
                                                #line 478 
                                                if (((unsigned long long)(eq->page_size >> 12) & 8796093022208ULL) == 0ULL) {
                                                  #line 478 
                                                  if (((unsigned long long)(eq->page_size >> 12) & 4398046511104ULL) == 0ULL) {
                                                    #line 478 
                                                    if (((unsigned long long)(eq->page_size >> 12) & 2199023255552ULL) == 0ULL) {
                                                      #line 478 
                                                      if (((unsigned long long)(eq->page_size >> 12) & 1099511627776ULL) == 0ULL) {
                                                        #line 478 
                                                        if (((unsigned long long)(eq->page_size >> 12) & 549755813888ULL) == 0ULL) {
                                                          #line 478 
                                                          if (((unsigned long long)(eq->page_size >> 12) & 274877906944ULL) == 0ULL) {
                                                            #line 478 
                                                            if (((unsigned long long)(eq->page_size >> 12) & 137438953472ULL) == 0ULL) {
                                                              #line 478 
                                                              if (((unsigned long long)(eq->page_size >> 12) & 68719476736ULL) == 0ULL) {
                                                                #line 478 
                                                                if (((unsigned long long)(eq->page_size >> 12) & 34359738368ULL) == 0ULL) {
                                                                  #line 478 
                                                                  if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 17179869184ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8589934592ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4294967296ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 2147483648ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 1073741824ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 536870912ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 268435456ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 134217728ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 67108864ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 33554432ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 16777216ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8388608ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4194304ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 2097152ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 1048576ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 524288ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 262144ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 131072ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 65536ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 32768ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 16384ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8192ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4096ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 2048ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 1024ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 512ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 256ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 128ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 64ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 32ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 16ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8ULL) == 0ULL) {
                                                                    #line 478 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4ULL) != 0ULL) 
                                                                    #line 478 
                                                                    tmp = 2U; else 
                                                                    #line 478 
                                                                    tmp = 1U;
                                                                    #line 478 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_0 = 3U;
                                                                    #line 478 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_1 = 4U;
                                                                    #line 478 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_2 = 5U;
                                                                    #line 478 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_3 = 6U;
                                                                    #line 478 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_4 = 7U;
                                                                    #line 478 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_5 = 8U;
                                                                    #line 478 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_6 = 9U;
                                                                    #line 478 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_7 = 10U;
                                                                    #line 478 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_8 = 11U;
                                                                    #line 478 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_9 = 12U;
                                                                    #line 478 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_10 = 13U;
                                                                    #line 478 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_11 = 14U;
                                                                    #line 478 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_12 = 15U;
                                                                    #line 478 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_13 = 16U;
                                                                    #line 478 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_14 = 17U;
                                                                    #line 478 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_15 = 18U;
                                                                    #line 478 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_16 = 19U;
                                                                    #line 478 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_17 = 20U;
                                                                    #line 478 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_18 = 21U;
                                                                    #line 478 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_19 = 22U;
                                                                    #line 478 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_20 = 23U;
                                                                    #line 478 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_21 = 24U;
                                                                    #line 478 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_22 = 25U;
                                                                    #line 478 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_23 = 26U;
                                                                    #line 478 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_24 = 27U;
                                                                    #line 478 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_25 = 28U;
                                                                    #line 478 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_26 = 29U;
                                                                    #line 478 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_27 = 30U;
                                                                    #line 478 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_28 = 31U;
                                                                    #line 478 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_29 = 32U;
                                                                    #line 478 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 478 
                                                                    tmp_30 = 33U;
                                                                    #line 478 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 478 
                                                                    tmp_31 = 34U;
                                                                  #line 478 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 478 
                                                                  tmp_32 = 35U;
                                                                #line 478 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 478 
                                                                   tmp_33 = 36U;
                                                              #line 478 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 478 
                                                                 tmp_34 = 37U;
                                                            #line 478 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 478 
                                                               tmp_35 = 38U;
                                                          #line 478 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 478 
                                                             tmp_36 = 39U;
                                                        #line 478 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 478 
                                                           tmp_37 = 40U;
                                                      #line 478 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 478 
                                                         tmp_38 = 41U;
                                                    #line 478 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 478 
                                                       tmp_39 = 42U;
                                                  #line 478 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 478 
                                                     tmp_40 = 43U;
                                                #line 478 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 478 
                                                   tmp_41 = 44U;
                                              #line 478 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 478 
                                                 tmp_42 = 45U;
                                            #line 478 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 478 
                                               tmp_43 = 46U;
                                          #line 478 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 478 
                                             tmp_44 = 47U;
                                        #line 478 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 478 
                                           tmp_45 = 48U;
                                      #line 478 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 478 
                                         tmp_46 = 49U;
                                    #line 478 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 478 
                                       tmp_47 = 50U;
                                  #line 478 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 478 
                                     tmp_48 = 51U;
                                #line 478 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 478 
                                   tmp_49 = 52U;
                              #line 478 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 478 
                                 tmp_50 = 53U;
                            #line 478 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 478 
                               tmp_51 = 54U;
                          #line 478 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 478 
                             tmp_52 = 55U;
                        #line 478 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 478 
                           tmp_53 = 56U;
                      #line 478 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 478 
                         tmp_54 = 57U;
                    #line 478 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 478 
                       tmp_55 = 58U;
                  #line 478 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 478 
                     tmp_56 = 59U;
                #line 478 
                tmp_57 = tmp_56;
              }
              else 
                   #line 478 
                   tmp_57 = 60U;
              #line 478 
              tmp_58 = tmp_57;
            }
            else 
                 #line 478 
                 tmp_58 = 61U;
            #line 478 
            tmp_59 = tmp_58;
          }
          else 
               #line 478 
               tmp_59 = 62U;
          #line 478 
          tmp_60 = tmp_59;
        }
        else 
             #line 478 
             tmp_60 = 63U;
        #line 478 
        tmp_61 = tmp_60;
      }
      else 
           #line 478 
           tmp_61 = 0U;
      #line 478 
      page_size_val = tmp_61;
    }
    else {
      #line 478 
      page_size_val = (unsigned int)__ilog2_u32(eq->page_size >> 12);
    }
    #line 479 
    if (0 != 0) {
      #line 479 
      unsigned int tmp_82;
      #line 479 
      unsigned int tmp_114;
      #line 479 
      unsigned int tmp_115;
      #line 479 
      unsigned int tmp_83;
      #line 479 
      unsigned int tmp_84;
      #line 479 
      unsigned int tmp_116;
      #line 479 
      unsigned int tmp_117;
      #line 479 
      unsigned int tmp_85;
      #line 479 
      unsigned int tmp_86;
      #line 479 
      unsigned int tmp_118;
      #line 479 
      unsigned int tmp_119;
      #line 479 
      unsigned int tmp_87;
      #line 479 
      unsigned int tmp_88;
      #line 479 
      unsigned int tmp_89;
      #line 479 
      unsigned int tmp_90;
      #line 479 
      unsigned int tmp_91;
      #line 479 
      unsigned int tmp_92;
      #line 479 
      unsigned int tmp_93;
      #line 479 
      unsigned int tmp_94;
      #line 479 
      unsigned int tmp_95;
      #line 479 
      unsigned int tmp_63;
      #line 479 
      unsigned int tmp_64;
      #line 479 
      unsigned int tmp_96;
      #line 479 
      unsigned int tmp_97;
      #line 479 
      unsigned int tmp_65;
      #line 479 
      unsigned int tmp_66;
      #line 479 
      unsigned int tmp_98;
      #line 479 
      unsigned int tmp_99;
      #line 479 
      unsigned int tmp_67;
      #line 479 
      unsigned int tmp_68;
      #line 479 
      unsigned int tmp_100;
      #line 479 
      unsigned int tmp_101;
      #line 479 
      unsigned int tmp_69;
      #line 479 
      unsigned int tmp_70;
      #line 479 
      unsigned int tmp_102;
      #line 479 
      unsigned int tmp_103;
      #line 479 
      unsigned int tmp_71;
      #line 479 
      unsigned int tmp_72;
      #line 479 
      unsigned int tmp_104;
      #line 479 
      unsigned int tmp_105;
      #line 479 
      unsigned int tmp_73;
      #line 479 
      unsigned int tmp_74;
      #line 479 
      unsigned int tmp_106;
      #line 479 
      unsigned int tmp_107;
      #line 479 
      unsigned int tmp_75;
      #line 479 
      unsigned int tmp_76;
      #line 479 
      unsigned int tmp_108;
      #line 479 
      unsigned int tmp_109;
      #line 479 
      unsigned int tmp_77;
      #line 479 
      unsigned int tmp_78;
      #line 479 
      unsigned int tmp_110;
      #line 479 
      unsigned int tmp_111;
      #line 479 
      unsigned int tmp_79;
      #line 479 
      unsigned int tmp_80;
      #line 479 
      unsigned int tmp_112;
      #line 479 
      unsigned int tmp_113;
      #line 479 
      unsigned int tmp_81;
      #line 479 
      unsigned int tmp_120;
      #line 479 
      if (eq->elem_size >> 5 > 1UL) {
        #line 479 
        if ((eq->elem_size & 9223372036854775808UL) == 0UL) {
          #line 479 
          if ((eq->elem_size & 4611686018427387904UL) == 0UL) {
            #line 479 
            if ((eq->elem_size & 2305843009213693952UL) == 0UL) {
              #line 479 
              if ((eq->elem_size & 1152921504606846976UL) == 0UL) {
                #line 479 
                if ((eq->elem_size & 576460752303423488UL) == 0UL) {
                  #line 479 
                  if ((eq->elem_size & 288230376151711744UL) == 0UL) {
                    #line 479 
                    if ((eq->elem_size & 144115188075855872UL) == 0UL) {
                      #line 479 
                      if ((eq->elem_size & 72057594037927936UL) == 0UL) {
                        #line 479 
                        if ((eq->elem_size & 36028797018963968UL) == 0UL) {
                          #line 479 
                          if ((eq->elem_size & 18014398509481984UL) == 0UL) {
                            #line 479 
                            if ((eq->elem_size & 9007199254740992UL) == 0UL) {
                              #line 479 
                              if ((eq->elem_size & 4503599627370496UL) == 0UL) {
                                #line 479 
                                if ((eq->elem_size & 2251799813685248UL) == 0UL) {
                                  #line 479 
                                  if ((eq->elem_size & 1125899906842624UL) == 0UL) {
                                    #line 479 
                                    if ((eq->elem_size & 562949953421312UL) == 0UL) {
                                      #line 479 
                                      if ((eq->elem_size & 281474976710656UL) == 0UL) {
                                        #line 479 
                                        if ((eq->elem_size & 140737488355328UL) == 0UL) {
                                          #line 479 
                                          if ((eq->elem_size & 70368744177664UL) == 0UL) {
                                            #line 479 
                                            if ((eq->elem_size & 35184372088832UL) == 0UL) {
                                              #line 479 
                                              if ((eq->elem_size & 17592186044416UL) == 0UL) {
                                                #line 479 
                                                if ((eq->elem_size & 8796093022208UL) == 0UL) {
                                                  #line 479 
                                                  if ((eq->elem_size & 4398046511104UL) == 0UL) {
                                                    #line 479 
                                                    if ((eq->elem_size & 2199023255552UL) == 0UL) {
                                                      #line 479 
                                                      if ((eq->elem_size & 1099511627776UL) == 0UL) {
                                                        #line 479 
                                                        if ((eq->elem_size & 549755813888UL) == 0UL) {
                                                          #line 479 
                                                          if ((eq->elem_size & 274877906944UL) == 0UL) {
                                                            #line 479 
                                                            if ((eq->elem_size & 137438953472UL) == 0UL) {
                                                              #line 479 
                                                              if ((eq->elem_size & 68719476736UL) == 0UL) {
                                                                #line 479 
                                                                if ((eq->elem_size & 34359738368UL) == 0UL) {
                                                                  #line 479 
                                                                  if (
                                                                    (eq->elem_size & 17179869184UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 8589934592UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 4294967296UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 2147483648UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 1073741824UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 536870912UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 268435456UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 134217728UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 67108864UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 33554432UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 16777216UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 8388608UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 4194304UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 2097152UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 1048576UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 524288UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 262144UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 131072UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 65536UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 32768UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 16384UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 8192UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 4096UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 2048UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 1024UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 512UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 256UL) == 0UL) {
                                                                    #line 479 
                                                                    if (
                                                                    (eq->elem_size & 128UL) != 0UL) 
                                                                    #line 479 
                                                                    tmp_63 = 2U; else 
                                                                    #line 479 
                                                                    tmp_63 = 1U;
                                                                    #line 479 
                                                                    tmp_64 = tmp_63;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_64 = 3U;
                                                                    #line 479 
                                                                    tmp_65 = tmp_64;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_65 = 4U;
                                                                    #line 479 
                                                                    tmp_66 = tmp_65;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_66 = 5U;
                                                                    #line 479 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_67 = 6U;
                                                                    #line 479 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_68 = 7U;
                                                                    #line 479 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_69 = 8U;
                                                                    #line 479 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_70 = 9U;
                                                                    #line 479 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_71 = 10U;
                                                                    #line 479 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_72 = 11U;
                                                                    #line 479 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_73 = 12U;
                                                                    #line 479 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_74 = 13U;
                                                                    #line 479 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_75 = 14U;
                                                                    #line 479 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_76 = 15U;
                                                                    #line 479 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_77 = 16U;
                                                                    #line 479 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_78 = 17U;
                                                                    #line 479 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_79 = 18U;
                                                                    #line 479 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_80 = 19U;
                                                                    #line 479 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_81 = 20U;
                                                                    #line 479 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_82 = 21U;
                                                                    #line 479 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_83 = 22U;
                                                                    #line 479 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_84 = 23U;
                                                                    #line 479 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_85 = 24U;
                                                                    #line 479 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_86 = 25U;
                                                                    #line 479 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_87 = 26U;
                                                                    #line 479 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_88 = 27U;
                                                                    #line 479 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 479 
                                                                    tmp_89 = 28U;
                                                                    #line 479 
                                                                    tmp_90 = tmp_89;
                                                                  }
                                                                  else 
                                                                    #line 479 
                                                                    tmp_90 = 29U;
                                                                  #line 479 
                                                                  tmp_91 = tmp_90;
                                                                }
                                                                else 
                                                                  #line 479 
                                                                  tmp_91 = 30U;
                                                                #line 479 
                                                                tmp_92 = tmp_91;
                                                              }
                                                              else 
                                                                   #line 479 
                                                                   tmp_92 = 31U;
                                                              #line 479 
                                                              tmp_93 = tmp_92;
                                                            }
                                                            else 
                                                                 #line 479 
                                                                 tmp_93 = 32U;
                                                            #line 479 
                                                            tmp_94 = tmp_93;
                                                          }
                                                          else 
                                                               #line 479 
                                                               tmp_94 = 33U;
                                                          #line 479 
                                                          tmp_95 = tmp_94;
                                                        }
                                                        else 
                                                             #line 479 
                                                             tmp_95 = 34U;
                                                        #line 479 
                                                        tmp_96 = tmp_95;
                                                      }
                                                      else 
                                                           #line 479 
                                                           tmp_96 = 35U;
                                                      #line 479 
                                                      tmp_97 = tmp_96;
                                                    }
                                                    else 
                                                         #line 479 
                                                         tmp_97 = 36U;
                                                    #line 479 
                                                    tmp_98 = tmp_97;
                                                  }
                                                  else 
                                                       #line 479 
                                                       tmp_98 = 37U;
                                                  #line 479 
                                                  tmp_99 = tmp_98;
                                                }
                                                else 
                                                     #line 479 
                                                     tmp_99 = 38U;
                                                #line 479 
                                                tmp_100 = tmp_99;
                                              }
                                              else 
                                                   #line 479 
                                                   tmp_100 = 39U;
                                              #line 479 
                                              tmp_101 = tmp_100;
                                            }
                                            else 
                                                 #line 479 
                                                 tmp_101 = 40U;
                                            #line 479 
                                            tmp_102 = tmp_101;
                                          }
                                          else 
                                               #line 479 
                                               tmp_102 = 41U;
                                          #line 479 
                                          tmp_103 = tmp_102;
                                        }
                                        else 
                                             #line 479 
                                             tmp_103 = 42U;
                                        #line 479 
                                        tmp_104 = tmp_103;
                                      }
                                      else 
                                           #line 479 
                                           tmp_104 = 43U;
                                      #line 479 
                                      tmp_105 = tmp_104;
                                    }
                                    else 
                                         #line 479 
                                         tmp_105 = 44U;
                                    #line 479 
                                    tmp_106 = tmp_105;
                                  }
                                  else 
                                       #line 479 
                                       tmp_106 = 45U;
                                  #line 479 
                                  tmp_107 = tmp_106;
                                }
                                else 
                                     #line 479 
                                     tmp_107 = 46U;
                                #line 479 
                                tmp_108 = tmp_107;
                              }
                              else 
                                   #line 479 
                                   tmp_108 = 47U;
                              #line 479 
                              tmp_109 = tmp_108;
                            }
                            else 
                                 #line 479 
                                 tmp_109 = 48U;
                            #line 479 
                            tmp_110 = tmp_109;
                          }
                          else 
                               #line 479 
                               tmp_110 = 49U;
                          #line 479 
                          tmp_111 = tmp_110;
                        }
                        else 
                             #line 479 
                             tmp_111 = 50U;
                        #line 479 
                        tmp_112 = tmp_111;
                      }
                      else 
                           #line 479 
                           tmp_112 = 51U;
                      #line 479 
                      tmp_113 = tmp_112;
                    }
                    else 
                         #line 479 
                         tmp_113 = 52U;
                    #line 479 
                    tmp_114 = tmp_113;
                  }
                  else 
                       #line 479 
                       tmp_114 = 53U;
                  #line 479 
                  tmp_115 = tmp_114;
                }
                else 
                     #line 479 
                     tmp_115 = 54U;
                #line 479 
                tmp_116 = tmp_115;
              }
              else 
                   #line 479 
                   tmp_116 = 55U;
              #line 479 
              tmp_117 = tmp_116;
            }
            else 
                 #line 479 
                 tmp_117 = 56U;
            #line 479 
            tmp_118 = tmp_117;
          }
          else 
               #line 479 
               tmp_118 = 57U;
          #line 479 
          tmp_119 = tmp_118;
        }
        else 
             #line 479 
             tmp_119 = 58U;
        #line 479 
        tmp_120 = tmp_119;
      }
      else 
           #line 479 
           tmp_120 = 0U;
      #line 479 
      elem_size = tmp_120;
    }
    else {
      #line 479 
      elem_size = (unsigned int)__ilog2_u64((unsigned long long)(eq->elem_size >> 5));
    }
    #line 481 
    val = hinic_hwif_read_reg(eq->hwif,addr);
    #line 483 
    val &= 216006656U;
    #line 487 
    ctrl1 = ((eq->q_len & 2097151U) | ((elem_size << 24) & 50331648U)) | (page_size_val << 28);
    #line 491 
    val |= ctrl1;
    #line 493 
    hinic_hwif_write_reg(eq->hwif,addr,val);
  }
  else 
    #line 494 
    if (type == (unsigned int)HINIC_CEQ) {
      #line 496 
      addr = (unsigned int)(eq->q_id * 128 + 4100);
      #line 498 
      if (0 != 0) {
        #line 498 
        unsigned int tmp_146;
        #line 498 
        unsigned int tmp_178;
        #line 498 
        unsigned int tmp_179;
        #line 498 
        unsigned int tmp_147;
        #line 498 
        unsigned int tmp_148;
        #line 498 
        unsigned int tmp_180;
        #line 498 
        unsigned int tmp_181;
        #line 498 
        unsigned int tmp_149;
        #line 498 
        unsigned int tmp_150;
        #line 498 
        unsigned int tmp_182;
        #line 498 
        unsigned int tmp_183;
        #line 498 
        unsigned int tmp_151;
        #line 498 
        unsigned int tmp_152;
        #line 498 
        unsigned int tmp_153;
        #line 498 
        unsigned int tmp_122;
        #line 498 
        unsigned int tmp_154;
        #line 498 
        unsigned int tmp_155;
        #line 498 
        unsigned int tmp_123;
        #line 498 
        unsigned int tmp_124;
        #line 498 
        unsigned int tmp_156;
        #line 498 
        unsigned int tmp_157;
        #line 498 
        unsigned int tmp_125;
        #line 498 
        unsigned int tmp_126;
        #line 498 
        unsigned int tmp_158;
        #line 498 
        unsigned int tmp_159;
        #line 498 
        unsigned int tmp_127;
        #line 498 
        unsigned int tmp_128;
        #line 498 
        unsigned int tmp_160;
        #line 498 
        unsigned int tmp_161;
        #line 498 
        unsigned int tmp_129;
        #line 498 
        unsigned int tmp_130;
        #line 498 
        unsigned int tmp_162;
        #line 498 
        unsigned int tmp_163;
        #line 498 
        unsigned int tmp_131;
        #line 498 
        unsigned int tmp_132;
        #line 498 
        unsigned int tmp_164;
        #line 498 
        unsigned int tmp_165;
        #line 498 
        unsigned int tmp_133;
        #line 498 
        unsigned int tmp_134;
        #line 498 
        unsigned int tmp_166;
        #line 498 
        unsigned int tmp_167;
        #line 498 
        unsigned int tmp_135;
        #line 498 
        unsigned int tmp_136;
        #line 498 
        unsigned int tmp_168;
        #line 498 
        unsigned int tmp_169;
        #line 498 
        unsigned int tmp_137;
        #line 498 
        unsigned int tmp_138;
        #line 498 
        unsigned int tmp_170;
        #line 498 
        unsigned int tmp_171;
        #line 498 
        unsigned int tmp_139;
        #line 498 
        unsigned int tmp_140;
        #line 498 
        unsigned int tmp_172;
        #line 498 
        unsigned int tmp_173;
        #line 498 
        unsigned int tmp_141;
        #line 498 
        unsigned int tmp_142;
        #line 498 
        unsigned int tmp_174;
        #line 498 
        unsigned int tmp_175;
        #line 498 
        unsigned int tmp_143;
        #line 498 
        unsigned int tmp_144;
        #line 498 
        unsigned int tmp_176;
        #line 498 
        unsigned int tmp_177;
        #line 498 
        unsigned int tmp_145;
        #line 498 
        unsigned int tmp_184;
        #line 498 
        if (eq->page_size >> 12 > 1U) {
          #line 498 
          if (((unsigned long long)(eq->page_size >> 12) & 9223372036854775808ULL) == 0ULL) {
            #line 498 
            if (((unsigned long long)(eq->page_size >> 12) & 4611686018427387904ULL) == 0ULL) {
              #line 498 
              if (((unsigned long long)(eq->page_size >> 12) & 2305843009213693952ULL) == 0ULL) {
                #line 498 
                if (((unsigned long long)(eq->page_size >> 12) & 1152921504606846976ULL) == 0ULL) {
                  #line 498 
                  if (((unsigned long long)(eq->page_size >> 12) & 576460752303423488ULL) == 0ULL) {
                    #line 498 
                    if (((unsigned long long)(eq->page_size >> 12) & 288230376151711744ULL) == 0ULL) {
                      #line 498 
                      if (((unsigned long long)(eq->page_size >> 12) & 144115188075855872ULL) == 0ULL) {
                        #line 498 
                        if (((unsigned long long)(eq->page_size >> 12) & 72057594037927936ULL) == 0ULL) {
                          #line 498 
                          if (((unsigned long long)(eq->page_size >> 12) & 36028797018963968ULL) == 0ULL) {
                            #line 498 
                            if (((unsigned long long)(eq->page_size >> 12) & 18014398509481984ULL) == 0ULL) {
                              #line 498 
                              if (((unsigned long long)(eq->page_size >> 12) & 9007199254740992ULL) == 0ULL) {
                                #line 498 
                                if (((unsigned long long)(eq->page_size >> 12) & 4503599627370496ULL) == 0ULL) {
                                  #line 498 
                                  if (((unsigned long long)(eq->page_size >> 12) & 2251799813685248ULL) == 0ULL) {
                                    #line 498 
                                    if (((unsigned long long)(eq->page_size >> 12) & 1125899906842624ULL) == 0ULL) {
                                      #line 498 
                                      if (((unsigned long long)(eq->page_size >> 12) & 562949953421312ULL) == 0ULL) {
                                        #line 498 
                                        if (((unsigned long long)(eq->page_size >> 12) & 281474976710656ULL) == 0ULL) {
                                          #line 498 
                                          if (((unsigned long long)(eq->page_size >> 12) & 140737488355328ULL) == 0ULL) {
                                            #line 498 
                                            if (((unsigned long long)(eq->page_size >> 12) & 70368744177664ULL) == 0ULL) {
                                              #line 498 
                                              if (((unsigned long long)(eq->page_size >> 12) & 35184372088832ULL) == 0ULL) {
                                                #line 498 
                                                if (((unsigned long long)(eq->page_size >> 12) & 17592186044416ULL) == 0ULL) {
                                                  #line 498 
                                                  if (((unsigned long long)(eq->page_size >> 12) & 8796093022208ULL) == 0ULL) {
                                                    #line 498 
                                                    if (((unsigned long long)(eq->page_size >> 12) & 4398046511104ULL) == 0ULL) {
                                                      #line 498 
                                                      if (((unsigned long long)(eq->page_size >> 12) & 2199023255552ULL) == 0ULL) {
                                                        #line 498 
                                                        if (((unsigned long long)(eq->page_size >> 12) & 1099511627776ULL) == 0ULL) {
                                                          #line 498 
                                                          if (((unsigned long long)(eq->page_size >> 12) & 549755813888ULL) == 0ULL) {
                                                            #line 498 
                                                            if (((unsigned long long)(eq->page_size >> 12) & 274877906944ULL) == 0ULL) {
                                                              #line 498 
                                                              if (((unsigned long long)(eq->page_size >> 12) & 137438953472ULL) == 0ULL) {
                                                                #line 498 
                                                                if (((unsigned long long)(eq->page_size >> 12) & 68719476736ULL) == 0ULL) {
                                                                  #line 498 
                                                                  if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 34359738368ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 17179869184ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8589934592ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4294967296ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 2147483648ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 1073741824ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 536870912ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 268435456ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 134217728ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 67108864ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 33554432ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 16777216ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8388608ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4194304ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 2097152ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 1048576ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 524288ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 262144ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 131072ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 65536ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 32768ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 16384ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8192ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4096ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 2048ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 1024ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 512ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 256ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 128ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 64ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 32ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 16ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 8ULL) == 0ULL) {
                                                                    #line 498 
                                                                    if (
                                                                    ((unsigned long long)(eq->page_size >> 12) & 4ULL) != 0ULL) 
                                                                    #line 498 
                                                                    tmp_122 = 2U; else 
                                                                    #line 498 
                                                                    tmp_122 = 1U;
                                                                    #line 498 
                                                                    tmp_123 = tmp_122;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_123 = 3U;
                                                                    #line 498 
                                                                    tmp_124 = tmp_123;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_124 = 4U;
                                                                    #line 498 
                                                                    tmp_125 = tmp_124;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_125 = 5U;
                                                                    #line 498 
                                                                    tmp_126 = tmp_125;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_126 = 6U;
                                                                    #line 498 
                                                                    tmp_127 = tmp_126;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_127 = 7U;
                                                                    #line 498 
                                                                    tmp_128 = tmp_127;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_128 = 8U;
                                                                    #line 498 
                                                                    tmp_129 = tmp_128;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_129 = 9U;
                                                                    #line 498 
                                                                    tmp_130 = tmp_129;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_130 = 10U;
                                                                    #line 498 
                                                                    tmp_131 = tmp_130;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_131 = 11U;
                                                                    #line 498 
                                                                    tmp_132 = tmp_131;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_132 = 12U;
                                                                    #line 498 
                                                                    tmp_133 = tmp_132;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_133 = 13U;
                                                                    #line 498 
                                                                    tmp_134 = tmp_133;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_134 = 14U;
                                                                    #line 498 
                                                                    tmp_135 = tmp_134;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_135 = 15U;
                                                                    #line 498 
                                                                    tmp_136 = tmp_135;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_136 = 16U;
                                                                    #line 498 
                                                                    tmp_137 = tmp_136;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_137 = 17U;
                                                                    #line 498 
                                                                    tmp_138 = tmp_137;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_138 = 18U;
                                                                    #line 498 
                                                                    tmp_139 = tmp_138;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_139 = 19U;
                                                                    #line 498 
                                                                    tmp_140 = tmp_139;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_140 = 20U;
                                                                    #line 498 
                                                                    tmp_141 = tmp_140;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_141 = 21U;
                                                                    #line 498 
                                                                    tmp_142 = tmp_141;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_142 = 22U;
                                                                    #line 498 
                                                                    tmp_143 = tmp_142;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_143 = 23U;
                                                                    #line 498 
                                                                    tmp_144 = tmp_143;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_144 = 24U;
                                                                    #line 498 
                                                                    tmp_145 = tmp_144;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_145 = 25U;
                                                                    #line 498 
                                                                    tmp_146 = tmp_145;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_146 = 26U;
                                                                    #line 498 
                                                                    tmp_147 = tmp_146;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_147 = 27U;
                                                                    #line 498 
                                                                    tmp_148 = tmp_147;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_148 = 28U;
                                                                    #line 498 
                                                                    tmp_149 = tmp_148;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_149 = 29U;
                                                                    #line 498 
                                                                    tmp_150 = tmp_149;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_150 = 30U;
                                                                    #line 498 
                                                                    tmp_151 = tmp_150;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_151 = 31U;
                                                                    #line 498 
                                                                    tmp_152 = tmp_151;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_152 = 32U;
                                                                    #line 498 
                                                                    tmp_153 = tmp_152;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_153 = 33U;
                                                                    #line 498 
                                                                    tmp_154 = tmp_153;
                                                                    }
                                                                    else 
                                                                    #line 498 
                                                                    tmp_154 = 34U;
                                                                    #line 498 
                                                                    tmp_155 = tmp_154;
                                                                  }
                                                                  else 
                                                                    #line 498 
                                                                    tmp_155 = 35U;
                                                                  #line 498 
                                                                  tmp_156 = tmp_155;
                                                                }
                                                                else 
                                                                  #line 498 
                                                                  tmp_156 = 36U;
                                                                #line 498 
                                                                tmp_157 = tmp_156;
                                                              }
                                                              else 
                                                                   #line 498 
                                                                   tmp_157 = 37U;
                                                              #line 498 
                                                              tmp_158 = tmp_157;
                                                            }
                                                            else 
                                                                 #line 498 
                                                                 tmp_158 = 38U;
                                                            #line 498 
                                                            tmp_159 = tmp_158;
                                                          }
                                                          else 
                                                               #line 498 
                                                               tmp_159 = 39U;
                                                          #line 498 
                                                          tmp_160 = tmp_159;
                                                        }
                                                        else 
                                                             #line 498 
                                                             tmp_160 = 40U;
                                                        #line 498 
                                                        tmp_161 = tmp_160;
                                                      }
                                                      else 
                                                           #line 498 
                                                           tmp_161 = 41U;
                                                      #line 498 
                                                      tmp_162 = tmp_161;
                                                    }
                                                    else 
                                                         #line 498 
                                                         tmp_162 = 42U;
                                                    #line 498 
                                                    tmp_163 = tmp_162;
                                                  }
                                                  else 
                                                       #line 498 
                                                       tmp_163 = 43U;
                                                  #line 498 
                                                  tmp_164 = tmp_163;
                                                }
                                                else 
                                                     #line 498 
                                                     tmp_164 = 44U;
                                                #line 498 
                                                tmp_165 = tmp_164;
                                              }
                                              else 
                                                   #line 498 
                                                   tmp_165 = 45U;
                                              #line 498 
                                              tmp_166 = tmp_165;
                                            }
                                            else 
                                                 #line 498 
                                                 tmp_166 = 46U;
                                            #line 498 
                                            tmp_167 = tmp_166;
                                          }
                                          else 
                                               #line 498 
                                               tmp_167 = 47U;
                                          #line 498 
                                          tmp_168 = tmp_167;
                                        }
                                        else 
                                             #line 498 
                                             tmp_168 = 48U;
                                        #line 498 
                                        tmp_169 = tmp_168;
                                      }
                                      else 
                                           #line 498 
                                           tmp_169 = 49U;
                                      #line 498 
                                      tmp_170 = tmp_169;
                                    }
                                    else 
                                         #line 498 
                                         tmp_170 = 50U;
                                    #line 498 
                                    tmp_171 = tmp_170;
                                  }
                                  else 
                                       #line 498 
                                       tmp_171 = 51U;
                                  #line 498 
                                  tmp_172 = tmp_171;
                                }
                                else 
                                     #line 498 
                                     tmp_172 = 52U;
                                #line 498 
                                tmp_173 = tmp_172;
                              }
                              else 
                                   #line 498 
                                   tmp_173 = 53U;
                              #line 498 
                              tmp_174 = tmp_173;
                            }
                            else 
                                 #line 498 
                                 tmp_174 = 54U;
                            #line 498 
                            tmp_175 = tmp_174;
                          }
                          else 
                               #line 498 
                               tmp_175 = 55U;
                          #line 498 
                          tmp_176 = tmp_175;
                        }
                        else 
                             #line 498 
                             tmp_176 = 56U;
                        #line 498 
                        tmp_177 = tmp_176;
                      }
                      else 
                           #line 498 
                           tmp_177 = 57U;
                      #line 498 
                      tmp_178 = tmp_177;
                    }
                    else 
                         #line 498 
                         tmp_178 = 58U;
                    #line 498 
                    tmp_179 = tmp_178;
                  }
                  else 
                       #line 498 
                       tmp_179 = 59U;
                  #line 498 
                  tmp_180 = tmp_179;
                }
                else 
                     #line 498 
                     tmp_180 = 60U;
                #line 498 
                tmp_181 = tmp_180;
              }
              else 
                   #line 498 
                   tmp_181 = 61U;
              #line 498 
              tmp_182 = tmp_181;
            }
            else 
                 #line 498 
                 tmp_182 = 62U;
            #line 498 
            tmp_183 = tmp_182;
          }
          else 
               #line 498 
               tmp_183 = 63U;
          #line 498 
          tmp_184 = tmp_183;
        }
        else 
             #line 498 
             tmp_184 = 0U;
        #line 498 
        page_size_val = tmp_184;
      }
      else {
        #line 498 
        page_size_val = (unsigned int)__ilog2_u32(eq->page_size >> 12);
      }
      #line 500 
      val = hinic_hwif_read_reg(eq->hwif,addr);
      #line 502 
      val &= 266338304U;
      #line 505 
      ctrl1 = (eq->q_len & 2097151U) | (page_size_val << 28);
      #line 508 
      val |= ctrl1;
      #line 510 
      hinic_hwif_write_reg(eq->hwif,addr,val);
    }
  #line 512 
  return;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void set_eq_ctrls(struct hinic_eq *eq)
{
  #line 520 
  set_ctrl0(eq);
  #line 521 
  set_ctrl1(eq);
  #line 522 
  return;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void aeq_elements_init(struct hinic_eq *eq, u32 init_val)
{
  #line 531 
  struct hinic_aeq_elem *aeqe;
  #line 532 
  int i;
  #line 534 
  i = 0;
  #line 534 
  while (eq->q_len > (unsigned int)i) {
    #line 535 
    aeqe = (struct hinic_aeq_elem *)(*(eq->virt_addr + (unsigned long)(i / eq->num_elem_in_pg)) + (unsigned long)((eq->num_elem_in_pg + -1) & i) * eq->elem_size);
    #line 536 
    aeqe->desc = __builtin_bswap32(init_val);
    #line 534 
    i ++;
  }
  #line 538 
  ldv_inline_asm();
  #line 539 
  return;
}

#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void ceq_elements_init(struct hinic_eq *eq, u32 init_val)
{
  #line 549 
  u32 *ceqe;
  #line 550 
  int i;
  #line 552 
  i = 0;
  #line 552 
  while (eq->q_len > (unsigned int)i) {
    #line 553 
    ceqe = (u32 *)(*(eq->virt_addr + (unsigned long)(i / eq->num_elem_in_pg)) + (unsigned long)((eq->num_elem_in_pg + -1) & i) * eq->elem_size);
    #line 554 
    *ceqe = __builtin_bswap32(init_val);
    #line 552 
    i ++;
  }
  #line 556 
  ldv_inline_asm();
  #line 557 
  return;
}

#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static int alloc_eq_pages(struct hinic_eq *eq)
{
  #line 570 
  u32 init_val;
  #line 570 
  u32 addr;
  #line 570 
  u32 val;
  #line 571 
  size_t addr_size;
  #line 572 
  int err;
  #line 572 
  int pg;
  #line 568 
  struct hinic_hwif *hwif = eq->hwif;
  #line 569 
  struct pci_dev *pdev = hwif->pdev;
  #line 574 
  addr_size = (unsigned long)eq->num_pages * 8UL;
  #line 575 
  eq->dma_addr = (dma_addr_t *)cif_devm_kzalloc_2(& pdev->dev,addr_size,3264U);
  #line 576 
  if (eq->dma_addr == (dma_addr_t *)0ULL) 
                                          #line 577 
                                          return -12;
  #line 579 
  addr_size = (unsigned long)eq->num_pages * 8UL;
  #line 580 
  eq->virt_addr = (void **)cif_devm_kzalloc_2(& pdev->dev,addr_size,3264U);
  #line 581 
  if (eq->virt_addr == (void **)0) {
    #line 582 
    err = -12;
    #line 583 
    goto err_virt_addr_alloc;
  }
  #line 586 
  pg = 0;
  #line 586 
  while (eq->num_pages > pg) {
    {
      #line 596 
      int tmp_1;
      #line 601 
      int tmp_2;
      #line 587 
      *(eq->virt_addr + (unsigned long)pg) = dma_alloc_coherent(& pdev->dev,(unsigned long)eq->page_size,eq->dma_addr + (unsigned long)pg,3264U);
      #line 591 
      if (*(eq->virt_addr + (unsigned long)pg) == (void *)0) {
        #line 592 
        err = -12;
        #line 593 
        goto err_dma_alloc;
      }
      #line 596 
      if (eq->type == (unsigned int)HINIC_AEQ) 
                                               #line 596 
                                               tmp_1 = ((eq->q_id + 8) * 8 + pg) * 8; else 
                                                                    #line 596 
                                                                    tmp_1 = ((eq->q_id + 16) * 8 + pg) * 8;
      #line 596 
      addr = (unsigned int)tmp_1;
      #line 597 
      val = (unsigned int)(*(eq->dma_addr + (unsigned long)pg) >> 32);
      #line 599 
      hinic_hwif_write_reg(hwif,addr,val);
      #line 601 
      if (eq->type == (unsigned int)HINIC_AEQ) 
                                               #line 601 
                                               tmp_2 = ((eq->q_id + 8) * 8 + pg) * 8 + 4; else 
                                                                    #line 601 
                                                                    tmp_2 = ((eq->q_id + 16) * 8 + pg) * 8 + 4;
      #line 601 
      addr = (unsigned int)tmp_2;
      #line 602 
      val = (unsigned int)*(eq->dma_addr + (unsigned long)pg);
      #line 604 
      hinic_hwif_write_reg(hwif,addr,val);
    }
    #line 586 
    pg ++;
  }
  #line 607 
  init_val = (unsigned int)eq->wrapped << 31;
  #line 609 
  if (eq->type == (unsigned int)HINIC_AEQ) 
                                           #line 610 
                                           aeq_elements_init(eq,init_val);
  else 
    #line 611 
    if (eq->type == (unsigned int)HINIC_CEQ) 
                                             #line 612 
                                             ceq_elements_init(eq,init_val);
  #line 614 
  return 0;
  #line 616 
  err_dma_alloc: 
                 #line 616 
  ;
  #line 617 
  while (1) {
    #line 617 
    pg --;
    #line 617 
    if (! (pg >= 0)) 
                     #line 617 
                     break;
    #line 618 
    dma_free_coherent(& pdev->dev,(unsigned long)eq->page_size,*(eq->virt_addr + (unsigned long)pg),*(eq->dma_addr + (unsigned long)pg));
  }
  #line 622 
  devm_kfree(& pdev->dev,(void *)eq->virt_addr);
  #line 624 
  err_virt_addr_alloc: 
                       #line 624 
  ;
  #line 625 
  devm_kfree(& pdev->dev,(void *)eq->dma_addr);
  #line 626 
  return err;
}

#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void free_eq_pages(struct hinic_eq *eq)
{
  #line 637 
  int pg;
  #line 635 
  struct hinic_hwif *hwif = eq->hwif;
  #line 636 
  struct pci_dev *pdev = hwif->pdev;
  #line 639 
  pg = 0;
  #line 639 
  while (eq->num_pages > pg) {
    #line 640 
    dma_free_coherent(& pdev->dev,(unsigned long)eq->page_size,*(eq->virt_addr + (unsigned long)pg),*(eq->dma_addr + (unsigned long)pg));
    #line 639 
    pg ++;
  }
  #line 644 
  devm_kfree(& pdev->dev,(void *)eq->virt_addr);
  #line 645 
  devm_kfree(& pdev->dev,(void *)eq->dma_addr);
  #line 646 
  return;
}

#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static int init_eq(struct hinic_eq *eq, struct hinic_hwif *hwif, enum hinic_eq_type type, int q_id, u32 q_len, u32 page_size, struct msix_entry entry)
{
  #line 665 
  int err;
  #line 674 
  int tmp;
  #line 675 
  int tmp_0;
  #line 664 
  struct pci_dev *pdev = hwif->pdev;
  #line 667 
  eq->hwif = hwif;
  #line 668 
  eq->type = type;
  #line 669 
  eq->q_id = q_id;
  #line 670 
  eq->q_len = q_len;
  #line 671 
  eq->page_size = page_size;
  #line 674 
  if (eq->type == (unsigned int)HINIC_AEQ) 
                                           #line 674 
                                           tmp = eq->q_id * 128 + 3592; else 
                                                                    #line 674 
                                                                    tmp = eq->q_id * 128 + 4104;
  #line 674 
  ;
  #line 674 
  hinic_hwif_write_reg(eq->hwif,(unsigned int)tmp,0U);
  #line 675 
  if (eq->type == (unsigned int)HINIC_AEQ) 
                                           #line 675 
                                           tmp_0 = eq->q_id * 128 + 3596; else 
                                                                    #line 675 
                                                                    tmp_0 = eq->q_id * 128 + 4108;
  #line 675 
  ;
  #line 675 
  hinic_hwif_write_reg(eq->hwif,(unsigned int)tmp_0,0U);
  #line 677 
  eq->cons_idx = 0U;
  #line 678 
  eq->wrapped = 0;
  #line 680 
  if (type == (unsigned int)HINIC_AEQ) 
                                       #line 681 
                                       eq->elem_size = 64UL;
  else 
    #line 682 
    if (type == (unsigned int)HINIC_CEQ) 
                                         #line 683 
                                         eq->elem_size = 4UL;
    else {
      #line 685 
      _dev_err(& pdev->dev,(char *)"Invalid EQ type\n");
      #line 686 
      return -22;
    }
  #line 689 
  eq->num_pages = (int)(((((unsigned long)eq->q_len * eq->elem_size + (unsigned long)page_size) + 18446744073709551615UL) & - ((unsigned long)page_size)) / (unsigned long)page_size);
  #line 690 
  eq->num_elem_in_pg = (int)((unsigned long)page_size / eq->elem_size);
  #line 692 
  eq->msix_entry = entry;
  #line 694 
  if ((eq->num_elem_in_pg & (eq->num_elem_in_pg + -1)) != 0) {
    #line 695 
    _dev_err(& pdev->dev,(char *)"num elements in eq page != power of 2\n");
    #line 696 
    return -22;
  }
  #line 699 
  if (eq->num_pages > 8) {
    #line 700 
    _dev_err(& pdev->dev,(char *)"too many pages for eq\n");
    #line 701 
    return -22;
  }
  #line 704 
  set_eq_ctrls(eq);
  #line 705 
  eq_update_ci(eq);
  #line 707 
  err = alloc_eq_pages(eq);
  #line 708 
  if (err != 0) {
    #line 709 
    _dev_err(& pdev->dev,(char *)"Failed to allocate pages for eq\n");
    #line 710 
    return err;
  }
  #line 713 
  if (type == (unsigned int)HINIC_AEQ) {
    #line 714 
    struct hinic_eq_work *aeq_work = & eq->aeq_work;
    {
      #line 716 
      struct lock_class_key __key;
      #line 716 
      __init_work(& aeq_work->work,0);
      #line 716 
      atomic_long_t __constr_expr_29 = {.counter = 137438953408LL};
      #line 716 
      aeq_work->work.data = __constr_expr_29;
      #line 716 
      lockdep_init_map(& aeq_work->work.lockdep_map,(char *)"(work_completion)",& __key,0);
      #line 716 
      INIT_LIST_HEAD(& aeq_work->work.entry);
      #line 716 
      aeq_work->work.func = & eq_irq_work;
    }
  }
  else 
    #line 717 
    if (type == (unsigned int)HINIC_CEQ) 
                                         #line 718 
                                         cif_tasklet_init(& eq->ceq_tasklet,& ceq_tasklet,(unsigned long)eq);
  #line 723 
  hinic_msix_attr_set(eq->hwif,(unsigned short)((int)eq->msix_entry.entry),(unsigned char)0,(unsigned char)255,(unsigned char)0,(unsigned char)0,(unsigned char)7);
  #line 730 
  if (type == (unsigned int)HINIC_AEQ) 
                                       #line 731 
                                       err = cif_request_irq_0(entry.vector,& aeq_interrupt,0UL,(char *)"hinic_aeq",(void *)eq);
  else 
    #line 733 
    if (type == (unsigned int)HINIC_CEQ) 
                                         #line 734 
                                         err = cif_request_irq_0(entry.vector,& ceq_interrupt,0UL,(char *)"hinic_ceq",(void *)eq);
  #line 737 
  if (err != 0) {
    #line 738 
    _dev_err(& pdev->dev,(char *)"Failed to request irq for the EQ\n");
    #line 739 
    goto err_req_irq;
  }
  #line 742 
  return 0;
  #line 744 
  err_req_irq: 
               #line 744 
  ;
  #line 745 
  free_eq_pages(eq);
  #line 746 
  return err;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
static void remove_eq(struct hinic_eq *eq)
{
  #line 755 
  struct msix_entry *entry = & eq->msix_entry;
  #line 757 
  cif_free_irq_0(entry->vector,(void *)eq);
  #line 759 
  if (eq->type == (unsigned int)HINIC_AEQ) {
    #line 760 
    struct hinic_eq_work *aeq_work = & eq->aeq_work;
    #line 762 
    cancel_work_sync(& aeq_work->work);
  }
  else 
    #line 763 
    if (eq->type == (unsigned int)HINIC_CEQ) 
                                             #line 764 
                                             tasklet_kill(& eq->ceq_tasklet);
  #line 767 
  free_eq_pages(eq);
  #line 768 
  return;
}

#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
int hinic_aeqs_init(struct hinic_aeqs *aeqs, struct hinic_hwif *hwif, int num_aeqs, u32 q_len, u32 page_size, struct msix_entry *msix_entries)
{
  #line 786 
  int err;
  #line 786 
  int i;
  #line 786 
  int q_id;
  #line 785 
  struct pci_dev *pdev = hwif->pdev;
  #line 788 
  aeqs->workq = alloc_workqueue((char *)"%s",917514U,1,(char *)"hinic_eqs");
  #line 789 
  if (aeqs->workq == (struct workqueue_struct *)0) 
                                                   #line 790 
                                                   return -12;
  #line 792 
  aeqs->hwif = hwif;
  #line 793 
  aeqs->num_aeqs = num_aeqs;
  #line 795 
  q_id = 0;
  #line 795 
  while (q_id < num_aeqs) {
    #line 796 
    err = init_eq(& aeqs->aeq[q_id],hwif,(enum hinic_eq_type)HINIC_AEQ,q_id,q_len,page_size,*(msix_entries + (unsigned long)q_id));
    #line 798 
    if (err != 0) {
      #line 799 
      _dev_err(& pdev->dev,(char *)"Failed to init aeq %d\n",q_id);
      #line 800 
      goto err_init_aeq;
    }
    #line 795 
    q_id ++;
  }
  #line 804 
  return 0;
  #line 806 
  err_init_aeq: 
                #line 806 
  ;
  #line 807 
  i = 0;
  #line 807 
  while (i < q_id) {
    #line 808 
    remove_eq(& aeqs->aeq[i]);
    #line 807 
    i ++;
  }
  #line 810 
  destroy_workqueue(aeqs->workq);
  #line 811 
  return err;
}

#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_aeqs_free(struct hinic_aeqs *aeqs)
{
  #line 820 
  int q_id;
  #line 822 
  q_id = 0;
  #line 822 
  while (aeqs->num_aeqs > q_id) {
    #line 823 
    remove_eq(& aeqs->aeq[q_id]);
    #line 822 
    q_id ++;
  }
  #line 825 
  destroy_workqueue(aeqs->workq);
  #line 826 
  return;
}

#line 839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
int hinic_ceqs_init(struct hinic_ceqs *ceqs, struct hinic_hwif *hwif, int num_ceqs, u32 q_len, u32 page_size, struct msix_entry *msix_entries)
{
  #line 844 
  int i;
  #line 844 
  int q_id;
  #line 844 
  int err;
  #line 843 
  struct pci_dev *pdev = hwif->pdev;
  #line 846 
  ceqs->hwif = hwif;
  #line 847 
  ceqs->num_ceqs = num_ceqs;
  #line 849 
  q_id = 0;
  #line 849 
  while (q_id < num_ceqs) {
    #line 850 
    err = init_eq(& ceqs->ceq[q_id],hwif,(enum hinic_eq_type)HINIC_CEQ,q_id,q_len,page_size,*(msix_entries + (unsigned long)q_id));
    #line 852 
    if (err != 0) {
      #line 853 
      _dev_err(& pdev->dev,(char *)"Failed to init ceq %d\n",q_id);
      #line 854 
      goto err_init_ceq;
    }
    #line 849 
    q_id ++;
  }
  #line 858 
  return 0;
  #line 860 
  err_init_ceq: 
                #line 860 
  ;
  #line 861 
  i = 0;
  #line 861 
  while (i < q_id) {
    #line 862 
    remove_eq(& ceqs->ceq[i]);
    #line 861 
    i ++;
  }
  #line 864 
  return err;
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_eqs.c"
void hinic_ceqs_free(struct hinic_ceqs *ceqs)
{
  #line 873 
  int q_id;
  #line 875 
  q_id = 0;
  #line 875 
  while (ceqs->num_ceqs > q_id) {
    #line 876 
    remove_eq(& ceqs->ceq[q_id]);
    #line 875 
    q_id ++;
  }
  #line 877 
  return;
}

#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
#line 96 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 98 
#line 98 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 99 
#line 99 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
enum irqreturn emg_wrapper_aeq_interrupt(int arg0, void *arg1)
{
  #line 104 
  return aeq_interrupt(arg0,arg1);
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
enum irqreturn emg_wrapper_ceq_interrupt(int arg0, void *arg1)
{
  #line 109 
  return ceq_interrupt(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 145 
  ldv_init_list_head(list);
  #line 146 
  return;
}

#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 316 
  return emg_queue_work(wq,work);
}

#line 509  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 513 
  emg_tasklet_schedule(t);
  #line 514 
  return;
}

#line 517  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags)
{
  #line 520 
  return ldv_devm_kzalloc(size,flags);
}

#line 524  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 528 
  emg_tasklet_init(t,func,data);
  #line 529 
  return;
}

#line 532  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 536 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 540  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_eqs.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 544 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 272 
int hinic_hwdev_num_qps(struct hinic_hwdev *hwdev);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.h"
#line 46 
void hinic_rxq_get_stats(struct hinic_rxq *rxq, struct hinic_rxq_stats *stats);
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_port.h"
#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
void hinic_set_ethtool_ops(struct net_device *netdev);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static void set_link_speed(struct ethtool_link_ksettings *link_ksettings, enum hinic_speed speed)
{
  #line 39 
  switch ((unsigned int)speed) {
    #line 40 
    case (unsigned int)0: 
                          #line 40 
    ;
    #line 41 
    link_ksettings->base.speed = 10U;
    #line 42 
    break;
    #line 44 
    case (unsigned int)1: 
                          #line 44 
    ;
    #line 45 
    link_ksettings->base.speed = 100U;
    #line 46 
    break;
    #line 48 
    case (unsigned int)2: 
                          #line 48 
    ;
    #line 49 
    link_ksettings->base.speed = 1000U;
    #line 50 
    break;
    #line 52 
    case (unsigned int)3: 
                          #line 52 
    ;
    #line 53 
    link_ksettings->base.speed = 10000U;
    #line 54 
    break;
    #line 56 
    case (unsigned int)4: 
                          #line 56 
    ;
    #line 57 
    link_ksettings->base.speed = 25000U;
    #line 58 
    break;
    #line 60 
    case (unsigned int)5: 
                          #line 60 
    ;
    #line 61 
    link_ksettings->base.speed = 40000U;
    #line 62 
    break;
    #line 64 
    case (unsigned int)6: 
                          #line 64 
    ;
    #line 65 
    link_ksettings->base.speed = 100000U;
    #line 66 
    break;
    #line 68 
    default: 
             #line 68 
    ;
    #line 69 
    link_ksettings->base.speed = 4294967295U;
    #line 70 
    break;
  }
  #line 72 
  return;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *link_ksettings)
{
  #line 79 
  enum hinic_port_link_state link_state;
  #line 80 
  struct hinic_port_cap port_cap;
  #line 81 
  int err;
  #line 78 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 83 
  cif_bitmap_zero((unsigned long *)(& link_ksettings->link_modes.advertising),74U);
  #line 84 
  __set_bit(6L,(unsigned long *)(& link_ksettings->link_modes.supported));
  #line 87 
  link_ksettings->base.speed = 4294967295U;
  #line 88 
  link_ksettings->base.autoneg = (unsigned char)0U;
  #line 89 
  link_ksettings->base.duplex = (unsigned char)255U;
  #line 91 
  err = hinic_port_get_cap(nic_dev,& port_cap);
  #line 92 
  if (err != 0) 
                #line 93 
                return err;
  #line 95 
  err = hinic_port_link_state(nic_dev,& link_state);
  #line 96 
  if (err != 0) 
                #line 97 
                return err;
  #line 99 
  if (link_state != (unsigned int)HINIC_LINK_STATE_UP) 
                                                       #line 100 
                                                       return err;
  #line 102 
  set_link_speed(link_ksettings,(enum hinic_speed)port_cap.speed);
  #line 104 
  if (((int)port_cap.autoneg_cap & 1) != 0) 
                                            #line 105 
                                            __set_bit(6L,(unsigned long *)(& link_ksettings->link_modes.advertising));
  #line 108 
  if ((unsigned int)port_cap.autoneg_state == 1U) 
                                                  #line 109 
                                                  link_ksettings->base.autoneg = (unsigned char)1U;
  #line 111 
  link_ksettings->base.duplex = (unsigned char)((unsigned int)port_cap.duplex == 1U);
  #line 113 
  return 0;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static void hinic_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *info)
{
  #line 123 
  int err;
  #line 119 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 120 
  u8 mgmt_ver[32U] = {(unsigned char)0U};
  #line 121 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 122 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 125 
  strlcpy((char *)(& info->driver),(char *)"hinic",32UL);
  #line 126 
  ;
  #line 126 
  strlcpy((char *)(& info->bus_info),pci_name(hwif->pdev),32UL);
  #line 128 
  err = hinic_get_mgmt_version(nic_dev,(u8 *)(& mgmt_ver));
  #line 129 
  if (err != 0) 
                #line 130 
                return;
  #line 132 
  snprintf((char *)(& info->fw_version),32UL,(char *)"%s",(u8 *)(& mgmt_ver));
  #line 133 
  return;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static void hinic_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 138 
  ring->rx_max_pending = 4096U;
  #line 139 
  ring->tx_max_pending = 4096U;
  #line 140 
  ring->rx_pending = 4096U;
  #line 141 
  ring->tx_pending = 4096U;
  #line 142 
  return;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static void hinic_get_channels(struct net_device *netdev, struct ethtool_channels *channels)
{
  #line 147 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 148 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 150 
  channels->max_rx = (unsigned int)hwdev->nic_cap.max_qps;
  #line 151 
  channels->max_tx = (unsigned int)hwdev->nic_cap.max_qps;
  #line 152 
  channels->max_other = 0U;
  #line 153 
  channels->max_combined = 0U;
  #line 154 
  channels->rx_count = (unsigned int)hinic_hwdev_num_qps(hwdev);
  #line 155 
  channels->tx_count = (unsigned int)hinic_hwdev_num_qps(hwdev);
  #line 156 
  channels->other_count = 0U;
  #line 157 
  channels->combined_count = 0U;
  #line 158 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_get_rss_hash_opts(struct hinic_dev *nic_dev, struct ethtool_rxnfc *cmd)
{
  #line 164 
  int err;
  #line 163 
  struct hinic_rss_type rss_type = {.tcp_ipv6_ext = (unsigned char)0U, .ipv6_ext = (unsigned char)0, .tcp_ipv6 = (unsigned char)0, .ipv6 = (unsigned char)0, .tcp_ipv4 = (unsigned char)0, .ipv4 = (unsigned char)0, .udp_ipv6 = (unsigned char)0, .udp_ipv4 = (unsigned char)0};
  #line 166 
  cmd->data = 0ULL;
  #line 168 
  if ((nic_dev->flags & 4U) == 0U) 
                                   #line 169 
                                   return 0;
  #line 171 
  err = hinic_get_rss_type(nic_dev,(unsigned int)nic_dev->rss_tmpl_idx,& rss_type);
  #line 173 
  if (err != 0) 
                #line 174 
                return err;
  #line 176 
  cmd->data = 48ULL;
  #line 177 
  switch (cmd->flow_type) {
    #line 178 
    case (__u32)1: 
                   #line 178 
    ;
    #line 179 
    if ((unsigned int)rss_type.tcp_ipv4 != 0U) 
                                               #line 180 
                                               cmd->data |= 192ULL;
    #line 181 
    break;
    #line 182 
    case (__u32)5: 
                   #line 182 
    ;
    #line 183 
    if ((unsigned int)rss_type.tcp_ipv6 != 0U) 
                                               #line 184 
                                               cmd->data |= 192ULL;
    #line 185 
    break;
    #line 186 
    case (__u32)2: 
                   #line 186 
    ;
    #line 187 
    if ((unsigned int)rss_type.udp_ipv4 != 0U) 
                                               #line 188 
                                               cmd->data |= 192ULL;
    #line 189 
    break;
    #line 190 
    case (__u32)6: 
                   #line 190 
    ;
    #line 191 
    if ((unsigned int)rss_type.udp_ipv6 != 0U) 
                                               #line 192 
                                               cmd->data |= 192ULL;
    #line 193 
    break;
    #line 194 
    case (__u32)16: 
                    #line 194 
    ;
    #line 195 
    case (__u32)17: 
                    #line 195 
    ;
    #line 196 
    break;
    #line 197 
    default: 
             #line 197 
    ;
    #line 198 
    cmd->data = 0ULL;
    #line 199 
    return -22;
  }
  #line 202 
  return 0;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int set_l4_rss_hash_ops(struct ethtool_rxnfc *cmd, struct hinic_rss_type *rss_type)
{
  #line 208 
  u8 rss_l4_en = (unsigned char)0U;
  #line 210 
  switch (cmd->data & 192ULL) {
    #line 211 
    case (unsigned long long)0: 
                                #line 211 
    ;
    #line 212 
    rss_l4_en = (unsigned char)0U;
    #line 213 
    break;
    #line 214 
    case (unsigned long long)192: 
                                  #line 214 
    ;
    #line 215 
    rss_l4_en = (unsigned char)1U;
    #line 216 
    break;
    #line 217 
    default: 
             #line 217 
    ;
    #line 218 
    return -22;
  }
  #line 221 
  switch (cmd->flow_type) {
    #line 222 
    case (__u32)1: 
                   #line 222 
    ;
    #line 223 
    rss_type->tcp_ipv4 = rss_l4_en;
    #line 224 
    break;
    #line 225 
    case (__u32)5: 
                   #line 225 
    ;
    #line 226 
    rss_type->tcp_ipv6 = rss_l4_en;
    #line 227 
    break;
    #line 228 
    case (__u32)2: 
                   #line 228 
    ;
    #line 229 
    rss_type->udp_ipv4 = rss_l4_en;
    #line 230 
    break;
    #line 231 
    case (__u32)6: 
                   #line 231 
    ;
    #line 232 
    rss_type->udp_ipv6 = rss_l4_en;
    #line 233 
    break;
    #line 234 
    default: 
             #line 234 
    ;
    #line 235 
    return -22;
  }
  #line 238 
  return 0;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_set_rss_hash_opts(struct hinic_dev *nic_dev, struct ethtool_rxnfc *cmd)
{
  #line 245 
  int err;
  #line 244 
  struct hinic_rss_type *rss_type = & nic_dev->rss_type;
  #line 247 
  if ((nic_dev->flags & 4U) == 0U) {
    #line 248 
    cmd->data = 0ULL;
    #line 249 
    return -95;
  }
  #line 255 
  if ((cmd->data & 18446744073709551375ULL) != 0ULL) 
                                                     #line 257 
                                                     return -22;
  #line 260 
  if ((cmd->data & 16ULL) == 0ULL || (cmd->data & 32ULL) == 0ULL) 
                                                                  #line 261 
                                                                  return -22;
  #line 263 
  err = hinic_get_rss_type(nic_dev,(unsigned int)nic_dev->rss_tmpl_idx,rss_type);
  #line 265 
  if (err != 0) 
                #line 266 
                return -14;
  #line 268 
  switch (cmd->flow_type) {
    #line 269 
    case (__u32)1: 
                   #line 269 
    ;
    #line 270 
    case (__u32)5: 
                   #line 270 
    ;
    #line 271 
    case (__u32)2: 
                   #line 271 
    ;
    #line 272 
    case (__u32)6: 
                   #line 272 
    ;
    #line 273 
    err = set_l4_rss_hash_ops(cmd,rss_type);
    #line 274 
    if (err != 0) 
                  #line 275 
                  return err;
    #line 276 
    break;
    #line 277 
    case (__u32)16: 
                    #line 277 
    ;
    #line 278 
    rss_type->ipv4 = (unsigned char)1U;
    #line 279 
    break;
    #line 280 
    case (__u32)17: 
                    #line 280 
    ;
    #line 281 
    rss_type->ipv6 = (unsigned char)1U;
    #line 282 
    break;
    #line 283 
    default: 
             #line 283 
    ;
    #line 284 
    return -22;
  }
  #line 287 
  err = hinic_set_rss_type(nic_dev,(unsigned int)nic_dev->rss_tmpl_idx,*rss_type);
  #line 289 
  if (err != 0) 
                #line 290 
                return -14;
  #line 292 
  return 0;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int __set_rss_rxfh(struct net_device *netdev, u32 *indir, u8 *key)
{
  #line 299 
  int err;
  #line 298 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 301 
  if (indir != (u32 *)0U) {
    #line 302 
    if (nic_dev->rss_indir_user == (s32 *)0) {
      #line 304 
      nic_dev->rss_indir_user = (s32 *)kzalloc_0(1024UL,3264U);
      #line 306 
      if (nic_dev->rss_indir_user == (s32 *)0) 
                                               #line 307 
                                               return -12;
    }
    #line 310 
    memcpy((void *)nic_dev->rss_indir_user,(void *)indir,1024UL);
    #line 313 
    err = hinic_rss_set_indir_tbl(nic_dev,(unsigned int)nic_dev->rss_tmpl_idx,indir);
    #line 315 
    if (err != 0) 
                  #line 316 
                  return -14;
  }
  #line 319 
  if (key != (u8 *)0U) {
    #line 320 
    if (nic_dev->rss_hkey_user == (u8 *)0U) {
      #line 322 
      nic_dev->rss_hkey_user = (u8 *)kzalloc_0(80UL,3264U);
      #line 324 
      if (nic_dev->rss_hkey_user == (u8 *)0U) 
                                              #line 325 
                                              return -12;
    }
    #line 328 
    memcpy((void *)nic_dev->rss_hkey_user,(void *)key,40UL);
    #line 330 
    err = hinic_rss_set_template_tbl(nic_dev,(unsigned int)nic_dev->rss_tmpl_idx,key);
    #line 332 
    if (err != 0) 
                  #line 333 
                  return -14;
  }
  #line 336 
  return 0;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 342 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 343 
  int err = 0;
  #line 345 
  switch (cmd->cmd) {
    #line 346 
    case (__u32)45: 
                    #line 346 
    ;
    #line 347 
    cmd->data = (unsigned long long)nic_dev->num_qps;
    #line 348 
    break;
    #line 349 
    case (__u32)41: 
                    #line 349 
    ;
    #line 350 
    err = hinic_get_rss_hash_opts(nic_dev,cmd);
    #line 351 
    break;
    #line 352 
    default: 
             #line 352 
    ;
    #line 353 
    err = -95;
    #line 354 
    break;
  }
  #line 357 
  return err;
}

#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  #line 362 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 363 
  int err = 0;
  #line 365 
  switch (cmd->cmd) {
    #line 366 
    case (__u32)42: 
                    #line 366 
    ;
    #line 367 
    err = hinic_set_rss_hash_opts(nic_dev,cmd);
    #line 368 
    break;
    #line 369 
    default: 
             #line 369 
    ;
    #line 370 
    err = -95;
    #line 371 
    break;
  }
  #line 374 
  return err;
}

#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 380 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 381 
  u8 hash_engine_type = (unsigned char)0U;
  #line 382 
  int err = 0;
  #line 384 
  if ((nic_dev->flags & 4U) == 0U) 
                                   #line 385 
                                   return -95;
  #line 387 
  if (hfunc != (u8 *)0U) {
    #line 388 
    err = hinic_rss_get_hash_engine(nic_dev,(unsigned char)((int)nic_dev->rss_tmpl_idx),& hash_engine_type);
    #line 391 
    if (err != 0) 
                  #line 392 
                  return -14;
    #line 394 
    if ((unsigned int)hash_engine_type != 0U) 
                                              #line 394 
                                              *hfunc = (unsigned char)1U; else 
                                                                    #line 394 
                                                                    *hfunc = (unsigned char)2U;
  }
  #line 397 
  if (indir != (u32 *)0U) {
    #line 398 
    err = hinic_rss_get_indir_tbl(nic_dev,(unsigned int)nic_dev->rss_tmpl_idx,indir);
    #line 400 
    if (err != 0) 
                  #line 401 
                  return -14;
  }
  #line 404 
  if (key != (u8 *)0U) 
                       #line 405 
                       err = hinic_rss_get_template_tbl(nic_dev,(unsigned int)nic_dev->rss_tmpl_idx,key);
  #line 408 
  return err;
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_set_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 414 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 415 
  int err = 0;
  #line 417 
  if ((nic_dev->flags & 4U) == 0U) 
                                   #line 418 
                                   return -95;
  #line 420 
  if ((unsigned int)hfunc != 0U) {
    #line 421 
    if ((unsigned int)hfunc + 255U > 1U) 
                                         #line 422 
                                         return -95;
    #line 424 
    nic_dev->rss_hash_engine = (unsigned char)((unsigned int)hfunc != 2U);
    #line 427 
    err = hinic_rss_set_hash_engine(nic_dev,(unsigned char)((int)nic_dev->rss_tmpl_idx),(unsigned char)((int)nic_dev->rss_hash_engine));
    #line 430 
    if (err != 0) 
                  #line 431 
                  return -14;
  }
  #line 434 
  err = __set_rss_rxfh(netdev,indir,key);
  #line 436 
  return err;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static u32 hinic_get_rxfh_key_size(struct net_device *netdev)
{
  #line 441 
  return 40U;
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static u32 hinic_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 446 
  return 256U;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static struct hinic_stats hinic_function_stats[16U] = {{.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 8}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 16}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 24}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 32}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 40}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 48}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 56}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 64}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 72}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 80}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 88}, {.name = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 96}, {.name = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 104}, {.name = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 112}, {.name = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t'}, .size = 8U, .offset = 120}};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static struct hinic_stats hinic_port_stats[85U] = {{.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 8}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 16}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 24}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 32}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 40}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 48}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 56}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 64}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 72}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 80}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 88}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 96}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 104}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 112}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 120}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 128}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 136}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 144}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 152}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'m', (char)'i', (char)'n', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 160}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 168}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 176}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 184}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 192}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 200}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 208}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'2', (char)'0', (char)'4', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 216}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'2', (char)'0', (char)'4', (char)'8', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 224}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'8', (char)'1', (char)'9', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 232}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'8', (char)'1', (char)'9', (char)'2', (char)'_', (char)'9', (char)'2', (char)'1', (char)'6', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 240}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'9', (char)'2', (char)'1', (char)'7', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 248}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'8', (char)'_', (char)'1', (char)'6', (char)'3', (char)'8', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 256}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 272}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 264}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 280}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 288}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 296}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 304}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'0', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 312}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 320}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'2', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 328}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'3', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 336}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 344}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'5', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 352}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'6', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 360}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'7', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 368}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 376}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'s', (char)'y', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 392}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 400}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 408}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 416}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 424}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 432}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'m', (char)'i', (char)'n', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 440}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 448}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 456}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 464}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 472}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 480}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 488}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'2', (char)'0', (char)'4', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 496}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'2', (char)'0', (char)'4', (char)'8', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 504}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'8', (char)'1', (char)'9', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 512}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'8', (char)'1', (char)'9', (char)'2', (char)'_', (char)'9', (char)'2', (char)'1', (char)'6', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 520}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'9', (char)'2', (char)'1', (char)'7', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 528}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'2', (char)'8', (char)'8', (char)'_', (char)'1', (char)'6', (char)'3', (char)'8', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 536}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 552}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 544}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 560}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 568}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 576}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 584}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'0', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 592}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 600}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'2', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 608}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'3', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 616}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 624}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'5', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 632}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'6', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 640}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'p', (char)'r', (char)'i', (char)'7', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 648}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 656}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'a', (char)'l', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 680}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'o', (char)'m', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 688}, {.name = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'o', (char)'m', (char)'_', (char)'a', (char)'p', (char)'p', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'n', (char)'u', (char)'m'}, .size = 8U, .offset = 696}};
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static struct hinic_stats hinic_tx_queue_stats[6U] = {{.name = {(char)'t', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U}, {.name = {(char)'t', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 8}, {.name = {(char)'t', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 16}, {.name = {(char)'t', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 24}, {.name = {(char)'t', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 32}, {.name = {(char)'t', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 40}};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static struct hinic_stats hinic_rx_queue_stats[5U] = {{.name = {(char)'r', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U}, {.name = {(char)'r', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 8}, {.name = {(char)'r', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 16}, {.name = {(char)'r', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 24}, {.name = {(char)'r', (char)'x', (char)'q', (char)'%', (char)'d', (char)'_'}, .size = 8U, .offset = 32}};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static void get_drv_queue_stats(struct hinic_dev *nic_dev, u64 *data)
{
  #line 603 
  struct hinic_txq_stats txq_stats;
  #line 604 
  struct hinic_rxq_stats rxq_stats;
  #line 606 
  char *p;
  #line 605 
  u16 i = (unsigned short)0U;
  #line 605 
  u16 j = (unsigned short)0U;
  #line 605 
  u16 qid = (unsigned short)0U;
  #line 608 
  qid = (unsigned short)0U;
  #line 608 
  while ((int)nic_dev->num_qps > (int)qid) {
    #line 609 
    if (nic_dev->txqs == (struct hinic_txq *)0) 
                                                #line 610 
                                                break;
    #line 612 
    hinic_txq_get_stats(nic_dev->txqs + (unsigned long)qid,& txq_stats);
    #line 613 
    j = (unsigned short)0U;
    #line 613 
    while ((unsigned int)j <= 5U) {
      #line 614 
      p = (char *)(& txq_stats) + (unsigned long)hinic_tx_queue_stats[(int)j].offset;
      #line 616 
      if (hinic_tx_queue_stats[(int)j].size == 8U) 
                                                   #line 616 
                                                   *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 616 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
      #line 613 
      j = (u16)((int)j + 1);
      #line 613 
      i = (u16)((int)i + 1);
    }
    #line 608 
    qid = (u16)((int)qid + 1);
  }
  #line 621 
  qid = (unsigned short)0U;
  #line 621 
  while ((int)nic_dev->num_qps > (int)qid) {
    #line 622 
    if (nic_dev->rxqs == (struct hinic_rxq *)0) 
                                                #line 623 
                                                break;
    #line 625 
    hinic_rxq_get_stats(nic_dev->rxqs + (unsigned long)qid,& rxq_stats);
    #line 626 
    j = (unsigned short)0U;
    #line 626 
    while ((unsigned int)j <= 4U) {
      #line 627 
      p = (char *)(& rxq_stats) + (unsigned long)hinic_rx_queue_stats[(int)j].offset;
      #line 629 
      if (hinic_rx_queue_stats[(int)j].size == 8U) 
                                                   #line 629 
                                                   *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 629 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
      #line 626 
      j = (u16)((int)j + 1);
      #line 626 
      i = (u16)((int)i + 1);
    }
    #line 621 
    qid = (u16)((int)qid + 1);
  }
  #line 633 
  return;
}

#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static void hinic_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 640 
  struct hinic_phy_port_stats *port_stats;
  #line 642 
  char *p;
  #line 643 
  int err;
  #line 638 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 639 
  struct hinic_vport_stats vport_stats = {.tx_unicast_pkts_vport = 0ULL, .tx_unicast_bytes_vport = 0ULL, .tx_multicast_pkts_vport = 0ULL, .tx_multicast_bytes_vport = 0ULL, .tx_broadcast_pkts_vport = 0ULL, .tx_broadcast_bytes_vport = 0ULL, .rx_unicast_pkts_vport = 0ULL, .rx_unicast_bytes_vport = 0ULL, .rx_multicast_pkts_vport = 0ULL, .rx_multicast_bytes_vport = 0ULL, .rx_broadcast_pkts_vport = 0ULL, .rx_broadcast_bytes_vport = 0ULL, .tx_discard_vport = 0ULL, .rx_discard_vport = 0ULL, .tx_err_vport = 0ULL, .rx_err_vport = 0ULL};
  #line 641 
  u16 i = (unsigned short)0U;
  #line 641 
  u16 j = (unsigned short)0U;
  #line 645 
  err = hinic_get_vport_stats(nic_dev,& vport_stats);
  #line 646 
  if (err != 0) 
    #line 647 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 647 
                                          netdev_err(netdev,(char *)"Failed to get vport stats from firmware\n");
  #line 650 
  j = (unsigned short)0U;
  #line 650 
  while ((unsigned int)j <= 15U) {
    #line 651 
    p = (char *)(& vport_stats) + (unsigned long)hinic_function_stats[(int)j].offset;
    #line 652 
    if (hinic_function_stats[(int)j].size == 8U) 
                                                 #line 652 
                                                 *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 652 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 650 
    j = (u16)((int)j + 1);
    #line 650 
    i = (u16)((int)i + 1);
  }
  #line 656 
  port_stats = (struct hinic_phy_port_stats *)kzalloc_0(824UL,3264U);
  #line 657 
  if (port_stats == (struct hinic_phy_port_stats *)0) {
    #line 658 
    memset((void *)(data + (unsigned long)i),0,680UL);
    #line 660 
    i = (unsigned short)((unsigned int)i + 85U);
    #line 661 
    goto get_drv_stats;
  }
  #line 664 
  err = hinic_get_phy_port_stats(nic_dev,port_stats);
  #line 665 
  if (err != 0) 
    #line 666 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 666 
                                          netdev_err(netdev,(char *)"Failed to get port stats from firmware\n");
  #line 669 
  j = (unsigned short)0U;
  #line 669 
  while ((unsigned int)j <= 84U) {
    #line 670 
    p = (char *)port_stats + (unsigned long)hinic_port_stats[(int)j].offset;
    #line 671 
    if (hinic_port_stats[(int)j].size == 8U) 
                                             #line 671 
                                             *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 671 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 669 
    j = (u16)((int)j + 1);
    #line 669 
    i = (u16)((int)i + 1);
  }
  #line 675 
  kfree((void *)port_stats);
  #line 677 
  get_drv_stats: 
                 #line 677 
  ;
  #line 678 
  get_drv_queue_stats(nic_dev,data + (unsigned long)i);
  #line 679 
  return;
}

#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static int hinic_get_sset_count(struct net_device *netdev, int sset)
{
  #line 684 
  int count;
  #line 684 
  int q_num;
  #line 683 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 686 
  switch (sset) {
    #line 687 
    case 1: 
            #line 687 
    ;
    #line 688 
    q_num = (int)nic_dev->num_qps;
    #line 689 
    count = q_num * 11 + 16;
    #line 693 
    count += 85;
    #line 695 
    return count;
    #line 696 
    default: 
             #line 696 
    ;
    #line 697 
    return -95;
  }
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static void hinic_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 706 
  u16 i;
  #line 706 
  u16 j;
  #line 704 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 705 
  char *p = (char *)data;
  #line 708 
  switch (stringset) {
    #line 709 
    case (u32)1: 
                 #line 709 
    ;
    #line 710 
    i = (unsigned short)0U;
    #line 710 
    while ((unsigned int)i <= 15U) {
      #line 711 
      memcpy((void *)p,(void *)(& hinic_function_stats[(int)i].name),32UL);
      #line 713 
      p += 32U;
      #line 710 
      i = (u16)((int)i + 1);
    }
    #line 716 
    i = (unsigned short)0U;
    #line 716 
    while ((unsigned int)i <= 84U) {
      #line 717 
      memcpy((void *)p,(void *)(& hinic_port_stats[(int)i].name),32UL);
      #line 719 
      p += 32U;
      #line 716 
      i = (u16)((int)i + 1);
    }
    #line 722 
    i = (unsigned short)0U;
    #line 722 
    while ((int)nic_dev->num_qps > (int)i) {
      #line 723 
      j = (unsigned short)0U;
      #line 723 
      while ((unsigned int)j <= 5U) {
        #line 724 
        sprintf(p,(char *)(& hinic_tx_queue_stats[(int)j].name),(int)i);
        #line 725 
        p += 32U;
        #line 723 
        j = (u16)((int)j + 1);
      }
      #line 722 
      i = (u16)((int)i + 1);
    }
    #line 729 
    i = (unsigned short)0U;
    #line 729 
    while ((int)nic_dev->num_qps > (int)i) {
      #line 730 
      j = (unsigned short)0U;
      #line 730 
      while ((unsigned int)j <= 4U) {
        #line 731 
        sprintf(p,(char *)(& hinic_rx_queue_stats[(int)j].name),(int)i);
        #line 732 
        p += 32U;
        #line 730 
        j = (u16)((int)j + 1);
      }
      #line 729 
      i = (u16)((int)i + 1);
    }
    #line 736 
    return;
    #line 737 
    default: 
             #line 737 
    ;
    #line 738 
    return;
  }
}

#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
static struct ethtool_ops hinic_ethtool_ops = {.get_drvinfo = & hinic_get_drvinfo, .get_link = & ethtool_op_get_link, .get_ringparam = & hinic_get_ringparam, .get_strings = & hinic_get_strings, .get_ethtool_stats = & hinic_get_ethtool_stats, .get_sset_count = & hinic_get_sset_count, .get_rxnfc = & hinic_get_rxnfc, .set_rxnfc = & hinic_set_rxnfc, .get_rxfh_key_size = & hinic_get_rxfh_key_size, .get_rxfh_indir_size = & hinic_get_rxfh_indir_size, .get_rxfh = & hinic_get_rxfh, .set_rxfh = & hinic_set_rxfh, .get_channels = & hinic_get_channels, .get_link_ksettings = & hinic_get_link_ksettings};
#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_ethtool.c"
void hinic_set_ethtool_ops(struct net_device *netdev)
{
  #line 761 
  netdev->ethtool_ops = & hinic_ethtool_ops;
  #line 762 
  return;
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
void emg_wrapper_hinic_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 108 
  hinic_get_channels(arg0,arg1);
  #line 109 
  return;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
void emg_wrapper_hinic_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 113 
  hinic_get_drvinfo(arg0,arg1);
  #line 114 
  return;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
void emg_wrapper_hinic_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 118 
  hinic_get_ethtool_stats(arg0,arg1,arg2);
  #line 119 
  return;
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
int emg_wrapper_hinic_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 123 
  return hinic_get_link_ksettings(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
void emg_wrapper_hinic_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 128 
  hinic_get_ringparam(arg0,arg1);
  #line 129 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
int emg_wrapper_hinic_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 133 
  return hinic_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
unsigned int emg_wrapper_hinic_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 138 
  return hinic_get_rxfh_indir_size(arg0);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
unsigned int emg_wrapper_hinic_get_rxfh_key_size(struct net_device *arg0)
{
  #line 143 
  return hinic_get_rxfh_key_size(arg0);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
int emg_wrapper_hinic_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 148 
  return hinic_get_rxnfc(arg0,arg1,arg2);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
int emg_wrapper_hinic_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 153 
  return hinic_get_sset_count(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
void emg_wrapper_hinic_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 158 
  hinic_get_strings(arg0,arg1,arg2);
  #line 159 
  return;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
int emg_wrapper_hinic_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 163 
  return hinic_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
int emg_wrapper_hinic_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 168 
  return hinic_set_rxnfc(arg0,arg1);
}

#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 267 
  ldv_bitmap_zero(dst,nbits);
  #line 268 
  return;
}

#line 552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 555 
  return ldv_kzalloc(size,flags);
}

/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_4002 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 99 
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read_1(& __num_online_cpus);
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit_0((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static bool IS_ERR_0(void *ptr);
#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 931 
char *devm_kasprintf(struct device *, gfp_t, char * , ...);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static int cif_request_irq_1(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static void *cif_free_irq_1(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  #line 2811 
  return __netdev_alloc_skb_ip_align(dev,length,2592U);
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable_0(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.h"
#line 141 
int hinic_get_rq_free_wqebbs(struct hinic_rq *rq);
#line 197 
#line 197 
struct hinic_rq_wqe *hinic_rq_get_wqe(struct hinic_rq *rq, unsigned int wqe_size, u16 *prod_idx);
#line 200 
#line 200 
void hinic_rq_write_wqe(struct hinic_rq *rq, u16 prod_idx, struct hinic_rq_wqe *rq_wqe, struct sk_buff *skb);
#line 203 
#line 203 
struct hinic_rq_wqe *hinic_rq_read_wqe(struct hinic_rq *rq, unsigned int wqe_size, struct sk_buff **skb, u16 *cons_idx);
#line 207 
#line 207 
struct hinic_rq_wqe *hinic_rq_read_next_wqe(struct hinic_rq *rq, unsigned int wqe_size, struct sk_buff **skb, u16 *cons_idx);
#line 212 
#line 212 
void hinic_rq_put_wqe(struct hinic_rq *rq, u16 cons_idx, unsigned int wqe_size);
#line 215 
#line 215 
void hinic_rq_get_sge(struct hinic_rq *rq, struct hinic_rq_wqe *rq_wqe, u16 cons_idx, struct hinic_sge *sge);
#line 218 
#line 218 
void hinic_rq_prepare_wqe(struct hinic_rq *rq, u16 prod_idx, struct hinic_rq_wqe *rq_wqe, struct hinic_sge *sge);
#line 221 
#line 221 
void hinic_rq_update(struct hinic_rq *rq, u16 prod_idx);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.h"
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
void hinic_rxq_clean_stats(struct hinic_rxq *rxq);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.h"
#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
int hinic_init_rxq(struct hinic_rxq *rxq, struct hinic_rq *rq, struct net_device *netdev);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.h"
#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
void hinic_clean_rxq(struct hinic_rxq *rxq);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
void hinic_rxq_clean_stats(struct hinic_rxq *rxq)
{
  #line 55 
  struct hinic_rxq_stats *rxq_stats = & rxq->rxq_stats;
  #line 57 
  u64_stats_init(& rxq_stats->syncp);
  #line 58 
  rxq_stats->pkts = 0ULL;
  #line 59 
  rxq_stats->bytes = 0ULL;
  #line 60 
  rxq_stats->errors = 0ULL;
  #line 61 
  rxq_stats->csum_errors = 0ULL;
  #line 62 
  rxq_stats->other_errors = 0ULL;
  #line 63 
  u64_stats_init(& rxq_stats->syncp);
  #line 64 
  return;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
void hinic_rxq_get_stats(struct hinic_rxq *rxq, struct hinic_rxq_stats *stats)
{
  #line 74 
  unsigned int start;
  #line 73 
  struct hinic_rxq_stats *rxq_stats = & rxq->rxq_stats;
  #line 76 
  u64_stats_init(& stats->syncp);
  #line 77 
  while (1) {
    #line 78 
    start = u64_stats_fetch_begin(& rxq_stats->syncp);
    #line 79 
    stats->pkts = rxq_stats->pkts;
    #line 80 
    stats->bytes = rxq_stats->bytes;
    #line 81 
    stats->errors = rxq_stats->csum_errors + rxq_stats->other_errors;
    #line 83 
    stats->csum_errors = rxq_stats->csum_errors;
    #line 84 
    stats->other_errors = rxq_stats->other_errors;
    #line 85 
    if (! ((int)u64_stats_fetch_retry(& rxq_stats->syncp,start) != 0)) 
      #line 77 
      break;
  }
  #line 86 
  u64_stats_init(& stats->syncp);
  #line 87 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void rxq_stats_init(struct hinic_rxq *rxq)
{
  #line 95 
  struct hinic_rxq_stats *rxq_stats = & rxq->rxq_stats;
  #line 97 
  u64_stats_init(& rxq_stats->syncp);
  #line 98 
  hinic_rxq_clean_stats(rxq);
  #line 99 
  return;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void rx_csum(struct hinic_rxq *rxq, u32 status, struct sk_buff *skb)
{
  #line 105 
  u32 csum_err;
  #line 104 
  struct net_device *netdev = rxq->netdev;
  #line 107 
  csum_err = status & 65535U;
  #line 109 
  if ((netdev->features & 549755813888ULL) == 0ULL) 
                                                    #line 110 
                                                    return;
  #line 112 
  if (csum_err == 0U) 
                      #line 113 
                      skb->ip_summed = (unsigned char)1U;
  else {
    #line 115 
    if (((unsigned long)csum_err & 384UL) == 0UL) 
                                                  #line 117 
                                                  (rxq->rxq_stats.csum_errors) ++;
    #line 118 
    skb->ip_summed = (unsigned char)0U;
  }
  #line 120 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static struct sk_buff *rx_alloc_skb(struct hinic_rxq *rxq, dma_addr_t *dma_addr)
{
  #line 135 
  struct sk_buff *skb;
  #line 136 
  dma_addr_t addr;
  #line 137 
  int err;
  #line 131 
  struct hinic_dev *nic_dev = netdev_priv(rxq->netdev);
  #line 132 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 133 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 134 
  struct pci_dev *pdev = hwif->pdev;
  #line 139 
  skb = netdev_alloc_skb_ip_align(rxq->netdev,(unsigned int)(rxq->rq)->buf_sz);
  #line 140 
  if (skb == (struct sk_buff *)0) {
    #line 141 
    netdev_err(rxq->netdev,(char *)"Failed to allocate Rx SKB\n");
    #line 142 
    return (struct sk_buff *)0;
  }
  #line 145 
  addr = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(rxq->rq)->buf_sz,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 147 
  err = dma_mapping_error(& pdev->dev,addr);
  #line 148 
  if (err != 0) {
    #line 149 
    _dev_err(& pdev->dev,(char *)"Failed to map Rx DMA, err = %d\n",err);
    #line 150 
    goto err_rx_map;
  }
  #line 153 
  *dma_addr = addr;
  #line 154 
  return skb;
  #line 156 
  err_rx_map: 
              #line 156 
  ;
  #line 157 
  dev_kfree_skb_any(skb);
  #line 158 
  return (struct sk_buff *)0;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void rx_unmap_skb(struct hinic_rxq *rxq, dma_addr_t dma_addr)
{
  #line 168 
  struct hinic_dev *nic_dev = netdev_priv(rxq->netdev);
  #line 169 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 170 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 171 
  struct pci_dev *pdev = hwif->pdev;
  #line 173 
  dma_unmap_single_attrs(& pdev->dev,dma_addr,(rxq->rq)->buf_sz,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 174 
  return;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void rx_free_skb(struct hinic_rxq *rxq, struct sk_buff *skb, dma_addr_t dma_addr)
{
  #line 186 
  rx_unmap_skb(rxq,dma_addr);
  #line 187 
  dev_kfree_skb_any(skb);
  #line 188 
  return;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static int rx_alloc_pkts(struct hinic_rxq *rxq)
{
  #line 199 
  struct hinic_rq_wqe *rq_wqe;
  #line 200 
  unsigned int free_wqebbs;
  #line 201 
  struct hinic_sge sge;
  #line 202 
  dma_addr_t dma_addr;
  #line 203 
  struct sk_buff *skb;
  #line 204 
  u16 prod_idx;
  #line 205 
  int i;
  #line 198 
  struct hinic_dev *nic_dev = netdev_priv(rxq->netdev);
  #line 207 
  free_wqebbs = (unsigned int)hinic_get_rq_free_wqebbs(rxq->rq);
  #line 210 
  if (nic_dev->rx_weight < free_wqebbs) 
                                        #line 211 
                                        free_wqebbs = nic_dev->rx_weight;
  #line 213 
  i = 0;
  #line 213 
  while ((unsigned int)i < free_wqebbs) {
    #line 214 
    skb = rx_alloc_skb(rxq,& dma_addr);
    #line 215 
    if (skb == (struct sk_buff *)0) {
      #line 216 
      netdev_err(rxq->netdev,(char *)"Failed to alloc Rx skb\n");
      #line 217 
      goto skb_out;
    }
    #line 220 
    hinic_set_sge(& sge,dma_addr,(int)skb->len);
    #line 222 
    rq_wqe = hinic_rq_get_wqe(rxq->rq,32U,& prod_idx);
    #line 224 
    if (rq_wqe == (struct hinic_rq_wqe *)0) {
      #line 225 
      rx_free_skb(rxq,skb,dma_addr);
      #line 226 
      goto skb_out;
    }
    #line 229 
    hinic_rq_prepare_wqe(rxq->rq,(unsigned short)((int)prod_idx),rq_wqe,& sge);
    #line 231 
    hinic_rq_write_wqe(rxq->rq,(unsigned short)((int)prod_idx),rq_wqe,skb);
    #line 213 
    i ++;
  }
  #line 234 
  skb_out: 
           #line 234 
  ;
  #line 235 
  if (i != 0) {
    #line 237 
    ldv_inline_asm();
    #line 238 
    hinic_rq_update(rxq->rq,(unsigned short)((int)prod_idx));
  }
  #line 241 
  return i;
}

#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void free_all_rx_skbs(struct hinic_rxq *rxq)
{
  #line 251 
  struct hinic_hw_wqe *hw_wqe;
  #line 252 
  struct hinic_sge sge;
  #line 253 
  u16 ci;
  #line 250 
  struct hinic_rq *rq = rxq->rq;
  #line 255 
  while (1) {
    #line 255 
    hw_wqe = hinic_read_wqe(rq->wq,32U,& ci);
    #line 255 
    if (! (hw_wqe != (struct hinic_hw_wqe *)0)) 
                                                #line 255 
                                                break;
    {
      #line 256 
      if ((int)IS_ERR_0((void *)hw_wqe) != 0) 
                                              #line 257 
                                              break;
      #line 259 
      hinic_rq_get_sge(rq,& hw_wqe->__anonCompField_hinic_hw_wqe_71.rq_wqe,(unsigned short)((int)ci),& sge);
      #line 261 
      hinic_put_wqe(rq->wq,32U);
      #line 263 
      ;
      #line 263 
      ;
      #line 263 
      rx_free_skb(rxq,*(rq->saved_skb + (unsigned long)ci),hinic_sge_to_dma(& sge));
    }
  }
  #line 265 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static int rx_recv_jumbo_pkt(struct hinic_rxq *rxq, struct sk_buff *head_skb, unsigned int left_pkt_len, u16 ci)
{
  #line 279 
  struct sk_buff *skb;
  #line 280 
  struct hinic_rq_wqe *rq_wqe;
  #line 281 
  unsigned int curr_len;
  #line 282 
  struct hinic_sge sge;
  #line 279 
  struct sk_buff *curr_skb = head_skb;
  #line 283 
  int num_wqes = 0;
  #line 285 
  while (left_pkt_len != 0U) {
    #line 286 
    rq_wqe = hinic_rq_read_next_wqe(rxq->rq,32U,& skb,& ci);
    #line 289 
    num_wqes ++;
    #line 291 
    hinic_rq_get_sge(rxq->rq,rq_wqe,(unsigned short)((int)ci),& sge);
    #line 293 
    ;
    #line 293 
    rx_unmap_skb(rxq,hinic_sge_to_dma(& sge));
    #line 295 
    __builtin_prefetch((void const *)((void *)skb->data));
    #line 297 
    if (2048U < left_pkt_len) 
                              #line 297 
                              curr_len = 2048U; else 
                                                     #line 297 
                                                     curr_len = left_pkt_len;
    #line 300 
    left_pkt_len -= curr_len;
    #line 302 
    __skb_put(skb,curr_len);
    #line 304 
    if (curr_skb == head_skb) {
      #line 305 
      ((struct skb_shared_info *)skb_end_pointer(head_skb))->frag_list = skb;
    }
    else 
         #line 307 
         curr_skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_1068_87.next = skb;
    #line 309 
    head_skb->len += skb->len;
    #line 310 
    head_skb->data_len += skb->len;
    #line 311 
    head_skb->truesize += skb->truesize;
    #line 313 
    curr_skb = skb;
  }
  #line 316 
  return num_wqes;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static int rxq_recv(struct hinic_rxq *rxq, int budget)
{
  #line 328 
  void *__mptr;
  #line 332 
  struct hinic_rq_wqe *rq_wqe;
  #line 333 
  unsigned int free_wqebbs;
  #line 334 
  struct hinic_rq_cqe *cqe;
  #line 335 
  int num_wqes;
  #line 336 
  struct hinic_sge sge;
  #line 337 
  unsigned int status;
  #line 338 
  struct sk_buff *skb;
  #line 339 
  u32 offload_type;
  #line 340 
  u16 ci;
  #line 340 
  u16 num_lro;
  #line 342 
  u32 vlan_len;
  #line 343 
  u16 vid;
  #line 328 
  __mptr = (void *)rxq->rq;
  #line 328 
  struct hinic_qp *qp = ((struct hinic_qp *)(__mptr + 18446744073709551560U));
  #line 329 
  struct net_device *netdev = rxq->netdev;
  #line 330 
  u64 pkt_len = 0ULL;
  #line 330 
  u64 rx_bytes = 0ULL;
  #line 331 
  struct hinic_rq *rq = rxq->rq;
  #line 335 
  int pkts = 0;
  #line 341 
  u16 num_wqe = (unsigned short)0U;
  #line 345 
  while (pkts < budget) {
    #line 346 
    num_wqes = 0;
    #line 348 
    rq_wqe = hinic_rq_read_wqe(rxq->rq,32U,& skb,& ci);
    #line 350 
    if (rq_wqe == (struct hinic_rq_wqe *)0) 
                                            #line 351 
                                            break;
    #line 353 
    cqe = *(rq->cqe + (unsigned long)ci);
    #line 354 
    status = __builtin_bswap32(cqe->status);
    #line 355 
    hinic_rq_get_sge(rxq->rq,rq_wqe,(unsigned short)((int)ci),& sge);
    #line 357 
    ;
    #line 357 
    rx_unmap_skb(rxq,hinic_sge_to_dma(& sge));
    #line 359 
    rx_csum(rxq,status,skb);
    #line 361 
    __builtin_prefetch((void const *)((void *)skb->data));
    #line 363 
    pkt_len = (unsigned long long)sge.len;
    #line 365 
    if (pkt_len <= 2048ULL) 
                            #line 366 
                            __skb_put(skb,(unsigned int)pkt_len);
    else {
      #line 368 
      __skb_put(skb,2048U);
      #line 369 
      num_wqes = rx_recv_jumbo_pkt(rxq,skb,(unsigned int)pkt_len + 4294965248U,(unsigned short)((int)ci));
    }
    #line 373 
    hinic_rq_put_wqe(rq,(unsigned short)((int)ci),(unsigned int)((num_wqes + 1) * 32));
    #line 376 
    offload_type = __builtin_bswap32(cqe->offload_type);
    #line 377 
    vlan_len = __builtin_bswap32(cqe->len);
    #line 378 
    if ((netdev->features & 256ULL) != 0ULL && (offload_type & 2097152U) != 0U) {
      #line 380 
      vid = (unsigned short)vlan_len;
      #line 381 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
    }
    #line 384 
    skb_record_rx_queue(skb,(unsigned short)((int)qp->q_id));
    #line 385 
    skb->protocol = eth_type_trans(skb,rxq->netdev);
    #line 387 
    napi_gro_receive(& rxq->napi,skb);
    #line 389 
    pkts ++;
    #line 390 
    rx_bytes += pkt_len;
    #line 392 
    num_lro = (unsigned short)((unsigned int)((unsigned short)(status >> 16)) & 255U);
    #line 393 
    if ((unsigned int)num_lro != 0U) {
      #line 394 
      int tmp_2;
      #line 394 
      if ((__builtin_bswap32(cqe->offload_type) & 4095U) == 7U) 
                                                                #line 394 
                                                                tmp_2 = 86; else 
                                                                    #line 394 
                                                                    tmp_2 = 66;
      #line 394 
      rx_bytes = (unsigned long long)(((int)num_lro + -1) * tmp_2) + rx_bytes;
      #line 397 
      num_wqe = (unsigned short)(((int)((unsigned short)(pkt_len >> rxq->rx_buff_shift)) + (((unsigned long long)((int)rxq->buf_len + -1) & pkt_len) != 0ULL)) + (int)num_wqe);
    }
    #line 402 
    cqe->status = 0U;
    #line 404 
    if ((unsigned int)num_wqe > 255U) 
                                      #line 405 
                                      break;
  }
  #line 408 
  free_wqebbs = (unsigned int)hinic_get_rq_free_wqebbs(rxq->rq);
  #line 409 
  if (free_wqebbs > 16U) 
                         #line 410 
                         rx_alloc_pkts(rxq);
  #line 412 
  u64_stats_init(& rxq->rxq_stats.syncp);
  #line 413 
  rxq->rxq_stats.pkts += (unsigned long long)pkts;
  #line 414 
  rxq->rxq_stats.bytes += rx_bytes;
  #line 415 
  u64_stats_init(& rxq->rxq_stats.syncp);
  #line 417 
  return pkts;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static int rx_poll(struct napi_struct *napi, int budget)
{
  #line 422 
  void *__mptr;
  #line 425 
  int pkts;
  #line 422 
  __mptr = (void *)napi;
  #line 422 
  struct hinic_rxq *rxq = ((struct hinic_rxq *)(__mptr + 18446744073709551536U));
  #line 423 
  struct hinic_dev *nic_dev = netdev_priv(rxq->netdev);
  #line 424 
  struct hinic_rq *rq = rxq->rq;
  #line 427 
  pkts = rxq_recv(rxq,budget);
  #line 428 
  if (pkts >= budget) 
                      #line 429 
                      return budget;
  #line 431 
  napi_complete(napi);
  #line 432 
  hinic_hwdev_set_msix_state(nic_dev->hwdev,(unsigned short)((int)rq->msix_entry),(enum hinic_msix_state)HINIC_MSIX_ENABLE);
  #line 436 
  return pkts;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void rx_add_napi(struct hinic_rxq *rxq)
{
  #line 441 
  struct hinic_dev *nic_dev = netdev_priv(rxq->netdev);
  #line 443 
  netif_napi_add(rxq->netdev,& rxq->napi,& rx_poll,(int)nic_dev->rx_weight);
  #line 444 
  napi_enable_0(& rxq->napi);
  #line 445 
  return;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void rx_del_napi(struct hinic_rxq *rxq)
{
  #line 449 
  napi_disable(& rxq->napi);
  #line 450 
  netif_napi_del(& rxq->napi);
  #line 451 
  return;
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static irqreturn_t rx_irq(int irq, void *data)
{
  #line 457 
  struct hinic_dev *nic_dev;
  #line 455 
  struct hinic_rxq *rxq = (struct hinic_rxq *)data;
  #line 456 
  struct hinic_rq *rq = rxq->rq;
  #line 460 
  nic_dev = (struct hinic_dev *)netdev_priv(rxq->netdev);
  #line 461 
  hinic_hwdev_set_msix_state(nic_dev->hwdev,(unsigned short)((int)rq->msix_entry),(enum hinic_msix_state)HINIC_MSIX_DISABLE);
  #line 465 
  nic_dev = (struct hinic_dev *)netdev_priv(rxq->netdev);
  #line 466 
  hinic_hwdev_msix_cnt_set(nic_dev->hwdev,(unsigned short)((int)rq->msix_entry));
  #line 468 
  napi_schedule(& rxq->napi);
  #line 469 
  return IRQ_HANDLED;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static int rx_request_irq(struct hinic_rxq *rxq)
{
  #line 494 
  void *__mptr;
  #line 477 
  struct hinic_qp *qp;
  #line 478 
  struct cpumask mask;
  #line 479 
  int err;
  #line 474 
  struct hinic_dev *nic_dev = netdev_priv(rxq->netdev);
  #line 475 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 476 
  struct hinic_rq *rq = rxq->rq;
  #line 481 
  rx_add_napi(rxq);
  #line 483 
  hinic_hwdev_msix_set(hwdev,(unsigned short)((int)rq->msix_entry),(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 488 
  err = cif_request_irq_1(rq->irq,& rx_irq,0UL,rxq->irq_name,(void *)rxq);
  #line 489 
  if (err != 0) {
    #line 490 
    rx_del_napi(rxq);
    #line 491 
    return err;
  }
  #line 494 
  __mptr = (void *)rq;
  #line 494 
  qp = ((struct hinic_qp *)(__mptr + 18446744073709551560U));
  #line 495 
  ;
  #line 495 
  cpumask_set_cpu((unsigned int)qp->q_id % num_online_cpus(),& mask);
  #line 496 
  return irq_set_affinity_hint(rq->irq,& mask);
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
static void rx_free_irq(struct hinic_rxq *rxq)
{
  #line 501 
  struct hinic_rq *rq = rxq->rq;
  #line 503 
  irq_set_affinity_hint(rq->irq,(struct cpumask *)0);
  #line 504 
  cif_free_irq_1(rq->irq,(void *)rxq);
  #line 505 
  rx_del_napi(rxq);
  #line 506 
  return;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
int hinic_init_rxq(struct hinic_rxq *rxq, struct hinic_rq *rq, struct net_device *netdev)
{
  #line 519 
  void *__mptr;
  #line 520 
  int err;
  #line 520 
  int pkts;
  #line 519 
  __mptr = (void *)rq;
  #line 519 
  struct hinic_qp *qp = ((struct hinic_qp *)(__mptr + 18446744073709551560U));
  #line 522 
  rxq->netdev = netdev;
  #line 523 
  rxq->rq = rq;
  #line 524 
  rxq->buf_len = (unsigned short)2048U;
  #line 525 
  rxq->rx_buff_shift = 11U;
  #line 527 
  rxq_stats_init(rxq);
  #line 529 
  rxq->irq_name = devm_kasprintf(& netdev->dev,3264U,(char *)"hinic_rxq%d",(int)qp->q_id);
  #line 531 
  if (rxq->irq_name == (char *)0) 
                                  #line 532 
                                  return -12;
  #line 534 
  pkts = rx_alloc_pkts(rxq);
  #line 535 
  if (pkts == 0) {
    #line 536 
    err = -12;
    #line 537 
    goto err_rx_pkts;
  }
  #line 540 
  err = rx_request_irq(rxq);
  #line 541 
  if (err != 0) {
    #line 542 
    netdev_err(netdev,(char *)"Failed to request Rx irq\n");
    #line 543 
    goto err_req_rx_irq;
  }
  #line 546 
  return 0;
  #line 548 
  err_req_rx_irq: 
                  #line 548 
  ;
  #line 549 
  err_rx_pkts: 
               #line 549 
  ;
  #line 550 
  free_all_rx_skbs(rxq);
  #line 551 
  devm_kfree(& netdev->dev,(void *)rxq->irq_name);
  #line 552 
  return err;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_rx.c"
void hinic_clean_rxq(struct hinic_rxq *rxq)
{
  #line 561 
  struct net_device *netdev = rxq->netdev;
  #line 563 
  rx_free_irq(rxq);
  #line 565 
  free_all_rx_skbs(rxq);
  #line 566 
  devm_kfree(& netdev->dev,(void *)rxq->irq_name);
  #line 567 
  return;
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
enum irqreturn emg_wrapper_rx_irq(int arg0, void *arg1)
{
  #line 108 
  return rx_irq(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 130 
  ldv_set_bit(nr,addr);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 137 
  ldv_clear_bit(nr,addr);
  #line 138 
  return;
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 228 
  return ldv_is_err(ptr);
}

#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static int cif_request_irq_1(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 669 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_rx.i.aux"
static void *cif_free_irq_1(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 677 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_2(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_4706 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_2(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_2(v);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static bool IS_ERR_1(void *ptr);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 515  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_lock_cmdq_lock_of_hinic_cmdq(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_lock_bh_cmdq_lock_of_hinic_cmdq(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 524  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_unlock_cmdq_lock_of_hinic_cmdq(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 506  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_unlock_bh_cmdq_lock_of_hinic_cmdq(spinlock_t *lock);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 533  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void *cif_vzalloc_0(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 540  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_vfree_0(void *addr);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 547  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dmapool.h"
#line 21 
struct dma_pool *dma_pool_create(char *, struct device *, size_t, size_t, size_t);
#line 24 
#line 24 
void dma_pool_destroy(struct dma_pool *);
#line 26 
#line 26 
void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);
#line 28 
#line 28 
void dma_pool_free(struct dma_pool *, void *, dma_addr_t);
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.h"
#line 134 
int hinic_msg_to_mgmt(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod, u8 cmd, void *buf_in, u16 in_size, void *buf_out, u16 *out_size, enum hinic_mgmt_msg_type sync);
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.h"
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
int hinic_set_arm_bit(struct hinic_cmdqs *cmdqs, enum hinic_set_arm_qtype q_type, u32 q_id);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
int hinic_alloc_cmdq_buf(struct hinic_cmdqs *cmdqs, struct hinic_cmdq_buf *cmdq_buf)
{
  #line 134 
  struct hinic_hwif *hwif = cmdqs->hwif;
  #line 135 
  struct pci_dev *pdev = hwif->pdev;
  #line 137 
  cmdq_buf->buf = dma_pool_alloc(cmdqs->cmdq_buf_pool,3264U,& cmdq_buf->dma_addr);
  #line 139 
  if (cmdq_buf->buf == (void *)0) {
    #line 140 
    _dev_err(& pdev->dev,(char *)"Failed to allocate cmd from the pool\n");
    #line 141 
    return -12;
  }
  #line 144 
  return 0;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
void hinic_free_cmdq_buf(struct hinic_cmdqs *cmdqs, struct hinic_cmdq_buf *cmdq_buf)
{
  #line 155 
  dma_pool_free(cmdqs->cmdq_buf_pool,cmdq_buf->buf,cmdq_buf->dma_addr);
  #line 156 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static unsigned int cmdq_wqe_size_from_bdlen(enum bufdesc_len len)
{
  #line 160 
  unsigned int wqe_size = 0U;
  #line 162 
  switch ((unsigned int)len) {
    #line 163 
    case (unsigned int)2: 
                          #line 163 
    ;
    #line 164 
    wqe_size = 64U;
    #line 165 
    break;
    #line 166 
    case (unsigned int)3: 
                          #line 166 
    ;
    #line 167 
    wqe_size = 64U;
    #line 168 
    break;
  }
  #line 171 
  return wqe_size;
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_set_sge_completion(struct hinic_cmdq_completion *completion, struct hinic_cmdq_buf *buf_out)
{
  #line 177 
  struct hinic_sge_resp *sge_resp = & completion->__anonCompField_hinic_cmdq_completion_69.sge_resp;
  #line 179 
  hinic_set_sge(& sge_resp->sge,buf_out->dma_addr,(int)buf_out->size);
  #line 180 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_prepare_wqe_ctrl(struct hinic_cmdq_wqe *wqe, int wrapped, enum hinic_cmd_ack_type ack_type, enum hinic_mod_type mod, u8 cmd, u16 prod_idx, enum completion_format complete_format, enum data_format data_format, enum bufdesc_len buf_len)
{
  #line 189 
  struct hinic_cmdq_wqe_lcmd *wqe_lcmd;
  #line 190 
  struct hinic_cmdq_wqe_scmd *wqe_scmd;
  #line 191 
  enum ctrl_sect_len ctrl_len;
  #line 192 
  struct hinic_ctrl *ctrl;
  #line 193 
  u32 saved_data;
  #line 195 
  if (data_format == (unsigned int)DATA_SGE) {
    #line 196 
    wqe_lcmd = & wqe->__anonCompField_hinic_cmdq_wqe_70.wqe_lcmd;
    #line 198 
    wqe_lcmd->status.status_info = 0U;
    #line 199 
    ctrl = & wqe_lcmd->ctrl;
    #line 200 
    ctrl_len = CTRL_SECT_LEN;
  }
  else {
    #line 202 
    wqe_scmd = & wqe->__anonCompField_hinic_cmdq_wqe_70.direct_wqe.wqe_scmd;
    #line 204 
    wqe_scmd->status.status_info = 0U;
    #line 205 
    ctrl = & wqe_scmd->ctrl;
    #line 206 
    ctrl_len = CTRL_DIRECT_SECT_LEN;
  }
  #line 209 
  ctrl->ctrl_info = (((unsigned int)prod_idx | ((unsigned int)cmd << 16)) | (((unsigned int)mod << 24) & 520093696U)) | (((unsigned int)ack_type << 29) & 1610612736U);
  #line 214 
  ((struct hinic_cmdq_header *)wqe)->header_info = ((((((unsigned int)buf_len & 255U) | (((unsigned int)complete_format << 15) & 65535U)) | (((unsigned int)data_format << 22) & 4194304U)) | (((unsigned int)ctrl_len << 29) & 1610612736U)) | ((unsigned int)wrapped << 31)) | 411041792U;
  #line 223 
  saved_data = ((struct hinic_cmdq_header *)wqe)->saved_data;
  #line 224 
  saved_data &= 2147483647U;
  #line 226 
  if ((unsigned int)cmd == 2U && mod == (unsigned int)HINIC_MOD_COMM) 
    #line 227 
    ((struct hinic_cmdq_header *)wqe)->saved_data |= 2147483648U; else 
                                                                    #line 230 
                                                                    ((struct hinic_cmdq_header *)wqe)->saved_data = saved_data;
  #line 231 
  return;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_set_lcmd_bufdesc(struct hinic_cmdq_wqe_lcmd *wqe_lcmd, struct hinic_cmdq_buf *buf_in)
{
  #line 236 
  hinic_set_sge(& wqe_lcmd->buf_desc.sge,buf_in->dma_addr,(int)buf_in->size);
  #line 237 
  return;
}

#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_set_direct_wqe_data(struct hinic_cmdq_direct_wqe *wqe, void *buf_in, u32 in_size)
{
  #line 242 
  struct hinic_cmdq_wqe_scmd *wqe_scmd = & wqe->wqe_scmd;
  #line 244 
  wqe_scmd->buf_desc.buf_len = in_size;
  #line 245 
  memcpy((void *)(& wqe_scmd->buf_desc.data),buf_in,(unsigned long)in_size);
  #line 246 
  return;
}

#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_set_lcmd_wqe(struct hinic_cmdq_wqe *wqe, enum cmdq_cmd_type cmd_type, struct hinic_cmdq_buf *buf_in, struct hinic_cmdq_buf *buf_out, int wrapped, enum hinic_cmd_ack_type ack_type, enum hinic_mod_type mod, u8 cmd, u16 prod_idx)
{
  #line 256 
  enum completion_format complete_format;
  #line 255 
  struct hinic_cmdq_wqe_lcmd *wqe_lcmd = & wqe->__anonCompField_hinic_cmdq_wqe_70.wqe_lcmd;
  #line 258 
  switch ((unsigned int)cmd_type) {
    #line 259 
    case (unsigned int)1: 
                          #line 259 
    ;
    #line 260 
    complete_format = COMPLETE_SGE;
    #line 261 
    cmdq_set_sge_completion(& wqe_lcmd->completion,buf_out);
    #line 262 
    break;
    #line 263 
    case (unsigned int)0: 
                          #line 263 
    ;
    #line 264 
    complete_format = COMPLETE_DIRECT;
    #line 265 
    wqe_lcmd->completion.__anonCompField_hinic_cmdq_completion_69.direct_resp = 0ULL;
    #line 266 
    break;
  }
  #line 269 
  cmdq_prepare_wqe_ctrl(wqe,wrapped,ack_type,mod,(unsigned char)((int)cmd),(unsigned short)((int)prod_idx),complete_format,(enum data_format)DATA_SGE,(enum bufdesc_len)BUFDESC_LCMD_LEN);
  #line 273 
  cmdq_set_lcmd_bufdesc(wqe_lcmd,buf_in);
  #line 274 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_set_direct_wqe(struct hinic_cmdq_wqe *wqe, enum cmdq_cmd_type cmd_type, void *buf_in, u16 in_size, struct hinic_cmdq_buf *buf_out, int wrapped, enum hinic_cmd_ack_type ack_type, enum hinic_mod_type mod, u8 cmd, u16 prod_idx)
{
  #line 284 
  enum completion_format complete_format;
  #line 285 
  struct hinic_cmdq_wqe_scmd *wqe_scmd;
  #line 283 
  struct hinic_cmdq_direct_wqe *direct_wqe = & wqe->__anonCompField_hinic_cmdq_wqe_70.direct_wqe;
  #line 287 
  wqe_scmd = & direct_wqe->wqe_scmd;
  #line 289 
  switch ((unsigned int)cmd_type) {
    #line 290 
    case (unsigned int)1: 
                          #line 290 
    ;
    #line 291 
    complete_format = COMPLETE_SGE;
    #line 292 
    cmdq_set_sge_completion(& wqe_scmd->completion,buf_out);
    #line 293 
    break;
    #line 294 
    case (unsigned int)0: 
                          #line 294 
    ;
    #line 295 
    complete_format = COMPLETE_DIRECT;
    #line 296 
    wqe_scmd->completion.__anonCompField_hinic_cmdq_completion_69.direct_resp = 0ULL;
    #line 297 
    break;
  }
  #line 300 
  cmdq_prepare_wqe_ctrl(wqe,wrapped,ack_type,mod,(unsigned char)((int)cmd),(unsigned short)((int)prod_idx),complete_format,(enum data_format)DATA_DIRECT,(enum bufdesc_len)BUFDESC_SCMD_LEN);
  #line 303 
  cmdq_set_direct_wqe_data(direct_wqe,buf_in,(unsigned int)in_size);
  #line 304 
  return;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_wqe_fill(void *dst, void *src)
{
  #line 308 
  memcpy(dst + 8UL,src + 8UL,56UL);
  #line 309 
  ldv_inline_asm();
  #line 313 
  *((u64 *)dst) = *((u64 *)src);
  #line 314 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_fill_db(u32 *db_info, enum hinic_cmdq_type cmdq_type, u16 prod_idx)
{
  #line 319 
  *db_info = ((unsigned int)((int)prod_idx >> 8) & 255U) | (((unsigned int)cmdq_type << 24) & 117440512U);
  #line 322 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_set_db(struct hinic_cmdq *cmdq, enum hinic_cmdq_type cmdq_type, u16 prod_idx)
{
  #line 328 
  u32 db_info;
  #line 330 
  cmdq_fill_db(& db_info,cmdq_type,(unsigned short)((int)prod_idx));
  #line 333 
  db_info = __builtin_bswap32(db_info);
  #line 334 
  ldv_inline_asm();
  #line 337 
  writel(db_info,cmdq->db_base + ((unsigned long)((int)prod_idx << 3) & (unsigned long)2040U));
  #line 338 
  return;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static int cmdq_sync_cmd_direct_resp(struct hinic_cmdq *cmdq, enum hinic_mod_type mod, u8 cmd, struct hinic_cmdq_buf *buf_in, u64 *resp)
{
  #line 345 
  struct hinic_cmdq_wqe *curr_cmdq_wqe;
  #line 345 
  struct hinic_cmdq_wqe cmdq_wqe;
  #line 346 
  u16 curr_prod_idx;
  #line 346 
  u16 next_prod_idx;
  #line 347 
  int errcode;
  #line 347 
  int wrapped;
  #line 347 
  int num_wqebbs;
  #line 349 
  struct hinic_hw_wqe *hw_wqe;
  #line 350 
  struct completion done;
  #line 348 
  struct hinic_wq *wq = cmdq->wq;
  #line 353 
  cif_spin_lock_bh_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
  #line 356 
  hw_wqe = hinic_get_wqe(wq,64U,& curr_prod_idx);
  #line 357 
  if ((int)IS_ERR_1((void *)hw_wqe) != 0) {
    #line 358 
    cif_spin_unlock_bh_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
    #line 359 
    return -16;
  }
  #line 362 
  curr_cmdq_wqe = & hw_wqe->__anonCompField_hinic_hw_wqe_71.cmdq_wqe;
  #line 364 
  wrapped = cmdq->wrapped;
  #line 366 
  num_wqebbs = (((int)wq->wqebb_size + 63) & - ((int)wq->wqebb_size)) / (int)wq->wqebb_size;
  #line 367 
  next_prod_idx = (unsigned short)((int)((unsigned short)num_wqebbs) + (int)curr_prod_idx);
  #line 368 
  if ((int)wq->q_depth <= (int)next_prod_idx) {
    #line 369 
    cmdq->wrapped = cmdq->wrapped == 0;
    #line 370 
    next_prod_idx = (unsigned short)((int)next_prod_idx - (int)wq->q_depth);
  }
  #line 373 
  *(cmdq->errcode + (unsigned long)curr_prod_idx) = & errcode;
  #line 375 
  __init_completion(& done);
  #line 376 
  *(cmdq->done + (unsigned long)curr_prod_idx) = & done;
  #line 378 
  cmdq_set_lcmd_wqe(& cmdq_wqe,(enum cmdq_cmd_type)CMDQ_CMD_SYNC_DIRECT_RESP,buf_in,(struct hinic_cmdq_buf *)0,wrapped,(enum hinic_cmd_ack_type)HINIC_CMD_ACK_TYPE_CMDQ,mod,(unsigned char)((int)cmd),(unsigned short)((int)curr_prod_idx));
  #line 383 
  hinic_cpu_to_be32((void *)(& cmdq_wqe),64);
  #line 386 
  cmdq_wqe_fill((void *)curr_cmdq_wqe,(void *)(& cmdq_wqe));
  #line 388 
  cmdq_set_db(cmdq,(enum hinic_cmdq_type)HINIC_CMDQ_SYNC,(unsigned short)((int)next_prod_idx));
  #line 390 
  cif_spin_unlock_bh_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
  #line 392 
  if (wait_for_completion_timeout(& done,1000UL) == 0UL) {
    #line 393 
    cif_spin_lock_bh_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
    #line 395 
    if (*(cmdq->errcode + (unsigned long)curr_prod_idx) == & errcode) 
      #line 396 
      *(cmdq->errcode + (unsigned long)curr_prod_idx) = (int *)0;
    #line 398 
    if (*(cmdq->done + (unsigned long)curr_prod_idx) == & done) 
                                                                #line 399 
                                                                *(cmdq->done + (unsigned long)curr_prod_idx) = (struct completion *)0;
    #line 401 
    cif_spin_unlock_bh_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
    #line 403 
    return -110;
  }
  #line 405 
  ldv_inline_asm();
  #line 408 
  if (resp != (u64 *)0ULL) {
    #line 409 
    struct hinic_cmdq_wqe_lcmd *wqe_lcmd = & curr_cmdq_wqe->__anonCompField_hinic_cmdq_wqe_70.wqe_lcmd;
    #line 411 
    *resp = (u64)__builtin_bswap64((unsigned long)wqe_lcmd->completion.__anonCompField_hinic_cmdq_completion_69.direct_resp);
  }
  #line 414 
  if (errcode != 0) 
                    #line 415 
                    return -14;
  #line 417 
  return 0;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static int cmdq_set_arm_bit(struct hinic_cmdq *cmdq, void *buf_in, u16 in_size)
{
  #line 423 
  struct hinic_cmdq_wqe *curr_cmdq_wqe;
  #line 423 
  struct hinic_cmdq_wqe cmdq_wqe;
  #line 424 
  u16 curr_prod_idx;
  #line 424 
  u16 next_prod_idx;
  #line 426 
  struct hinic_hw_wqe *hw_wqe;
  #line 427 
  int wrapped;
  #line 427 
  int num_wqebbs;
  #line 425 
  struct hinic_wq *wq = cmdq->wq;
  #line 430 
  cif_spin_lock_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
  #line 433 
  hw_wqe = hinic_get_wqe(wq,64U,& curr_prod_idx);
  #line 434 
  if ((int)IS_ERR_1((void *)hw_wqe) != 0) {
    #line 435 
    cif_spin_unlock_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
    #line 436 
    return -16;
  }
  #line 439 
  curr_cmdq_wqe = & hw_wqe->__anonCompField_hinic_hw_wqe_71.cmdq_wqe;
  #line 441 
  wrapped = cmdq->wrapped;
  #line 443 
  num_wqebbs = (((int)wq->wqebb_size + 63) & - ((int)wq->wqebb_size)) / (int)wq->wqebb_size;
  #line 444 
  next_prod_idx = (unsigned short)((int)((unsigned short)num_wqebbs) + (int)curr_prod_idx);
  #line 445 
  if ((int)wq->q_depth <= (int)next_prod_idx) {
    #line 446 
    cmdq->wrapped = cmdq->wrapped == 0;
    #line 447 
    next_prod_idx = (unsigned short)((int)next_prod_idx - (int)wq->q_depth);
  }
  #line 450 
  cmdq_set_direct_wqe(& cmdq_wqe,(enum cmdq_cmd_type)CMDQ_CMD_SYNC_DIRECT_RESP,buf_in,(unsigned short)((int)in_size),(struct hinic_cmdq_buf *)0,wrapped,(enum hinic_cmd_ack_type)HINIC_CMD_ACK_TYPE_CMDQ,(enum hinic_mod_type)HINIC_MOD_COMM,(unsigned char)2,(unsigned short)((int)curr_prod_idx));
  #line 455 
  hinic_cpu_to_be32((void *)(& cmdq_wqe),64);
  #line 458 
  cmdq_wqe_fill((void *)curr_cmdq_wqe,(void *)(& cmdq_wqe));
  #line 460 
  cmdq_set_db(cmdq,(enum hinic_cmdq_type)HINIC_CMDQ_SYNC,(unsigned short)((int)next_prod_idx));
  #line 462 
  cif_spin_unlock_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
  #line 463 
  return 0;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static int cmdq_params_valid(struct hinic_cmdq_buf *buf_in)
{
  #line 468 
  if (buf_in->size > 2040UL) 
                             #line 469 
                             return -22;
  #line 471 
  return 0;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
int hinic_cmdq_direct_resp(struct hinic_cmdqs *cmdqs, enum hinic_mod_type mod, u8 cmd, struct hinic_cmdq_buf *buf_in, u64 *resp)
{
  #line 490 
  int err;
  #line 488 
  struct hinic_hwif *hwif = cmdqs->hwif;
  #line 489 
  struct pci_dev *pdev = hwif->pdev;
  #line 492 
  err = cmdq_params_valid(buf_in);
  #line 493 
  if (err != 0) {
    #line 494 
    _dev_err(& pdev->dev,(char *)"Invalid CMDQ parameters\n");
    #line 495 
    return err;
  }
  #line 498 
  return cmdq_sync_cmd_direct_resp(& cmdqs->cmdq[0],mod,
                                (unsigned char)((int)cmd),buf_in,resp);
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
int hinic_set_arm_bit(struct hinic_cmdqs *cmdqs, enum hinic_set_arm_qtype q_type, u32 q_id)
{
  #line 516 
  struct hinic_cmdq_arm_bit arm_bit;
  #line 517 
  int err;
  #line 513 
  struct hinic_cmdq *cmdq = & cmdqs->cmdq[0];
  #line 514 
  struct hinic_hwif *hwif = cmdqs->hwif;
  #line 515 
  struct pci_dev *pdev = hwif->pdev;
  #line 519 
  arm_bit.q_type = (unsigned int)q_type;
  #line 520 
  arm_bit.q_id = q_id;
  #line 522 
  err = cmdq_set_arm_bit(cmdq,(void *)(& arm_bit),(unsigned short)8);
  #line 523 
  if (err != 0) {
    #line 524 
    _dev_err(& pdev->dev,(char *)"Failed to set arm for qid %d\n",q_id);
    #line 525 
    return err;
  }
  #line 528 
  return 0;
}

#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void clear_wqe_complete_bit(struct hinic_cmdq *cmdq, struct hinic_cmdq_wqe *wqe)
{
  #line 535 
  unsigned int bufdesc_len;
  #line 535 
  unsigned int wqe_size;
  #line 536 
  struct hinic_ctrl *ctrl;
  #line 534 
  u32 header_info = __builtin_bswap32(((struct hinic_cmdq_header *)wqe)->header_info);
  #line 538 
  bufdesc_len = header_info & 255U;
  #line 539 
  wqe_size = cmdq_wqe_size_from_bdlen((enum bufdesc_len)bufdesc_len);
  #line 540 
  if (wqe_size == 64U) {
    #line 541 
    struct hinic_cmdq_wqe_lcmd *wqe_lcmd = & wqe->__anonCompField_hinic_cmdq_wqe_70.wqe_lcmd;
    #line 543 
    ctrl = & wqe_lcmd->ctrl;
  }
  else {
    #line 546 
    struct hinic_cmdq_wqe_scmd *wqe_scmd;
    #line 545 
    struct hinic_cmdq_direct_wqe *direct_wqe = & wqe->__anonCompField_hinic_cmdq_wqe_70.direct_wqe;
    #line 548 
    wqe_scmd = & direct_wqe->wqe_scmd;
    #line 549 
    ctrl = & wqe_scmd->ctrl;
  }
  #line 553 
  ctrl->ctrl_info = 0U;
  #line 554 
  ldv_inline_asm();
  #line 555 
  return;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static int cmdq_arm_ceq_handler(struct hinic_cmdq *cmdq, struct hinic_cmdq_wqe *wqe)
{
  #line 569 
  struct hinic_cmdq_wqe_scmd *wqe_scmd;
  #line 570 
  struct hinic_ctrl *ctrl;
  #line 571 
  u32 ctrl_info;
  #line 568 
  struct hinic_cmdq_direct_wqe *direct_wqe = & wqe->__anonCompField_hinic_cmdq_wqe_70.direct_wqe;
  #line 573 
  wqe_scmd = & direct_wqe->wqe_scmd;
  #line 574 
  ctrl = & wqe_scmd->ctrl;
  #line 575 
  ctrl_info = __builtin_bswap32(ctrl->ctrl_info);
  #line 578 
  if (ctrl_info >= (u32)0) 
                           #line 579 
                           return -16;
  #line 581 
  clear_wqe_complete_bit(cmdq,wqe);
  #line 583 
  hinic_put_wqe(cmdq->wq,64U);
  #line 584 
  return 0;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_update_errcode(struct hinic_cmdq *cmdq, u16 prod_idx, int errcode)
{
  #line 590 
  if (*(cmdq->errcode + (unsigned long)prod_idx) != (int *)0) 
                                                              #line 591 
                                                              *(*(cmdq->errcode + (unsigned long)prod_idx)) = errcode;
  #line 592 
  return;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_sync_cmd_handler(struct hinic_cmdq *cmdq, u16 cons_idx, int errcode)
{
  #line 603 
  u16 prod_idx = cons_idx;
  #line 605 
  cif_spin_lock_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
  #line 606 
  cmdq_update_errcode(cmdq,(unsigned short)((int)prod_idx),errcode);
  #line 607 
  ldv_inline_asm();
  #line 610 
  if (*(cmdq->done + (unsigned long)prod_idx) != (struct completion *)0) 
    #line 611 
    complete(*(cmdq->done + (unsigned long)prod_idx));
  #line 612 
  cif_spin_unlock_cmdq_lock_of_hinic_cmdq(& cmdq->cmdq_lock);
  #line 613 
  return;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static int cmdq_cmd_ceq_handler(struct hinic_cmdq *cmdq, u16 ci, struct hinic_cmdq_wqe *cmdq_wqe)
{
  #line 621 
  int errcode;
  #line 618 
  struct hinic_cmdq_wqe_lcmd *wqe_lcmd = & cmdq_wqe->__anonCompField_hinic_cmdq_wqe_70.wqe_lcmd;
  #line 619 
  struct hinic_status *status = & wqe_lcmd->status;
  #line 620 
  struct hinic_ctrl *ctrl = & wqe_lcmd->ctrl;
  #line 623 
  if (__builtin_bswap32(ctrl->ctrl_info) >= (unsigned int)0) 
                                                             #line 624 
                                                             return -16;
  #line 626 
  errcode = (int)(__builtin_bswap32(status->status_info) >> 20) & 15;
  #line 628 
  cmdq_sync_cmd_handler(cmdq,(unsigned short)((int)ci),errcode);
  #line 630 
  clear_wqe_complete_bit(cmdq,cmdq_wqe);
  #line 631 
  hinic_put_wqe(cmdq->wq,64U);
  #line 632 
  return 0;
}

#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_ceq_handler(void *handle, u32 ceqe_data)
{
  #line 645 
  struct hinic_cmdq_header *header;
  #line 646 
  struct hinic_hw_wqe *hw_wqe;
  #line 647 
  int err;
  #line 648 
  u32 saved_data;
  #line 649 
  u16 ci;
  #line 642 
  enum hinic_cmdq_type cmdq_type = ceqe_data & 7U;
  #line 643 
  struct hinic_cmdqs *cmdqs = (struct hinic_cmdqs *)handle;
  #line 644 
  struct hinic_cmdq *cmdq = & cmdqs->cmdq[(unsigned int)cmdq_type];
  #line 647 
  int set_arm = 0;
  #line 652 
  while (1) {
    #line 652 
    hw_wqe = hinic_read_wqe(cmdq->wq,64U,& ci);
    #line 652 
    if (! (hw_wqe != (struct hinic_hw_wqe *)0)) 
                                                #line 652 
                                                break;
    {
      #line 653 
      if ((int)IS_ERR_1((void *)hw_wqe) != 0) 
                                              #line 654 
                                              break;
      #line 656 
      header = (struct hinic_cmdq_header *)(& hw_wqe->__anonCompField_hinic_hw_wqe_71.cmdq_wqe);
      #line 657 
      saved_data = __builtin_bswap32(header->saved_data);
      #line 659 
      if (saved_data < (u32)0) {
        #line 661 
        set_arm = 0;
        #line 663 
        if (cmdq_arm_ceq_handler(cmdq,
                             & hw_wqe->__anonCompField_hinic_hw_wqe_71.cmdq_wqe) != 0) 
          #line 664 
          break;
      }
      else {
        #line 666 
        set_arm = 1;
        #line 668 
        hw_wqe = hinic_read_wqe(cmdq->wq,64U,& ci);
        #line 669 
        if ((int)IS_ERR_1((void *)hw_wqe) != 0) 
                                                #line 670 
                                                break;
        #line 672 
        if (cmdq_cmd_ceq_handler(cmdq,(unsigned short)((int)ci),
                             & hw_wqe->__anonCompField_hinic_hw_wqe_71.cmdq_wqe) != 0) 
          #line 673 
          break;
      }
    }
  }
  #line 677 
  if (set_arm != 0) {
    #line 678 
    struct hinic_hwif *hwif = cmdqs->hwif;
    #line 679 
    struct pci_dev *pdev = hwif->pdev;
    #line 681 
    err = hinic_set_arm_bit(cmdqs,(enum hinic_set_arm_qtype)HINIC_SET_ARM_CMDQ,(unsigned int)cmdq_type);
    #line 682 
    if (err != 0) 
                  #line 683 
                  _dev_err(& pdev->dev,(char *)"Failed to set arm for CMDQ\n");
  }
  #line 685 
  return;
}

#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void cmdq_init_queue_ctxt(struct hinic_cmdq_ctxt *cmdq_ctxt, struct hinic_cmdq *cmdq, struct hinic_cmdq_pages *cmdq_pages)
{
  #line 717 
  int tmp_68;
  #line 705 
  int tmp_4;
  #line 717 
  int tmp_69;
  #line 705 
  int tmp_5;
  #line 717 
  int tmp_70;
  #line 705 
  int tmp_6;
  #line 717 
  int tmp_71;
  #line 705 
  int tmp_7;
  #line 717 
  int tmp_72;
  #line 705 
  int tmp_8;
  #line 717 
  int tmp_73;
  #line 705 
  int tmp_9;
  #line 717 
  int tmp_74;
  #line 705 
  int tmp_10;
  #line 717 
  int tmp_75;
  #line 705 
  int tmp_11;
  #line 717 
  int tmp_76;
  #line 705 
  int tmp_12;
  #line 717 
  int tmp_77;
  #line 705 
  int tmp_13;
  #line 717 
  int tmp_78;
  #line 705 
  int tmp_14;
  #line 717 
  int tmp_79;
  #line 705 
  int tmp_15;
  #line 717 
  int tmp_80;
  #line 705 
  int tmp_16;
  #line 717 
  int tmp_81;
  #line 705 
  int tmp_17;
  #line 717 
  int tmp_82;
  #line 705 
  int tmp_18;
  #line 717 
  int tmp_83;
  #line 705 
  int tmp_19;
  #line 717 
  int tmp_84;
  #line 705 
  int tmp_20;
  #line 717 
  int tmp_85;
  #line 705 
  int tmp_21;
  #line 717 
  int tmp_86;
  #line 705 
  int tmp_22;
  #line 717 
  int tmp_87;
  #line 705 
  int tmp_23;
  #line 717 
  int tmp_88;
  #line 705 
  int tmp_24;
  #line 717 
  int tmp_89;
  #line 705 
  int tmp_25;
  #line 717 
  int tmp_90;
  #line 705 
  int tmp_26;
  #line 717 
  int tmp_91;
  #line 705 
  int tmp_27;
  #line 717 
  int tmp_92;
  #line 705 
  int tmp_28;
  #line 717 
  int tmp_93;
  #line 705 
  int tmp_29;
  #line 717 
  int tmp_94;
  #line 705 
  int tmp_30;
  #line 717 
  int tmp_95;
  #line 705 
  int tmp_31;
  #line 717 
  int tmp_96;
  #line 705 
  int tmp_32;
  #line 717 
  int tmp_97;
  #line 705 
  int tmp_33;
  #line 717 
  int tmp_98;
  #line 705 
  int tmp_34;
  #line 717 
  int tmp_99;
  #line 705 
  int tmp_35;
  #line 717 
  int tmp_100;
  #line 705 
  int tmp_36;
  #line 717 
  int tmp_101;
  #line 705 
  int tmp_37;
  #line 717 
  int tmp_102;
  #line 705 
  int tmp_38;
  #line 717 
  int tmp_103;
  #line 705 
  int tmp_39;
  #line 717 
  int tmp_104;
  #line 705 
  int tmp_40;
  #line 717 
  int tmp_105;
  #line 705 
  int tmp_41;
  #line 717 
  int tmp_106;
  #line 705 
  int tmp_42;
  #line 717 
  int tmp_107;
  #line 705 
  int tmp_43;
  #line 717 
  int tmp_108;
  #line 705 
  int tmp_44;
  #line 717 
  int tmp_109;
  #line 705 
  int tmp_45;
  #line 717 
  int tmp_110;
  #line 705 
  int tmp_46;
  #line 717 
  int tmp_111;
  #line 705 
  int tmp_47;
  #line 717 
  int tmp_112;
  #line 705 
  int tmp_48;
  #line 717 
  int tmp_113;
  #line 705 
  int tmp_49;
  #line 717 
  int tmp_114;
  #line 705 
  int tmp_50;
  #line 717 
  int tmp_115;
  #line 705 
  int tmp_51;
  #line 717 
  int tmp_116;
  #line 705 
  int tmp_52;
  #line 717 
  int tmp_117;
  #line 705 
  int tmp_53;
  #line 717 
  int tmp_118;
  #line 705 
  int tmp_54;
  #line 717 
  int tmp_119;
  #line 705 
  int tmp_55;
  #line 717 
  int tmp_120;
  #line 705 
  int tmp_56;
  #line 717 
  int tmp_121;
  #line 705 
  int tmp_57;
  #line 717 
  int tmp_122;
  #line 705 
  int tmp_58;
  #line 717 
  int tmp_123;
  #line 705 
  int tmp_59;
  #line 699 
  void *__mptr;
  #line 717 
  int tmp_124;
  #line 705 
  int tmp_60;
  #line 717 
  int tmp_125;
  #line 705 
  int tmp_61;
  #line 717 
  int tmp_126;
  #line 705 
  int tmp_62;
  #line 717 
  int tmp_127;
  #line 705 
  int tmp_63;
  #line 717 
  int tmp_128;
  #line 705 
  int tmp_1;
  #line 717 
  int tmp_66;
  #line 705 
  int tmp_2;
  #line 717 
  int tmp_67;
  #line 705 
  int tmp_3;
  #line 698 
  u64 wq_first_page_paddr;
  #line 698 
  u64 cmdq_first_block_paddr;
  #line 698 
  u64 pfn;
  #line 705 
  int tmp_65;
  #line 717 
  int tmp_130;
  #line 697 
  struct hinic_cmdq_ctxt_info *ctxt_info = & cmdq_ctxt->ctxt_info;
  #line 699 
  __mptr = (void *)(cmdq + - ((unsigned int)cmdq->cmdq_type));
  #line 699 
  struct hinic_cmdqs *cmdqs = ((struct hinic_cmdqs *)(__mptr + 18446744073709551560U));
  #line 700 
  struct hinic_wq *wq = cmdq->wq;
  #line 703 
  wq_first_page_paddr = (u64)__builtin_bswap64((unsigned long)*(wq->block_vaddr));
  #line 705 
  if (0 != 0) {
    #line 705 
    if ((unsigned int)wq->wq_page_size > 1U) {
      #line 705 
      if (((unsigned long long)wq->wq_page_size & 9223372036854775808ULL) == 0ULL) {
        #line 705 
        if (((unsigned long long)wq->wq_page_size & 4611686018427387904ULL) == 0ULL) {
          #line 705 
          if (((unsigned long long)wq->wq_page_size & 2305843009213693952ULL) == 0ULL) {
            #line 705 
            if (((unsigned long long)wq->wq_page_size & 1152921504606846976ULL) == 0ULL) {
              #line 705 
              if (((unsigned long long)wq->wq_page_size & 576460752303423488ULL) == 0ULL) {
                #line 705 
                if (((unsigned long long)wq->wq_page_size & 288230376151711744ULL) == 0ULL) {
                  #line 705 
                  if (((unsigned long long)wq->wq_page_size & 144115188075855872ULL) == 0ULL) {
                    #line 705 
                    if (((unsigned long long)wq->wq_page_size & 72057594037927936ULL) == 0ULL) {
                      #line 705 
                      if (((unsigned long long)wq->wq_page_size & 36028797018963968ULL) == 0ULL) {
                        #line 705 
                        if (((unsigned long long)wq->wq_page_size & 18014398509481984ULL) == 0ULL) {
                          #line 705 
                          if (((unsigned long long)wq->wq_page_size & 9007199254740992ULL) == 0ULL) {
                            #line 705 
                            if (((unsigned long long)wq->wq_page_size & 4503599627370496ULL) == 0ULL) {
                              #line 705 
                              if (((unsigned long long)wq->wq_page_size & 2251799813685248ULL) == 0ULL) {
                                #line 705 
                                if (((unsigned long long)wq->wq_page_size & 1125899906842624ULL) == 0ULL) {
                                  #line 705 
                                  if (((unsigned long long)wq->wq_page_size & 562949953421312ULL) == 0ULL) {
                                    #line 705 
                                    if (((unsigned long long)wq->wq_page_size & 281474976710656ULL) == 0ULL) {
                                      #line 705 
                                      if (((unsigned long long)wq->wq_page_size & 140737488355328ULL) == 0ULL) {
                                        #line 705 
                                        if (((unsigned long long)wq->wq_page_size & 70368744177664ULL) == 0ULL) {
                                          #line 705 
                                          if (((unsigned long long)wq->wq_page_size & 35184372088832ULL) == 0ULL) {
                                            #line 705 
                                            if (((unsigned long long)wq->wq_page_size & 17592186044416ULL) == 0ULL) {
                                              #line 705 
                                              if (((unsigned long long)wq->wq_page_size & 8796093022208ULL) == 0ULL) {
                                                #line 705 
                                                if (((unsigned long long)wq->wq_page_size & 4398046511104ULL) == 0ULL) {
                                                  #line 705 
                                                  if (((unsigned long long)wq->wq_page_size & 2199023255552ULL) == 0ULL) {
                                                    #line 705 
                                                    if (((unsigned long long)wq->wq_page_size & 1099511627776ULL) == 0ULL) {
                                                      #line 705 
                                                      if (((unsigned long long)wq->wq_page_size & 549755813888ULL) == 0ULL) {
                                                        #line 705 
                                                        if (((unsigned long long)wq->wq_page_size & 274877906944ULL) == 0ULL) {
                                                          #line 705 
                                                          if (((unsigned long long)wq->wq_page_size & 137438953472ULL) == 0ULL) {
                                                            #line 705 
                                                            if (((unsigned long long)wq->wq_page_size & 68719476736ULL) == 0ULL) {
                                                              #line 705 
                                                              if (((unsigned long long)wq->wq_page_size & 34359738368ULL) == 0ULL) {
                                                                #line 705 
                                                                if (((unsigned long long)wq->wq_page_size & 17179869184ULL) == 0ULL) {
                                                                  #line 705 
                                                                  if (
                                                                    ((unsigned long long)wq->wq_page_size & 8589934592ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4294967296ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 2147483648ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 1073741824ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 536870912ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 268435456ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 134217728ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 67108864ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 33554432ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 16777216ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 8388608ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4194304ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 2097152ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 1048576ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 524288ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 262144ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 131072ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 65536ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 32768ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 16384ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 8192ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4096ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 2048ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 1024ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 512ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 256ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 128ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 64ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 32ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 16ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 8ULL) == 0ULL) {
                                                                    #line 705 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4ULL) != 0ULL) 
                                                                    #line 705 
                                                                    tmp_1 = 2; else 
                                                                    #line 705 
                                                                    tmp_1 = 1;
                                                                    #line 705 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_2 = 3;
                                                                    #line 705 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_3 = 4;
                                                                    #line 705 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_4 = 5;
                                                                    #line 705 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_5 = 6;
                                                                    #line 705 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_6 = 7;
                                                                    #line 705 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_7 = 8;
                                                                    #line 705 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_8 = 9;
                                                                    #line 705 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_9 = 10;
                                                                    #line 705 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_10 = 11;
                                                                    #line 705 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_11 = 12;
                                                                    #line 705 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_12 = 13;
                                                                    #line 705 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_13 = 14;
                                                                    #line 705 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_14 = 15;
                                                                    #line 705 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_15 = 16;
                                                                    #line 705 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_16 = 17;
                                                                    #line 705 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_17 = 18;
                                                                    #line 705 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_18 = 19;
                                                                    #line 705 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_19 = 20;
                                                                    #line 705 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_20 = 21;
                                                                    #line 705 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_21 = 22;
                                                                    #line 705 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_22 = 23;
                                                                    #line 705 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_23 = 24;
                                                                    #line 705 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_24 = 25;
                                                                    #line 705 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_25 = 26;
                                                                    #line 705 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_26 = 27;
                                                                    #line 705 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_27 = 28;
                                                                    #line 705 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_28 = 29;
                                                                    #line 705 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_29 = 30;
                                                                    #line 705 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_30 = 31;
                                                                    #line 705 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 705 
                                                                    tmp_31 = 32;
                                                                    #line 705 
                                                                    tmp_32 = tmp_31;
                                                                  }
                                                                  else 
                                                                    #line 705 
                                                                    tmp_32 = 33;
                                                                  #line 705 
                                                                  tmp_33 = tmp_32;
                                                                }
                                                                else 
                                                                  #line 705 
                                                                  tmp_33 = 34;
                                                                #line 705 
                                                                tmp_34 = tmp_33;
                                                              }
                                                              else 
                                                                   #line 705 
                                                                   tmp_34 = 35;
                                                              #line 705 
                                                              tmp_35 = tmp_34;
                                                            }
                                                            else 
                                                                 #line 705 
                                                                 tmp_35 = 36;
                                                            #line 705 
                                                            tmp_36 = tmp_35;
                                                          }
                                                          else 
                                                               #line 705 
                                                               tmp_36 = 37;
                                                          #line 705 
                                                          tmp_37 = tmp_36;
                                                        }
                                                        else 
                                                             #line 705 
                                                             tmp_37 = 38;
                                                        #line 705 
                                                        tmp_38 = tmp_37;
                                                      }
                                                      else 
                                                           #line 705 
                                                           tmp_38 = 39;
                                                      #line 705 
                                                      tmp_39 = tmp_38;
                                                    }
                                                    else 
                                                         #line 705 
                                                         tmp_39 = 40;
                                                    #line 705 
                                                    tmp_40 = tmp_39;
                                                  }
                                                  else 
                                                       #line 705 
                                                       tmp_40 = 41;
                                                  #line 705 
                                                  tmp_41 = tmp_40;
                                                }
                                                else 
                                                     #line 705 
                                                     tmp_41 = 42;
                                                #line 705 
                                                tmp_42 = tmp_41;
                                              }
                                              else 
                                                   #line 705 
                                                   tmp_42 = 43;
                                              #line 705 
                                              tmp_43 = tmp_42;
                                            }
                                            else 
                                                 #line 705 
                                                 tmp_43 = 44;
                                            #line 705 
                                            tmp_44 = tmp_43;
                                          }
                                          else 
                                               #line 705 
                                               tmp_44 = 45;
                                          #line 705 
                                          tmp_45 = tmp_44;
                                        }
                                        else 
                                             #line 705 
                                             tmp_45 = 46;
                                        #line 705 
                                        tmp_46 = tmp_45;
                                      }
                                      else 
                                           #line 705 
                                           tmp_46 = 47;
                                      #line 705 
                                      tmp_47 = tmp_46;
                                    }
                                    else 
                                         #line 705 
                                         tmp_47 = 48;
                                    #line 705 
                                    tmp_48 = tmp_47;
                                  }
                                  else 
                                       #line 705 
                                       tmp_48 = 49;
                                  #line 705 
                                  tmp_49 = tmp_48;
                                }
                                else 
                                     #line 705 
                                     tmp_49 = 50;
                                #line 705 
                                tmp_50 = tmp_49;
                              }
                              else 
                                   #line 705 
                                   tmp_50 = 51;
                              #line 705 
                              tmp_51 = tmp_50;
                            }
                            else 
                                 #line 705 
                                 tmp_51 = 52;
                            #line 705 
                            tmp_52 = tmp_51;
                          }
                          else 
                               #line 705 
                               tmp_52 = 53;
                          #line 705 
                          tmp_53 = tmp_52;
                        }
                        else 
                             #line 705 
                             tmp_53 = 54;
                        #line 705 
                        tmp_54 = tmp_53;
                      }
                      else 
                           #line 705 
                           tmp_54 = 55;
                      #line 705 
                      tmp_55 = tmp_54;
                    }
                    else 
                         #line 705 
                         tmp_55 = 56;
                    #line 705 
                    tmp_56 = tmp_55;
                  }
                  else 
                       #line 705 
                       tmp_56 = 57;
                  #line 705 
                  tmp_57 = tmp_56;
                }
                else 
                     #line 705 
                     tmp_57 = 58;
                #line 705 
                tmp_58 = tmp_57;
              }
              else 
                   #line 705 
                   tmp_58 = 59;
              #line 705 
              tmp_59 = tmp_58;
            }
            else 
                 #line 705 
                 tmp_59 = 60;
            #line 705 
            tmp_60 = tmp_59;
          }
          else 
               #line 705 
               tmp_60 = 61;
          #line 705 
          tmp_61 = tmp_60;
        }
        else 
             #line 705 
             tmp_61 = 62;
        #line 705 
        tmp_62 = tmp_61;
      }
      else 
           #line 705 
           tmp_62 = 63;
      #line 705 
      tmp_63 = tmp_62;
    }
    else 
         #line 705 
         tmp_63 = 0;
    #line 705 
    tmp_65 = tmp_63;
  }
  else 
       #line 705 
       tmp_65 = __ilog2_u32((unsigned int)wq->wq_page_size);
  #line 705 
  pfn = wq_first_page_paddr >> tmp_65;
  #line 707 
  ctxt_info->curr_wqe_page_pfn = ((pfn & 4503599627370495ULL) | ((unsigned long long)cmdq->wrapped << 63)) | 6917529027641081856ULL;
  #line 715 
  cmdq_first_block_paddr = cmdq_pages->page_paddr;
  #line 717 
  if (0 != 0) {
    #line 717 
    if ((unsigned int)wq->wq_page_size > 1U) {
      #line 717 
      if (((unsigned long long)wq->wq_page_size & 9223372036854775808ULL) == 0ULL) {
        #line 717 
        if (((unsigned long long)wq->wq_page_size & 4611686018427387904ULL) == 0ULL) {
          #line 717 
          if (((unsigned long long)wq->wq_page_size & 2305843009213693952ULL) == 0ULL) {
            #line 717 
            if (((unsigned long long)wq->wq_page_size & 1152921504606846976ULL) == 0ULL) {
              #line 717 
              if (((unsigned long long)wq->wq_page_size & 576460752303423488ULL) == 0ULL) {
                #line 717 
                if (((unsigned long long)wq->wq_page_size & 288230376151711744ULL) == 0ULL) {
                  #line 717 
                  if (((unsigned long long)wq->wq_page_size & 144115188075855872ULL) == 0ULL) {
                    #line 717 
                    if (((unsigned long long)wq->wq_page_size & 72057594037927936ULL) == 0ULL) {
                      #line 717 
                      if (((unsigned long long)wq->wq_page_size & 36028797018963968ULL) == 0ULL) {
                        #line 717 
                        if (((unsigned long long)wq->wq_page_size & 18014398509481984ULL) == 0ULL) {
                          #line 717 
                          if (((unsigned long long)wq->wq_page_size & 9007199254740992ULL) == 0ULL) {
                            #line 717 
                            if (((unsigned long long)wq->wq_page_size & 4503599627370496ULL) == 0ULL) {
                              #line 717 
                              if (((unsigned long long)wq->wq_page_size & 2251799813685248ULL) == 0ULL) {
                                #line 717 
                                if (((unsigned long long)wq->wq_page_size & 1125899906842624ULL) == 0ULL) {
                                  #line 717 
                                  if (((unsigned long long)wq->wq_page_size & 562949953421312ULL) == 0ULL) {
                                    #line 717 
                                    if (((unsigned long long)wq->wq_page_size & 281474976710656ULL) == 0ULL) {
                                      #line 717 
                                      if (((unsigned long long)wq->wq_page_size & 140737488355328ULL) == 0ULL) {
                                        #line 717 
                                        if (((unsigned long long)wq->wq_page_size & 70368744177664ULL) == 0ULL) {
                                          #line 717 
                                          if (((unsigned long long)wq->wq_page_size & 35184372088832ULL) == 0ULL) {
                                            #line 717 
                                            if (((unsigned long long)wq->wq_page_size & 17592186044416ULL) == 0ULL) {
                                              #line 717 
                                              if (((unsigned long long)wq->wq_page_size & 8796093022208ULL) == 0ULL) {
                                                #line 717 
                                                if (((unsigned long long)wq->wq_page_size & 4398046511104ULL) == 0ULL) {
                                                  #line 717 
                                                  if (((unsigned long long)wq->wq_page_size & 2199023255552ULL) == 0ULL) {
                                                    #line 717 
                                                    if (((unsigned long long)wq->wq_page_size & 1099511627776ULL) == 0ULL) {
                                                      #line 717 
                                                      if (((unsigned long long)wq->wq_page_size & 549755813888ULL) == 0ULL) {
                                                        #line 717 
                                                        if (((unsigned long long)wq->wq_page_size & 274877906944ULL) == 0ULL) {
                                                          #line 717 
                                                          if (((unsigned long long)wq->wq_page_size & 137438953472ULL) == 0ULL) {
                                                            #line 717 
                                                            if (((unsigned long long)wq->wq_page_size & 68719476736ULL) == 0ULL) {
                                                              #line 717 
                                                              if (((unsigned long long)wq->wq_page_size & 34359738368ULL) == 0ULL) {
                                                                #line 717 
                                                                if (((unsigned long long)wq->wq_page_size & 17179869184ULL) == 0ULL) {
                                                                  #line 717 
                                                                  if (
                                                                    ((unsigned long long)wq->wq_page_size & 8589934592ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4294967296ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 2147483648ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 1073741824ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 536870912ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 268435456ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 134217728ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 67108864ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 33554432ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 16777216ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 8388608ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4194304ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 2097152ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 1048576ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 524288ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 262144ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 131072ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 65536ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 32768ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 16384ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 8192ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4096ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 2048ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 1024ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 512ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 256ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 128ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 64ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 32ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 16ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 8ULL) == 0ULL) {
                                                                    #line 717 
                                                                    if (
                                                                    ((unsigned long long)wq->wq_page_size & 4ULL) != 0ULL) 
                                                                    #line 717 
                                                                    tmp_66 = 2; else 
                                                                    #line 717 
                                                                    tmp_66 = 1;
                                                                    #line 717 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_67 = 3;
                                                                    #line 717 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_68 = 4;
                                                                    #line 717 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_69 = 5;
                                                                    #line 717 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_70 = 6;
                                                                    #line 717 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_71 = 7;
                                                                    #line 717 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_72 = 8;
                                                                    #line 717 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_73 = 9;
                                                                    #line 717 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_74 = 10;
                                                                    #line 717 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_75 = 11;
                                                                    #line 717 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_76 = 12;
                                                                    #line 717 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_77 = 13;
                                                                    #line 717 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_78 = 14;
                                                                    #line 717 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_79 = 15;
                                                                    #line 717 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_80 = 16;
                                                                    #line 717 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_81 = 17;
                                                                    #line 717 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_82 = 18;
                                                                    #line 717 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_83 = 19;
                                                                    #line 717 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_84 = 20;
                                                                    #line 717 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_85 = 21;
                                                                    #line 717 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_86 = 22;
                                                                    #line 717 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_87 = 23;
                                                                    #line 717 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_88 = 24;
                                                                    #line 717 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_89 = 25;
                                                                    #line 717 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_90 = 26;
                                                                    #line 717 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_91 = 27;
                                                                    #line 717 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_92 = 28;
                                                                    #line 717 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_93 = 29;
                                                                    #line 717 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_94 = 30;
                                                                    #line 717 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_95 = 31;
                                                                    #line 717 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 717 
                                                                    tmp_96 = 32;
                                                                    #line 717 
                                                                    tmp_97 = tmp_96;
                                                                  }
                                                                  else 
                                                                    #line 717 
                                                                    tmp_97 = 33;
                                                                  #line 717 
                                                                  tmp_98 = tmp_97;
                                                                }
                                                                else 
                                                                  #line 717 
                                                                  tmp_98 = 34;
                                                                #line 717 
                                                                tmp_99 = tmp_98;
                                                              }
                                                              else 
                                                                   #line 717 
                                                                   tmp_99 = 35;
                                                              #line 717 
                                                              tmp_100 = tmp_99;
                                                            }
                                                            else 
                                                                 #line 717 
                                                                 tmp_100 = 36;
                                                            #line 717 
                                                            tmp_101 = tmp_100;
                                                          }
                                                          else 
                                                               #line 717 
                                                               tmp_101 = 37;
                                                          #line 717 
                                                          tmp_102 = tmp_101;
                                                        }
                                                        else 
                                                             #line 717 
                                                             tmp_102 = 38;
                                                        #line 717 
                                                        tmp_103 = tmp_102;
                                                      }
                                                      else 
                                                           #line 717 
                                                           tmp_103 = 39;
                                                      #line 717 
                                                      tmp_104 = tmp_103;
                                                    }
                                                    else 
                                                         #line 717 
                                                         tmp_104 = 40;
                                                    #line 717 
                                                    tmp_105 = tmp_104;
                                                  }
                                                  else 
                                                       #line 717 
                                                       tmp_105 = 41;
                                                  #line 717 
                                                  tmp_106 = tmp_105;
                                                }
                                                else 
                                                     #line 717 
                                                     tmp_106 = 42;
                                                #line 717 
                                                tmp_107 = tmp_106;
                                              }
                                              else 
                                                   #line 717 
                                                   tmp_107 = 43;
                                              #line 717 
                                              tmp_108 = tmp_107;
                                            }
                                            else 
                                                 #line 717 
                                                 tmp_108 = 44;
                                            #line 717 
                                            tmp_109 = tmp_108;
                                          }
                                          else 
                                               #line 717 
                                               tmp_109 = 45;
                                          #line 717 
                                          tmp_110 = tmp_109;
                                        }
                                        else 
                                             #line 717 
                                             tmp_110 = 46;
                                        #line 717 
                                        tmp_111 = tmp_110;
                                      }
                                      else 
                                           #line 717 
                                           tmp_111 = 47;
                                      #line 717 
                                      tmp_112 = tmp_111;
                                    }
                                    else 
                                         #line 717 
                                         tmp_112 = 48;
                                    #line 717 
                                    tmp_113 = tmp_112;
                                  }
                                  else 
                                       #line 717 
                                       tmp_113 = 49;
                                  #line 717 
                                  tmp_114 = tmp_113;
                                }
                                else 
                                     #line 717 
                                     tmp_114 = 50;
                                #line 717 
                                tmp_115 = tmp_114;
                              }
                              else 
                                   #line 717 
                                   tmp_115 = 51;
                              #line 717 
                              tmp_116 = tmp_115;
                            }
                            else 
                                 #line 717 
                                 tmp_116 = 52;
                            #line 717 
                            tmp_117 = tmp_116;
                          }
                          else 
                               #line 717 
                               tmp_117 = 53;
                          #line 717 
                          tmp_118 = tmp_117;
                        }
                        else 
                             #line 717 
                             tmp_118 = 54;
                        #line 717 
                        tmp_119 = tmp_118;
                      }
                      else 
                           #line 717 
                           tmp_119 = 55;
                      #line 717 
                      tmp_120 = tmp_119;
                    }
                    else 
                         #line 717 
                         tmp_120 = 56;
                    #line 717 
                    tmp_121 = tmp_120;
                  }
                  else 
                       #line 717 
                       tmp_121 = 57;
                  #line 717 
                  tmp_122 = tmp_121;
                }
                else 
                     #line 717 
                     tmp_122 = 58;
                #line 717 
                tmp_123 = tmp_122;
              }
              else 
                   #line 717 
                   tmp_123 = 59;
              #line 717 
              tmp_124 = tmp_123;
            }
            else 
                 #line 717 
                 tmp_124 = 60;
            #line 717 
            tmp_125 = tmp_124;
          }
          else 
               #line 717 
               tmp_125 = 61;
          #line 717 
          tmp_126 = tmp_125;
        }
        else 
             #line 717 
             tmp_126 = 62;
        #line 717 
        tmp_127 = tmp_126;
      }
      else 
           #line 717 
           tmp_127 = 63;
      #line 717 
      tmp_128 = tmp_127;
    }
    else 
         #line 717 
         tmp_128 = 0;
    #line 717 
    tmp_130 = tmp_128;
  }
  else 
       #line 717 
       tmp_130 = __ilog2_u32((unsigned int)wq->wq_page_size);
  #line 717 
  pfn = cmdq_first_block_paddr >> tmp_130;
  #line 719 
  ctxt_info->wq_block_pfn = (pfn & 4503599627370495ULL) | ((unsigned long long)atomic_read_2(& wq->cons_idx) << 52);
  #line 723 
  cmdq_ctxt->func_idx = (cmdqs->hwif)->attr.func_idx;
  #line 724 
  cmdq_ctxt->cmdq_type = (unsigned char)cmdq->cmdq_type;
  #line 725 
  return;
}

#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static int init_cmdq(struct hinic_cmdq *cmdq, struct hinic_wq *wq, enum hinic_cmdq_type q_type, void *db_area)
{
  #line 739 
  int err;
  #line 741 
  cmdq->wq = wq;
  #line 742 
  cmdq->cmdq_type = q_type;
  #line 743 
  cmdq->wrapped = 1;
  #line 745 
  spinlock_check(& cmdq->cmdq_lock);
  {
    #line 745 
    struct lock_class_key __key;
    #line 745 
    __raw_spin_lock_init(& cmdq->cmdq_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&cmdq->cmdq_lock)->rlock",& __key);
  }
  #line 747 
  cmdq->done = (struct completion **)cif_vzalloc_0(array_size(8UL,(unsigned long)wq->q_depth));
  #line 748 
  if (cmdq->done == (struct completion **)0) 
                                             #line 749 
                                             return -12;
  #line 751 
  cmdq->errcode = (int **)cif_vzalloc_0(array_size(8UL,(unsigned long)wq->q_depth));
  #line 753 
  if (cmdq->errcode == (int **)0) {
    #line 754 
    err = -12;
    #line 755 
    goto err_errcode;
  }
  #line 758 
  cmdq->db_base = db_area + 2048U;
  #line 759 
  return 0;
  #line 761 
  err_errcode: 
               #line 761 
  ;
  #line 762 
  cif_vfree_0((void *)cmdq->done);
  #line 763 
  return err;
}

#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static void free_cmdq(struct hinic_cmdq *cmdq)
{
  #line 772 
  cif_vfree_0((void *)cmdq->errcode);
  #line 773 
  cif_vfree_0((void *)cmdq->done);
  #line 774 
  return;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
static int init_cmdqs_ctxt(struct hinic_hwdev *hwdev, struct hinic_cmdqs *cmdqs, void **db_area)
{
  #line 805 
  void *__mptr;
  #line 788 
  enum hinic_cmdq_type type;
  #line 788 
  enum hinic_cmdq_type cmdq_type;
  #line 789 
  struct hinic_cmdq_ctxt *cmdq_ctxts;
  #line 791 
  struct hinic_pfhwdev *pfhwdev;
  #line 792 
  size_t cmdq_ctxts_size;
  #line 793 
  int err;
  #line 787 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 790 
  struct pci_dev *pdev = hwif->pdev;
  #line 795 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 796 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI function type\n");
    #line 797 
    return -22;
  }
  #line 800 
  cmdq_ctxts_size = 32UL;
  #line 801 
  cmdq_ctxts = (struct hinic_cmdq_ctxt *)cif_devm_kzalloc_3(& pdev->dev,cmdq_ctxts_size,3264U);
  #line 802 
  if (cmdq_ctxts == (struct hinic_cmdq_ctxt *)0) 
                                                 #line 803 
                                                 return -12;
  #line 805 
  __mptr = (void *)hwdev;
  #line 805 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 807 
  cmdq_type = HINIC_CMDQ_SYNC;
  #line 808 
  while (cmdq_type == (unsigned int)HINIC_CMDQ_SYNC) {
    #line 809 
    err = init_cmdq(& cmdqs->cmdq[(unsigned int)cmdq_type],cmdqs->saved_wqs + (unsigned long)cmdq_type,cmdq_type,*(db_area + (unsigned long)cmdq_type));
    #line 812 
    if (err != 0) {
      #line 813 
      _dev_err(& pdev->dev,(char *)"Failed to initialize cmdq\n");
      #line 814 
      goto err_init_cmdq;
    }
    #line 817 
    cmdq_init_queue_ctxt(cmdq_ctxts + (unsigned long)cmdq_type,& cmdqs->cmdq[(unsigned int)cmdq_type],& cmdqs->cmdq_pages);
    #line 808 
    cmdq_type ++;
  }
  #line 823 
  cmdq_type = HINIC_CMDQ_SYNC;
  #line 824 
  while (cmdq_type == (unsigned int)HINIC_CMDQ_SYNC) {
    #line 825 
    err = hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,(enum hinic_mod_type)HINIC_MOD_COMM,(unsigned char)16,(void *)(cmdq_ctxts + (unsigned long)cmdq_type),(unsigned short)32,(void *)0,(u16 *)0U,(enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
    #line 830 
    if (err != 0) {
      #line 831 
      _dev_err(& pdev->dev,(char *)"Failed to set CMDQ CTXT type = %d\n",(unsigned int)cmdq_type);
      #line 833 
      goto err_write_cmdq_ctxt;
    }
    #line 824 
    cmdq_type ++;
  }
  #line 837 
  devm_kfree(& pdev->dev,(void *)cmdq_ctxts);
  #line 838 
  return 0;
  #line 840 
  err_write_cmdq_ctxt: 
                       #line 840 
  ;
  #line 841 
  cmdq_type = HINIC_MAX_CMDQ_TYPES;
  #line 843 
  err_init_cmdq: 
                 #line 843 
  ;
  #line 844 
  type = HINIC_CMDQ_SYNC;
  #line 844 
  while (type < cmdq_type) {
    #line 845 
    free_cmdq(& cmdqs->cmdq[(unsigned int)type]);
    #line 844 
    type ++;
  }
  #line 847 
  devm_kfree(& pdev->dev,(void *)cmdq_ctxts);
  #line 848 
  return err;
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
int hinic_init_cmdqs(struct hinic_cmdqs *cmdqs, struct hinic_hwif *hwif, void **db_area)
{
  #line 892 
  void *__mptr_0;
  #line 862 
  void *__mptr;
  #line 864 
  struct hinic_hwdev *hwdev;
  #line 865 
  size_t saved_wqs_size;
  #line 866 
  u16 max_wqe_size;
  #line 867 
  int err;
  #line 862 
  __mptr = (void *)cmdqs;
  #line 862 
  struct hinic_func_to_io *func_to_io = ((struct hinic_func_to_io *)(__mptr + 18446744073709540656U));
  #line 863 
  struct pci_dev *pdev = hwif->pdev;
  #line 869 
  cmdqs->hwif = hwif;
  #line 870 
  cmdqs->cmdq_buf_pool = dma_pool_create((char *)"hinic_cmdq",& pdev->dev,2048UL,2048UL,0UL);
  #line 873 
  if (cmdqs->cmdq_buf_pool == (struct dma_pool *)0) 
                                                    #line 874 
                                                    return -12;
  #line 876 
  saved_wqs_size = 96UL;
  #line 877 
  cmdqs->saved_wqs = (struct hinic_wq *)cif_devm_kzalloc_3(& pdev->dev,saved_wqs_size,3264U);
  #line 878 
  if (cmdqs->saved_wqs == (struct hinic_wq *)0) {
    #line 879 
    err = -12;
    #line 880 
    goto err_saved_wqs;
  }
  #line 883 
  max_wqe_size = (unsigned short)64U;
  #line 884 
  err = hinic_wqs_cmdq_alloc(& cmdqs->cmdq_pages,cmdqs->saved_wqs,hwif,1,(unsigned short)64,(unsigned short)4096,(unsigned short)4096,(unsigned short)((int)max_wqe_size));
  #line 887 
  if (err != 0) {
    #line 888 
    _dev_err(& pdev->dev,(char *)"Failed to allocate CMDQ wqs\n");
    #line 889 
    goto err_cmdq_wqs;
  }
  #line 892 
  __mptr_0 = (void *)func_to_io;
  #line 892 
  hwdev = ((struct hinic_hwdev *)(__mptr_0 + 18446744073709550704U));
  #line 893 
  err = init_cmdqs_ctxt(hwdev,cmdqs,db_area);
  #line 894 
  if (err != 0) {
    #line 895 
    _dev_err(& pdev->dev,(char *)"Failed to write cmdq ctxt\n");
    #line 896 
    goto err_cmdq_ctxt;
  }
  #line 899 
  hinic_ceq_register_cb(& func_to_io->ceqs,(enum hinic_ceq_type)HINIC_CEQ_CMDQ,(void *)cmdqs,& cmdq_ceq_handler);
  #line 901 
  return 0;
  #line 903 
  err_cmdq_ctxt: 
                 #line 903 
  ;
  #line 904 
  hinic_wqs_cmdq_free(& cmdqs->cmdq_pages,cmdqs->saved_wqs,1);
  #line 907 
  err_cmdq_wqs: 
                #line 907 
  ;
  #line 908 
  devm_kfree(& pdev->dev,(void *)cmdqs->saved_wqs);
  #line 910 
  err_saved_wqs: 
                 #line 910 
  ;
  #line 911 
  dma_pool_destroy(cmdqs->cmdq_buf_pool);
  #line 912 
  return err;
}

#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_cmdq.c"
void hinic_free_cmdqs(struct hinic_cmdqs *cmdqs)
{
  #line 921 
  void *__mptr;
  #line 924 
  enum hinic_cmdq_type cmdq_type;
  #line 921 
  __mptr = (void *)cmdqs;
  #line 921 
  struct hinic_func_to_io *func_to_io = ((struct hinic_func_to_io *)(__mptr + 18446744073709540656U));
  #line 922 
  struct hinic_hwif *hwif = cmdqs->hwif;
  #line 923 
  struct pci_dev *pdev = hwif->pdev;
  #line 926 
  hinic_ceq_unregister_cb(& func_to_io->ceqs,(enum hinic_ceq_type)HINIC_CEQ_CMDQ);
  #line 928 
  cmdq_type = HINIC_CMDQ_SYNC;
  #line 929 
  while (cmdq_type == (unsigned int)HINIC_CMDQ_SYNC) {
    #line 930 
    free_cmdq(& cmdqs->cmdq[(unsigned int)cmdq_type]);
    #line 929 
    cmdq_type ++;
  }
  #line 932 
  hinic_wqs_cmdq_free(& cmdqs->cmdq_pages,cmdqs->saved_wqs,1);
  #line 935 
  devm_kfree(& pdev->dev,(void *)cmdqs->saved_wqs);
  #line 937 
  dma_pool_destroy(cmdqs->cmdq_buf_pool);
  #line 938 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static bool IS_ERR_1(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_lock_bh_cmdq_lock_of_hinic_cmdq(spinlock_t *lock)
{
  #line 500 
  ldv_spin_model_lock((char *)"cmdq_lock_of_hinic_cmdq");
  #line 502 
  spin_lock_bh(lock);
  #line 503 
  return;
}

#line 506  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_unlock_bh_cmdq_lock_of_hinic_cmdq(spinlock_t *lock)
{
  #line 509 
  ldv_spin_model_unlock((char *)"cmdq_lock_of_hinic_cmdq");
  #line 511 
  spin_unlock_bh(lock);
  #line 512 
  return;
}

#line 515  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_lock_cmdq_lock_of_hinic_cmdq(spinlock_t *lock)
{
  #line 518 
  ldv_spin_model_lock((char *)"cmdq_lock_of_hinic_cmdq");
  #line 520 
  spin_lock_0(lock);
  #line 521 
  return;
}

#line 524  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_spin_unlock_cmdq_lock_of_hinic_cmdq(spinlock_t *lock)
{
  #line 527 
  ldv_spin_model_unlock((char *)"cmdq_lock_of_hinic_cmdq");
  #line 529 
  spin_unlock_0(lock);
  #line 530 
  return;
}

#line 533  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void *cif_vzalloc_0(unsigned long size)
{
  #line 536 
  return ldv_vzalloc(size);
}

#line 540  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 543 
  ldv_vfree(addr);
  #line 544 
  return;
}

#line 547  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_cmdq.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags)
{
  #line 550 
  return ldv_devm_kzalloc(size,flags);
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
int hinic_msix_attr_get(struct hinic_hwif *hwif, u16 msix_index, u8 *pending_limit, u8 *coalesc_timer, u8 *lli_timer, u8 *lli_credit_limit, u8 *resend_timer);
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_set_msix_state(struct hinic_hwif *hwif, u16 msix_idx, enum hinic_msix_state flag);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_set_pf_action(struct hinic_hwif *hwif, enum hinic_pf_action action);
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
enum hinic_outbound_state hinic_outbound_state_get(struct hinic_hwif *hwif);
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_outbound_state_set(struct hinic_hwif *hwif, enum hinic_outbound_state outbound_state);
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
enum hinic_db_state hinic_db_state_get(struct hinic_hwif *hwif);
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_db_state_set(struct hinic_hwif *hwif, enum hinic_db_state db_state);
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
int hinic_init_hwif(struct hinic_hwif *hwif, struct pci_dev *pdev);
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.h"
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_free_hwif(struct hinic_hwif *hwif);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
int hinic_msix_attr_set(struct hinic_hwif *hwif, u16 msix_index, u8 pending_limit, u8 coalesc_timer, u8 lli_timer, u8 lli_credit_limit, u8 resend_timer)
{
  #line 38 
  u32 msix_ctrl;
  #line 38 
  u32 addr;
  #line 40 
  if ((int)hwif->attr.num_irqs <= (int)msix_index) 
                                                   #line 41 
                                                   return -22;
  #line 43 
  msix_ctrl = ((((unsigned int)pending_limit | ((unsigned int)coalesc_timer << 8)) | ((unsigned int)lli_timer << 16)) | (((unsigned int)lli_credit_limit << 24) & 520093696U)) | ((unsigned int)resend_timer << 29);
  #line 49 
  addr = (unsigned int)(((int)msix_index + 1024) * 8);
  #line 51 
  hinic_hwif_write_reg(hwif,addr,msix_ctrl);
  #line 52 
  return 0;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
int hinic_msix_attr_get(struct hinic_hwif *hwif, u16 msix_index, u8 *pending_limit, u8 *coalesc_timer, u8 *lli_timer, u8 *lli_credit_limit, u8 *resend_timer)
{
  #line 72 
  u32 addr;
  #line 72 
  u32 val;
  #line 74 
  if ((int)hwif->attr.num_irqs <= (int)msix_index) 
                                                   #line 75 
                                                   return -22;
  #line 77 
  addr = (unsigned int)(((int)msix_index + 1024) * 8);
  #line 78 
  val = hinic_hwif_read_reg(hwif,addr);
  #line 80 
  *pending_limit = (unsigned char)val;
  #line 81 
  *coalesc_timer = (unsigned char)(val >> 8);
  #line 82 
  *lli_timer = (unsigned char)(val >> 16);
  #line 83 
  *lli_credit_limit = (unsigned char)((unsigned int)((unsigned char)(val >> 24)) & 31U);
  #line 84 
  *resend_timer = (unsigned char)(val >> 29);
  #line 85 
  return 0;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
int hinic_msix_attr_cnt_clear(struct hinic_hwif *hwif, u16 msix_index)
{
  #line 97 
  u32 msix_ctrl;
  #line 97 
  u32 addr;
  #line 99 
  if ((int)hwif->attr.num_irqs <= (int)msix_index) 
                                                   #line 100 
                                                   return -22;
  #line 102 
  msix_ctrl = 536870912U;
  #line 103 
  addr = (unsigned int)((int)msix_index * 8 + 8196);
  #line 105 
  hinic_hwif_write_reg(hwif,addr,msix_ctrl);
  #line 106 
  return 0;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_set_pf_action(struct hinic_hwif *hwif, enum hinic_pf_action action)
{
  #line 118 
  u32 attr5 = hinic_hwif_read_reg(hwif,20U);
  #line 120 
  attr5 &= 4294901760U;
  #line 121 
  attr5 = ((unsigned int)action & 65535U) | attr5;
  #line 123 
  hinic_hwif_write_reg(hwif,20U,attr5);
  #line 124 
  return;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
enum hinic_outbound_state hinic_outbound_state_get(struct hinic_hwif *hwif)
{
  #line 128 
  u32 attr4 = hinic_hwif_read_reg(hwif,16U);
  #line 130 
  return (enum hinic_outbound_state)(attr4 & 1U);
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_outbound_state_set(struct hinic_hwif *hwif, enum hinic_outbound_state outbound_state)
{
  #line 136 
  u32 attr4 = hinic_hwif_read_reg(hwif,16U);
  #line 138 
  attr4 &= 4294967294U;
  #line 139 
  attr4 = ((unsigned int)outbound_state & 1U) | attr4;
  #line 141 
  hinic_hwif_write_reg(hwif,16U,attr4);
  #line 142 
  return;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
enum hinic_db_state hinic_db_state_get(struct hinic_hwif *hwif)
{
  #line 146 
  u32 attr4 = hinic_hwif_read_reg(hwif,16U);
  #line 148 
  return (enum hinic_db_state)((attr4 >> 1) & 1U);
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_db_state_set(struct hinic_hwif *hwif, enum hinic_db_state db_state)
{
  #line 154 
  u32 attr4 = hinic_hwif_read_reg(hwif,16U);
  #line 156 
  attr4 &= 4294967293U;
  #line 157 
  attr4 = (((unsigned int)db_state << 1) & 2U) | attr4;
  #line 159 
  hinic_hwif_write_reg(hwif,16U,attr4);
  #line 160 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_set_msix_state(struct hinic_hwif *hwif, u16 msix_idx, enum hinic_msix_state flag)
{
  #line 167 
  u32 mask_bits;
  #line 165 
  u32 offset = (unsigned int)((int)msix_idx * 16 + 12);
  #line 169 
  mask_bits = readl(hwif->intr_regs_base + (unsigned long)offset);
  #line 170 
  mask_bits &= 4294967294U;
  #line 172 
  if (flag != (unsigned int)HINIC_MSIX_ENABLE) 
                                               #line 173 
                                               mask_bits |= 1U;
  #line 175 
  writel(mask_bits,hwif->intr_regs_base + (unsigned long)offset);
  #line 176 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
static int hwif_ready(struct hinic_hwif *hwif)
{
  #line 187 
  u32 addr;
  #line 187 
  u32 attr1;
  #line 186 
  struct pci_dev *pdev = hwif->pdev;
  #line 189 
  addr = 4U;
  #line 190 
  attr1 = hinic_hwif_read_reg(hwif,addr);
  #line 192 
  if ((attr1 & 1073741824U) == 0U) {
    #line 193 
    _dev_err(& pdev->dev,(char *)"hwif status is not ready\n");
    #line 194 
    return -14;
  }
  #line 197 
  return 0;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
static void set_hwif_attr(struct hinic_hwif *hwif, u32 attr0, u32 attr1)
{
  #line 208 
  hwif->attr.func_idx = (unsigned short)((unsigned int)((unsigned short)attr0) & 1023U);
  #line 209 
  hwif->attr.pf_idx = (unsigned char)((unsigned int)((unsigned char)(attr0 >> 10)) & 15U);
  #line 210 
  hwif->attr.pci_intf_idx = (unsigned char)((unsigned int)((unsigned char)(attr0 >> 14)) & 3U);
  #line 211 
  hwif->attr.func_type = (enum hinic_func_type)((attr0 >> 24) & 1U);
  #line 213 
  hwif->attr.num_aeqs = (unsigned char)(1UL << ((attr1 >> 8) & 3U));
  #line 214 
  hwif->attr.num_ceqs = (unsigned char)(1UL << ((attr1 >> 12) & 7U));
  #line 215 
  hwif->attr.num_irqs = (unsigned short)(1UL << ((attr1 >> 20) & 15U));
  #line 216 
  hwif->attr.num_dma_attr = (unsigned char)(1UL << ((attr1 >> 24) & 7U));
  #line 217 
  return;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
static void read_hwif_attr(struct hinic_hwif *hwif)
{
  #line 225 
  u32 addr;
  #line 225 
  u32 attr0;
  #line 225 
  u32 attr1;
  #line 227 
  addr = 0U;
  #line 228 
  attr0 = hinic_hwif_read_reg(hwif,addr);
  #line 230 
  addr = 4U;
  #line 231 
  attr1 = hinic_hwif_read_reg(hwif,addr);
  #line 233 
  set_hwif_attr(hwif,attr0,attr1);
  #line 234 
  return;
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
static void set_ppf(struct hinic_hwif *hwif)
{
  #line 243 
  u32 addr;
  #line 243 
  u32 val;
  #line 243 
  u32 ppf_election;
  #line 242 
  struct hinic_func_attr *attr = & hwif->attr;
  #line 246 
  addr = (unsigned int)(((int)hwif->attr.pci_intf_idx + 4224) * 4);
  #line 248 
  val = hinic_hwif_read_reg(hwif,addr);
  #line 249 
  val &= 4294967264U;
  #line 251 
  ppf_election = (unsigned int)hwif->attr.func_idx & 31U;
  #line 253 
  val |= ppf_election;
  #line 254 
  hinic_hwif_write_reg(hwif,addr,val);
  #line 257 
  val = hinic_hwif_read_reg(hwif,addr);
  #line 259 
  attr->ppf_idx = (unsigned char)((unsigned int)((unsigned char)val) & 31U);
  #line 260 
  if ((int)((unsigned short)attr->ppf_idx) == (int)hwif->attr.func_idx) 
    #line 261 
    attr->func_type = HINIC_PPF;
  #line 262 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
static void set_dma_attr(struct hinic_hwif *hwif, u32 entry_idx, u8 st, u8 at, u8 ph, enum hinic_pcie_nosnoop no_snooping, enum hinic_pcie_tph tph_en)
{
  #line 279 
  u32 addr;
  #line 279 
  u32 val;
  #line 279 
  u32 dma_attr_entry;
  #line 282 
  addr = (entry_idx + 800U) * 4U;
  #line 284 
  val = hinic_hwif_read_reg(hwif,addr);
  #line 285 
  val &= 4294950912U;
  #line 291 
  dma_attr_entry = ((((unsigned int)st | (((unsigned int)at << 8) & 768U)) | (((unsigned int)ph << 10) & 3072U)) | (((unsigned int)no_snooping << 12) & 4096U)) | (((unsigned int)tph_en << 13) & 8192U);
  #line 297 
  val |= dma_attr_entry;
  #line 298 
  hinic_hwif_write_reg(hwif,addr,val);
  #line 299 
  return;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
static void dma_attr_init(struct hinic_hwif *hwif)
{
  #line 307 
  set_dma_attr(hwif,0U,(unsigned char)0,(unsigned char)0,(unsigned char)0,(enum hinic_pcie_nosnoop)HINIC_PCIE_SNOOP,(enum hinic_pcie_tph)HINIC_PCIE_TPH_DISABLE);
  #line 308 
  return;
}

#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
int hinic_init_hwif(struct hinic_hwif *hwif, struct pci_dev *pdev)
{
  #line 321 
  int err;
  #line 323 
  hwif->pdev = pdev;
  #line 325 
  hwif->cfg_regs_bar = pci_ioremap_bar(pdev,0);
  #line 326 
  if (hwif->cfg_regs_bar == (void *)0) {
    #line 327 
    _dev_err(& pdev->dev,(char *)"Failed to map configuration regs\n");
    #line 328 
    return -12;
  }
  #line 331 
  hwif->intr_regs_base = pci_ioremap_bar(pdev,2);
  #line 332 
  if (hwif->intr_regs_base == (void *)0) {
    #line 333 
    _dev_err(& pdev->dev,(char *)"Failed to map configuration regs\n");
    #line 334 
    err = -12;
    #line 335 
    goto err_map_intr_bar;
  }
  #line 338 
  err = hwif_ready(hwif);
  #line 339 
  if (err != 0) {
    #line 340 
    _dev_err(& pdev->dev,(char *)"HW interface is not ready\n");
    #line 341 
    goto err_hwif_ready;
  }
  #line 344 
  read_hwif_attr(hwif);
  #line 346 
  if (hwif->attr.func_type == (unsigned int)HINIC_PF) 
                                                      #line 347 
                                                      set_ppf(hwif);
  #line 350 
  dma_attr_init(hwif);
  #line 351 
  return 0;
  #line 353 
  err_hwif_ready: 
                  #line 353 
  ;
  #line 354 
  iounmap(hwif->intr_regs_base);
  #line 356 
  err_map_intr_bar: 
                    #line 356 
  ;
  #line 357 
  iounmap(hwif->cfg_regs_bar);
  #line 359 
  return err;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_if.c"
void hinic_free_hwif(struct hinic_hwif *hwif)
{
  #line 368 
  iounmap(hwif->intr_regs_base);
  #line 369 
  iounmap(hwif->cfg_regs_bar);
  #line 370 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_dev.i.aux"
static void *ERR_PTR_1(long error);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_dev.i.aux"
static void *cif_devm_kzalloc_4(struct device *dev, size_t size, gfp_t flags);
#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_enable_msix_exact(struct pci_dev *dev, struct msix_entry *entries, int nvec)
{
  #line 1442 
  int rc = pci_enable_msix_range(dev,entries,nvec,nvec);
  #line 1443 
  if (rc < 0) 
              #line 1444 
              return rc;
  #line 1445 
  return 0;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.h"
#line 123 
void hinic_register_mgmt_msg_cb(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod, void *handle, void (*callback)(void *, u8 , void *, u16 , void *, u16 *));
#line 131 
#line 131 
void hinic_unregister_mgmt_msg_cb(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod);
#line 139 
#line 139 
int hinic_pf_to_mgmt_init(struct hinic_pf_to_mgmt *pf_to_mgmt, struct hinic_hwif *hwif);
#line 142 
#line 142 
void hinic_pf_to_mgmt_free(struct hinic_pf_to_mgmt *pf_to_mgmt);
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_hwdev_cb_register(struct hinic_hwdev *hwdev, enum hinic_mgmt_msg_cmd cmd, void *handle, void (*handler)(void *, void *, u16 , void *, u16 *));
#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_hwdev_cb_unregister(struct hinic_hwdev *hwdev, enum hinic_mgmt_msg_cmd cmd);
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_ifup(struct hinic_hwdev *hwdev);
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_hwdev_ifdown(struct hinic_hwdev *hwdev);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
struct hinic_hwdev *hinic_init_hwdev(struct pci_dev *pdev);
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_free_hwdev(struct hinic_hwdev *hwdev);
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_max_num_qps(struct hinic_hwdev *hwdev);
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
struct hinic_sq *hinic_hwdev_get_sq(struct hinic_hwdev *hwdev, int i);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.h"
#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
struct hinic_rq *hinic_hwdev_get_rq(struct hinic_hwdev *hwdev, int i);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int get_capability(struct hinic_hwdev *hwdev, struct hinic_dev_cap *dev_cap)
{
  #line 74 
  int num_aeqs;
  #line 74 
  int num_ceqs;
  #line 74 
  int num_irqs;
  #line 73 
  struct hinic_cap *nic_cap = & hwdev->nic_cap;
  #line 76 
  if ((hwdev->hwif)->attr.func_type != (unsigned int)HINIC_PF && (hwdev->hwif)->attr.func_type != (unsigned int)HINIC_PPF) 
    #line 77 
    return -22;
  #line 79 
  if ((unsigned int)dev_cap->intr_type != 0U) 
                                              #line 80 
                                              return -14;
  #line 82 
  num_aeqs = (int)(hwdev->hwif)->attr.num_aeqs;
  #line 83 
  num_ceqs = (int)(hwdev->hwif)->attr.num_ceqs;
  #line 84 
  num_irqs = (int)(hwdev->hwif)->attr.num_irqs;
  #line 87 
  nic_cap->num_qps = (unsigned short)((num_irqs - (num_aeqs + num_ceqs)) / 2);
  #line 89 
  if ((unsigned int)nic_cap->num_qps > 42U) 
                                            #line 90 
                                            nic_cap->num_qps = (unsigned short)42U;
  #line 92 
  nic_cap->max_qps = (unsigned short)((unsigned int)dev_cap->max_sqs + 1U);
  #line 93 
  if ((int)nic_cap->max_qps != (int)dev_cap->max_rqs + 1) 
                                                          #line 94 
                                                          return -14;
  #line 96 
  if ((int)nic_cap->num_qps > (int)nic_cap->max_qps) 
                                                     #line 97 
                                                     nic_cap->num_qps = nic_cap->max_qps;
  #line 99 
  return 0;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int get_cap_from_fw(struct hinic_pfhwdev *pfhwdev)
{
  #line 113 
  struct hinic_dev_cap dev_cap;
  #line 114 
  u16 in_len;
  #line 114 
  u16 out_len;
  #line 115 
  int err;
  #line 110 
  struct hinic_hwdev *hwdev = & pfhwdev->hwdev;
  #line 111 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 112 
  struct pci_dev *pdev = hwif->pdev;
  #line 117 
  in_len = (unsigned short)0U;
  #line 118 
  out_len = (unsigned short)292U;
  #line 120 
  err = hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,(enum hinic_mod_type)HINIC_MOD_CFGM,(unsigned char)0,(void *)(& dev_cap),(unsigned short)((int)in_len),(void *)(& dev_cap),& out_len,(enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
  #line 123 
  if (err != 0) {
    #line 124 
    _dev_err(& pdev->dev,(char *)"Failed to get capability from FW\n");
    #line 125 
    return err;
  }
  #line 128 
  return get_capability(hwdev,& dev_cap);
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int get_dev_cap(struct hinic_hwdev *hwdev)
{
  #line 141 
  struct hinic_pfhwdev *pfhwdev;
  #line 142 
  int err;
  #line 139 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 140 
  struct pci_dev *pdev = hwif->pdev;
  #line 144 
  switch ((unsigned int)hwif->attr.func_type) {
    #line 147 
    void *__mptr;
    #line 145 
    case (unsigned int)2: 
                          #line 145 
    ;
    #line 146 
    case (unsigned int)0: 
                          #line 146 
    ;
    #line 147 
    __mptr = (void *)hwdev;
    #line 147 
    pfhwdev = ((struct hinic_pfhwdev *)__mptr);
    #line 149 
    err = get_cap_from_fw(pfhwdev);
    #line 150 
    if (err != 0) {
      #line 151 
      _dev_err(& pdev->dev,(char *)"Failed to get capability from FW\n");
      #line 152 
      return err;
    }
    #line 154 
    break;
    #line 156 
    default: 
             #line 156 
    ;
    #line 157 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 158 
    return -22;
  }
  #line 161 
  return 0;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int init_msix(struct hinic_hwdev *hwdev)
{
  #line 174 
  int nr_irqs;
  #line 174 
  int num_aeqs;
  #line 174 
  int num_ceqs;
  #line 175 
  size_t msix_entries_size;
  #line 176 
  int i;
  #line 176 
  int err;
  #line 172 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 173 
  struct pci_dev *pdev = hwif->pdev;
  #line 178 
  num_aeqs = (int)hwif->attr.num_aeqs;
  #line 179 
  num_ceqs = (int)hwif->attr.num_ceqs;
  #line 180 
  nr_irqs = (num_aeqs + 64) + num_ceqs;
  #line 181 
  if ((int)hwif->attr.num_irqs < nr_irqs) 
                                          #line 182 
                                          nr_irqs = (int)hwif->attr.num_irqs;
  #line 184 
  msix_entries_size = (unsigned long)nr_irqs * 8UL;
  #line 185 
  hwdev->msix_entries = (struct msix_entry *)cif_devm_kzalloc_4(& pdev->dev,msix_entries_size,3264U);
  #line 187 
  if (hwdev->msix_entries == (struct msix_entry *)0) 
                                                     #line 188 
                                                     return -12;
  #line 190 
  i = 0;
  #line 190 
  while (i < nr_irqs) {
    #line 191 
    (hwdev->msix_entries + (unsigned long)i)->entry = (unsigned short)i;
    #line 190 
    i ++;
  }
  #line 193 
  err = pci_enable_msix_exact(pdev,hwdev->msix_entries,nr_irqs);
  #line 194 
  if (err != 0) {
    #line 195 
    _dev_err(& pdev->dev,(char *)"Failed to enable pci msix\n");
    #line 196 
    return err;
  }
  #line 199 
  return 0;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static void disable_msix(struct hinic_hwdev *hwdev)
{
  #line 208 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 209 
  struct pci_dev *pdev = hwif->pdev;
  #line 211 
  pci_disable_msix(pdev);
  #line 212 
  return;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_port_msg_cmd(struct hinic_hwdev *hwdev, enum hinic_port_cmd cmd, void *buf_in, u16 in_size, void *buf_out, u16 *out_size)
{
  #line 237 
  void *__mptr;
  #line 230 
  struct hinic_pfhwdev *pfhwdev;
  #line 228 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 229 
  struct pci_dev *pdev = hwif->pdev;
  #line 232 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 233 
    _dev_err(& pdev->dev,(char *)"unsupported PCI Function type\n");
    #line 234 
    return -22;
  }
  #line 237 
  __mptr = (void *)hwdev;
  #line 237 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 239 
  return hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,
                          (enum hinic_mod_type)HINIC_MOD_L2NIC,
                          (unsigned char)((int)((unsigned char)cmd)),buf_in,
                          (unsigned short)((int)in_size),buf_out,out_size,
                          (enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int init_fw_ctxt(struct hinic_hwdev *hwdev)
{
  #line 254 
  struct hinic_cmd_fw_ctxt fw_ctxt;
  #line 255 
  u16 out_size;
  #line 256 
  int err;
  #line 252 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 253 
  struct pci_dev *pdev = hwif->pdev;
  #line 258 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 259 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 260 
    return -22;
  }
  #line 263 
  fw_ctxt.func_idx = hwif->attr.func_idx;
  #line 264 
  fw_ctxt.rx_buf_sz = (unsigned short)2048U;
  #line 266 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_FWCTXT_INIT,(void *)(& fw_ctxt),(unsigned short)16,(void *)(& fw_ctxt),& out_size);
  #line 269 
  if ((err != 0 || (unsigned int)out_size != 16U) || (unsigned int)fw_ctxt.status != 0U) {
    #line 270 
    _dev_err(& pdev->dev,(char *)"Failed to init FW ctxt, ret = %d\n",(int)fw_ctxt.status);
    #line 272 
    return -14;
  }
  #line 275 
  return 0;
}

#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int set_hw_ioctxt(struct hinic_hwdev *hwdev, unsigned int rq_depth, unsigned int sq_depth)
{
  #line 312 
  void *__mptr;
  #line 290 
  struct hinic_cmd_hw_ioctxt hw_ioctxt;
  #line 292 
  struct hinic_pfhwdev *pfhwdev;
  #line 289 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 291 
  struct pci_dev *pdev = hwif->pdev;
  #line 294 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 295 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 296 
    return -22;
  }
  #line 299 
  hw_ioctxt.func_idx = hwif->attr.func_idx;
  #line 301 
  hw_ioctxt.set_cmdq_depth = (unsigned char)0U;
  #line 302 
  hw_ioctxt.cmdq_depth = (unsigned char)0U;
  #line 304 
  hw_ioctxt.lro_en = (unsigned char)1U;
  #line 306 
  if (0 != 0) {
    #line 306 
    unsigned int tmp_29;
    #line 306 
    unsigned int tmp_30;
    #line 306 
    unsigned int tmp;
    #line 306 
    unsigned int tmp_31;
    #line 306 
    unsigned int tmp_32;
    #line 306 
    unsigned int tmp_0;
    #line 306 
    unsigned int tmp_1;
    #line 306 
    unsigned int tmp_33;
    #line 306 
    unsigned int tmp_34;
    #line 306 
    unsigned int tmp_2;
    #line 306 
    unsigned int tmp_3;
    #line 306 
    unsigned int tmp_35;
    #line 306 
    unsigned int tmp_36;
    #line 306 
    unsigned int tmp_4;
    #line 306 
    unsigned int tmp_5;
    #line 306 
    unsigned int tmp_37;
    #line 306 
    unsigned int tmp_38;
    #line 306 
    unsigned int tmp_6;
    #line 306 
    unsigned int tmp_7;
    #line 306 
    unsigned int tmp_39;
    #line 306 
    unsigned int tmp_40;
    #line 306 
    unsigned int tmp_8;
    #line 306 
    unsigned int tmp_9;
    #line 306 
    unsigned int tmp_41;
    #line 306 
    unsigned int tmp_42;
    #line 306 
    unsigned int tmp_10;
    #line 306 
    unsigned int tmp_11;
    #line 306 
    unsigned int tmp_43;
    #line 306 
    unsigned int tmp_44;
    #line 306 
    unsigned int tmp_12;
    #line 306 
    unsigned int tmp_13;
    #line 306 
    unsigned int tmp_45;
    #line 306 
    unsigned int tmp_46;
    #line 306 
    unsigned int tmp_14;
    #line 306 
    unsigned int tmp_15;
    #line 306 
    unsigned int tmp_47;
    #line 306 
    unsigned int tmp_48;
    #line 306 
    unsigned int tmp_16;
    #line 306 
    unsigned int tmp_17;
    #line 306 
    unsigned int tmp_49;
    #line 306 
    unsigned int tmp_50;
    #line 306 
    unsigned int tmp_18;
    #line 306 
    unsigned int tmp_19;
    #line 306 
    unsigned int tmp_51;
    #line 306 
    unsigned int tmp_52;
    #line 306 
    unsigned int tmp_20;
    #line 306 
    unsigned int tmp_21;
    #line 306 
    unsigned int tmp_53;
    #line 306 
    unsigned int tmp_54;
    #line 306 
    unsigned int tmp_22;
    #line 306 
    unsigned int tmp_23;
    #line 306 
    unsigned int tmp_55;
    #line 306 
    unsigned int tmp_56;
    #line 306 
    unsigned int tmp_24;
    #line 306 
    unsigned int tmp_25;
    #line 306 
    unsigned int tmp_57;
    #line 306 
    unsigned int tmp_58;
    #line 306 
    unsigned int tmp_26;
    #line 306 
    unsigned int tmp_27;
    #line 306 
    unsigned int tmp_59;
    #line 306 
    unsigned int tmp_60;
    #line 306 
    unsigned int tmp_28;
    #line 306 
    unsigned int tmp_61;
    #line 306 
    if (rq_depth > 1U) {
      #line 306 
      if (((unsigned long long)rq_depth & 9223372036854775808ULL) == 0ULL) {
        #line 306 
        if (((unsigned long long)rq_depth & 4611686018427387904ULL) == 0ULL) {
          #line 306 
          if (((unsigned long long)rq_depth & 2305843009213693952ULL) == 0ULL) {
            #line 306 
            if (((unsigned long long)rq_depth & 1152921504606846976ULL) == 0ULL) {
              #line 306 
              if (((unsigned long long)rq_depth & 576460752303423488ULL) == 0ULL) {
                #line 306 
                if (((unsigned long long)rq_depth & 288230376151711744ULL) == 0ULL) {
                  #line 306 
                  if (((unsigned long long)rq_depth & 144115188075855872ULL) == 0ULL) {
                    #line 306 
                    if (((unsigned long long)rq_depth & 72057594037927936ULL) == 0ULL) {
                      #line 306 
                      if (((unsigned long long)rq_depth & 36028797018963968ULL) == 0ULL) {
                        #line 306 
                        if (((unsigned long long)rq_depth & 18014398509481984ULL) == 0ULL) {
                          #line 306 
                          if (((unsigned long long)rq_depth & 9007199254740992ULL) == 0ULL) {
                            #line 306 
                            if (((unsigned long long)rq_depth & 4503599627370496ULL) == 0ULL) {
                              #line 306 
                              if (((unsigned long long)rq_depth & 2251799813685248ULL) == 0ULL) {
                                #line 306 
                                if (((unsigned long long)rq_depth & 1125899906842624ULL) == 0ULL) {
                                  #line 306 
                                  if (((unsigned long long)rq_depth & 562949953421312ULL) == 0ULL) {
                                    #line 306 
                                    if (((unsigned long long)rq_depth & 281474976710656ULL) == 0ULL) {
                                      #line 306 
                                      if (((unsigned long long)rq_depth & 140737488355328ULL) == 0ULL) {
                                        #line 306 
                                        if (((unsigned long long)rq_depth & 70368744177664ULL) == 0ULL) {
                                          #line 306 
                                          if (((unsigned long long)rq_depth & 35184372088832ULL) == 0ULL) {
                                            #line 306 
                                            if (((unsigned long long)rq_depth & 17592186044416ULL) == 0ULL) {
                                              #line 306 
                                              if (((unsigned long long)rq_depth & 8796093022208ULL) == 0ULL) {
                                                #line 306 
                                                if (((unsigned long long)rq_depth & 4398046511104ULL) == 0ULL) {
                                                  #line 306 
                                                  if (((unsigned long long)rq_depth & 2199023255552ULL) == 0ULL) {
                                                    #line 306 
                                                    if (((unsigned long long)rq_depth & 1099511627776ULL) == 0ULL) {
                                                      #line 306 
                                                      if (((unsigned long long)rq_depth & 549755813888ULL) == 0ULL) {
                                                        #line 306 
                                                        if (((unsigned long long)rq_depth & 274877906944ULL) == 0ULL) {
                                                          #line 306 
                                                          if (((unsigned long long)rq_depth & 137438953472ULL) == 0ULL) {
                                                            #line 306 
                                                            if (((unsigned long long)rq_depth & 68719476736ULL) == 0ULL) {
                                                              #line 306 
                                                              if (((unsigned long long)rq_depth & 34359738368ULL) == 0ULL) {
                                                                #line 306 
                                                                if (((unsigned long long)rq_depth & 17179869184ULL) == 0ULL) {
                                                                  #line 306 
                                                                  if (
                                                                    ((unsigned long long)rq_depth & 8589934592ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 4294967296ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 2147483648ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 1073741824ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 536870912ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 268435456ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 134217728ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 67108864ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 33554432ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 16777216ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 8388608ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 4194304ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 2097152ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 1048576ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 524288ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 262144ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 131072ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 65536ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 32768ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 16384ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 8192ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 4096ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 2048ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 1024ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 512ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 256ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 128ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 64ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 32ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 16ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 8ULL) == 0ULL) {
                                                                    #line 306 
                                                                    if (
                                                                    ((unsigned long long)rq_depth & 4ULL) != 0ULL) 
                                                                    #line 306 
                                                                    tmp = 2U; else 
                                                                    #line 306 
                                                                    tmp = 1U;
                                                                    #line 306 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_0 = 3U;
                                                                    #line 306 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_1 = 4U;
                                                                    #line 306 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_2 = 5U;
                                                                    #line 306 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_3 = 6U;
                                                                    #line 306 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_4 = 7U;
                                                                    #line 306 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_5 = 8U;
                                                                    #line 306 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_6 = 9U;
                                                                    #line 306 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_7 = 10U;
                                                                    #line 306 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_8 = 11U;
                                                                    #line 306 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_9 = 12U;
                                                                    #line 306 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_10 = 13U;
                                                                    #line 306 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_11 = 14U;
                                                                    #line 306 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_12 = 15U;
                                                                    #line 306 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_13 = 16U;
                                                                    #line 306 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_14 = 17U;
                                                                    #line 306 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_15 = 18U;
                                                                    #line 306 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_16 = 19U;
                                                                    #line 306 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_17 = 20U;
                                                                    #line 306 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_18 = 21U;
                                                                    #line 306 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_19 = 22U;
                                                                    #line 306 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_20 = 23U;
                                                                    #line 306 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_21 = 24U;
                                                                    #line 306 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_22 = 25U;
                                                                    #line 306 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_23 = 26U;
                                                                    #line 306 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_24 = 27U;
                                                                    #line 306 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_25 = 28U;
                                                                    #line 306 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_26 = 29U;
                                                                    #line 306 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_27 = 30U;
                                                                    #line 306 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_28 = 31U;
                                                                    #line 306 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 306 
                                                                    tmp_29 = 32U;
                                                                    #line 306 
                                                                    tmp_30 = tmp_29;
                                                                  }
                                                                  else 
                                                                    #line 306 
                                                                    tmp_30 = 33U;
                                                                  #line 306 
                                                                  tmp_31 = tmp_30;
                                                                }
                                                                else 
                                                                  #line 306 
                                                                  tmp_31 = 34U;
                                                                #line 306 
                                                                tmp_32 = tmp_31;
                                                              }
                                                              else 
                                                                   #line 306 
                                                                   tmp_32 = 35U;
                                                              #line 306 
                                                              tmp_33 = tmp_32;
                                                            }
                                                            else 
                                                                 #line 306 
                                                                 tmp_33 = 36U;
                                                            #line 306 
                                                            tmp_34 = tmp_33;
                                                          }
                                                          else 
                                                               #line 306 
                                                               tmp_34 = 37U;
                                                          #line 306 
                                                          tmp_35 = tmp_34;
                                                        }
                                                        else 
                                                             #line 306 
                                                             tmp_35 = 38U;
                                                        #line 306 
                                                        tmp_36 = tmp_35;
                                                      }
                                                      else 
                                                           #line 306 
                                                           tmp_36 = 39U;
                                                      #line 306 
                                                      tmp_37 = tmp_36;
                                                    }
                                                    else 
                                                         #line 306 
                                                         tmp_37 = 40U;
                                                    #line 306 
                                                    tmp_38 = tmp_37;
                                                  }
                                                  else 
                                                       #line 306 
                                                       tmp_38 = 41U;
                                                  #line 306 
                                                  tmp_39 = tmp_38;
                                                }
                                                else 
                                                     #line 306 
                                                     tmp_39 = 42U;
                                                #line 306 
                                                tmp_40 = tmp_39;
                                              }
                                              else 
                                                   #line 306 
                                                   tmp_40 = 43U;
                                              #line 306 
                                              tmp_41 = tmp_40;
                                            }
                                            else 
                                                 #line 306 
                                                 tmp_41 = 44U;
                                            #line 306 
                                            tmp_42 = tmp_41;
                                          }
                                          else 
                                               #line 306 
                                               tmp_42 = 45U;
                                          #line 306 
                                          tmp_43 = tmp_42;
                                        }
                                        else 
                                             #line 306 
                                             tmp_43 = 46U;
                                        #line 306 
                                        tmp_44 = tmp_43;
                                      }
                                      else 
                                           #line 306 
                                           tmp_44 = 47U;
                                      #line 306 
                                      tmp_45 = tmp_44;
                                    }
                                    else 
                                         #line 306 
                                         tmp_45 = 48U;
                                    #line 306 
                                    tmp_46 = tmp_45;
                                  }
                                  else 
                                       #line 306 
                                       tmp_46 = 49U;
                                  #line 306 
                                  tmp_47 = tmp_46;
                                }
                                else 
                                     #line 306 
                                     tmp_47 = 50U;
                                #line 306 
                                tmp_48 = tmp_47;
                              }
                              else 
                                   #line 306 
                                   tmp_48 = 51U;
                              #line 306 
                              tmp_49 = tmp_48;
                            }
                            else 
                                 #line 306 
                                 tmp_49 = 52U;
                            #line 306 
                            tmp_50 = tmp_49;
                          }
                          else 
                               #line 306 
                               tmp_50 = 53U;
                          #line 306 
                          tmp_51 = tmp_50;
                        }
                        else 
                             #line 306 
                             tmp_51 = 54U;
                        #line 306 
                        tmp_52 = tmp_51;
                      }
                      else 
                           #line 306 
                           tmp_52 = 55U;
                      #line 306 
                      tmp_53 = tmp_52;
                    }
                    else 
                         #line 306 
                         tmp_53 = 56U;
                    #line 306 
                    tmp_54 = tmp_53;
                  }
                  else 
                       #line 306 
                       tmp_54 = 57U;
                  #line 306 
                  tmp_55 = tmp_54;
                }
                else 
                     #line 306 
                     tmp_55 = 58U;
                #line 306 
                tmp_56 = tmp_55;
              }
              else 
                   #line 306 
                   tmp_56 = 59U;
              #line 306 
              tmp_57 = tmp_56;
            }
            else 
                 #line 306 
                 tmp_57 = 60U;
            #line 306 
            tmp_58 = tmp_57;
          }
          else 
               #line 306 
               tmp_58 = 61U;
          #line 306 
          tmp_59 = tmp_58;
        }
        else 
             #line 306 
             tmp_59 = 62U;
        #line 306 
        tmp_60 = tmp_59;
      }
      else 
           #line 306 
           tmp_60 = 63U;
      #line 306 
      tmp_61 = tmp_60;
    }
    else 
         #line 306 
         tmp_61 = 0U;
    #line 306 
    hw_ioctxt.rq_depth = (unsigned short)tmp_61;
  }
  else {
    #line 306 
    hw_ioctxt.rq_depth = (unsigned short)__ilog2_u32(rq_depth);
  }
  #line 308 
  hw_ioctxt.rx_buf_sz_idx = (unsigned short)11U;
  #line 310 
  if (0 != 0) {
    #line 310 
    unsigned int tmp_93;
    #line 310 
    unsigned int tmp_94;
    #line 310 
    unsigned int tmp_63;
    #line 310 
    unsigned int tmp_95;
    #line 310 
    unsigned int tmp_96;
    #line 310 
    unsigned int tmp_64;
    #line 310 
    unsigned int tmp_65;
    #line 310 
    unsigned int tmp_97;
    #line 310 
    unsigned int tmp_98;
    #line 310 
    unsigned int tmp_66;
    #line 310 
    unsigned int tmp_67;
    #line 310 
    unsigned int tmp_99;
    #line 310 
    unsigned int tmp_100;
    #line 310 
    unsigned int tmp_68;
    #line 310 
    unsigned int tmp_69;
    #line 310 
    unsigned int tmp_101;
    #line 310 
    unsigned int tmp_102;
    #line 310 
    unsigned int tmp_70;
    #line 310 
    unsigned int tmp_71;
    #line 310 
    unsigned int tmp_103;
    #line 310 
    unsigned int tmp_104;
    #line 310 
    unsigned int tmp_72;
    #line 310 
    unsigned int tmp_73;
    #line 310 
    unsigned int tmp_105;
    #line 310 
    unsigned int tmp_106;
    #line 310 
    unsigned int tmp_74;
    #line 310 
    unsigned int tmp_75;
    #line 310 
    unsigned int tmp_107;
    #line 310 
    unsigned int tmp_108;
    #line 310 
    unsigned int tmp_76;
    #line 310 
    unsigned int tmp_77;
    #line 310 
    unsigned int tmp_109;
    #line 310 
    unsigned int tmp_110;
    #line 310 
    unsigned int tmp_78;
    #line 310 
    unsigned int tmp_79;
    #line 310 
    unsigned int tmp_111;
    #line 310 
    unsigned int tmp_112;
    #line 310 
    unsigned int tmp_80;
    #line 310 
    unsigned int tmp_81;
    #line 310 
    unsigned int tmp_113;
    #line 310 
    unsigned int tmp_114;
    #line 310 
    unsigned int tmp_82;
    #line 310 
    unsigned int tmp_83;
    #line 310 
    unsigned int tmp_115;
    #line 310 
    unsigned int tmp_116;
    #line 310 
    unsigned int tmp_84;
    #line 310 
    unsigned int tmp_85;
    #line 310 
    unsigned int tmp_117;
    #line 310 
    unsigned int tmp_118;
    #line 310 
    unsigned int tmp_86;
    #line 310 
    unsigned int tmp_87;
    #line 310 
    unsigned int tmp_119;
    #line 310 
    unsigned int tmp_120;
    #line 310 
    unsigned int tmp_88;
    #line 310 
    unsigned int tmp_89;
    #line 310 
    unsigned int tmp_121;
    #line 310 
    unsigned int tmp_122;
    #line 310 
    unsigned int tmp_90;
    #line 310 
    unsigned int tmp_91;
    #line 310 
    unsigned int tmp_123;
    #line 310 
    unsigned int tmp_124;
    #line 310 
    unsigned int tmp_92;
    #line 310 
    unsigned int tmp_125;
    #line 310 
    if (sq_depth > 1U) {
      #line 310 
      if (((unsigned long long)sq_depth & 9223372036854775808ULL) == 0ULL) {
        #line 310 
        if (((unsigned long long)sq_depth & 4611686018427387904ULL) == 0ULL) {
          #line 310 
          if (((unsigned long long)sq_depth & 2305843009213693952ULL) == 0ULL) {
            #line 310 
            if (((unsigned long long)sq_depth & 1152921504606846976ULL) == 0ULL) {
              #line 310 
              if (((unsigned long long)sq_depth & 576460752303423488ULL) == 0ULL) {
                #line 310 
                if (((unsigned long long)sq_depth & 288230376151711744ULL) == 0ULL) {
                  #line 310 
                  if (((unsigned long long)sq_depth & 144115188075855872ULL) == 0ULL) {
                    #line 310 
                    if (((unsigned long long)sq_depth & 72057594037927936ULL) == 0ULL) {
                      #line 310 
                      if (((unsigned long long)sq_depth & 36028797018963968ULL) == 0ULL) {
                        #line 310 
                        if (((unsigned long long)sq_depth & 18014398509481984ULL) == 0ULL) {
                          #line 310 
                          if (((unsigned long long)sq_depth & 9007199254740992ULL) == 0ULL) {
                            #line 310 
                            if (((unsigned long long)sq_depth & 4503599627370496ULL) == 0ULL) {
                              #line 310 
                              if (((unsigned long long)sq_depth & 2251799813685248ULL) == 0ULL) {
                                #line 310 
                                if (((unsigned long long)sq_depth & 1125899906842624ULL) == 0ULL) {
                                  #line 310 
                                  if (((unsigned long long)sq_depth & 562949953421312ULL) == 0ULL) {
                                    #line 310 
                                    if (((unsigned long long)sq_depth & 281474976710656ULL) == 0ULL) {
                                      #line 310 
                                      if (((unsigned long long)sq_depth & 140737488355328ULL) == 0ULL) {
                                        #line 310 
                                        if (((unsigned long long)sq_depth & 70368744177664ULL) == 0ULL) {
                                          #line 310 
                                          if (((unsigned long long)sq_depth & 35184372088832ULL) == 0ULL) {
                                            #line 310 
                                            if (((unsigned long long)sq_depth & 17592186044416ULL) == 0ULL) {
                                              #line 310 
                                              if (((unsigned long long)sq_depth & 8796093022208ULL) == 0ULL) {
                                                #line 310 
                                                if (((unsigned long long)sq_depth & 4398046511104ULL) == 0ULL) {
                                                  #line 310 
                                                  if (((unsigned long long)sq_depth & 2199023255552ULL) == 0ULL) {
                                                    #line 310 
                                                    if (((unsigned long long)sq_depth & 1099511627776ULL) == 0ULL) {
                                                      #line 310 
                                                      if (((unsigned long long)sq_depth & 549755813888ULL) == 0ULL) {
                                                        #line 310 
                                                        if (((unsigned long long)sq_depth & 274877906944ULL) == 0ULL) {
                                                          #line 310 
                                                          if (((unsigned long long)sq_depth & 137438953472ULL) == 0ULL) {
                                                            #line 310 
                                                            if (((unsigned long long)sq_depth & 68719476736ULL) == 0ULL) {
                                                              #line 310 
                                                              if (((unsigned long long)sq_depth & 34359738368ULL) == 0ULL) {
                                                                #line 310 
                                                                if (((unsigned long long)sq_depth & 17179869184ULL) == 0ULL) {
                                                                  #line 310 
                                                                  if (
                                                                    ((unsigned long long)sq_depth & 8589934592ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 4294967296ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 2147483648ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 1073741824ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 536870912ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 268435456ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 134217728ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 67108864ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 33554432ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 16777216ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 8388608ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 4194304ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 2097152ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 1048576ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 524288ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 262144ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 131072ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 65536ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 32768ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 16384ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 8192ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 4096ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 2048ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 1024ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 512ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 256ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 128ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 64ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 32ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 16ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 8ULL) == 0ULL) {
                                                                    #line 310 
                                                                    if (
                                                                    ((unsigned long long)sq_depth & 4ULL) != 0ULL) 
                                                                    #line 310 
                                                                    tmp_63 = 2U; else 
                                                                    #line 310 
                                                                    tmp_63 = 1U;
                                                                    #line 310 
                                                                    tmp_64 = tmp_63;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_64 = 3U;
                                                                    #line 310 
                                                                    tmp_65 = tmp_64;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_65 = 4U;
                                                                    #line 310 
                                                                    tmp_66 = tmp_65;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_66 = 5U;
                                                                    #line 310 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_67 = 6U;
                                                                    #line 310 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_68 = 7U;
                                                                    #line 310 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_69 = 8U;
                                                                    #line 310 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_70 = 9U;
                                                                    #line 310 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_71 = 10U;
                                                                    #line 310 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_72 = 11U;
                                                                    #line 310 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_73 = 12U;
                                                                    #line 310 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_74 = 13U;
                                                                    #line 310 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_75 = 14U;
                                                                    #line 310 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_76 = 15U;
                                                                    #line 310 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_77 = 16U;
                                                                    #line 310 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_78 = 17U;
                                                                    #line 310 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_79 = 18U;
                                                                    #line 310 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_80 = 19U;
                                                                    #line 310 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_81 = 20U;
                                                                    #line 310 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_82 = 21U;
                                                                    #line 310 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_83 = 22U;
                                                                    #line 310 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_84 = 23U;
                                                                    #line 310 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_85 = 24U;
                                                                    #line 310 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_86 = 25U;
                                                                    #line 310 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_87 = 26U;
                                                                    #line 310 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_88 = 27U;
                                                                    #line 310 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_89 = 28U;
                                                                    #line 310 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_90 = 29U;
                                                                    #line 310 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_91 = 30U;
                                                                    #line 310 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_92 = 31U;
                                                                    #line 310 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 310 
                                                                    tmp_93 = 32U;
                                                                    #line 310 
                                                                    tmp_94 = tmp_93;
                                                                  }
                                                                  else 
                                                                    #line 310 
                                                                    tmp_94 = 33U;
                                                                  #line 310 
                                                                  tmp_95 = tmp_94;
                                                                }
                                                                else 
                                                                  #line 310 
                                                                  tmp_95 = 34U;
                                                                #line 310 
                                                                tmp_96 = tmp_95;
                                                              }
                                                              else 
                                                                   #line 310 
                                                                   tmp_96 = 35U;
                                                              #line 310 
                                                              tmp_97 = tmp_96;
                                                            }
                                                            else 
                                                                 #line 310 
                                                                 tmp_97 = 36U;
                                                            #line 310 
                                                            tmp_98 = tmp_97;
                                                          }
                                                          else 
                                                               #line 310 
                                                               tmp_98 = 37U;
                                                          #line 310 
                                                          tmp_99 = tmp_98;
                                                        }
                                                        else 
                                                             #line 310 
                                                             tmp_99 = 38U;
                                                        #line 310 
                                                        tmp_100 = tmp_99;
                                                      }
                                                      else 
                                                           #line 310 
                                                           tmp_100 = 39U;
                                                      #line 310 
                                                      tmp_101 = tmp_100;
                                                    }
                                                    else 
                                                         #line 310 
                                                         tmp_101 = 40U;
                                                    #line 310 
                                                    tmp_102 = tmp_101;
                                                  }
                                                  else 
                                                       #line 310 
                                                       tmp_102 = 41U;
                                                  #line 310 
                                                  tmp_103 = tmp_102;
                                                }
                                                else 
                                                     #line 310 
                                                     tmp_103 = 42U;
                                                #line 310 
                                                tmp_104 = tmp_103;
                                              }
                                              else 
                                                   #line 310 
                                                   tmp_104 = 43U;
                                              #line 310 
                                              tmp_105 = tmp_104;
                                            }
                                            else 
                                                 #line 310 
                                                 tmp_105 = 44U;
                                            #line 310 
                                            tmp_106 = tmp_105;
                                          }
                                          else 
                                               #line 310 
                                               tmp_106 = 45U;
                                          #line 310 
                                          tmp_107 = tmp_106;
                                        }
                                        else 
                                             #line 310 
                                             tmp_107 = 46U;
                                        #line 310 
                                        tmp_108 = tmp_107;
                                      }
                                      else 
                                           #line 310 
                                           tmp_108 = 47U;
                                      #line 310 
                                      tmp_109 = tmp_108;
                                    }
                                    else 
                                         #line 310 
                                         tmp_109 = 48U;
                                    #line 310 
                                    tmp_110 = tmp_109;
                                  }
                                  else 
                                       #line 310 
                                       tmp_110 = 49U;
                                  #line 310 
                                  tmp_111 = tmp_110;
                                }
                                else 
                                     #line 310 
                                     tmp_111 = 50U;
                                #line 310 
                                tmp_112 = tmp_111;
                              }
                              else 
                                   #line 310 
                                   tmp_112 = 51U;
                              #line 310 
                              tmp_113 = tmp_112;
                            }
                            else 
                                 #line 310 
                                 tmp_113 = 52U;
                            #line 310 
                            tmp_114 = tmp_113;
                          }
                          else 
                               #line 310 
                               tmp_114 = 53U;
                          #line 310 
                          tmp_115 = tmp_114;
                        }
                        else 
                             #line 310 
                             tmp_115 = 54U;
                        #line 310 
                        tmp_116 = tmp_115;
                      }
                      else 
                           #line 310 
                           tmp_116 = 55U;
                      #line 310 
                      tmp_117 = tmp_116;
                    }
                    else 
                         #line 310 
                         tmp_117 = 56U;
                    #line 310 
                    tmp_118 = tmp_117;
                  }
                  else 
                       #line 310 
                       tmp_118 = 57U;
                  #line 310 
                  tmp_119 = tmp_118;
                }
                else 
                     #line 310 
                     tmp_119 = 58U;
                #line 310 
                tmp_120 = tmp_119;
              }
              else 
                   #line 310 
                   tmp_120 = 59U;
              #line 310 
              tmp_121 = tmp_120;
            }
            else 
                 #line 310 
                 tmp_121 = 60U;
            #line 310 
            tmp_122 = tmp_121;
          }
          else 
               #line 310 
               tmp_122 = 61U;
          #line 310 
          tmp_123 = tmp_122;
        }
        else 
             #line 310 
             tmp_123 = 62U;
        #line 310 
        tmp_124 = tmp_123;
      }
      else 
           #line 310 
           tmp_124 = 63U;
      #line 310 
      tmp_125 = tmp_124;
    }
    else 
         #line 310 
         tmp_125 = 0U;
    #line 310 
    hw_ioctxt.sq_depth = (unsigned short)tmp_125;
  }
  else {
    #line 310 
    hw_ioctxt.sq_depth = (unsigned short)__ilog2_u32(sq_depth);
  }
  #line 312 
  __mptr = (void *)hwdev;
  #line 312 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 314 
  return hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,
                            (enum hinic_mod_type)HINIC_MOD_COMM,
                            (unsigned char)18,(void *)(& hw_ioctxt),
                            (unsigned short)24,(void *)0,(u16 *)0U,
                            (enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int wait_for_outbound_state(struct hinic_hwdev *hwdev)
{
  #line 322 
  enum hinic_outbound_state outbound_state;
  #line 325 
  unsigned long end;
  #line 323 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 324 
  struct pci_dev *pdev = hwif->pdev;
  #line 327 
  end = msecs_to_jiffies(100U) + jiffies;
  #line 328 
  while (1) {
    #line 329 
    outbound_state = hinic_outbound_state_get(hwif);
    #line 331 
    if (outbound_state == (unsigned int)HINIC_OUTBOUND_ENABLE) 
                                                               #line 332 
                                                               return 0;
    #line 334 
    msleep(20U);
    {
      #line 335 
      unsigned long __dummy;
      #line 335 
      unsigned long __dummy2;
      }
    #line 335 
    if (1 != 0) {
      {
        #line 335 
        unsigned long __dummy_0;
        #line 335 
        unsigned long __dummy2_0;
        }
      #line 335 
      if (1 != 0) {
        #line 335 
        if (! ((long)(jiffies - end) < 0L)) 
                                            #line 328 
                                            break;
      }
      else 
           #line 328 
           break;
    }
    else 
         #line 328 
         break;
  }
  #line 337 
  _dev_err(& pdev->dev,(char *)"Wait for OUTBOUND - Timeout\n");
  #line 338 
  return -14;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int wait_for_db_state(struct hinic_hwdev *hwdev)
{
  #line 345 
  enum hinic_db_state db_state;
  #line 346 
  unsigned long end;
  #line 343 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 344 
  struct pci_dev *pdev = hwif->pdev;
  #line 348 
  end = msecs_to_jiffies(100U) + jiffies;
  #line 349 
  while (1) {
    #line 350 
    db_state = hinic_db_state_get(hwif);
    #line 352 
    if (db_state == (unsigned int)HINIC_DB_ENABLE) 
                                                   #line 353 
                                                   return 0;
    #line 355 
    msleep(20U);
    {
      #line 356 
      unsigned long __dummy;
      #line 356 
      unsigned long __dummy2;
      }
    #line 356 
    if (1 != 0) {
      {
        #line 356 
        unsigned long __dummy_0;
        #line 356 
        unsigned long __dummy2_0;
        }
      #line 356 
      if (1 != 0) {
        #line 356 
        if (! ((long)(jiffies - end) < 0L)) 
                                            #line 349 
                                            break;
      }
      else 
           #line 349 
           break;
    }
    else 
         #line 349 
         break;
  }
  #line 358 
  _dev_err(& pdev->dev,(char *)"Wait for DB - Timeout\n");
  #line 359 
  return -14;
}

#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int wait_for_io_stopped(struct hinic_hwdev *hwdev)
{
  #line 377 
  void *__mptr;
  #line 364 
  struct hinic_cmd_io_status cmd_io_status;
  #line 367 
  struct hinic_pfhwdev *pfhwdev;
  #line 368 
  unsigned long end;
  #line 369 
  u16 out_size;
  #line 370 
  int err;
  #line 365 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 366 
  struct pci_dev *pdev = hwif->pdev;
  #line 372 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 373 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 374 
    return -22;
  }
  #line 377 
  __mptr = (void *)hwdev;
  #line 377 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 379 
  cmd_io_status.func_idx = hwif->attr.func_idx;
  #line 381 
  end = msecs_to_jiffies(100U) + jiffies;
  #line 382 
  while (1) {
    #line 383 
    err = hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,(enum hinic_mod_type)HINIC_MOD_COMM,(unsigned char)3,(void *)(& cmd_io_status),(unsigned short)16,(void *)(& cmd_io_status),& out_size,(enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
    #line 388 
    if (err != 0 || (unsigned int)out_size != 16U) {
      #line 389 
      _dev_err(& pdev->dev,(char *)"Failed to get IO status, ret = %d\n",err);
      #line 391 
      return err;
    }
    #line 394 
    if ((unsigned int)cmd_io_status.status == 0U) {
      #line 395 
      _dev_info(& pdev->dev,(char *)"IO stopped\n");
      #line 396 
      return 0;
    }
    #line 399 
    msleep(20U);
    {
      #line 400 
      unsigned long __dummy;
      #line 400 
      unsigned long __dummy2;
      }
    #line 400 
    if (1 != 0) {
      {
        #line 400 
        unsigned long __dummy_0;
        #line 400 
        unsigned long __dummy2_0;
        }
      #line 400 
      if (1 != 0) {
        #line 400 
        if (! ((long)(jiffies - end) < 0L)) 
                                            #line 382 
                                            break;
      }
      else 
           #line 382 
           break;
    }
    else 
         #line 382 
         break;
  }
  #line 402 
  _dev_err(& pdev->dev,(char *)"Wait for IO stopped - Timeout\n");
  #line 403 
  return -110;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int clear_io_resources(struct hinic_hwdev *hwdev)
{
  #line 433 
  void *__mptr;
  #line 414 
  struct hinic_cmd_clear_io_res cmd_clear_io_res;
  #line 417 
  struct hinic_pfhwdev *pfhwdev;
  #line 418 
  int err;
  #line 415 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 416 
  struct pci_dev *pdev = hwif->pdev;
  #line 420 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 421 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 422 
    return -22;
  }
  #line 425 
  err = wait_for_io_stopped(hwdev);
  #line 426 
  if (err != 0) {
    #line 427 
    _dev_err(& pdev->dev,(char *)"IO has not stopped yet\n");
    #line 428 
    return err;
  }
  #line 431 
  cmd_clear_io_res.func_idx = hwif->attr.func_idx;
  #line 433 
  __mptr = (void *)hwdev;
  #line 433 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 435 
  err = hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,(enum hinic_mod_type)HINIC_MOD_COMM,(unsigned char)41,(void *)(& cmd_clear_io_res),(unsigned short)12,(void *)0,(u16 *)0U,(enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
  #line 439 
  if (err != 0) {
    #line 440 
    _dev_err(& pdev->dev,(char *)"Failed to clear IO resources\n");
    #line 441 
    return err;
  }
  #line 444 
  return 0;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int set_resources_state(struct hinic_hwdev *hwdev, enum hinic_res_state state)
{
  #line 470 
  void *__mptr;
  #line 457 
  struct hinic_cmd_set_res_state res_state;
  #line 460 
  struct hinic_pfhwdev *pfhwdev;
  #line 458 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 459 
  struct pci_dev *pdev = hwif->pdev;
  #line 462 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 463 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 464 
    return -22;
  }
  #line 467 
  res_state.func_idx = hwif->attr.func_idx;
  #line 468 
  res_state.state = (unsigned char)state;
  #line 470 
  __mptr = (void *)hwdev;
  #line 470 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 472 
  return hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,
                          (enum hinic_mod_type)HINIC_MOD_COMM,
                          (unsigned char)36,(void *)(& res_state),
                          (unsigned short)16,(void *)0,(u16 *)0U,
                          (enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int get_base_qpn(struct hinic_hwdev *hwdev, u16 *base_qpn)
{
  #line 488 
  struct hinic_cmd_base_qpn cmd_base_qpn;
  #line 491 
  u16 out_size;
  #line 492 
  int err;
  #line 489 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 490 
  struct pci_dev *pdev = hwif->pdev;
  #line 494 
  cmd_base_qpn.func_idx = hwif->attr.func_idx;
  #line 496 
  err = hinic_port_msg_cmd(hwdev,(enum hinic_port_cmd)HINIC_PORT_CMD_GET_GLOBAL_QPN,(void *)(& cmd_base_qpn),(unsigned short)12,(void *)(& cmd_base_qpn),& out_size);
  #line 499 
  if ((err != 0 || (unsigned int)out_size != 12U) || (unsigned int)cmd_base_qpn.status != 0U) {
    #line 500 
    _dev_err(& pdev->dev,(char *)"Failed to get base qpn, status = %d\n",(int)cmd_base_qpn.status);
    #line 502 
    return -14;
  }
  #line 505 
  *base_qpn = cmd_base_qpn.qpn;
  #line 506 
  return 0;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_ifup(struct hinic_hwdev *hwdev)
{
  #line 520 
  int err;
  #line 520 
  int num_aeqs;
  #line 520 
  int num_ceqs;
  #line 520 
  int num_qps;
  #line 521 
  struct msix_entry *ceq_msix_entries;
  #line 522 
  struct msix_entry *sq_msix_entries;
  #line 523 
  struct msix_entry *rq_msix_entries;
  #line 525 
  u16 base_qpn;
  #line 517 
  struct hinic_func_to_io *func_to_io = & hwdev->func_to_io;
  #line 518 
  struct hinic_cap *nic_cap = & hwdev->nic_cap;
  #line 519 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 524 
  struct pci_dev *pdev = hwif->pdev;
  #line 527 
  err = get_base_qpn(hwdev,& base_qpn);
  #line 528 
  if (err != 0) {
    #line 529 
    _dev_err(& pdev->dev,(char *)"Failed to get global base qp number\n");
    #line 530 
    return err;
  }
  #line 533 
  num_aeqs = (int)hwif->attr.num_aeqs;
  #line 534 
  num_ceqs = (int)hwif->attr.num_ceqs;
  #line 536 
  ceq_msix_entries = hwdev->msix_entries + (unsigned long)num_aeqs;
  #line 538 
  err = hinic_io_init(func_to_io,hwif,(unsigned short)((int)nic_cap->max_qps),num_ceqs,ceq_msix_entries);
  #line 540 
  if (err != 0) {
    #line 541 
    _dev_err(& pdev->dev,(char *)"Failed to init IO channel\n");
    #line 542 
    return err;
  }
  #line 545 
  num_qps = (int)nic_cap->num_qps;
  #line 546 
  sq_msix_entries = hwdev->msix_entries + (unsigned long)(num_aeqs + num_ceqs);
  #line 547 
  rq_msix_entries = hwdev->msix_entries + (unsigned long)((num_aeqs + num_ceqs) + num_qps);
  #line 549 
  err = hinic_io_create_qps(func_to_io,(unsigned short)((int)base_qpn),num_qps,sq_msix_entries,rq_msix_entries);
  #line 551 
  if (err != 0) {
    #line 552 
    _dev_err(& pdev->dev,(char *)"Failed to create QPs\n");
    #line 553 
    goto err_create_qps;
  }
  #line 556 
  err = wait_for_db_state(hwdev);
  #line 557 
  if (err != 0) {
    #line 558 
    _dev_warn(& pdev->dev,(char *)"db - disabled, try again\n");
    #line 559 
    hinic_db_state_set(hwif,(enum hinic_db_state)HINIC_DB_ENABLE);
  }
  #line 562 
  err = set_hw_ioctxt(hwdev,4096U,4096U);
  #line 563 
  if (err != 0) {
    #line 564 
    _dev_err(& pdev->dev,(char *)"Failed to set HW IO ctxt\n");
    #line 565 
    goto err_hw_ioctxt;
  }
  #line 568 
  return 0;
  #line 570 
  err_hw_ioctxt: 
                 #line 570 
  ;
  #line 571 
  hinic_io_destroy_qps(func_to_io,num_qps);
  #line 573 
  err_create_qps: 
                  #line 573 
  ;
  #line 574 
  hinic_io_free(func_to_io);
  #line 575 
  return err;
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_hwdev_ifdown(struct hinic_hwdev *hwdev)
{
  #line 585 
  struct hinic_func_to_io *func_to_io = & hwdev->func_to_io;
  #line 586 
  struct hinic_cap *nic_cap = & hwdev->nic_cap;
  #line 588 
  clear_io_resources(hwdev);
  #line 590 
  hinic_io_destroy_qps(func_to_io,(int)nic_cap->num_qps);
  #line 591 
  hinic_io_free(func_to_io);
  #line 592 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_hwdev_cb_register(struct hinic_hwdev *hwdev, enum hinic_mgmt_msg_cmd cmd, void *handle, void (*handler)(void *, void *, u16 , void *, u16 *))
{
  #line 618 
  void *__mptr;
  #line 609 
  struct hinic_pfhwdev *pfhwdev;
  #line 610 
  struct hinic_nic_cb *nic_cb;
  #line 611 
  u8 cmd_cb;
  #line 607 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 608 
  struct pci_dev *pdev = hwif->pdev;
  #line 613 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 614 
    _dev_err(& pdev->dev,(char *)"unsupported PCI Function type\n");
    #line 615 
    return;
  }
  #line 618 
  __mptr = (void *)hwdev;
  #line 618 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 620 
  cmd_cb = (unsigned char)((unsigned int)((unsigned char)cmd) + 96U);
  #line 621 
  nic_cb = & pfhwdev->nic_cb[(int)cmd_cb];
  #line 623 
  nic_cb->handler = handler;
  #line 624 
  nic_cb->handle = handle;
  #line 625 
  nic_cb->cb_state = 1UL;
  #line 626 
  return;
}

#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_hwdev_cb_unregister(struct hinic_hwdev *hwdev, enum hinic_mgmt_msg_cmd cmd)
{
  #line 647 
  void *__mptr;
  #line 638 
  struct hinic_pfhwdev *pfhwdev;
  #line 639 
  struct hinic_nic_cb *nic_cb;
  #line 640 
  u8 cmd_cb;
  #line 636 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 637 
  struct pci_dev *pdev = hwif->pdev;
  #line 642 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 643 
    _dev_err(& pdev->dev,(char *)"unsupported PCI Function type\n");
    #line 644 
    return;
  }
  #line 647 
  __mptr = (void *)hwdev;
  #line 647 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 649 
  cmd_cb = (unsigned char)((unsigned int)((unsigned char)cmd) + 96U);
  #line 650 
  nic_cb = & pfhwdev->nic_cb[(int)cmd_cb];
  #line 652 
  nic_cb->cb_state &= 18446744073709551614UL;
  #line 654 
  while ((nic_cb->cb_state & 2UL) != 0UL) 
                                          #line 655 
                                          schedule();
  #line 657 
  nic_cb->handler = (void (*)(void *, void *, u16 , void *, u16 *))0;
  #line 658 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static void nic_mgmt_msg_handler(void *handle, u8 cmd, void *buf_in, u16 in_size, void *buf_out, u16 *out_size)
{
  #line 693 
  unsigned long __ret;
  #line 672 
  enum hinic_cb_state cb_state;
  #line 673 
  struct hinic_nic_cb *nic_cb;
  #line 674 
  struct hinic_hwdev *hwdev;
  #line 675 
  struct hinic_hwif *hwif;
  #line 676 
  struct pci_dev *pdev;
  #line 677 
  u8 cmd_cb;
  #line 671 
  struct hinic_pfhwdev *pfhwdev = (struct hinic_pfhwdev *)handle;
  #line 679 
  hwdev = & pfhwdev->hwdev;
  #line 680 
  hwif = hwdev->hwif;
  #line 681 
  pdev = hwif->pdev;
  #line 683 
  if ((unsigned int)cmd != 160U) {
    #line 685 
    _dev_err(& pdev->dev,(char *)"unknown L2NIC event, cmd = %d\n",(int)cmd);
    #line 686 
    return;
  }
  #line 689 
  cmd_cb = (unsigned char)((unsigned int)cmd + 96U);
  #line 691 
  nic_cb = & pfhwdev->nic_cb[(int)cmd_cb];
  {
    #line 693 
    unsigned long *__ai_ptr = & nic_cb->cb_state;
    #line 693 
    kasan_check_read((void *)__ai_ptr,8U);
    {
      #line 693 
      unsigned long __old = 1UL;
      #line 693 
      unsigned long __new = 3UL;
      #line 693 
      switch (8UL) {
        #line 693 
        case (unsigned long)1: 
                               #line 693 
        ;
        {
          #line 693 
          u8 *__ptr = (u8 *)__ai_ptr;
          #line 694 
          ldv_inline_asm();
          #line 693 
          break;
        }
        #line 693 
        case (unsigned long)2: 
                               #line 693 
        ;
        {
          #line 693 
          u16 *__ptr_0 = (u16 *)__ai_ptr;
          #line 694 
          ldv_inline_asm();
          #line 693 
          break;
        }
        #line 693 
        case (unsigned long)4: 
                               #line 693 
        ;
        {
          #line 693 
          u32 *__ptr_1 = (u32 *)__ai_ptr;
          #line 694 
          ldv_inline_asm();
          #line 693 
          break;
        }
        #line 693 
        case (unsigned long)8: 
                               #line 693 
        ;
        {
          #line 693 
          u64 *__ptr_2 = (u64 *)__ai_ptr;
          #line 694 
          ldv_inline_asm();
          #line 693 
          break;
        }
        #line 693 
        default: 
                 #line 693 
        ;
        #line 693 
        __cmpxchg_wrong_size();
      }
      }
    }
  #line 693 
  cb_state = (enum hinic_cb_state)__ret;
  #line 697 
  if (cb_state == (unsigned int)HINIC_CB_ENABLED && nic_cb->handler != (void (*)(void *, void *, u16 , void *, u16 *))0) 
    #line 698 
    (*(nic_cb->handler))(nic_cb->handle,buf_in,(unsigned short)((int)in_size),buf_out,out_size); else 
                                                                    #line 701 
                                                                    _dev_err(& pdev->dev,(char *)"Unhandled NIC Event %d\n",(int)cmd);
  #line 703 
  nic_cb->cb_state &= 18446744073709551613UL;
  #line 704 
  return;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static int init_pfhwdev(struct hinic_pfhwdev *pfhwdev)
{
  #line 717 
  int err;
  #line 714 
  struct hinic_hwdev *hwdev = & pfhwdev->hwdev;
  #line 715 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 716 
  struct pci_dev *pdev = hwif->pdev;
  #line 719 
  err = hinic_pf_to_mgmt_init(& pfhwdev->pf_to_mgmt,hwif);
  #line 720 
  if (err != 0) {
    #line 721 
    _dev_err(& pdev->dev,(char *)"Failed to initialize PF to MGMT channel\n");
    #line 722 
    return err;
  }
  #line 725 
  hinic_register_mgmt_msg_cb(& pfhwdev->pf_to_mgmt,(enum hinic_mod_type)HINIC_MOD_L2NIC,(void *)pfhwdev,& nic_mgmt_msg_handler);
  #line 728 
  hinic_set_pf_action(hwif,(enum hinic_pf_action)HINIC_PF_MGMT_ACTIVE);
  #line 729 
  return 0;
}

#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
static void free_pfhwdev(struct hinic_pfhwdev *pfhwdev)
{
  #line 738 
  struct hinic_hwdev *hwdev = & pfhwdev->hwdev;
  #line 740 
  hinic_set_pf_action(hwdev->hwif,(enum hinic_pf_action)HINIC_PF_MGMT_INIT);
  #line 742 
  hinic_unregister_mgmt_msg_cb(& pfhwdev->pf_to_mgmt,(enum hinic_mod_type)HINIC_MOD_L2NIC);
  #line 744 
  hinic_pf_to_mgmt_free(& pfhwdev->pf_to_mgmt);
  #line 745 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
struct hinic_hwdev *hinic_init_hwdev(struct pci_dev *pdev)
{
  #line 757 
  struct hinic_pfhwdev *pfhwdev;
  #line 758 
  struct hinic_hwdev *hwdev;
  #line 759 
  struct hinic_hwif *hwif;
  #line 760 
  int err;
  #line 760 
  int num_aeqs;
  #line 762 
  hwif = (struct hinic_hwif *)cif_devm_kzalloc_4(& pdev->dev,40UL,3264U);
  #line 763 
  if (hwif == (struct hinic_hwif *)0) {
    #line 764 
    return (struct hinic_hwdev *)ERR_PTR_1(-12L);
  }
  #line 766 
  err = hinic_init_hwif(hwif,pdev);
  #line 767 
  if (err != 0) {
    #line 768 
    _dev_err(& pdev->dev,(char *)"Failed to init HW interface\n");
    #line 769 
    return (struct hinic_hwdev *)ERR_PTR_1((long)err);
  }
  #line 772 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 773 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 774 
    err = -14;
    #line 775 
    goto err_func_type;
  }
  #line 778 
  pfhwdev = (struct hinic_pfhwdev *)cif_devm_kzalloc_4(& pdev->dev,12832UL,3264U);
  #line 779 
  if (pfhwdev == (struct hinic_pfhwdev *)0) {
    #line 780 
    err = -12;
    #line 781 
    goto err_pfhwdev_alloc;
  }
  #line 784 
  hwdev = & pfhwdev->hwdev;
  #line 785 
  hwdev->hwif = hwif;
  #line 787 
  err = init_msix(hwdev);
  #line 788 
  if (err != 0) {
    #line 789 
    _dev_err(& pdev->dev,(char *)"Failed to init msix\n");
    #line 790 
    goto err_init_msix;
  }
  #line 793 
  err = wait_for_outbound_state(hwdev);
  #line 794 
  if (err != 0) {
    #line 795 
    _dev_warn(& pdev->dev,(char *)"outbound - disabled, try again\n");
    #line 796 
    hinic_outbound_state_set(hwif,(enum hinic_outbound_state)HINIC_OUTBOUND_ENABLE);
  }
  #line 799 
  num_aeqs = (int)hwif->attr.num_aeqs;
  #line 801 
  err = hinic_aeqs_init(& hwdev->aeqs,hwif,num_aeqs,64U,4096U,hwdev->msix_entries);
  #line 804 
  if (err != 0) {
    #line 805 
    _dev_err(& pdev->dev,(char *)"Failed to init async event queues\n");
    #line 806 
    goto err_aeqs_init;
  }
  #line 809 
  err = init_pfhwdev(pfhwdev);
  #line 810 
  if (err != 0) {
    #line 811 
    _dev_err(& pdev->dev,(char *)"Failed to init PF HW device\n");
    #line 812 
    goto err_init_pfhwdev;
  }
  #line 815 
  err = get_dev_cap(hwdev);
  #line 816 
  if (err != 0) {
    #line 817 
    _dev_err(& pdev->dev,(char *)"Failed to get device capabilities\n");
    #line 818 
    goto err_dev_cap;
  }
  #line 821 
  err = init_fw_ctxt(hwdev);
  #line 822 
  if (err != 0) {
    #line 823 
    _dev_err(& pdev->dev,(char *)"Failed to init function table\n");
    #line 824 
    goto err_init_fw_ctxt;
  }
  #line 827 
  err = set_resources_state(hwdev,(enum hinic_res_state)HINIC_RES_ACTIVE);
  #line 828 
  if (err != 0) {
    #line 829 
    _dev_err(& pdev->dev,(char *)"Failed to set resources state\n");
    #line 830 
    goto err_resources_state;
  }
  #line 833 
  return hwdev;
  #line 835 
  err_resources_state: 
                       #line 835 
  ;
  #line 836 
  err_init_fw_ctxt: 
                    #line 836 
  ;
  #line 837 
  err_dev_cap: 
               #line 837 
  ;
  #line 838 
  free_pfhwdev(pfhwdev);
  #line 840 
  err_init_pfhwdev: 
                    #line 840 
  ;
  #line 841 
  hinic_aeqs_free(& hwdev->aeqs);
  #line 843 
  err_aeqs_init: 
                 #line 843 
  ;
  #line 844 
  disable_msix(hwdev);
  #line 846 
  err_init_msix: 
                 #line 846 
  ;
  #line 847 
  err_pfhwdev_alloc: 
                     #line 847 
  ;
  #line 848 
  err_func_type: 
                 #line 848 
  ;
  #line 849 
  hinic_free_hwif(hwif);
  #line 850 
  return (struct hinic_hwdev *)ERR_PTR_1((long)err);
}

#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_free_hwdev(struct hinic_hwdev *hwdev)
{
  #line 859 
  void *__mptr;
  #line 859 
  __mptr = (void *)hwdev;
  #line 859 
  struct hinic_pfhwdev *pfhwdev = ((struct hinic_pfhwdev *)__mptr);
  #line 863 
  set_resources_state(hwdev,(enum hinic_res_state)HINIC_RES_CLEAN);
  #line 865 
  free_pfhwdev(pfhwdev);
  #line 867 
  hinic_aeqs_free(& hwdev->aeqs);
  #line 869 
  disable_msix(hwdev);
  #line 871 
  hinic_free_hwif(hwdev->hwif);
  #line 872 
  return;
}

#line 874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_max_num_qps(struct hinic_hwdev *hwdev)
{
  #line 876 
  struct hinic_cap *nic_cap = & hwdev->nic_cap;
  #line 878 
  return (int)nic_cap->max_qps;
}

#line 887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_num_qps(struct hinic_hwdev *hwdev)
{
  #line 889 
  struct hinic_cap *nic_cap = & hwdev->nic_cap;
  #line 891 
  return (int)nic_cap->num_qps;
}

#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
struct hinic_sq *hinic_hwdev_get_sq(struct hinic_hwdev *hwdev, int i)
{
  #line 903 
  struct hinic_func_to_io *func_to_io = & hwdev->func_to_io;
  #line 904 
  struct hinic_qp *qp = func_to_io->qps + (unsigned long)i;
  #line 906 
  ;
  #line 906 
  if (hinic_hwdev_num_qps(hwdev) <= i) 
                                       #line 907 
                                       return (struct hinic_sq *)0;
  #line 909 
  return & qp->sq;
}

#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
struct hinic_rq *hinic_hwdev_get_rq(struct hinic_hwdev *hwdev, int i)
{
  #line 921 
  struct hinic_func_to_io *func_to_io = & hwdev->func_to_io;
  #line 922 
  struct hinic_qp *qp = func_to_io->qps + (unsigned long)i;
  #line 924 
  ;
  #line 924 
  if (hinic_hwdev_num_qps(hwdev) <= i) 
                                       #line 925 
                                       return (struct hinic_rq *)0;
  #line 927 
  return & qp->rq;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_msix_cnt_set(struct hinic_hwdev *hwdev, u16 msix_index)
{
  #line 939 
  return hinic_msix_attr_cnt_clear(hwdev->hwif,
                                (unsigned short)((int)msix_index));
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_msix_set(struct hinic_hwdev *hwdev, u16 msix_index, u8 pending_limit, u8 coalesc_timer, u8 lli_timer_cfg, u8 lli_credit_limit, u8 resend_timer)
{
  #line 959 
  return hinic_msix_attr_set(hwdev->hwif,(unsigned short)((int)msix_index),
                          (unsigned char)((int)pending_limit),
                          (unsigned char)((int)coalesc_timer),
                          (unsigned char)((int)lli_timer_cfg),
                          (unsigned char)((int)lli_credit_limit),
                          (unsigned char)((int)resend_timer));
}

#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
int hinic_hwdev_hw_ci_addr_set(struct hinic_hwdev *hwdev, struct hinic_sq *sq, u8 pending_limit, u8 coalesc_timer)
{
  #line 977 
  void *__mptr;
  #line 1001 
  void *__mptr_0;
  #line 980 
  struct hinic_pfhwdev *pfhwdev;
  #line 981 
  struct hinic_cmd_hw_ci hw_ci;
  #line 977 
  __mptr = (void *)sq;
  #line 977 
  struct hinic_qp *qp = ((struct hinic_qp *)__mptr);
  #line 978 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 979 
  struct pci_dev *pdev = hwif->pdev;
  #line 983 
  if (hwif->attr.func_type != (unsigned int)HINIC_PF && hwif->attr.func_type != (unsigned int)HINIC_PPF) {
    #line 984 
    _dev_err(& pdev->dev,(char *)"Unsupported PCI Function type\n");
    #line 985 
    return -22;
  }
  #line 988 
  hw_ci.dma_attr_off = (unsigned char)0U;
  #line 989 
  hw_ci.pending_limit = pending_limit;
  #line 990 
  hw_ci.coalesc_timer = coalesc_timer;
  #line 992 
  hw_ci.msix_en = (unsigned char)1U;
  #line 993 
  hw_ci.msix_entry_idx = sq->msix_entry;
  #line 995 
  hw_ci.func_idx = hwif->attr.func_idx;
  #line 997 
  hw_ci.sq_id = (unsigned int)qp->q_id;
  #line 999 
  hw_ci.ci_addr = sq->hw_ci_dma_addr >> 2;
  #line 1001 
  __mptr_0 = (void *)hwdev;
  #line 1001 
  pfhwdev = ((struct hinic_pfhwdev *)__mptr_0);
  #line 1002 
  return hinic_msg_to_mgmt(& pfhwdev->pf_to_mgmt,
                          (enum hinic_mod_type)HINIC_MOD_COMM,
                          (unsigned char)20,(void *)(& hw_ci),
                          (unsigned short)32,(void *)0,(u16 *)0U,
                          (enum hinic_mgmt_msg_type)HINIC_MGMT_MSG_SYNC);
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c"
void hinic_hwdev_set_msix_state(struct hinic_hwdev *hwdev, u16 msix_index, enum hinic_msix_state flag)
{
  #line 1019 
  hinic_set_msix_state(hwdev->hwif,(unsigned short)((int)msix_index),flag);
  #line 1020 
  return;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_dev.i.aux"
static void *ERR_PTR_1(long error)
{
  #line 203 
  return ldv_err_ptr(error);
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_dev.i.aux"
static void *cif_devm_kzalloc_4(struct device *dev, size_t size, gfp_t flags)
{
  #line 500 
  return ldv_devm_kzalloc(size,flags);
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_3(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_6211 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_3(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_3(v);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_qp.i.aux"
static bool IS_ERR_2(void *ptr);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_qp.i.aux"
static void *cif_vzalloc_1(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 504  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_qp.i.aux"
static void cif_vfree_1(void *addr);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_qp_prepare_header(struct hinic_qp_ctxt_header *qp_ctxt_hdr, enum hinic_qp_ctxt_type ctxt_type, u16 num_queues, u16 max_queues)
{
  #line 76 
  u16 max_sqs = max_queues;
  #line 77 
  u16 max_rqs = max_queues;
  #line 79 
  qp_ctxt_hdr->num_queues = num_queues;
  #line 80 
  qp_ctxt_hdr->queue_type = (unsigned short)ctxt_type;
  #line 82 
  if (ctxt_type == (unsigned int)HINIC_QP_CTXT_TYPE_SQ) 
                                                        #line 83 
                                                        qp_ctxt_hdr->addr_offset = (unsigned int)(((int)max_rqs + (int)max_sqs) * 240); else 
                                                                    #line 85 
                                                                    qp_ctxt_hdr->addr_offset = (unsigned int)(((int)max_rqs + (int)max_sqs) * 240 + (int)max_sqs * 48);
  #line 87 
  qp_ctxt_hdr->addr_offset = (qp_ctxt_hdr->addr_offset + 15U) >> 4;
  #line 89 
  hinic_cpu_to_be32((void *)qp_ctxt_hdr,8);
  #line 90 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_sq_prepare_ctxt(struct hinic_sq_ctxt *sq_ctxt, struct hinic_sq *sq, u16 global_qid)
{
  #line 95 
  u32 wq_page_pfn_hi;
  #line 95 
  u32 wq_page_pfn_lo;
  #line 95 
  u32 wq_block_pfn_hi;
  #line 95 
  u32 wq_block_pfn_lo;
  #line 96 
  u64 wq_page_addr;
  #line 96 
  u64 wq_page_pfn;
  #line 96 
  u64 wq_block_pfn;
  #line 97 
  u16 pi_start;
  #line 97 
  u16 ci_start;
  #line 98 
  struct hinic_wq *wq;
  #line 100 
  wq = sq->wq;
  #line 101 
  ci_start = (unsigned short)atomic_read_3(& wq->cons_idx);
  #line 102 
  pi_start = (unsigned short)atomic_read_3(& wq->prod_idx);
  #line 105 
  wq_page_addr = (u64)__builtin_bswap64((unsigned long)*(wq->block_vaddr));
  #line 107 
  wq_page_pfn = wq_page_addr >> 12;
  #line 108 
  wq_page_pfn_hi = (unsigned int)(wq_page_pfn >> 32);
  #line 109 
  wq_page_pfn_lo = (unsigned int)wq_page_pfn;
  #line 111 
  wq_block_pfn = wq->block_paddr >> 9;
  #line 112 
  wq_block_pfn_hi = (unsigned int)(wq_block_pfn >> 32);
  #line 113 
  wq_block_pfn_lo = (unsigned int)wq_block_pfn;
  #line 115 
  sq_ctxt->ceq_attr = ((unsigned int)global_qid << 13) & 8380416U;
  #line 119 
  sq_ctxt->ci_wrapped = (((unsigned int)ci_start << 11) & 8386560U) | 8388608U;
  #line 122 
  sq_ctxt->wq_hi_pfn_pi = (wq_page_pfn_hi & 1048575U) | ((unsigned int)pi_start << 20);
  #line 126 
  sq_ctxt->wq_lo_pfn = wq_page_pfn_lo;
  #line 128 
  sq_ctxt->pref_cache = 33587456U;
  #line 133 
  sq_ctxt->pref_wrapped = 1U;
  #line 135 
  sq_ctxt->pref_wq_hi_pfn_ci = ((unsigned int)ci_start << 20) | (wq_page_pfn_hi & 1048575U);
  #line 139 
  sq_ctxt->pref_wq_lo_pfn = wq_page_pfn_lo;
  #line 141 
  sq_ctxt->wq_block_hi_pfn = wq_block_pfn_hi & 8388607U;
  #line 144 
  sq_ctxt->wq_block_lo_pfn = wq_block_pfn_lo;
  #line 146 
  hinic_cpu_to_be32((void *)sq_ctxt,48);
  #line 147 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_rq_prepare_ctxt(struct hinic_rq_ctxt *rq_ctxt, struct hinic_rq *rq, u16 global_qid)
{
  #line 152 
  u32 wq_page_pfn_hi;
  #line 152 
  u32 wq_page_pfn_lo;
  #line 152 
  u32 wq_block_pfn_hi;
  #line 152 
  u32 wq_block_pfn_lo;
  #line 153 
  u64 wq_page_addr;
  #line 153 
  u64 wq_page_pfn;
  #line 153 
  u64 wq_block_pfn;
  #line 154 
  u16 pi_start;
  #line 154 
  u16 ci_start;
  #line 155 
  struct hinic_wq *wq;
  #line 157 
  wq = rq->wq;
  #line 158 
  ci_start = (unsigned short)atomic_read_3(& wq->cons_idx);
  #line 159 
  pi_start = (unsigned short)atomic_read_3(& wq->prod_idx);
  #line 162 
  wq_page_addr = (u64)__builtin_bswap64((unsigned long)*(wq->block_vaddr));
  #line 164 
  wq_page_pfn = wq_page_addr >> 12;
  #line 165 
  wq_page_pfn_hi = (unsigned int)(wq_page_pfn >> 32);
  #line 166 
  wq_page_pfn_lo = (unsigned int)wq_page_pfn;
  #line 168 
  wq_block_pfn = wq->block_paddr >> 9;
  #line 169 
  wq_block_pfn_hi = (unsigned int)(wq_block_pfn >> 32);
  #line 170 
  wq_block_pfn_lo = (unsigned int)wq_block_pfn;
  #line 172 
  rq_ctxt->ceq_attr = 2U;
  #line 175 
  rq_ctxt->pi_intr_attr = ((unsigned int)pi_start & 4095U) | ((unsigned int)rq->msix_entry << 22);
  #line 178 
  rq_ctxt->wq_hi_pfn_ci = (wq_page_pfn_hi & 1048575U) | ((unsigned int)ci_start << 20);
  #line 182 
  rq_ctxt->wq_lo_pfn = wq_page_pfn_lo;
  #line 184 
  rq_ctxt->pref_cache = 33587456U;
  #line 189 
  rq_ctxt->pref_wrapped = 1U;
  #line 191 
  rq_ctxt->pref_wq_hi_pfn_ci = (wq_page_pfn_hi & 1048575U) | ((unsigned int)ci_start << 20);
  #line 195 
  rq_ctxt->pref_wq_lo_pfn = wq_page_pfn_lo;
  #line 197 
  rq_ctxt->pi_paddr_hi = (unsigned int)(rq->pi_dma_addr >> 32);
  #line 198 
  rq_ctxt->pi_paddr_lo = (unsigned int)rq->pi_dma_addr;
  #line 200 
  rq_ctxt->wq_block_hi_pfn = wq_block_pfn_hi & 8388607U;
  #line 203 
  rq_ctxt->wq_block_lo_pfn = wq_block_pfn_lo;
  #line 205 
  hinic_cpu_to_be32((void *)rq_ctxt,48);
  #line 206 
  return;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static int alloc_sq_skb_arr(struct hinic_sq *sq)
{
  #line 217 
  size_t skb_arr_size;
  #line 216 
  struct hinic_wq *wq = sq->wq;
  #line 219 
  skb_arr_size = (unsigned long)wq->q_depth * 8UL;
  #line 220 
  sq->saved_skb = (struct sk_buff **)cif_vzalloc_1(skb_arr_size);
  #line 221 
  if (sq->saved_skb == (struct sk_buff **)0) 
                                             #line 222 
                                             return -12;
  #line 224 
  return 0;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static void free_sq_skb_arr(struct hinic_sq *sq)
{
  #line 233 
  cif_vfree_1((void *)sq->saved_skb);
  #line 234 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static int alloc_rq_skb_arr(struct hinic_rq *rq)
{
  #line 245 
  size_t skb_arr_size;
  #line 244 
  struct hinic_wq *wq = rq->wq;
  #line 247 
  skb_arr_size = (unsigned long)wq->q_depth * 8UL;
  #line 248 
  rq->saved_skb = (struct sk_buff **)cif_vzalloc_1(skb_arr_size);
  #line 249 
  if (rq->saved_skb == (struct sk_buff **)0) 
                                             #line 250 
                                             return -12;
  #line 252 
  return 0;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static void free_rq_skb_arr(struct hinic_rq *rq)
{
  #line 261 
  cif_vfree_1((void *)rq->saved_skb);
  #line 262 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
int hinic_init_sq(struct hinic_sq *sq, struct hinic_hwif *hwif, struct hinic_wq *wq, struct msix_entry *entry, void *ci_addr, dma_addr_t ci_dma_addr, void *db_base)
{
  #line 281 
  sq->hwif = hwif;
  #line 283 
  sq->wq = wq;
  #line 285 
  sq->irq = entry->vector;
  #line 286 
  sq->msix_entry = entry->entry;
  #line 288 
  sq->hw_ci_addr = ci_addr;
  #line 289 
  sq->hw_ci_dma_addr = ci_dma_addr;
  #line 291 
  sq->db_base = db_base + 2048U;
  #line 293 
  return alloc_sq_skb_arr(sq);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_clean_sq(struct hinic_sq *sq)
{
  #line 302 
  free_sq_skb_arr(sq);
  #line 303 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static int alloc_rq_cqe(struct hinic_rq *rq)
{
  #line 315 
  size_t cqe_dma_size;
  #line 315 
  size_t cqe_size;
  #line 317 
  int j;
  #line 317 
  int i;
  #line 313 
  struct hinic_hwif *hwif = rq->hwif;
  #line 314 
  struct pci_dev *pdev = hwif->pdev;
  #line 316 
  struct hinic_wq *wq = rq->wq;
  #line 319 
  cqe_size = (unsigned long)wq->q_depth * 8UL;
  #line 320 
  rq->cqe = (struct hinic_rq_cqe **)cif_vzalloc_1(cqe_size);
  #line 321 
  if (rq->cqe == (struct hinic_rq_cqe **)0) 
                                            #line 322 
                                            return -12;
  #line 324 
  cqe_dma_size = (unsigned long)wq->q_depth * 8UL;
  #line 325 
  rq->cqe_dma = (dma_addr_t *)cif_vzalloc_1(cqe_dma_size);
  #line 326 
  if (rq->cqe_dma == (dma_addr_t *)0ULL) 
                                         #line 327 
                                         goto err_cqe_dma_arr_alloc;
  #line 329 
  i = 0;
  #line 329 
  while ((int)wq->q_depth > i) {
    #line 330 
    *(rq->cqe + (unsigned long)i) = (struct hinic_rq_cqe *)dma_alloc_coherent(& pdev->dev,32UL,rq->cqe_dma + (unsigned long)i,3264U);
    #line 333 
    if (*(rq->cqe + (unsigned long)i) == (struct hinic_rq_cqe *)0) 
                                                                   #line 334 
                                                                   goto err_cqe_alloc;
    #line 329 
    i ++;
  }
  #line 337 
  return 0;
  #line 339 
  err_cqe_alloc: 
                 #line 339 
  ;
  #line 340 
  j = 0;
  #line 340 
  while (j < i) {
    #line 341 
    dma_free_coherent(& pdev->dev,32UL,(void *)*(rq->cqe + (unsigned long)j),*(rq->cqe_dma + (unsigned long)j));
    #line 340 
    j ++;
  }
  #line 344 
  cif_vfree_1((void *)rq->cqe_dma);
  #line 346 
  err_cqe_dma_arr_alloc: 
                         #line 346 
  ;
  #line 347 
  cif_vfree_1((void *)rq->cqe);
  #line 348 
  return -12;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static void free_rq_cqe(struct hinic_rq *rq)
{
  #line 360 
  int i;
  #line 357 
  struct hinic_hwif *hwif = rq->hwif;
  #line 358 
  struct pci_dev *pdev = hwif->pdev;
  #line 359 
  struct hinic_wq *wq = rq->wq;
  #line 362 
  i = 0;
  #line 362 
  while ((int)wq->q_depth > i) {
    #line 363 
    dma_free_coherent(& pdev->dev,32UL,(void *)*(rq->cqe + (unsigned long)i),*(rq->cqe_dma + (unsigned long)i));
    #line 362 
    i ++;
  }
  #line 366 
  cif_vfree_1((void *)rq->cqe_dma);
  #line 367 
  cif_vfree_1((void *)rq->cqe);
  #line 368 
  return;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
int hinic_init_rq(struct hinic_rq *rq, struct hinic_hwif *hwif, struct hinic_wq *wq, struct msix_entry *entry)
{
  #line 383 
  size_t pi_size;
  #line 384 
  int err;
  #line 382 
  struct pci_dev *pdev = hwif->pdev;
  #line 386 
  rq->hwif = hwif;
  #line 388 
  rq->wq = wq;
  #line 390 
  rq->irq = entry->vector;
  #line 391 
  rq->msix_entry = entry->entry;
  #line 393 
  rq->buf_sz = 2048UL;
  #line 395 
  err = alloc_rq_skb_arr(rq);
  #line 396 
  if (err != 0) {
    #line 397 
    _dev_err(& pdev->dev,(char *)"Failed to allocate rq priv data\n");
    #line 398 
    return err;
  }
  #line 401 
  err = alloc_rq_cqe(rq);
  #line 402 
  if (err != 0) {
    #line 403 
    _dev_err(& pdev->dev,(char *)"Failed to allocate rq cqe\n");
    #line 404 
    goto err_alloc_rq_cqe;
  }
  #line 408 
  pi_size = 4UL;
  #line 409 
  rq->pi_virt_addr = (u16 *)dma_alloc_coherent(& pdev->dev,pi_size,& rq->pi_dma_addr,3264U);
  #line 411 
  if (rq->pi_virt_addr == (u16 *)0U) {
    #line 412 
    _dev_err(& pdev->dev,(char *)"Failed to allocate PI address\n");
    #line 413 
    err = -12;
    #line 414 
    goto err_pi_virt;
  }
  #line 417 
  return 0;
  #line 419 
  err_pi_virt: 
               #line 419 
  ;
  #line 420 
  free_rq_cqe(rq);
  #line 422 
  err_alloc_rq_cqe: 
                    #line 422 
  ;
  #line 423 
  free_rq_skb_arr(rq);
  #line 424 
  return err;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_clean_rq(struct hinic_rq *rq)
{
  #line 435 
  size_t pi_size;
  #line 433 
  struct hinic_hwif *hwif = rq->hwif;
  #line 434 
  struct pci_dev *pdev = hwif->pdev;
  #line 437 
  pi_size = 4UL;
  #line 438 
  dma_free_coherent(& pdev->dev,pi_size,(void *)rq->pi_virt_addr,rq->pi_dma_addr);
  #line 441 
  free_rq_cqe(rq);
  #line 442 
  free_rq_skb_arr(rq);
  #line 443 
  return;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
int hinic_get_sq_free_wqebbs(struct hinic_sq *sq)
{
  #line 453 
  struct hinic_wq *wq = sq->wq;
  #line 455 
  return atomic_read_3(& wq->delta) + -1;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
int hinic_get_rq_free_wqebbs(struct hinic_rq *rq)
{
  #line 466 
  struct hinic_wq *wq = rq->wq;
  #line 468 
  return atomic_read_3(& wq->delta) + -1;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static void sq_prepare_ctrl(struct hinic_sq_ctrl *ctrl, u16 prod_idx, int nr_descs)
{
  #line 474 
  u32 ctrl_size;
  #line 474 
  u32 task_size;
  #line 474 
  u32 bufdesc_size;
  #line 476 
  ctrl_size = 1U;
  #line 477 
  task_size = 3U;
  #line 478 
  bufdesc_size = (unsigned int)((unsigned long)nr_descs) * 16U;
  #line 479 
  bufdesc_size = (bufdesc_size + 7U) >> 3;
  #line 481 
  ctrl->ctrl_info = ((bufdesc_size & 255U) | ((task_size << 16) & 2031616U)) | ((ctrl_size << 29) & 1610612736U);
  #line 486 
  ctrl->queue_info = 398458880U;
  #line 487 
  return;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static void sq_prepare_task(struct hinic_sq_task *task)
{
  #line 493 
  task->pkt_info0 = 0U;
  #line 494 
  task->pkt_info1 = 0U;
  #line 495 
  task->pkt_info2 = 0U;
  #line 497 
  task->ufo_v6_identify = 0U;
  #line 499 
  task->pkt_info4 = 0U;
  #line 501 
  task->zero_pad = 0U;
  #line 502 
  return;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_task_set_l2hdr(struct hinic_sq_task *task, u32 len)
{
  #line 506 
  task->pkt_info0 |= len & 255U;
  #line 507 
  return;
}

#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_task_set_outter_l3(struct hinic_sq_task *task, enum hinic_l3_offload_type l3_type, u32 network_len)
{
  #line 513 
  task->pkt_info2 |= (((unsigned int)l3_type << 24) & 50331648U) | ((network_len << 8) & 65535U);
  #line 515 
  return;
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_task_set_inner_l3(struct hinic_sq_task *task, enum hinic_l3_offload_type l3_type, u32 network_len)
{
  #line 521 
  task->pkt_info0 |= ((unsigned int)l3_type << 10) & 3072U;
  #line 522 
  task->pkt_info1 |= network_len << 24;
  #line 523 
  return;
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_task_set_tunnel_l4(struct hinic_sq_task *task, enum hinic_l4_tunnel_type l4_type, u32 tunnel_len)
{
  #line 529 
  task->pkt_info2 |= (((unsigned int)l4_type << 16) & 458752U) | (tunnel_len & 255U);
  #line 531 
  return;
}

#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_set_cs_inner_l4(struct hinic_sq_task *task, u32 *queue_info, enum hinic_l4_offload_type l4_offload, u32 l4_len, u32 offset)
{
  #line 537 
  u32 tcp_udp_cs = 0U;
  #line 537 
  u32 sctp = 0U;
  #line 538 
  u32 mss = 15872U;
  #line 540 
  if (l4_offload == (unsigned int)TCP_OFFLOAD_ENABLE || l4_offload == (unsigned int)UDP_OFFLOAD_ENABLE) 
    #line 542 
    tcp_udp_cs = 1U;
  else 
    #line 543 
    if (l4_offload == (unsigned int)SCTP_OFFLOAD_ENABLE) 
                                                         #line 544 
                                                         sctp = 1U;
  #line 546 
  task->pkt_info0 |= ((unsigned int)l4_offload << 8) & 768U;
  #line 547 
  task->pkt_info1 |= (l4_len << 16) & 16711680U;
  #line 549 
  *queue_info |= (((offset << 2) & 1020U) | ((tcp_udp_cs << 12) & 4096U)) | ((sctp << 27) & 134217728U);
  #line 553 
  *queue_info &= 4160757759U;
  #line 554 
  *queue_info |= (mss << 13) & 134209536U;
  #line 555 
  return;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_set_tso_inner_l4(struct hinic_sq_task *task, u32 *queue_info, enum hinic_l4_offload_type l4_offload, u32 l4_len, u32 offset, u32 ip_ident, u32 mss)
{
  #line 576 
  unsigned int tmp;
  #line 561 
  u32 tso = 0U;
  #line 561 
  u32 ufo = 0U;
  #line 563 
  if (l4_offload == (unsigned int)TCP_OFFLOAD_ENABLE) 
                                                      #line 564 
                                                      tso = 1U;
  else 
    #line 565 
    if (l4_offload == (unsigned int)UDP_OFFLOAD_ENABLE) 
                                                        #line 566 
                                                        ufo = 1U;
  #line 568 
  task->ufo_v6_identify = ip_ident;
  #line 570 
  task->pkt_info0 |= ((unsigned int)l4_offload << 8) & 768U;
  #line 571 
  task->pkt_info0 |= ((unsigned int)((tso != 0U || ufo != 0U) != 0) << 15) & 65535U;
  #line 572 
  task->pkt_info1 |= (l4_len << 16) & 16711680U;
  #line 576 
  if (l4_offload != (unsigned int)OFFLOAD_DISABLE) 
                                                   #line 576 
                                                   tmp = 4096U; else 
                                                                  #line 576 
                                                                  tmp = 0U;
  #line 574 
  *queue_info |= ((((offset << 2) & 1020U) | ((tso << 11) & 2048U)) | ((ufo << 10) & 1024U)) | tmp;
  #line 580 
  *queue_info &= 4160757759U;
  #line 581 
  *queue_info |= (mss << 13) & 134209536U;
  #line 582 
  return;
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_sq_prepare_wqe(struct hinic_sq *sq, u16 prod_idx, struct hinic_sq_wqe *sq_wqe, struct hinic_sge *sges, int nr_sges)
{
  #line 596 
  int i;
  #line 598 
  sq_prepare_ctrl(& sq_wqe->ctrl,(unsigned short)((int)prod_idx),nr_sges);
  #line 600 
  sq_prepare_task(& sq_wqe->task);
  #line 602 
  i = 0;
  #line 602 
  while (i < nr_sges) {
    #line 603 
    sq_wqe->buf_descs[i].sge = *(sges + (unsigned long)i);
    #line 602 
    i ++;
  }
  #line 604 
  return;
}

#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
static u32 sq_prepare_db(struct hinic_sq *sq, u16 prod_idx, unsigned int cos)
{
  #line 616 
  void *__mptr;
  #line 616 
  __mptr = (void *)sq;
  #line 616 
  struct hinic_qp *qp = ((struct hinic_qp *)__mptr);
  #line 617 
  u8 hi_prod_idx = (unsigned char)(((int)(sq->wq)->mask & (int)prod_idx) >> 8);
  #line 620 
  return __builtin_bswap32((((unsigned int)hi_prod_idx | ((cos << 24) & 117440512U)) | (
                           ((unsigned int)qp->q_id << 8) & 261888U)) | 142606336U);
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_sq_write_db(struct hinic_sq *sq, u16 prod_idx, unsigned int wqe_size, unsigned int cos)
{
  #line 637 
  struct hinic_wq *wq = sq->wq;
  #line 640 
  prod_idx = (unsigned short)((int)((unsigned short)(((((unsigned int)wq->wqebb_size + wqe_size) + 4294967295U) & - ((unsigned int)wq->wqebb_size)) / (unsigned int)wq->wqebb_size)) + (int)prod_idx);
  #line 641 
  ldv_inline_asm();
  #line 644 
  ;
  #line 644 
  writel(sq_prepare_db(sq,(unsigned short)((int)prod_idx),cos),(void *)((u64 *)sq->db_base + ((unsigned long)prod_idx & (unsigned long)255U)));
  #line 645 
  return;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
struct hinic_sq_wqe *hinic_sq_get_wqe(struct hinic_sq *sq, unsigned int wqe_size, u16 *prod_idx)
{
  #line 658 
  struct hinic_hw_wqe *hw_wqe = hinic_get_wqe(sq->wq,wqe_size,prod_idx);
  #line 661 
  if ((int)IS_ERR_2((void *)hw_wqe) != 0) 
                                          #line 662 
                                          return (struct hinic_sq_wqe *)0;
  #line 664 
  return & hw_wqe->__anonCompField_hinic_hw_wqe_71.sq_wqe;
}

#line 672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_sq_return_wqe(struct hinic_sq *sq, unsigned int wqe_size)
{
  #line 674 
  hinic_return_wqe(sq->wq,wqe_size);
  #line 675 
  return;
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_sq_write_wqe(struct hinic_sq *sq, u16 prod_idx, struct hinic_sq_wqe *sq_wqe, struct sk_buff *skb, unsigned int wqe_size)
{
  #line 689 
  struct hinic_hw_wqe *hw_wqe = (struct hinic_hw_wqe *)sq_wqe;
  #line 691 
  *(sq->saved_skb + (unsigned long)prod_idx) = skb;
  #line 694 
  hinic_cpu_to_be32((void *)sq_wqe,(int)wqe_size);
  #line 696 
  hinic_write_wqe(sq->wq,hw_wqe,wqe_size);
  #line 697 
  return;
}

#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
struct hinic_sq_wqe *hinic_sq_read_wqebb(struct hinic_sq *sq, struct sk_buff **skb, unsigned int *wqe_size, u16 *cons_idx)
{
  #line 713 
  struct hinic_hw_wqe *hw_wqe;
  #line 714 
  struct hinic_sq_wqe *sq_wqe;
  #line 715 
  struct hinic_sq_ctrl *ctrl;
  #line 716 
  unsigned int buf_sect_len;
  #line 717 
  u32 ctrl_info;
  #line 720 
  hw_wqe = hinic_read_wqe(sq->wq,8U,cons_idx);
  #line 721 
  if ((int)IS_ERR_2((void *)hw_wqe) != 0) 
                                          #line 722 
                                          return (struct hinic_sq_wqe *)0;
  #line 724 
  *skb = *(sq->saved_skb + (unsigned long)*cons_idx);
  #line 726 
  sq_wqe = & hw_wqe->__anonCompField_hinic_hw_wqe_71.sq_wqe;
  #line 727 
  ctrl = & sq_wqe->ctrl;
  #line 728 
  ctrl_info = __builtin_bswap32(ctrl->ctrl_info);
  #line 729 
  buf_sect_len = ctrl_info & 255U;
  #line 731 
  *wqe_size = 32U;
  #line 732 
  *wqe_size += buf_sect_len << 3;
  #line 733 
  *wqe_size = ((*wqe_size + (unsigned int)(sq->wq)->wqebb_size) + 4294967295U) & - ((unsigned int)(sq->wq)->wqebb_size);
  #line 735 
  return & hw_wqe->__anonCompField_hinic_hw_wqe_71.sq_wqe;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
struct hinic_sq_wqe *hinic_sq_read_wqe(struct hinic_sq *sq, struct sk_buff **skb, unsigned int wqe_size, u16 *cons_idx)
{
  #line 751 
  struct hinic_hw_wqe *hw_wqe;
  #line 753 
  hw_wqe = hinic_read_wqe(sq->wq,wqe_size,cons_idx);
  #line 754 
  *skb = *(sq->saved_skb + (unsigned long)*cons_idx);
  #line 756 
  return & hw_wqe->__anonCompField_hinic_hw_wqe_71.sq_wqe;
}

#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_sq_put_wqe(struct hinic_sq *sq, unsigned int wqe_size)
{
  #line 766 
  hinic_put_wqe(sq->wq,wqe_size);
  #line 767 
  return;
}

#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_sq_get_sges(struct hinic_sq_wqe *sq_wqe, struct hinic_sge *sges, int nr_sges)
{
  #line 778 
  int i;
  #line 780 
  i = 0;
  #line 780 
  while (i < nr_sges && i <= 16) {
    #line 781 
    *(sges + (unsigned long)i) = sq_wqe->buf_descs[i].sge;
    #line 782 
    hinic_be32_to_cpu((void *)(sges + (unsigned long)i),12);
    #line 780 
    i ++;
  }
  #line 784 
  return;
}

#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
struct hinic_rq_wqe *hinic_rq_get_wqe(struct hinic_rq *rq, unsigned int wqe_size, u16 *prod_idx)
{
  #line 797 
  struct hinic_hw_wqe *hw_wqe = hinic_get_wqe(rq->wq,wqe_size,prod_idx);
  #line 800 
  if ((int)IS_ERR_2((void *)hw_wqe) != 0) 
                                          #line 801 
                                          return (struct hinic_rq_wqe *)0;
  #line 803 
  return & hw_wqe->__anonCompField_hinic_hw_wqe_71.rq_wqe;
}

#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_rq_write_wqe(struct hinic_rq *rq, u16 prod_idx, struct hinic_rq_wqe *rq_wqe, struct sk_buff *skb)
{
  #line 816 
  struct hinic_hw_wqe *hw_wqe = (struct hinic_hw_wqe *)rq_wqe;
  #line 818 
  *(rq->saved_skb + (unsigned long)prod_idx) = skb;
  #line 821 
  hinic_cpu_to_be32((void *)rq_wqe,32);
  #line 823 
  hinic_write_wqe(rq->wq,hw_wqe,32U);
  #line 824 
  return;
}

#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
struct hinic_rq_wqe *hinic_rq_read_wqe(struct hinic_rq *rq, unsigned int wqe_size, struct sk_buff **skb, u16 *cons_idx)
{
  #line 839 
  struct hinic_hw_wqe *hw_wqe;
  #line 840 
  struct hinic_rq_cqe *cqe;
  #line 841 
  int rx_done;
  #line 842 
  u32 status;
  #line 844 
  hw_wqe = hinic_read_wqe(rq->wq,wqe_size,cons_idx);
  #line 845 
  if ((int)IS_ERR_2((void *)hw_wqe) != 0) 
                                          #line 846 
                                          return (struct hinic_rq_wqe *)0;
  #line 848 
  cqe = *(rq->cqe + (unsigned long)*cons_idx);
  #line 850 
  status = __builtin_bswap32(cqe->status);
  #line 852 
  rx_done = (int)(status >> 31);
  #line 853 
  if (rx_done == 0) 
                    #line 854 
                    return (struct hinic_rq_wqe *)0;
  #line 856 
  *skb = *(rq->saved_skb + (unsigned long)*cons_idx);
  #line 858 
  return & hw_wqe->__anonCompField_hinic_hw_wqe_71.rq_wqe;
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
struct hinic_rq_wqe *hinic_rq_read_next_wqe(struct hinic_rq *rq, unsigned int wqe_size, struct sk_buff **skb, u16 *cons_idx)
{
  #line 876 
  struct hinic_hw_wqe *hw_wqe;
  #line 877 
  unsigned int num_wqebbs;
  #line 875 
  struct hinic_wq *wq = rq->wq;
  #line 879 
  wqe_size = (((unsigned int)wq->wqebb_size + wqe_size) + 4294967295U) & - ((unsigned int)wq->wqebb_size);
  #line 880 
  num_wqebbs = wqe_size / (unsigned int)wq->wqebb_size;
  #line 882 
  *cons_idx = (unsigned short)(((int)*cons_idx + (int)((unsigned short)num_wqebbs)) & (int)(rq->wq)->mask);
  #line 884 
  *skb = *(rq->saved_skb + (unsigned long)*cons_idx);
  #line 886 
  hw_wqe = hinic_read_wqe_direct(wq,(unsigned short)((int)*cons_idx));
  #line 888 
  return & hw_wqe->__anonCompField_hinic_hw_wqe_71.rq_wqe;
}

#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_rq_put_wqe(struct hinic_rq *rq, u16 cons_idx, unsigned int wqe_size)
{
  #line 900 
  struct hinic_rq_cqe *cqe = *(rq->cqe + (unsigned long)cons_idx);
  #line 901 
  u32 status = __builtin_bswap32(cqe->status);
  #line 903 
  status &= 2147483647U;
  #line 906 
  cqe->status = __builtin_bswap32(status);
  #line 907 
  ldv_inline_asm();
  #line 910 
  hinic_put_wqe(rq->wq,wqe_size);
  #line 911 
  return;
}

#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_rq_get_sge(struct hinic_rq *rq, struct hinic_rq_wqe *rq_wqe, u16 cons_idx, struct hinic_sge *sge)
{
  #line 923 
  struct hinic_rq_cqe *cqe = *(rq->cqe + (unsigned long)cons_idx);
  #line 924 
  u32 len = __builtin_bswap32(cqe->len);
  #line 926 
  sge->hi_addr = __builtin_bswap32(rq_wqe->buf_desc.hi_addr);
  #line 927 
  sge->lo_addr = __builtin_bswap32(rq_wqe->buf_desc.lo_addr);
  #line 928 
  sge->len = len >> 16;
  #line 929 
  return;
}

#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_rq_prepare_wqe(struct hinic_rq *rq, u16 prod_idx, struct hinic_rq_wqe *rq_wqe, struct hinic_sge *sge)
{
  #line 941 
  struct hinic_rq_cqe_sect *cqe_sect = & rq_wqe->cqe_sect;
  #line 942 
  struct hinic_rq_bufdesc *buf_desc = & rq_wqe->buf_desc;
  #line 943 
  struct hinic_rq_cqe *cqe = *(rq->cqe + (unsigned long)prod_idx);
  #line 944 
  struct hinic_rq_ctrl *ctrl = & rq_wqe->ctrl;
  #line 945 
  dma_addr_t cqe_dma = *(rq->cqe_dma + (unsigned long)prod_idx);
  #line 947 
  ctrl->ctrl_info = 805339137U;
  #line 955 
  hinic_set_sge(& cqe_sect->sge,cqe_dma,32);
  #line 957 
  buf_desc->hi_addr = sge->hi_addr;
  #line 958 
  buf_desc->lo_addr = sge->lo_addr;
  #line 959 
  return;
}

#line 966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_qp.c"
void hinic_rq_update(struct hinic_rq *rq, u16 prod_idx)
{
  #line 968 
  *(rq->pi_virt_addr) = __builtin_bswap16((unsigned short)((int)((unsigned short)(((unsigned int)prod_idx + 1U) & (unsigned int)(rq->wq)->mask))));
  #line 969 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_qp.i.aux"
static bool IS_ERR_2(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_qp.i.aux"
static void *cif_vzalloc_1(unsigned long size)
{
  #line 500 
  return ldv_vzalloc(size);
}

#line 504  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_qp.i.aux"
static void cif_vfree_1(void *addr)
{
  #line 507 
  ldv_vfree(addr);
  #line 508 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 898  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits);
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 905  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_bitmap_clear(unsigned long *map, unsigned int start, unsigned int nbits);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_4(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_6739 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_4(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_4(v);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus_0(void)
{
  #line 112 
  return (unsigned int)atomic_read_4(& __num_online_cpus);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static long PTR_ERR_0(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static bool IS_ERR_3(void *ptr);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_0(spinlock_t *lock);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 24 
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25 
#line 25 
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
#line 48 
int __cpu_to_node(int);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void *cif_devm_kzalloc_5(struct device *dev, size_t size, gfp_t flags);
#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 549  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 944  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 952  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 2679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 928  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_1(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock_0(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue_0(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_0(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue_0(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock_0(txq,cpu);
      #line 4081 
      netif_tx_stop_queue_0(txq);
      #line 4082 
      __netif_tx_unlock_0(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 936  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 912  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static unsigned int tx_weight = 64U;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static unsigned int rx_weight = 64U;
#line 68 
#line 552 
static int change_mac_addr(struct net_device *netdev, u8 *addr);
#line 70 
#line 904 
static int set_features(struct hinic_dev *nic_dev, netdev_features_t pre_features, netdev_features_t features, bool force_change);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void update_rx_stats(struct hinic_dev *nic_dev, struct hinic_rxq *rxq)
{
  #line 77 
  struct hinic_rxq_stats rx_stats;
  #line 76 
  struct hinic_rxq_stats *nic_rx_stats = & nic_dev->rx_stats;
  #line 79 
  u64_stats_init(& rx_stats.syncp);
  #line 81 
  hinic_rxq_get_stats(rxq,& rx_stats);
  #line 83 
  u64_stats_init(& nic_rx_stats->syncp);
  #line 84 
  nic_rx_stats->bytes += rx_stats.bytes;
  #line 85 
  nic_rx_stats->pkts += rx_stats.pkts;
  #line 86 
  nic_rx_stats->errors += rx_stats.errors;
  #line 87 
  nic_rx_stats->csum_errors += rx_stats.csum_errors;
  #line 88 
  nic_rx_stats->other_errors += rx_stats.other_errors;
  #line 89 
  u64_stats_init(& nic_rx_stats->syncp);
  #line 91 
  hinic_rxq_clean_stats(rxq);
  #line 92 
  return;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void update_tx_stats(struct hinic_dev *nic_dev, struct hinic_txq *txq)
{
  #line 97 
  struct hinic_txq_stats tx_stats;
  #line 96 
  struct hinic_txq_stats *nic_tx_stats = & nic_dev->tx_stats;
  #line 99 
  u64_stats_init(& tx_stats.syncp);
  #line 101 
  hinic_txq_get_stats(txq,& tx_stats);
  #line 103 
  u64_stats_init(& nic_tx_stats->syncp);
  #line 104 
  nic_tx_stats->bytes += tx_stats.bytes;
  #line 105 
  nic_tx_stats->pkts += tx_stats.pkts;
  #line 106 
  nic_tx_stats->tx_busy += tx_stats.tx_busy;
  #line 107 
  nic_tx_stats->tx_wake += tx_stats.tx_wake;
  #line 108 
  nic_tx_stats->tx_dropped += tx_stats.tx_dropped;
  #line 109 
  nic_tx_stats->big_frags_pkts += tx_stats.big_frags_pkts;
  #line 110 
  u64_stats_init(& nic_tx_stats->syncp);
  #line 112 
  hinic_txq_clean_stats(txq);
  #line 113 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void update_nic_stats(struct hinic_dev *nic_dev)
{
  #line 117 
  int i;
  #line 117 
  int num_qps = hinic_hwdev_num_qps(nic_dev->hwdev);
  #line 119 
  i = 0;
  #line 119 
  while (i < num_qps) {
    #line 120 
    update_rx_stats(nic_dev,nic_dev->rxqs + (unsigned long)i);
    #line 119 
    i ++;
  }
  #line 122 
  i = 0;
  #line 122 
  while (i < num_qps) {
    #line 123 
    update_tx_stats(nic_dev,nic_dev->txqs + (unsigned long)i);
    #line 122 
    i ++;
  }
  #line 124 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int create_txqs(struct hinic_dev *nic_dev)
{
  #line 134 
  int err;
  #line 134 
  int i;
  #line 134 
  int j;
  #line 136 
  size_t txq_size;
  #line 134 
  int num_txqs = hinic_hwdev_num_qps(nic_dev->hwdev);
  #line 135 
  struct net_device *netdev = nic_dev->netdev;
  #line 138 
  if (nic_dev->txqs != (struct hinic_txq *)0) 
                                              #line 139 
                                              return -22;
  #line 141 
  txq_size = (unsigned long)num_txqs * 488UL;
  #line 142 
  nic_dev->txqs = (struct hinic_txq *)cif_devm_kzalloc_5(& netdev->dev,txq_size,3264U);
  #line 143 
  if (nic_dev->txqs == (struct hinic_txq *)0) 
                                              #line 144 
                                              return -12;
  #line 146 
  i = 0;
  #line 146 
  while (i < num_txqs) {
    {
      #line 147 
      struct hinic_sq *sq = hinic_hwdev_get_sq(nic_dev->hwdev,i);
      #line 149 
      err = hinic_init_txq(nic_dev->txqs + (unsigned long)i,sq,netdev);
      #line 150 
      if (err != 0) {
        #line 151 
        if ((nic_dev->msg_enable & 1U) != 0U) 
                                              #line 151 
                                              netdev_err(netdev,(char *)"Failed to init Txq\n");
        #line 153 
        goto err_init_txq;
      }
    }
    #line 146 
    i ++;
  }
  #line 157 
  return 0;
  #line 159 
  err_init_txq: 
                #line 159 
  ;
  #line 160 
  j = 0;
  #line 160 
  while (j < i) {
    #line 161 
    hinic_clean_txq(nic_dev->txqs + (unsigned long)j);
    #line 160 
    j ++;
  }
  #line 163 
  devm_kfree(& netdev->dev,(void *)nic_dev->txqs);
  #line 164 
  return err;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void free_txqs(struct hinic_dev *nic_dev)
{
  #line 173 
  int i;
  #line 173 
  int num_txqs = hinic_hwdev_num_qps(nic_dev->hwdev);
  #line 174 
  struct net_device *netdev = nic_dev->netdev;
  #line 176 
  if (nic_dev->txqs == (struct hinic_txq *)0) 
                                              #line 177 
                                              return;
  #line 179 
  i = 0;
  #line 179 
  while (i < num_txqs) {
    #line 180 
    hinic_clean_txq(nic_dev->txqs + (unsigned long)i);
    #line 179 
    i ++;
  }
  #line 182 
  devm_kfree(& netdev->dev,(void *)nic_dev->txqs);
  #line 183 
  nic_dev->txqs = (struct hinic_txq *)0;
  #line 184 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int create_rxqs(struct hinic_dev *nic_dev)
{
  #line 194 
  int err;
  #line 194 
  int i;
  #line 194 
  int j;
  #line 196 
  size_t rxq_size;
  #line 194 
  int num_rxqs = hinic_hwdev_num_qps(nic_dev->hwdev);
  #line 195 
  struct net_device *netdev = nic_dev->netdev;
  #line 198 
  if (nic_dev->rxqs != (struct hinic_rxq *)0) 
                                              #line 199 
                                              return -22;
  #line 201 
  rxq_size = (unsigned long)num_rxqs * 472UL;
  #line 202 
  nic_dev->rxqs = (struct hinic_rxq *)cif_devm_kzalloc_5(& netdev->dev,rxq_size,3264U);
  #line 203 
  if (nic_dev->rxqs == (struct hinic_rxq *)0) 
                                              #line 204 
                                              return -12;
  #line 206 
  i = 0;
  #line 206 
  while (i < num_rxqs) {
    {
      #line 207 
      struct hinic_rq *rq = hinic_hwdev_get_rq(nic_dev->hwdev,i);
      #line 209 
      err = hinic_init_rxq(nic_dev->rxqs + (unsigned long)i,rq,netdev);
      #line 210 
      if (err != 0) {
        #line 211 
        if ((nic_dev->msg_enable & 1U) != 0U) 
                                              #line 211 
                                              netdev_err(netdev,(char *)"Failed to init rxq\n");
        #line 213 
        goto err_init_rxq;
      }
    }
    #line 206 
    i ++;
  }
  #line 217 
  return 0;
  #line 219 
  err_init_rxq: 
                #line 219 
  ;
  #line 220 
  j = 0;
  #line 220 
  while (j < i) {
    #line 221 
    hinic_clean_rxq(nic_dev->rxqs + (unsigned long)j);
    #line 220 
    j ++;
  }
  #line 223 
  devm_kfree(& netdev->dev,(void *)nic_dev->rxqs);
  #line 224 
  return err;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void free_rxqs(struct hinic_dev *nic_dev)
{
  #line 233 
  int i;
  #line 233 
  int num_rxqs = hinic_hwdev_num_qps(nic_dev->hwdev);
  #line 234 
  struct net_device *netdev = nic_dev->netdev;
  #line 236 
  if (nic_dev->rxqs == (struct hinic_rxq *)0) 
                                              #line 237 
                                              return;
  #line 239 
  i = 0;
  #line 239 
  while (i < num_rxqs) {
    #line 240 
    hinic_clean_rxq(nic_dev->rxqs + (unsigned long)i);
    #line 239 
    i ++;
  }
  #line 242 
  devm_kfree(& netdev->dev,(void *)nic_dev->rxqs);
  #line 243 
  nic_dev->rxqs = (struct hinic_rxq *)0;
  #line 244 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_configure_max_qnum(struct hinic_dev *nic_dev)
{
  #line 248 
  int err;
  #line 250 
  err = hinic_set_max_qnum(nic_dev,(unsigned char)((int)((unsigned char)(nic_dev->hwdev)->nic_cap.max_qps)));
  #line 251 
  if (err != 0) 
                #line 252 
                return err;
  #line 254 
  return 0;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_rss_init(struct hinic_dev *nic_dev)
{
  #line 259 
  u8 default_rss_key[40U];
  #line 261 
  u32 *indir_tbl;
  #line 262 
  int err;
  #line 262 
  int i;
  #line 260 
  u8 tmpl_idx = nic_dev->rss_tmpl_idx;
  #line 264 
  indir_tbl = (u32 *)kcalloc(256UL,4UL,3264U);
  #line 265 
  if (indir_tbl == (u32 *)0U) 
                              #line 266 
                              return -12;
  #line 268 
  netdev_rss_key_fill((void *)(& default_rss_key),40UL);
  #line 269 
  i = 0;
  #line 269 
  while (i <= 255) {
    #line 270 
    *(indir_tbl + (unsigned long)i) = ethtool_rxfh_indir_default((unsigned int)i,(unsigned int)nic_dev->num_rss);
    #line 269 
    i ++;
  }
  #line 272 
  err = hinic_rss_set_template_tbl(nic_dev,(unsigned int)tmpl_idx,(u8 *)(& default_rss_key));
  #line 273 
  if (err != 0) 
                #line 274 
                goto out;
  #line 276 
  err = hinic_rss_set_indir_tbl(nic_dev,(unsigned int)tmpl_idx,indir_tbl);
  #line 277 
  if (err != 0) 
                #line 278 
                goto out;
  #line 280 
  err = hinic_set_rss_type(nic_dev,(unsigned int)tmpl_idx,nic_dev->rss_type);
  #line 281 
  if (err != 0) 
                #line 282 
                goto out;
  #line 284 
  err = hinic_rss_set_hash_engine(nic_dev,(unsigned char)((int)tmpl_idx),(unsigned char)((int)nic_dev->rss_hash_engine));
  #line 286 
  if (err != 0) 
                #line 287 
                goto out;
  #line 289 
  err = hinic_rss_cfg(nic_dev,(unsigned char)1,(unsigned char)((int)tmpl_idx));
  #line 290 
  if (err != 0) 
                #line 291 
                goto out;
  #line 293 
  out: 
       #line 293 
  ;
  #line 294 
  kfree((void *)indir_tbl);
  #line 295 
  return err;
}

#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_rss_deinit(struct hinic_dev *nic_dev)
{
  #line 300 
  hinic_rss_cfg(nic_dev,(unsigned char)0,(unsigned char)((int)nic_dev->rss_tmpl_idx));
  #line 301 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_init_rss_parameters(struct hinic_dev *nic_dev)
{
  #line 305 
  nic_dev->rss_hash_engine = (unsigned char)0U;
  #line 306 
  nic_dev->rss_type.tcp_ipv6_ext = (unsigned char)1U;
  #line 307 
  nic_dev->rss_type.ipv6_ext = (unsigned char)1U;
  #line 308 
  nic_dev->rss_type.tcp_ipv6 = (unsigned char)1U;
  #line 309 
  nic_dev->rss_type.ipv6 = (unsigned char)1U;
  #line 310 
  nic_dev->rss_type.tcp_ipv4 = (unsigned char)1U;
  #line 311 
  nic_dev->rss_type.ipv4 = (unsigned char)1U;
  #line 312 
  nic_dev->rss_type.udp_ipv6 = (unsigned char)1U;
  #line 313 
  nic_dev->rss_type.udp_ipv4 = (unsigned char)1U;
  #line 314 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_enable_rss(struct hinic_dev *nic_dev)
{
  #line 359 
  unsigned short __UNIQUE_ID___x545;
  #line 359 
  int tmp_3;
  #line 322 
  int i;
  #line 322 
  int node;
  #line 318 
  struct net_device *netdev = nic_dev->netdev;
  #line 319 
  struct hinic_hwdev *hwdev = nic_dev->hwdev;
  #line 320 
  struct hinic_hwif *hwif = hwdev->hwif;
  #line 321 
  struct pci_dev *pdev = hwif->pdev;
  #line 322 
  int err = 0;
  #line 323 
  u16 num_cpus = (unsigned short)0U;
  #line 325 
  nic_dev->max_qps = (unsigned short)hinic_hwdev_max_num_qps(hwdev);
  #line 326 
  if ((unsigned int)nic_dev->max_qps <= 1U) {
    #line 327 
    nic_dev->flags &= 4294967291U;
    #line 328 
    nic_dev->rss_limit = nic_dev->max_qps;
    #line 329 
    nic_dev->num_qps = nic_dev->max_qps;
    #line 330 
    nic_dev->num_rss = nic_dev->max_qps;
    #line 332 
    return;
  }
  #line 335 
  err = hinic_rss_template_alloc(nic_dev,& nic_dev->rss_tmpl_idx);
  #line 336 
  if (err != 0) {
    #line 337 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 337 
                                          netdev_err(netdev,(char *)"Failed to alloc tmpl_idx for rss, can\'t enable rss for this function\n");
    #line 339 
    nic_dev->flags &= 4294967291U;
    #line 340 
    nic_dev->max_qps = (unsigned short)1U;
    #line 341 
    nic_dev->rss_limit = nic_dev->max_qps;
    #line 342 
    nic_dev->num_qps = nic_dev->max_qps;
    #line 343 
    nic_dev->num_rss = nic_dev->max_qps;
    #line 345 
    return;
  }
  #line 348 
  nic_dev->flags |= 4U;
  #line 350 
  i = 0;
  #line 350 
  while (1) {
    #line 350 
    ;
    #line 350 
    if (! (num_online_cpus_0() > (unsigned int)i)) 
                                                   #line 350 
                                                   break;
    {
      #line 351 
      node = __cpu_to_node(i);
      #line 352 
      ;
      #line 352 
      if (dev_to_node(& pdev->dev) == node) 
                                            #line 353 
                                            num_cpus = (u16)((int)num_cpus + 1);
    }
    #line 350 
    i ++;
  }
  #line 356 
  if ((unsigned int)num_cpus == 0U) {
    #line 357 
    num_cpus = (unsigned short)num_online_cpus_0();
  }
  {
    #line 359 
    __UNIQUE_ID___x545 = nic_dev->max_qps;
    #line 359 
    unsigned short __UNIQUE_ID___y546 = num_cpus;
    #line 359 
    if ((int)__UNIQUE_ID___x545 < (int)__UNIQUE_ID___y546) 
                                                           #line 359 
                                                           tmp_3 = (int)__UNIQUE_ID___x545; else 
                                                                    #line 359 
                                                                    tmp_3 = (int)__UNIQUE_ID___y546;
    }
  #line 359 
  nic_dev->num_qps = (unsigned short)tmp_3;
  #line 361 
  nic_dev->rss_limit = nic_dev->num_qps;
  #line 362 
  nic_dev->num_rss = nic_dev->num_qps;
  #line 364 
  hinic_init_rss_parameters(nic_dev);
  #line 365 
  err = hinic_rss_init(nic_dev);
  #line 366 
  if (err != 0) 
    #line 367 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 367 
                                          netdev_err(netdev,(char *)"Failed to init rss\n");
  #line 368 
  return;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_open(struct net_device *netdev)
{
  #line 373 
  enum hinic_port_link_state link_state;
  #line 374 
  int err;
  #line 374 
  int ret;
  #line 372 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 376 
  if ((nic_dev->flags & 2U) == 0U) {
    #line 377 
    err = hinic_hwdev_ifup(nic_dev->hwdev);
    #line 378 
    if (err != 0) {
      #line 379 
      if ((nic_dev->msg_enable & 1U) != 0U) 
                                            #line 379 
                                            netdev_err(netdev,(char *)"Failed - HW interface up\n");
      #line 381 
      return err;
    }
  }
  #line 385 
  err = create_txqs(nic_dev);
  #line 386 
  if (err != 0) {
    #line 387 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 387 
                                          netdev_err(netdev,(char *)"Failed to create Tx queues\n");
    #line 389 
    goto err_create_txqs;
  }
  #line 392 
  err = create_rxqs(nic_dev);
  #line 393 
  if (err != 0) {
    #line 394 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 394 
                                          netdev_err(netdev,(char *)"Failed to create Rx queues\n");
    #line 396 
    goto err_create_rxqs;
  }
  #line 399 
  hinic_enable_rss(nic_dev);
  #line 401 
  err = hinic_configure_max_qnum(nic_dev);
  #line 402 
  if (err != 0) {
    #line 403 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 403 
                                          netdev_err(nic_dev->netdev,(char *)"Failed to configure the maximum number of queues\n");
    #line 405 
    goto err_port_state;
  }
  #line 408 
  netif_set_real_num_tx_queues(netdev,(unsigned int)nic_dev->num_qps);
  #line 409 
  netif_set_real_num_rx_queues(netdev,(unsigned int)nic_dev->num_qps);
  #line 411 
  err = hinic_port_set_state(nic_dev,(enum hinic_port_state)HINIC_PORT_ENABLE);
  #line 412 
  if (err != 0) {
    #line 413 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 413 
                                          netdev_err(netdev,(char *)"Failed to set port state\n");
    #line 415 
    goto err_port_state;
  }
  #line 418 
  err = hinic_port_set_func_state(nic_dev,(enum hinic_func_port_state)HINIC_FUNC_PORT_ENABLE);
  #line 419 
  if (err != 0) {
    #line 420 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 420 
                                          netdev_err(netdev,(char *)"Failed to set func port state\n");
    #line 422 
    goto err_func_port_state;
  }
  #line 426 
  msleep(3000U);
  #line 428 
  down(& nic_dev->mgmt_lock);
  #line 430 
  err = hinic_port_link_state(nic_dev,& link_state);
  #line 431 
  if (err != 0) {
    #line 432 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 432 
                                          netdev_err(netdev,(char *)"Failed to get link state\n");
    #line 433 
    goto err_port_link;
  }
  #line 436 
  if (link_state == (unsigned int)HINIC_LINK_STATE_UP) 
                                                       #line 437 
                                                       nic_dev->flags |= 1U;
  #line 439 
  nic_dev->flags |= 2U;
  #line 441 
  if ((nic_dev->flags & 3U) == 3U) {
    #line 443 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 443 
                                          netdev_info(netdev,(char *)"link + intf UP\n");
    #line 444 
    netif_carrier_on(netdev);
    #line 445 
    netif_tx_wake_all_queues(netdev);
  }
  #line 448 
  up(& nic_dev->mgmt_lock);
  #line 450 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 450 
                                        netdev_info(netdev,(char *)"HINIC_INTF is UP\n");
  #line 451 
  return 0;
  #line 453 
  err_port_link: 
                 #line 453 
  ;
  #line 454 
  up(& nic_dev->mgmt_lock);
  #line 455 
  ret = hinic_port_set_func_state(nic_dev,(enum hinic_func_port_state)HINIC_FUNC_PORT_DISABLE);
  #line 456 
  if (ret != 0) 
    #line 457 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 457 
                                          netdev_warn(netdev,(char *)"Failed to revert func port state\n");
  #line 460 
  err_func_port_state: 
                       #line 460 
  ;
  #line 461 
  ret = hinic_port_set_state(nic_dev,(enum hinic_port_state)HINIC_PORT_DISABLE);
  #line 462 
  if (ret != 0) 
    #line 463 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 463 
                                          netdev_warn(netdev,(char *)"Failed to revert port state\n");
  #line 465 
  err_port_state: 
                  #line 465 
  ;
  #line 466 
  free_rxqs(nic_dev);
  #line 467 
  if ((nic_dev->flags & 4U) != 0U) {
    #line 468 
    hinic_rss_deinit(nic_dev);
    #line 469 
    hinic_rss_template_free(nic_dev,(unsigned char)((int)nic_dev->rss_tmpl_idx));
  }
  #line 472 
  err_create_rxqs: 
                   #line 472 
  ;
  #line 473 
  free_txqs(nic_dev);
  #line 475 
  err_create_txqs: 
                   #line 475 
  ;
  #line 476 
  if ((nic_dev->flags & 2U) == 0U) 
                                   #line 477 
                                   hinic_hwdev_ifdown(nic_dev->hwdev);
  #line 478 
  return err;
}

#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_close(struct net_device *netdev)
{
  #line 484 
  unsigned int flags;
  #line 485 
  int err;
  #line 483 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 487 
  down(& nic_dev->mgmt_lock);
  #line 489 
  flags = nic_dev->flags;
  #line 490 
  nic_dev->flags &= 4294967293U;
  #line 492 
  netif_carrier_off(netdev);
  #line 493 
  netif_tx_disable(netdev);
  #line 495 
  update_nic_stats(nic_dev);
  #line 497 
  up(& nic_dev->mgmt_lock);
  #line 499 
  err = hinic_port_set_func_state(nic_dev,(enum hinic_func_port_state)HINIC_FUNC_PORT_DISABLE);
  #line 500 
  if (err != 0) {
    #line 501 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 501 
                                          netdev_err(netdev,(char *)"Failed to set func port state\n");
    #line 503 
    nic_dev->flags |= flags & 2U;
    #line 504 
    return err;
  }
  #line 507 
  err = hinic_port_set_state(nic_dev,(enum hinic_port_state)HINIC_PORT_DISABLE);
  #line 508 
  if (err != 0) {
    #line 509 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 509 
                                          netdev_err(netdev,(char *)"Failed to set port state\n");
    #line 510 
    nic_dev->flags |= flags & 2U;
    #line 511 
    return err;
  }
  #line 514 
  if ((nic_dev->flags & 4U) != 0U) {
    #line 515 
    hinic_rss_deinit(nic_dev);
    #line 516 
    hinic_rss_template_free(nic_dev,(unsigned char)((int)nic_dev->rss_tmpl_idx));
  }
  #line 519 
  free_rxqs(nic_dev);
  #line 520 
  free_txqs(nic_dev);
  #line 522 
  if ((flags & 2U) != 0U) 
                          #line 523 
                          hinic_hwdev_ifdown(nic_dev->hwdev);
  #line 525 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 525 
                                        netdev_info(netdev,(char *)"HINIC_INTF is DOWN\n");
  #line 526 
  return 0;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 532 
  int err;
  #line 531 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 534 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 534 
                                        netdev_info(netdev,(char *)"set_mtu = %d\n",new_mtu);
  #line 536 
  err = hinic_port_set_mtu(nic_dev,new_mtu);
  #line 537 
  if (err != 0) {
    #line 538 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 538 
                                          netdev_err(netdev,(char *)"Failed to set port mtu\n");
  }
  else 
       #line 540 
       netdev->mtu = (unsigned int)new_mtu;
  #line 542 
  return err;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int change_mac_addr(struct net_device *netdev, u8 *addr)
{
  #line 556 
  int err;
  #line 554 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 555 
  u16 vid = (unsigned short)0U;
  #line 558 
  if (! is_valid_ether_addr(addr)) 
                                   #line 559 
                                   return -99;
  #line 561 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 561 
                                        netdev_info(netdev,(char *)"change mac addr = %02x %02x %02x %02x %02x %02x\n",(int)*addr,(int)*(addr + 1U),(int)*(addr + 2U),(int)*(addr + 3U),(int)*(addr + 4U),(int)*(addr + 5U));
  #line 564 
  down(& nic_dev->mgmt_lock);
  #line 566 
  while (1) {
    {
      #line 567 
      err = hinic_port_del_mac(nic_dev,netdev->dev_addr,(unsigned short)((int)vid));
      #line 568 
      if (err != 0) {
        #line 569 
        if ((nic_dev->msg_enable & 1U) != 0U) 
                                              #line 569 
                                              netdev_err(netdev,(char *)"Failed to delete mac\n");
        #line 571 
        break;
      }
      #line 574 
      err = hinic_port_add_mac(nic_dev,addr,(unsigned short)((int)vid));
      #line 575 
      if (err != 0) {
        #line 576 
        if ((nic_dev->msg_enable & 1U) != 0U) 
                                              #line 576 
                                              netdev_err(netdev,(char *)"Failed to add mac\n");
        #line 577 
        break;
      }
      #line 580 
      vid = (unsigned short)cif_find_next_bit(nic_dev->vlan_bitmap,4096UL,
                          (unsigned long)((int)vid + 1));
    }
    #line 581 
    if (! ((unsigned int)vid != 4096U)) 
                                        #line 566 
                                        break;
  }
  #line 583 
  up(& nic_dev->mgmt_lock);
  #line 584 
  return err;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_set_mac_addr(struct net_device *netdev, void *addr)
{
  #line 589 
  unsigned char new_mac[6U];
  #line 591 
  int err;
  #line 590 
  struct sockaddr *saddr = (struct sockaddr *)addr;
  #line 593 
  memcpy((void *)(& new_mac),(void *)(& saddr->sa_data),6UL);
  #line 595 
  err = change_mac_addr(netdev,(u8 *)(& new_mac));
  #line 596 
  if (err == 0) 
                #line 597 
                memcpy((void *)netdev->dev_addr,(void *)(& new_mac),6UL);
  #line 599 
  return err;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int add_mac_addr(struct net_device *netdev, u8 *addr)
{
  #line 613 
  int err;
  #line 611 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 612 
  u16 vid = (unsigned short)0U;
  #line 615 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 615 
                                        netdev_info(netdev,(char *)"set mac addr = %02x %02x %02x %02x %02x %02x\n",(int)*addr,(int)*(addr + 1U),(int)*(addr + 2U),(int)*(addr + 3U),(int)*(addr + 4U),(int)*(addr + 5U));
  #line 618 
  down(& nic_dev->mgmt_lock);
  #line 620 
  while (1) {
    {
      #line 621 
      err = hinic_port_add_mac(nic_dev,addr,(unsigned short)((int)vid));
      #line 622 
      if (err != 0) {
        #line 623 
        if ((nic_dev->msg_enable & 1U) != 0U) 
                                              #line 623 
                                              netdev_err(netdev,(char *)"Failed to add mac\n");
        #line 624 
        break;
      }
      #line 627 
      vid = (unsigned short)cif_find_next_bit(nic_dev->vlan_bitmap,4096UL,
                          (unsigned long)((int)vid + 1));
    }
    #line 628 
    if (! ((unsigned int)vid != 4096U)) 
                                        #line 620 
                                        break;
  }
  #line 630 
  up(& nic_dev->mgmt_lock);
  #line 631 
  return err;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int remove_mac_addr(struct net_device *netdev, u8 *addr)
{
  #line 645 
  int err;
  #line 643 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 644 
  u16 vid = (unsigned short)0U;
  #line 647 
  if (! is_valid_ether_addr(addr)) 
                                   #line 648 
                                   return -99;
  #line 650 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 650 
                                        netdev_info(netdev,(char *)"remove mac addr = %02x %02x %02x %02x %02x %02x\n",(int)*addr,(int)*(addr + 1U),(int)*(addr + 2U),(int)*(addr + 3U),(int)*(addr + 4U),(int)*(addr + 5U));
  #line 653 
  down(& nic_dev->mgmt_lock);
  #line 655 
  while (1) {
    {
      #line 656 
      err = hinic_port_del_mac(nic_dev,addr,(unsigned short)((int)vid));
      #line 657 
      if (err != 0) {
        #line 658 
        if ((nic_dev->msg_enable & 1U) != 0U) 
                                              #line 658 
                                              netdev_err(netdev,(char *)"Failed to delete mac\n");
        #line 660 
        break;
      }
      #line 663 
      vid = (unsigned short)cif_find_next_bit(nic_dev->vlan_bitmap,4096UL,
                          (unsigned long)((int)vid + 1));
    }
    #line 664 
    if (! ((unsigned int)vid != 4096U)) 
                                        #line 655 
                                        break;
  }
  #line 666 
  up(& nic_dev->mgmt_lock);
  #line 667 
  return err;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 674 
  int ret;
  #line 674 
  int err;
  #line 673 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 676 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 676 
                                        netdev_info(netdev,(char *)"add vid = %d\n",(int)vid);
  #line 678 
  down(& nic_dev->mgmt_lock);
  #line 680 
  err = hinic_port_add_vlan(nic_dev,(unsigned short)((int)vid));
  #line 681 
  if (err != 0) {
    #line 682 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 682 
                                          netdev_err(netdev,(char *)"Failed to add vlan\n");
    #line 683 
    goto err_vlan_add;
  }
  #line 686 
  err = hinic_port_add_mac(nic_dev,netdev->dev_addr,(unsigned short)((int)vid));
  #line 687 
  if (err != 0) {
    #line 688 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 688 
                                          netdev_err(netdev,(char *)"Failed to set mac\n");
    #line 689 
    goto err_add_mac;
  }
  #line 692 
  cif_bitmap_set(nic_dev->vlan_bitmap,(unsigned int)vid,1U);
  #line 694 
  up(& nic_dev->mgmt_lock);
  #line 695 
  return 0;
  #line 697 
  err_add_mac: 
               #line 697 
  ;
  #line 698 
  ret = hinic_port_del_vlan(nic_dev,(unsigned short)((int)vid));
  #line 699 
  if (ret != 0) 
    #line 700 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 700 
                                          netdev_err(netdev,(char *)"Failed to revert by removing vlan\n");
  #line 703 
  err_vlan_add: 
                #line 703 
  ;
  #line 704 
  up(& nic_dev->mgmt_lock);
  #line 705 
  return err;
}

#line 708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 712 
  int err;
  #line 711 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 714 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 714 
                                        netdev_info(netdev,(char *)"remove vid = %d\n",(int)vid);
  #line 716 
  down(& nic_dev->mgmt_lock);
  #line 718 
  err = hinic_port_del_vlan(nic_dev,(unsigned short)((int)vid));
  #line 719 
  if (err != 0) {
    #line 720 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 720 
                                          netdev_err(netdev,(char *)"Failed to delete vlan\n");
    #line 721 
    goto err_del_vlan;
  }
  #line 724 
  cif_bitmap_clear(nic_dev->vlan_bitmap,(unsigned int)vid,1U);
  #line 726 
  up(& nic_dev->mgmt_lock);
  #line 727 
  return 0;
  #line 729 
  err_del_vlan: 
                #line 729 
  ;
  #line 730 
  up(& nic_dev->mgmt_lock);
  #line 731 
  return err;
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void set_rx_mode(struct work_struct *work)
{
  #line 736 
  void *__mptr;
  #line 737 
  void *__mptr_0;
  #line 736 
  __mptr = (void *)work;
  #line 736 
  struct hinic_rx_mode_work *rx_mode_work = ((struct hinic_rx_mode_work *)__mptr);
  #line 737 
  __mptr_0 = (void *)rx_mode_work;
  #line 737 
  struct hinic_dev *nic_dev = ((struct hinic_dev *)(__mptr_0 + 18446744073709551472U));
  #line 739 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 739 
                                        netdev_info(nic_dev->netdev,(char *)"set rx mode work\n");
  #line 741 
  hinic_port_set_rx_mode(nic_dev,rx_mode_work->rx_mode);
  #line 743 
  __dev_uc_sync(nic_dev->netdev,& add_mac_addr,& remove_mac_addr);
  #line 744 
  __dev_mc_sync(nic_dev->netdev,& add_mac_addr,& remove_mac_addr);
  #line 745 
  return;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_set_rx_mode(struct net_device *netdev)
{
  #line 750 
  struct hinic_rx_mode_work *rx_mode_work;
  #line 751 
  u32 rx_mode;
  #line 749 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 753 
  rx_mode_work = & nic_dev->rx_mode_work;
  #line 755 
  rx_mode = 7U;
  #line 759 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 760 
                                    rx_mode |= 16U;
  else 
    #line 761 
    if ((netdev->flags & 512U) != 0U) 
                                      #line 762 
                                      rx_mode |= 8U;
  #line 764 
  rx_mode_work->rx_mode = rx_mode;
  #line 766 
  cif_queue_work_0(nic_dev->workq,& rx_mode_work->work);
  #line 767 
  return;
}

#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_tx_timeout(struct net_device *netdev)
{
  #line 771 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 773 
  if ((nic_dev->msg_enable & 1U) != 0U) 
                                        #line 773 
                                        netdev_err(netdev,(char *)"Tx timeout\n");
  #line 774 
  return;
}

#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 780 
  struct hinic_rxq_stats *nic_rx_stats;
  #line 781 
  struct hinic_txq_stats *nic_tx_stats;
  #line 779 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 783 
  nic_rx_stats = & nic_dev->rx_stats;
  #line 784 
  nic_tx_stats = & nic_dev->tx_stats;
  #line 786 
  down(& nic_dev->mgmt_lock);
  #line 788 
  if ((nic_dev->flags & 2U) != 0U) 
                                   #line 789 
                                   update_nic_stats(nic_dev);
  #line 791 
  up(& nic_dev->mgmt_lock);
  #line 793 
  stats->rx_bytes = nic_rx_stats->bytes;
  #line 794 
  stats->rx_packets = nic_rx_stats->pkts;
  #line 795 
  stats->rx_errors = nic_rx_stats->errors;
  #line 797 
  stats->tx_bytes = nic_tx_stats->bytes;
  #line 798 
  stats->tx_packets = nic_tx_stats->pkts;
  #line 799 
  stats->tx_errors = nic_tx_stats->tx_dropped;
  #line 800 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 805 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 807 
  return set_features(nic_dev,(nic_dev->netdev)->features,features,(_Bool)0);
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static netdev_features_t hinic_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 814 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 817 
  if ((features & 549755813888ULL) == 0ULL) {
    #line 818 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 818 
                                          netdev_info(netdev,(char *)"disabling LRO as RXCSUM is off\n");
    #line 819 
    features &= 18446744073709518847ULL;
  }
  #line 822 
  return features;
}

#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static struct net_device_ops hinic_netdev_ops = {.ndo_open = & hinic_open, .ndo_stop = & hinic_close, .ndo_start_xmit = & hinic_xmit_frame, .ndo_set_rx_mode = & hinic_set_rx_mode, .ndo_set_mac_address = & hinic_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & hinic_change_mtu, .ndo_tx_timeout = & hinic_tx_timeout, .ndo_get_stats64 = & hinic_get_stats64, .ndo_vlan_rx_add_vid = & hinic_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & hinic_vlan_rx_kill_vid, .ndo_fix_features = & hinic_fix_features, .ndo_set_features = & hinic_set_features};
#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void netdev_features_init(struct net_device *netdev)
{
  #line 843 
  netdev->hw_features = 549756961203ULL;
  #line 848 
  netdev->vlan_features = netdev->hw_features;
  #line 850 
  netdev->features = netdev->hw_features | 512ULL;
  #line 851 
  return;
}

#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void link_status_event_handler(void *handle, void *buf_in, u16 in_size, void *buf_out, u16 *out_size)
{
  #line 866 
  struct hinic_port_link_status *link_status;
  #line 866 
  struct hinic_port_link_status *ret_link_status;
  #line 867 
  struct hinic_dev *nic_dev = (struct hinic_dev *)handle;
  #line 869 
  link_status = (struct hinic_port_link_status *)buf_in;
  #line 871 
  if ((unsigned int)link_status->link == 1U) {
    #line 872 
    down(& nic_dev->mgmt_lock);
    #line 874 
    nic_dev->flags |= 1U;
    #line 876 
    if ((nic_dev->flags & 3U) == 3U) {
      #line 878 
      netif_carrier_on(nic_dev->netdev);
      #line 879 
      netif_tx_wake_all_queues(nic_dev->netdev);
    }
    #line 882 
    up(& nic_dev->mgmt_lock);
    #line 884 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 884 
                                          netdev_info(nic_dev->netdev,(char *)"HINIC_Link is UP\n");
  }
  else {
    #line 886 
    down(& nic_dev->mgmt_lock);
    #line 888 
    nic_dev->flags &= 4294967294U;
    #line 890 
    netif_carrier_off(nic_dev->netdev);
    #line 891 
    netif_tx_disable(nic_dev->netdev);
    #line 893 
    up(& nic_dev->mgmt_lock);
    #line 895 
    if ((nic_dev->msg_enable & 1U) != 0U) 
                                          #line 895 
                                          netdev_info(nic_dev->netdev,(char *)"HINIC_Link is DOWN\n");
  }
  #line 898 
  ret_link_status = (struct hinic_port_link_status *)buf_out;
  #line 899 
  ret_link_status->status = (unsigned char)0U;
  #line 901 
  *out_size = (unsigned short)12U;
  #line 902 
  return;
}

#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int set_features(struct hinic_dev *nic_dev, netdev_features_t pre_features, netdev_features_t features, bool force_change)
{
  #line 908 
  unsigned long long tmp;
  #line 908 
  if (force_change) 
                    #line 908 
                    tmp = 18446744073709551615ULL; else 
                                                        #line 908 
                                                        tmp = pre_features ^ features;
  #line 908 
  netdev_features_t changed = tmp;
  #line 909 
  u32 csum_en = 4095U;
  #line 910 
  int err = 0;
  #line 912 
  if ((changed & 65536ULL) != 0ULL) 
                                    #line 913 
                                    err = hinic_port_set_tso(nic_dev,(enum hinic_tso_state)((int)(features >> 16) & 1));
  #line 916 
  if ((changed & 549755813888ULL) != 0ULL) 
                                           #line 917 
                                           err = hinic_set_rx_csum_offload(nic_dev,csum_en);
  #line 919 
  if ((changed & 32768ULL) != 0ULL) 
                                    #line 920 
                                    err = hinic_set_rx_lro_state(nic_dev,(unsigned char)((features & 32768ULL) != 0ULL),16U,8U);
  #line 926 
  if ((changed & 256ULL) != 0ULL) 
                                  #line 927 
                                  err = hinic_set_rx_vlan_offload(nic_dev,(unsigned char)((features & 256ULL) != 0ULL));
  #line 931 
  return err;
}

#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int nic_dev_init(struct pci_dev *pdev)
{
  #line 942 
  struct hinic_rx_mode_work *rx_mode_work;
  #line 943 
  struct hinic_txq_stats *tx_stats;
  #line 944 
  struct hinic_rxq_stats *rx_stats;
  #line 945 
  struct hinic_dev *nic_dev;
  #line 946 
  struct net_device *netdev;
  #line 947 
  struct hinic_hwdev *hwdev;
  #line 948 
  int err;
  #line 948 
  int num_qps;
  #line 950 
  hwdev = hinic_init_hwdev(pdev);
  #line 951 
  if ((int)IS_ERR_3((void *)hwdev) != 0) {
    #line 952 
    _dev_err(& pdev->dev,(char *)"Failed to initialize HW device\n");
    #line 953 
    return (int)PTR_ERR_0((void *)hwdev);
  }
  #line 956 
  num_qps = hinic_hwdev_num_qps(hwdev);
  #line 957 
  if (num_qps <= 0) {
    #line 958 
    _dev_err(& pdev->dev,(char *)"Invalid number of QPS\n");
    #line 959 
    err = -22;
    #line 960 
    goto err_num_qps;
  }
  #line 963 
  netdev = cif_alloc_etherdev_mqs(384,(unsigned int)num_qps,(unsigned int)num_qps);
  #line 964 
  if (netdev == (struct net_device *)0) {
    #line 965 
    _dev_err(& pdev->dev,(char *)"Failed to allocate Ethernet device\n");
    #line 966 
    err = -12;
    #line 967 
    goto err_alloc_etherdev;
  }
  #line 970 
  hinic_set_ethtool_ops(netdev);
  #line 971 
  netdev->netdev_ops = & hinic_netdev_ops;
  #line 972 
  netdev->max_mtu = 65535U;
  #line 974 
  nic_dev = (struct hinic_dev *)netdev_priv(netdev);
  #line 975 
  nic_dev->netdev = netdev;
  #line 976 
  nic_dev->hwdev = hwdev;
  #line 977 
  nic_dev->msg_enable = 227U;
  #line 978 
  nic_dev->flags = 0U;
  #line 979 
  nic_dev->txqs = (struct hinic_txq *)0;
  #line 980 
  nic_dev->rxqs = (struct hinic_rxq *)0;
  #line 981 
  nic_dev->tx_weight = tx_weight;
  #line 982 
  nic_dev->rx_weight = rx_weight;
  #line 984 
  sema_init(& nic_dev->mgmt_lock,1);
  #line 986 
  tx_stats = & nic_dev->tx_stats;
  #line 987 
  rx_stats = & nic_dev->rx_stats;
  #line 989 
  u64_stats_init(& tx_stats->syncp);
  #line 990 
  u64_stats_init(& rx_stats->syncp);
  #line 992 
  nic_dev->vlan_bitmap = (unsigned long *)cif_devm_kzalloc_5(& pdev->dev,512UL,3264U);
  #line 995 
  if (nic_dev->vlan_bitmap == (unsigned long *)0UL) {
    #line 996 
    err = -12;
    #line 997 
    goto err_vlan_bitmap;
  }
  #line 1000 
  nic_dev->workq = alloc_workqueue((char *)"%s",917514U,1,(char *)"hinic_dev");
  #line 1001 
  if (nic_dev->workq == (struct workqueue_struct *)0) {
    #line 1002 
    err = -12;
    #line 1003 
    goto err_workq;
  }
  #line 1006 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 1008 
  err = hinic_port_get_mac(nic_dev,netdev->dev_addr);
  #line 1009 
  if (err != 0) 
                #line 1010 
                _dev_warn(& pdev->dev,(char *)"Failed to get mac address\n");
  #line 1012 
  err = hinic_port_add_mac(nic_dev,netdev->dev_addr,(unsigned short)0);
  #line 1013 
  if (err != 0) {
    #line 1014 
    _dev_err(& pdev->dev,(char *)"Failed to add mac\n");
    #line 1015 
    goto err_add_mac;
  }
  #line 1018 
  err = hinic_port_set_mtu(nic_dev,(int)netdev->mtu);
  #line 1019 
  if (err != 0) {
    #line 1020 
    _dev_err(& pdev->dev,(char *)"Failed to set mtu\n");
    #line 1021 
    goto err_set_mtu;
  }
  #line 1024 
  rx_mode_work = & nic_dev->rx_mode_work;
  {
    #line 1025 
    struct lock_class_key __key;
    #line 1025 
    __init_work(& rx_mode_work->work,0);
    #line 1025 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 1025 
    rx_mode_work->work.data = __constr_expr_44;
    #line 1025 
    lockdep_init_map(& rx_mode_work->work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1025 
    INIT_LIST_HEAD_0(& rx_mode_work->work.entry);
    #line 1025 
    rx_mode_work->work.func = & set_rx_mode;
  }
  #line 1027 
  netdev_features_init(netdev);
  #line 1029 
  netif_carrier_off(netdev);
  #line 1031 
  hinic_hwdev_cb_register(nic_dev->hwdev,(enum hinic_mgmt_msg_cmd)HINIC_MGMT_MSG_CMD_BASE,(void *)nic_dev,& link_status_event_handler);
  #line 1034 
  err = set_features(nic_dev,0ULL,(nic_dev->netdev)->features,(_Bool)1);
  #line 1035 
  if (err != 0) 
                #line 1036 
                goto err_set_features;
  #line 1038 
  netdev->dev.parent = & pdev->dev;
  #line 1040 
  err = cif_register_netdev(netdev);
  #line 1041 
  if (err != 0) {
    #line 1042 
    _dev_err(& pdev->dev,(char *)"Failed to register netdev\n");
    #line 1043 
    goto err_reg_netdev;
  }
  #line 1046 
  return 0;
  #line 1048 
  err_reg_netdev: 
                  #line 1048 
  ;
  #line 1049 
  err_set_features: 
                    #line 1049 
  ;
  #line 1050 
  hinic_hwdev_cb_unregister(nic_dev->hwdev,(enum hinic_mgmt_msg_cmd)HINIC_MGMT_MSG_CMD_BASE);
  #line 1052 
  cancel_work_sync(& rx_mode_work->work);
  #line 1054 
  err_set_mtu: 
               #line 1054 
  ;
  #line 1055 
  err_add_mac: 
               #line 1055 
  ;
  #line 1056 
  pci_set_drvdata(pdev,(void *)0);
  #line 1057 
  destroy_workqueue(nic_dev->workq);
  #line 1059 
  err_workq: 
             #line 1059 
  ;
  #line 1060 
  err_vlan_bitmap: 
                   #line 1060 
  ;
  #line 1061 
  cif_free_netdev(netdev);
  #line 1063 
  err_alloc_etherdev: 
                      #line 1063 
  ;
  #line 1064 
  err_num_qps: 
               #line 1064 
  ;
  #line 1065 
  hinic_free_hwdev(hwdev);
  #line 1066 
  return err;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_probe(struct pci_dev *pdev, struct pci_device_id *id)
{
  #line 1072 
  int err = pci_enable_device(pdev);
  #line 1074 
  if (err != 0) {
    #line 1075 
    _dev_err(& pdev->dev,(char *)"Failed to enable PCI device\n");
    #line 1076 
    return err;
  }
  #line 1079 
  err = pci_request_regions(pdev,(char *)"hinic");
  #line 1080 
  if (err != 0) {
    #line 1081 
    _dev_err(& pdev->dev,(char *)"Failed to request PCI regions\n");
    #line 1082 
    goto err_pci_regions;
  }
  #line 1085 
  pci_set_master(pdev);
  #line 1087 
  err = pci_set_dma_mask(pdev,18446744073709551615ULL);
  #line 1088 
  if (err != 0) {
    #line 1089 
    _dev_warn(& pdev->dev,(char *)"Couldn\'t set 64-bit DMA mask\n");
    #line 1090 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    #line 1091 
    if (err != 0) {
      #line 1092 
      _dev_err(& pdev->dev,(char *)"Failed to set DMA mask\n");
      #line 1093 
      goto err_dma_mask;
    }
  }
  #line 1097 
  err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
  #line 1098 
  if (err != 0) {
    #line 1099 
    _dev_warn(& pdev->dev,(char *)"Couldn\'t set 64-bit consistent DMA mask\n");
    #line 1101 
    err = pci_set_consistent_dma_mask(pdev,4294967295ULL);
    #line 1102 
    if (err != 0) {
      #line 1103 
      _dev_err(& pdev->dev,(char *)"Failed to set consistent DMA mask\n");
      #line 1105 
      goto err_dma_consistent_mask;
    }
  }
  #line 1109 
  err = nic_dev_init(pdev);
  #line 1110 
  if (err != 0) {
    #line 1111 
    _dev_err(& pdev->dev,(char *)"Failed to initialize NIC device\n");
    #line 1112 
    goto err_nic_dev_init;
  }
  #line 1115 
  _dev_info(& pdev->dev,(char *)"HiNIC driver - probed\n");
  #line 1116 
  return 0;
  #line 1118 
  err_nic_dev_init: 
                    #line 1118 
  ;
  #line 1119 
  err_dma_consistent_mask: 
                           #line 1119 
  ;
  #line 1120 
  err_dma_mask: 
                #line 1120 
  ;
  #line 1121 
  pci_release_regions(pdev);
  #line 1123 
  err_pci_regions: 
                   #line 1123 
  ;
  #line 1124 
  pci_disable_device(pdev);
  #line 1125 
  return err;
}

#line 1128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_remove(struct pci_dev *pdev)
{
  #line 1132 
  struct hinic_rx_mode_work *rx_mode_work;
  #line 1130 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 1131 
  struct hinic_dev *nic_dev = netdev_priv(netdev);
  #line 1134 
  cif_unregister_netdev(netdev);
  #line 1136 
  hinic_hwdev_cb_unregister(nic_dev->hwdev,(enum hinic_mgmt_msg_cmd)HINIC_MGMT_MSG_CMD_BASE);
  #line 1139 
  rx_mode_work = & nic_dev->rx_mode_work;
  #line 1140 
  cancel_work_sync(& rx_mode_work->work);
  #line 1142 
  pci_set_drvdata(pdev,(void *)0);
  #line 1144 
  destroy_workqueue(nic_dev->workq);
  #line 1146 
  hinic_free_hwdev(nic_dev->hwdev);
  #line 1148 
  cif_free_netdev(netdev);
  #line 1150 
  pci_release_regions(pdev);
  #line 1151 
  pci_disable_device(pdev);
  #line 1153 
  _dev_info(& pdev->dev,(char *)"HiNIC driver - removed\n");
  #line 1154 
  return;
}

#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_shutdown(struct pci_dev *pdev)
{
  #line 1158 
  pci_disable_device(pdev);
  #line 1159 
  return;
}

#line 1161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static struct pci_device_id hinic_pci_table[5U] = {{.vendor = 6629U, .device = 6178U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 512U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 517U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 528U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
struct pci_device_id __mod_pci__hinic_pci_table_device_table[5U];
#line 1170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static struct pci_driver hinic_driver = {.name = (char *)"hinic", .id_table = (struct pci_device_id *)(& hinic_pci_table), .probe = & hinic_probe, .remove = & hinic_remove, .shutdown = & hinic_shutdown};
#line 1178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static int hinic_driver_init(void)
{
  #line 1178 
  return cif___pci_register_driver(& hinic_driver,& __this_module,
                                (char *)"hinic");
}

#line 1178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_main.c"
static void hinic_driver_exit(void)
{
  #line 1178 
  cif_pci_unregister_driver(& hinic_driver);
  #line 1179 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
struct pci_driver *emg_alias_hinic_driver = & hinic_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
struct pci_device_id (*emg_alias_hinic_pci_table)[5U] = & hinic_pci_table;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 101 
#line 101 
void emg_free_netdev(struct net_device *arg0);
#line 102 
#line 102 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104 
#line 104 
int emg_register_netdev(struct net_device *arg0);
#line 108 
#line 108 
void emg_unregister_netdev(struct net_device *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_change_mtu(struct net_device *arg0, int arg1)
{
  #line 113 
  return hinic_change_mtu(arg0,arg1);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_close(struct net_device *arg0)
{
  #line 118 
  return hinic_close(arg0);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
unsigned long long emg_wrapper_hinic_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 123 
  return hinic_fix_features(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
void emg_wrapper_hinic_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 128 
  hinic_get_stats64(arg0,arg1);
  #line 129 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_open(struct net_device *arg0)
{
  #line 133 
  return hinic_open(arg0);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 138 
  return hinic_probe(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
void emg_wrapper_hinic_remove(struct pci_dev *arg0)
{
  #line 143 
  hinic_remove(arg0);
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 148 
  return hinic_set_features(arg0,arg1);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_set_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 153 
  return hinic_set_mac_addr(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
void emg_wrapper_hinic_set_rx_mode(struct net_device *arg0)
{
  #line 158 
  hinic_set_rx_mode(arg0);
  #line 159 
  return;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
void emg_wrapper_hinic_shutdown(struct pci_dev *arg0)
{
  #line 163 
  hinic_shutdown(arg0);
  #line 164 
  return;
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
void emg_wrapper_hinic_tx_timeout(struct net_device *arg0)
{
  #line 168 
  hinic_tx_timeout(arg0);
  #line 169 
  return;
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 173 
  return hinic_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_wrapper_hinic_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 178 
  return hinic_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                             (unsigned short)((int)arg2));
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
void emg_hinic_driver_exit(void)
{
  #line 183 
  hinic_driver_exit();
  #line 184 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
int emg_hinic_driver_init(void)
{
  #line 187 
  return hinic_driver_init();
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 201 
  return ldv_find_next_bit(addr,size,offset);
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 208 
  ldv_set_bit(nr,addr);
  #line 209 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 222 
  ldv_init_list_head(list);
  #line 223 
  return;
}

#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static long PTR_ERR_0(void *ptr)
{
  #line 299 
  return ldv_ptr_err(ptr);
}

#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static bool IS_ERR_3(void *ptr)
{
  #line 306 
  return ldv_is_err(ptr);
}

#line 389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 393 
  return emg_queue_work(wq,work);
}

#line 549  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 552 
  return ldv_kcalloc(n,size,flags);
}

#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_0(spinlock_t *lock)
{
  #line 634 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 636 
  spin_lock_1(lock);
  #line 637 
  return;
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_0(spinlock_t *lock)
{
  #line 674 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 676 
  spin_unlock_1(lock);
  #line 677 
  return;
}

#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void *cif_devm_kzalloc_5(struct device *dev, size_t size, gfp_t flags)
{
  #line 894 
  return ldv_devm_kzalloc(size,flags);
}

#line 898  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 901 
  ldv_bitmap_set(map,start,(int)nbits);
  #line 902 
  return;
}

#line 905  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_bitmap_clear(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 908 
  ldv_bitmap_clear(map,start,(int)nbits);
  #line 909 
  return;
}

#line 912  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 916 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 924 
  return emg_register_netdev(dev);
}

#line 928  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 932 
  emg_free_netdev(dev);
  #line 933 
  return;
}

#line 936  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 940 
  emg_unregister_netdev(dev);
  #line 941 
  return;
}

#line 944  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 948 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 952  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 956 
  emg_pci_unregister_driver(dev);
  #line 957 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static void *ERR_PTR_2(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static long PTR_ERR_1(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static bool IS_ERR_4(void *ptr);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static void *cif_devm_kzalloc_6(struct device *dev, size_t size, gfp_t flags);
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
int hinic_api_cmd_write(struct hinic_api_cmd_chain *chain, enum hinic_node_id dest, u8 *cmd, u16 size);
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
int hinic_api_cmd_init(struct hinic_api_cmd_chain **chain, struct hinic_hwif *hwif);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.h"
#line 958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
void hinic_api_cmd_free(struct hinic_api_cmd_chain **chain);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static u8 xor_chksum_set(void *data)
{
  #line 78 
  int idx;
  #line 79 
  u8 *val;
  #line 79 
  u8 checksum = (unsigned char)0U;
  #line 81 
  val = (u8 *)data;
  #line 83 
  idx = 0;
  #line 83 
  while (idx <= 6) {
    #line 84 
    checksum = (unsigned char)((int)*(val + (unsigned long)idx) ^ (int)checksum);
    #line 83 
    idx ++;
  }
  #line 86 
  return checksum;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void set_prod_idx(struct hinic_api_cmd_chain *chain)
{
  #line 93 
  u32 addr;
  #line 93 
  u32 prod_idx;
  #line 91 
  enum hinic_api_cmd_chain_type chain_type = chain->chain_type;
  #line 92 
  struct hinic_hwif *hwif = chain->hwif;
  #line 95 
  addr = (unsigned int)chain_type * 256U + 61468U;
  #line 96 
  prod_idx = hinic_hwif_read_reg(hwif,addr);
  #line 98 
  prod_idx &= 4278190080U;
  #line 100 
  prod_idx = (chain->prod_idx & 16777215U) | prod_idx;
  #line 102 
  hinic_hwif_write_reg(hwif,addr,prod_idx);
  #line 103 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static u32 get_hw_cons_idx(struct hinic_api_cmd_chain *chain)
{
  #line 107 
  u32 addr;
  #line 107 
  u32 val;
  #line 109 
  addr = (unsigned int)chain->chain_type * 256U + 61488U;
  #line 110 
  val = hinic_hwif_read_reg(chain->hwif,addr);
  #line 112 
  return val & 16777215U;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int chain_busy(struct hinic_api_cmd_chain *chain)
{
  #line 125 
  u32 prod_idx;
  #line 123 
  struct hinic_hwif *hwif = chain->hwif;
  #line 124 
  struct pci_dev *pdev = hwif->pdev;
  #line 127 
  switch ((unsigned int)chain->chain_type) {
    #line 128 
    case (unsigned int)2: 
                          #line 128 
    ;
    #line 129 
    chain->cons_idx = get_hw_cons_idx(chain);
    #line 130 
    prod_idx = chain->prod_idx;
    #line 133 
    if (chain->cons_idx == ((prod_idx + 1U) & (chain->num_cells + 4294967295U))) {
      #line 134 
      _dev_err(& pdev->dev,(char *)"API CMD chain %d is busy\n",(unsigned int)chain->chain_type);
      #line 136 
      return -16;
    }
    #line 138 
    break;
    #line 140 
    default: 
             #line 140 
    ;
    #line 141 
    _dev_err(& pdev->dev,(char *)"Unknown API CMD Chain type\n");
    #line 142 
    break;
  }
  #line 145 
  return 0;
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static u8 get_cell_data_size(enum hinic_api_cmd_chain_type type)
{
  #line 156 
  u8 cell_data_size = (unsigned char)0U;
  #line 158 
  switch ((unsigned int)type) {
    #line 159 
    case (unsigned int)2: 
                          #line 159 
    ;
    #line 160 
    cell_data_size = (unsigned char)16U;
    #line 163 
    break;
    #line 164 
    default: 
             #line 164 
    ;
    #line 165 
    break;
  }
  #line 168 
  return cell_data_size;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void prepare_cell_ctrl(u64 *cell_ctrl, u16 data_size)
{
  #line 178 
  u8 chksum;
  #line 179 
  u64 ctrl;
  #line 181 
  ctrl = (unsigned long long)(((int)data_size + 7) >> 3) & 63ULL;
  #line 185 
  chksum = xor_chksum_set((void *)(& ctrl));
  #line 187 
  ctrl = ((unsigned long long)chksum << 56) | ctrl;
  #line 190 
  *cell_ctrl = (u64)__builtin_bswap64((unsigned long)ctrl);
  #line 191 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void prepare_api_cmd(struct hinic_api_cmd_chain *chain, enum hinic_node_id dest, void *cmd, u16 cmd_size)
{
  #line 205 
  struct hinic_api_cmd_cell_ctxt *cell_ctxt;
  #line 204 
  struct hinic_api_cmd_cell *cell = chain->curr_node;
  #line 206 
  struct hinic_hwif *hwif = chain->hwif;
  #line 207 
  struct pci_dev *pdev = hwif->pdev;
  #line 209 
  cell_ctxt = chain->cell_ctxt + (unsigned long)chain->prod_idx;
  #line 211 
  switch ((unsigned int)chain->chain_type) {
    #line 212 
    case (unsigned int)2: 
                          #line 212 
    ;
    #line 213 
    cell->desc = 1ULL;
    #line 216 
    break;
    #line 218 
    default: 
             #line 218 
    ;
    #line 219 
    _dev_err(& pdev->dev,(char *)"unknown Chain type\n");
    #line 220 
    return;
  }
  #line 223 
  cell->desc |= (((unsigned long long)dest << 32) & 133143986176ULL) | (((unsigned long long)(((int)cmd_size + 3) >> 2) << 40) & 2250700302057472ULL);
  #line 227 
  cell->desc |= (unsigned long long)xor_chksum_set((void *)(& cell->desc)) << 56;
  #line 230 
  cell->desc = (u64)__builtin_bswap64((unsigned long)cell->desc);
  #line 232 
  memcpy((void *)cell_ctxt->api_cmd_vaddr,cmd,(unsigned long)cmd_size);
  #line 233 
  return;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void prepare_cell(struct hinic_api_cmd_chain *chain, enum hinic_node_id dest, void *cmd, u16 cmd_size)
{
  #line 248 
  struct hinic_api_cmd_cell *curr_node = chain->curr_node;
  #line 249 
  u16 data_size = (unsigned short)get_cell_data_size(chain->chain_type);
  #line 251 
  prepare_cell_ctrl(& curr_node->ctrl,(unsigned short)((int)data_size));
  #line 252 
  prepare_api_cmd(chain,dest,cmd,(unsigned short)((int)cmd_size));
  #line 253 
  return;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
__inline static void cmd_chain_prod_idx_inc(struct hinic_api_cmd_chain *chain)
{
  #line 257 
  chain->prod_idx = (chain->prod_idx + 1U) & (chain->num_cells + 4294967295U);
  #line 258 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_status_update(struct hinic_api_cmd_chain *chain)
{
  #line 266 
  enum hinic_api_cmd_chain_type chain_type;
  #line 267 
  struct hinic_api_cmd_status *wb_status;
  #line 270 
  u64 status_header;
  #line 271 
  u32 status;
  #line 268 
  struct hinic_hwif *hwif = chain->hwif;
  #line 269 
  struct pci_dev *pdev = hwif->pdev;
  #line 273 
  wb_status = chain->wb_status;
  #line 274 
  status_header = (u64)__builtin_bswap64((unsigned long)wb_status->header);
  #line 276 
  status = __builtin_bswap32(wb_status->status);
  #line 277 
  if (((status >> 28) & 3U) != 0U) {
    #line 278 
    _dev_err(& pdev->dev,(char *)"API CMD status: Xor check error\n");
    #line 279 
    return;
  }
  #line 282 
  chain_type = (enum hinic_api_cmd_chain_type)((unsigned int)(status_header >> 16) & 255U);
  #line 283 
  if (chain_type > (unsigned int)HINIC_API_CMD_WRITE_TO_MGMT_CPU) {
    #line 284 
    _dev_err(& pdev->dev,(char *)"unknown API CMD Chain %d\n",(unsigned int)chain_type);
    #line 285 
    return;
  }
  #line 288 
  chain->cons_idx = status & 16777215U;
  #line 289 
  return;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int wait_for_status_poll(struct hinic_api_cmd_chain *chain)
{
  #line 300 
  unsigned long end;
  #line 299 
  int err = -110;
  #line 302 
  end = msecs_to_jiffies(1000U) + jiffies;
  #line 303 
  while (1) {
    #line 304 
    api_cmd_status_update(chain);
    #line 307 
    if (chain->cons_idx == chain->prod_idx) {
      #line 308 
      err = 0;
      #line 309 
      break;
    }
    #line 312 
    msleep(20U);
    {
      #line 313 
      unsigned long __dummy;
      #line 313 
      unsigned long __dummy2;
      }
    #line 313 
    if (1 != 0) {
      {
        #line 313 
        unsigned long __dummy_0;
        #line 313 
        unsigned long __dummy2_0;
        }
      #line 313 
      if (1 != 0) {
        #line 313 
        if (! ((long)(jiffies - end) < 0L)) 
                                            #line 303 
                                            break;
      }
      else 
           #line 303 
           break;
    }
    else 
         #line 303 
         break;
  }
  #line 315 
  return err;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int wait_for_api_cmd_completion(struct hinic_api_cmd_chain *chain)
{
  #line 328 
  int err;
  #line 326 
  struct hinic_hwif *hwif = chain->hwif;
  #line 327 
  struct pci_dev *pdev = hwif->pdev;
  #line 330 
  switch ((unsigned int)chain->chain_type) {
    #line 331 
    case (unsigned int)2: 
                          #line 331 
    ;
    #line 332 
    err = wait_for_status_poll(chain);
    #line 333 
    if (err != 0) {
      #line 334 
      _dev_err(& pdev->dev,(char *)"API CMD Poll status timeout\n");
      #line 335 
      break;
    }
    #line 337 
    break;
    #line 339 
    default: 
             #line 339 
    ;
    #line 340 
    _dev_err(& pdev->dev,(char *)"unknown API CMD Chain type\n");
    #line 341 
    err = -22;
    #line 342 
    break;
  }
  #line 345 
  return err;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int api_cmd(struct hinic_api_cmd_chain *chain, enum hinic_node_id dest, u8 *cmd, u16 cmd_size)
{
  #line 360 
  struct hinic_api_cmd_cell_ctxt *ctxt;
  #line 361 
  int err;
  #line 363 
  down(& chain->sem);
  #line 364 
  if (chain_busy(chain) != 0) {
    #line 365 
    up(& chain->sem);
    #line 366 
    return -16;
  }
  #line 369 
  prepare_cell(chain,dest,(void *)cmd,(unsigned short)((int)cmd_size));
  #line 370 
  cmd_chain_prod_idx_inc(chain);
  #line 371 
  ldv_inline_asm();
  #line 374 
  set_prod_idx(chain);
  #line 376 
  ctxt = chain->cell_ctxt + (unsigned long)chain->prod_idx;
  #line 378 
  chain->curr_node = ctxt->cell_vaddr;
  #line 380 
  err = wait_for_api_cmd_completion(chain);
  #line 382 
  up(& chain->sem);
  #line 383 
  return err;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
int hinic_api_cmd_write(struct hinic_api_cmd_chain *chain, enum hinic_node_id dest, u8 *cmd, u16 size)
{
  #line 399 
  if (chain->chain_type == (unsigned int)HINIC_API_CMD_WRITE_TO_MGMT_CPU) {
    #line 400 
    return api_cmd(chain,dest,cmd,(unsigned short)((int)size));
  }
  #line 402 
  return -22;
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int api_cmd_hw_restart(struct hinic_api_cmd_chain *chain)
{
  #line 415 
  unsigned long end;
  #line 416 
  u32 reg_addr;
  #line 416 
  u32 val;
  #line 413 
  struct hinic_hwif *hwif = chain->hwif;
  #line 414 
  int err = -110;
  #line 419 
  reg_addr = (unsigned int)chain->chain_type * 256U + 61472U;
  #line 420 
  val = hinic_hwif_read_reg(hwif,reg_addr);
  #line 422 
  val &= 4294967293U;
  #line 423 
  val |= 2U;
  #line 425 
  hinic_hwif_write_reg(hwif,reg_addr,val);
  #line 427 
  end = msecs_to_jiffies(1000U) + jiffies;
  #line 428 
  while (1) {
    #line 429 
    val = hinic_hwif_read_reg(hwif,reg_addr);
    #line 431 
    if ((val & 2U) == 0U) {
      #line 432 
      err = 0;
      #line 433 
      break;
    }
    #line 436 
    msleep(20U);
    {
      #line 437 
      unsigned long __dummy;
      #line 437 
      unsigned long __dummy2;
      }
    #line 437 
    if (1 != 0) {
      {
        #line 437 
        unsigned long __dummy_0;
        #line 437 
        unsigned long __dummy2_0;
        }
      #line 437 
      if (1 != 0) {
        #line 437 
        if (! ((long)(jiffies - end) < 0L)) 
                                            #line 428 
                                            break;
      }
      else 
           #line 428 
           break;
    }
    else 
         #line 428 
         break;
  }
  #line 439 
  return err;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_ctrl_init(struct hinic_api_cmd_chain *chain)
{
  #line 449 
  u32 addr;
  #line 449 
  u32 ctrl;
  #line 450 
  u16 cell_size;
  #line 448 
  struct hinic_hwif *hwif = chain->hwif;
  #line 453 
  addr = (unsigned int)chain->chain_type * 256U + 61460U;
  #line 455 
  if (0 != 0) {
    #line 455 
    unsigned int tmp_58;
    #line 455 
    unsigned int tmp_26;
    #line 455 
    unsigned int tmp_27;
    #line 455 
    unsigned int tmp_59;
    #line 455 
    unsigned int tmp_60;
    #line 455 
    unsigned int tmp_28;
    #line 455 
    unsigned int tmp_29;
    #line 455 
    unsigned int tmp_30;
    #line 455 
    unsigned int tmp;
    #line 455 
    unsigned int tmp_31;
    #line 455 
    unsigned int tmp_32;
    #line 455 
    unsigned int tmp_0;
    #line 455 
    unsigned int tmp_1;
    #line 455 
    unsigned int tmp_33;
    #line 455 
    unsigned int tmp_34;
    #line 455 
    unsigned int tmp_2;
    #line 455 
    unsigned int tmp_3;
    #line 455 
    unsigned int tmp_35;
    #line 455 
    unsigned int tmp_36;
    #line 455 
    unsigned int tmp_4;
    #line 455 
    unsigned int tmp_5;
    #line 455 
    unsigned int tmp_37;
    #line 455 
    unsigned int tmp_38;
    #line 455 
    unsigned int tmp_6;
    #line 455 
    unsigned int tmp_7;
    #line 455 
    unsigned int tmp_39;
    #line 455 
    unsigned int tmp_40;
    #line 455 
    unsigned int tmp_8;
    #line 455 
    unsigned int tmp_9;
    #line 455 
    unsigned int tmp_41;
    #line 455 
    unsigned int tmp_42;
    #line 455 
    unsigned int tmp_10;
    #line 455 
    unsigned int tmp_11;
    #line 455 
    unsigned int tmp_43;
    #line 455 
    unsigned int tmp_44;
    #line 455 
    unsigned int tmp_12;
    #line 455 
    unsigned int tmp_13;
    #line 455 
    unsigned int tmp_45;
    #line 455 
    unsigned int tmp_46;
    #line 455 
    unsigned int tmp_14;
    #line 455 
    unsigned int tmp_15;
    #line 455 
    unsigned int tmp_47;
    #line 455 
    unsigned int tmp_48;
    #line 455 
    unsigned int tmp_16;
    #line 455 
    unsigned int tmp_17;
    #line 455 
    unsigned int tmp_49;
    #line 455 
    unsigned int tmp_50;
    #line 455 
    unsigned int tmp_18;
    #line 455 
    unsigned int tmp_19;
    #line 455 
    unsigned int tmp_51;
    #line 455 
    unsigned int tmp_52;
    #line 455 
    unsigned int tmp_20;
    #line 455 
    unsigned int tmp_21;
    #line 455 
    unsigned int tmp_53;
    #line 455 
    unsigned int tmp_54;
    #line 455 
    unsigned int tmp_22;
    #line 455 
    unsigned int tmp_23;
    #line 455 
    unsigned int tmp_55;
    #line 455 
    unsigned int tmp_56;
    #line 455 
    unsigned int tmp_24;
    #line 455 
    unsigned int tmp_25;
    #line 455 
    unsigned int tmp_57;
    #line 455 
    unsigned int tmp_61;
    #line 455 
    if ((unsigned int)((int)chain->cell_size >> 6) > 1U) {
      #line 455 
      if (((unsigned long long)((int)chain->cell_size >> 6) & 9223372036854775808ULL) == 0ULL) {
        #line 455 
        if (((unsigned long long)((int)chain->cell_size >> 6) & 4611686018427387904ULL) == 0ULL) {
          #line 455 
          if (((unsigned long long)((int)chain->cell_size >> 6) & 2305843009213693952ULL) == 0ULL) {
            #line 455 
            if (((unsigned long long)((int)chain->cell_size >> 6) & 1152921504606846976ULL) == 0ULL) {
              #line 455 
              if (((unsigned long long)((int)chain->cell_size >> 6) & 576460752303423488ULL) == 0ULL) {
                #line 455 
                if (((unsigned long long)((int)chain->cell_size >> 6) & 288230376151711744ULL) == 0ULL) {
                  #line 455 
                  if (((unsigned long long)((int)chain->cell_size >> 6) & 144115188075855872ULL) == 0ULL) {
                    #line 455 
                    if (((unsigned long long)((int)chain->cell_size >> 6) & 72057594037927936ULL) == 0ULL) {
                      #line 455 
                      if (((unsigned long long)((int)chain->cell_size >> 6) & 36028797018963968ULL) == 0ULL) {
                        #line 455 
                        if (((unsigned long long)((int)chain->cell_size >> 6) & 18014398509481984ULL) == 0ULL) {
                          #line 455 
                          if (((unsigned long long)((int)chain->cell_size >> 6) & 9007199254740992ULL) == 0ULL) {
                            #line 455 
                            if (((unsigned long long)((int)chain->cell_size >> 6) & 4503599627370496ULL) == 0ULL) {
                              #line 455 
                              if (((unsigned long long)((int)chain->cell_size >> 6) & 2251799813685248ULL) == 0ULL) {
                                #line 455 
                                if (((unsigned long long)((int)chain->cell_size >> 6) & 1125899906842624ULL) == 0ULL) {
                                  #line 455 
                                  if (((unsigned long long)((int)chain->cell_size >> 6) & 562949953421312ULL) == 0ULL) {
                                    #line 455 
                                    if (((unsigned long long)((int)chain->cell_size >> 6) & 281474976710656ULL) == 0ULL) {
                                      #line 455 
                                      if (((unsigned long long)((int)chain->cell_size >> 6) & 140737488355328ULL) == 0ULL) {
                                        #line 455 
                                        if (((unsigned long long)((int)chain->cell_size >> 6) & 70368744177664ULL) == 0ULL) {
                                          #line 455 
                                          if (((unsigned long long)((int)chain->cell_size >> 6) & 35184372088832ULL) == 0ULL) {
                                            #line 455 
                                            if (((unsigned long long)((int)chain->cell_size >> 6) & 17592186044416ULL) == 0ULL) {
                                              #line 455 
                                              if (((unsigned long long)((int)chain->cell_size >> 6) & 8796093022208ULL) == 0ULL) {
                                                #line 455 
                                                if (((unsigned long long)((int)chain->cell_size >> 6) & 4398046511104ULL) == 0ULL) {
                                                  #line 455 
                                                  if (((unsigned long long)((int)chain->cell_size >> 6) & 2199023255552ULL) == 0ULL) {
                                                    #line 455 
                                                    if (((unsigned long long)((int)chain->cell_size >> 6) & 1099511627776ULL) == 0ULL) {
                                                      #line 455 
                                                      if (((unsigned long long)((int)chain->cell_size >> 6) & 549755813888ULL) == 0ULL) {
                                                        #line 455 
                                                        if (((unsigned long long)((int)chain->cell_size >> 6) & 274877906944ULL) == 0ULL) {
                                                          #line 455 
                                                          if (((unsigned long long)((int)chain->cell_size >> 6) & 137438953472ULL) == 0ULL) {
                                                            #line 455 
                                                            if (((unsigned long long)((int)chain->cell_size >> 6) & 68719476736ULL) == 0ULL) {
                                                              #line 455 
                                                              if (((unsigned long long)((int)chain->cell_size >> 6) & 34359738368ULL) == 0ULL) {
                                                                #line 455 
                                                                if (((unsigned long long)((int)chain->cell_size >> 6) & 17179869184ULL) == 0ULL) {
                                                                  #line 455 
                                                                  if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 8589934592ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 4294967296ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 2147483648ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 1073741824ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 536870912ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 268435456ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 134217728ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 67108864ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 33554432ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 16777216ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 8388608ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 4194304ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 2097152ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 1048576ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 524288ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 262144ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 131072ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 65536ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 32768ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 16384ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 8192ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 4096ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 2048ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 1024ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 512ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 256ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 128ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 64ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 32ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 16ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 8ULL) == 0ULL) {
                                                                    #line 455 
                                                                    if (
                                                                    ((unsigned long long)((int)chain->cell_size >> 6) & 4ULL) != 0ULL) 
                                                                    #line 455 
                                                                    tmp = 2U; else 
                                                                    #line 455 
                                                                    tmp = 1U;
                                                                    #line 455 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_0 = 3U;
                                                                    #line 455 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_1 = 4U;
                                                                    #line 455 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_2 = 5U;
                                                                    #line 455 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_3 = 6U;
                                                                    #line 455 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_4 = 7U;
                                                                    #line 455 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_5 = 8U;
                                                                    #line 455 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_6 = 9U;
                                                                    #line 455 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_7 = 10U;
                                                                    #line 455 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_8 = 11U;
                                                                    #line 455 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_9 = 12U;
                                                                    #line 455 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_10 = 13U;
                                                                    #line 455 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_11 = 14U;
                                                                    #line 455 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_12 = 15U;
                                                                    #line 455 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_13 = 16U;
                                                                    #line 455 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_14 = 17U;
                                                                    #line 455 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_15 = 18U;
                                                                    #line 455 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_16 = 19U;
                                                                    #line 455 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_17 = 20U;
                                                                    #line 455 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_18 = 21U;
                                                                    #line 455 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_19 = 22U;
                                                                    #line 455 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_20 = 23U;
                                                                    #line 455 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_21 = 24U;
                                                                    #line 455 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_22 = 25U;
                                                                    #line 455 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_23 = 26U;
                                                                    #line 455 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_24 = 27U;
                                                                    #line 455 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_25 = 28U;
                                                                    #line 455 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_26 = 29U;
                                                                    #line 455 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_27 = 30U;
                                                                    #line 455 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_28 = 31U;
                                                                    #line 455 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 455 
                                                                    tmp_29 = 32U;
                                                                    #line 455 
                                                                    tmp_30 = tmp_29;
                                                                  }
                                                                  else 
                                                                    #line 455 
                                                                    tmp_30 = 33U;
                                                                  #line 455 
                                                                  tmp_31 = tmp_30;
                                                                }
                                                                else 
                                                                  #line 455 
                                                                  tmp_31 = 34U;
                                                                #line 455 
                                                                tmp_32 = tmp_31;
                                                              }
                                                              else 
                                                                   #line 455 
                                                                   tmp_32 = 35U;
                                                              #line 455 
                                                              tmp_33 = tmp_32;
                                                            }
                                                            else 
                                                                 #line 455 
                                                                 tmp_33 = 36U;
                                                            #line 455 
                                                            tmp_34 = tmp_33;
                                                          }
                                                          else 
                                                               #line 455 
                                                               tmp_34 = 37U;
                                                          #line 455 
                                                          tmp_35 = tmp_34;
                                                        }
                                                        else 
                                                             #line 455 
                                                             tmp_35 = 38U;
                                                        #line 455 
                                                        tmp_36 = tmp_35;
                                                      }
                                                      else 
                                                           #line 455 
                                                           tmp_36 = 39U;
                                                      #line 455 
                                                      tmp_37 = tmp_36;
                                                    }
                                                    else 
                                                         #line 455 
                                                         tmp_37 = 40U;
                                                    #line 455 
                                                    tmp_38 = tmp_37;
                                                  }
                                                  else 
                                                       #line 455 
                                                       tmp_38 = 41U;
                                                  #line 455 
                                                  tmp_39 = tmp_38;
                                                }
                                                else 
                                                     #line 455 
                                                     tmp_39 = 42U;
                                                #line 455 
                                                tmp_40 = tmp_39;
                                              }
                                              else 
                                                   #line 455 
                                                   tmp_40 = 43U;
                                              #line 455 
                                              tmp_41 = tmp_40;
                                            }
                                            else 
                                                 #line 455 
                                                 tmp_41 = 44U;
                                            #line 455 
                                            tmp_42 = tmp_41;
                                          }
                                          else 
                                               #line 455 
                                               tmp_42 = 45U;
                                          #line 455 
                                          tmp_43 = tmp_42;
                                        }
                                        else 
                                             #line 455 
                                             tmp_43 = 46U;
                                        #line 455 
                                        tmp_44 = tmp_43;
                                      }
                                      else 
                                           #line 455 
                                           tmp_44 = 47U;
                                      #line 455 
                                      tmp_45 = tmp_44;
                                    }
                                    else 
                                         #line 455 
                                         tmp_45 = 48U;
                                    #line 455 
                                    tmp_46 = tmp_45;
                                  }
                                  else 
                                       #line 455 
                                       tmp_46 = 49U;
                                  #line 455 
                                  tmp_47 = tmp_46;
                                }
                                else 
                                     #line 455 
                                     tmp_47 = 50U;
                                #line 455 
                                tmp_48 = tmp_47;
                              }
                              else 
                                   #line 455 
                                   tmp_48 = 51U;
                              #line 455 
                              tmp_49 = tmp_48;
                            }
                            else 
                                 #line 455 
                                 tmp_49 = 52U;
                            #line 455 
                            tmp_50 = tmp_49;
                          }
                          else 
                               #line 455 
                               tmp_50 = 53U;
                          #line 455 
                          tmp_51 = tmp_50;
                        }
                        else 
                             #line 455 
                             tmp_51 = 54U;
                        #line 455 
                        tmp_52 = tmp_51;
                      }
                      else 
                           #line 455 
                           tmp_52 = 55U;
                      #line 455 
                      tmp_53 = tmp_52;
                    }
                    else 
                         #line 455 
                         tmp_53 = 56U;
                    #line 455 
                    tmp_54 = tmp_53;
                  }
                  else 
                       #line 455 
                       tmp_54 = 57U;
                  #line 455 
                  tmp_55 = tmp_54;
                }
                else 
                     #line 455 
                     tmp_55 = 58U;
                #line 455 
                tmp_56 = tmp_55;
              }
              else 
                   #line 455 
                   tmp_56 = 59U;
              #line 455 
              tmp_57 = tmp_56;
            }
            else 
                 #line 455 
                 tmp_57 = 60U;
            #line 455 
            tmp_58 = tmp_57;
          }
          else 
               #line 455 
               tmp_58 = 61U;
          #line 455 
          tmp_59 = tmp_58;
        }
        else 
             #line 455 
             tmp_59 = 62U;
        #line 455 
        tmp_60 = tmp_59;
      }
      else 
           #line 455 
           tmp_60 = 63U;
      #line 455 
      tmp_61 = tmp_60;
    }
    else 
         #line 455 
         tmp_61 = 0U;
    #line 455 
    cell_size = (unsigned short)tmp_61;
  }
  else {
    #line 455 
    cell_size = (unsigned short)__ilog2_u32((unsigned int)((int)chain->cell_size >> 6));
  }
  #line 457 
  ctrl = hinic_hwif_read_reg(hwif,addr);
  #line 459 
  ctrl &= 268435433U;
  #line 465 
  ctrl = (((unsigned int)cell_size << 30) | ctrl) | 805306372U;
  #line 469 
  hinic_hwif_write_reg(hwif,addr,ctrl);
  #line 470 
  return;
}

#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_set_status_addr(struct hinic_api_cmd_chain *chain)
{
  #line 479 
  u32 addr;
  #line 479 
  u32 val;
  #line 478 
  struct hinic_hwif *hwif = chain->hwif;
  #line 481 
  addr = (unsigned int)chain->chain_type * 256U + 61448U;
  #line 482 
  val = (unsigned int)(chain->wb_status_paddr >> 32);
  #line 483 
  hinic_hwif_write_reg(hwif,addr,val);
  #line 485 
  addr = (unsigned int)chain->chain_type * 256U + 61452U;
  #line 486 
  val = (unsigned int)chain->wb_status_paddr;
  #line 487 
  hinic_hwif_write_reg(hwif,addr,val);
  #line 488 
  return;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_set_num_cells(struct hinic_api_cmd_chain *chain)
{
  #line 497 
  u32 addr;
  #line 497 
  u32 val;
  #line 496 
  struct hinic_hwif *hwif = chain->hwif;
  #line 499 
  addr = (unsigned int)chain->chain_type * 256U + 61456U;
  #line 500 
  val = chain->num_cells;
  #line 501 
  hinic_hwif_write_reg(hwif,addr,val);
  #line 502 
  return;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_head_init(struct hinic_api_cmd_chain *chain)
{
  #line 511 
  u32 addr;
  #line 511 
  u32 val;
  #line 510 
  struct hinic_hwif *hwif = chain->hwif;
  #line 513 
  addr = ((unsigned int)chain->chain_type + 240U) * 256U;
  #line 514 
  val = (unsigned int)(chain->head_cell_paddr >> 32);
  #line 515 
  hinic_hwif_write_reg(hwif,addr,val);
  #line 517 
  addr = (unsigned int)chain->chain_type * 256U + 61444U;
  #line 518 
  val = (unsigned int)chain->head_cell_paddr;
  #line 519 
  hinic_hwif_write_reg(hwif,addr,val);
  #line 520 
  return;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_chain_hw_clean(struct hinic_api_cmd_chain *chain)
{
  #line 529 
  u32 addr;
  #line 529 
  u32 ctrl;
  #line 528 
  struct hinic_hwif *hwif = chain->hwif;
  #line 531 
  addr = (unsigned int)chain->chain_type * 256U + 61460U;
  #line 533 
  ctrl = hinic_hwif_read_reg(hwif,addr);
  #line 534 
  ctrl &= 268435433U;
  #line 540 
  hinic_hwif_write_reg(hwif,addr,ctrl);
  #line 541 
  return;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int api_cmd_chain_hw_init(struct hinic_api_cmd_chain *chain)
{
  #line 553 
  int err;
  #line 551 
  struct hinic_hwif *hwif = chain->hwif;
  #line 552 
  struct pci_dev *pdev = hwif->pdev;
  #line 555 
  api_cmd_chain_hw_clean(chain);
  #line 557 
  api_cmd_set_status_addr(chain);
  #line 559 
  err = api_cmd_hw_restart(chain);
  #line 560 
  if (err != 0) {
    #line 561 
    _dev_err(& pdev->dev,(char *)"Failed to restart API CMD HW\n");
    #line 562 
    return err;
  }
  #line 565 
  api_cmd_ctrl_init(chain);
  #line 566 
  api_cmd_set_num_cells(chain);
  #line 567 
  api_cmd_head_init(chain);
  #line 568 
  return 0;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void free_cmd_buf(struct hinic_api_cmd_chain *chain, int cell_idx)
{
  #line 578 
  struct hinic_api_cmd_cell_ctxt *cell_ctxt;
  #line 579 
  struct hinic_hwif *hwif = chain->hwif;
  #line 580 
  struct pci_dev *pdev = hwif->pdev;
  #line 582 
  cell_ctxt = chain->cell_ctxt + (unsigned long)cell_idx;
  #line 584 
  dma_free_coherent(& pdev->dev,2048UL,(void *)cell_ctxt->api_cmd_vaddr,cell_ctxt->api_cmd_paddr);
  #line 587 
  return;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int alloc_cmd_buf(struct hinic_api_cmd_chain *chain, struct hinic_api_cmd_cell *cell, int cell_idx)
{
  #line 600 
  struct hinic_api_cmd_cell_ctxt *cell_ctxt;
  #line 603 
  dma_addr_t cmd_paddr;
  #line 604 
  u8 *cmd_vaddr;
  #line 601 
  struct hinic_hwif *hwif = chain->hwif;
  #line 602 
  struct pci_dev *pdev = hwif->pdev;
  #line 605 
  int err = 0;
  #line 607 
  cmd_vaddr = (u8 *)dma_alloc_coherent(& pdev->dev,2048UL,& cmd_paddr,3264U);
  #line 609 
  if (cmd_vaddr == (u8 *)0U) {
    #line 610 
    _dev_err(& pdev->dev,(char *)"Failed to allocate API CMD DMA memory\n");
    #line 611 
    return -12;
  }
  #line 614 
  cell_ctxt = chain->cell_ctxt + (unsigned long)cell_idx;
  #line 616 
  cell_ctxt->api_cmd_vaddr = cmd_vaddr;
  #line 617 
  cell_ctxt->api_cmd_paddr = cmd_paddr;
  #line 620 
  switch ((unsigned int)chain->chain_type) {
    #line 621 
    case (unsigned int)2: 
                          #line 621 
    ;
    #line 623 
    cell->__anonCompField_hinic_api_cmd_cell_69.write.hw_cmd_paddr = (u64)__builtin_bswap64((unsigned long)cmd_paddr);
    #line 624 
    break;
    #line 626 
    default: 
             #line 626 
    ;
    #line 627 
    _dev_err(& pdev->dev,(char *)"Unsupported API CMD chain type\n");
    #line 628 
    free_cmd_buf(chain,cell_idx);
    #line 629 
    err = -22;
    #line 630 
    break;
  }
  #line 633 
  return err;
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int api_cmd_create_cell(struct hinic_api_cmd_chain *chain, int cell_idx, struct hinic_api_cmd_cell *pre_node, struct hinic_api_cmd_cell **node_vaddr)
{
  #line 650 
  struct hinic_api_cmd_cell_ctxt *cell_ctxt;
  #line 653 
  struct hinic_api_cmd_cell *node;
  #line 654 
  dma_addr_t node_paddr;
  #line 655 
  int err;
  #line 651 
  struct hinic_hwif *hwif = chain->hwif;
  #line 652 
  struct pci_dev *pdev = hwif->pdev;
  #line 657 
  node = (struct hinic_api_cmd_cell *)dma_alloc_coherent(& pdev->dev,(unsigned long)chain->cell_size,& node_paddr,3264U);
  #line 659 
  if (node == (struct hinic_api_cmd_cell *)0) {
    #line 660 
    _dev_err(& pdev->dev,(char *)"Failed to allocate dma API CMD cell\n");
    #line 661 
    return -12;
  }
  #line 664 
  node->__anonCompField_hinic_api_cmd_cell_69.read.hw_wb_resp_paddr = 0ULL;
  #line 666 
  cell_ctxt = chain->cell_ctxt + (unsigned long)cell_idx;
  #line 667 
  cell_ctxt->cell_vaddr = node;
  #line 668 
  cell_ctxt->cell_paddr = node_paddr;
  #line 670 
  if (pre_node == (struct hinic_api_cmd_cell *)0) {
    #line 671 
    chain->head_cell_paddr = node_paddr;
    #line 672 
    chain->head_node = node;
  }
  else 
       #line 675 
       pre_node->next_cell_paddr = (u64)__builtin_bswap64((unsigned long)node_paddr);
  #line 678 
  switch ((unsigned int)chain->chain_type) {
    #line 679 
    case (unsigned int)2: 
                          #line 679 
    ;
    #line 680 
    err = alloc_cmd_buf(chain,node,cell_idx);
    #line 681 
    if (err != 0) {
      #line 682 
      _dev_err(& pdev->dev,(char *)"Failed to allocate cmd buffer\n");
      #line 683 
      goto err_alloc_cmd_buf;
    }
    #line 685 
    break;
    #line 687 
    default: 
             #line 687 
    ;
    #line 688 
    _dev_err(& pdev->dev,(char *)"Unsupported API CMD chain type\n");
    #line 689 
    err = -22;
    #line 690 
    goto err_alloc_cmd_buf;
  }
  #line 693 
  *node_vaddr = node;
  #line 694 
  return 0;
  #line 696 
  err_alloc_cmd_buf: 
                     #line 696 
  ;
  #line 697 
  dma_free_coherent(& pdev->dev,(unsigned long)chain->cell_size,(void *)node,node_paddr);
  #line 698 
  return err;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_destroy_cell(struct hinic_api_cmd_chain *chain, int cell_idx)
{
  #line 709 
  struct hinic_api_cmd_cell_ctxt *cell_ctxt;
  #line 712 
  struct hinic_api_cmd_cell *node;
  #line 713 
  dma_addr_t node_paddr;
  #line 714 
  size_t node_size;
  #line 710 
  struct hinic_hwif *hwif = chain->hwif;
  #line 711 
  struct pci_dev *pdev = hwif->pdev;
  #line 716 
  cell_ctxt = chain->cell_ctxt + (unsigned long)cell_idx;
  #line 718 
  node = cell_ctxt->cell_vaddr;
  #line 719 
  node_paddr = cell_ctxt->cell_paddr;
  #line 720 
  node_size = (unsigned long)chain->cell_size;
  #line 722 
  if (cell_ctxt->api_cmd_vaddr != (u8 *)0U) {
    #line 723 
    switch ((unsigned int)chain->chain_type) {
      #line 724 
      case (unsigned int)2: 
                            #line 724 
      ;
      #line 725 
      free_cmd_buf(chain,cell_idx);
      #line 726 
      break;
      #line 727 
      default: 
               #line 727 
      ;
      #line 728 
      _dev_err(& pdev->dev,(char *)"Unsupported API CMD chain type\n");
      #line 729 
      break;
    }
    #line 732 
    dma_free_coherent(& pdev->dev,node_size,(void *)node,node_paddr);
  }
  #line 734 
  return;
}

#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_destroy_cells(struct hinic_api_cmd_chain *chain, int num_cells)
{
  #line 745 
  int cell_idx;
  #line 747 
  cell_idx = 0;
  #line 747 
  while (cell_idx < num_cells) {
    #line 748 
    api_cmd_destroy_cell(chain,cell_idx);
    #line 747 
    cell_idx ++;
  }
  #line 749 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int api_cmd_create_cells(struct hinic_api_cmd_chain *chain)
{
  #line 762 
  int err;
  #line 762 
  int cell_idx;
  #line 759 
  struct hinic_api_cmd_cell *node = (struct hinic_api_cmd_cell *)0;
  #line 759 
  struct hinic_api_cmd_cell *pre_node = (struct hinic_api_cmd_cell *)0;
  #line 760 
  struct hinic_hwif *hwif = chain->hwif;
  #line 761 
  struct pci_dev *pdev = hwif->pdev;
  #line 764 
  cell_idx = 0;
  #line 764 
  while (chain->num_cells > (unsigned int)cell_idx) {
    #line 765 
    err = api_cmd_create_cell(chain,cell_idx,pre_node,& node);
    #line 766 
    if (err != 0) {
      #line 767 
      _dev_err(& pdev->dev,(char *)"Failed to create API CMD cell\n");
      #line 768 
      goto err_create_cell;
    }
    #line 771 
    pre_node = node;
    #line 764 
    cell_idx ++;
  }
  #line 775 
  node->next_cell_paddr = (u64)__builtin_bswap64((unsigned long)chain->head_cell_paddr);
  #line 778 
  chain->curr_node = chain->head_node;
  #line 779 
  return 0;
  #line 781 
  err_create_cell: 
                   #line 781 
  ;
  #line 782 
  api_cmd_destroy_cells(chain,cell_idx);
  #line 783 
  return err;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static int api_chain_init(struct hinic_api_cmd_chain *chain, struct hinic_api_cmd_chain_attr *attr)
{
  #line 798 
  size_t cell_ctxt_size;
  #line 796 
  struct hinic_hwif *hwif = attr->hwif;
  #line 797 
  struct pci_dev *pdev = hwif->pdev;
  #line 800 
  chain->hwif = hwif;
  #line 801 
  chain->chain_type = attr->chain_type;
  #line 802 
  chain->num_cells = attr->num_cells;
  #line 803 
  chain->cell_size = attr->cell_size;
  #line 805 
  chain->prod_idx = 0U;
  #line 806 
  chain->cons_idx = 0U;
  #line 808 
  sema_init(& chain->sem,1);
  #line 810 
  cell_ctxt_size = (unsigned long)chain->num_cells * 32UL;
  #line 811 
  chain->cell_ctxt = (struct hinic_api_cmd_cell_ctxt *)cif_devm_kzalloc_6(& pdev->dev,cell_ctxt_size,3264U);
  #line 812 
  if (chain->cell_ctxt == (struct hinic_api_cmd_cell_ctxt *)0) 
                                                               #line 813 
                                                               return -12;
  #line 815 
  chain->wb_status = (struct hinic_api_cmd_status *)dma_alloc_coherent(& pdev->dev,32UL,& chain->wb_status_paddr,3264U);
  #line 819 
  if (chain->wb_status == (struct hinic_api_cmd_status *)0) {
    #line 820 
    _dev_err(& pdev->dev,(char *)"Failed to allocate DMA wb status\n");
    #line 821 
    return -12;
  }
  #line 824 
  return 0;
}

#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_chain_free(struct hinic_api_cmd_chain *chain)
{
  #line 833 
  struct hinic_hwif *hwif = chain->hwif;
  #line 834 
  struct pci_dev *pdev = hwif->pdev;
  #line 836 
  dma_free_coherent(& pdev->dev,32UL,(void *)chain->wb_status,chain->wb_status_paddr);
  #line 838 
  return;
}

#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static struct hinic_api_cmd_chain *api_cmd_create_chain(struct hinic_api_cmd_chain_attr *attr)
{
  #line 851 
  struct hinic_api_cmd_chain *chain;
  #line 852 
  int err;
  #line 849 
  struct hinic_hwif *hwif = attr->hwif;
  #line 850 
  struct pci_dev *pdev = hwif->pdev;
  #line 854 
  if ((attr->num_cells & (attr->num_cells + 4294967295U)) != 0U) {
    #line 855 
    _dev_err(& pdev->dev,(char *)"Invalid number of cells, must be power of 2\n");
    #line 856 
    return (struct hinic_api_cmd_chain *)ERR_PTR_2(-22L);
  }
  #line 859 
  chain = (struct hinic_api_cmd_chain *)cif_devm_kzalloc_6(& pdev->dev,176UL,3264U);
  #line 860 
  if (chain == (struct hinic_api_cmd_chain *)0) {
    #line 861 
    return (struct hinic_api_cmd_chain *)ERR_PTR_2(-12L);
  }
  #line 863 
  err = api_chain_init(chain,attr);
  #line 864 
  if (err != 0) {
    #line 865 
    _dev_err(& pdev->dev,(char *)"Failed to initialize chain\n");
    #line 866 
    return (struct hinic_api_cmd_chain *)ERR_PTR_2((long)err);
  }
  #line 869 
  err = api_cmd_create_cells(chain);
  #line 870 
  if (err != 0) {
    #line 871 
    _dev_err(& pdev->dev,(char *)"Failed to create cells for API CMD chain\n");
    #line 872 
    goto err_create_cells;
  }
  #line 875 
  err = api_cmd_chain_hw_init(chain);
  #line 876 
  if (err != 0) {
    #line 877 
    _dev_err(& pdev->dev,(char *)"Failed to initialize chain HW\n");
    #line 878 
    goto err_chain_hw_init;
  }
  #line 881 
  return chain;
  #line 883 
  err_chain_hw_init: 
                     #line 883 
  ;
  #line 884 
  api_cmd_destroy_cells(chain,(int)chain->num_cells);
  #line 886 
  err_create_cells: 
                    #line 886 
  ;
  #line 887 
  api_chain_free(chain);
  #line 888 
  return (struct hinic_api_cmd_chain *)ERR_PTR_2((long)err);
}

#line 895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
static void api_cmd_destroy_chain(struct hinic_api_cmd_chain *chain)
{
  #line 897 
  api_cmd_chain_hw_clean(chain);
  #line 898 
  api_cmd_destroy_cells(chain,(int)chain->num_cells);
  #line 899 
  api_chain_free(chain);
  #line 900 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
int hinic_api_cmd_init(struct hinic_api_cmd_chain **chain, struct hinic_hwif *hwif)
{
  #line 912 
  enum hinic_api_cmd_chain_type type;
  #line 912 
  enum hinic_api_cmd_chain_type chain_type;
  #line 913 
  struct hinic_api_cmd_chain_attr attr;
  #line 915 
  size_t hw_cell_sz;
  #line 916 
  int err;
  #line 914 
  struct pci_dev *pdev = hwif->pdev;
  #line 918 
  hw_cell_sz = 40UL;
  #line 920 
  attr.hwif = hwif;
  #line 921 
  attr.num_cells = 32U;
  #line 922 
  if (hw_cell_sz > 63UL) {
    #line 922 
    attr.cell_size = (unsigned short)(1 << fls((unsigned int)hw_cell_sz + 4294967295U));
  }
  else 
       #line 922 
       attr.cell_size = (unsigned short)64U;
  #line 924 
  chain_type = HINIC_API_CMD_WRITE_TO_MGMT_CPU;
  #line 925 
  while (chain_type <= (unsigned int)HINIC_API_CMD_WRITE_TO_MGMT_CPU) {
    {
      #line 926 
      attr.chain_type = chain_type;
      #line 928 
      if (chain_type != (unsigned int)HINIC_API_CMD_WRITE_TO_MGMT_CPU) 
        #line 929 
        goto __Cont;
      #line 931 
      *(chain + (unsigned long)chain_type) = api_cmd_create_chain(& attr);
      #line 932 
      if ((int)IS_ERR_4((void *)*(chain + (unsigned long)chain_type)) != 0) {
        #line 933 
        _dev_err(& pdev->dev,(char *)"Failed to create chain %d\n",(unsigned int)chain_type);
        #line 935 
        err = (int)PTR_ERR_1((void *)*(chain + (unsigned long)chain_type));
        #line 936 
        goto err_create_chain;
      }
    }
    #line 925 
    __Cont: 
            #line 925 
    chain_type ++;
  }
  #line 940 
  return 0;
  #line 942 
  err_create_chain: 
                    #line 942 
  ;
  #line 943 
  type = HINIC_API_CMD_WRITE_TO_MGMT_CPU;
  #line 944 
  while (type < chain_type) {
    #line 945 
    if (type != (unsigned int)HINIC_API_CMD_WRITE_TO_MGMT_CPU) 
                                                               #line 946 
                                                               goto __Cont_0;
    #line 948 
    api_cmd_destroy_chain(*(chain + (unsigned long)type));
    #line 944 
    __Cont_0: 
              #line 944 
    type ++;
  }
  #line 951 
  return err;
}

#line 958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_api_cmd.c"
void hinic_api_cmd_free(struct hinic_api_cmd_chain **chain)
{
  #line 960 
  enum hinic_api_cmd_chain_type chain_type;
  #line 962 
  chain_type = HINIC_API_CMD_WRITE_TO_MGMT_CPU;
  #line 963 
  while (chain_type <= (unsigned int)HINIC_API_CMD_WRITE_TO_MGMT_CPU) {
    #line 964 
    if (chain_type != (unsigned int)HINIC_API_CMD_WRITE_TO_MGMT_CPU) 
      #line 965 
      goto __Cont;
    #line 967 
    api_cmd_destroy_chain(*(chain + (unsigned long)chain_type));
    #line 963 
    __Cont: 
            #line 963 
    chain_type ++;
  }
  #line 969 
  return;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static void *ERR_PTR_2(long error)
{
  #line 203 
  return ldv_err_ptr(error);
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static long PTR_ERR_1(void *ptr)
{
  #line 210 
  return ldv_ptr_err(ptr);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static bool IS_ERR_4(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_api_cmd.i.aux"
static void *cif_devm_kzalloc_6(struct device *dev, size_t size, gfp_t flags)
{
  #line 500 
  return ldv_devm_kzalloc(size,flags);
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_mgmt.i.aux"
static void *cif_devm_kzalloc_7(struct device *dev, size_t size, gfp_t flags);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
void hinic_register_mgmt_msg_cb(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod, void *handle, void (*callback)(void *, u8 , void *, u16 , void *, u16 *))
{
  #line 81 
  struct hinic_mgmt_cb *mgmt_cb = & pf_to_mgmt->mgmt_cb[(unsigned int)mod];
  #line 83 
  mgmt_cb->cb = callback;
  #line 84 
  mgmt_cb->handle = handle;
  #line 85 
  mgmt_cb->state = 1UL;
  #line 86 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
void hinic_unregister_mgmt_msg_cb(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod)
{
  #line 96 
  struct hinic_mgmt_cb *mgmt_cb = & pf_to_mgmt->mgmt_cb[(unsigned int)mod];
  #line 98 
  mgmt_cb->state &= 18446744073709551614UL;
  #line 100 
  while ((mgmt_cb->state & 2UL) != 0UL) 
                                        #line 101 
                                        schedule();
  #line 103 
  mgmt_cb->cb = (void (*)(void *, u8 , void *, u16 , void *, u16 *))0;
  #line 104 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static u64 prepare_header(struct hinic_pf_to_mgmt *pf_to_mgmt, u16 msg_len, enum hinic_mod_type mod, enum msg_ack_type ack_type, enum mgmt_direction_type direction, u16 cmd, u16 msg_id)
{
  #line 124 
  struct hinic_hwif *hwif = pf_to_mgmt->hwif;
  #line 136 
  return (((((((((unsigned long long)msg_len & 2047ULL) | (((unsigned long long)mod << 11) & 65535ULL)) | (((unsigned long long)ack_type << 22) & 4194304ULL)) | (((unsigned long long)direction << 31) & 4294967295ULL)) | (((unsigned long long)cmd << 32) & 1095216660480ULL)) | (((unsigned long long)hwif->attr.pci_intf_idx << 48) & 844424930131968ULL)) | (((unsigned long long)hwif->attr.pf_idx << 50) & 16888498602639360ULL)) | ((unsigned long long)msg_id << 54)) | 1076887552ULL;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static void prepare_mgmt_cmd(u8 *mgmt_cmd, u64 *header, u8 *msg, u16 msg_len)
{
  #line 149 
  memset((void *)mgmt_cmd,0,8UL);
  #line 151 
  mgmt_cmd += 8U;
  #line 152 
  memcpy((void *)mgmt_cmd,(void *)header,8UL);
  #line 154 
  mgmt_cmd += 8UL;
  #line 155 
  memcpy((void *)mgmt_cmd,(void *)msg,(unsigned long)msg_len);
  #line 156 
  return;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static u16 mgmt_msg_len(u16 msg_data_len)
{
  #line 167 
  u16 msg_len = (unsigned short)((unsigned int)msg_data_len + 16U);
  #line 169 
  if ((unsigned int)msg_len > 20U) 
                                   #line 170 
                                   msg_len = (unsigned short)(((unsigned int)((unsigned short)((unsigned int)msg_len + 65531U)) & 65520U) + 20U); else 
                                                                    #line 174 
                                                                    msg_len = (unsigned short)20U;
  #line 176 
  return msg_len;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static int send_msg_to_mgmt(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod, u8 cmd, u8 *data, u16 data_len, enum msg_ack_type ack_type, enum mgmt_direction_type direction, u16 resp_msg_id)
{
  #line 199 
  struct hinic_api_cmd_chain *chain;
  #line 200 
  u64 header;
  #line 201 
  u16 msg_id;
  #line 203 
  msg_id = pf_to_mgmt->sync_msg_id;
  #line 205 
  if (direction == (unsigned int)MGMT_RESP) 
                                            #line 206 
                                            header = prepare_header(pf_to_mgmt,(unsigned short)((int)data_len),mod,ack_type,direction,(unsigned short)((int)cmd),(unsigned short)((int)resp_msg_id));
  else {
    #line 209 
    pf_to_mgmt->sync_msg_id = (unsigned short)((unsigned int)((unsigned short)((unsigned int)pf_to_mgmt->sync_msg_id + 1U)) & 511U);
    #line 210 
    header = prepare_header(pf_to_mgmt,(unsigned short)((int)data_len),mod,ack_type,direction,(unsigned short)((int)cmd),(unsigned short)((int)msg_id));
  }
  #line 214 
  prepare_mgmt_cmd(pf_to_mgmt->sync_msg_buf,& header,data,(unsigned short)((int)data_len));
  #line 216 
  chain = pf_to_mgmt->cmd_chain[2];
  #line 217 
  ;
  #line 217 
  ;
  #line 217 
  return hinic_api_cmd_write(chain,(enum hinic_node_id)HINIC_NODE_ID_MGMT,
                            pf_to_mgmt->sync_msg_buf,
                            (unsigned short)((int)mgmt_msg_len((unsigned short)((int)data_len))));
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static int msg_to_mgmt_sync(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod, u8 cmd, u8 *buf_in, u16 in_size, u8 *buf_out, u16 *out_size, enum mgmt_direction_type direction, u16 resp_msg_id)
{
  #line 245 
  struct hinic_recv_msg *recv_msg;
  #line 246 
  struct completion *recv_done;
  #line 247 
  u16 msg_id;
  #line 248 
  int err;
  #line 243 
  struct hinic_hwif *hwif = pf_to_mgmt->hwif;
  #line 244 
  struct pci_dev *pdev = hwif->pdev;
  #line 251 
  down(& pf_to_mgmt->sync_msg_lock);
  #line 253 
  recv_msg = & pf_to_mgmt->recv_resp_msg_from_mgmt;
  #line 254 
  recv_done = & recv_msg->recv_done;
  #line 256 
  if ((unsigned int)resp_msg_id == 65535U) 
                                           #line 257 
                                           msg_id = pf_to_mgmt->sync_msg_id; else 
                                                                    #line 259 
                                                                    msg_id = resp_msg_id;
  #line 261 
  __init_completion(recv_done);
  #line 263 
  err = send_msg_to_mgmt(pf_to_mgmt,mod,(unsigned char)((int)cmd),buf_in,(unsigned short)((int)in_size),(enum msg_ack_type)MSG_ACK,direction,(unsigned short)((int)resp_msg_id));
  #line 265 
  if (err != 0) {
    #line 266 
    _dev_err(& pdev->dev,(char *)"Failed to send sync msg to mgmt\n");
    #line 267 
    goto unlock_sync_msg;
  }
  #line 270 
  if (wait_for_completion_timeout(recv_done,1000UL) == 0UL) {
    #line 271 
    _dev_err(& pdev->dev,(char *)"MGMT timeout, MSG id = %d\n",(int)msg_id);
    #line 272 
    err = -110;
    #line 273 
    goto unlock_sync_msg;
  }
  #line 275 
  ldv_inline_asm();
  #line 278 
  if ((int)recv_msg->msg_id != (int)msg_id) {
    #line 279 
    _dev_err(& pdev->dev,(char *)"incorrect MSG for id = %d\n",(int)msg_id);
    #line 280 
    err = -14;
    #line 281 
    goto unlock_sync_msg;
  }
  #line 284 
  if (buf_out != (u8 *)0U && (unsigned int)recv_msg->msg_len <= 2048U) {
    #line 285 
    memcpy((void *)buf_out,(void *)recv_msg->msg,(unsigned long)recv_msg->msg_len);
    #line 286 
    *out_size = recv_msg->msg_len;
  }
  #line 289 
  unlock_sync_msg: 
                   #line 289 
  ;
  #line 290 
  up(& pf_to_mgmt->sync_msg_lock);
  #line 291 
  return err;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static int msg_to_mgmt_async(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod, u8 cmd, u8 *buf_in, u16 in_size, enum mgmt_direction_type direction, u16 resp_msg_id)
{
  #line 312 
  int err;
  #line 315 
  down(& pf_to_mgmt->sync_msg_lock);
  #line 317 
  err = send_msg_to_mgmt(pf_to_mgmt,mod,(unsigned char)((int)cmd),buf_in,(unsigned short)((int)in_size),(enum msg_ack_type)MSG_NO_ACK,direction,(unsigned short)((int)resp_msg_id));
  #line 320 
  up(& pf_to_mgmt->sync_msg_lock);
  #line 321 
  return err;
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
int hinic_msg_to_mgmt(struct hinic_pf_to_mgmt *pf_to_mgmt, enum hinic_mod_type mod, u8 cmd, void *buf_in, u16 in_size, void *buf_out, u16 *out_size, enum hinic_mgmt_msg_type sync)
{
  #line 342 
  struct hinic_hwif *hwif = pf_to_mgmt->hwif;
  #line 343 
  struct pci_dev *pdev = hwif->pdev;
  #line 345 
  if (sync != (unsigned int)HINIC_MGMT_MSG_SYNC) {
    #line 346 
    _dev_err(& pdev->dev,(char *)"Invalid MGMT msg type\n");
    #line 347 
    return -22;
  }
  #line 350 
  if ((unsigned int)in_size > 2016U) {
    #line 351 
    _dev_err(& pdev->dev,(char *)"Invalid MGMT msg buffer size\n");
    #line 352 
    return -22;
  }
  #line 355 
  return msg_to_mgmt_sync(pf_to_mgmt,mod,(unsigned char)((int)cmd),(u8 *)buf_in,
                       (unsigned short)((int)in_size),(u8 *)buf_out,out_size,
                       (enum mgmt_direction_type)MGMT_DIRECT_SEND,
                       (unsigned short)65535);
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static void mgmt_recv_msg_handler(struct hinic_pf_to_mgmt *pf_to_mgmt, struct hinic_recv_msg *recv_msg)
{
  #line 383 
  unsigned long __ret;
  #line 371 
  struct hinic_mgmt_cb *mgmt_cb;
  #line 372 
  unsigned long cb_state;
  #line 368 
  struct hinic_hwif *hwif = pf_to_mgmt->hwif;
  #line 369 
  struct pci_dev *pdev = hwif->pdev;
  #line 370 
  u8 *buf_out = recv_msg->buf_out;
  #line 373 
  u16 out_size = (unsigned short)0U;
  #line 375 
  if (recv_msg->mod > (unsigned int)14) {
    #line 376 
    _dev_err(& pdev->dev,(char *)"Unknown MGMT MSG module = %d\n",(unsigned int)recv_msg->mod);
    #line 378 
    return;
  }
  #line 381 
  mgmt_cb = & pf_to_mgmt->mgmt_cb[(unsigned int)recv_msg->mod];
  {
    #line 383 
    unsigned long *__ai_ptr = & mgmt_cb->state;
    #line 383 
    kasan_check_read((void *)__ai_ptr,8U);
    {
      #line 383 
      unsigned long __old = 1UL;
      #line 383 
      unsigned long __new = 3UL;
      #line 383 
      switch (8UL) {
        #line 383 
        case (unsigned long)1: 
                               #line 383 
        ;
        {
          #line 383 
          u8 *__ptr = (u8 *)__ai_ptr;
          #line 384 
          ldv_inline_asm();
          #line 383 
          break;
        }
        #line 383 
        case (unsigned long)2: 
                               #line 383 
        ;
        {
          #line 383 
          u16 *__ptr_0 = (u16 *)__ai_ptr;
          #line 384 
          ldv_inline_asm();
          #line 383 
          break;
        }
        #line 383 
        case (unsigned long)4: 
                               #line 383 
        ;
        {
          #line 383 
          u32 *__ptr_1 = (u32 *)__ai_ptr;
          #line 384 
          ldv_inline_asm();
          #line 383 
          break;
        }
        #line 383 
        case (unsigned long)8: 
                               #line 383 
        ;
        {
          #line 383 
          u64 *__ptr_2 = (u64 *)__ai_ptr;
          #line 384 
          ldv_inline_asm();
          #line 383 
          break;
        }
        #line 383 
        default: 
                 #line 383 
        ;
        #line 383 
        __cmpxchg_wrong_size();
      }
      }
    }
  #line 383 
  cb_state = __ret;
  #line 387 
  if (cb_state == 1UL && mgmt_cb->cb != (void (*)(void *, u8 , void *, u16 , void *, u16 *))0) 
    #line 388 
    (*(mgmt_cb->cb))(mgmt_cb->handle,(unsigned char)((int)((unsigned char)recv_msg->cmd)),(void *)recv_msg->msg,(unsigned short)((int)recv_msg->msg_len),(void *)buf_out,& out_size); else 
                                                                    #line 392 
                                                                    _dev_err(& pdev->dev,(char *)"No MGMT msg handler, mod = %d\n",(unsigned int)recv_msg->mod);
  #line 395 
  mgmt_cb->state &= 18446744073709551613UL;
  #line 397 
  if (recv_msg->async_mgmt_to_pf == 0) 
                                       #line 399 
                                       msg_to_mgmt_async(pf_to_mgmt,recv_msg->mod,(unsigned char)((int)((unsigned char)recv_msg->cmd)),buf_out,(unsigned short)((int)out_size),(enum mgmt_direction_type)MGMT_RESP,(unsigned short)((int)recv_msg->msg_id));
  #line 402 
  return;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static void mgmt_resp_msg_handler(struct hinic_pf_to_mgmt *pf_to_mgmt, struct hinic_recv_msg *recv_msg)
{
  #line 411 
  ldv_inline_asm();
  #line 414 
  complete(& recv_msg->recv_done);
  #line 415 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static void recv_mgmt_msg_handler(struct hinic_pf_to_mgmt *pf_to_mgmt, u64 *header, struct hinic_recv_msg *recv_msg)
{
  #line 428 
  int seq_id;
  #line 428 
  int seg_len;
  #line 429 
  u8 *msg_body;
  #line 426 
  struct hinic_hwif *hwif = pf_to_mgmt->hwif;
  #line 427 
  struct pci_dev *pdev = hwif->pdev;
  #line 431 
  seq_id = (int)(*header >> 24) & 63;
  #line 432 
  seg_len = (int)(*header >> 16) & 63;
  #line 434 
  if (seq_id > 41) {
    #line 435 
    _dev_err(& pdev->dev,(char *)"recv big mgmt msg\n");
    #line 436 
    return;
  }
  #line 439 
  msg_body = (u8 *)header + 8UL;
  #line 440 
  memcpy((void *)(recv_msg->msg + (unsigned long)(seq_id * 48)),(void *)msg_body,(unsigned long)seg_len);
  #line 442 
  if ((*header & 1073741824ULL) == 0ULL) 
                                         #line 443 
                                         return;
  #line 445 
  recv_msg->cmd = (unsigned short)((unsigned int)((unsigned short)(*header >> 32)) & 255U);
  #line 446 
  recv_msg->mod = (enum hinic_mod_type)((unsigned int)(*header >> 11) & 31U);
  #line 447 
  recv_msg->async_mgmt_to_pf = (int)(*header >> 23) & 1;
  #line 449 
  recv_msg->msg_len = (unsigned short)((unsigned int)((unsigned short)*header) & 2047U);
  #line 450 
  recv_msg->msg_id = (unsigned short)(*header >> 54);
  #line 452 
  if ((*header & 2147483648ULL) != 0ULL) 
                                         #line 453 
                                         mgmt_resp_msg_handler(pf_to_mgmt,recv_msg); else 
                                                                    #line 455 
                                                                    mgmt_recv_msg_handler(pf_to_mgmt,recv_msg);
  #line 456 
  return;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static void mgmt_msg_aeqe_handler(void *handle, void *data, u8 size)
{
  #line 467 
  struct hinic_recv_msg *recv_msg;
  #line 466 
  struct hinic_pf_to_mgmt *pf_to_mgmt = (struct hinic_pf_to_mgmt *)handle;
  #line 468 
  u64 *header = (u64 *)data;
  #line 470 
  if ((*header & 2147483648ULL) == 0ULL) 
                                         #line 470 
                                         recv_msg = & pf_to_mgmt->recv_msg_from_mgmt; else 
                                                                    #line 470 
                                                                    recv_msg = & pf_to_mgmt->recv_resp_msg_from_mgmt;
  #line 475 
  recv_mgmt_msg_handler(pf_to_mgmt,header,recv_msg);
  #line 476 
  return;
}

#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static int alloc_recv_msg(struct hinic_pf_to_mgmt *pf_to_mgmt, struct hinic_recv_msg *recv_msg)
{
  #line 488 
  struct hinic_hwif *hwif = pf_to_mgmt->hwif;
  #line 489 
  struct pci_dev *pdev = hwif->pdev;
  #line 491 
  recv_msg->msg = (u8 *)cif_devm_kzalloc_7(& pdev->dev,2048UL,3264U);
  #line 493 
  if (recv_msg->msg == (u8 *)0U) 
                                 #line 494 
                                 return -12;
  #line 496 
  recv_msg->buf_out = (u8 *)cif_devm_kzalloc_7(& pdev->dev,2048UL,3264U);
  #line 498 
  if (recv_msg->buf_out == (u8 *)0U) 
                                     #line 499 
                                     return -12;
  #line 501 
  return 0;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
static int alloc_msg_buf(struct hinic_pf_to_mgmt *pf_to_mgmt)
{
  #line 514 
  int err;
  #line 512 
  struct hinic_hwif *hwif = pf_to_mgmt->hwif;
  #line 513 
  struct pci_dev *pdev = hwif->pdev;
  #line 516 
  err = alloc_recv_msg(pf_to_mgmt,& pf_to_mgmt->recv_msg_from_mgmt);
  #line 518 
  if (err != 0) {
    #line 519 
    _dev_err(& pdev->dev,(char *)"Failed to allocate recv msg\n");
    #line 520 
    return err;
  }
  #line 523 
  err = alloc_recv_msg(pf_to_mgmt,& pf_to_mgmt->recv_resp_msg_from_mgmt);
  #line 525 
  if (err != 0) {
    #line 526 
    _dev_err(& pdev->dev,(char *)"Failed to allocate resp recv msg\n");
    #line 527 
    return err;
  }
  #line 530 
  pf_to_mgmt->sync_msg_buf = (u8 *)cif_devm_kzalloc_7(& pdev->dev,2048UL,3264U);
  #line 533 
  if (pf_to_mgmt->sync_msg_buf == (u8 *)0U) 
                                            #line 534 
                                            return -12;
  #line 536 
  return 0;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
int hinic_pf_to_mgmt_init(struct hinic_pf_to_mgmt *pf_to_mgmt, struct hinic_hwif *hwif)
{
  #line 549 
  void *__mptr;
  #line 552 
  int err;
  #line 549 
  __mptr = (void *)pf_to_mgmt;
  #line 549 
  struct hinic_pfhwdev *pfhwdev = ((struct hinic_pfhwdev *)(__mptr + 18446744073709539568U));
  #line 550 
  struct hinic_hwdev *hwdev = & pfhwdev->hwdev;
  #line 551 
  struct pci_dev *pdev = hwif->pdev;
  #line 554 
  pf_to_mgmt->hwif = hwif;
  #line 556 
  sema_init(& pf_to_mgmt->sync_msg_lock,1);
  #line 557 
  pf_to_mgmt->sync_msg_id = (unsigned short)0U;
  #line 559 
  err = alloc_msg_buf(pf_to_mgmt);
  #line 560 
  if (err != 0) {
    #line 561 
    _dev_err(& pdev->dev,(char *)"Failed to allocate msg buffers\n");
    #line 562 
    return err;
  }
  #line 565 
  err = hinic_api_cmd_init((struct hinic_api_cmd_chain **)(& pf_to_mgmt->cmd_chain),hwif);
  #line 566 
  if (err != 0) {
    #line 567 
    _dev_err(& pdev->dev,(char *)"Failed to initialize cmd chains\n");
    #line 568 
    return err;
  }
  #line 571 
  hinic_aeq_register_hw_cb(& hwdev->aeqs,(enum hinic_aeq_type)HINIC_MSG_FROM_MGMT_CPU,(void *)pf_to_mgmt,& mgmt_msg_aeqe_handler);
  #line 574 
  return 0;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/huawei/hinic/hinic_hw_mgmt.c"
void hinic_pf_to_mgmt_free(struct hinic_pf_to_mgmt *pf_to_mgmt)
{
  #line 583 
  void *__mptr;
  #line 583 
  __mptr = (void *)pf_to_mgmt;
  #line 583 
  struct hinic_pfhwdev *pfhwdev = ((struct hinic_pfhwdev *)(__mptr + 18446744073709539568U));
  #line 584 
  struct hinic_hwdev *hwdev = & pfhwdev->hwdev;
  #line 586 
  hinic_aeq_unregister_hw_cb(& hwdev->aeqs,(enum hinic_aeq_type)HINIC_MSG_FROM_MGMT_CPU);
  #line 587 
  hinic_api_cmd_free((struct hinic_api_cmd_chain **)(& pf_to_mgmt->cmd_chain));
  #line 588 
  return;
}

#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/0/concurrency safety/weaver/hinic_hw_mgmt.i.aux"
static void *cif_devm_kzalloc_7(struct device *dev, size_t size, gfp_t flags)
{
  #line 500 
  return ldv_devm_kzalloc(size,flags);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 81  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
#line 232 
void emg_dispatch_deregister_12(struct net_device *arg0);
#line 82 
#line 159 
void emg_dispatch_deregister_6(struct pci_driver *arg0);
#line 83 
#line 126 
void emg_dispatch_irq_deregister_4(int arg0);
#line 84 
#line 179 
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 85 
#line 115 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 86 
#line 168 
void emg_dispatch_register_8(struct net_device *arg0);
#line 87 
#line 1285 
void *emg_entry_point_insmod(void *arg0);
#line 90 
#line 241 
void *emg_interrupt_interrupt_scenario_aeq_interrupt(void *arg0);
#line 91 
#line 304 
void *emg_interrupt_interrupt_scenario_ceq_interrupt(void *arg0);
#line 92 
#line 367 
void *emg_interrupt_interrupt_scenario_rx_irq(void *arg0);
#line 93 
#line 430 
void *emg_interrupt_interrupt_scenario_tx_irq(void *arg0);
#line 94 
#line 493 
void *emg_net_random_allocationless_scenario_hinic_get_channels(void *arg0);
#line 95 
#line 836 
void *emg_pci_pci_scenario_hinic_driver(void *arg0);
#line 103 
#line 1314 
int main(void);
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 116 
  int ret;
  #line 117 
  struct emg_struct_pci_scenario_hinic_driver_18 *cf_arg_18;
  #line 118 
  cf_arg_18 = (struct emg_struct_pci_scenario_hinic_driver_18 *)ldv_xmalloc(16UL);
  #line 119 
  cf_arg_18->arg0 = arg0;
  #line 120 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_pci_pci_scenario_hinic_driver,(void *)cf_arg_18);
  #line 121 
  __VERIFIER_assume(ret == 0);
  #line 122 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_4(int arg0)
{
  #line 127 
  int ret;
  #line 128 
  struct emg_struct_free_irq_4 *cf_arg_13;
  #line 129 
  struct emg_struct_free_irq_4 *cf_arg_14;
  #line 130 
  struct emg_struct_free_irq_4 *cf_arg_15;
  #line 131 
  struct emg_struct_free_irq_4 *cf_arg_16;
  #line 132 
  switch (ldv_undef_int()) {
    #line 133 
    case 0: 
            #line 133 
    ;
    #line 134 
    ret = pthread_join(emg_thread_13,(void **)0);
    #line 135 
    __VERIFIER_assume(ret == 0);
    #line 136 
    break;
    #line 138 
    case 1: 
            #line 138 
    ;
    #line 139 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 140 
    __VERIFIER_assume(ret == 0);
    #line 141 
    break;
    #line 143 
    case 2: 
            #line 143 
    ;
    #line 144 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 145 
    __VERIFIER_assume(ret == 0);
    #line 146 
    break;
    #line 148 
    case 3: 
            #line 148 
    ;
    #line 149 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 150 
    __VERIFIER_assume(ret == 0);
    #line 151 
    break;
    #line 153 
    default: 
             #line 153 
    ;
    #line 153 
    __VERIFIER_assume(0);
  }
  #line 155 
  return;
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct pci_driver *arg0)
{
  #line 160 
  int ret;
  #line 161 
  struct emg_struct_pci_scenario_hinic_driver_18 *cf_arg_18;
  #line 162 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 163 
  __VERIFIER_assume(ret == 0);
  #line 164 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_8(struct net_device *arg0)
{
  #line 169 
  int ret;
  #line 170 
  struct emg_struct_random_allocationless_scenario_hinic_get_channels_17 *cf_arg_17;
  #line 171 
  cf_arg_17 = (struct emg_struct_random_allocationless_scenario_hinic_get_channels_17 *)ldv_xmalloc(16UL);
  #line 172 
  cf_arg_17->arg0 = arg0;
  #line 173 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_hinic_get_channels,(void *)cf_arg_17);
  #line 174 
  __VERIFIER_assume(ret == 0);
  #line 175 
  return;
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 180 
  int ret;
  #line 181 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *cf_arg_13;
  #line 182 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *cf_arg_14;
  #line 183 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *cf_arg_15;
  #line 184 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *cf_arg_16;
  #line 185 
  switch (ldv_undef_int()) {
    #line 186 
    case 0: 
            #line 186 
    ;
    #line 187 
    cf_arg_13 = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)ldv_xmalloc(40UL);
    #line 188 
    cf_arg_13->arg0 = arg0;
    #line 189 
    cf_arg_13->arg1 = arg1;
    #line 190 
    cf_arg_13->arg2 = arg2;
    #line 191 
    cf_arg_13->arg3 = arg3;
    #line 192 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_aeq_interrupt,(void *)cf_arg_13);
    #line 193 
    __VERIFIER_assume(ret == 0);
    #line 194 
    break;
    #line 196 
    case 1: 
            #line 196 
    ;
    #line 197 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)ldv_xmalloc(40UL);
    #line 198 
    cf_arg_14->arg0 = arg0;
    #line 199 
    cf_arg_14->arg1 = arg1;
    #line 200 
    cf_arg_14->arg2 = arg2;
    #line 201 
    cf_arg_14->arg3 = arg3;
    #line 202 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_ceq_interrupt,(void *)cf_arg_14);
    #line 203 
    __VERIFIER_assume(ret == 0);
    #line 204 
    break;
    #line 206 
    case 2: 
            #line 206 
    ;
    #line 207 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)ldv_xmalloc(40UL);
    #line 208 
    cf_arg_15->arg0 = arg0;
    #line 209 
    cf_arg_15->arg1 = arg1;
    #line 210 
    cf_arg_15->arg2 = arg2;
    #line 211 
    cf_arg_15->arg3 = arg3;
    #line 212 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_rx_irq,(void *)cf_arg_15);
    #line 213 
    __VERIFIER_assume(ret == 0);
    #line 214 
    break;
    #line 216 
    case 3: 
            #line 216 
    ;
    #line 217 
    cf_arg_16 = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)ldv_xmalloc(40UL);
    #line 218 
    cf_arg_16->arg0 = arg0;
    #line 219 
    cf_arg_16->arg1 = arg1;
    #line 220 
    cf_arg_16->arg2 = arg2;
    #line 221 
    cf_arg_16->arg3 = arg3;
    #line 222 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_tx_irq,(void *)cf_arg_16);
    #line 223 
    __VERIFIER_assume(ret == 0);
    #line 224 
    break;
    #line 226 
    default: 
             #line 226 
    ;
    #line 226 
    __VERIFIER_assume(0);
  }
  #line 228 
  return;
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct net_device *arg0)
{
  #line 233 
  int ret;
  #line 234 
  struct emg_struct_random_allocationless_scenario_hinic_get_channels_17 *cf_arg_17;
  #line 235 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 236 
  __VERIFIER_assume(ret == 0);
  #line 237 
  return;
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_aeq_interrupt(void *arg0)
{
  #line 244 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 245 
  void *emg_13_data;
  #line 246 
  int emg_13_line;
  #line 247 
  enum irqreturn emg_13_ret_val;
  #line 248 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 250 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *data = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)arg0;
  #line 253 
  emg_13_callback = & emg_wrapper_aeq_interrupt;
  #line 256 
  if (data != (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)0) {
    #line 257 
    emg_13_line = data->arg0;
    #line 258 
    emg_13_callback = data->arg1;
    #line 259 
    emg_13_thread = data->arg2;
    #line 260 
    emg_13_data = data->arg3;
    #line 261 
    ldv_free((void *)data);
  }
  #line 267 
  ldv_switch_to_interrupt_context();
  #line 271 
  emg_13_ret_val = emg_wrapper_aeq_interrupt(emg_13_line,emg_13_data);
  #line 276 
  ldv_switch_to_process_context();
  #line 279 
  if (ldv_undef_int() != 0) {
    #line 281 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 285 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 286 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 291 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 299 
  return (void *)0;
}

#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_ceq_interrupt(void *arg0)
{
  #line 307 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 308 
  void *emg_14_data;
  #line 309 
  int emg_14_line;
  #line 310 
  enum irqreturn emg_14_ret_val;
  #line 311 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 313 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *data = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)arg0;
  #line 316 
  emg_14_callback = & emg_wrapper_ceq_interrupt;
  #line 319 
  if (data != (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)0) {
    #line 320 
    emg_14_line = data->arg0;
    #line 321 
    emg_14_callback = data->arg1;
    #line 322 
    emg_14_thread = data->arg2;
    #line 323 
    emg_14_data = data->arg3;
    #line 324 
    ldv_free((void *)data);
  }
  #line 330 
  ldv_switch_to_interrupt_context();
  #line 334 
  emg_14_ret_val = emg_wrapper_ceq_interrupt(emg_14_line,emg_14_data);
  #line 339 
  ldv_switch_to_process_context();
  #line 342 
  if (ldv_undef_int() != 0) {
    #line 344 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 348 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 349 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 354 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 362 
  return (void *)0;
}

#line 367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_rx_irq(void *arg0)
{
  #line 370 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 371 
  void *emg_15_data;
  #line 372 
  int emg_15_line;
  #line 373 
  enum irqreturn emg_15_ret_val;
  #line 374 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 376 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *data = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)arg0;
  #line 379 
  emg_15_callback = & emg_wrapper_rx_irq;
  #line 382 
  if (data != (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)0) {
    #line 383 
    emg_15_line = data->arg0;
    #line 384 
    emg_15_callback = data->arg1;
    #line 385 
    emg_15_thread = data->arg2;
    #line 386 
    emg_15_data = data->arg3;
    #line 387 
    ldv_free((void *)data);
  }
  #line 393 
  ldv_switch_to_interrupt_context();
  #line 397 
  emg_15_ret_val = emg_wrapper_rx_irq(emg_15_line,emg_15_data);
  #line 402 
  ldv_switch_to_process_context();
  #line 405 
  if (ldv_undef_int() != 0) {
    #line 407 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 411 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 412 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 417 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 425 
  return (void *)0;
}

#line 430  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_tx_irq(void *arg0)
{
  #line 433 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 434 
  void *emg_16_data;
  #line 435 
  int emg_16_line;
  #line 436 
  enum irqreturn emg_16_ret_val;
  #line 437 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 439 
  struct emg_struct_interrupt_scenario_aeq_interrupt_13 *data = (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)arg0;
  #line 442 
  emg_16_callback = & emg_wrapper_tx_irq;
  #line 445 
  if (data != (struct emg_struct_interrupt_scenario_aeq_interrupt_13 *)0) {
    #line 446 
    emg_16_line = data->arg0;
    #line 447 
    emg_16_callback = data->arg1;
    #line 448 
    emg_16_thread = data->arg2;
    #line 449 
    emg_16_data = data->arg3;
    #line 450 
    ldv_free((void *)data);
  }
  #line 456 
  ldv_switch_to_interrupt_context();
  #line 460 
  emg_16_ret_val = emg_wrapper_tx_irq(emg_16_line,emg_16_data);
  #line 465 
  ldv_switch_to_process_context();
  #line 468 
  if (ldv_undef_int() != 0) {
    #line 470 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 474 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 475 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 480 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 488 
  return (void *)0;
}

#line 493  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_hinic_get_channels(void *arg0)
{
  #line 496 
  struct net_device *emg_17_container;
  #line 497 
  struct sk_buff *emg_17_emg_param_0_19;
  #line 498 
  struct ethtool_channels *emg_17_emg_param_1_0;
  #line 499 
  struct ethtool_drvinfo *emg_17_emg_param_1_1;
  #line 500 
  int emg_17_emg_param_1_11;
  #line 501 
  unsigned int emg_17_emg_param_1_12;
  #line 502 
  int emg_17_emg_param_1_14;
  #line 503 
  unsigned long long emg_17_emg_param_1_15;
  #line 504 
  struct rtnl_link_stats64 *emg_17_emg_param_1_16;
  #line 505 
  unsigned long long emg_17_emg_param_1_17;
  #line 506 
  void *emg_17_emg_param_1_18;
  #line 507 
  struct ethtool_stats *emg_17_emg_param_1_2;
  #line 508 
  unsigned short emg_17_emg_param_1_20;
  #line 509 
  unsigned short emg_17_emg_param_1_22;
  #line 510 
  unsigned int *emg_17_emg_param_1_24;
  #line 511 
  struct ethtool_rxnfc *emg_17_emg_param_1_27;
  #line 512 
  struct ethtool_link_ksettings *emg_17_emg_param_1_4;
  #line 513 
  struct ethtool_ringparam *emg_17_emg_param_1_5;
  #line 514 
  unsigned int *emg_17_emg_param_1_6;
  #line 515 
  struct ethtool_rxnfc *emg_17_emg_param_1_9;
  #line 516 
  unsigned int *emg_17_emg_param_2_10;
  #line 517 
  unsigned char *emg_17_emg_param_2_13;
  #line 518 
  unsigned short emg_17_emg_param_2_21;
  #line 519 
  unsigned short emg_17_emg_param_2_23;
  #line 520 
  unsigned char *emg_17_emg_param_2_25;
  #line 521 
  unsigned long long *emg_17_emg_param_2_3;
  #line 522 
  unsigned char *emg_17_emg_param_2_7;
  #line 523 
  unsigned char emg_17_emg_param_3_26;
  #line 524 
  unsigned char *emg_17_emg_param_3_8;
  #line 525 
  int emg_repeat_cnt_call_17 = 1;
  #line 527 
  struct emg_struct_random_allocationless_scenario_hinic_get_channels_17 *data = (struct emg_struct_random_allocationless_scenario_hinic_get_channels_17 *)arg0;
  #line 532 
  if (data != (struct emg_struct_random_allocationless_scenario_hinic_get_channels_17 *)0) {
    #line 533 
    emg_17_container = data->arg0;
    #line 534 
    ldv_free((void *)data);
  }
  #line 539 
  goto emg_call_17;
  #line 543 
  return (void *)0;
  #line 546 
  emg_call_17: 
               #line 546 
  ;
  #line 547 
  switch (ldv_undef_int()) {
    #line 548 
    case 0: 
            #line 548 
    ;
    #line 550 
    emg_17_emg_param_1_27 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 550 
    emg_17_emg_param_1_27 = emg_17_emg_param_1_27;
    #line 554 
    emg_wrapper_hinic_set_rxnfc(emg_17_container,emg_17_emg_param_1_27);
    #line 558 
    ldv_free((void *)emg_17_emg_param_1_27);
    #line 560 
    break;
    #line 562 
    case 1: 
            #line 562 
    ;
    #line 564 
    emg_17_emg_param_1_24 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 564 
    emg_17_emg_param_1_24 = emg_17_emg_param_1_24;
    #line 565 
    emg_17_emg_param_2_25 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 565 
    emg_17_emg_param_2_25 = emg_17_emg_param_2_25;
    #line 569 
    emg_wrapper_hinic_set_rxfh(emg_17_container,emg_17_emg_param_1_24,emg_17_emg_param_2_25,(unsigned char)((int)emg_17_emg_param_3_26));
    #line 573 
    ldv_free((void *)emg_17_emg_param_1_24);
    #line 574 
    ldv_free((void *)emg_17_emg_param_2_25);
    #line 576 
    break;
    #line 578 
    case 2: 
            #line 578 
    ;
    #line 580 
    emg_wrapper_hinic_vlan_rx_kill_vid(emg_17_container,(unsigned short)((int)emg_17_emg_param_1_22),(unsigned short)((int)emg_17_emg_param_2_23));
    #line 582 
    break;
    #line 584 
    case 3: 
            #line 584 
    ;
    #line 586 
    emg_wrapper_hinic_vlan_rx_add_vid(emg_17_container,(unsigned short)((int)emg_17_emg_param_1_20),(unsigned short)((int)emg_17_emg_param_2_21));
    #line 588 
    break;
    #line 590 
    case 4: 
            #line 590 
    ;
    #line 592 
    (*emg_alias_eth_validate_addr)(emg_17_container);
    #line 594 
    break;
    #line 596 
    case 5: 
            #line 596 
    ;
    #line 598 
    emg_wrapper_hinic_tx_timeout(emg_17_container);
    #line 600 
    break;
    #line 602 
    case 6: 
            #line 602 
    ;
    #line 604 
    emg_17_emg_param_0_19 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 604 
    emg_17_emg_param_0_19 = emg_17_emg_param_0_19;
    #line 608 
    hinic_xmit_frame(emg_17_emg_param_0_19,emg_17_container);
    #line 612 
    ldv_free((void *)emg_17_emg_param_0_19);
    #line 614 
    break;
    #line 616 
    case 7: 
            #line 616 
    ;
    #line 618 
    emg_wrapper_hinic_set_rx_mode(emg_17_container);
    #line 620 
    break;
    #line 622 
    case 8: 
            #line 622 
    ;
    #line 624 
    emg_17_emg_param_1_18 = ldv_xmalloc_unknown_size(0UL);
    #line 624 
    emg_17_emg_param_1_18 = emg_17_emg_param_1_18;
    #line 628 
    emg_wrapper_hinic_set_mac_addr(emg_17_container,emg_17_emg_param_1_18);
    #line 632 
    ldv_free(emg_17_emg_param_1_18);
    #line 634 
    break;
    #line 636 
    case 9: 
            #line 636 
    ;
    #line 638 
    emg_wrapper_hinic_set_features(emg_17_container,emg_17_emg_param_1_17);
    #line 640 
    break;
    #line 642 
    case 10: 
             #line 642 
    ;
    #line 644 
    emg_17_emg_param_1_16 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 644 
    emg_17_emg_param_1_16 = emg_17_emg_param_1_16;
    #line 648 
    emg_wrapper_hinic_get_stats64(emg_17_container,emg_17_emg_param_1_16);
    #line 652 
    ldv_free((void *)emg_17_emg_param_1_16);
    #line 654 
    break;
    #line 656 
    case 11: 
             #line 656 
    ;
    #line 658 
    emg_wrapper_hinic_fix_features(emg_17_container,emg_17_emg_param_1_15);
    #line 660 
    break;
    #line 662 
    case 12: 
             #line 662 
    ;
    #line 664 
    emg_wrapper_hinic_change_mtu(emg_17_container,emg_17_emg_param_1_14);
    #line 666 
    break;
    #line 668 
    case 13: 
             #line 668 
    ;
    #line 670 
    emg_17_emg_param_2_13 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 670 
    emg_17_emg_param_2_13 = emg_17_emg_param_2_13;
    #line 674 
    emg_wrapper_hinic_get_strings(emg_17_container,emg_17_emg_param_1_12,emg_17_emg_param_2_13);
    #line 678 
    ldv_free((void *)emg_17_emg_param_2_13);
    #line 680 
    break;
    #line 682 
    case 14: 
             #line 682 
    ;
    #line 684 
    emg_wrapper_hinic_get_sset_count(emg_17_container,emg_17_emg_param_1_11);
    #line 686 
    break;
    #line 688 
    case 15: 
             #line 688 
    ;
    #line 690 
    emg_17_emg_param_1_9 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 690 
    emg_17_emg_param_1_9 = emg_17_emg_param_1_9;
    #line 691 
    emg_17_emg_param_2_10 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 691 
    emg_17_emg_param_2_10 = emg_17_emg_param_2_10;
    #line 695 
    emg_wrapper_hinic_get_rxnfc(emg_17_container,emg_17_emg_param_1_9,emg_17_emg_param_2_10);
    #line 699 
    ldv_free((void *)emg_17_emg_param_1_9);
    #line 700 
    ldv_free((void *)emg_17_emg_param_2_10);
    #line 702 
    break;
    #line 704 
    case 16: 
             #line 704 
    ;
    #line 706 
    emg_wrapper_hinic_get_rxfh_key_size(emg_17_container);
    #line 708 
    break;
    #line 710 
    case 17: 
             #line 710 
    ;
    #line 712 
    emg_wrapper_hinic_get_rxfh_indir_size(emg_17_container);
    #line 714 
    break;
    #line 716 
    case 18: 
             #line 716 
    ;
    #line 718 
    emg_17_emg_param_1_6 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 718 
    emg_17_emg_param_1_6 = emg_17_emg_param_1_6;
    #line 719 
    emg_17_emg_param_2_7 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 719 
    emg_17_emg_param_2_7 = emg_17_emg_param_2_7;
    #line 720 
    emg_17_emg_param_3_8 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 720 
    emg_17_emg_param_3_8 = emg_17_emg_param_3_8;
    #line 724 
    emg_wrapper_hinic_get_rxfh(emg_17_container,emg_17_emg_param_1_6,emg_17_emg_param_2_7,emg_17_emg_param_3_8);
    #line 728 
    ldv_free((void *)emg_17_emg_param_1_6);
    #line 729 
    ldv_free((void *)emg_17_emg_param_2_7);
    #line 730 
    ldv_free((void *)emg_17_emg_param_3_8);
    #line 732 
    break;
    #line 734 
    case 19: 
             #line 734 
    ;
    #line 736 
    emg_17_emg_param_1_5 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 736 
    emg_17_emg_param_1_5 = emg_17_emg_param_1_5;
    #line 740 
    emg_wrapper_hinic_get_ringparam(emg_17_container,emg_17_emg_param_1_5);
    #line 744 
    ldv_free((void *)emg_17_emg_param_1_5);
    #line 746 
    break;
    #line 748 
    case 20: 
             #line 748 
    ;
    #line 750 
    emg_17_emg_param_1_4 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 750 
    emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
    #line 754 
    emg_wrapper_hinic_get_link_ksettings(emg_17_container,emg_17_emg_param_1_4);
    #line 758 
    ldv_free((void *)emg_17_emg_param_1_4);
    #line 760 
    break;
    #line 762 
    case 21: 
             #line 762 
    ;
    #line 764 
    ethtool_op_get_link(emg_17_container);
    #line 766 
    break;
    #line 768 
    case 22: 
             #line 768 
    ;
    #line 770 
    emg_17_emg_param_1_2 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 770 
    emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
    #line 771 
    emg_17_emg_param_2_3 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 771 
    emg_17_emg_param_2_3 = emg_17_emg_param_2_3;
    #line 775 
    emg_wrapper_hinic_get_ethtool_stats(emg_17_container,emg_17_emg_param_1_2,emg_17_emg_param_2_3);
    #line 779 
    ldv_free((void *)emg_17_emg_param_1_2);
    #line 780 
    ldv_free((void *)emg_17_emg_param_2_3);
    #line 782 
    break;
    #line 784 
    case 23: 
             #line 784 
    ;
    #line 786 
    emg_17_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 786 
    emg_17_emg_param_1_1 = emg_17_emg_param_1_1;
    #line 790 
    emg_wrapper_hinic_get_drvinfo(emg_17_container,emg_17_emg_param_1_1);
    #line 794 
    ldv_free((void *)emg_17_emg_param_1_1);
    #line 796 
    break;
    #line 798 
    case 24: 
             #line 798 
    ;
    #line 800 
    emg_17_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 800 
    emg_17_emg_param_1_0 = emg_17_emg_param_1_0;
    #line 804 
    emg_wrapper_hinic_get_channels(emg_17_container,emg_17_emg_param_1_0);
    #line 808 
    ldv_free((void *)emg_17_emg_param_1_0);
    #line 811 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 812 
      emg_repeat_cnt_call_17 --;
      #line 814 
      goto emg_call_17;
    }
    else 
         #line 816 
         __VERIFIER_assume(0);
    #line 820 
    break;
    #line 822 
    case 25: 
             #line 822 
    ;
    #line 826 
    break;
    #line 828 
    default: 
             #line 828 
    ;
    #line 828 
    __VERIFIER_assume(0);
  }
  #line 831 
  return (void *)0;
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_hinic_driver(void *arg0)
{
  #line 839 
  int emg_18_choice;
  #line 840 
  struct pci_driver *emg_18_container;
  #line 841 
  struct pci_device_id *emg_18_device_id;
  #line 842 
  struct pci_dev *emg_18_resource_0;
  #line 843 
  struct pm_message emg_18_resource_1;
  #line 844 
  int emg_18_ret;
  #line 845 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 846 
  int emg_repeat_cnt_call_18_0 = 1;
  #line 847 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 848 
  int emg_repeat_cnt_call_18_1 = 1;
  #line 850 
  struct emg_struct_pci_scenario_hinic_driver_18 *data = (struct emg_struct_pci_scenario_hinic_driver_18 *)arg0;
  #line 854 
  emg_18_choice = 0;
  #line 855 
  emg_18_ret = ldv_undef_int();
  #line 856 
  emg_18_choice = 0;
  #line 857 
  emg_18_container = emg_alias_hinic_driver;
  #line 858 
  emg_18_ret = ldv_undef_int();
  #line 860 
  __VERIFIER_assume(data->arg0 == emg_alias_hinic_driver);
  #line 862 
  if (data != (struct emg_struct_pci_scenario_hinic_driver_18 *)0) {
    #line 863 
    emg_18_container = data->arg0;
    #line 864 
    ldv_free((void *)data);
  }
  #line 869 
  emg_18_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 870 
  emg_18_choice = __ldv_undef_int_range(0,4);
  #line 871 
  emg_18_device_id = emg_18_container->id_table + (unsigned long)emg_18_choice;
  #line 875 
  goto emg_main_18;
  #line 879 
  return (void *)0;
  #line 882 
  emg_call_18: 
               #line 882 
  ;
  #line 883 
  switch (ldv_undef_int()) {
    #line 884 
    case 0: 
            #line 884 
    ;
    #line 889 
    if (emg_repeat_cnt_call_18_1 > 0) {
      #line 890 
      emg_repeat_cnt_call_18_1 --;
      #line 892 
      goto emg_call_18;
    }
    else 
         #line 894 
         __VERIFIER_assume(0);
    #line 898 
    break;
    #line 900 
    case 1: 
            #line 900 
    ;
    #line 902 
    if (emg_18_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 903 
      emg_18_ret = (*(emg_18_container->suspend))(emg_18_resource_0,emg_18_resource_1); else 
                                                                    #line 905 
                                                                    emg_18_ret = ldv_undef_int();
    #line 911 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 915 
    if (emg_18_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 916 
                                                                  (*(emg_18_container->resume))(emg_18_resource_0);
    #line 920 
    if (emg_repeat_cnt_call_18_0 > 0) {
      #line 921 
      emg_repeat_cnt_call_18_0 --;
      #line 923 
      goto emg_call_18;
    }
    else 
         #line 925 
         __VERIFIER_assume(0);
    #line 929 
    break;
    #line 931 
    case 2: 
            #line 931 
    ;
    #line 933 
    emg_wrapper_hinic_shutdown(emg_18_resource_0);
    #line 937 
    emg_wrapper_hinic_remove(emg_18_resource_0);
    #line 940 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 941 
      emg_repeat_cnt_main_18_0 --;
      #line 943 
      goto emg_main_18;
    }
    else 
         #line 945 
         __VERIFIER_assume(0);
    #line 949 
    break;
    #line 951 
    default: 
             #line 951 
    ;
    #line 951 
    __VERIFIER_assume(0);
  }
  #line 954 
  return (void *)0;
  #line 957 
  emg_main_18: 
               #line 957 
  ;
  #line 958 
  if (ldv_undef_int() != 0) {
    #line 961 
    ldv_pre_probe();
    #line 965 
    emg_18_ret = emg_wrapper_hinic_probe(emg_18_resource_0,emg_18_device_id);
    #line 970 
    emg_18_ret = ldv_post_probe(emg_18_ret);
    #line 973 
    if (ldv_undef_int() != 0) {
      #line 975 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 979 
      goto emg_call_18;
    }
    else 
         #line 984 
         __VERIFIER_assume(emg_18_ret != 0);
    #line 988 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 989 
      emg_repeat_cnt_main_18_1 --;
      #line 991 
      goto emg_main_18;
    }
    else 
         #line 993 
         __VERIFIER_assume(0);
  }
  else 
       #line 999 
       ldv_free((void *)emg_18_resource_0);
  #line 1007 
  return (void *)0;
}

#line 1012  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1015 
  struct pci_driver *emg_2_pci_driver;
  #line 1017 
  emg_2_pci_driver = emg_alias_hinic_driver;
  #line 1018 
  if (ldv_undef_int() != 0) {
    #line 1020 
    emg_2_pci_driver = arg0;
    #line 1024 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1028 
    return 0;
  }
  else {
    #line 1032 
    return ldv_undef_int_negative();
  }
}

#line 1040  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1043 
  struct net_device *emg_3_netdev;
  #line 1045 
  if (ldv_undef_int() != 0) {
    #line 1047 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1051 
    return emg_3_netdev;
  }
  else 
       #line 1055 
       return (struct net_device *)0;
}

#line 1063  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1066 
  int emg_4_line;
  #line 1069 
  emg_4_line = (int)arg0;
  #line 1073 
  emg_dispatch_irq_deregister_4(emg_4_line);
  #line 1074 
  ;
  #line 1074 
  return (void *)0;
}

#line 1080  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1083 
  struct net_device *emg_5_netdev;
  #line 1086 
  emg_5_netdev = arg0;
  #line 1087 
  ldv_free((void *)emg_5_netdev);
  #line 1090 
  return;
}

#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1098 
  struct pci_driver *emg_6_pci_driver;
  #line 1100 
  emg_6_pci_driver = emg_alias_hinic_driver;
  #line 1102 
  emg_6_pci_driver = arg0;
  #line 1106 
  emg_dispatch_deregister_6(emg_6_pci_driver);
  #line 1109 
  return;
}

#line 1114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1117 
  struct work_struct *emg_7_work_struct;
  #line 1119 
  if (ldv_undef_int() != 0) {
    #line 1121 
    emg_7_work_struct = arg1;
    #line 1125 
    if (emg_7_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1126 
      (*(emg_7_work_struct->func))(emg_7_work_struct);
    #line 1131 
    return (_Bool)1;
  }
  else 
       #line 1135 
       return (_Bool)0;
}

#line 1143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1146 
  struct net_device *emg_8_netdev;
  #line 1147 
  int emg_8_ret;
  #line 1150 
  emg_8_ret = ldv_undef_int();
  #line 1151 
  emg_8_ret = ldv_undef_int();
  #line 1152 
  if (ldv_undef_int() != 0) {
    #line 1154 
    emg_8_netdev = arg0;
    #line 1158 
    emg_8_ret = emg_wrapper_hinic_open(emg_8_netdev);
    #line 1161 
    if (ldv_undef_int() != 0) {
      #line 1163 
      __VERIFIER_assume(emg_8_ret == 0);
      #line 1167 
      emg_dispatch_register_8(emg_8_netdev);
      #line 1171 
      return 0;
    }
    else {
      #line 1175 
      __VERIFIER_assume(emg_8_ret != 0);
      #line 1176 
      ldv_failed_register_netdev();
      #line 1177 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1182 
    ldv_failed_register_netdev();
    #line 1183 
    return ldv_undef_int_negative();
  }
}

#line 1191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1194 
  enum irqreturn (*emg_9_callback)(int , void *);
  #line 1195 
  void *emg_9_data;
  #line 1196 
  int emg_9_line;
  #line 1197 
  enum irqreturn (*emg_9_thread)(int , void *);
  #line 1199 
  emg_9_callback = & emg_wrapper_aeq_interrupt;
  #line 1200 
  if (ldv_undef_int() != 0) {
    #line 1202 
    emg_9_line = (int)arg0;
    #line 1203 
    emg_9_callback = arg1;
    #line 1204 
    emg_9_thread = (enum irqreturn (*)(int , void *))0;
    #line 1205 
    emg_9_data = arg4;
    #line 1209 
    emg_dispatch_irq_register_9(emg_9_line,emg_9_callback,emg_9_thread,emg_9_data);
    #line 1213 
    return 0;
  }
  else {
    #line 1217 
    return ldv_undef_int_negative();
  }
}

#line 1225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 1230 
  arg0->func = arg1;
  #line 1231 
  arg0->data = arg2;
  #line 1232 
  arg0->count.counter = 0;
  #line 1235 
  return;
}

#line 1240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 1243 
  unsigned long emg_11_emg_param_0_0;
  #line 1244 
  struct tasklet_struct *emg_11_tasklet_struct;
  #line 1247 
  emg_11_tasklet_struct = arg0;
  #line 1251 
  if (emg_11_tasklet_struct->count.counter == 0) 
    #line 1252 
    if (emg_11_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 1253 
                                                                    (*(emg_11_tasklet_struct->func))(emg_11_emg_param_0_0);
  #line 1258 
  return;
}

#line 1263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1266 
  struct net_device *emg_12_netdev;
  #line 1269 
  emg_12_netdev = arg0;
  #line 1273 
  emg_wrapper_hinic_close(emg_12_netdev);
  #line 1277 
  emg_dispatch_deregister_12(emg_12_netdev);
  #line 1280 
  return;
}

#line 1285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1288 
  int emg_1_ret;
  #line 1291 
  emg_1_ret = emg_hinic_driver_init();
  #line 1292 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1295 
  if (ldv_undef_int() != 0) {
    #line 1297 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1301 
    emg_hinic_driver_exit();
  }
  else 
       #line 1305 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1309 
  return (void *)0;
}

#line 1314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/huawei/hinic/hinic.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1316 
  ldv_initialize();
  #line 1318 
  emg_entry_point_insmod((void *)0);
  #line 1320 
  return 0;
}

