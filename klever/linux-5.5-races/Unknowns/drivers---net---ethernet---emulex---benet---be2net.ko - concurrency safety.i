/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long ulong;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_267 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_267 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_307 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_307 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_308 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_309 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_314 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_315 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_313 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_314 _addr_bnd ;
   struct __anonstruct__addr_pkey_315 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_312 {
   void *_addr ;
   union __anonunion_313 __anonCompField___anonstruct__sigfault_312_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_316 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_317 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_308 _kill ;
   struct __anonstruct__timer_309 _timer ;
   struct __anonstruct__rt_310 _rt ;
   struct __anonstruct__sigchld_311 _sigchld ;
   struct __anonstruct__sigfault_312 _sigfault ;
   struct __anonstruct__sigpoll_316 _sigpoll ;
   struct __anonstruct__sigsys_317 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_322 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_322 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_327 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_327 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_329 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_329 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_406 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_406 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_420 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_419 {
   struct __anonstruct_420 __anonCompField___anonunion_419_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_419 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_422 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_421 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_424 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_423 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_424 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_432 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_431 __anonCompField_io_cq_65 ;
   union __anonunion_432 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_433 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_433 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_434 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_434 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_436 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_435 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_436 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_435 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_439 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_440 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_441 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_442 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_443 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_443 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_445 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_444 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_445 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_444 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_459 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_461 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_460 {
   unsigned long nr_segs ;
   struct __anonstruct_461 __anonCompField___anonunion_460_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_459 __anonCompField_iov_iter_72 ;
   union __anonunion_460 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_10974 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_10974 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_480 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_480 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_481 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_481 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_492 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_493 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_494 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_495 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_492 ports ;
   struct __anonstruct_icmpt_493 icmpt ;
   struct __anonstruct_dnports_494 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_495 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_496 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_496 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_503 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_502 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_503 __anonCompField___anonstruct_502_89 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_501 {
   struct __anonstruct_502 __anonCompField___anonunion_501_90 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_504 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_505 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_507 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_506 {
   struct __anonstruct_507 __anonCompField___anonunion_506_94 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_509 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_508 {
   __wsum csum ;
   struct __anonstruct_509 __anonCompField___anonunion_508_96 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_510 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_511 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_512 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_501 __anonCompField_sk_buff_91 ;
   union __anonunion_504 __anonCompField_sk_buff_92 ;
   union __anonunion_505 __anonCompField_sk_buff_93 ;
   char cb[48U] ;
   union __anonunion_506 __anonCompField_sk_buff_95 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_508 __anonCompField_sk_buff_97 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_510 __anonCompField_sk_buff_98 ;
   __u32 secmark ;
   union __anonunion_511 __anonCompField_sk_buff_99 ;
   union __anonunion_512 __anonCompField_sk_buff_100 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_542 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_542 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_543 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_543 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_544 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_544 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_545 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_545 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_546 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_546 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_547 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_547 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_548 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_548 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_549 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_549 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_550 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_551 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_550 ifr_ifrn ;
   union __anonunion_ifr_ifru_551 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_653 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_652 {
   struct __anonstruct_653 __anonCompField___anonunion_652_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_652 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15272 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15273 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15272 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15273 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_697 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_697 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_698 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_698 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_701 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_702 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_704 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_705 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_703 {
   struct __anonstruct_elv_704 elv ;
   struct __anonstruct_flush_705 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_706 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_701 __anonCompField_request_164 ;
   union __anonunion_702 __anonCompField_request_165 ;
   union __anonunion_703 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_706 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_986 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_986 __anonCompField_inet_listen_hashbucket_196 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_989 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_989 __anonCompField_ip_ra_chain_197 ;
   struct callback_head rcu ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
struct ocrdma_dev;
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_dma_mem {
   void *va ;
   dma_addr_t dma ;
   u32 size ;
};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_queue_info {
   u32 len ;
   u32 entry_size ;
   u32 tail ;
   u32 head ;
   atomic_t used ;
   u32 id ;
   struct be_dma_mem dma_mem ;
   bool created ;
};
#line 182 
struct be_adapter;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_eq_obj {
   struct be_queue_info q ;
   char desc[32U] ;
   struct be_adapter *adapter ;
   struct napi_struct napi ;
   u8 idx ;
   u8 msix_idx ;
   u16 spurious_intr ;
   cpumask_var_t affinity_mask ;
} __attribute__((__aligned__(64)));
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_aic_obj {
   u32 min_eqd ;
   u32 max_eqd ;
   u32 prev_eqd ;
   u32 et_eqd ;
   ulong jiffies ;
   u64 rx_pkts_prev ;
   u64 tx_reqs_prev ;
};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_mcc_obj {
   struct be_queue_info q ;
   struct be_queue_info cq ;
   bool rearm_cq ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_tx_stats {
   u64 tx_bytes ;
   u64 tx_pkts ;
   u64 tx_vxlan_offload_pkts ;
   u64 tx_reqs ;
   u64 tx_compl ;
   u32 tx_stops ;
   u32 tx_drv_drops ;
   u32 tx_hdr_parse_err ;
   u32 tx_dma_err ;
   u32 tx_tso_err ;
   u32 tx_spoof_check_err ;
   u32 tx_qinq_err ;
   u32 tx_internal_parity_err ;
   u32 tx_sge_err ;
   struct u64_stats_sync sync ;
   struct u64_stats_sync sync_compl ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_tx_compl_info {
   u8 status ;
   u16 end_index ;
};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_tx_obj {
   u32 db_offset ;
   struct be_tx_compl_info txcp ;
   struct be_queue_info q ;
   struct be_queue_info cq ;
   struct sk_buff *sent_skb_list[2048U] ;
   struct be_tx_stats stats ;
   u16 pend_wrb_cnt ;
   u16 last_req_wrb_cnt ;
   u16 last_req_hdr ;
} __attribute__((__aligned__(64)));
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_page_info {
   struct page *page ;
   dma_addr_t bus ;
   u16 page_offset ;
   bool last_frag ;
};
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_stats {
   u64 rx_bytes ;
   u64 rx_pkts ;
   u64 rx_vxlan_offload_pkts ;
   u32 rx_drops_no_skbs ;
   u32 rx_drops_no_frags ;
   u32 rx_post_fail ;
   u32 rx_compl ;
   u32 rx_mcast_pkts ;
   u32 rx_compl_err ;
   struct u64_stats_sync sync ;
};
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_compl_info {
   u32 rss_hash ;
   u16 vlan_tag ;
   u16 pkt_size ;
   u16 port ;
   u8 vlanf ;
   u8 num_rcvd ;
   u8 err ;
   u8 ipf ;
   u8 tcpf ;
   u8 udpf ;
   u8 ip_csum ;
   u8 l4_csum ;
   u8 ipv6 ;
   u8 qnq ;
   u8 pkt_type ;
   u8 ip_frag ;
   u8 tunneled ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_obj {
   struct be_adapter *adapter ;
   struct be_queue_info q ;
   struct be_queue_info cq ;
   struct be_rx_compl_info rxcp ;
   struct be_rx_page_info page_info_tbl[1024U] ;
   struct be_rx_stats stats ;
   u8 rss_id ;
   bool rx_post_starved ;
} __attribute__((__aligned__(64)));
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_drv_stats {
   u32 eth_red_drops ;
   u32 dma_map_errors ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 rx_drops_too_many_frags ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_priority_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 tx_pauseframes ;
   u32 tx_priority_pauseframes ;
   u32 tx_controlframes ;
   u32 rxpp_fifo_overflow_drop ;
   u32 rx_input_fifo_overflow_drop ;
   u32 pmem_fifo_overflow_drop ;
   u32 jabber_events ;
   u32 rx_roce_bytes_lsd ;
   u32 rx_roce_bytes_msd ;
   u32 rx_roce_frames ;
   u32 roce_drops_payload_len ;
   u32 roce_drops_crc ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_vf_cfg {
   unsigned char mac_addr[6U] ;
   int if_handle ;
   int pmac_id ;
   u16 vlan_tag ;
   u32 tx_rate ;
   u32 plink_tracking ;
   u32 privileges ;
   bool spoofchk ;
};
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct phy_info {
   u8 transceiver ;
   u8 autoneg ;
   u8 fc_autoneg ;
   u8 port_type ;
   u16 phy_type ;
   u16 interface_type ;
   u32 misc_params ;
   u16 auto_speeds_supported ;
   u16 fixed_speeds_supported ;
   int link_speed ;
   u32 advertising ;
   u32 supported ;
   u8 cable_type ;
   u8 vendor_name[17U] ;
   u8 vendor_pn[17U] ;
};
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_resources {
   u16 max_vfs ;
   u16 max_mcast_mac ;
   u16 max_tx_qs ;
   u16 max_rss_qs ;
   u16 max_rx_qs ;
   u16 max_cq_count ;
   u16 max_uc_mac ;
   u16 max_vlans ;
   u16 max_iface_count ;
   u16 max_mcc_count ;
   u16 max_evt_qs ;
   u16 max_nic_evt_qs ;
   u32 if_cap_flags ;
   u32 vf_if_cap_flags ;
   u32 flags ;
   u16 max_rss_tables ;
};
#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_port_resources {
   u16 max_vfs ;
   u16 nic_pfs ;
};
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct rss_info {
   u8 rsstable[128U] ;
   u8 rss_queue[128U] ;
   u8 rss_hkey[40U] ;
   u64 rss_flags ;
};
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_hwmon {
   struct device *hwmon_dev ;
   u8 be_on_die_temp ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_eth_addr {
   unsigned char mac[6U] ;
};
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
union __anonunion_1041 {
   u8 recovery_retries ;
   u8 recovery_state ;
};
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_error_recovery {
   union __anonunion_1041 __anonCompField_be_error_recovery_201 ;
   bool recovery_supported ;
   u16 ue_to_reset_time ;
   u16 ue_to_poll_time ;
   u16 last_err_code ;
   unsigned long probe_time ;
   unsigned long last_recovery_time ;
   u32 resched_delay ;
   struct delayed_work err_detection_work ;
};
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct __anonstruct_roce_db_1042 {
   u32 size ;
   u32 total_size ;
   u64 io_addr ;
};
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_adapter {
   struct pci_dev *pdev ;
   struct net_device *netdev ;
   u8 *csr ;
   u8 *db ;
   u8 *pcicfg ;
   struct mutex mbox_lock ;
   struct be_dma_mem mbox_mem ;
   struct be_dma_mem mbox_mem_alloced ;
   struct be_mcc_obj mcc_obj ;
   struct mutex mcc_lock ;
   spinlock_t mcc_cq_lock ;
   u16 cfg_num_rx_irqs ;
   u16 cfg_num_tx_irqs ;
   u16 num_evt_qs ;
   u16 num_msix_vec ;
   struct be_eq_obj eq_obj[32U] ;
   struct msix_entry msix_entries[32U] ;
   bool isr_registered ;
   u16 num_tx_qs ;
   struct be_tx_obj tx_obj[32U] ;
   u16 num_rx_qs ;
   u16 num_rss_qs ;
   u16 need_def_rxq ;
   struct be_rx_obj rx_obj[32U] ;
   u32 big_page_size ;
   struct be_drv_stats drv_stats ;
   struct be_aic_obj aic_obj[32U] ;
   bool aic_enabled ;
   u8 vlan_prio_bmap ;
   u16 recommended_prio_bits ;
   struct be_dma_mem rx_filter ;
   struct be_dma_mem stats_cmd ;
   struct delayed_work work ;
   u16 work_counter ;
   u8 recovery_retries ;
   u8 err_flags ;
   bool pcicfg_mapped ;
   u32 flags ;
   u32 cmd_privileges ;
   char fw_ver[32U] ;
   char fw_on_flash[32U] ;
   int if_handle ;
   u32 if_flags ;
   u32 *pmac_id ;
   struct be_eth_addr *uc_list ;
   u32 uc_macs ;
   struct be_eth_addr *mc_list ;
   u32 mc_count ;
   unsigned long vids[64U] ;
   u16 vlans_added ;
   bool update_uc_list ;
   bool update_mc_list ;
   struct mutex rx_filter_lock ;
   u32 beacon_state ;
   u32 port_num ;
   char port_name ;
   u8 mc_type ;
   u32 function_mode ;
   u32 function_caps ;
   u32 rx_fc ;
   u32 tx_fc ;
   bool stats_cmd_sent ;
   struct __anonstruct_roce_db_1042 roce_db ;
   u32 num_msix_roce_vec ;
   struct ocrdma_dev *ocrdma_dev ;
   struct list_head entry ;
   u32 flash_status ;
   struct completion et_cmd_compl ;
   struct be_resources pool_res ;
   struct be_resources res ;
   u16 num_vfs ;
   u8 pf_num ;
   u8 vf_num ;
   u8 virtfn ;
   struct be_vf_cfg *vf_cfg ;
   bool be3_native ;
   u32 sli_family ;
   u8 hba_port_num ;
   u16 pvid ;
   __be16 vxlan_port ;
   int vxlan_port_count ;
   struct list_head vxlan_port_list ;
   struct phy_info phy ;
   u8 wol_cap ;
   bool wol_en ;
   u16 asic_rev ;
   u16 qnq_vid ;
   u32 msg_enable ;
   int be_get_temp_freq ;
   struct be_hwmon hwmon_info ;
   struct rss_info rss_info ;
   u32 bmc_filt_mask ;
   u32 fat_dump_len ;
   u16 serial_num[8U] ;
   u8 phy_state ;
   u8 dev_mac[6U] ;
   u32 priv_flags ;
   struct be_error_recovery error_recovery ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_sge {
   u32 pa_lo ;
   u32 pa_hi ;
   u32 len ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_payload_1044 {
   u8 embedded_payload[236U] ;
   struct be_sge sgl[19U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_mcc_wrb {
   u32 embedded ;
   u32 payload_length ;
   u32 tag0 ;
   u32 tag1 ;
   u32 rsvd ;
   union __anonunion_payload_1044 payload ;
};
#line 42 
enum mcc_base_status {
    MCC_STATUS_SUCCESS = 0,
    MCC_STATUS_FAILED = 1,
    MCC_STATUS_ILLEGAL_REQUEST = 2,
    MCC_STATUS_ILLEGAL_FIELD = 3,
    MCC_STATUS_INSUFFICIENT_BUFFER = 4,
    MCC_STATUS_UNAUTHORIZED_REQUEST = 5,
    MCC_STATUS_NOT_SUPPORTED = 66,
    MCC_STATUS_FEATURE_NOT_SUPPORTED = 68,
    MCC_STATUS_INVALID_LENGTH = 116
};
#line 54 
enum mcc_addl_status {
    MCC_ADDL_STATUS_INSUFFICIENT_RESOURCES = 22,
    MCC_ADDL_STATUS_FLASH_IMAGE_CRC_MISMATCH = 77,
    MCC_ADDL_STATUS_TOO_MANY_INTERFACES = 74,
    MCC_ADDL_STATUS_INSUFFICIENT_VLANS = 171,
    MCC_ADDL_STATUS_INVALID_SIGNATURE = 86,
    MCC_ADDL_STATUS_MISSING_SIGNATURE = 87,
    MCC_ADDL_STATUS_INSUFFICIENT_PRIVILEGES = 96
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_mcc_compl {
   u32 status ;
   u32 tag0 ;
   u32 tag1 ;
   u32 flags ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_link_state {
   u8 physical_port ;
   u8 port_link_status ;
   u8 port_duplex ;
   u8 port_speed ;
   u8 port_fault ;
   u8 rsvd0[7U] ;
   u32 flags ;
} __attribute__((__packed__));
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_grp5_qos_link_speed {
   u8 physical_port ;
   u8 rsvd[5U] ;
   u16 qos_link_speed ;
   u32 event_tag ;
   u32 flags ;
} __attribute__((__packed__));
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_grp5_cos_priority {
   u8 physical_port ;
   u8 available_priority_bmap ;
   u8 reco_default_priority ;
   u8 valid ;
   u8 rsvd0 ;
   u8 event_tag ;
   u32 flags ;
} __attribute__((__packed__));
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_grp5_pvid_state {
   u8 enabled ;
   u8 rsvd0 ;
   u16 tag ;
   u32 event_tag ;
   u32 rsvd1 ;
   u32 flags ;
} __attribute__((__packed__));
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_qnq {
   u8 valid ;
   u8 rsvd0 ;
   u16 vlan_tag ;
   u32 event_tag ;
   u8 rsvd1[4U] ;
   u32 flags ;
} __attribute__((__packed__));
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_misconfig_port {
   u32 event_data_word1 ;
   u32 event_data_word2 ;
   u32 rsvd0 ;
   u32 flags ;
} __attribute__((__packed__));
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_fw_control {
   u32 event_data_word1 ;
   u32 event_data_word2 ;
   u32 evt_tag ;
   u32 event_data_word4 ;
} __attribute__((__packed__));
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_mcc_mailbox {
   struct be_mcc_wrb wrb ;
   struct be_mcc_compl compl ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_hdr {
   u8 opcode ;
   u8 subsystem ;
   u8 port_number ;
   u8 domain ;
   u32 timeout ;
   u32 request_length ;
   u8 version ;
   u8 rsvd[3U] ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_hdr {
   u8 opcode ;
   u8 subsystem ;
   u8 rsvd[2U] ;
   u8 base_status ;
   u8 addl_status ;
   u8 rsvd1[2U] ;
   u32 response_length ;
   u32 actual_resp_len ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct phys_addr {
   u32 lo ;
   u32 hi ;
};
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_eq_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u16 rsvd0 ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
} __attribute__((__packed__));
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_eq_create {
   struct be_cmd_resp_hdr resp_hdr ;
   u16 eq_id ;
   u16 msix_idx ;
} __attribute__((__packed__));
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct mac_addr {
   u16 size_of_struct ;
   u8 addr[6U] ;
} __attribute__((__packed__));
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_mac_query {
   struct be_cmd_req_hdr hdr ;
   u8 type ;
   u8 permanent ;
   u16 if_id ;
   u32 pmac_id ;
} __attribute__((__packed__));
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_mac_query {
   struct be_cmd_resp_hdr hdr ;
   struct mac_addr mac ;
};
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_pmac_add {
   struct be_cmd_req_hdr hdr ;
   u32 if_id ;
   u8 mac_address[6U] ;
   u8 rsvd0[2U] ;
} __attribute__((__packed__));
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_pmac_add {
   struct be_cmd_resp_hdr hdr ;
   u32 pmac_id ;
};
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_pmac_del {
   struct be_cmd_req_hdr hdr ;
   u32 if_id ;
   u32 pmac_id ;
};
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_cq_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u8 page_size ;
   u8 rsvd0 ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
} __attribute__((__packed__));
#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_cq_create {
   struct be_cmd_resp_hdr hdr ;
   u16 cq_id ;
   u16 rsvd0 ;
} __attribute__((__packed__));
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_fat {
   struct be_cmd_req_hdr hdr ;
   u32 fat_operation ;
   u32 read_log_offset ;
   u32 read_log_length ;
   u32 data_buffer_size ;
   u32 data_buffer[1U] ;
} __attribute__((__packed__));
#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_fat {
   struct be_cmd_resp_hdr hdr ;
   u32 log_size ;
   u32 read_log_length ;
   u32 rsvd[2U] ;
   u32 data_buffer[1U] ;
} __attribute__((__packed__));
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_mcc_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u16 cq_id ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
} __attribute__((__packed__));
#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_mcc_ext_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u16 cq_id ;
   u32 async_event_bitmap[1U] ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
} __attribute__((__packed__));
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_mcc_create {
   struct be_cmd_resp_hdr hdr ;
   u16 id ;
   u16 rsvd0 ;
} __attribute__((__packed__));
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_eth_tx_create {
   struct be_cmd_req_hdr hdr ;
   u8 num_pages ;
   u8 ulp_num ;
   u16 type ;
   u16 if_id ;
   u8 queue_size ;
   u8 rsvd0 ;
   u32 rsvd1 ;
   u16 cq_id ;
   u16 rsvd2 ;
   u32 rsvd3[13U] ;
   struct phys_addr pages[8U] ;
} __attribute__((__packed__));
#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_eth_tx_create {
   struct be_cmd_resp_hdr hdr ;
   u16 cid ;
   u16 rid ;
   u32 db_offset ;
   u32 rsvd0[4U] ;
} __attribute__((__packed__));
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_eth_rx_create {
   struct be_cmd_req_hdr hdr ;
   u16 cq_id ;
   u8 frag_size ;
   u8 num_pages ;
   struct phys_addr pages[2U] ;
   u32 interface_id ;
   u16 max_frame_size ;
   u16 rsvd0 ;
   u32 rss_queue ;
} __attribute__((__packed__));
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_eth_rx_create {
   struct be_cmd_resp_hdr hdr ;
   u16 id ;
   u8 rss_id ;
   u8 rsvd0 ;
} __attribute__((__packed__));
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_q_destroy {
   struct be_cmd_req_hdr hdr ;
   u16 id ;
   u16 bypass_flush ;
} __attribute__((__packed__));
#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_if_create {
   struct be_cmd_req_hdr hdr ;
   u32 version ;
   u32 capability_flags ;
   u32 enable_flags ;
   u8 mac_addr[6U] ;
   u8 rsvd0 ;
   u8 pmac_invalid ;
   u32 vlan_tag ;
} __attribute__((__packed__));
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_if_create {
   struct be_cmd_resp_hdr hdr ;
   u32 interface_id ;
   u32 pmac_id ;
};
#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_if_destroy {
   struct be_cmd_req_hdr hdr ;
   u32 interface_id ;
};
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct pport_stats_params {
   u16 pport_num ;
   u8 rsvd ;
   u8 reset_stats ;
};
#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_cmd_params_1045 {
   struct pport_stats_params params ;
   u8 rsvd[656U] ;
};
#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_pport_stats {
   struct be_cmd_req_hdr hdr ;
   union __anonunion_cmd_params_1045 cmd_params ;
};
#line 1014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_cntl_addnl_attribs {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd[8U] ;
};
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_cntl_addnl_attribs {
   struct be_cmd_resp_hdr hdr ;
   u16 ipl_file_number ;
   u8 ipl_file_version ;
   u8 rsvd0 ;
   u8 on_die_temperature ;
   u8 rsvd1[3U] ;
};
#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_vlan_config {
   struct be_cmd_req_hdr hdr ;
   u8 interface_id ;
   u8 promiscuous ;
   u8 untagged ;
   u8 num_vlan ;
   u16 normal_vlan[64U] ;
} __attribute__((__packed__));
#line 1039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct macaddr {
   u8 byte[6U] ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_rx_filter {
   struct be_cmd_req_hdr hdr ;
   u32 global_flags_mask ;
   u32 global_flags ;
   u32 if_flags_mask ;
   u32 if_flags ;
   u32 if_id ;
   u32 mcast_num ;
   struct macaddr mcast_mac[64U] ;
};
#line 1055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_link_status {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
};
#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_link_status {
   struct be_cmd_resp_hdr hdr ;
   u8 physical_port ;
   u8 mac_duplex ;
   u8 mac_speed ;
   u8 mac_fault ;
   u8 mgmt_mac_duplex ;
   u8 mgmt_mac_speed ;
   u16 link_speed ;
   u8 logical_link_status ;
   u8 rsvd1[3U] ;
} __attribute__((__packed__));
#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_port_type {
   struct be_cmd_req_hdr hdr ;
   __le32 page_num ;
   __le32 port ;
};
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_port_type {
   struct be_cmd_resp_hdr hdr ;
   u32 page_num ;
   u32 port ;
   u8 page_data[256U] ;
};
#line 1125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_fw_version {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[32U] ;
   u8 rsvd1[32U] ;
} __attribute__((__packed__));
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_fw_version {
   struct be_cmd_resp_hdr hdr ;
   u8 firmware_version_string[32U] ;
   u8 fw_on_flash_version_string[32U] ;
} __attribute__((__packed__));
#line 1138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_flow_control {
   struct be_cmd_req_hdr hdr ;
   u16 tx_flow_control ;
   u16 rx_flow_control ;
} __attribute__((__packed__));
#line 1145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_flow_control {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_flow_control {
   struct be_cmd_resp_hdr hdr ;
   u16 tx_flow_control ;
   u16 rx_flow_control ;
} __attribute__((__packed__));
#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_set_eqd {
   u32 eq_id ;
   u32 phase ;
   u32 delay_multiplier ;
};
#line 1163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_modify_eq_delay {
   struct be_cmd_req_hdr hdr ;
   u32 num_eq ;
   struct be_set_eqd set_eqd[32U] ;
} __attribute__((__packed__));
#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_query_fw_cfg {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd[31U] ;
};
#line 1182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_query_fw_cfg {
   struct be_cmd_resp_hdr hdr ;
   u32 be_config_number ;
   u32 asic_revision ;
   u32 phys_port ;
   u32 function_mode ;
   u32 rsvd[26U] ;
   u32 function_caps ;
};
#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_rss_config {
   struct be_cmd_req_hdr hdr ;
   u32 if_id ;
   u16 enable_rss ;
   u16 cpu_table_size_log2 ;
   u32 hash[10U] ;
   u8 cpu_table[128U] ;
   u8 flush ;
   u8 rsvd0[3U] ;
};
#line 1231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_enable_disable_beacon {
   struct be_cmd_req_hdr hdr ;
   u8 port_num ;
   u8 beacon_state ;
   u8 beacon_duration ;
   u8 status_duration ;
} __attribute__((__packed__));
#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_beacon_state {
   struct be_cmd_req_hdr hdr ;
   u8 port_num ;
   u8 rsvd0 ;
   u16 rsvd1 ;
} __attribute__((__packed__));
#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_beacon_state {
   struct be_cmd_resp_hdr resp_hdr ;
   u8 beacon_state ;
   u8 rsvd0[3U] ;
} __attribute__((__packed__));
#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_comp {
   unsigned long offset ;
   int optype ;
   int size ;
   int img_type ;
};
#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct image_hdr {
   u32 imageid ;
   u32 imageoffset ;
   u32 imagelength ;
   u32 image_checksum ;
   u8 image_version[32U] ;
};
#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_file_hdr_g3 {
   u8 sign[52U] ;
   u8 ufi_version[4U] ;
   u32 file_len ;
   u32 cksum ;
   u32 antidote ;
   u32 num_imgs ;
   u8 build[24U] ;
   u8 asic_type_rev ;
   u8 rsvd[31U] ;
};
#line 1386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_hdr {
   u32 format_rev ;
   u32 cksum ;
   u32 antidote ;
   u32 num_images ;
   u8 id_string[128U] ;
   u32 rsvd[4U] ;
} __attribute__((__packed__));
#line 1395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_hdr_g2 {
   u32 format_rev ;
   u32 cksum ;
   u32 antidote ;
   u32 build_num ;
   u8 id_string[128U] ;
   u32 rsvd[8U] ;
} __attribute__((__packed__));
#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_entry {
   u32 type ;
   u32 offset ;
   u32 pad_size ;
   u32 image_size ;
   u32 cksum ;
   u32 entry_point ;
   u16 optype ;
   u16 rsvd0 ;
   u32 rsvd1 ;
   u8 ver_data[32U] ;
} __attribute__((__packed__));
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_info {
   u8 cookie[32U] ;
   struct flash_section_hdr fsec_hdr ;
   struct flash_section_entry fsec_entry[32U] ;
} __attribute__((__packed__));
#line 1423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_info_g2 {
   u8 cookie[32U] ;
   struct flash_section_hdr_g2 fsec_hdr ;
   struct flash_section_entry fsec_entry[32U] ;
} __attribute__((__packed__));
#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flashrom_params {
   u32 op_code ;
   u32 op_type ;
   u32 data_buf_size ;
   u32 offset ;
};
#line 1443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_write_flashrom {
   struct be_cmd_req_hdr hdr ;
   struct flashrom_params params ;
   u8 data_buf[32768U] ;
   u8 rsvd[4U] ;
} __attribute__((__packed__));
#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_read_flash_crc {
   struct be_cmd_req_hdr hdr ;
   struct flashrom_params params ;
   u8 crc[4U] ;
   u8 rsvd[4U] ;
} __attribute__((__packed__));
#line 1468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_write_object {
   struct be_cmd_req_hdr hdr ;
   u8 context[4U] ;
   u32 write_offset ;
   u8 object_name[104U] ;
   u32 descriptor_count ;
   u32 buf_len ;
   u32 addr_low ;
   u32 addr_high ;
};
#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_resp_write_object {
   u8 opcode ;
   u8 subsystem ;
   u8 rsvd1[2U] ;
   u8 status ;
   u8 additional_status ;
   u8 rsvd2[2U] ;
   u32 resp_len ;
   u32 actual_resp_len ;
   u32 actual_write_len ;
   u8 change_status ;
   u8 rsvd3[3U] ;
};
#line 1503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_read_object {
   struct be_cmd_req_hdr hdr ;
   u32 desired_read_len ;
   u32 read_offset ;
   u8 object_name[104U] ;
   u32 descriptor_count ;
   u32 buf_len ;
   u32 addr_low ;
   u32 addr_high ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_resp_read_object {
   u8 opcode ;
   u8 subsystem ;
   u8 rsvd1[2U] ;
   u8 status ;
   u8 additional_status ;
   u8 rsvd2[2U] ;
   u32 resp_len ;
   u32 actual_resp_len ;
   u32 actual_read_len ;
   u32 eof ;
};
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_delete_object {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd1 ;
   u32 rsvd2 ;
   u8 object_name[104U] ;
};
#line 1535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_acpi_wol_magic_config {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd0[145U] ;
   u8 magic_mac[6U] ;
   u8 rsvd2[2U] ;
} __attribute__((__packed__));
#line 1542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_acpi_wol_magic_config_v1 {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[2U] ;
   u8 query_options ;
   u8 rsvd1[5U] ;
   u32 rsvd2[288U] ;
   u8 magic_mac[6U] ;
   u8 rsvd3[22U] ;
} __attribute__((__packed__));
#line 1552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_acpi_wol_magic_config_v1 {
   struct be_cmd_resp_hdr hdr ;
   u8 rsvd0[2U] ;
   u8 wol_settings ;
   u8 rsvd1[5U] ;
   u32 rsvd2[288U] ;
   u8 magic_mac[6U] ;
   u8 rsvd3[22U] ;
} __attribute__((__packed__));
#line 1574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_loopback_test {
   struct be_cmd_req_hdr hdr ;
   u32 loopback_type ;
   u32 num_pkts ;
   u64 pattern ;
   u32 src_port ;
   u32 dest_port ;
   u32 pkt_size ;
};
#line 1584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_loopback_test {
   struct be_cmd_resp_hdr resp_hdr ;
   u32 status ;
   u32 num_txfer ;
   u32 num_rx ;
   u32 miscomp_off ;
   u32 ticks_compl ;
};
#line 1593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_lmode {
   struct be_cmd_req_hdr hdr ;
   u8 src_port ;
   u8 dest_port ;
   u8 loopback_type ;
   u8 loopback_state ;
};
#line 1602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_ddrdma_test {
   struct be_cmd_req_hdr hdr ;
   u64 pattern ;
   u32 byte_count ;
   u32 rsvd0 ;
   u8 snd_buff[4096U] ;
   u8 rsvd1[4096U] ;
};
#line 1611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_ddrdma_test {
   struct be_cmd_resp_hdr hdr ;
   u64 pattern ;
   u32 byte_cnt ;
   u32 snd_err ;
   u8 rsvd0[4096U] ;
   u8 rcv_buff[4096U] ;
};
#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_seeprom_read {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[1024U] ;
};
#line 1678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_phy_info {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[24U] ;
};
#line 1683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_phy_info {
   u16 phy_type ;
   u16 interface_type ;
   u32 misc_params ;
   u16 ext_phy_details ;
   u16 rsvd ;
   u16 auto_speeds_supported ;
   u16 fixed_speeds_supported ;
   u32 future_use[2U] ;
};
#line 1703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_qos {
   struct be_cmd_req_hdr hdr ;
   u32 valid_bits ;
   u32 max_bps_nic ;
   u32 rsvd[7U] ;
};
#line 1711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct mgmt_hba_attribs {
   u32 rsvd0[24U] ;
   u8 controller_model_number[32U] ;
   u32 rsvd1[16U] ;
   u32 controller_serial_number[8U] ;
   u32 rsvd2[55U] ;
   u8 rsvd3[3U] ;
   u8 phy_port ;
   u32 rsvd4[15U] ;
   u8 rsvd5[2U] ;
   u8 pci_funcnum ;
   u8 rsvd6 ;
   u32 rsvd7[6U] ;
} __attribute__((__packed__));
#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct mgmt_controller_attrib {
   struct mgmt_hba_attribs hba_attribs ;
   u32 rsvd0[10U] ;
} __attribute__((__packed__));
#line 1731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_cntl_attribs {
   struct be_cmd_req_hdr hdr ;
};
#line 1735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_cntl_attribs {
   struct be_cmd_resp_hdr hdr ;
   struct mgmt_controller_attrib attribs ;
};
#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_func_cap {
   struct be_cmd_req_hdr hdr ;
   u32 valid_cap_flags ;
   u32 cap_flags ;
   u8 rsvd[212U] ;
};
#line 1751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_set_func_cap {
   struct be_cmd_resp_hdr hdr ;
   u32 valid_cap_flags ;
   u32 cap_flags ;
   u8 rsvd[212U] ;
};
#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_priv_map {
   u8 opcode ;
   u8 subsystem ;
   u32 priv_mask ;
};
#line 1782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_fn_privileges {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
};
#line 1787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_fn_privileges {
   struct be_cmd_resp_hdr hdr ;
   u32 privilege_mask ;
};
#line 1792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_fn_privileges {
   struct be_cmd_req_hdr hdr ;
   u32 privileges ;
   u32 privileges_lancer ;
};
#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_mac_list {
   struct be_cmd_req_hdr hdr ;
   u8 mac_type ;
   u8 perm_override ;
   u16 iface_id ;
   u32 mac_id ;
   u32 rsvd[3U] ;
} __attribute__((__packed__));
#line 1809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct __anonstruct_s_mac_id_1047 {
   u8 rsvd[2U] ;
   u32 mac_id ;
} __attribute__((__packed__));
#line 1809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_mac_addr_id_1046 {
   u8 macaddr[6U] ;
   struct __anonstruct_s_mac_id_1047 s_mac_id ;
} __attribute__((__packed__));
#line 1809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct get_list_macaddr {
   u16 mac_addr_size ;
   union __anonunion_mac_addr_id_1046 mac_addr_id ;
} __attribute__((__packed__));
#line 1820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_mac_list {
   struct be_cmd_resp_hdr hdr ;
   struct get_list_macaddr fd_macaddr ;
   struct get_list_macaddr macid_macaddr ;
   u8 true_mac_count ;
   u8 pseudo_mac_count ;
   u8 mac_list_size ;
   u8 rsvd ;
   struct get_list_macaddr macaddr_list[64U] ;
} __attribute__((__packed__));
#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_mac_list {
   struct be_cmd_req_hdr hdr ;
   u8 mac_count ;
   u8 rsvd1 ;
   u16 rsvd2 ;
   struct macaddr mac[64U] ;
} __attribute__((__packed__));
#line 1865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_hsw_config {
   struct be_cmd_req_hdr hdr ;
   u8 context[20U] ;
} __attribute__((__packed__));
#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_hsw_config {
   struct be_cmd_req_hdr hdr ;
   u8 context[4U] ;
} __attribute__((__packed__));
#line 1894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_hsw_config {
   struct be_cmd_resp_hdr hdr ;
   u8 context[16U] ;
   u32 rsvd ;
};
#line 1901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_port_name {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd0 ;
};
#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_port_name {
   struct be_cmd_req_hdr hdr ;
   u8 port_name[4U] ;
};
#line 2079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct ext_fat_mode {
   u8 mode ;
   u8 rsvd0 ;
   u16 port_mask ;
   u32 dbg_lvl ;
   u64 fun_mask ;
} __attribute__((__packed__));
#line 2087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct ext_fat_modules {
   u8 modules_str[32U] ;
   u32 modules_id ;
   u32 num_modes ;
   struct ext_fat_mode trace_lvl[4U] ;
} __attribute__((__packed__));
#line 2094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_fat_conf_params {
   u32 max_log_entries ;
   u32 log_entry_size ;
   u8 log_type ;
   u8 max_log_funs ;
   u8 max_log_ports ;
   u8 rsvd0 ;
   u32 supp_modes ;
   u32 num_modules ;
   struct ext_fat_modules module[27U] ;
} __attribute__((__packed__));
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_ext_fat_caps {
   struct be_cmd_req_hdr hdr ;
   u32 parameter_type ;
};
#line 2116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_ext_fat_caps {
   struct be_cmd_req_hdr hdr ;
   struct be_fat_conf_params set_params ;
};
#line 2138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_res_desc_hdr {
   u8 desc_type ;
   u8 desc_len ;
} __attribute__((__packed__));
#line 2143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_res_desc {
   struct be_res_desc_hdr hdr ;
   u8 rsvd0 ;
   u8 flags ;
   u8 link_num ;
   u8 mc_type ;
   u16 rsvd1 ;
   u8 nv_flags ;
   u8 rsvd2 ;
   __le16 nv_port ;
   u32 rsvd3[19U] ;
} __attribute__((__packed__));
#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_pcie_res_desc {
   struct be_res_desc_hdr hdr ;
   u8 rsvd0 ;
   u8 flags ;
   u16 rsvd1 ;
   u8 pf_num ;
   u8 rsvd2 ;
   u32 rsvd3 ;
   u8 sriov_state ;
   u8 pf_state ;
   u8 pf_type ;
   u8 rsvd4 ;
   u16 num_vfs ;
   u16 rsvd5 ;
   u32 rsvd6[17U] ;
} __attribute__((__packed__));
#line 2180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_nic_res_desc {
   struct be_res_desc_hdr hdr ;
   u8 rsvd1 ;
   u8 flags ;
   u8 vf_num ;
   u8 rsvd2 ;
   u8 pf_num ;
   u8 rsvd3 ;
   u16 unicast_mac_count ;
   u8 rsvd4[6U] ;
   u16 mcc_count ;
   u16 vlan_count ;
   u16 mcast_mac_count ;
   u16 txq_count ;
   u16 rq_count ;
   u16 rssq_count ;
   u16 lro_count ;
   u16 cq_count ;
   u16 toe_conn_count ;
   u16 eq_count ;
   u16 vlan_id ;
   u16 iface_count ;
   u32 cap_flags ;
   u8 link_param ;
   u8 rsvd6 ;
   u16 channel_id_param ;
   u32 bw_min ;
   u32 bw_max ;
   u8 acpi_params ;
   u8 wol_param ;
   u16 rsvd7 ;
   u16 tunnel_iface_count ;
   u16 direct_tenant_iface_count ;
   u32 rsvd8[6U] ;
} __attribute__((__packed__));
#line 2235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_func_config {
   struct be_cmd_req_hdr hdr ;
};
#line 2239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_func_config {
   struct be_cmd_resp_hdr hdr ;
   u32 desc_count ;
   u8 func_param[23232U] ;
};
#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_profile_config {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd ;
   u8 type ;
   u16 rsvd1 ;
};
#line 2260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_profile_config {
   struct be_cmd_resp_hdr hdr ;
   __le16 desc_count ;
   u16 rsvd ;
   u8 func_param[23232U] ;
};
#line 2268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_profile_config {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
   u32 desc_count ;
   u8 desc[176U] ;
} __attribute__((__packed__));
#line 2275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_active_profile {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
} __attribute__((__packed__));
#line 2280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_active_profile {
   struct be_cmd_resp_hdr hdr ;
   u16 active_profile_id ;
   u16 next_profile_id ;
} __attribute__((__packed__));
#line 2286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_enable_disable_vf {
   struct be_cmd_req_hdr hdr ;
   u8 enable ;
   u8 rsvd[3U] ;
};
#line 2292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_intr_set {
   struct be_cmd_req_hdr hdr ;
   u8 intr_enabled ;
   u8 rsvd[3U] ;
};
#line 2304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_if_desc {
   u32 if_id ;
   u32 cap_flags ;
   u32 en_flags ;
};
#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_iface_list {
   struct be_cmd_req_hdr hdr ;
};
#line 2314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_iface_list {
   struct be_cmd_req_hdr hdr ;
   u32 if_cnt ;
   struct be_if_desc if_desc ;
};
#line 2324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_req_ue_recovery {
   u32 uer ;
   u32 rsvd ;
};
#line 2329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_parameter_1048 {
   struct be_req_ue_recovery req ;
   u32 rsvd[2U] ;
};
#line 2329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_features {
   struct be_cmd_req_hdr hdr ;
   u32 features ;
   u32 parameter_len ;
   union __anonunion_parameter_1048 parameter ;
};
#line 2339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_resp_ue_recovery {
   u32 uer ;
   u16 ue2rp ;
   u16 ue2sr ;
};
#line 2345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_parameter_1049 {
   struct be_resp_ue_recovery resp ;
   u32 rsvd[2U] ;
};
#line 2345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_set_features {
   struct be_cmd_resp_hdr hdr ;
   u32 features ;
   u32 parameter_len ;
   union __anonunion_parameter_1049 parameter ;
};
#line 2358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_ll_link {
   struct be_cmd_req_hdr hdr ;
   u32 link_config ;
};
#line 2367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_manage_iface_filters {
   struct be_cmd_req_hdr hdr ;
   u8 op ;
   u8 rsvd0 ;
   u8 flags ;
   u8 rsvd1 ;
   u32 tunnel_iface_id ;
   u32 target_iface_id ;
   u8 mac[6U] ;
   u16 vlan_tag ;
   u32 tenant_id ;
   u32 filter_id ;
   u32 cap_flags ;
   u32 cap_control_flags ;
} __attribute__((__packed__));
#line 4632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
struct __anonstruct_desc_1060 {
   struct be_pcie_res_desc pcie ;
   struct be_nic_res_desc nic_vft ;
} __attribute__((__packed__));
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short ushort;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1073 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1075 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1127 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_1209 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1913 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 973 
struct rtable;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/icmpv6.h"
struct icmpv6_echo {
   __be16 identifier ;
   __be16 sequence ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/icmpv6.h"
struct icmpv6_nd_advt {
   __u32 reserved : 5 ;
   __u32 override : 1 ;
   __u32 solicited : 1 ;
   __u32 router : 1 ;
   __u32 reserved2 : 24 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/icmpv6.h"
struct icmpv6_nd_ra {
   __u8 hop_limit ;
   __u8 reserved : 3 ;
   __u8 router_pref : 2 ;
   __u8 home_agent : 1 ;
   __u8 other : 1 ;
   __u8 managed : 1 ;
   __be16 rt_lifetime ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/icmpv6.h"
union __anonunion_icmp6_dataun_1638 {
   __be32 un_data32[1U] ;
   __be16 un_data16[2U] ;
   __u8 un_data8[4U] ;
   struct icmpv6_echo u_echo ;
   struct icmpv6_nd_advt u_nd_advt ;
   struct icmpv6_nd_ra u_nd_ra ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/icmpv6.h"
struct icmp6hdr {
   __u8 icmp6_type ;
   __u8 icmp6_code ;
   __sum16 icmp6_cksum ;
   union __anonunion_icmp6_dataun_1638 icmp6_dataun ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/packed_struct.h"
struct __una_u32 {
   u32 x ;
} __attribute__((__packed__));
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6_opt_hdr {
   __u8 nexthdr ;
   __u8 hdrlen ;
} __attribute__((__packed__));
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct fib6_nh;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_2036 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_2036 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_2045 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_2045 __anonCompField_rtable_195 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hwmon-sysfs.h"
struct sensor_device_attribute {
   struct device_attribute dev_attr ;
   int index ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eq_entry {
   u32 evt ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_wrb {
   __le32 frag_pa_hi ;
   __le32 frag_pa_lo ;
   u32 rsvd0 ;
   __le32 frag_len ;
} __attribute__((__packed__));
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_hdr_wrb {
   __le32 dw[4U] ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_tx_compl {
   u32 dw[4U] ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_rx_d {
   u32 fragpa_hi ;
   u32 fragpa_lo ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_rx_compl {
   u32 dw[4U] ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_wrb_params {
   u32 features ;
   u16 vlan_tag ;
   u16 lso_mss ;
};
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_vxlan_port {
   struct list_head list ;
   __be16 port ;
   int port_aliases ;
};
#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
union __anonunion_info_2103 {
   __be16 vxlan_port ;
};
#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
struct be_cmd_work {
   struct work_struct work ;
   struct be_adapter *adapter ;
   union __anonunion_info_2103 info ;
};
#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_rxf_stats_v0 {
   u32 rx_bytes_lsd ;
   u32 rx_bytes_msd ;
   u32 rx_total_frames ;
   u32 rx_unicast_frames ;
   u32 rx_multicast_frames ;
   u32 rx_broadcast_frames ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_vlan_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rx_64_byte_packets ;
   u32 rx_65_127_byte_packets ;
   u32 rx_128_256_byte_packets ;
   u32 rx_256_511_byte_packets ;
   u32 rx_512_1023_byte_packets ;
   u32 rx_1024_1518_byte_packets ;
   u32 rx_1519_2047_byte_packets ;
   u32 rx_2048_4095_byte_packets ;
   u32 rx_4096_8191_byte_packets ;
   u32 rx_8192_9216_byte_packets ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 rx_non_rss_packets ;
   u32 rx_ipv4_packets ;
   u32 rx_ipv6_packets ;
   u32 rx_ipv4_bytes_lsd ;
   u32 rx_ipv4_bytes_msd ;
   u32 rx_ipv6_bytes_lsd ;
   u32 rx_ipv6_bytes_msd ;
   u32 rx_chute1_packets ;
   u32 rx_chute2_packets ;
   u32 rx_chute3_packets ;
   u32 rx_management_packets ;
   u32 rx_switched_unicast_packets ;
   u32 rx_switched_multicast_packets ;
   u32 rx_switched_broadcast_packets ;
   u32 tx_bytes_lsd ;
   u32 tx_bytes_msd ;
   u32 tx_unicastframes ;
   u32 tx_multicastframes ;
   u32 tx_broadcastframes ;
   u32 tx_pauseframes ;
   u32 tx_controlframes ;
   u32 tx_64_byte_packets ;
   u32 tx_65_127_byte_packets ;
   u32 tx_128_256_byte_packets ;
   u32 tx_256_511_byte_packets ;
   u32 tx_512_1023_byte_packets ;
   u32 tx_1024_1518_byte_packets ;
   u32 tx_1519_2047_byte_packets ;
   u32 tx_2048_4095_byte_packets ;
   u32 tx_4096_8191_byte_packets ;
   u32 tx_8192_9216_byte_packets ;
   u32 rx_fifo_overflow ;
   u32 rx_input_fifo_overflow ;
};
#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_rxf_stats_v0 {
   struct be_port_rxf_stats_v0 port[2U] ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 management_rx_port_packets ;
   u32 management_rx_port_bytes ;
   u32 management_rx_port_pause_frames ;
   u32 management_rx_port_errors ;
   u32 management_tx_port_packets ;
   u32 management_tx_port_bytes ;
   u32 management_tx_port_pause ;
   u32 management_rx_port_rxfifo_overflow ;
   u32 rx_drops_too_many_frags ;
   u32 rx_drops_invalid_ring ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rsvd0[7U] ;
   u32 port0_jabber_events ;
   u32 port1_jabber_events ;
   u32 rsvd1[6U] ;
};
#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_erx_stats_v0 {
   u32 rx_drops_no_fragments[44U] ;
   u32 rsvd[4U] ;
};
#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_pmem_stats {
   u32 eth_red_drops ;
   u32 rsvd[5U] ;
};
#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_hw_stats_v0 {
   struct be_rxf_stats_v0 rxf ;
   u32 rsvd[48U] ;
   struct be_erx_stats_v0 erx ;
   struct be_pmem_stats pmem ;
};
#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_stats_v0 {
   struct be_cmd_resp_hdr hdr ;
   struct be_hw_stats_v0 hw_stats ;
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_pport_stats {
   u32 tx_packets_lo ;
   u32 tx_packets_hi ;
   u32 tx_unicast_packets_lo ;
   u32 tx_unicast_packets_hi ;
   u32 tx_multicast_packets_lo ;
   u32 tx_multicast_packets_hi ;
   u32 tx_broadcast_packets_lo ;
   u32 tx_broadcast_packets_hi ;
   u32 tx_bytes_lo ;
   u32 tx_bytes_hi ;
   u32 tx_unicast_bytes_lo ;
   u32 tx_unicast_bytes_hi ;
   u32 tx_multicast_bytes_lo ;
   u32 tx_multicast_bytes_hi ;
   u32 tx_broadcast_bytes_lo ;
   u32 tx_broadcast_bytes_hi ;
   u32 tx_discards_lo ;
   u32 tx_discards_hi ;
   u32 tx_errors_lo ;
   u32 tx_errors_hi ;
   u32 tx_pause_frames_lo ;
   u32 tx_pause_frames_hi ;
   u32 tx_pause_on_frames_lo ;
   u32 tx_pause_on_frames_hi ;
   u32 tx_pause_off_frames_lo ;
   u32 tx_pause_off_frames_hi ;
   u32 tx_internal_mac_errors_lo ;
   u32 tx_internal_mac_errors_hi ;
   u32 tx_control_frames_lo ;
   u32 tx_control_frames_hi ;
   u32 tx_packets_64_bytes_lo ;
   u32 tx_packets_64_bytes_hi ;
   u32 tx_packets_65_to_127_bytes_lo ;
   u32 tx_packets_65_to_127_bytes_hi ;
   u32 tx_packets_128_to_255_bytes_lo ;
   u32 tx_packets_128_to_255_bytes_hi ;
   u32 tx_packets_256_to_511_bytes_lo ;
   u32 tx_packets_256_to_511_bytes_hi ;
   u32 tx_packets_512_to_1023_bytes_lo ;
   u32 tx_packets_512_to_1023_bytes_hi ;
   u32 tx_packets_1024_to_1518_bytes_lo ;
   u32 tx_packets_1024_to_1518_bytes_hi ;
   u32 tx_packets_1519_to_2047_bytes_lo ;
   u32 tx_packets_1519_to_2047_bytes_hi ;
   u32 tx_packets_2048_to_4095_bytes_lo ;
   u32 tx_packets_2048_to_4095_bytes_hi ;
   u32 tx_packets_4096_to_8191_bytes_lo ;
   u32 tx_packets_4096_to_8191_bytes_hi ;
   u32 tx_packets_8192_to_9216_bytes_lo ;
   u32 tx_packets_8192_to_9216_bytes_hi ;
   u32 tx_lso_packets_lo ;
   u32 tx_lso_packets_hi ;
   u32 rx_packets_lo ;
   u32 rx_packets_hi ;
   u32 rx_unicast_packets_lo ;
   u32 rx_unicast_packets_hi ;
   u32 rx_multicast_packets_lo ;
   u32 rx_multicast_packets_hi ;
   u32 rx_broadcast_packets_lo ;
   u32 rx_broadcast_packets_hi ;
   u32 rx_bytes_lo ;
   u32 rx_bytes_hi ;
   u32 rx_unicast_bytes_lo ;
   u32 rx_unicast_bytes_hi ;
   u32 rx_multicast_bytes_lo ;
   u32 rx_multicast_bytes_hi ;
   u32 rx_broadcast_bytes_lo ;
   u32 rx_broadcast_bytes_hi ;
   u32 rx_unknown_protos ;
   u32 rsvd_69 ;
   u32 rx_discards_lo ;
   u32 rx_discards_hi ;
   u32 rx_errors_lo ;
   u32 rx_errors_hi ;
   u32 rx_crc_errors_lo ;
   u32 rx_crc_errors_hi ;
   u32 rx_alignment_errors_lo ;
   u32 rx_alignment_errors_hi ;
   u32 rx_symbol_errors_lo ;
   u32 rx_symbol_errors_hi ;
   u32 rx_pause_frames_lo ;
   u32 rx_pause_frames_hi ;
   u32 rx_pause_on_frames_lo ;
   u32 rx_pause_on_frames_hi ;
   u32 rx_pause_off_frames_lo ;
   u32 rx_pause_off_frames_hi ;
   u32 rx_frames_too_long_lo ;
   u32 rx_frames_too_long_hi ;
   u32 rx_internal_mac_errors_lo ;
   u32 rx_internal_mac_errors_hi ;
   u32 rx_undersize_packets ;
   u32 rx_oversize_packets ;
   u32 rx_fragment_packets ;
   u32 rx_jabbers ;
   u32 rx_control_frames_lo ;
   u32 rx_control_frames_hi ;
   u32 rx_control_frames_unknown_opcode_lo ;
   u32 rx_control_frames_unknown_opcode_hi ;
   u32 rx_in_range_errors ;
   u32 rx_out_of_range_errors ;
   u32 rx_address_filtered ;
   u32 rx_vlan_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_invalid_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rx_ip_checksum_errors ;
   u32 rx_tcp_checksum_errors ;
   u32 rx_udp_checksum_errors ;
   u32 rx_non_rss_packets ;
   u32 rsvd_111 ;
   u32 rx_ipv4_packets_lo ;
   u32 rx_ipv4_packets_hi ;
   u32 rx_ipv6_packets_lo ;
   u32 rx_ipv6_packets_hi ;
   u32 rx_ipv4_bytes_lo ;
   u32 rx_ipv4_bytes_hi ;
   u32 rx_ipv6_bytes_lo ;
   u32 rx_ipv6_bytes_hi ;
   u32 rx_nic_packets_lo ;
   u32 rx_nic_packets_hi ;
   u32 rx_tcp_packets_lo ;
   u32 rx_tcp_packets_hi ;
   u32 rx_iscsi_packets_lo ;
   u32 rx_iscsi_packets_hi ;
   u32 rx_management_packets_lo ;
   u32 rx_management_packets_hi ;
   u32 rx_switched_unicast_packets_lo ;
   u32 rx_switched_unicast_packets_hi ;
   u32 rx_switched_multicast_packets_lo ;
   u32 rx_switched_multicast_packets_hi ;
   u32 rx_switched_broadcast_packets_lo ;
   u32 rx_switched_broadcast_packets_hi ;
   u32 num_forwards_lo ;
   u32 num_forwards_hi ;
   u32 rx_fifo_overflow ;
   u32 rx_input_fifo_overflow ;
   u32 rx_drops_too_many_frags_lo ;
   u32 rx_drops_too_many_frags_hi ;
   u32 rx_drops_invalid_queue ;
   u32 rsvd_141 ;
   u32 rx_drops_mtu_lo ;
   u32 rx_drops_mtu_hi ;
   u32 rx_packets_64_bytes_lo ;
   u32 rx_packets_64_bytes_hi ;
   u32 rx_packets_65_to_127_bytes_lo ;
   u32 rx_packets_65_to_127_bytes_hi ;
   u32 rx_packets_128_to_255_bytes_lo ;
   u32 rx_packets_128_to_255_bytes_hi ;
   u32 rx_packets_256_to_511_bytes_lo ;
   u32 rx_packets_256_to_511_bytes_hi ;
   u32 rx_packets_512_to_1023_bytes_lo ;
   u32 rx_packets_512_to_1023_bytes_hi ;
   u32 rx_packets_1024_to_1518_bytes_lo ;
   u32 rx_packets_1024_to_1518_bytes_hi ;
   u32 rx_packets_1519_to_2047_bytes_lo ;
   u32 rx_packets_1519_to_2047_bytes_hi ;
   u32 rx_packets_2048_to_4095_bytes_lo ;
   u32 rx_packets_2048_to_4095_bytes_hi ;
   u32 rx_packets_4096_to_8191_bytes_lo ;
   u32 rx_packets_4096_to_8191_bytes_hi ;
   u32 rx_packets_8192_to_9216_bytes_lo ;
   u32 rx_packets_8192_to_9216_bytes_hi ;
};
#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_resp_pport_stats {
   struct be_cmd_resp_hdr hdr ;
   struct lancer_pport_stats pport_stats ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_rxf_stats_v1 {
   u32 rsvd0[12U] ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_priority_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rsvd1[10U] ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 rsvd2[7U] ;
   u32 rx_switched_unicast_packets ;
   u32 rx_switched_multicast_packets ;
   u32 rx_switched_broadcast_packets ;
   u32 rsvd3[3U] ;
   u32 tx_pauseframes ;
   u32 tx_priority_pauseframes ;
   u32 tx_controlframes ;
   u32 rsvd4[10U] ;
   u32 rxpp_fifo_overflow_drop ;
   u32 rx_input_fifo_overflow_drop ;
   u32 pmem_fifo_overflow_drop ;
   u32 jabber_events ;
   u32 rsvd5[3U] ;
};
#line 1950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_rxf_stats_v1 {
   struct be_port_rxf_stats_v1 port[4U] ;
   u32 rsvd0[2U] ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 rsvd1[6U] ;
   u32 rx_drops_too_many_frags ;
   u32 rx_drops_invalid_ring ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rsvd2[14U] ;
};
#line 1965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_erx_stats_v1 {
   u32 rx_drops_no_fragments[68U] ;
   u32 rsvd[4U] ;
};
#line 1970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_rxf_stats_v2 {
   u32 rsvd0[10U] ;
   u32 roce_bytes_received_lsd ;
   u32 roce_bytes_received_msd ;
   u32 rsvd1[5U] ;
   u32 roce_frames_received ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_priority_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rsvd2[10U] ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 rsvd3[7U] ;
   u32 rx_switched_unicast_packets ;
   u32 rx_switched_multicast_packets ;
   u32 rx_switched_broadcast_packets ;
   u32 rsvd4[3U] ;
   u32 tx_pauseframes ;
   u32 tx_priority_pauseframes ;
   u32 tx_controlframes ;
   u32 rsvd5[10U] ;
   u32 rxpp_fifo_overflow_drop ;
   u32 rx_input_fifo_overflow_drop ;
   u32 pmem_fifo_overflow_drop ;
   u32 jabber_events ;
   u32 rsvd6[3U] ;
   u32 rx_drops_payload_size ;
   u32 rx_drops_clipped_header ;
   u32 rx_drops_crc ;
   u32 roce_drops_payload_len ;
   u32 roce_drops_crc ;
   u32 rsvd7[19U] ;
};
#line 2016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_rxf_stats_v2 {
   struct be_port_rxf_stats_v2 port[4U] ;
   u32 rsvd0[2U] ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 rsvd1[6U] ;
   u32 rx_drops_too_many_frags ;
   u32 rx_drops_invalid_ring ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rsvd2[35U] ;
};
#line 2031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_hw_stats_v1 {
   struct be_rxf_stats_v1 rxf ;
   u32 rsvd0[48U] ;
   struct be_erx_stats_v1 erx ;
   struct be_pmem_stats pmem ;
   u32 rsvd1[18U] ;
};
#line 2044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_stats_v1 {
   struct be_cmd_resp_hdr hdr ;
   struct be_hw_stats_v1 hw_stats ;
};
#line 2049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_erx_stats_v2 {
   u32 rx_drops_no_fragments[136U] ;
   u32 rsvd[3U] ;
};
#line 2054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_hw_stats_v2 {
   struct be_rxf_stats_v2 rxf ;
   u32 rsvd0[48U] ;
   struct be_erx_stats_v2 erx ;
   struct be_pmem_stats pmem ;
   u32 rsvd1[18U] ;
};
#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_stats_v2 {
   struct be_cmd_resp_hdr hdr ;
   struct be_hw_stats_v2 hw_stats ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_2126 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_2125 {
   struct __anonstruct_s_2126 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_2125 __anonCompField_net_generic_202 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_2129 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_2129 __anonCompField_fib6_info_203 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_2143 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_2143 __anonCompField_nh_info_204 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_2144 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_2144 __anonCompField_nexthop_205 ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
union __anonunion___u_2178 {
   u32 __val ;
   char __c[1U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2245 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_seeprom_read {
   struct be_cmd_req_hdr hdr ;
   u8 seeprom_data[1024U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
struct be_ethtool_stat {
   char desc[32U] ;
   int type ;
   int size ;
   int offset ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3257 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3259 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_hw.h"
enum be_interrupt_mode {
    BE_INTERRUPT_MODE_MSIX = 0,
    BE_INTERRUPT_MODE_INTX = 1,
    BE_INTERRUPT_MODE_MSI = 2
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.h"
struct __anonstruct_msix_4284 {
   int num_vectors ;
   int start_vector ;
   u32 vector_list[32U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.h"
struct be_dev_info {
   u8 *db ;
   u64 unmapped_db ;
   u32 db_page_size ;
   u32 db_total_size ;
   u64 dpp_unmapped_addr ;
   u32 dpp_unmapped_len ;
   struct pci_dev *pdev ;
   struct net_device *netdev ;
   u8 mac_addr[6U] ;
   u32 dev_family ;
   enum be_interrupt_mode intr_mode ;
   struct __anonstruct_msix_4284 msix ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.h"
struct ocrdma_driver {
   unsigned char name[32U] ;
   u32 be_abi_version ;
   struct ocrdma_dev *(*add)(struct be_dev_info *) ;
   void (*remove)(struct ocrdma_dev *) ;
   void (*state_change_handler)(struct ocrdma_dev *, u32 ) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_6072 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_6072 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_6073 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_6073 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_6089 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_6089 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_6093 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_6093 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_6094 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_6095 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_6094 __anonCompField_media_link_90 ;
   union __anonunion_6095 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_6097 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_6096 {
   struct __anonstruct_dev_6097 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_6096 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_6111 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_6112 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_6110 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_6111 i2c ;
   struct __anonstruct_custom_6112 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_6110 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_7013 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_7013 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_4 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_be_intx_12 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_be_do_flash_14 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_be_driver_15 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 487 
int sscanf(char *, char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void atomic_dec(atomic_t *v);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_spin_lock_bh_mcc_cq_lock_of_be_adapter(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_spin_unlock_bh_mcc_cq_lock_of_be_adapter(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
#line 838 
static void cif_mutex_lock_mcc_lock_of_be_adapter(struct mutex *lock);
#line 28 
#line 845 
static int cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(struct mutex *lock);
#line 28 
#line 878 
static int cif_mutex_lock_interruptible_mcc_lock_of_be_adapter(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
#line 103 
void wait_for_completion(struct completion *);
#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 864  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_mutex_unlock_mcc_lock_of_be_adapter(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_mutex_unlock_mbox_lock_of_be_adapter(struct mutex *lock);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 32 
unsigned int ioread32(void *);
#line 53 
#line 53 
void iowrite32(u32, void *);
#line 1703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1703 
void dev_printk(char *, struct device *, char * , ...);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 60 
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
__inline static void ssleep(unsigned int seconds)
{
  #line 65 
  msleep(seconds * 1000U);
  #line 66 
  return;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.h"
#line 5043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_roce_mcc_cmd(void *netdev_handle, void *wrb_payload, int wrb_payload_size, u16 *cmd_status, u16 *ext_status);
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u32 MODULO(u32 val, u32 limit)
{
  #line 138 
  if ((long)(((limit + 4294967295U) & limit) != 0U) != 0L) {
    #line 139 
    ldv_inline_asm();
    #line 140 
    ldv_inline_asm();
    #line 141 
    ldv_inline_asm();
    #line 138 
    ;
  }
  #line 139 
  return (limit + 4294967295U) & val;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void index_inc(u32 *index, u32 limit)
{
  #line 149 
  *index = MODULO(*index + 1U,limit);
  #line 150 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void *queue_head_node(struct be_queue_info *q)
{
  #line 154 
  return q->dma_mem.va + (unsigned long)(q->head * q->entry_size);
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void *queue_tail_node(struct be_queue_info *q)
{
  #line 159 
  return q->dma_mem.va + (unsigned long)(q->tail * q->entry_size);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void *queue_index_node(struct be_queue_info *q, u16 index)
{
  #line 164 
  return q->dma_mem.va + (unsigned long)((unsigned int)index * q->entry_size);
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void queue_head_inc(struct be_queue_info *q)
{
  #line 169 
  index_inc(& q->head,q->len);
  #line 170 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void index_dec(u32 *index, u32 limit)
{
  #line 174 
  *index = MODULO(*index + 4294967295U,limit);
  #line 175 
  return;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void queue_tail_inc(struct be_queue_info *q)
{
  #line 179 
  index_inc(& q->tail,q->len);
  #line 180 
  return;
}

#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u32 amap_mask(u32 bitsize)
{
  #line 838 
  unsigned int tmp;
  #line 838 
  if (bitsize != 32U) 
                      #line 838 
                      tmp = (unsigned int)((1 << bitsize) + -1); else 
                                                                   #line 838 
                                                                   tmp = 4294967295U;
  #line 838 
  return tmp;
}

#line 842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void amap_set(void *ptr, u32 dw_offset, u32 mask, u32 offset, u32 value)
{
  #line 844 
  u32 *dw = (u32 *)ptr + (unsigned long)dw_offset;
  #line 845 
  *dw &= ~ (mask << offset);
  #line 846 
  *dw |= (mask & value) << offset;
  #line 847 
  return;
}

#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u32 amap_get(void *ptr, u32 dw_offset, u32 mask, u32 offset)
{
  #line 858 
  u32 *dw = (u32 *)ptr;
  #line 859 
  return (*(dw + (unsigned long)dw_offset) >> offset) & mask;
}

#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void swap_dws(void *wrb, int len)
{
  #line 884 
  return;
}

#line 946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u8 be_check_error(struct be_adapter *adapter, u32 err_type)
{
  #line 948 
  return (unsigned char)((int)adapter->err_flags & (int)((unsigned char)err_type));
}

#line 951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void be_set_error(struct be_adapter *adapter, int err_type)
{
  #line 953 
  struct net_device *netdev = adapter->netdev;
  #line 955 
  adapter->err_flags = (unsigned char)((int)adapter->err_flags | err_type);
  #line 956 
  netif_carrier_off(netdev);
  #line 958 
  _dev_info(& (adapter->pdev)->dev,(char *)"%s: Link down\n",(char *)(& netdev->name));
  #line 959 
  return;
}

#line 971 
#line 971 
void be_cq_notify(struct be_adapter *adapter, u16 qid, bool arm, u16 num_popped);
#line 973 
#line 973 
void be_link_status_update(struct be_adapter *adapter, u8 link_status);
#line 974 
#line 974 
void be_parse_stats(struct be_adapter *adapter);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
char *be_misconfig_evt_port_state[6U];
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
__inline static bool be_is_mc(struct be_adapter *adapter)
{
  #line 2232 
  return (_Bool)((unsigned int)adapter->mc_type > 1U);
}

#line 2383 
#line 708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
u16 be_POST_stage_get(struct be_adapter *adapter);
#line 2385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_fw_wait_ready(struct be_adapter *adapter);
#line 2386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_mac_addr_query(struct be_adapter *adapter, u8 *mac_addr, bool permanent, u32 if_handle, u32 pmac_id);
#line 2388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_pmac_add(struct be_adapter *adapter, u8 *mac_addr, u32 if_id, u32 *pmac_id, u32 domain);
#line 2390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_pmac_del(struct be_adapter *adapter, u32 if_id, int pmac_id, u32 dom);
#line 2392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_if_create(struct be_adapter *adapter, u32 cap_flags, u32 en_flags, u32 *if_handle, u32 domain);
#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_if_destroy(struct be_adapter *adapter, int interface_id, u32 domain);
#line 2395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_eq_create(struct be_adapter *adapter, struct be_eq_obj *eqo);
#line 2396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_cq_create(struct be_adapter *adapter, struct be_queue_info *cq, struct be_queue_info *eq, bool no_delay, int coalesce_wm);
#line 2399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_mccq_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq);
#line 2401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_txq_create(struct be_adapter *adapter, struct be_tx_obj *txo);
#line 2402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rxq_create(struct be_adapter *adapter, struct be_queue_info *rxq, u16 cq_id, u16 frag_size, u32 if_id, u32 rss, u8 *rss_id);
#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_q_destroy(struct be_adapter *adapter, struct be_queue_info *q, int queue_type);
#line 2406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rxq_destroy(struct be_adapter *adapter, struct be_queue_info *q);
#line 2407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_link_status_query(struct be_adapter *adapter, u16 *link_speed, u8 *link_status, u32 dom);
#line 2410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd);
#line 2411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_get_pport_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd);
#line 2413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fw_ver(struct be_adapter *adapter);
#line 2414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_modify_eqd(struct be_adapter *adapter, struct be_set_eqd *set_eqd, int num);
#line 2415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_vlan_config(struct be_adapter *adapter, u32 if_id, u16 *vtag_array, u32 num, u32 domain);
#line 2417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value);
#line 2418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_flow_control(struct be_adapter *adapter, u32 tx_fc, u32 rx_fc);
#line 2419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_flow_control(struct be_adapter *adapter, u32 *tx_fc, u32 *rx_fc);
#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_fw_cfg(struct be_adapter *adapter);
#line 2421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_reset_function(struct be_adapter *adapter);
#line 2422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rss_config(struct be_adapter *adapter, u8 *rsstable, u32 rss_hash_opts, u16 table_size, u8 *rss_hkey);
#line 2424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_process_mcc(struct be_adapter *adapter);
#line 2425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_beacon_state(struct be_adapter *adapter, u8 port_num, u8 bcn, u8 sts, u8 state);
#line 2427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_beacon_state(struct be_adapter *adapter, u8 port_num, u32 *state);
#line 2429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_read_port_transceiver_data(struct be_adapter *adapter, u8 page_num, u8 *data);
#line 2431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_cable_type(struct be_adapter *adapter);
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_sfp_info(struct be_adapter *adapter);
#line 2433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_read_object(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 data_size, u32 data_offset, char *obj_name, u32 *data_read, u32 *eof, u8 *addn_status);
#line 2436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_fw_download(struct be_adapter *adapter, struct firmware *fw);
#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_fw_download(struct be_adapter *adapter, struct firmware *fw);
#line 2438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_enable_magic_wol(struct be_adapter *adapter, u8 *mac, struct be_dma_mem *nonemb_cmd);
#line 2440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_fw_init(struct be_adapter *adapter);
#line 2441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_fw_clean(struct be_adapter *adapter);
#line 2442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
void be_async_mcc_enable(struct be_adapter *adapter);
#line 2443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
void be_async_mcc_disable(struct be_adapter *adapter);
#line 2444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_loopback_test(struct be_adapter *adapter, u32 port_num, u32 loopback_type, u32 pkt_size, u32 num_pkts, u64 pattern);
#line 2447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_ddr_dma_test(struct be_adapter *adapter, u64 pattern, u32 byte_cnt, struct be_dma_mem *cmd);
#line 2449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_seeprom_data(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd);
#line 2451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_loopback(struct be_adapter *adapter, u8 port_num, u8 loopback_type, u8 enable);
#line 2453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_phy_info(struct be_adapter *adapter);
#line 2454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_config_qos(struct be_adapter *adapter, u32 max_rate, u16 link_speed, u8 domain);
#line 2456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 2456 
void be_detect_error(struct be_adapter *adapter);
#line 2457 
#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_die_temperature(struct be_adapter *adapter);
#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_cntl_attributes(struct be_adapter *adapter);
#line 2459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fat_dump_len(struct be_adapter *adapter, u32 *dump_size);
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 1790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fat_dump(struct be_adapter *adapter, u32 buf_len, void *buf);
#line 2461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_req_native_mode(struct be_adapter *adapter);
#line 2462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fn_privileges(struct be_adapter *adapter, u32 *privilege, u32 domain);
#line 2464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_fn_privileges(struct be_adapter *adapter, u32 privileges, u32 domain);
#line 2466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_mac_from_list(struct be_adapter *adapter, u8 *mac, bool *pmac_id_valid, u32 *pmac_id, u32 if_handle, u8 domain);
#line 2469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_active_mac(struct be_adapter *adapter, u32 curr_pmac_id, u8 *mac, u32 if_handle, bool active, u32 domain);
#line 2471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_perm_mac(struct be_adapter *adapter, u8 *mac);
#line 2472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_mac_list(struct be_adapter *adapter, u8 *mac_array, u8 mac_count, u32 domain);
#line 2474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_mac(struct be_adapter *adapter, u8 *mac, int if_id, u32 dom);
#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_hsw_config(struct be_adapter *adapter, u16 pvid, u32 domain, u16 intf_id, u16 hsw_mode, u8 spoofchk);
#line 2477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 3935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_hsw_config(struct be_adapter *adapter, u16 *pvid, u32 domain, u16 intf_id, u8 *mode, bool *spoofchk);
#line 2479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_acpi_wol_cap(struct be_adapter *adapter);
#line 2480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_fw_log_level(struct be_adapter *adapter, u32 level);
#line 2481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fw_log_level(struct be_adapter *adapter);
#line 2482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd);
#line 2484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd, struct be_fat_conf_params *configs);
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_physdev_ctrl(struct be_adapter *adapter, u32 mask);
#line 2488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_initiate_dump(struct be_adapter *adapter);
#line 2489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_delete_dump(struct be_adapter *adapter);
#line 2490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
bool dump_present(struct be_adapter *adapter);
#line 2492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_port_name(struct be_adapter *adapter);
#line 2493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_func_config(struct be_adapter *adapter, struct be_resources *res);
#line 2495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_profile_config(struct be_adapter *adapter, struct be_resources *res, struct be_port_resources *port_res, u8 profile_type, u8 query, u8 domain);
#line 2499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_active_profile(struct be_adapter *adapter, u16 *profile_id);
#line 2500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_if_id(struct be_adapter *adapter, struct be_vf_cfg *vf_cfg, int vf_num);
#line 2502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_enable_vf(struct be_adapter *adapter, u8 domain);
#line 2503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_intr_set(struct be_adapter *adapter, bool intr_enable);
#line 2504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_logical_link_config(struct be_adapter *adapter, int link_state, u8 domain);
#line 2506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_vxlan_port(struct be_adapter *adapter, __be16 port);
#line 2507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_manage_iface(struct be_adapter *adapter, u32 iface, u8 op);
#line 2508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_sriov_config(struct be_adapter *adapter, struct be_resources pool_res, u16 num_vfs_0, struct be_resources *vft_res);
#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
#line 4993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_features(struct be_adapter *adapter);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
char *be_misconfig_evt_port_state[6U] = {(char *)"Physical Link is functional", (char *)"Optics faulted/incorrectly installed/not installed - Reseat optics. If issue not resolved, replace.", (char *)"Optics of two types installed \342\200\223 Remove one optic or install matching pair of optics.", (char *)"Incompatible optics \342\200\223 Replace with compatible optics for card to function.", (char *)"Unqualified optics \342\200\223 Replace with Avago optics for Warranty and Technical Support.", (char *)"Uncertified optics \342\200\223 Replace with Avago-certified optics to enable link operation."};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static char *be_port_misconfig_evt_severity[4U] = {(char *)"KERN_WARN", (char *)"KERN_INFO", (char *)"KERN_ERR", (char *)"KERN_WARN"};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static char *phy_state_oper_desc[3U] = {(char *)"Link is non-operational", (char *)"Link is operational", (char *)""};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_cmd_priv_map cmd_priv_map[10U] = {{.opcode = (unsigned char)12U, .subsystem = (unsigned char)3U, .priv_mask = 1800U}, {.opcode = (unsigned char)37U, .subsystem = (unsigned char)1U, .priv_mask = 1794U}, {.opcode = (unsigned char)36U, .subsystem = (unsigned char)1U, .priv_mask = 1800U}, {.opcode = (unsigned char)18U, .subsystem = (unsigned char)3U, .priv_mask = 1800U}, {.opcode = (unsigned char)102U, .subsystem = (unsigned char)1U, .priv_mask = 1800U}, {.opcode = (unsigned char)17U, .subsystem = (unsigned char)11U, .priv_mask = 1536U}, {.opcode = (unsigned char)18U, .subsystem = (unsigned char)11U, .priv_mask = 1536U}, {.opcode = (unsigned char)19U, .subsystem = (unsigned char)11U, .priv_mask = 1536U}, {.opcode = (unsigned char)153U, .subsystem = (unsigned char)1U, .priv_mask = 1792U}, {.opcode = (unsigned char)125U, .subsystem = (unsigned char)1U, .priv_mask = 512U}};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_cmd_allowed(struct be_adapter *adapter, u8 opcode, u8 subsystem)
{
  #line 101 
  int i;
  #line 102 
  int num_entries = 10;
  #line 103 
  u32 cmd_privileges = adapter->cmd_privileges;
  #line 105 
  i = 0;
  #line 105 
  while (i < num_entries) {
    #line 106 
    if ((int)cmd_priv_map[i].opcode == (int)opcode && (int)cmd_priv_map[i].subsystem == (int)subsystem) 
      #line 108 
      if ((cmd_priv_map[i].priv_mask & cmd_privileges) == 0U) 
                                                              #line 109 
                                                              return (_Bool)0;
    #line 105 
    i ++;
  }
  #line 111 
  return (_Bool)1;
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static void *embedded_payload(struct be_mcc_wrb *wrb)
{
  #line 116 
  return (void *)(& wrb->payload.embedded_payload);
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mcc_notify(struct be_adapter *adapter)
{
  #line 121 
  struct be_queue_info *mccq = & adapter->mcc_obj.q;
  #line 122 
  u32 val = 0U;
  #line 124 
  if ((unsigned int)be_check_error(adapter,15U) != 0U) 
                                                       #line 125 
                                                       return -5;
  #line 127 
  val = (mccq->id & 2047U) | val;
  #line 128 
  val |= 65536U;
  #line 129 
  ldv_inline_asm();
  #line 131 
  iowrite32(val,(void *)(adapter->db + 320U));
  #line 133 
  return 0;
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool be_mcc_compl_is_new(struct be_mcc_compl *compl)
{
  #line 141 
  u32 flags;
  #line 143 
  if (compl->flags != 0U) {
    #line 144 
    flags = compl->flags;
    #line 145 
    if (((unsigned long)flags & 2147483648UL) != 0UL) {
      #line 146 
      compl->flags = flags;
      #line 147 
      return (_Bool)1;
    }
  }
  #line 150 
  return (_Bool)0;
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static void be_mcc_compl_use(struct be_mcc_compl *compl)
{
  #line 156 
  compl->flags = 0U;
  #line 157 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_cmd_resp_hdr *be_decode_resp_hdr(u32 tag0, u32 tag1)
{
  #line 161 
  unsigned long addr;
  #line 163 
  addr = (unsigned long)tag1;
  #line 164 
  addr = (addr << 32) | (unsigned long)tag0;
  #line 165 
  return (struct be_cmd_resp_hdr *)addr;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_skip_err_log(u8 opcode, u16 base_status, u16 addl_status)
{
  #line 170 
  if ((((unsigned int)base_status == 66U || (unsigned int)base_status == 2U) || ((unsigned int)addl_status == 74U || (unsigned int)addl_status == 171U)) || (unsigned int)opcode == 7U && ((unsigned int)base_status == 3U || (unsigned int)addl_status == 77U)) 
    #line 177 
    return (_Bool)1; else 
                          #line 179 
                          return (_Bool)0;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_cmd_process(struct be_adapter *adapter, struct be_mcc_compl *compl, struct be_cmd_resp_hdr *resp_hdr)
{
  #line 189 
  unsigned int tmp;
  #line 189 
  if (compl->status != 0U) 
                           #line 189 
                           tmp = (enum mcc_base_status)(compl->status & 65535U); else 
                                                                    #line 189 
                                                                    tmp = (unsigned int)MCC_STATUS_SUCCESS;
  #line 189 
  enum mcc_base_status base_status = tmp;
  #line 190 
  u8 opcode = (unsigned char)0U;
  #line 190 
  u8 subsystem = (unsigned char)0U;
  #line 192 
  if (resp_hdr != (struct be_cmd_resp_hdr *)0) {
    #line 193 
    opcode = resp_hdr->opcode;
    #line 194 
    subsystem = resp_hdr->subsystem;
  }
  #line 197 
  if ((unsigned int)opcode == 18U && (unsigned int)subsystem == 11U) {
    #line 199 
    complete(& adapter->et_cmd_compl);
    #line 200 
    return;
  }
  #line 203 
  if ((unsigned int)opcode == 19U && (unsigned int)subsystem == 11U) {
    #line 205 
    complete(& adapter->et_cmd_compl);
    #line 206 
    return;
  }
  #line 209 
  if (((unsigned int)opcode == 7U || (unsigned int)opcode == 172U) && (unsigned int)subsystem == 1U) {
    #line 212 
    adapter->flash_status = compl->status;
    #line 213 
    complete(& adapter->et_cmd_compl);
    #line 214 
    return;
  }
  #line 217 
  if (((unsigned int)opcode == 4U || (unsigned int)opcode == 18U) && ((unsigned int)subsystem == 3U && base_status == (unsigned int)MCC_STATUS_SUCCESS)) {
    #line 221 
    be_parse_stats(adapter);
    #line 222 
    adapter->stats_cmd_sent = (_Bool)0;
    #line 223 
    return;
  }
  #line 226 
  if ((unsigned int)opcode == 121U && (unsigned int)subsystem == 1U) {
    #line 228 
    if (base_status == (unsigned int)MCC_STATUS_SUCCESS) {
      #line 229 
      struct be_cmd_resp_get_cntl_addnl_attribs *resp = (struct be_cmd_resp_get_cntl_addnl_attribs *)resp_hdr;
      #line 231 
      adapter->hwmon_info.be_on_die_temp = resp->on_die_temperature;
    }
    else {
      #line 234 
      adapter->be_get_temp_freq = 0;
      #line 235 
      adapter->hwmon_info.be_on_die_temp = (unsigned char)255U;
    }
    #line 238 
    return;
  }
  #line 240 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mcc_compl_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 245 
  enum mcc_base_status base_status;
  #line 246 
  enum mcc_addl_status addl_status;
  #line 247 
  struct be_cmd_resp_hdr *resp_hdr;
  #line 248 
  u8 opcode = (unsigned char)0U;
  #line 248 
  u8 subsystem = (unsigned char)0U;
  #line 252 
  swap_dws((void *)compl,4);
  #line 254 
  if (compl->status != 0U) 
                           #line 254 
                           base_status = (enum mcc_base_status)(compl->status & 65535U); else 
                                                                    #line 254 
                                                                    base_status = MCC_STATUS_SUCCESS;
  #line 255 
  if (compl->status != 0U) 
                           #line 255 
                           addl_status = (enum mcc_addl_status)((compl->status >> 16) & 255U); else 
                                                                    #line 255 
                                                                    addl_status = (enum mcc_addl_status)0;
  #line 257 
  resp_hdr = be_decode_resp_hdr(compl->tag0,compl->tag1);
  #line 258 
  if (resp_hdr != (struct be_cmd_resp_hdr *)0) {
    #line 259 
    opcode = resp_hdr->opcode;
    #line 260 
    subsystem = resp_hdr->subsystem;
  }
  #line 263 
  be_async_cmd_process(adapter,compl,resp_hdr);
  #line 265 
  if (base_status != (unsigned int)MCC_STATUS_SUCCESS) {
    #line 266 
    if (! be_skip_err_log((unsigned char)((int)opcode),
                      (unsigned short)((int)((unsigned short)base_status)),
                      (unsigned short)((int)((unsigned short)addl_status)))) 
      #line 267 
      if (base_status == (unsigned int)MCC_STATUS_UNAUTHORIZED_REQUEST || addl_status == (unsigned int)MCC_ADDL_STATUS_INSUFFICIENT_PRIVILEGES) 
        #line 269 
        _dev_warn(& (adapter->pdev)->dev,(char *)"VF is not privileged to issue opcode %d-%d\n",(int)opcode,(int)subsystem); else 
                                                                    #line 273 
                                                                    _dev_err(& (adapter->pdev)->dev,(char *)"opcode %d-%d failed:status %d-%d\n",(int)opcode,(int)subsystem,(unsigned int)base_status,(unsigned int)addl_status);
  }
  #line 278 
  return (int)compl->status;
}

#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_link_state_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 285 
  struct be_async_event_link_state *evt = (struct be_async_event_link_state *)compl;
  #line 289 
  adapter->phy.link_speed = -1;
  #line 296 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && ((int)evt->port_link_status & 2) == 0) 
    #line 298 
    return;
  #line 303 
  if (((unsigned long)adapter->flags & 2UL) != 0UL) 
                                                    #line 304 
                                                    be_link_status_update(adapter,(unsigned char)((int)evt->port_link_status & 1));
  #line 306 
  return;
}

#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_port_misconfig_event_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 318 
  u8 phy_state_info;
  #line 319 
  u8 new_phy_state;
  #line 311 
  struct be_async_event_misconfig_port *evt = (struct be_async_event_misconfig_port *)compl;
  #line 313 
  u32 sfp_misconfig_evt_word1 = evt->event_data_word1;
  #line 314 
  u32 sfp_misconfig_evt_word2 = evt->event_data_word2;
  #line 315 
  u8 phy_oper_state = (unsigned char)2U;
  #line 316 
  struct device *dev = & (adapter->pdev)->dev;
  #line 317 
  u8 msg_severity = (unsigned char)1U;
  #line 321 
  new_phy_state = (unsigned char)(sfp_misconfig_evt_word1 >> (int)adapter->hba_port_num * 8);
  #line 324 
  if ((int)adapter->phy_state == (int)new_phy_state) 
                                                     #line 325 
                                                     return;
  #line 327 
  adapter->phy_state = new_phy_state;
  #line 330 
  if (sfp_misconfig_evt_word2 == 0U) 
                                     #line 331 
                                     goto log_message;
  #line 333 
  phy_state_info = (unsigned char)(sfp_misconfig_evt_word2 >> (int)adapter->hba_port_num * 8);
  #line 336 
  if (((int)phy_state_info & 128) != 0) {
    #line 337 
    msg_severity = (unsigned char)((unsigned int)((unsigned char)((int)phy_state_info >> 1)) & 3U);
    #line 339 
    if ((unsigned int)new_phy_state + 252U <= 1U) 
                                                  #line 340 
                                                  phy_oper_state = (unsigned char)((unsigned int)phy_state_info & 1U);
  }
  #line 343 
  log_message: 
               #line 343 
  ;
  #line 347 
  if ((unsigned int)new_phy_state > 5U) 
                                        #line 348 
                                        dev_printk(be_port_misconfig_evt_severity[(int)msg_severity],dev,(char *)"Port %c: Unrecognized Optics state: 0x%x. %s",(int)adapter->port_name,(int)new_phy_state,phy_state_oper_desc[(int)phy_oper_state]); else 
                                                                    #line 354 
                                                                    dev_printk(be_port_misconfig_evt_severity[(int)msg_severity],dev,(char *)"Port %c: %s %s",(int)adapter->port_name,be_misconfig_evt_port_state[(int)new_phy_state],phy_state_oper_desc[(int)phy_oper_state]);
  #line 361 
  if ((unsigned int)new_phy_state + 253U <= 2U) 
                                                #line 362 
                                                adapter->flags |= 1024U;
  #line 363 
  return;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_cos_priority_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 369 
  struct be_async_event_grp5_cos_priority *evt = (struct be_async_event_grp5_cos_priority *)compl;
  #line 372 
  if ((unsigned int)evt->valid != 0U) {
    #line 373 
    adapter->vlan_prio_bmap = evt->available_priority_bmap;
    #line 374 
    adapter->recommended_prio_bits = (unsigned short)((int)((unsigned short)evt->reco_default_priority) << 13U);
  }
  #line 377 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_qos_speed_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 383 
  struct be_async_event_grp5_qos_link_speed *evt = (struct be_async_event_grp5_qos_link_speed *)compl;
  #line 386 
  if (adapter->phy.link_speed >= 0 && (unsigned int)evt->physical_port == adapter->port_num) 
    #line 388 
    adapter->phy.link_speed = (int)evt->qos_link_speed * 10;
  #line 389 
  return;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_pvid_state_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 395 
  struct be_async_event_grp5_pvid_state *evt = (struct be_async_event_grp5_pvid_state *)compl;
  #line 398 
  if ((unsigned int)evt->enabled != 0U) {
    #line 399 
    adapter->pvid = (unsigned short)((unsigned int)evt->tag & 4095U);
    #line 400 
    _dev_info(& (adapter->pdev)->dev,(char *)"LPVID: %d\n",(int)adapter->pvid);
  }
  else 
       #line 402 
       adapter->pvid = (unsigned short)0U;
  #line 403 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_fw_control_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 410 
  struct be_async_fw_control *evt = (struct be_async_fw_control *)compl;
  #line 411 
  u32 evt_dw1 = evt->event_data_word1;
  #line 413 
  if ((evt_dw1 & 4U) != 0U) {
    #line 414 
    adapter->flags |= 4096U;
    #line 415 
    adapter->bmc_filt_mask = evt->event_data_word2;
  }
  else 
       #line 417 
       adapter->flags &= 4294963199U;
  #line 418 
  return;
}

#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_evt_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 424 
  u8 event_type = (unsigned char)(compl->flags >> 16);
  #line 427 
  switch ((int)event_type) {
    #line 428 
    case 2: 
            #line 428 
    ;
    #line 429 
    be_async_grp5_cos_priority_process(adapter,compl);
    #line 430 
    break;
    #line 431 
    case 1: 
            #line 431 
    ;
    #line 432 
    be_async_grp5_qos_speed_process(adapter,compl);
    #line 433 
    break;
    #line 434 
    case 3: 
            #line 434 
    ;
    #line 435 
    be_async_grp5_pvid_state_process(adapter,compl);
    #line 436 
    break;
    #line 438 
    case 5: 
            #line 438 
    ;
    #line 439 
    be_async_grp5_fw_control_process(adapter,compl);
    #line 440 
    break;
    #line 441 
    default: 
             #line 441 
    ;
    #line 442 
    break;
  }
  #line 444 
  return;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_dbg_evt_process(struct be_adapter *adapter, struct be_mcc_compl *cmp)
{
  #line 449 
  u8 event_type = (unsigned char)0U;
  #line 450 
  struct be_async_event_qnq *evt = (struct be_async_event_qnq *)cmp;
  #line 452 
  event_type = (unsigned char)(cmp->flags >> 16);
  #line 455 
  switch ((int)event_type) {
    #line 456 
    case 1: 
            #line 456 
    ;
    #line 457 
    if ((unsigned int)evt->valid != 0U) 
                                        #line 458 
                                        adapter->qnq_vid = evt->vlan_tag;
    #line 459 
    adapter->flags |= 128U;
    #line 460 
    break;
    #line 461 
    default: 
             #line 461 
    ;
    #line 462 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Unknown debug event 0x%x!\n",(int)event_type);
    #line 464 
    break;
  }
  #line 466 
  return;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_sliport_evt_process(struct be_adapter *adapter, struct be_mcc_compl *cmp)
{
  #line 471 
  u8 event_type = (unsigned char)(cmp->flags >> 16);
  #line 474 
  if ((unsigned int)event_type == 9U) 
                                      #line 475 
                                      be_async_port_misconfig_event_process(adapter,cmp);
  #line 476 
  return;
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_link_state_evt(u32 flags)
{
  #line 480 
  return (_Bool)(((flags >> 8) & 255U) == 1U);
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_grp5_evt(u32 flags)
{
  #line 486 
  return (_Bool)(((flags >> 8) & 255U) == 5U);
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_dbg_evt(u32 flags)
{
  #line 492 
  return (_Bool)(((flags >> 8) & 255U) == 6U);
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_sliport_evt(u32 flags)
{
  #line 498 
  return (_Bool)(((flags >> 8) & 255U) == 17U);
}

#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_mcc_event_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  #line 505 
  if ((int)is_link_state_evt(compl->flags) != 0) 
                                                 #line 506 
                                                 be_async_link_state_process(adapter,compl);
  else {
    #line 507 
    if ((int)is_grp5_evt(compl->flags) != 0) 
                                             #line 508 
                                             be_async_grp5_evt_process(adapter,compl);
    else {
      #line 509 
      if ((int)is_dbg_evt(compl->flags) != 0) 
                                              #line 510 
                                              be_async_dbg_evt_process(adapter,compl);
      else {
        #line 511 
        if ((int)is_sliport_evt(compl->flags) != 0) 
                                                    #line 512 
                                                    be_async_sliport_evt_process(adapter,compl);
      }
    }
  }
  #line 513 
  return;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_mcc_compl *be_mcc_compl_get(struct be_adapter *adapter)
{
  #line 517 
  struct be_queue_info *mcc_cq = & adapter->mcc_obj.cq;
  #line 518 
  struct be_mcc_compl *compl = queue_tail_node(mcc_cq);
  #line 520 
  if ((int)be_mcc_compl_is_new(compl) != 0) {
    #line 521 
    queue_tail_inc(mcc_cq);
    #line 522 
    return compl;
  }
  #line 524 
  return (struct be_mcc_compl *)0;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
void be_async_mcc_enable(struct be_adapter *adapter)
{
  #line 529 
  cif_spin_lock_bh_mcc_cq_lock_of_be_adapter(& adapter->mcc_cq_lock);
  #line 531 
  be_cq_notify(adapter,(unsigned short)((int)((unsigned short)adapter->mcc_obj.cq.id)),(_Bool)1,(unsigned short)0);
  #line 532 
  adapter->mcc_obj.rearm_cq = (_Bool)1;
  #line 534 
  cif_spin_unlock_bh_mcc_cq_lock_of_be_adapter(& adapter->mcc_cq_lock);
  #line 535 
  return;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
void be_async_mcc_disable(struct be_adapter *adapter)
{
  #line 539 
  cif_spin_lock_bh_mcc_cq_lock_of_be_adapter(& adapter->mcc_cq_lock);
  #line 541 
  adapter->mcc_obj.rearm_cq = (_Bool)0;
  #line 542 
  be_cq_notify(adapter,(unsigned short)((int)((unsigned short)adapter->mcc_obj.cq.id)),(_Bool)0,(unsigned short)0);
  #line 544 
  cif_spin_unlock_bh_mcc_cq_lock_of_be_adapter(& adapter->mcc_cq_lock);
  #line 545 
  return;
}

#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_process_mcc(struct be_adapter *adapter)
{
  #line 549 
  struct be_mcc_compl *compl;
  #line 550 
  int num = 0;
  #line 550 
  int status = 0;
  #line 551 
  struct be_mcc_obj *mcc_obj = & adapter->mcc_obj;
  #line 553 
  cif_spin_lock_bh_mcc_cq_lock_of_be_adapter(& adapter->mcc_cq_lock);
  #line 555 
  while (1) {
    #line 555 
    compl = be_mcc_compl_get(adapter);
    #line 555 
    if (! (compl != (struct be_mcc_compl *)0)) 
                                               #line 555 
                                               break;
    #line 556 
    if (((unsigned long)compl->flags & 1073741824UL) != 0UL) 
                                                             #line 557 
                                                             be_mcc_event_process(adapter,compl);
    else 
      #line 558 
      if (((unsigned long)compl->flags & 268435456UL) != 0UL) {
        #line 559 
        status = be_mcc_compl_process(adapter,compl);
        #line 560 
        atomic_dec(& mcc_obj->q.used);
      }
    #line 562 
    be_mcc_compl_use(compl);
    #line 563 
    num ++;
  }
  #line 566 
  if (num != 0) 
                #line 567 
                be_cq_notify(adapter,(unsigned short)((int)((unsigned short)mcc_obj->cq.id)),(_Bool)((bool)((int)mcc_obj->rearm_cq) != 0),(unsigned short)((int)((unsigned short)num)));
  #line 569 
  cif_spin_unlock_bh_mcc_cq_lock_of_be_adapter(& adapter->mcc_cq_lock);
  #line 570 
  return status;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mcc_wait_compl(struct be_adapter *adapter)
{
  #line 577 
  int i;
  #line 577 
  int status = 0;
  #line 578 
  struct be_mcc_obj *mcc_obj = & adapter->mcc_obj;
  #line 580 
  i = 0;
  #line 580 
  while (i <= 11999) {
    {
      #line 581 
      if ((unsigned int)be_check_error(adapter,15U) != 0U) 
                                                           #line 582 
                                                           return -5;
      #line 584 
      status = be_process_mcc(adapter);
      #line 586 
      if (atomic_read(& mcc_obj->q.used) == 0) 
                                               #line 587 
                                               break;
      #line 588 
      usleep_range(500UL,1000UL);
    }
    #line 580 
    i ++;
  }
  #line 590 
  if (i == 12000) {
    #line 591 
    _dev_err(& (adapter->pdev)->dev,(char *)"FW not responding\n");
    #line 592 
    be_set_error(adapter,4);
    #line 593 
    return -5;
  }
  #line 595 
  return status;
}

#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mcc_notify_wait(struct be_adapter *adapter)
{
  #line 601 
  int status;
  #line 602 
  struct be_mcc_wrb *wrb;
  #line 605 
  struct be_cmd_resp_hdr *resp;
  #line 603 
  struct be_mcc_obj *mcc_obj = & adapter->mcc_obj;
  #line 604 
  u32 index = mcc_obj->q.head;
  #line 607 
  index_dec(& index,mcc_obj->q.len);
  #line 608 
  wrb = (struct be_mcc_wrb *)queue_index_node(& mcc_obj->q,(unsigned short)((int)((unsigned short)index)));
  #line 610 
  resp = be_decode_resp_hdr(wrb->tag0,wrb->tag1);
  #line 612 
  status = be_mcc_notify(adapter);
  #line 613 
  if (status != 0) 
                   #line 614 
                   goto out;
  #line 616 
  status = be_mcc_wait_compl(adapter);
  #line 617 
  if (status == -5) 
                    #line 618 
                    goto out;
  #line 620 
  status = (int)resp->base_status | ((int)resp->addl_status << 16);
  #line 623 
  out: 
       #line 623 
  ;
  #line 624 
  return status;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mbox_db_ready_wait(struct be_adapter *adapter, void *db)
{
  #line 630 
  u32 ready;
  #line 629 
  int msecs = 0;
  #line 632 
  while (1) {
    #line 633 
    if ((unsigned int)be_check_error(adapter,15U) != 0U) 
                                                         #line 634 
                                                         return -5;
    #line 636 
    ready = ioread32(db);
    #line 637 
    if (ready == 4294967295U) 
                              #line 638 
                              return -1;
    #line 640 
    ready &= 1U;
    #line 641 
    if (ready != 0U) 
                     #line 642 
                     break;
    #line 644 
    if (msecs > 4000) {
      #line 645 
      _dev_err(& (adapter->pdev)->dev,(char *)"FW not responding\n");
      #line 646 
      be_set_error(adapter,4);
      #line 647 
      be_detect_error(adapter);
      #line 648 
      return -1;
    }
    #line 651 
    msleep(1U);
    #line 652 
    msecs ++;
  }
  #line 655 
  return 0;
}

#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mbox_notify_wait(struct be_adapter *adapter)
{
  #line 664 
  int status;
  #line 665 
  u32 val = 0U;
  #line 666 
  void *db = (void *)(adapter->db + 352U);
  #line 667 
  struct be_dma_mem *mbox_mem = & adapter->mbox_mem;
  #line 668 
  struct be_mcc_mailbox *mbox = (struct be_mcc_mailbox *)mbox_mem->va;
  #line 669 
  struct be_mcc_compl *compl = & mbox->compl;
  #line 672 
  status = be_mbox_db_ready_wait(adapter,db);
  #line 673 
  if (status != 0) 
                   #line 674 
                   return status;
  #line 676 
  val |= 2U;
  #line 678 
  val = ((unsigned int)(mbox_mem->dma >> 32) & 4294967292U) | val;
  #line 679 
  iowrite32(val,db);
  #line 682 
  status = be_mbox_db_ready_wait(adapter,db);
  #line 683 
  if (status != 0) 
                   #line 684 
                   return status;
  #line 686 
  val = 0U;
  #line 688 
  val = ((unsigned int)(mbox_mem->dma >> 4) << 2) | val;
  #line 689 
  iowrite32(val,db);
  #line 691 
  status = be_mbox_db_ready_wait(adapter,db);
  #line 692 
  if (status != 0) 
                   #line 693 
                   return status;
  #line 696 
  if ((int)be_mcc_compl_is_new(compl) != 0) {
    #line 697 
    status = be_mcc_compl_process(adapter,& mbox->compl);
    #line 698 
    be_mcc_compl_use(compl);
    #line 699 
    if (status != 0) 
                     #line 700 
                     return status;
  }
  else {
    #line 702 
    _dev_err(& (adapter->pdev)->dev,(char *)"invalid mailbox completion\n");
    #line 703 
    return -1;
  }
  #line 705 
  return 0;
}

#line 708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
u16 be_POST_stage_get(struct be_adapter *adapter)
{
  #line 710 
  u32 sem;
  #line 712 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    #line 713 
    sem = ioread32((void *)(adapter->csr + 172U)); else 
                                                        #line 715 
                                                        pci_read_config_dword(adapter->pdev,148,& sem);
  #line 718 
  return (unsigned short)sem;
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int lancer_wait_ready(struct be_adapter *adapter)
{
  #line 724 
  u32 sliport_status;
  #line 725 
  int i;
  #line 739 
  int tmp;
  #line 727 
  i = 0;
  #line 727 
  while (i <= 29) {
    #line 728 
    sliport_status = ioread32((void *)(adapter->db + 1028U));
    #line 729 
    if ((sliport_status & 8388608U) != 0U) 
                                           #line 730 
                                           return 0;
    #line 732 
    if ((sliport_status & 2147483648U) != 0U && (sliport_status & 16777216U) == 0U) 
      #line 734 
      return -5;
    #line 736 
    msleep(1000U);
    #line 727 
    i ++;
  }
  #line 739 
  if (sliport_status != 0U) 
                            #line 739 
                            tmp = (int)sliport_status; else 
                                                            #line 739 
                                                            tmp = -1;
  #line 739 
  return tmp;
}

#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_fw_wait_ready(struct be_adapter *adapter)
{
  #line 744 
  u16 stage;
  #line 745 
  int status;
  #line 745 
  int timeout = 0;
  #line 746 
  struct device *dev = & (adapter->pdev)->dev;
  #line 748 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    #line 749 
    status = lancer_wait_ready(adapter);
    #line 750 
    if (status != 0) {
      #line 751 
      stage = (unsigned short)status;
      #line 752 
      goto err;
    }
    #line 754 
    return 0;
  }
  #line 757 
  while (1) {
    {
      #line 759 
      if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) && (unsigned int)adapter->virtfn != 0U) 
        #line 760 
        return 0;
      #line 762 
      stage = be_POST_stage_get(adapter);
      #line 763 
      if ((unsigned int)stage == 49152U) 
                                         #line 764 
                                         return 0;
      #line 766 
      _dev_info(dev,(char *)"Waiting for POST, %ds elapsed\n",timeout);
      #line 767 
      if (msleep_interruptible(2000U) != 0UL) {
        #line 768 
        _dev_err(dev,(char *)"Waiting for POST aborted\n");
        #line 769 
        return -4;
      }
      #line 771 
      timeout += 2;
    }
    #line 772 
    if (! (timeout <= 59)) 
                           #line 757 
                           break;
  }
  #line 774 
  err: 
       #line 774 
  ;
  #line 775 
  _dev_err(dev,(char *)"POST timeout; stage=%#x\n",(int)stage);
  #line 776 
  return -110;
}

#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static struct be_sge *nonembedded_sgl(struct be_mcc_wrb *wrb)
{
  #line 781 
  return & wrb->payload.sgl[0];
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static void fill_wrb_tags(struct be_mcc_wrb *wrb, unsigned long addr)
{
  #line 786 
  wrb->tag0 = (unsigned int)addr;
  #line 787 
  wrb->tag1 = (unsigned int)(addr >> 32);
  #line 788 
  return;
}

#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_wrb_cmd_hdr_prepare(struct be_cmd_req_hdr *req_hdr, u8 subsystem, u8 opcode, int cmd_len, struct be_mcc_wrb *wrb, struct be_dma_mem *mem)
{
  #line 797 
  struct be_sge *sge;
  #line 799 
  req_hdr->opcode = opcode;
  #line 800 
  req_hdr->subsystem = subsystem;
  #line 801 
  req_hdr->request_length = (unsigned int)cmd_len + 4294967280U;
  #line 802 
  req_hdr->version = (unsigned char)0U;
  #line 803 
  fill_wrb_tags(wrb,(unsigned long)req_hdr);
  #line 804 
  wrb->payload_length = (unsigned int)cmd_len;
  #line 805 
  if (mem != (struct be_dma_mem *)0) {
    #line 806 
    wrb->embedded |= 8U;
    #line 808 
    sge = nonembedded_sgl(wrb);
    #line 809 
    sge->pa_hi = (unsigned int)(mem->dma >> 32);
    #line 810 
    sge->pa_lo = (unsigned int)mem->dma;
    #line 811 
    sge->len = mem->size;
  }
  else 
       #line 813 
       wrb->embedded |= 1U;
  #line 814 
  swap_dws((void *)wrb,8);
  #line 815 
  return;
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_cmd_page_addrs_prepare(struct phys_addr *pages, u32 max_pages, struct be_dma_mem *mem)
{
  #line 820 
  unsigned int __UNIQUE_ID___x567;
  #line 820 
  unsigned int tmp;
  #line 820 
  int i;
  {
    #line 820 
    __UNIQUE_ID___x567 = (unsigned int)(((((unsigned long)mem->va & 4095UL) + (unsigned long)mem->size) + 4095UL) >> 12);
    #line 820 
    u32 __UNIQUE_ID___y568 = max_pages;
    #line 820 
    if (__UNIQUE_ID___x567 < __UNIQUE_ID___y568) 
                                                 #line 820 
                                                 tmp = __UNIQUE_ID___x567; else 
                                                                    #line 820 
                                                                    tmp = __UNIQUE_ID___y568;
    }
  #line 820 
  int buf_pages = (int)tmp;
  #line 821 
  u64 dma = mem->dma;
  #line 823 
  i = 0;
  #line 823 
  while (i < buf_pages) {
    #line 824 
    (pages + (unsigned long)i)->lo = (unsigned int)dma;
    #line 825 
    (pages + (unsigned long)i)->hi = (unsigned int)(dma >> 32);
    #line 826 
    dma += 4096ULL;
    #line 823 
    i ++;
  }
  #line 828 
  return;
}

#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static struct be_mcc_wrb *wrb_from_mbox(struct be_adapter *adapter)
{
  #line 832 
  struct be_dma_mem *mbox_mem = & adapter->mbox_mem;
  #line 833 
  struct be_mcc_wrb *wrb = & ((struct be_mcc_mailbox *)mbox_mem->va)->wrb;
  #line 835 
  memset((void *)wrb,0,256UL);
  #line 836 
  return wrb;
}

#line 839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_mcc_wrb *wrb_from_mccq(struct be_adapter *adapter)
{
  #line 842 
  struct be_mcc_wrb *wrb;
  #line 841 
  struct be_queue_info *mccq = & adapter->mcc_obj.q;
  #line 844 
  if (! mccq->created) 
                       #line 845 
                       return (struct be_mcc_wrb *)0;
  #line 847 
  ;
  #line 847 
  if ((unsigned int)atomic_read(& mccq->used) >= mccq->len) 
                                                            #line 848 
                                                            return (struct be_mcc_wrb *)0;
  #line 850 
  wrb = (struct be_mcc_wrb *)queue_head_node(mccq);
  #line 851 
  queue_head_inc(mccq);
  #line 852 
  atomic_inc(& mccq->used);
  #line 853 
  memset((void *)wrb,0,256UL);
  #line 854 
  return wrb;
}

#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool use_mcc(struct be_adapter *adapter)
{
  #line 859 
  return adapter->mcc_obj.q.created;
}

#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_lock(struct be_adapter *adapter)
{
  #line 865 
  if ((int)use_mcc(adapter) != 0) {
    #line 866 
    cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
    #line 867 
    return 0;
  }
  else {
    #line 869 
    return cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  }
}

#line 874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_cmd_unlock(struct be_adapter *adapter)
{
  #line 876 
  if ((int)use_mcc(adapter) != 0) 
                                  #line 877 
                                  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock); else 
                                                                    #line 879 
                                                                    cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 880 
  return;
}

#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_mcc_wrb *be_cmd_copy(struct be_adapter *adapter, struct be_mcc_wrb *wrb)
{
  #line 885 
  struct be_mcc_wrb *dest_wrb;
  #line 887 
  if ((int)use_mcc(adapter) != 0) {
    #line 888 
    dest_wrb = wrb_from_mccq(adapter);
    #line 889 
    if (dest_wrb == (struct be_mcc_wrb *)0) 
                                            #line 890 
                                            return (struct be_mcc_wrb *)0;
  }
  else 
       #line 892 
       dest_wrb = wrb_from_mbox(adapter);
  #line 895 
  memcpy((void *)dest_wrb,(void *)wrb,256UL);
  #line 896 
  if ((wrb->embedded & 1U) != 0U) {
    #line 897 
    ;
    #line 897 
    fill_wrb_tags(dest_wrb,(unsigned long)embedded_payload(wrb));
  }
  #line 899 
  return dest_wrb;
}

#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_notify_wait(struct be_adapter *adapter, struct be_mcc_wrb *wrb)
{
  #line 906 
  struct be_mcc_wrb *dest_wrb;
  #line 907 
  int status;
  #line 909 
  status = be_cmd_lock(adapter);
  #line 910 
  if (status != 0) 
                   #line 911 
                   return status;
  #line 913 
  dest_wrb = be_cmd_copy(adapter,wrb);
  #line 914 
  if (dest_wrb == (struct be_mcc_wrb *)0) {
    #line 915 
    status = -16;
    #line 916 
    goto unlock;
  }
  #line 919 
  if ((int)use_mcc(adapter) != 0) 
                                  #line 920 
                                  status = be_mcc_notify_wait(adapter); else 
                                                                    #line 922 
                                                                    status = be_mbox_notify_wait(adapter);
  #line 924 
  if (status == 0) 
                   #line 925 
                   memcpy((void *)wrb,(void *)dest_wrb,256UL);
  #line 927 
  unlock: 
          #line 927 
  ;
  #line 928 
  be_cmd_unlock(adapter);
  #line 929 
  return status;
}

#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_fw_init(struct be_adapter *adapter)
{
  #line 937 
  u8 *wrb;
  #line 938 
  int status;
  #line 947 
  u8 *tmp_1;
  #line 948 
  u8 *tmp_2;
  #line 949 
  u8 *tmp_3;
  #line 950 
  u8 *tmp_4;
  #line 951 
  u8 *tmp_5;
  #line 952 
  u8 *tmp_6;
  #line 953 
  u8 *tmp_7;
  #line 940 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 941 
    return 0;
  #line 943 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 944 
    return -1;
  #line 946 
  wrb = (u8 *)wrb_from_mbox(adapter);
  #line 947 
  tmp_1 = wrb;
  #line 947 
  wrb ++;
  #line 947 
  *tmp_1 = (unsigned char)255U;
  #line 948 
  tmp_2 = wrb;
  #line 948 
  wrb ++;
  #line 948 
  *tmp_2 = (unsigned char)18U;
  #line 949 
  tmp_3 = wrb;
  #line 949 
  wrb ++;
  #line 949 
  *tmp_3 = (unsigned char)52U;
  #line 950 
  tmp_4 = wrb;
  #line 950 
  wrb ++;
  #line 950 
  *tmp_4 = (unsigned char)255U;
  #line 951 
  tmp_5 = wrb;
  #line 951 
  wrb ++;
  #line 951 
  *tmp_5 = (unsigned char)255U;
  #line 952 
  tmp_6 = wrb;
  #line 952 
  wrb ++;
  #line 952 
  *tmp_6 = (unsigned char)86U;
  #line 953 
  tmp_7 = wrb;
  #line 953 
  wrb ++;
  #line 953 
  *tmp_7 = (unsigned char)120U;
  #line 954 
  *wrb = (unsigned char)255U;
  #line 956 
  status = be_mbox_notify_wait(adapter);
  #line 958 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 959 
  return status;
}

#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_fw_clean(struct be_adapter *adapter)
{
  #line 967 
  u8 *wrb;
  #line 968 
  int status;
  #line 977 
  u8 *tmp_1;
  #line 978 
  u8 *tmp_2;
  #line 979 
  u8 *tmp_3;
  #line 980 
  u8 *tmp_4;
  #line 981 
  u8 *tmp_5;
  #line 982 
  u8 *tmp_6;
  #line 983 
  u8 *tmp_7;
  #line 970 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 971 
    return 0;
  #line 973 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 974 
    return -1;
  #line 976 
  wrb = (u8 *)wrb_from_mbox(adapter);
  #line 977 
  tmp_1 = wrb;
  #line 977 
  wrb ++;
  #line 977 
  *tmp_1 = (unsigned char)255U;
  #line 978 
  tmp_2 = wrb;
  #line 978 
  wrb ++;
  #line 978 
  *tmp_2 = (unsigned char)170U;
  #line 979 
  tmp_3 = wrb;
  #line 979 
  wrb ++;
  #line 979 
  *tmp_3 = (unsigned char)187U;
  #line 980 
  tmp_4 = wrb;
  #line 980 
  wrb ++;
  #line 980 
  *tmp_4 = (unsigned char)255U;
  #line 981 
  tmp_5 = wrb;
  #line 981 
  wrb ++;
  #line 981 
  *tmp_5 = (unsigned char)255U;
  #line 982 
  tmp_6 = wrb;
  #line 982 
  wrb ++;
  #line 982 
  *tmp_6 = (unsigned char)204U;
  #line 983 
  tmp_7 = wrb;
  #line 983 
  wrb ++;
  #line 983 
  *tmp_7 = (unsigned char)221U;
  #line 984 
  *wrb = (unsigned char)255U;
  #line 986 
  status = be_mbox_notify_wait(adapter);
  #line 988 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 989 
  return status;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_eq_create(struct be_adapter *adapter, struct be_eq_obj *eqo)
{
  #line 994 
  struct be_mcc_wrb *wrb;
  #line 995 
  struct be_cmd_req_eq_create *req;
  #line 997 
  int status;
  #line 996 
  struct be_dma_mem *q_mem = & eqo->q.dma_mem;
  #line 997 
  int ver = 0;
  #line 999 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 1000 
    return -1;
  #line 1002 
  wrb = wrb_from_mbox(adapter);
  #line 1003 
  req = (struct be_cmd_req_eq_create *)embedded_payload(wrb);
  #line 1005 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)13,100,wrb,(struct be_dma_mem *)0);
  #line 1010 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U)) 
    #line 1011 
    ver = 2;
  #line 1013 
  req->hdr.version = (unsigned char)ver;
  #line 1014 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  #line 1016 
  ;
  #line 1016 
  amap_set((void *)(& req->context),0U,amap_mask(1U),29U,1U);
  #line 1018 
  ;
  #line 1018 
  amap_set((void *)(& req->context),0U,amap_mask(1U),31U,0U);
  #line 1019 
  ;
  #line 1019 
  amap_set((void *)(& req->context),1U,amap_mask(3U),26U,(unsigned int)__ilog2_u32(eqo->q.len / 256U));
  #line 1021 
  swap_dws((void *)(& req->context),16);
  #line 1023 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  #line 1025 
  status = be_mbox_notify_wait(adapter);
  #line 1026 
  if (status == 0) {
    #line 1027 
    struct be_cmd_resp_eq_create *resp = embedded_payload(wrb);
    #line 1029 
    eqo->q.id = (unsigned int)resp->eq_id;
    #line 1030 
    if (ver == 2) 
                  #line 1030 
                  eqo->msix_idx = (unsigned char)resp->msix_idx; else 
                                                                   #line 1030 
                                                                   eqo->msix_idx = eqo->idx;
    #line 1032 
    eqo->q.created = (_Bool)1;
  }
  #line 1035 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 1036 
  return status;
}

#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_mac_addr_query(struct be_adapter *adapter, u8 *mac_addr, bool permanent, u32 if_handle, u32 pmac_id)
{
  #line 1043 
  struct be_mcc_wrb *wrb;
  #line 1044 
  struct be_cmd_req_mac_query *req;
  #line 1045 
  int status;
  #line 1047 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1049 
  wrb = wrb_from_mccq(adapter);
  #line 1050 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1051 
    status = -16;
    #line 1052 
    goto err;
  }
  #line 1054 
  req = (struct be_cmd_req_mac_query *)embedded_payload(wrb);
  #line 1056 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)1,24,wrb,(struct be_dma_mem *)0);
  #line 1059 
  req->type = (unsigned char)1U;
  #line 1060 
  if ((int)permanent != 0) 
                           #line 1061 
                           req->permanent = (unsigned char)1U;
  else {
    #line 1063 
    req->if_id = (unsigned short)if_handle;
    #line 1064 
    req->pmac_id = pmac_id;
    #line 1065 
    req->permanent = (unsigned char)0U;
  }
  #line 1068 
  status = be_mcc_notify_wait(adapter);
  #line 1069 
  if (status == 0) {
    #line 1070 
    struct be_cmd_resp_mac_query *resp = embedded_payload(wrb);
    #line 1072 
    memcpy((void *)mac_addr,(void *)(& resp->mac.addr),6UL);
  }
  #line 1075 
  err: 
       #line 1075 
  ;
  #line 1076 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1077 
  return status;
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_pmac_add(struct be_adapter *adapter, u8 *mac_addr, u32 if_id, u32 *pmac_id, u32 domain)
{
  #line 1084 
  struct be_mcc_wrb *wrb;
  #line 1085 
  struct be_cmd_req_pmac_add *req;
  #line 1086 
  int status;
  #line 1088 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1090 
  wrb = wrb_from_mccq(adapter);
  #line 1091 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1092 
    status = -16;
    #line 1093 
    goto err;
  }
  #line 1095 
  req = (struct be_cmd_req_pmac_add *)embedded_payload(wrb);
  #line 1097 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)59,28,wrb,(struct be_dma_mem *)0);
  #line 1101 
  req->hdr.domain = (unsigned char)domain;
  #line 1102 
  req->if_id = if_id;
  #line 1103 
  memcpy((void *)(& req->mac_address),(void *)mac_addr,6UL);
  #line 1105 
  status = be_mcc_notify_wait(adapter);
  #line 1106 
  if (status == 0) {
    #line 1107 
    struct be_cmd_resp_pmac_add *resp = embedded_payload(wrb);
    #line 1109 
    *pmac_id = resp->pmac_id;
  }
  #line 1112 
  err: 
       #line 1112 
  ;
  #line 1113 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1115 
  if (status > 0 && ((unsigned int)status & 65535U) == 5U) 
                                                           #line 1116 
                                                           status = -1;
  #line 1118 
  return status;
}

#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_pmac_del(struct be_adapter *adapter, u32 if_id, int pmac_id, u32 dom)
{
  #line 1124 
  struct be_mcc_wrb *wrb;
  #line 1125 
  struct be_cmd_req_pmac_del *req;
  #line 1126 
  int status;
  #line 1128 
  if (pmac_id == -1) 
                     #line 1129 
                     return 0;
  #line 1131 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1133 
  wrb = wrb_from_mccq(adapter);
  #line 1134 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1135 
    status = -16;
    #line 1136 
    goto err;
  }
  #line 1138 
  req = (struct be_cmd_req_pmac_del *)embedded_payload(wrb);
  #line 1140 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)60,24,wrb,(struct be_dma_mem *)0);
  #line 1144 
  req->hdr.domain = (unsigned char)dom;
  #line 1145 
  req->if_id = if_id;
  #line 1146 
  req->pmac_id = (unsigned int)pmac_id;
  #line 1148 
  status = be_mcc_notify_wait(adapter);
  #line 1150 
  err: 
       #line 1150 
  ;
  #line 1151 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1152 
  return status;
}

#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_cq_create(struct be_adapter *adapter, struct be_queue_info *cq, struct be_queue_info *eq, bool no_delay, int coalesce_wm)
{
  #line 1159 
  struct be_mcc_wrb *wrb;
  #line 1160 
  struct be_cmd_req_cq_create *req;
  #line 1162 
  void *ctxt;
  #line 1163 
  int status;
  #line 1161 
  struct be_dma_mem *q_mem = & cq->dma_mem;
  #line 1165 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 1166 
    return -1;
  #line 1168 
  wrb = wrb_from_mbox(adapter);
  #line 1169 
  req = (struct be_cmd_req_cq_create *)embedded_payload(wrb);
  #line 1170 
  ctxt = (void *)(& req->context);
  #line 1172 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)12,100,wrb,(struct be_dma_mem *)0);
  #line 1176 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  #line 1178 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    #line 1179 
    ;
    #line 1179 
    ;
    #line 1179 
    amap_set(ctxt,0U,amap_mask(2U),12U,(unsigned int)coalesce_wm);
    #line 1181 
    ;
    #line 1181 
    ;
    #line 1181 
    amap_set(ctxt,0U,amap_mask(1U),14U,(unsigned int)no_delay);
    #line 1183 
    ;
    #line 1183 
    amap_set(ctxt,0U,amap_mask(2U),27U,(unsigned int)__ilog2_u32(cq->len / 256U));
    #line 1185 
    ;
    #line 1185 
    amap_set(ctxt,0U,amap_mask(1U),29U,1U);
    #line 1186 
    ;
    #line 1186 
    amap_set(ctxt,0U,amap_mask(1U),31U,1U);
    #line 1187 
    ;
    #line 1187 
    ;
    #line 1187 
    amap_set(ctxt,1U,amap_mask(8U),22U,eq->id);
  }
  else {
    #line 1189 
    req->hdr.version = (unsigned char)2U;
    #line 1190 
    req->page_size = (unsigned char)1U;
    #line 1195 
    if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) {
      #line 1196 
      ;
      #line 1196 
      ;
      #line 1196 
      amap_set(ctxt,0U,amap_mask(2U),12U,(unsigned int)coalesce_wm);
    }
    #line 1198 
    ;
    #line 1198 
    ;
    #line 1198 
    amap_set(ctxt,0U,amap_mask(1U),14U,(unsigned int)no_delay);
    #line 1200 
    ;
    #line 1200 
    amap_set(ctxt,0U,amap_mask(2U),27U,(unsigned int)__ilog2_u32(cq->len / 256U));
    #line 1202 
    ;
    #line 1202 
    amap_set(ctxt,0U,amap_mask(1U),29U,1U);
    #line 1203 
    ;
    #line 1203 
    amap_set(ctxt,0U,amap_mask(1U),31U,1U);
    #line 1204 
    ;
    #line 1204 
    ;
    #line 1204 
    amap_set(ctxt,1U,amap_mask(16U),0U,eq->id);
  }
  #line 1207 
  swap_dws(ctxt,16);
  #line 1209 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  #line 1211 
  status = be_mbox_notify_wait(adapter);
  #line 1212 
  if (status == 0) {
    #line 1213 
    struct be_cmd_resp_cq_create *resp = embedded_payload(wrb);
    #line 1215 
    cq->id = (unsigned int)resp->cq_id;
    #line 1216 
    cq->created = (_Bool)1;
  }
  #line 1219 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 1221 
  return status;
}

#line 1224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static u32 be_encoded_q_len(int q_len)
{
  #line 1226 
  u32 len_encoded = (unsigned int)fls((unsigned int)q_len);
  #line 1228 
  if (len_encoded == 16U) 
                          #line 1229 
                          len_encoded = 0U;
  #line 1230 
  return len_encoded;
}

#line 1233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_mccq_ext_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq)
{
  #line 1237 
  struct be_mcc_wrb *wrb;
  #line 1238 
  struct be_cmd_req_mcc_ext_create *req;
  #line 1240 
  void *ctxt;
  #line 1241 
  int status;
  #line 1239 
  struct be_dma_mem *q_mem = & mccq->dma_mem;
  #line 1243 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 1244 
    return -1;
  #line 1246 
  wrb = wrb_from_mbox(adapter);
  #line 1247 
  req = (struct be_cmd_req_mcc_ext_create *)embedded_payload(wrb);
  #line 1248 
  ctxt = (void *)(& req->context);
  #line 1250 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)90,104,wrb,(struct be_dma_mem *)0);
  #line 1254 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  #line 1255 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    #line 1256 
    ;
    #line 1256 
    amap_set(ctxt,1U,amap_mask(1U),31U,1U);
    #line 1257 
    ;
    #line 1257 
    amap_set(ctxt,0U,amap_mask(4U),16U,be_encoded_q_len((int)mccq->len));
    #line 1259 
    ;
    #line 1259 
    ;
    #line 1259 
    amap_set(ctxt,0U,amap_mask(10U),22U,cq->id);
  }
  else {
    #line 1261 
    req->hdr.version = (unsigned char)1U;
    #line 1262 
    req->cq_id = (unsigned short)cq->id;
    #line 1264 
    ;
    #line 1264 
    amap_set(ctxt,0U,amap_mask(4U),16U,be_encoded_q_len((int)mccq->len));
    #line 1266 
    ;
    #line 1266 
    amap_set(ctxt,1U,amap_mask(1U),31U,1U);
    #line 1267 
    ;
    #line 1267 
    ;
    #line 1267 
    amap_set(ctxt,0U,amap_mask(16U),0U,cq->id);
    #line 1269 
    ;
    #line 1269 
    amap_set(ctxt,2U,amap_mask(1U),0U,1U);
  }
  #line 1276 
  req->async_event_bitmap[0] = 131170U;
  #line 1282 
  swap_dws(ctxt,16);
  #line 1284 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  #line 1286 
  status = be_mbox_notify_wait(adapter);
  #line 1287 
  if (status == 0) {
    #line 1288 
    struct be_cmd_resp_mcc_create *resp = embedded_payload(wrb);
    #line 1290 
    mccq->id = (unsigned int)resp->id;
    #line 1291 
    mccq->created = (_Bool)1;
  }
  #line 1293 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 1295 
  return status;
}

#line 1298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_mccq_org_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq)
{
  #line 1302 
  struct be_mcc_wrb *wrb;
  #line 1303 
  struct be_cmd_req_mcc_create *req;
  #line 1305 
  void *ctxt;
  #line 1306 
  int status;
  #line 1304 
  struct be_dma_mem *q_mem = & mccq->dma_mem;
  #line 1308 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 1309 
    return -1;
  #line 1311 
  wrb = wrb_from_mbox(adapter);
  #line 1312 
  req = (struct be_cmd_req_mcc_create *)embedded_payload(wrb);
  #line 1313 
  ctxt = (void *)(& req->context);
  #line 1315 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)21,100,wrb,(struct be_dma_mem *)0);
  #line 1319 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  #line 1321 
  ;
  #line 1321 
  amap_set(ctxt,1U,amap_mask(1U),31U,1U);
  #line 1322 
  ;
  #line 1322 
  amap_set(ctxt,0U,amap_mask(4U),16U,be_encoded_q_len((int)mccq->len));
  #line 1324 
  ;
  #line 1324 
  ;
  #line 1324 
  amap_set(ctxt,0U,amap_mask(10U),22U,cq->id);
  #line 1326 
  swap_dws(ctxt,16);
  #line 1328 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  #line 1330 
  status = be_mbox_notify_wait(adapter);
  #line 1331 
  if (status == 0) {
    #line 1332 
    struct be_cmd_resp_mcc_create *resp = embedded_payload(wrb);
    #line 1334 
    mccq->id = (unsigned int)resp->id;
    #line 1335 
    mccq->created = (_Bool)1;
  }
  #line 1338 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 1339 
  return status;
}

#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_mccq_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq)
{
  #line 1345 
  int status;
  #line 1347 
  status = be_cmd_mccq_ext_create(adapter,mccq,cq);
  #line 1348 
  if (status != 0 && (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) {
    #line 1349 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Upgrade to F/W ver 2.102.235.0 ");
    #line 1352 
    status = be_cmd_mccq_org_create(adapter,mccq,cq);
  }
  #line 1354 
  return status;
}

#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_txq_create(struct be_adapter *adapter, struct be_tx_obj *txo)
{
  #line 1360 
  struct be_cmd_req_eth_tx_create *req;
  #line 1364 
  int status;
  #line 1359 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 1361 
  struct be_queue_info *txq = & txo->q;
  #line 1362 
  struct be_queue_info *cq = & txo->cq;
  #line 1363 
  struct be_dma_mem *q_mem = & txq->dma_mem;
  #line 1364 
  int ver = 0;
  #line 1366 
  req = (struct be_cmd_req_eth_tx_create *)embedded_payload(& wrb);
  #line 1367 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)7,148,& wrb,(struct be_dma_mem *)0);
  #line 1370 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 1371 
    req->hdr.version = (unsigned char)1U;
  else 
    #line 1372 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
      #line 1373 
      if ((adapter->function_caps & 64U) != 0U) 
                                                #line 1374 
                                                req->hdr.version = (unsigned char)2U;
    }
    else 
         #line 1376 
         req->hdr.version = (unsigned char)2U;
  #line 1379 
  if ((unsigned int)req->hdr.version != 0U) 
                                            #line 1380 
                                            req->if_id = (unsigned short)adapter->if_handle;
  #line 1381 
  req->num_pages = (unsigned char)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  #line 1382 
  req->ulp_num = (unsigned char)1U;
  #line 1383 
  req->type = (unsigned short)2U;
  #line 1384 
  req->cq_id = (unsigned short)cq->id;
  #line 1385 
  req->queue_size = (unsigned char)be_encoded_q_len((int)txq->len);
  #line 1386 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  #line 1387 
  ver = (int)req->hdr.version;
  #line 1389 
  status = be_cmd_notify_wait(adapter,& wrb);
  #line 1390 
  if (status == 0) {
    #line 1391 
    struct be_cmd_resp_eth_tx_create *resp = embedded_payload(& wrb);
    #line 1393 
    txq->id = (unsigned int)resp->cid;
    #line 1394 
    if (ver == 2) 
                  #line 1395 
                  txo->db_offset = resp->db_offset; else 
                                                         #line 1397 
                                                         txo->db_offset = 96U;
    #line 1398 
    txq->created = (_Bool)1;
  }
  #line 1401 
  return status;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rxq_create(struct be_adapter *adapter, struct be_queue_info *rxq, u16 cq_id, u16 frag_size, u32 if_id, u32 rss, u8 *rss_id)
{
  #line 1409 
  struct be_mcc_wrb *wrb;
  #line 1410 
  struct be_cmd_req_eth_rx_create *req;
  #line 1412 
  int status;
  #line 1411 
  struct be_dma_mem *q_mem = & rxq->dma_mem;
  #line 1414 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1416 
  wrb = wrb_from_mccq(adapter);
  #line 1417 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1418 
    status = -16;
    #line 1419 
    goto err;
  }
  #line 1421 
  req = (struct be_cmd_req_eth_rx_create *)embedded_payload(wrb);
  #line 1423 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)8,48,wrb,(struct be_dma_mem *)0);
  #line 1426 
  req->cq_id = cq_id;
  #line 1427 
  req->frag_size = (unsigned char)((unsigned int)((unsigned char)fls((unsigned int)frag_size)) + 255U);
  #line 1428 
  req->num_pages = (unsigned char)2U;
  #line 1429 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),2U,q_mem);
  #line 1430 
  req->interface_id = if_id;
  #line 1431 
  req->max_frame_size = (unsigned short)9018U;
  #line 1432 
  req->rss_queue = rss;
  #line 1434 
  status = be_mcc_notify_wait(adapter);
  #line 1435 
  if (status == 0) {
    #line 1436 
    struct be_cmd_resp_eth_rx_create *resp = embedded_payload(wrb);
    #line 1438 
    rxq->id = (unsigned int)resp->id;
    #line 1439 
    rxq->created = (_Bool)1;
    #line 1440 
    *rss_id = resp->rss_id;
  }
  #line 1443 
  err: 
       #line 1443 
  ;
  #line 1444 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1445 
  return status;
}

#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_q_destroy(struct be_adapter *adapter, struct be_queue_info *q, int queue_type)
{
  #line 1454 
  struct be_mcc_wrb *wrb;
  #line 1455 
  struct be_cmd_req_q_destroy *req;
  #line 1457 
  int status;
  #line 1456 
  u8 subsys = (unsigned char)0U;
  #line 1456 
  u8 opcode = (unsigned char)0U;
  #line 1459 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 1460 
    return -1;
  #line 1462 
  wrb = wrb_from_mbox(adapter);
  #line 1463 
  req = (struct be_cmd_req_q_destroy *)embedded_payload(wrb);
  #line 1465 
  switch (queue_type) {
    #line 1466 
    case 1: 
            #line 1466 
    ;
    #line 1467 
    subsys = (unsigned char)1U;
    #line 1468 
    opcode = (unsigned char)55U;
    #line 1469 
    break;
    #line 1470 
    case 2: 
            #line 1470 
    ;
    #line 1471 
    subsys = (unsigned char)1U;
    #line 1472 
    opcode = (unsigned char)54U;
    #line 1473 
    break;
    #line 1474 
    case 3: 
            #line 1474 
    ;
    #line 1475 
    subsys = (unsigned char)3U;
    #line 1476 
    opcode = (unsigned char)9U;
    #line 1477 
    break;
    #line 1478 
    case 4: 
            #line 1478 
    ;
    #line 1479 
    subsys = (unsigned char)3U;
    #line 1480 
    opcode = (unsigned char)10U;
    #line 1481 
    break;
    #line 1482 
    case 5: 
            #line 1482 
    ;
    #line 1483 
    subsys = (unsigned char)1U;
    #line 1484 
    opcode = (unsigned char)53U;
    #line 1485 
    break;
    #line 1486 
    default: 
             #line 1486 
    ;
    #line 1488 
    ldv_inline_asm();
    #line 1489 
    ldv_inline_asm();
    #line 1490 
    ldv_inline_asm();
    #line 1487 
    ;
  }
  #line 1490 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)((int)subsys),(unsigned char)((int)opcode),20,wrb,(struct be_dma_mem *)0);
  #line 1492 
  req->id = (unsigned short)q->id;
  #line 1494 
  status = be_mbox_notify_wait(adapter);
  #line 1495 
  q->created = (_Bool)0;
  #line 1497 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 1498 
  return status;
}

#line 1502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rxq_destroy(struct be_adapter *adapter, struct be_queue_info *q)
{
  #line 1504 
  struct be_mcc_wrb *wrb;
  #line 1505 
  struct be_cmd_req_q_destroy *req;
  #line 1506 
  int status;
  #line 1508 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1510 
  wrb = wrb_from_mccq(adapter);
  #line 1511 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1512 
    status = -16;
    #line 1513 
    goto err;
  }
  #line 1515 
  req = (struct be_cmd_req_q_destroy *)embedded_payload(wrb);
  #line 1517 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)10,20,wrb,(struct be_dma_mem *)0);
  #line 1519 
  req->id = (unsigned short)q->id;
  #line 1521 
  status = be_mcc_notify_wait(adapter);
  #line 1522 
  q->created = (_Bool)0;
  #line 1524 
  err: 
       #line 1524 
  ;
  #line 1525 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1526 
  return status;
}

#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_if_create(struct be_adapter *adapter, u32 cap_flags, u32 en_flags, u32 *if_handle, u32 domain)
{
  #line 1536 
  struct be_cmd_req_if_create *req;
  #line 1537 
  int status;
  #line 1535 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 1539 
  req = (struct be_cmd_req_if_create *)embedded_payload(& wrb);
  #line 1540 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)50,40,& wrb,(struct be_dma_mem *)0);
  #line 1543 
  req->hdr.domain = (unsigned char)domain;
  #line 1544 
  req->capability_flags = cap_flags;
  #line 1545 
  req->enable_flags = en_flags;
  #line 1546 
  req->pmac_invalid = (unsigned char)1U;
  #line 1548 
  status = be_cmd_notify_wait(adapter,& wrb);
  #line 1549 
  if (status == 0) {
    #line 1550 
    struct be_cmd_resp_if_create *resp = embedded_payload(& wrb);
    #line 1552 
    *if_handle = resp->interface_id;
    #line 1555 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) && (unsigned int)adapter->virtfn != 0U) 
      #line 1556 
      *(adapter->pmac_id) = resp->pmac_id;
  }
  #line 1558 
  return status;
}

#line 1562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_if_destroy(struct be_adapter *adapter, int interface_id, u32 domain)
{
  #line 1565 
  struct be_cmd_req_if_destroy *req;
  #line 1566 
  int status;
  #line 1564 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 1568 
  if (interface_id == -1) 
                          #line 1569 
                          return 0;
  #line 1571 
  req = (struct be_cmd_req_if_destroy *)embedded_payload(& wrb);
  #line 1573 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)51,20,& wrb,(struct be_dma_mem *)0);
  #line 1576 
  req->hdr.domain = (unsigned char)domain;
  #line 1577 
  req->interface_id = (unsigned int)interface_id;
  #line 1579 
  status = be_cmd_notify_wait(adapter,& wrb);
  #line 1580 
  return status;
}

#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd)
{
  #line 1589 
  struct be_mcc_wrb *wrb;
  #line 1590 
  struct be_cmd_req_hdr *hdr;
  #line 1591 
  int status = 0;
  #line 1593 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1595 
  wrb = wrb_from_mccq(adapter);
  #line 1596 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1597 
    status = -16;
    #line 1598 
    goto err;
  }
  #line 1600 
  hdr = (struct be_cmd_req_hdr *)nonemb_cmd->va;
  #line 1602 
  be_wrb_cmd_hdr_prepare(hdr,(unsigned char)3,(unsigned char)4,(int)nonemb_cmd->size,wrb,nonemb_cmd);
  #line 1607 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
    #line 1608 
    hdr->version = (unsigned char)0U;
  #line 1609 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) 
    #line 1610 
    hdr->version = (unsigned char)1U; else 
                                           #line 1612 
                                           hdr->version = (unsigned char)2U;
  #line 1614 
  status = be_mcc_notify(adapter);
  #line 1615 
  if (status != 0) 
                   #line 1616 
                   goto err;
  #line 1618 
  adapter->stats_cmd_sent = (_Bool)1;
  #line 1620 
  err: 
       #line 1620 
  ;
  #line 1621 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1622 
  return status;
}

#line 1626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_get_pport_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd)
{
  #line 1629 
  struct be_mcc_wrb *wrb;
  #line 1630 
  struct lancer_cmd_req_pport_stats *req;
  #line 1631 
  int status = 0;
  #line 1633 
  if (! be_cmd_allowed(adapter,(unsigned char)18,(unsigned char)3)) 
                                                                    #line 1635 
                                                                    return -1;
  #line 1637 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1639 
  wrb = wrb_from_mccq(adapter);
  #line 1640 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1641 
    status = -16;
    #line 1642 
    goto err;
  }
  #line 1644 
  req = (struct lancer_cmd_req_pport_stats *)nonemb_cmd->va;
  #line 1646 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)18,(int)nonemb_cmd->size,wrb,nonemb_cmd);
  #line 1650 
  req->cmd_params.params.pport_num = (unsigned short)adapter->hba_port_num;
  #line 1651 
  req->cmd_params.params.reset_stats = (unsigned char)0U;
  #line 1653 
  status = be_mcc_notify(adapter);
  #line 1654 
  if (status != 0) 
                   #line 1655 
                   goto err;
  #line 1657 
  adapter->stats_cmd_sent = (_Bool)1;
  #line 1659 
  err: 
       #line 1659 
  ;
  #line 1660 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1661 
  return status;
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mac_to_link_speed(int mac_speed)
{
  #line 1666 
  switch (mac_speed) {
    #line 1667 
    case 0: 
            #line 1667 
    ;
    #line 1668 
    return 0;
    #line 1669 
    case 1: 
            #line 1669 
    ;
    #line 1670 
    return 10;
    #line 1671 
    case 2: 
            #line 1671 
    ;
    #line 1672 
    return 100;
    #line 1673 
    case 3: 
            #line 1673 
    ;
    #line 1674 
    return 1000;
    #line 1675 
    case 4: 
            #line 1675 
    ;
    #line 1676 
    return 10000;
    #line 1677 
    case 5: 
            #line 1677 
    ;
    #line 1678 
    return 20000;
    #line 1679 
    case 6: 
            #line 1679 
    ;
    #line 1680 
    return 25000;
    #line 1681 
    case 7: 
            #line 1681 
    ;
    #line 1682 
    return 40000;
  }
  #line 1684 
  return 0;
}

#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_link_status_query(struct be_adapter *adapter, u16 *link_speed, u8 *link_status, u32 dom)
{
  #line 1693 
  struct be_mcc_wrb *wrb;
  #line 1694 
  struct be_cmd_req_link_status *req;
  #line 1695 
  int status;
  #line 1697 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1699 
  if (link_status != (u8 *)0U) 
                               #line 1700 
                               *link_status = (unsigned char)0U;
  #line 1702 
  wrb = wrb_from_mccq(adapter);
  #line 1703 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1704 
    status = -16;
    #line 1705 
    goto err;
  }
  #line 1707 
  req = (struct be_cmd_req_link_status *)embedded_payload(wrb);
  #line 1709 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)5,20,wrb,(struct be_dma_mem *)0);
  #line 1714 
  if ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) 
    #line 1715 
    req->hdr.version = (unsigned char)1U;
  #line 1717 
  req->hdr.domain = (unsigned char)dom;
  #line 1719 
  status = be_mcc_notify_wait(adapter);
  #line 1720 
  if (status == 0) {
    #line 1721 
    struct be_cmd_resp_link_status *resp = embedded_payload(wrb);
    #line 1723 
    if (link_speed != (u16 *)0U) {
      #line 1724 
      if ((unsigned int)resp->link_speed != 0U) 
                                                #line 1724 
                                                *link_speed = (unsigned short)((unsigned int)resp->link_speed * 10U);
      else {
        #line 1724 
        *link_speed = (unsigned short)be_mac_to_link_speed((int)resp->mac_speed);
      }
      #line 1728 
      if ((unsigned int)resp->logical_link_status == 0U) 
                                                         #line 1729 
                                                         *link_speed = (unsigned short)0U;
    }
    #line 1731 
    if (link_status != (u8 *)0U) 
                                 #line 1732 
                                 *link_status = resp->logical_link_status;
  }
  #line 1735 
  err: 
       #line 1735 
  ;
  #line 1736 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1737 
  return status;
}

#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_die_temperature(struct be_adapter *adapter)
{
  #line 1743 
  struct be_mcc_wrb *wrb;
  #line 1744 
  struct be_cmd_req_get_cntl_addnl_attribs *req;
  #line 1745 
  int status = 0;
  #line 1747 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1749 
  wrb = wrb_from_mccq(adapter);
  #line 1750 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1751 
    status = -16;
    #line 1752 
    goto err;
  }
  #line 1754 
  req = (struct be_cmd_req_get_cntl_addnl_attribs *)embedded_payload(wrb);
  #line 1756 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)121,24,wrb,(struct be_dma_mem *)0);
  #line 1760 
  status = be_mcc_notify(adapter);
  #line 1761 
  err: 
       #line 1761 
  ;
  #line 1762 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1763 
  return status;
}

#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fat_dump_len(struct be_adapter *adapter, u32 *dump_size)
{
  #line 1770 
  struct be_cmd_req_get_fat *req;
  #line 1771 
  int status;
  #line 1769 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 1773 
  req = (struct be_cmd_req_get_fat *)embedded_payload(& wrb);
  #line 1775 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)68,36,& wrb,(struct be_dma_mem *)0);
  #line 1778 
  req->fat_operation = 1U;
  #line 1779 
  status = be_cmd_notify_wait(adapter,& wrb);
  #line 1780 
  if (status == 0) {
    #line 1781 
    struct be_cmd_resp_get_fat *resp = embedded_payload(& wrb);
    #line 1783 
    if (dump_size != (u32 *)0U && resp->log_size != 0U) 
                                                        #line 1784 
                                                        *dump_size = resp->log_size + 4294967292U;
  }
  #line 1787 
  return status;
}

#line 1790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fat_dump(struct be_adapter *adapter, u32 buf_len, void *buf)
{
  #line 1792 
  struct be_dma_mem get_fat_cmd;
  #line 1793 
  struct be_mcc_wrb *wrb;
  #line 1794 
  struct be_cmd_req_get_fat *req;
  #line 1795 
  u32 total_size;
  #line 1795 
  u32 buf_size;
  #line 1796 
  u32 payload_len;
  #line 1797 
  int status;
  #line 1795 
  u32 offset = 0U;
  #line 1796 
  u32 log_offset = 4U;
  #line 1799 
  if (buf_len == 0U) 
                     #line 1800 
                     return 0;
  #line 1802 
  total_size = buf_len;
  #line 1804 
  get_fat_cmd.size = 61476U;
  #line 1805 
  get_fat_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)get_fat_cmd.size,& get_fat_cmd.dma,2592U);
  #line 1808 
  if (get_fat_cmd.va == (void *)0) 
                                   #line 1809 
                                   return -12;
  #line 1811 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1813 
  while (total_size != 0U) {
    #line 1814 
    u32 __UNIQUE_ID___x570;
    #line 1814 
    u32 tmp;
    {
      #line 1814 
      __UNIQUE_ID___x570 = total_size;
      #line 1814 
      unsigned int __UNIQUE_ID___y571 = 61440U;
      #line 1814 
      if (__UNIQUE_ID___x570 < __UNIQUE_ID___y571) 
                                                   #line 1814 
                                                   tmp = __UNIQUE_ID___x570; else 
                                                                    #line 1814 
                                                                    tmp = __UNIQUE_ID___y571;
      }
    #line 1814 
    buf_size = tmp;
    #line 1815 
    total_size -= buf_size;
    #line 1817 
    wrb = wrb_from_mccq(adapter);
    #line 1818 
    if (wrb == (struct be_mcc_wrb *)0) {
      #line 1819 
      status = -16;
      #line 1820 
      goto err;
    }
    #line 1822 
    req = (struct be_cmd_req_get_fat *)get_fat_cmd.va;
    #line 1824 
    payload_len = buf_size + 36U;
    #line 1825 
    be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)68,(int)payload_len,wrb,& get_fat_cmd);
    #line 1829 
    req->fat_operation = 0U;
    #line 1830 
    req->read_log_offset = log_offset;
    #line 1831 
    req->read_log_length = buf_size;
    #line 1832 
    req->data_buffer_size = buf_size;
    #line 1834 
    status = be_mcc_notify_wait(adapter);
    #line 1835 
    if (status == 0) {
      #line 1836 
      struct be_cmd_resp_get_fat *resp = (struct be_cmd_resp_get_fat *)get_fat_cmd.va;
      #line 1838 
      memcpy(buf + (unsigned long)offset,(void *)(& resp->data_buffer),(unsigned long)resp->read_log_length);
    }
    else {
      #line 1842 
      _dev_err(& (adapter->pdev)->dev,(char *)"FAT Table Retrieve error\n");
      #line 1843 
      goto err;
    }
    #line 1845 
    offset += buf_size;
    #line 1846 
    log_offset += buf_size;
  }
  #line 1848 
  err: 
       #line 1848 
  ;
  #line 1849 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)get_fat_cmd.size,get_fat_cmd.va,get_fat_cmd.dma);
  #line 1851 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1852 
  return status;
}

#line 1856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fw_ver(struct be_adapter *adapter)
{
  #line 1858 
  struct be_mcc_wrb *wrb;
  #line 1859 
  struct be_cmd_req_get_fw_version *req;
  #line 1860 
  int status;
  #line 1862 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1864 
  wrb = wrb_from_mccq(adapter);
  #line 1865 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1866 
    status = -16;
    #line 1867 
    goto err;
  }
  #line 1870 
  req = (struct be_cmd_req_get_fw_version *)embedded_payload(wrb);
  #line 1872 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)35,80,wrb,(struct be_dma_mem *)0);
  #line 1875 
  status = be_mcc_notify_wait(adapter);
  #line 1876 
  if (status == 0) {
    #line 1877 
    struct be_cmd_resp_get_fw_version *resp = embedded_payload(wrb);
    #line 1879 
    strlcpy((char *)(& adapter->fw_ver),(char *)(& resp->firmware_version_string),32UL);
    #line 1881 
    strlcpy((char *)(& adapter->fw_on_flash),(char *)(& resp->fw_on_flash_version_string),32UL);
  }
  #line 1884 
  err: 
       #line 1884 
  ;
  #line 1885 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1886 
  return status;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int __be_cmd_modify_eqd(struct be_adapter *adapter, struct be_set_eqd *set_eqd, int num)
{
  #line 1895 
  struct be_mcc_wrb *wrb;
  #line 1896 
  struct be_cmd_req_modify_eq_delay *req;
  #line 1897 
  int i;
  #line 1897 
  int status = 0;
  #line 1899 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1901 
  wrb = wrb_from_mccq(adapter);
  #line 1902 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1903 
    status = -16;
    #line 1904 
    goto err;
  }
  #line 1906 
  req = (struct be_cmd_req_modify_eq_delay *)embedded_payload(wrb);
  #line 1908 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)41,404,wrb,(struct be_dma_mem *)0);
  #line 1912 
  req->num_eq = (unsigned int)num;
  #line 1913 
  i = 0;
  #line 1913 
  while (i < num) {
    #line 1914 
    req->set_eqd[i].eq_id = (set_eqd + (unsigned long)i)->eq_id;
    #line 1915 
    req->set_eqd[i].phase = 0U;
    #line 1916 
    req->set_eqd[i].delay_multiplier = (set_eqd + (unsigned long)i)->delay_multiplier;
    #line 1913 
    i ++;
  }
  #line 1920 
  status = be_mcc_notify(adapter);
  #line 1921 
  err: 
       #line 1921 
  ;
  #line 1922 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1923 
  return status;
}

#line 1926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_modify_eqd(struct be_adapter *adapter, struct be_set_eqd *set_eqd, int num)
{
  #line 1929 
  int num_eqs;
  #line 1929 
  int i = 0;
  #line 1931 
  while (num != 0) {
    #line 1932 
    int __UNIQUE_ID___x572;
    #line 1932 
    int tmp;
    {
      #line 1932 
      __UNIQUE_ID___x572 = num;
      #line 1932 
      int __UNIQUE_ID___y573 = 8;
      #line 1932 
      if (__UNIQUE_ID___x572 < __UNIQUE_ID___y573) 
                                                   #line 1932 
                                                   tmp = __UNIQUE_ID___x572; else 
                                                                    #line 1932 
                                                                    tmp = __UNIQUE_ID___y573;
      }
    #line 1932 
    num_eqs = tmp;
    #line 1933 
    __be_cmd_modify_eqd(adapter,set_eqd + (unsigned long)i,num_eqs);
    #line 1934 
    i += num_eqs;
    #line 1935 
    num -= num_eqs;
  }
  #line 1938 
  return 0;
}

#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_vlan_config(struct be_adapter *adapter, u32 if_id, u16 *vtag_array, u32 num, u32 domain)
{
  #line 1945 
  struct be_mcc_wrb *wrb;
  #line 1946 
  struct be_cmd_req_vlan_config *req;
  #line 1947 
  int status;
  #line 1949 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1951 
  wrb = wrb_from_mccq(adapter);
  #line 1952 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1953 
    status = -16;
    #line 1954 
    goto err;
  }
  #line 1956 
  req = (struct be_cmd_req_vlan_config *)embedded_payload(wrb);
  #line 1958 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)4,148,wrb,(struct be_dma_mem *)0);
  #line 1961 
  req->hdr.domain = (unsigned char)domain;
  #line 1963 
  req->interface_id = (unsigned char)if_id;
  #line 1964 
  req->untagged = (unsigned char)((unsigned int)((unsigned char)(adapter->res.if_cap_flags >> 5)) & 1U);
  #line 1965 
  req->num_vlan = (unsigned char)num;
  #line 1966 
  memcpy((void *)(& req->normal_vlan),(void *)vtag_array,(unsigned long)req->num_vlan * 2UL);
  #line 1969 
  status = be_mcc_notify_wait(adapter);
  #line 1970 
  err: 
       #line 1970 
  ;
  #line 1971 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1972 
  return status;
}

#line 1975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int __be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value)
{
  #line 1977 
  struct be_mcc_wrb *wrb;
  #line 1980 
  int status;
  #line 1978 
  struct be_dma_mem *mem = & adapter->rx_filter;
  #line 1979 
  struct be_cmd_req_rx_filter *req = (struct be_cmd_req_rx_filter *)mem->va;
  #line 1982 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 1984 
  wrb = wrb_from_mccq(adapter);
  #line 1985 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 1986 
    status = -16;
    #line 1987 
    goto err;
  }
  #line 1989 
  memset((void *)req,0,424UL);
  #line 1990 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)34,424,wrb,mem);
  #line 1994 
  req->if_id = (unsigned int)adapter->if_handle;
  #line 1995 
  req->if_flags_mask = flags;
  #line 1996 
  if (value == 1U) 
                   #line 1996 
                   req->if_flags = req->if_flags_mask; else 
                                                            #line 1996 
                                                            req->if_flags = 0U;
  #line 1998 
  if ((flags & 4096U) != 0U) {
    #line 1999 
    int i;
    #line 2004 
    req->if_flags_mask |= adapter->res.if_cap_flags & 512U;
    #line 2007 
    req->mcast_num = adapter->mc_count;
    #line 2008 
    i = 0;
    #line 2008 
    while (adapter->mc_count > (unsigned int)i) {
      #line 2009 
      ether_addr_copy((u8 *)(& req->mcast_mac[i].byte),(u8 *)(& (adapter->mc_list + (unsigned long)i)->mac));
      #line 2008 
      i ++;
    }
  }
  #line 2013 
  status = be_mcc_notify_wait(adapter);
  #line 2014 
  err: 
       #line 2014 
  ;
  #line 2015 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2016 
  return status;
}

#line 2019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value)
{
  #line 2021 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2023 
  if ((adapter->res.if_cap_flags & flags) != flags) {
    #line 2024 
    _dev_warn(dev,(char *)"Cannot set rx filter flags 0x%x\n",flags);
    #line 2025 
    _dev_warn(dev,(char *)"Interface is capable of 0x%x flags only\n",adapter->res.if_cap_flags);
  }
  #line 2028 
  flags = adapter->res.if_cap_flags & flags;
  #line 2029 
  if (flags == 0U) 
                   #line 2030 
                   return -524;
  #line 2032 
  return __be_cmd_rx_filter(adapter,flags,value);
}

#line 2036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_flow_control(struct be_adapter *adapter, u32 tx_fc, u32 rx_fc)
{
  #line 2038 
  struct be_mcc_wrb *wrb;
  #line 2039 
  struct be_cmd_req_set_flow_control *req;
  #line 2040 
  int status;
  #line 2042 
  if (! be_cmd_allowed(adapter,(unsigned char)36,(unsigned char)1)) 
                                                                    #line 2044 
                                                                    return -1;
  #line 2046 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2048 
  wrb = wrb_from_mccq(adapter);
  #line 2049 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2050 
    status = -16;
    #line 2051 
    goto err;
  }
  #line 2053 
  req = (struct be_cmd_req_set_flow_control *)embedded_payload(wrb);
  #line 2055 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)36,20,wrb,(struct be_dma_mem *)0);
  #line 2059 
  req->hdr.version = (unsigned char)1U;
  #line 2060 
  req->tx_flow_control = (unsigned short)tx_fc;
  #line 2061 
  req->rx_flow_control = (unsigned short)rx_fc;
  #line 2063 
  status = be_mcc_notify_wait(adapter);
  #line 2065 
  err: 
       #line 2065 
  ;
  #line 2066 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2068 
  if (status > 0 && ((unsigned int)status & 65535U) == 68U) 
                                                            #line 2069 
                                                            return -95;
  #line 2071 
  return status;
}

#line 2075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_flow_control(struct be_adapter *adapter, u32 *tx_fc, u32 *rx_fc)
{
  #line 2077 
  struct be_mcc_wrb *wrb;
  #line 2078 
  struct be_cmd_req_get_flow_control *req;
  #line 2079 
  int status;
  #line 2081 
  if (! be_cmd_allowed(adapter,(unsigned char)37,(unsigned char)1)) 
                                                                    #line 2083 
                                                                    return -1;
  #line 2085 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2087 
  wrb = wrb_from_mccq(adapter);
  #line 2088 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2089 
    status = -16;
    #line 2090 
    goto err;
  }
  #line 2092 
  req = (struct be_cmd_req_get_flow_control *)embedded_payload(wrb);
  #line 2094 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)37,20,wrb,(struct be_dma_mem *)0);
  #line 2098 
  status = be_mcc_notify_wait(adapter);
  #line 2099 
  if (status == 0) {
    #line 2101 
    struct be_cmd_resp_get_flow_control *resp = embedded_payload(wrb);
    #line 2103 
    *tx_fc = (unsigned int)resp->tx_flow_control;
    #line 2104 
    *rx_fc = (unsigned int)resp->rx_flow_control;
  }
  #line 2107 
  err: 
       #line 2107 
  ;
  #line 2108 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2109 
  return status;
}

#line 2113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_fw_cfg(struct be_adapter *adapter)
{
  #line 2115 
  struct be_mcc_wrb *wrb;
  #line 2116 
  struct be_cmd_req_query_fw_cfg *req;
  #line 2117 
  int status;
  #line 2119 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 2120 
    return -1;
  #line 2122 
  wrb = wrb_from_mbox(adapter);
  #line 2123 
  req = (struct be_cmd_req_query_fw_cfg *)embedded_payload(wrb);
  #line 2125 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)58,140,wrb,(struct be_dma_mem *)0);
  #line 2129 
  status = be_mbox_notify_wait(adapter);
  #line 2130 
  if (status == 0) {
    #line 2131 
    struct be_cmd_resp_query_fw_cfg *resp = embedded_payload(wrb);
    #line 2133 
    adapter->port_num = resp->phys_port;
    #line 2134 
    adapter->function_mode = resp->function_mode;
    #line 2135 
    adapter->function_caps = resp->function_caps;
    #line 2136 
    adapter->asic_rev = (unsigned short)((unsigned int)((unsigned short)resp->asic_revision) & 255U);
    #line 2137 
    _dev_info(& (adapter->pdev)->dev,(char *)"FW config: function_mode=0x%x, function_caps=0x%x\n",adapter->function_mode,adapter->function_caps);
  }
  #line 2142 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 2143 
  return status;
}

#line 2147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_reset_function(struct be_adapter *adapter)
{
  #line 2149 
  struct be_mcc_wrb *wrb;
  #line 2150 
  struct be_cmd_req_hdr *req;
  #line 2151 
  int status;
  #line 2153 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    #line 2154 
    iowrite32(134217728U,(void *)(adapter->db + 1032U));
    #line 2156 
    status = lancer_wait_ready(adapter);
    #line 2157 
    if (status != 0) 
                     #line 2158 
                     _dev_err(& (adapter->pdev)->dev,(char *)"Adapter in non recoverable error\n");
    #line 2160 
    return status;
  }
  #line 2163 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 2164 
    return -1;
  #line 2166 
  wrb = wrb_from_mbox(adapter);
  #line 2167 
  req = (struct be_cmd_req_hdr *)embedded_payload(wrb);
  #line 2169 
  be_wrb_cmd_hdr_prepare(req,(unsigned char)1,(unsigned char)61,16,wrb,(struct be_dma_mem *)0);
  #line 2173 
  status = be_mbox_notify_wait(adapter);
  #line 2175 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 2176 
  return status;
}

#line 2179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rss_config(struct be_adapter *adapter, u8 *rsstable, u32 rss_hash_opts, u16 table_size, u8 *rss_hkey)
{
  #line 2182 
  struct be_mcc_wrb *wrb;
  #line 2183 
  struct be_cmd_req_rss_config *req;
  #line 2184 
  int status;
  #line 2186 
  if ((adapter->res.if_cap_flags & 4U) == 0U) 
                                              #line 2187 
                                              return 0;
  #line 2189 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2191 
  wrb = wrb_from_mccq(adapter);
  #line 2192 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2193 
    status = -16;
    #line 2194 
    goto err;
  }
  #line 2196 
  req = (struct be_cmd_req_rss_config *)embedded_payload(wrb);
  #line 2198 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)1,196,wrb,(struct be_dma_mem *)0);
  #line 2201 
  req->if_id = (unsigned int)adapter->if_handle;
  #line 2202 
  req->enable_rss = (unsigned short)rss_hash_opts;
  #line 2203 
  req->cpu_table_size_log2 = (unsigned short)((unsigned int)((unsigned short)fls((unsigned int)table_size)) + 65535U);
  #line 2205 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
    #line 2206 
    req->hdr.version = (unsigned char)1U;
  #line 2208 
  memcpy((void *)(& req->cpu_table),(void *)rsstable,(unsigned long)table_size);
  #line 2209 
  memcpy((void *)(& req->hash),(void *)rss_hkey,40UL);
  #line 2210 
  swap_dws((void *)(& req->hash),40);
  #line 2212 
  status = be_mcc_notify_wait(adapter);
  #line 2213 
  err: 
       #line 2213 
  ;
  #line 2214 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2215 
  return status;
}

#line 2219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_beacon_state(struct be_adapter *adapter, u8 port_num, u8 bcn, u8 sts, u8 state)
{
  #line 2222 
  struct be_mcc_wrb *wrb;
  #line 2223 
  struct be_cmd_req_enable_disable_beacon *req;
  #line 2224 
  int status;
  #line 2226 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2228 
  wrb = wrb_from_mccq(adapter);
  #line 2229 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2230 
    status = -16;
    #line 2231 
    goto err;
  }
  #line 2233 
  req = (struct be_cmd_req_enable_disable_beacon *)embedded_payload(wrb);
  #line 2235 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)69,20,wrb,(struct be_dma_mem *)0);
  #line 2239 
  req->port_num = port_num;
  #line 2240 
  req->beacon_state = state;
  #line 2241 
  req->beacon_duration = bcn;
  #line 2242 
  req->status_duration = sts;
  #line 2244 
  status = be_mcc_notify_wait(adapter);
  #line 2246 
  err: 
       #line 2246 
  ;
  #line 2247 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2248 
  return status;
}

#line 2252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_beacon_state(struct be_adapter *adapter, u8 port_num, u32 *state)
{
  #line 2254 
  struct be_mcc_wrb *wrb;
  #line 2255 
  struct be_cmd_req_get_beacon_state *req;
  #line 2256 
  int status;
  #line 2258 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2260 
  wrb = wrb_from_mccq(adapter);
  #line 2261 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2262 
    status = -16;
    #line 2263 
    goto err;
  }
  #line 2265 
  req = (struct be_cmd_req_get_beacon_state *)embedded_payload(wrb);
  #line 2267 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)70,20,wrb,(struct be_dma_mem *)0);
  #line 2271 
  req->port_num = port_num;
  #line 2273 
  status = be_mcc_notify_wait(adapter);
  #line 2274 
  if (status == 0) {
    #line 2276 
    struct be_cmd_resp_get_beacon_state *resp = embedded_payload(wrb);
    #line 2278 
    *state = (unsigned int)resp->beacon_state;
  }
  #line 2281 
  err: 
       #line 2281 
  ;
  #line 2282 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2283 
  return status;
}

#line 2287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_read_port_transceiver_data(struct be_adapter *adapter, u8 page_num, u8 *data)
{
  #line 2290 
  struct be_dma_mem cmd;
  #line 2291 
  struct be_mcc_wrb *wrb;
  #line 2292 
  struct be_cmd_req_port_type *req;
  #line 2293 
  int status;
  #line 2295 
  if ((unsigned int)page_num > 162U) 
                                     #line 2296 
                                     return -22;
  #line 2298 
  cmd.size = 280U;
  #line 2299 
  cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,2592U);
  #line 2301 
  if (cmd.va == (void *)0) {
    #line 2302 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory allocation failed\n");
    #line 2303 
    return -12;
  }
  #line 2306 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2308 
  wrb = wrb_from_mccq(adapter);
  #line 2309 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2310 
    status = -16;
    #line 2311 
    goto err;
  }
  #line 2313 
  req = (struct be_cmd_req_port_type *)cmd.va;
  #line 2315 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)73,(int)cmd.size,wrb,& cmd);
  #line 2319 
  req->port = (unsigned int)adapter->hba_port_num;
  #line 2320 
  req->page_num = (unsigned int)page_num;
  #line 2321 
  status = be_mcc_notify_wait(adapter);
  #line 2322 
  if (status == 0) {
    #line 2323 
    struct be_cmd_resp_port_type *resp = (struct be_cmd_resp_port_type *)cmd.va;
    #line 2325 
    memcpy((void *)data,(void *)(& resp->page_data),256UL);
  }
  #line 2327 
  err: 
       #line 2327 
  ;
  #line 2328 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2329 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 2330 
  return status;
}

#line 2333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int lancer_cmd_write_object(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 data_size, u32 data_offset, char *obj_name, u32 *data_written, u8 *change_status, u8 *addn_status)
{
  #line 2339 
  struct be_mcc_wrb *wrb;
  #line 2340 
  struct lancer_cmd_req_write_object *req;
  #line 2341 
  struct lancer_cmd_resp_write_object *resp;
  #line 2343 
  int status;
  #line 2342 
  void *ctxt = (void *)0;
  #line 2345 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2346 
  adapter->flash_status = 0U;
  #line 2348 
  wrb = wrb_from_mccq(adapter);
  #line 2349 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2350 
    status = -16;
    #line 2351 
    goto err_unlock;
  }
  #line 2354 
  req = (struct lancer_cmd_req_write_object *)embedded_payload(wrb);
  #line 2356 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)172,144,wrb,(struct be_dma_mem *)0);
  #line 2361 
  ctxt = (void *)(& req->context);
  #line 2362 
  ;
  #line 2362 
  ;
  #line 2362 
  amap_set(ctxt,0U,amap_mask(24U),0U,data_size);
  #line 2365 
  if (data_size == 0U) {
    #line 2366 
    ;
    #line 2366 
    amap_set(ctxt,0U,amap_mask(1U),31U,1U);
  }
  else {
    #line 2369 
    ;
    #line 2369 
    amap_set(ctxt,0U,amap_mask(1U),31U,0U);
  }
  #line 2372 
  swap_dws(ctxt,4);
  #line 2373 
  req->write_offset = data_offset;
  #line 2374 
  strlcpy((char *)(& req->object_name),obj_name,104UL);
  #line 2375 
  req->descriptor_count = 1U;
  #line 2376 
  req->buf_len = data_size;
  #line 2377 
  req->addr_low = (unsigned int)cmd->dma + 144U;
  #line 2380 
  req->addr_high = (unsigned int)((cmd->dma + 144ULL) >> 32);
  #line 2383 
  status = be_mcc_notify(adapter);
  #line 2384 
  if (status != 0) 
                   #line 2385 
                   goto err_unlock;
  #line 2387 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2389 
  ;
  #line 2389 
  if (wait_for_completion_timeout(& adapter->et_cmd_compl,
                                    msecs_to_jiffies(60000U)) == 0UL) 
    #line 2391 
    status = -110; else 
                        #line 2393 
                        status = (int)adapter->flash_status;
  #line 2395 
  resp = (struct lancer_cmd_resp_write_object *)embedded_payload(wrb);
  #line 2396 
  if (status == 0) {
    #line 2397 
    *data_written = resp->actual_write_len;
    #line 2398 
    *change_status = resp->change_status;
  }
  else 
       #line 2400 
       *addn_status = resp->additional_status;
  #line 2403 
  return status;
  #line 2405 
  err_unlock: 
              #line 2405 
  ;
  #line 2406 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2407 
  return status;
}

#line 2410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_cable_type(struct be_adapter *adapter)
{
  #line 2412 
  u8 page_data[256U];
  #line 2413 
  int status;
  #line 2415 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,(u8 *)(& page_data));
  #line 2417 
  if (status == 0) 
    #line 2418 
    switch ((int)adapter->phy.interface_type) {
      #line 2419 
      case 10: 
               #line 2419 
      ;
      #line 2420 
      adapter->phy.cable_type = page_data[131];
      #line 2422 
      break;
      #line 2423 
      case 3: 
              #line 2423 
      ;
      #line 2424 
      adapter->phy.cable_type = page_data[8];
      #line 2426 
      break;
      #line 2427 
      default: 
               #line 2427 
      ;
      #line 2428 
      adapter->phy.cable_type = (unsigned char)0U;
      #line 2429 
      break;
    }
  #line 2432 
  return status;
}

#line 2435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_sfp_info(struct be_adapter *adapter)
{
  #line 2437 
  u8 page_data[256U];
  #line 2438 
  int status;
  #line 2440 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,(u8 *)(& page_data));
  #line 2442 
  if (status == 0) {
    #line 2443 
    strlcpy((char *)(& adapter->phy.vendor_name),(char *)((u8 *)(& page_data) + 20U),16UL);
    #line 2445 
    strlcpy((char *)(& adapter->phy.vendor_pn),(char *)((u8 *)(& page_data) + 40U),16UL);
  }
  #line 2450 
  return status;
}

#line 2453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int lancer_cmd_delete_object(struct be_adapter *adapter, char *obj_name)
{
  #line 2456 
  struct lancer_cmd_req_delete_object *req;
  #line 2457 
  struct be_mcc_wrb *wrb;
  #line 2458 
  int status;
  #line 2460 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2462 
  wrb = wrb_from_mccq(adapter);
  #line 2463 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2464 
    status = -16;
    #line 2465 
    goto err;
  }
  #line 2468 
  req = (struct lancer_cmd_req_delete_object *)embedded_payload(wrb);
  #line 2470 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)174,128,wrb,(struct be_dma_mem *)0);
  #line 2474 
  strlcpy((char *)(& req->object_name),obj_name,104UL);
  #line 2476 
  status = be_mcc_notify_wait(adapter);
  #line 2477 
  err: 
       #line 2477 
  ;
  #line 2478 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2479 
  return status;
}

#line 2482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_read_object(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 data_size, u32 data_offset, char *obj_name, u32 *data_read, u32 *eof, u8 *addn_status)
{
  #line 2486 
  struct be_mcc_wrb *wrb;
  #line 2487 
  struct lancer_cmd_req_read_object *req;
  #line 2488 
  struct lancer_cmd_resp_read_object *resp;
  #line 2489 
  int status;
  #line 2491 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2493 
  wrb = wrb_from_mccq(adapter);
  #line 2494 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2495 
    status = -16;
    #line 2496 
    goto err_unlock;
  }
  #line 2499 
  req = (struct lancer_cmd_req_read_object *)embedded_payload(wrb);
  #line 2501 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)171,144,wrb,(struct be_dma_mem *)0);
  #line 2506 
  req->desired_read_len = data_size;
  #line 2507 
  req->read_offset = data_offset;
  #line 2508 
  strcpy((char *)(& req->object_name),obj_name);
  #line 2509 
  req->descriptor_count = 1U;
  #line 2510 
  req->buf_len = data_size;
  #line 2511 
  req->addr_low = (unsigned int)cmd->dma;
  #line 2512 
  req->addr_high = (unsigned int)(cmd->dma >> 32);
  #line 2514 
  status = be_mcc_notify_wait(adapter);
  #line 2516 
  resp = (struct lancer_cmd_resp_read_object *)embedded_payload(wrb);
  #line 2517 
  if (status == 0) {
    #line 2518 
    *data_read = resp->actual_read_len;
    #line 2519 
    *eof = resp->eof;
  }
  else 
       #line 2521 
       *addn_status = resp->additional_status;
  #line 2524 
  err_unlock: 
              #line 2524 
  ;
  #line 2525 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2526 
  return status;
}

#line 2529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_write_flashrom(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 flash_type, u32 flash_opcode, u32 img_offset, u32 buf_size)
{
  #line 2533 
  struct be_mcc_wrb *wrb;
  #line 2534 
  struct be_cmd_write_flashrom *req;
  #line 2535 
  int status;
  #line 2537 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2538 
  adapter->flash_status = 0U;
  #line 2540 
  wrb = wrb_from_mccq(adapter);
  #line 2541 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2542 
    status = -16;
    #line 2543 
    goto err_unlock;
  }
  #line 2545 
  req = (struct be_cmd_write_flashrom *)cmd->va;
  #line 2547 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)7,(int)cmd->size,wrb,cmd);
  #line 2551 
  req->params.op_type = flash_type;
  #line 2552 
  if (flash_type == 7U) 
                        #line 2553 
                        req->params.offset = img_offset;
  #line 2555 
  req->params.op_code = flash_opcode;
  #line 2556 
  req->params.data_buf_size = buf_size;
  #line 2558 
  status = be_mcc_notify(adapter);
  #line 2559 
  if (status != 0) 
                   #line 2560 
                   goto err_unlock;
  #line 2562 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2564 
  ;
  #line 2564 
  if (wait_for_completion_timeout(& adapter->et_cmd_compl,
                                    msecs_to_jiffies(40000U)) == 0UL) 
    #line 2566 
    status = -110; else 
                        #line 2568 
                        status = (int)adapter->flash_status;
  #line 2570 
  return status;
  #line 2572 
  err_unlock: 
              #line 2572 
  ;
  #line 2573 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2574 
  return status;
}

#line 2577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_get_flash_crc(struct be_adapter *adapter, u8 *flashed_crc, u16 img_optype, u32 img_offset, u32 crc_offset)
{
  #line 2580 
  struct be_cmd_read_flash_crc *req;
  #line 2581 
  struct be_mcc_wrb *wrb;
  #line 2582 
  int status;
  #line 2584 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2586 
  wrb = wrb_from_mccq(adapter);
  #line 2587 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 2588 
    status = -16;
    #line 2589 
    goto err;
  }
  #line 2591 
  req = (struct be_cmd_read_flash_crc *)embedded_payload(wrb);
  #line 2593 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)6,40,wrb,(struct be_dma_mem *)0);
  #line 2597 
  req->params.op_type = (unsigned int)img_optype;
  #line 2598 
  if ((unsigned int)img_optype == 7U) 
                                      #line 2599 
                                      req->params.offset = img_offset + crc_offset; else 
                                                                    #line 2601 
                                                                    req->params.offset = crc_offset;
  #line 2603 
  req->params.op_code = 4U;
  #line 2604 
  req->params.data_buf_size = 4U;
  #line 2606 
  status = be_mcc_notify_wait(adapter);
  #line 2607 
  if (status == 0) 
                   #line 2608 
                   memcpy((void *)flashed_crc,(void *)(& req->crc),4UL);
  #line 2610 
  err: 
       #line 2610 
  ;
  #line 2611 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 2612 
  return status;
}

#line 2615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static char flash_cookie[2U][16U] = {{(char)'*', (char)'*', (char)'*', (char)' ', (char)'S', (char)'E', (char)' ', (char)'F', (char)'L', (char)'A', (char)'S'}, {(char)'H', (char)' ', (char)'D', (char)'I', (char)'R', (char)'E', (char)'C', (char)'T', (char)'O', (char)'R', (char)'Y', (char)' ', (char)'*', (char)'*', (char)'*', (char)' '}};
#line 2617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool phy_flashing_required(struct be_adapter *adapter)
{
  #line 2619 
  return (_Bool)(((unsigned int)adapter->phy.phy_type == 13U && (unsigned int)adapter->phy.interface_type == 6U) != 0);
}

#line 2623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool is_comp_in_ufi(struct be_adapter *adapter, struct flash_section_info *fsec, int type)
{
  #line 2626 
  int i = 0;
  #line 2626 
  int img_type = 0;
  #line 2627 
  struct flash_section_info_g2 *fsec_g2 = (struct flash_section_info_g2 *)0;
  #line 2629 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
    #line 2630 
    fsec_g2 = (struct flash_section_info_g2 *)fsec;
  #line 2632 
  i = 0;
  #line 2632 
  while (i <= 31) {
    #line 2633 
    if (fsec_g2 != (struct flash_section_info_g2 *)0) 
                                                      #line 2634 
                                                      img_type = (int)fsec_g2->fsec_entry[i].type; else 
                                                                    #line 2636 
                                                                    img_type = (int)fsec->fsec_entry[i].type;
    #line 2638 
    if (img_type == type) 
                          #line 2639 
                          return (_Bool)1;
    #line 2632 
    i ++;
  }
  #line 2641 
  return (_Bool)0;
}

#line 2644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct flash_section_info *get_fsec_info(struct be_adapter *adapter, int header_size, struct firmware *fw)
{
  #line 2648 
  struct flash_section_info *fsec = (struct flash_section_info *)0;
  #line 2649 
  u8 *p = fw->data;
  #line 2651 
  p += (unsigned long)header_size;
  #line 2652 
  while (fw->data + fw->size > p) {
    #line 2653 
    fsec = (struct flash_section_info *)p;
    #line 2654 
    if (memcmp((void *)(& flash_cookie),(void *)(& fsec->cookie),32UL) == 0) 
      #line 2655 
      return fsec;
    #line 2656 
    p += 32U;
  }
  #line 2658 
  return (struct flash_section_info *)0;
}

#line 2661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_check_flash_crc(struct be_adapter *adapter, u8 *p, u32 img_offset, u32 img_size, int hdr_size, u16 img_optype, bool *crc_match)
{
  #line 2665 
  u32 crc_offset;
  #line 2666 
  int status;
  #line 2667 
  u8 crc[4U];
  #line 2669 
  status = be_cmd_get_flash_crc(adapter,(u8 *)(& crc),(unsigned short)((int)img_optype),img_offset,img_size + 4294967292U);
  #line 2671 
  if (status != 0) 
                   #line 2672 
                   return status;
  #line 2674 
  crc_offset = (((unsigned int)hdr_size + img_offset) + img_size) + 4294967292U;
  #line 2677 
  if (memcmp((void *)(& crc),(void *)(p + (unsigned long)crc_offset),4UL) == 0) 
    #line 2678 
    *crc_match = (_Bool)1; else 
                                #line 2680 
                                *crc_match = (_Bool)0;
  #line 2682 
  return status;
}

#line 2685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_flash(struct be_adapter *adapter, u8 *img, struct be_dma_mem *flash_cmd, int optype, int img_size, u32 img_offset)
{
  #line 2689 
  u32 flash_op;
  #line 2689 
  u32 num_bytes;
  #line 2691 
  int status;
  #line 2689 
  u32 total_bytes = (unsigned int)img_size;
  #line 2689 
  u32 bytes_sent = 0U;
  #line 2690 
  struct be_cmd_write_flashrom *req = (struct be_cmd_write_flashrom *)flash_cmd->va;
  #line 2693 
  while (total_bytes != 0U) {
    #line 2694 
    unsigned int __UNIQUE_ID___x574;
    #line 2694 
    unsigned int tmp;
    {
      #line 2694 
      __UNIQUE_ID___x574 = 32768U;
      #line 2694 
      unsigned int __UNIQUE_ID___y575 = total_bytes;
      #line 2694 
      if (__UNIQUE_ID___x574 < __UNIQUE_ID___y575) 
                                                   #line 2694 
                                                   tmp = __UNIQUE_ID___x574; else 
                                                                    #line 2694 
                                                                    tmp = __UNIQUE_ID___y575;
      }
    #line 2694 
    num_bytes = tmp;
    #line 2696 
    total_bytes -= num_bytes;
    #line 2698 
    if (total_bytes == 0U) 
      #line 2699 
      if (optype == 99) 
                        #line 2700 
                        flash_op = 9U; else 
                                            #line 2702 
                                            flash_op = 1U;
    else 
      #line 2704 
      if (optype == 99) 
                        #line 2705 
                        flash_op = 10U; else 
                                             #line 2707 
                                             flash_op = 2U;
    #line 2710 
    memcpy((void *)(& req->data_buf),(void *)img,(unsigned long)num_bytes);
    #line 2711 
    img += (unsigned long)num_bytes;
    #line 2712 
    status = be_cmd_write_flashrom(adapter,flash_cmd,(unsigned int)optype,flash_op,img_offset + bytes_sent,num_bytes);
    #line 2715 
    if ((status > 0 && ((unsigned int)status & 65535U) == 2U) && optype == 99) 
      #line 2717 
      break;
    else 
      #line 2718 
      if (status != 0) 
                       #line 2719 
                       return status;
    #line 2721 
    bytes_sent += num_bytes;
  }
  #line 2723 
  return 0;
}

#line 2727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_fw_ncsi_supported(char *ver)
{
  #line 2730 
  int v2[4U];
  #line 2731 
  int i;
  #line 2729 
  int v1[4U] = {3, 102, 148, 0};
  #line 2733 
  if (sscanf(ver,(char *)"%d.%d.%d.%d",v2,& v2[1],& v2[2],& v2[3]) != 4) 
    #line 2734 
    return (_Bool)0;
  #line 2736 
  i = 0;
  #line 2736 
  while (i <= 3) {
    #line 2737 
    if (v1[i] < v2[i]) 
                       #line 2738 
                       return (_Bool)1;
    else 
      #line 2739 
      if (v1[i] > v2[i]) 
                         #line 2740 
                         return (_Bool)0;
    #line 2736 
    i ++;
  }
  #line 2743 
  return (_Bool)1;
}

#line 2747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_flash_BEx(struct be_adapter *adapter, struct firmware *fw, struct be_dma_mem *flash_cmd, int num_of_images)
{
  #line 2754 
  int status;
  #line 2754 
  int i;
  #line 2754 
  int filehdr_size;
  #line 2754 
  int num_comp;
  #line 2755 
  struct flash_comp *pflashcomp;
  #line 2756 
  bool crc_match;
  #line 2757 
  u8 *p;
  #line 2751 
  int img_hdrs_size = (int)((unsigned long)num_of_images * (unsigned long)48U);
  #line 2752 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2753 
  struct flash_section_info *fsec = (struct flash_section_info *)0;
  #line 2759 
  struct flash_comp gen3_flash_types[10U] = {{.offset = 2097152UL, .optype = 0, .size = 2097152, .img_type = 160}, {.offset = 262144UL, .optype = 1, .size = 1048576, .img_type = 226}, {.offset = 12582912UL, .optype = 2, .size = 524288, .img_type = 34}, {.offset = 13107200UL, .optype = 3, .size = 524288, .img_type = 32}, {.offset = 13631488UL, .optype = 8, .size = 524288, .img_type = 33}, {.offset = 4194304UL, .optype = 9, .size = 2097152, .img_type = 176}, {.offset = 6291456UL, .optype = 10, .size = 2097152, .img_type = 162}, {.offset = 8388608UL, .optype = 11, .size = 2097152, .img_type = 178}, {.offset = 15990784UL, .optype = 13, .size = 262144, .img_type = 16}, {.offset = 1310720UL, .optype = 99, .size = 262144, .img_type = 192}};
  #line 2782 
  struct flash_comp gen2_flash_types[8U] = {{.offset = 1048576UL, .optype = 0, .size = 1310720, .img_type = 160}, {.offset = 32768UL, .optype = 1, .size = 262144, .img_type = 226}, {.offset = 7340032UL, .optype = 2, .size = 262144, .img_type = 34}, {.offset = 7864320UL, .optype = 3, .size = 262144, .img_type = 32}, {.offset = 524288UL, .optype = 8, .size = 262144, .img_type = 33}, {.offset = 2359296UL, .optype = 9, .size = 1310720, .img_type = 176}, {.offset = 3670016UL, .optype = 10, .size = 1310720, .img_type = 162}, {.offset = 4980736UL, .optype = 11, .size = 1310720, .img_type = 178}};
  #line 2801 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
    #line 2802 
    pflashcomp = (struct flash_comp *)(& gen3_flash_types);
    #line 2803 
    filehdr_size = 128;
    #line 2804 
    num_comp = 10;
  }
  else {
    #line 2806 
    pflashcomp = (struct flash_comp *)(& gen2_flash_types);
    #line 2807 
    filehdr_size = 96;
    #line 2808 
    num_comp = 8;
    #line 2809 
    img_hdrs_size = 0;
  }
  #line 2813 
  fsec = get_fsec_info(adapter,filehdr_size + img_hdrs_size,fw);
  #line 2814 
  if (fsec == (struct flash_section_info *)0) {
    #line 2815 
    _dev_err(dev,(char *)"Invalid Cookie. FW image may be corrupted\n");
    #line 2816 
    return -1;
  }
  #line 2818 
  i = 0;
  #line 2818 
  while (i < num_comp) {
    {
      #line 2819 
      if (! is_comp_in_ufi(adapter,fsec,(pflashcomp + (unsigned long)i)->img_type)) 
        #line 2820 
        goto __Cont;
      #line 2822 
      if ((pflashcomp + (unsigned long)i)->optype == 13) {
        #line 2823 
        if (! be_fw_ncsi_supported((char *)(& adapter->fw_ver))) {
          #line 2824 
          _dev_info(dev,(char *)"NCSI section update is not supported in FW ver %s\n",(char *)(& adapter->fw_ver));
          #line 2825 
          goto __Cont;
        }
      }
      #line 2828 
      if ((pflashcomp + (unsigned long)i)->optype == 99) {
        #line 2829 
        if (! phy_flashing_required(adapter)) 
                                              #line 2830 
                                              goto __Cont;
      }
      #line 2832 
      if ((pflashcomp + (unsigned long)i)->optype == 1) {
        #line 2833 
        status = be_check_flash_crc(adapter,fw->data,(unsigned int)(pflashcomp + (unsigned long)i)->offset,(unsigned int)(pflashcomp + (unsigned long)i)->size,filehdr_size + img_hdrs_size,(unsigned short)1,& crc_match);
        #line 2839 
        if (status != 0) {
          #line 2840 
          _dev_err(dev,(char *)"Could not get CRC for 0x%x region\n",(pflashcomp + (unsigned long)i)->optype);
          #line 2843 
          goto __Cont;
        }
        #line 2846 
        if ((int)crc_match != 0) 
                                 #line 2847 
                                 goto __Cont;
      }
      #line 2850 
      p = fw->data + (((unsigned long)filehdr_size + (pflashcomp + (unsigned long)i)->offset) + (unsigned long)img_hdrs_size);
      #line 2852 
      if (p + (unsigned long)(pflashcomp + (unsigned long)i)->size > fw->data + fw->size) 
        #line 2853 
        return -1;
      #line 2855 
      status = be_flash(adapter,p,flash_cmd,(pflashcomp + (unsigned long)i)->optype,(pflashcomp + (unsigned long)i)->size,0U);
      #line 2857 
      if (status != 0) {
        #line 2858 
        _dev_err(dev,(char *)"Flashing section type 0x%x failed\n",(pflashcomp + (unsigned long)i)->img_type);
        #line 2860 
        return status;
      }
    }
    #line 2818 
    __Cont: 
            #line 2818 
    i ++;
  }
  #line 2863 
  return 0;
}

#line 2866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static u16 be_get_img_optype(struct flash_section_entry fsec_entry)
{
  #line 2868 
  u32 img_type = fsec_entry.type;
  #line 2869 
  u16 img_optype = fsec_entry.optype;
  #line 2871 
  if ((unsigned int)img_optype != 65535U) 
                                          #line 2872 
                                          return img_optype;
  #line 2874 
  switch (img_type) {
    #line 2875 
    case (u32)160: 
                   #line 2875 
    ;
    #line 2876 
    img_optype = (unsigned short)0U;
    #line 2877 
    break;
    #line 2878 
    case (u32)226: 
                   #line 2878 
    ;
    #line 2879 
    img_optype = (unsigned short)1U;
    #line 2880 
    break;
    #line 2881 
    case (u32)34: 
                  #line 2881 
    ;
    #line 2882 
    img_optype = (unsigned short)2U;
    #line 2883 
    break;
    #line 2884 
    case (u32)32: 
                  #line 2884 
    ;
    #line 2885 
    img_optype = (unsigned short)3U;
    #line 2886 
    break;
    #line 2887 
    case (u32)33: 
                  #line 2887 
    ;
    #line 2888 
    img_optype = (unsigned short)8U;
    #line 2889 
    break;
    #line 2890 
    case (u32)176: 
                   #line 2890 
    ;
    #line 2891 
    img_optype = (unsigned short)9U;
    #line 2892 
    break;
    #line 2893 
    case (u32)16: 
                  #line 2893 
    ;
    #line 2894 
    img_optype = (unsigned short)13U;
    #line 2895 
    break;
    #line 2896 
    case (u32)48: 
                  #line 2896 
    ;
    #line 2897 
    img_optype = (unsigned short)22U;
    #line 2898 
    break;
    #line 2899 
    case (u32)192: 
                   #line 2899 
    ;
    #line 2900 
    img_optype = (unsigned short)21U;
    #line 2901 
    break;
    #line 2902 
    case (u32)208: 
                   #line 2902 
    ;
    #line 2903 
    img_optype = (unsigned short)18U;
    #line 2904 
    break;
    #line 2905 
    case (u32)209: 
                   #line 2905 
    ;
    #line 2906 
    img_optype = (unsigned short)19U;
    #line 2907 
    break;
    #line 2908 
    case (u32)210: 
                   #line 2908 
    ;
    #line 2909 
    img_optype = (unsigned short)23U;
    #line 2910 
    break;
    #line 2911 
    default: 
             #line 2911 
    ;
    #line 2912 
    break;
  }
  #line 2915 
  return img_optype;
}

#line 2918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_flash_skyhawk(struct be_adapter *adapter, struct firmware *fw, struct be_dma_mem *flash_cmd, int num_of_images)
{
  #line 2923 
  bool crc_match;
  #line 2923 
  bool old_fw_img;
  #line 2926 
  u32 img_offset;
  #line 2926 
  u32 img_size;
  #line 2926 
  u32 img_type;
  #line 2927 
  u16 img_optype;
  #line 2927 
  u16 flash_optype;
  #line 2928 
  int status;
  #line 2928 
  int i;
  #line 2928 
  int filehdr_size;
  #line 2929 
  u8 *p;
  #line 2922 
  int img_hdrs_size = (int)((unsigned long)num_of_images * (unsigned long)48U);
  #line 2923 
  bool flash_offset_support = (_Bool)1;
  #line 2924 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2925 
  struct flash_section_info *fsec = (struct flash_section_info *)0;
  #line 2931 
  filehdr_size = 128;
  #line 2932 
  fsec = get_fsec_info(adapter,filehdr_size + img_hdrs_size,fw);
  #line 2933 
  if (fsec == (struct flash_section_info *)0) {
    #line 2934 
    _dev_err(dev,(char *)"Invalid Cookie. FW image may be corrupted\n");
    #line 2935 
    return -22;
  }
  #line 2938 
  retry_flash: 
               #line 2938 
  ;
  #line 2939 
  i = 0;
  #line 2939 
  while (fsec->fsec_hdr.num_images > (unsigned int)i) {
    #line 2940 
    img_offset = fsec->fsec_entry[i].offset;
    #line 2941 
    img_size = fsec->fsec_entry[i].pad_size;
    #line 2942 
    img_type = fsec->fsec_entry[i].type;
    #line 2943 
    img_optype = be_get_img_optype(fsec->fsec_entry[i]);
    #line 2944 
    old_fw_img = (_Bool)((unsigned int)fsec->fsec_entry[i].optype == 65535U);
    #line 2946 
    if ((unsigned int)img_optype == 65535U) 
                                            #line 2947 
                                            goto __Cont;
    #line 2949 
    if ((int)flash_offset_support != 0) 
                                        #line 2950 
                                        flash_optype = (unsigned short)7U; else 
                                                                    #line 2952 
                                                                    flash_optype = img_optype;
    #line 2957 
    if ((int)old_fw_img != 0) 
                              #line 2958 
                              goto flash;
    #line 2960 
    status = be_check_flash_crc(adapter,fw->data,img_offset,img_size,filehdr_size + img_hdrs_size,(unsigned short)((int)flash_optype),& crc_match);
    #line 2964 
    if (status > 0 && ((unsigned int)status & 65534U) == 2U) {
      #line 2970 
      if ((unsigned int)flash_optype == 7U) {
        #line 2971 
        flash_offset_support = (_Bool)0;
        #line 2972 
        goto retry_flash;
      }
      #line 2982 
      _dev_err(dev,(char *)"Flash incomplete. Reset the server\n");
      #line 2983 
      _dev_err(dev,(char *)"Download FW image again after reset\n");
      #line 2984 
      return -11;
    }
    else 
      #line 2985 
      if (status != 0) {
        #line 2986 
        _dev_err(dev,(char *)"Could not get CRC for 0x%x region\n",(int)img_optype);
        #line 2988 
        return -14;
      }
    #line 2991 
    if ((int)crc_match != 0) 
                             #line 2992 
                             goto __Cont;
    #line 2994 
    flash: 
           #line 2994 
    ;
    #line 2995 
    p = fw->data + (((unsigned long)filehdr_size + (unsigned long)img_offset) + (unsigned long)img_hdrs_size);
    #line 2996 
    if (p + (unsigned long)img_size > fw->data + fw->size) 
                                                           #line 2997 
                                                           return -1;
    #line 2999 
    status = be_flash(adapter,p,flash_cmd,(int)flash_optype,(int)img_size,img_offset);
    #line 3006 
    if ((status > 0 && ((unsigned int)status & 65535U) == 3U) && (unsigned int)flash_optype == 7U) {
      #line 3008 
      flash_offset_support = (_Bool)0;
      #line 3009 
      goto retry_flash;
    }
    #line 3015 
    if ((int)old_fw_img != 0 && (status > 0 && ((unsigned int)status & 65535U) == 3U || ((unsigned int)img_optype == 23U && status > 0) && ((unsigned int)status & 65535U) == 1U)) 
      #line 3019 
      goto __Cont;
    else 
      #line 3020 
      if (status != 0) {
        #line 3024 
        unsigned int tmp;
        #line 3021 
        _dev_err(dev,(char *)"Flashing section type 0x%x failed\n",img_type);
        #line 3024 
        if (status > 0) 
                        #line 3024 
                        tmp = (unsigned int)(status >> 16) & 255U; else 
                                                                    #line 3024 
                                                                    tmp = 0U;
        #line 3024 
        switch (tmp) {
          #line 3025 
          case (unsigned int)87: 
                                 #line 3025 
          ;
          #line 3026 
          _dev_err(dev,(char *)"Digital signature missing in FW\n");
          #line 3028 
          return -22;
          #line 3029 
          case (unsigned int)86: 
                                 #line 3029 
          ;
          #line 3030 
          _dev_err(dev,(char *)"Invalid digital signature in FW\n");
          #line 3032 
          return -22;
          #line 3033 
          default: 
                   #line 3033 
          ;
          #line 3034 
          return -14;
        }
      }
    #line 2939 
    __Cont: 
            #line 2939 
    i ++;
  }
  #line 3038 
  return 0;
}

#line 3041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_fw_download(struct be_adapter *adapter, struct firmware *fw)
{
  #line 3045 
  struct be_dma_mem flash_cmd;
  #line 3054 
  u8 change_status;
  #line 3044 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3046 
  u8 *data_ptr = (u8 *)0U;
  #line 3047 
  u8 *dest_image_ptr = (u8 *)0U;
  #line 3048 
  size_t image_size = 0UL;
  #line 3049 
  u32 chunk_size = 0U;
  #line 3050 
  u32 data_written = 0U;
  #line 3051 
  u32 offset = 0U;
  #line 3052 
  int status = 0;
  #line 3053 
  u8 add_status = (unsigned char)0U;
  #line 3056 
  if ((fw->size & 3UL) != 0UL) {
    #line 3057 
    _dev_err(dev,(char *)"FW image size should be multiple of 4\n");
    #line 3058 
    return -22;
  }
  #line 3061 
  flash_cmd.size = 32912U;
  #line 3063 
  flash_cmd.va = dma_alloc_coherent(dev,(unsigned long)flash_cmd.size,& flash_cmd.dma,3264U);
  #line 3065 
  if (flash_cmd.va == (void *)0) 
                                 #line 3066 
                                 return -12;
  #line 3068 
  dest_image_ptr = (u8 *)(flash_cmd.va + 144UL);
  #line 3070 
  image_size = fw->size;
  #line 3071 
  data_ptr = fw->data;
  #line 3073 
  while (image_size != 0UL) {
    #line 3074 
    unsigned int __UNIQUE_ID___x576;
    #line 3074 
    unsigned int tmp;
    {
      #line 3074 
      __UNIQUE_ID___x576 = (unsigned int)image_size;
      #line 3074 
      unsigned int __UNIQUE_ID___y577 = 32768U;
      #line 3074 
      if (__UNIQUE_ID___x576 < __UNIQUE_ID___y577) 
                                                   #line 3074 
                                                   tmp = __UNIQUE_ID___x576; else 
                                                                    #line 3074 
                                                                    tmp = __UNIQUE_ID___y577;
      }
    #line 3074 
    chunk_size = tmp;
    #line 3077 
    memcpy((void *)dest_image_ptr,(void *)data_ptr,(unsigned long)chunk_size);
    #line 3079 
    status = lancer_cmd_write_object(adapter,& flash_cmd,chunk_size,offset,(char *)"/prg",& data_written,& change_status,& add_status);
    #line 3084 
    if (status != 0) 
                     #line 3085 
                     break;
    #line 3087 
    offset += data_written;
    #line 3088 
    data_ptr += (unsigned long)data_written;
    #line 3089 
    image_size -= (unsigned long)data_written;
  }
  #line 3092 
  if (status == 0) 
                   #line 3094 
                   status = lancer_cmd_write_object(adapter,& flash_cmd,0U,offset,(char *)"/prg",& data_written,& change_status,& add_status);
  #line 3101 
  dma_free_coherent(dev,(unsigned long)flash_cmd.size,flash_cmd.va,flash_cmd.dma);
  #line 3102 
  if (status != 0) {
    #line 3104 
    int tmp_1;
    #line 3103 
    _dev_err(dev,(char *)"Firmware load error\n");
    #line 3104 
    if (status <= 0) 
                     #line 3104 
                     tmp_1 = status; else 
                                          #line 3104 
                                          tmp_1 = -5;
    #line 3104 
    return tmp_1;
  }
  #line 3107 
  _dev_info(dev,(char *)"Firmware flashed successfully\n");
  #line 3109 
  if ((unsigned int)change_status == 2U) {
    #line 3110 
    _dev_info(dev,(char *)"Resetting adapter to activate new FW\n");
    #line 3111 
    status = lancer_physdev_ctrl(adapter,2U);
    #line 3113 
    if (status != 0) {
      #line 3114 
      _dev_err(dev,(char *)"Adapter busy, could not reset FW\n");
      #line 3115 
      _dev_err(dev,(char *)"Reboot server to activate new FW\n");
    }
  }
  else 
    #line 3117 
    if ((unsigned int)change_status != 0U) 
                                           #line 3118 
                                           _dev_info(dev,(char *)"Reboot server to activate new FW\n");
  #line 3121 
  return 0;
}

#line 3127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_check_ufi_compatibility(struct be_adapter *adapter, struct flash_file_hdr_g3 *fhdr)
{
  #line 3130 
  if (fhdr == (struct flash_file_hdr_g3 *)0) {
    #line 3131 
    _dev_err(& (adapter->pdev)->dev,(char *)"Invalid FW UFI file");
    #line 3132 
    return (_Bool)0;
  }
  #line 3138 
  switch ((int)fhdr->build[0]) {
    #line 3139 
    case 52: 
             #line 3139 
    ;
    #line 3140 
    if ((unsigned int)(adapter->pdev)->device != 1824U && (unsigned int)(adapter->pdev)->device != 1832U) 
      #line 3141 
      return (_Bool)0;
    #line 3142 
    break;
    #line 3143 
    case 51: 
             #line 3143 
    ;
    #line 3144 
    if ((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) 
      #line 3145 
      return (_Bool)0;
    #line 3146 
    break;
    #line 3147 
    case 50: 
             #line 3147 
    ;
    #line 3148 
    if ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) 
      #line 3149 
      return (_Bool)0;
    #line 3150 
    break;
    #line 3151 
    default: 
             #line 3151 
    ;
    #line 3152 
    return (_Bool)0;
  }
  #line 3160 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) && (unsigned int)fhdr->asic_type_rev == 0U) 
    #line 3161 
    return (_Bool)((unsigned int)adapter->asic_rev <= 15U); else 
                                                                 #line 3163 
                                                                 return (_Bool)((int)((unsigned short)fhdr->asic_type_rev) >= (int)adapter->asic_rev);
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_fw_download(struct be_adapter *adapter, struct firmware *fw)
{
  #line 3169 
  struct flash_file_hdr_g3 *fhdr3;
  #line 3170 
  struct image_hdr *img_hdr_ptr;
  #line 3171 
  int i;
  #line 3171 
  int num_imgs;
  #line 3172 
  struct be_dma_mem flash_cmd;
  #line 3168 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3171 
  int status = 0;
  #line 3174 
  fhdr3 = (struct flash_file_hdr_g3 *)fw->data;
  #line 3175 
  if (! be_check_ufi_compatibility(adapter,fhdr3)) {
    #line 3176 
    _dev_err(dev,(char *)"Flash image is not compatible with adapter\n");
    #line 3177 
    return -22;
  }
  #line 3180 
  flash_cmd.size = 32804U;
  #line 3181 
  flash_cmd.va = dma_alloc_coherent(dev,(unsigned long)flash_cmd.size,& flash_cmd.dma,3264U);
  #line 3183 
  if (flash_cmd.va == (void *)0) 
                                 #line 3184 
                                 return -12;
  #line 3186 
  num_imgs = (int)fhdr3->num_imgs;
  #line 3187 
  i = 0;
  #line 3187 
  while (i < num_imgs) {
    #line 3188 
    img_hdr_ptr = (struct image_hdr *)(fw->data + ((unsigned long)i * 48UL + 128UL));
    #line 3191 
    if (((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) && img_hdr_ptr->imageid != 1U) 
      #line 3193 
      goto __Cont;
    #line 3195 
    if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
      #line 3196 
      status = be_flash_skyhawk(adapter,fw,& flash_cmd,num_imgs); else 
                                                                    #line 3199 
                                                                    status = be_flash_BEx(adapter,fw,& flash_cmd,num_imgs);
    #line 3187 
    __Cont: 
            #line 3187 
    i ++;
  }
  #line 3203 
  dma_free_coherent(dev,(unsigned long)flash_cmd.size,flash_cmd.va,flash_cmd.dma);
  #line 3204 
  if (status == 0) 
                   #line 3205 
                   _dev_info(dev,(char *)"Firmware flashed successfully\n");
  #line 3207 
  return status;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_enable_magic_wol(struct be_adapter *adapter, u8 *mac, struct be_dma_mem *nonemb_cmd)
{
  #line 3213 
  struct be_mcc_wrb *wrb;
  #line 3214 
  struct be_cmd_req_acpi_wol_magic_config *req;
  #line 3215 
  int status;
  #line 3217 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3219 
  wrb = wrb_from_mccq(adapter);
  #line 3220 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3221 
    status = -16;
    #line 3222 
    goto err;
  }
  #line 3224 
  req = (struct be_cmd_req_acpi_wol_magic_config *)nonemb_cmd->va;
  #line 3226 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)12,604,wrb,nonemb_cmd);
  #line 3229 
  memcpy((void *)(& req->magic_mac),(void *)mac,6UL);
  #line 3231 
  status = be_mcc_notify_wait(adapter);
  #line 3233 
  err: 
       #line 3233 
  ;
  #line 3234 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3235 
  return status;
}

#line 3238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_loopback(struct be_adapter *adapter, u8 port_num, u8 loopback_type, u8 enable)
{
  #line 3241 
  struct be_mcc_wrb *wrb;
  #line 3242 
  struct be_cmd_req_set_lmode *req;
  #line 3243 
  int status;
  #line 3245 
  if (! be_cmd_allowed(adapter,(unsigned char)19,(unsigned char)11)) 
    #line 3247 
    return -1;
  #line 3249 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3251 
  wrb = wrb_from_mccq(adapter);
  #line 3252 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3253 
    status = -16;
    #line 3254 
    goto err_unlock;
  }
  #line 3257 
  req = (struct be_cmd_req_set_lmode *)embedded_payload(wrb);
  #line 3259 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)11,(unsigned char)19,20,wrb,(struct be_dma_mem *)0);
  #line 3263 
  req->src_port = port_num;
  #line 3264 
  req->dest_port = port_num;
  #line 3265 
  req->loopback_type = loopback_type;
  #line 3266 
  req->loopback_state = enable;
  #line 3268 
  status = be_mcc_notify(adapter);
  #line 3269 
  if (status != 0) 
                   #line 3270 
                   goto err_unlock;
  #line 3272 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3274 
  ;
  #line 3274 
  if (wait_for_completion_timeout(& adapter->et_cmd_compl,
                                    msecs_to_jiffies(12000U)) == 0UL) 
    #line 3276 
    status = -110;
  #line 3278 
  return status;
  #line 3280 
  err_unlock: 
              #line 3280 
  ;
  #line 3281 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3282 
  return status;
}

#line 3285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_loopback_test(struct be_adapter *adapter, u32 port_num, u32 loopback_type, u32 pkt_size, u32 num_pkts, u64 pattern)
{
  #line 3289 
  struct be_mcc_wrb *wrb;
  #line 3290 
  struct be_cmd_req_loopback_test *req;
  #line 3291 
  struct be_cmd_resp_loopback_test *resp;
  #line 3292 
  int status;
  #line 3294 
  if (! be_cmd_allowed(adapter,(unsigned char)18,(unsigned char)11)) 
    #line 3296 
    return -1;
  #line 3298 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3300 
  wrb = wrb_from_mccq(adapter);
  #line 3301 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3302 
    status = -16;
    #line 3303 
    goto err;
  }
  #line 3306 
  req = (struct be_cmd_req_loopback_test *)embedded_payload(wrb);
  #line 3308 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)11,(unsigned char)18,48,wrb,(struct be_dma_mem *)0);
  #line 3312 
  req->hdr.timeout = 15U;
  #line 3313 
  req->pattern = pattern;
  #line 3314 
  req->src_port = port_num;
  #line 3315 
  req->dest_port = port_num;
  #line 3316 
  req->pkt_size = pkt_size;
  #line 3317 
  req->num_pkts = num_pkts;
  #line 3318 
  req->loopback_type = loopback_type;
  #line 3320 
  status = be_mcc_notify(adapter);
  #line 3321 
  if (status != 0) 
                   #line 3322 
                   goto err;
  #line 3324 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3326 
  wait_for_completion(& adapter->et_cmd_compl);
  #line 3327 
  resp = (struct be_cmd_resp_loopback_test *)embedded_payload(wrb);
  #line 3328 
  status = (int)resp->status;
  #line 3330 
  return status;
  #line 3331 
  err: 
       #line 3331 
  ;
  #line 3332 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3333 
  return status;
}

#line 3336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_ddr_dma_test(struct be_adapter *adapter, u64 pattern, u32 byte_cnt, struct be_dma_mem *cmd)
{
  #line 3339 
  struct be_mcc_wrb *wrb;
  #line 3340 
  struct be_cmd_req_ddrdma_test *req;
  #line 3341 
  int status;
  #line 3342 
  int i;
  #line 3342 
  int j = 0;
  #line 3344 
  if (! be_cmd_allowed(adapter,(unsigned char)17,(unsigned char)11)) 
    #line 3346 
    return -1;
  #line 3348 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3350 
  wrb = wrb_from_mccq(adapter);
  #line 3351 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3352 
    status = -16;
    #line 3353 
    goto err;
  }
  #line 3355 
  req = (struct be_cmd_req_ddrdma_test *)cmd->va;
  #line 3356 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)11,(unsigned char)17,(int)cmd->size,wrb,cmd);
  #line 3360 
  req->pattern = pattern;
  #line 3361 
  req->byte_count = byte_cnt;
  #line 3362 
  i = 0;
  #line 3362 
  while ((unsigned int)i < byte_cnt) {
    #line 3363 
    req->snd_buff[i] = (unsigned char)(pattern >> j * 8);
    #line 3364 
    j ++;
    #line 3365 
    if (j > 7) 
               #line 3366 
               j = 0;
    #line 3362 
    i ++;
  }
  #line 3369 
  status = be_mcc_notify_wait(adapter);
  #line 3371 
  if (status == 0) {
    #line 3372 
    struct be_cmd_resp_ddrdma_test *resp;
    #line 3374 
    resp = (struct be_cmd_resp_ddrdma_test *)cmd->va;
    #line 3375 
    if (memcmp((void *)(& resp->rcv_buff),(void *)(& req->snd_buff),
               (unsigned long)byte_cnt) != 0) 
      #line 3377 
      status = -1;
    else 
      #line 3375 
      if (resp->snd_err != 0U) 
                               #line 3377 
                               status = -1;
  }
  #line 3381 
  err: 
       #line 3381 
  ;
  #line 3382 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3383 
  return status;
}

#line 3386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_seeprom_data(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd)
{
  #line 3389 
  struct be_mcc_wrb *wrb;
  #line 3390 
  struct be_cmd_req_seeprom_read *req;
  #line 3391 
  int status;
  #line 3393 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3395 
  wrb = wrb_from_mccq(adapter);
  #line 3396 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3397 
    status = -16;
    #line 3398 
    goto err;
  }
  #line 3400 
  req = (struct be_cmd_req_seeprom_read *)nonemb_cmd->va;
  #line 3402 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)30,1040,wrb,nonemb_cmd);
  #line 3406 
  status = be_mcc_notify_wait(adapter);
  #line 3408 
  err: 
       #line 3408 
  ;
  #line 3409 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3410 
  return status;
}

#line 3413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_phy_info(struct be_adapter *adapter)
{
  #line 3415 
  struct be_mcc_wrb *wrb;
  #line 3416 
  struct be_cmd_req_get_phy_info *req;
  #line 3417 
  struct be_dma_mem cmd;
  #line 3418 
  int status;
  #line 3420 
  if (! be_cmd_allowed(adapter,(unsigned char)102,(unsigned char)1)) 
    #line 3422 
    return -1;
  #line 3424 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3426 
  wrb = wrb_from_mccq(adapter);
  #line 3427 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3428 
    status = -16;
    #line 3429 
    goto err;
  }
  #line 3431 
  cmd.size = 40U;
  #line 3432 
  cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,2592U);
  #line 3434 
  if (cmd.va == (void *)0) {
    #line 3435 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory alloc failure\n");
    #line 3436 
    status = -12;
    #line 3437 
    goto err;
  }
  #line 3440 
  req = (struct be_cmd_req_get_phy_info *)cmd.va;
  #line 3442 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)102,40,wrb,& cmd);
  #line 3446 
  status = be_mcc_notify_wait(adapter);
  #line 3447 
  if (status == 0) {
    #line 3448 
    struct be_phy_info *resp_phy_info = (struct be_phy_info *)(cmd.va + 16UL);
    #line 3451 
    adapter->phy.phy_type = resp_phy_info->phy_type;
    #line 3452 
    adapter->phy.interface_type = resp_phy_info->interface_type;
    #line 3454 
    adapter->phy.auto_speeds_supported = resp_phy_info->auto_speeds_supported;
    #line 3456 
    adapter->phy.fixed_speeds_supported = resp_phy_info->fixed_speeds_supported;
    #line 3458 
    adapter->phy.misc_params = resp_phy_info->misc_params;
    #line 3461 
    if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
      #line 3462 
      adapter->phy.fixed_speeds_supported = (unsigned short)12U;
  }
  #line 3467 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 3468 
  err: 
       #line 3468 
  ;
  #line 3469 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3470 
  return status;
}

#line 3473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_set_qos(struct be_adapter *adapter, u32 bps, u32 domain)
{
  #line 3475 
  struct be_mcc_wrb *wrb;
  #line 3476 
  struct be_cmd_req_set_qos *req;
  #line 3477 
  int status;
  #line 3479 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3481 
  wrb = wrb_from_mccq(adapter);
  #line 3482 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3483 
    status = -16;
    #line 3484 
    goto err;
  }
  #line 3487 
  req = (struct be_cmd_req_set_qos *)embedded_payload(wrb);
  #line 3489 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)28,52,wrb,(struct be_dma_mem *)0);
  #line 3492 
  req->hdr.domain = (unsigned char)domain;
  #line 3493 
  req->valid_bits = 1U;
  #line 3494 
  req->max_bps_nic = bps;
  #line 3496 
  status = be_mcc_notify_wait(adapter);
  #line 3498 
  err: 
       #line 3498 
  ;
  #line 3499 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3500 
  return status;
}

#line 3503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_cntl_attributes(struct be_adapter *adapter)
{
  #line 3505 
  struct be_mcc_wrb *wrb;
  #line 3506 
  struct be_cmd_req_cntl_attribs *req;
  #line 3507 
  struct be_cmd_resp_cntl_attribs *resp;
  #line 3508 
  int status;
  #line 3508 
  int i;
  #line 3510 
  struct mgmt_controller_attrib *attribs;
  #line 3511 
  struct be_dma_mem attribs_cmd;
  #line 3512 
  u32 *serial_num;
  #line 3509 
  int payload_len = 592;
  #line 3514 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 3515 
    return -1;
  #line 3517 
  memset((void *)(& attribs_cmd),0,24UL);
  #line 3518 
  attribs_cmd.size = 592U;
  #line 3519 
  attribs_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)attribs_cmd.size,& attribs_cmd.dma,2592U);
  #line 3522 
  if (attribs_cmd.va == (void *)0) {
    #line 3523 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory allocation failure\n");
    #line 3524 
    status = -12;
    #line 3525 
    goto err;
  }
  #line 3528 
  wrb = wrb_from_mbox(adapter);
  #line 3529 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3530 
    status = -16;
    #line 3531 
    goto err;
  }
  #line 3533 
  req = (struct be_cmd_req_cntl_attribs *)attribs_cmd.va;
  #line 3535 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)32,payload_len,wrb,& attribs_cmd);
  #line 3539 
  status = be_mbox_notify_wait(adapter);
  #line 3540 
  if (status == 0) {
    #line 3541 
    attribs = (struct mgmt_controller_attrib *)(attribs_cmd.va + 16UL);
    #line 3542 
    adapter->hba_port_num = attribs->hba_attribs.phy_port;
    #line 3543 
    serial_num = (u32 *)(& attribs->hba_attribs.controller_serial_number);
    #line 3544 
    i = 0;
    #line 3544 
    while (i <= 7) {
      #line 3545 
      adapter->serial_num[i] = (unsigned short)*(serial_num + (unsigned long)i);
      #line 3544 
      i ++;
    }
    #line 3550 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
      #line 3551 
      adapter->pf_num = attribs->hba_attribs.pci_funcnum;
  }
  #line 3554 
  err: 
       #line 3554 
  ;
  #line 3555 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 3556 
  if (attribs_cmd.va != (void *)0) 
                                   #line 3557 
                                   dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)attribs_cmd.size,attribs_cmd.va,attribs_cmd.dma);
  #line 3559 
  return status;
}

#line 3563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_req_native_mode(struct be_adapter *adapter)
{
  #line 3565 
  struct be_mcc_wrb *wrb;
  #line 3566 
  struct be_cmd_req_set_func_cap *req;
  #line 3567 
  int status;
  #line 3569 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 3570 
    return -1;
  #line 3572 
  wrb = wrb_from_mbox(adapter);
  #line 3573 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3574 
    status = -16;
    #line 3575 
    goto err;
  }
  #line 3578 
  req = (struct be_cmd_req_set_func_cap *)embedded_payload(wrb);
  #line 3580 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)103,236,wrb,(struct be_dma_mem *)0);
  #line 3584 
  req->valid_cap_flags = 6U;
  #line 3586 
  req->cap_flags = 4U;
  #line 3588 
  status = be_mbox_notify_wait(adapter);
  #line 3589 
  if (status == 0) {
    #line 3590 
    struct be_cmd_resp_set_func_cap *resp = embedded_payload(wrb);
    #line 3592 
    adapter->be3_native = (_Bool)((resp->cap_flags & 4U) != 0U);
    #line 3594 
    if (! adapter->be3_native) 
                               #line 3595 
                               _dev_warn(& (adapter->pdev)->dev,(char *)"adapter not in advanced mode\n");
  }
  #line 3598 
  err: 
       #line 3598 
  ;
  #line 3599 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 3600 
  return status;
}

#line 3604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fn_privileges(struct be_adapter *adapter, u32 *privilege, u32 domain)
{
  #line 3607 
  struct be_mcc_wrb *wrb;
  #line 3608 
  struct be_cmd_req_get_fn_privileges *req;
  #line 3609 
  int status;
  #line 3611 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3613 
  wrb = wrb_from_mccq(adapter);
  #line 3614 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3615 
    status = -16;
    #line 3616 
    goto err;
  }
  #line 3619 
  req = (struct be_cmd_req_get_fn_privileges *)embedded_payload(wrb);
  #line 3621 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)170,20,wrb,(struct be_dma_mem *)0);
  #line 3625 
  req->hdr.domain = (unsigned char)domain;
  #line 3627 
  status = be_mcc_notify_wait(adapter);
  #line 3628 
  if (status == 0) {
    #line 3630 
    struct be_cmd_resp_get_fn_privileges *resp = embedded_payload(wrb);
    #line 3632 
    *privilege = resp->privilege_mask;
    #line 3637 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
      #line 3637 
      if ((int)be_is_mc(adapter) != 0) 
        #line 3637 
        if ((unsigned int)adapter->virtfn == 0U) 
                                                 #line 3639 
                                                 *privilege = 1792U;
    }
  }
  #line 3642 
  err: 
       #line 3642 
  ;
  #line 3643 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3644 
  return status;
}

#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_fn_privileges(struct be_adapter *adapter, u32 privileges, u32 domain)
{
  #line 3651 
  struct be_mcc_wrb *wrb;
  #line 3652 
  struct be_cmd_req_set_fn_privileges *req;
  #line 3653 
  int status;
  #line 3655 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3657 
  wrb = wrb_from_mccq(adapter);
  #line 3658 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3659 
    status = -16;
    #line 3660 
    goto err;
  }
  #line 3663 
  req = (struct be_cmd_req_set_fn_privileges *)embedded_payload(wrb);
  #line 3664 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)100,24,wrb,(struct be_dma_mem *)0);
  #line 3667 
  req->hdr.domain = (unsigned char)domain;
  #line 3668 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 3669 
    req->privileges_lancer = privileges; else 
                                              #line 3671 
                                              req->privileges = privileges;
  #line 3673 
  status = be_mcc_notify_wait(adapter);
  #line 3674 
  err: 
       #line 3674 
  ;
  #line 3675 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3676 
  return status;
}

#line 3683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_mac_from_list(struct be_adapter *adapter, u8 *mac, bool *pmac_id_valid, u32 *pmac_id, u32 if_handle, u8 domain)
{
  #line 3687 
  struct be_mcc_wrb *wrb;
  #line 3688 
  struct be_cmd_req_get_mac_list *req;
  #line 3689 
  int status;
  #line 3690 
  int mac_count;
  #line 3691 
  struct be_dma_mem get_mac_list_cmd;
  #line 3692 
  int i;
  #line 3694 
  memset((void *)(& get_mac_list_cmd),0,24UL);
  #line 3695 
  get_mac_list_cmd.size = 548U;
  #line 3696 
  get_mac_list_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)get_mac_list_cmd.size,& get_mac_list_cmd.dma,2592U);
  #line 3701 
  if (get_mac_list_cmd.va == (void *)0) {
    #line 3702 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory allocation failure during GET_MAC_LIST\n");
    #line 3704 
    return -12;
  }
  #line 3707 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3709 
  wrb = wrb_from_mccq(adapter);
  #line 3710 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3711 
    status = -16;
    #line 3712 
    goto out;
  }
  #line 3715 
  req = (struct be_cmd_req_get_mac_list *)get_mac_list_cmd.va;
  #line 3717 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)147,(int)get_mac_list_cmd.size,wrb,& get_mac_list_cmd);
  #line 3720 
  req->hdr.domain = domain;
  #line 3721 
  req->mac_type = (unsigned char)1U;
  #line 3722 
  if ((int)*pmac_id_valid != 0) {
    #line 3723 
    req->mac_id = *pmac_id;
    #line 3724 
    req->iface_id = (unsigned short)if_handle;
    #line 3725 
    req->perm_override = (unsigned char)0U;
  }
  else 
       #line 3727 
       req->perm_override = (unsigned char)1U;
  #line 3730 
  status = be_mcc_notify_wait(adapter);
  #line 3731 
  if (status == 0) {
    #line 3732 
    struct be_cmd_resp_get_mac_list *resp = (struct be_cmd_resp_get_mac_list *)get_mac_list_cmd.va;
    #line 3735 
    if ((int)*pmac_id_valid != 0) {
      #line 3736 
      memcpy((void *)mac,(void *)(& resp->macid_macaddr.mac_addr_id.macaddr),6UL);
      #line 3738 
      goto out;
    }
    #line 3741 
    mac_count = (int)resp->true_mac_count + (int)resp->pseudo_mac_count;
    #line 3747 
    i = 0;
    #line 3747 
    while (i < mac_count) {
      {
        #line 3748 
        struct get_list_macaddr *mac_entry;
        #line 3749 
        u16 mac_addr_size;
        #line 3750 
        u32 mac_id;
        #line 3752 
        mac_entry = & resp->macaddr_list[i];
        #line 3753 
        mac_addr_size = mac_entry->mac_addr_size;
        #line 3757 
        if ((unsigned int)mac_addr_size == 4U) {
          #line 3758 
          *pmac_id_valid = (_Bool)1;
          #line 3759 
          mac_id = mac_entry->mac_addr_id.s_mac_id.mac_id;
          #line 3760 
          *pmac_id = mac_id;
          #line 3761 
          goto out;
        }
      }
      #line 3747 
      i ++;
    }
    #line 3765 
    *pmac_id_valid = (_Bool)0;
    #line 3766 
    memcpy((void *)mac,(void *)(& resp->macaddr_list[0].mac_addr_id.macaddr),6UL);
  }
  #line 3770 
  out: 
       #line 3770 
  ;
  #line 3771 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3772 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)get_mac_list_cmd.size,get_mac_list_cmd.va,get_mac_list_cmd.dma);
  #line 3774 
  return status;
}

#line 3777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_active_mac(struct be_adapter *adapter, u32 curr_pmac_id, u8 *mac, u32 if_handle, bool active, u32 domain)
{
  #line 3780 
  if (! active) 
                #line 3781 
                be_cmd_get_mac_from_list(adapter,mac,& active,& curr_pmac_id,if_handle,(unsigned char)((int)((unsigned char)domain)));
  #line 3783 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    #line 3784 
    return be_cmd_mac_addr_query(adapter,mac,(_Bool)0,if_handle,curr_pmac_id);
  }
  else {
    #line 3788 
    return be_cmd_get_mac_from_list(adapter,mac,& active,& curr_pmac_id,
                                 if_handle,
                                 (unsigned char)((int)((unsigned char)domain)));
  }
}

#line 3793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_perm_mac(struct be_adapter *adapter, u8 *mac)
{
  #line 3795 
  int status;
  #line 3796 
  bool pmac_valid = (_Bool)0;
  #line 3798 
  eth_zero_addr(mac);
  #line 3800 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    #line 3801 
    if ((unsigned int)adapter->virtfn == 0U) 
                                             #line 3802 
                                             status = be_cmd_mac_addr_query(adapter,mac,(_Bool)1,0U,0U); else 
                                                                    #line 3805 
                                                                    status = be_cmd_mac_addr_query(adapter,mac,(_Bool)0,(unsigned int)adapter->if_handle,0U);
  else 
       #line 3808 
       status = be_cmd_get_mac_from_list(adapter,mac,& pmac_valid,(u32 *)0U,(unsigned int)adapter->if_handle,(unsigned char)0);
  #line 3812 
  return status;
}

#line 3816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_mac_list(struct be_adapter *adapter, u8 *mac_array, u8 mac_count, u32 domain)
{
  #line 3819 
  struct be_mcc_wrb *wrb;
  #line 3820 
  struct be_cmd_req_set_mac_list *req;
  #line 3821 
  int status;
  #line 3822 
  struct be_dma_mem cmd;
  #line 3824 
  memset((void *)(& cmd),0,24UL);
  #line 3825 
  cmd.size = 404U;
  #line 3826 
  cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,3264U);
  #line 3828 
  if (cmd.va == (void *)0) 
                           #line 3829 
                           return -12;
  #line 3831 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3833 
  wrb = wrb_from_mccq(adapter);
  #line 3834 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3835 
    status = -16;
    #line 3836 
    goto err;
  }
  #line 3839 
  req = (struct be_cmd_req_set_mac_list *)cmd.va;
  #line 3840 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)148,404,wrb,& cmd);
  #line 3844 
  req->hdr.domain = (unsigned char)domain;
  #line 3845 
  req->mac_count = mac_count;
  #line 3846 
  if ((unsigned int)mac_count != 0U) 
                                     #line 3847 
                                     memcpy((void *)(& req->mac),(void *)mac_array,(unsigned long)((int)mac_count * 6));
  #line 3849 
  status = be_mcc_notify_wait(adapter);
  #line 3851 
  err: 
       #line 3851 
  ;
  #line 3852 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 3853 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3854 
  return status;
}

#line 3861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_mac(struct be_adapter *adapter, u8 *mac, int if_id, u32 dom)
{
  #line 3864 
  u8 old_mac[6U];
  #line 3865 
  u32 pmac_id;
  #line 3866 
  int status;
  #line 3863 
  bool active_mac = (_Bool)0;
  #line 3868 
  status = be_cmd_get_mac_from_list(adapter,(u8 *)(& old_mac),& active_mac,& pmac_id,(unsigned int)if_id,(unsigned char)((int)((unsigned char)dom)));
  #line 3871 
  if (status == 0 && (int)active_mac != 0) 
                                           #line 3872 
                                           be_cmd_pmac_del(adapter,(unsigned int)if_id,(int)pmac_id,dom);
  #line 3874 
  return be_cmd_set_mac_list(adapter,mac,(unsigned char)(mac != (u8 *)0U),dom);
}

#line 3877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_hsw_config(struct be_adapter *adapter, u16 pvid, u32 domain, u16 intf_id, u16 hsw_mode, u8 spoofchk)
{
  #line 3880 
  struct be_mcc_wrb *wrb;
  #line 3881 
  struct be_cmd_req_set_hsw_config *req;
  #line 3882 
  void *ctxt;
  #line 3883 
  int status;
  #line 3885 
  if (! be_cmd_allowed(adapter,(unsigned char)153,(unsigned char)1)) 
    #line 3887 
    return -1;
  #line 3889 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3891 
  wrb = wrb_from_mccq(adapter);
  #line 3892 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3893 
    status = -16;
    #line 3894 
    goto err;
  }
  #line 3897 
  req = (struct be_cmd_req_set_hsw_config *)embedded_payload(wrb);
  #line 3898 
  ctxt = (void *)(& req->context);
  #line 3900 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)153,36,wrb,(struct be_dma_mem *)0);
  #line 3904 
  req->hdr.domain = (unsigned char)domain;
  #line 3905 
  ;
  #line 3905 
  ;
  #line 3905 
  amap_set(ctxt,0U,amap_mask(16U),0U,(unsigned int)intf_id);
  #line 3906 
  if ((unsigned int)pvid != 0U) {
    #line 3907 
    ;
    #line 3907 
    amap_set(ctxt,0U,amap_mask(1U),30U,1U);
    #line 3908 
    ;
    #line 3908 
    ;
    #line 3908 
    amap_set(ctxt,1U,amap_mask(16U),16U,(unsigned int)pvid);
  }
  #line 3910 
  if ((unsigned int)hsw_mode != 0U) {
    #line 3911 
    ;
    #line 3911 
    ;
    #line 3911 
    amap_set(ctxt,0U,amap_mask(16U),0U,(unsigned int)adapter->hba_port_num);
    #line 3913 
    ;
    #line 3913 
    amap_set(ctxt,0U,amap_mask(1U),31U,1U);
    #line 3914 
    ;
    #line 3914 
    ;
    #line 3914 
    amap_set(ctxt,1U,amap_mask(3U),6U,(unsigned int)hsw_mode);
  }
  #line 3919 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && (unsigned int)spoofchk != 0U) {
    #line 3920 
    ;
    #line 3920 
    ;
    #line 3920 
    amap_set(ctxt,0U,amap_mask(2U),24U,(unsigned int)spoofchk);
    #line 3922 
    ;
    #line 3922 
    ;
    #line 3922 
    amap_set(ctxt,1U,amap_mask(2U),14U,(unsigned int)spoofchk);
  }
  #line 3926 
  swap_dws((void *)(& req->context),20);
  #line 3927 
  status = be_mcc_notify_wait(adapter);
  #line 3929 
  err: 
       #line 3929 
  ;
  #line 3930 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3931 
  return status;
}

#line 3935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_hsw_config(struct be_adapter *adapter, u16 *pvid, u32 domain, u16 intf_id, u8 *mode, bool *spoofchk)
{
  #line 3938 
  struct be_mcc_wrb *wrb;
  #line 3939 
  struct be_cmd_req_get_hsw_config *req;
  #line 3940 
  void *ctxt;
  #line 3941 
  int status;
  #line 3942 
  u16 vid;
  #line 3944 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3946 
  wrb = wrb_from_mccq(adapter);
  #line 3947 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 3948 
    status = -16;
    #line 3949 
    goto err;
  }
  #line 3952 
  req = (struct be_cmd_req_get_hsw_config *)embedded_payload(wrb);
  #line 3953 
  ctxt = (void *)(& req->context);
  #line 3955 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)152,20,wrb,(struct be_dma_mem *)0);
  #line 3959 
  req->hdr.domain = (unsigned char)domain;
  #line 3960 
  ;
  #line 3960 
  ;
  #line 3960 
  amap_set(ctxt,0U,amap_mask(16U),0U,(unsigned int)intf_id);
  #line 3962 
  ;
  #line 3962 
  amap_set(ctxt,0U,amap_mask(1U),30U,1U);
  #line 3964 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && mode != (u8 *)0U) {
    #line 3965 
    ;
    #line 3965 
    ;
    #line 3965 
    amap_set(ctxt,0U,amap_mask(16U),0U,(unsigned int)adapter->hba_port_num);
    #line 3967 
    ;
    #line 3967 
    amap_set(ctxt,0U,amap_mask(1U),31U,1U);
  }
  #line 3969 
  swap_dws((void *)(& req->context),4);
  #line 3971 
  status = be_mcc_notify_wait(adapter);
  #line 3972 
  if (status == 0) {
    #line 3974 
    struct be_cmd_resp_get_hsw_config *resp = embedded_payload(wrb);
    #line 3976 
    swap_dws((void *)(& resp->context),16);
    #line 3977 
    ;
    #line 3977 
    vid = (unsigned short)amap_get((void *)(& resp->context),0U,amap_mask(16U),16U);
    #line 3979 
    if (pvid != (u16 *)0U) 
                           #line 3980 
                           *pvid = vid;
    #line 3981 
    if (mode != (u8 *)0U) {
      #line 3982 
      ;
      #line 3982 
      *mode = (unsigned char)amap_get((void *)(& resp->context),0U,amap_mask(3U),6U);
    }
    #line 3984 
    if (spoofchk != (bool *)0) {
      #line 3985 
      ;
      #line 3985 
      *spoofchk = (_Bool)(amap_get((void *)(& resp->context),0U,amap_mask(1U),14U) != 0U);
    }
  }
  #line 3990 
  err: 
       #line 3990 
  ;
  #line 3991 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 3992 
  return status;
}

#line 3995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_is_wol_excluded(struct be_adapter *adapter)
{
  #line 3997 
  struct pci_dev *pdev = adapter->pdev;
  #line 3999 
  if ((unsigned int)adapter->virtfn != 0U) 
                                           #line 4000 
                                           return (_Bool)1;
  #line 4002 
  switch ((int)pdev->subsystem_device) {
    #line 4003 
    case 58882: 
                #line 4003 
    ;
    #line 4004 
    case 58946: 
                #line 4004 
    ;
    #line 4005 
    case 58898: 
                #line 4005 
    ;
    #line 4006 
    case 58962: 
                #line 4006 
    ;
    #line 4007 
    return (_Bool)1;
    #line 4008 
    default: 
             #line 4008 
    ;
    #line 4009 
    return (_Bool)0;
  }
}

#line 4013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_acpi_wol_cap(struct be_adapter *adapter)
{
  #line 4015 
  struct be_mcc_wrb *wrb;
  #line 4016 
  struct be_cmd_req_acpi_wol_magic_config_v1 *req;
  #line 4018 
  struct be_dma_mem cmd;
  #line 4017 
  int status = 0;
  #line 4020 
  if (! be_cmd_allowed(adapter,(unsigned char)12,(unsigned char)3)) 
                                                                    #line 4022 
                                                                    return -1;
  #line 4024 
  if ((int)be_is_wol_excluded(adapter) != 0) 
                                             #line 4025 
                                             return status;
  #line 4027 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 4028 
    return -1;
  #line 4030 
  memset((void *)(& cmd),0,24UL);
  #line 4031 
  cmd.size = 1204U;
  #line 4032 
  cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,2592U);
  #line 4034 
  if (cmd.va == (void *)0) {
    #line 4035 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory allocation failure\n");
    #line 4036 
    status = -12;
    #line 4037 
    goto err;
  }
  #line 4040 
  wrb = wrb_from_mbox(adapter);
  #line 4041 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4042 
    status = -16;
    #line 4043 
    goto err;
  }
  #line 4046 
  req = (struct be_cmd_req_acpi_wol_magic_config_v1 *)cmd.va;
  #line 4048 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)12,1204,wrb,& cmd);
  #line 4052 
  req->hdr.version = (unsigned char)1U;
  #line 4053 
  req->query_options = (unsigned char)2U;
  #line 4055 
  status = be_mbox_notify_wait(adapter);
  #line 4056 
  if (status == 0) {
    #line 4057 
    struct be_cmd_resp_acpi_wol_magic_config_v1 *resp;
    #line 4059 
    resp = (struct be_cmd_resp_acpi_wol_magic_config_v1 *)cmd.va;
    #line 4061 
    adapter->wol_cap = resp->wol_settings;
    #line 4064 
    if (((int)adapter->wol_cap & 1) != 0) {
      #line 4065 
      if (! is_zero_ether_addr((u8 *)(& resp->magic_mac))) 
                                                           #line 4066 
                                                           adapter->wol_en = (_Bool)1;
    }
  }
  #line 4068 
  err: 
       #line 4068 
  ;
  #line 4069 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 4070 
  if (cmd.va != (void *)0) 
                           #line 4071 
                           dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 4073 
  return status;
}

#line 4077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_fw_log_level(struct be_adapter *adapter, u32 level)
{
  #line 4079 
  struct be_dma_mem extfat_cmd;
  #line 4080 
  struct be_fat_conf_params *cfgs;
  #line 4081 
  int status;
  #line 4082 
  int i;
  #line 4082 
  int j;
  #line 4084 
  memset((void *)(& extfat_cmd),0,24UL);
  #line 4085 
  extfat_cmd.size = 2844U;
  #line 4086 
  extfat_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,& extfat_cmd.dma,2592U);
  #line 4089 
  if (extfat_cmd.va == (void *)0) 
                                  #line 4090 
                                  return -12;
  #line 4092 
  status = be_cmd_get_ext_fat_capabilites(adapter,& extfat_cmd);
  #line 4093 
  if (status != 0) 
                   #line 4094 
                   goto err;
  #line 4096 
  cfgs = (struct be_fat_conf_params *)(extfat_cmd.va + 16UL);
  #line 4098 
  i = 0;
  #line 4098 
  while (cfgs->num_modules > (unsigned int)i) {
    {
      #line 4099 
      u32 num_modes = cfgs->module[i].num_modes;
      #line 4101 
      j = 0;
      #line 4101 
      while ((unsigned int)j < num_modes) {
        #line 4102 
        if ((unsigned int)cfgs->module[i].trace_lvl[j].mode == 0U) 
                                                                   #line 4103 
                                                                   cfgs->module[i].trace_lvl[j].dbg_lvl = level;
        #line 4101 
        j ++;
      }
    }
    #line 4098 
    i ++;
  }
  #line 4108 
  status = be_cmd_set_ext_fat_capabilites(adapter,& extfat_cmd,cfgs);
  #line 4109 
  err: 
       #line 4109 
  ;
  #line 4110 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,extfat_cmd.va,extfat_cmd.dma);
  #line 4112 
  return status;
}

#line 4115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fw_log_level(struct be_adapter *adapter)
{
  #line 4117 
  struct be_dma_mem extfat_cmd;
  #line 4118 
  struct be_fat_conf_params *cfgs;
  #line 4119 
  int status;
  #line 4119 
  int j;
  #line 4120 
  int level = 0;
  #line 4122 
  memset((void *)(& extfat_cmd),0,24UL);
  #line 4123 
  extfat_cmd.size = 2844U;
  #line 4124 
  extfat_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,& extfat_cmd.dma,2592U);
  #line 4128 
  if (extfat_cmd.va == (void *)0) {
    #line 4129 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s: Memory allocation failure\n",(char *)"be_cmd_get_fw_log_level");
    #line 4131 
    goto err;
  }
  #line 4134 
  status = be_cmd_get_ext_fat_capabilites(adapter,& extfat_cmd);
  #line 4135 
  if (status == 0) {
    #line 4136 
    cfgs = (struct be_fat_conf_params *)(extfat_cmd.va + 16UL);
    #line 4139 
    j = 0;
    #line 4139 
    while (cfgs->module[0].num_modes > (unsigned int)j) {
      #line 4140 
      if ((unsigned int)cfgs->module[0].trace_lvl[j].mode == 0U) 
                                                                 #line 4141 
                                                                 level = (int)cfgs->module[0].trace_lvl[j].dbg_lvl;
      #line 4139 
      j ++;
    }
  }
  #line 4144 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,extfat_cmd.va,extfat_cmd.dma);
  #line 4146 
  err: 
       #line 4146 
  ;
  #line 4147 
  return level;
}

#line 4150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd)
{
  #line 4153 
  struct be_mcc_wrb *wrb;
  #line 4154 
  struct be_cmd_req_get_ext_fat_caps *req;
  #line 4155 
  int status;
  #line 4157 
  if (! be_cmd_allowed(adapter,(unsigned char)125,(unsigned char)1)) 
    #line 4159 
    return -1;
  #line 4161 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 4162 
    return -1;
  #line 4164 
  wrb = wrb_from_mbox(adapter);
  #line 4165 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4166 
    status = -16;
    #line 4167 
    goto err;
  }
  #line 4170 
  req = (struct be_cmd_req_get_ext_fat_caps *)cmd->va;
  #line 4171 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)125,(int)cmd->size,wrb,cmd);
  #line 4174 
  req->parameter_type = 1U;
  #line 4176 
  status = be_mbox_notify_wait(adapter);
  #line 4177 
  err: 
       #line 4177 
  ;
  #line 4178 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 4179 
  return status;
}

#line 4182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd, struct be_fat_conf_params *configs)
{
  #line 4186 
  struct be_mcc_wrb *wrb;
  #line 4187 
  struct be_cmd_req_set_ext_fat_caps *req;
  #line 4188 
  int status;
  #line 4190 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4192 
  wrb = wrb_from_mccq(adapter);
  #line 4193 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4194 
    status = -16;
    #line 4195 
    goto err;
  }
  #line 4198 
  req = (struct be_cmd_req_set_ext_fat_caps *)cmd->va;
  #line 4199 
  memcpy((void *)(& req->set_params),(void *)configs,2828UL);
  #line 4200 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)126,(int)cmd->size,wrb,cmd);
  #line 4204 
  status = be_mcc_notify_wait(adapter);
  #line 4205 
  err: 
       #line 4205 
  ;
  #line 4206 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4207 
  return status;
}

#line 4210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_port_name(struct be_adapter *adapter)
{
  #line 4212 
  struct be_cmd_req_get_port_name *req;
  #line 4213 
  struct be_mcc_wrb *wrb;
  #line 4214 
  int status;
  #line 4216 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 4217 
    return -1;
  #line 4219 
  wrb = wrb_from_mbox(adapter);
  #line 4220 
  req = (struct be_cmd_req_get_port_name *)embedded_payload(wrb);
  #line 4222 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)77,20,wrb,(struct be_dma_mem *)0);
  #line 4225 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
    #line 4226 
    req->hdr.version = (unsigned char)1U;
  #line 4228 
  status = be_mbox_notify_wait(adapter);
  #line 4229 
  if (status == 0) {
    #line 4230 
    struct be_cmd_resp_get_port_name *resp = embedded_payload(wrb);
    #line 4232 
    adapter->port_name = (char)resp->port_name[(int)adapter->hba_port_num];
  }
  else 
       #line 4234 
       adapter->port_name = (char)((unsigned int)adapter->hba_port_num + 48U);
  #line 4237 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 4238 
  return status;
}

#line 4249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_nic_res_desc *be_get_nic_desc(u8 *buf, u32 desc_count, bool get_vft, u8 pf_num)
{
  #line 4253 
  struct be_nic_res_desc *nic;
  #line 4254 
  int i;
  #line 4252 
  struct be_res_desc_hdr *hdr = (struct be_res_desc_hdr *)buf;
  #line 4256 
  i = 0;
  #line 4256 
  while ((unsigned int)i < desc_count) {
    #line 4257 
    if ((unsigned int)hdr->desc_type == 65U || (unsigned int)hdr->desc_type == 81U) {
      #line 4259 
      nic = (struct be_nic_res_desc *)hdr;
      #line 4261 
      if (((unsigned int)pf_num == 255U || (int)nic->pf_num == (int)pf_num) && (! get_vft || ((unsigned long)nic->flags & 8UL) != 0UL)) 
        #line 4264 
        return nic;
    }
    #line 4266 
    if ((int)hdr->desc_len != 0) 
                                 #line 4266 
                                 hdr->desc_len = (unsigned char)((int)hdr->desc_len); else 
                                                                    #line 4266 
                                                                    hdr->desc_len = (unsigned char)72U;
    #line 4267 
    hdr = (struct be_res_desc_hdr *)((void *)hdr + (unsigned long)hdr->desc_len);
    #line 4256 
    i ++;
  }
  #line 4269 
  return (struct be_nic_res_desc *)0;
}

#line 4272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_nic_res_desc *be_get_vft_desc(u8 *buf, u32 desc_count, u8 pf_num)
{
  #line 4275 
  return be_get_nic_desc(buf,desc_count,(_Bool)1,(unsigned char)((int)pf_num));
}

#line 4278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_nic_res_desc *be_get_func_nic_desc(u8 *buf, u32 desc_count, u8 pf_num)
{
  #line 4281 
  return be_get_nic_desc(buf,desc_count,(_Bool)0,(unsigned char)((int)pf_num));
}

#line 4284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_pcie_res_desc *be_get_pcie_desc(u8 *buf, u32 desc_count, u8 pf_num)
{
  #line 4288 
  struct be_pcie_res_desc *pcie;
  #line 4289 
  int i;
  #line 4287 
  struct be_res_desc_hdr *hdr = (struct be_res_desc_hdr *)buf;
  #line 4291 
  i = 0;
  #line 4291 
  while ((unsigned int)i < desc_count) {
    #line 4292 
    if ((unsigned int)hdr->desc_type == 64U || (unsigned int)hdr->desc_type == 80U) {
      #line 4294 
      pcie = (struct be_pcie_res_desc *)hdr;
      #line 4295 
      if ((int)pcie->pf_num == (int)pf_num) 
                                            #line 4296 
                                            return pcie;
    }
    #line 4299 
    if ((int)hdr->desc_len != 0) 
                                 #line 4299 
                                 hdr->desc_len = (unsigned char)((int)hdr->desc_len); else 
                                                                    #line 4299 
                                                                    hdr->desc_len = (unsigned char)72U;
    #line 4300 
    hdr = (struct be_res_desc_hdr *)((void *)hdr + (unsigned long)hdr->desc_len);
    #line 4291 
    i ++;
  }
  #line 4302 
  return (struct be_pcie_res_desc *)0;
}

#line 4305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_port_res_desc *be_get_port_desc(u8 *buf, u32 desc_count)
{
  #line 4308 
  int i;
  #line 4307 
  struct be_res_desc_hdr *hdr = (struct be_res_desc_hdr *)buf;
  #line 4310 
  i = 0;
  #line 4310 
  while ((unsigned int)i < desc_count) {
    #line 4311 
    if ((unsigned int)hdr->desc_type == 85U) 
                                             #line 4312 
                                             return (struct be_port_res_desc *)hdr;
    #line 4314 
    if ((int)hdr->desc_len != 0) 
                                 #line 4314 
                                 hdr->desc_len = (unsigned char)((int)hdr->desc_len); else 
                                                                    #line 4314 
                                                                    hdr->desc_len = (unsigned char)72U;
    #line 4315 
    hdr = (struct be_res_desc_hdr *)((void *)hdr + (unsigned long)hdr->desc_len);
    #line 4310 
    i ++;
  }
  #line 4317 
  return (struct be_port_res_desc *)0;
}

#line 4320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_copy_nic_desc(struct be_resources *res, struct be_nic_res_desc *desc)
{
  #line 4323 
  res->max_uc_mac = desc->unicast_mac_count;
  #line 4324 
  res->max_vlans = desc->vlan_count;
  #line 4325 
  res->max_mcast_mac = desc->mcast_mac_count;
  #line 4326 
  res->max_tx_qs = desc->txq_count;
  #line 4327 
  res->max_rss_qs = desc->rssq_count;
  #line 4328 
  res->max_rx_qs = desc->rq_count;
  #line 4329 
  res->max_evt_qs = desc->eq_count;
  #line 4330 
  res->max_cq_count = desc->cq_count;
  #line 4331 
  res->max_iface_count = desc->iface_count;
  #line 4332 
  res->max_mcc_count = desc->mcc_count;
  #line 4334 
  res->if_cap_flags = desc->cap_flags & 16784316U;
  #line 4335 
  return;
}

#line 4339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_func_config(struct be_adapter *adapter, struct be_resources *res)
{
  #line 4341 
  struct be_mcc_wrb *wrb;
  #line 4342 
  struct be_cmd_req_get_func_config *req;
  #line 4343 
  int status;
  #line 4344 
  struct be_dma_mem cmd;
  #line 4346 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 4347 
    return -1;
  #line 4349 
  memset((void *)(& cmd),0,24UL);
  #line 4350 
  cmd.size = 23252U;
  #line 4351 
  cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,2592U);
  #line 4353 
  if (cmd.va == (void *)0) {
    #line 4354 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory alloc failure\n");
    #line 4355 
    status = -12;
    #line 4356 
    goto err;
  }
  #line 4359 
  wrb = wrb_from_mbox(adapter);
  #line 4360 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4361 
    status = -16;
    #line 4362 
    goto err;
  }
  #line 4365 
  req = (struct be_cmd_req_get_func_config *)cmd.va;
  #line 4367 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)160,(int)cmd.size,wrb,& cmd);
  #line 4371 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
    #line 4372 
    req->hdr.version = (unsigned char)1U;
  #line 4374 
  status = be_mbox_notify_wait(adapter);
  #line 4375 
  if (status == 0) {
    #line 4378 
    struct be_nic_res_desc *desc;
    #line 4376 
    struct be_cmd_resp_get_func_config *resp = (struct be_cmd_resp_get_func_config *)cmd.va;
    #line 4377 
    u32 desc_count = resp->desc_count;
    #line 4384 
    desc = be_get_func_nic_desc((u8 *)(& resp->func_param),desc_count,(unsigned char)255);
    #line 4386 
    if (desc == (struct be_nic_res_desc *)0) {
      #line 4387 
      status = -22;
      #line 4388 
      goto err;
    }
    #line 4392 
    adapter->pf_num = desc->pf_num;
    #line 4393 
    adapter->vf_num = desc->vf_num;
    #line 4395 
    if (res != (struct be_resources *)0) 
                                         #line 4396 
                                         be_copy_nic_desc(res,desc);
  }
  #line 4398 
  err: 
       #line 4398 
  ;
  #line 4399 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 4400 
  if (cmd.va != (void *)0) 
                           #line 4401 
                           dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 4403 
  return status;
}

#line 4407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static u16 be_get_nic_pf_num_list(u8 *buf, u32 desc_count, u16 *nic_pf_nums)
{
  #line 4411 
  int i;
  #line 4409 
  struct be_res_desc_hdr *hdr = (struct be_res_desc_hdr *)buf;
  #line 4410 
  struct be_pcie_res_desc *pcie = (struct be_pcie_res_desc *)0;
  #line 4412 
  u16 nic_pf_count = (unsigned short)0U;
  #line 4414 
  i = 0;
  #line 4414 
  while ((unsigned int)i < desc_count) {
    #line 4415 
    if ((unsigned int)hdr->desc_type == 64U || (unsigned int)hdr->desc_type == 80U) {
      #line 4417 
      pcie = (struct be_pcie_res_desc *)hdr;
      #line 4418 
      if ((unsigned int)pcie->pf_state != 0U && ((unsigned int)pcie->pf_type == 1U || (unsigned int)pcie->pf_type == 8U)) {
        #line 4420 
        u16 tmp;
        #line 4420 
        tmp = nic_pf_count;
        #line 4420 
        nic_pf_count = (u16)((int)nic_pf_count + 1);
        #line 4420 
        *(nic_pf_nums + (unsigned long)tmp) = (unsigned short)pcie->pf_num;
      }
    }
    #line 4424 
    if ((int)hdr->desc_len != 0) 
                                 #line 4424 
                                 hdr->desc_len = (unsigned char)((int)hdr->desc_len); else 
                                                                    #line 4424 
                                                                    hdr->desc_len = (unsigned char)72U;
    #line 4425 
    hdr = (struct be_res_desc_hdr *)((void *)hdr + (unsigned long)hdr->desc_len);
    #line 4414 
    i ++;
  }
  #line 4427 
  return nic_pf_count;
}

#line 4431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_profile_config(struct be_adapter *adapter, struct be_resources *res, struct be_port_resources *port_res, u8 profile_type, u8 query, u8 domain)
{
  #line 4436 
  struct be_cmd_resp_get_profile_config *resp;
  #line 4437 
  struct be_cmd_req_get_profile_config *req;
  #line 4438 
  struct be_nic_res_desc *vf_res;
  #line 4439 
  struct be_pcie_res_desc *pcie;
  #line 4440 
  struct be_port_res_desc *port;
  #line 4441 
  struct be_nic_res_desc *nic;
  #line 4443 
  struct be_dma_mem cmd;
  #line 4444 
  u16 desc_count;
  #line 4445 
  int status;
  #line 4442 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 4447 
  memset((void *)(& cmd),0,24UL);
  #line 4448 
  cmd.size = 23252U;
  #line 4449 
  cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,2592U);
  #line 4451 
  if (cmd.va == (void *)0) 
                           #line 4452 
                           return -12;
  #line 4454 
  req = (struct be_cmd_req_get_profile_config *)cmd.va;
  #line 4455 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)164,(int)cmd.size,& wrb,& cmd);
  #line 4459 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
    #line 4460 
    req->hdr.version = (unsigned char)1U;
  #line 4461 
  req->type = profile_type;
  #line 4462 
  req->hdr.domain = domain;
  #line 4468 
  if ((unsigned int)query == 1U) 
                                 #line 4469 
                                 req->type = (unsigned char)((unsigned int)req->type | 8U);
  #line 4471 
  status = be_cmd_notify_wait(adapter,& wrb);
  #line 4472 
  if (status != 0) 
                   #line 4473 
                   goto err;
  #line 4475 
  resp = (struct be_cmd_resp_get_profile_config *)cmd.va;
  #line 4476 
  desc_count = resp->desc_count;
  #line 4478 
  if (port_res != (struct be_port_resources *)0) {
    #line 4479 
    u16 i;
    #line 4480 
    u16 nic_pf_num_list[16U];
    #line 4479 
    u16 nic_pf_cnt = (unsigned short)0U;
    #line 4482 
    nic_pf_cnt = be_get_nic_pf_num_list((u8 *)(& resp->func_param),(unsigned int)desc_count,(u16 *)(& nic_pf_num_list));
    #line 4486 
    i = (unsigned short)0U;
    #line 4486 
    while ((int)i < (int)nic_pf_cnt) {
      #line 4487 
      nic = be_get_func_nic_desc((u8 *)(& resp->func_param),(unsigned int)desc_count,(unsigned char)((int)((unsigned char)nic_pf_num_list[(int)i])));
      #line 4489 
      if ((unsigned int)nic->link_param == adapter->port_num) {
        #line 4490 
        port_res->nic_pfs = (u16)((int)port_res->nic_pfs + 1);
        #line 4491 
        pcie = be_get_pcie_desc((u8 *)(& resp->func_param),(unsigned int)desc_count,(unsigned char)((int)((unsigned char)nic_pf_num_list[(int)i])));
        #line 4494 
        port_res->max_vfs = (unsigned short)((int)port_res->max_vfs + (int)pcie->num_vfs);
      }
      #line 4486 
      i = (u16)((int)i + 1);
    }
    #line 4497 
    goto err;
  }
  #line 4500 
  pcie = be_get_pcie_desc((u8 *)(& resp->func_param),(unsigned int)desc_count,(unsigned char)((int)adapter->pf_num));
  #line 4502 
  if (pcie != (struct be_pcie_res_desc *)0) 
                                            #line 4503 
                                            res->max_vfs = pcie->num_vfs;
  #line 4505 
  port = be_get_port_desc((u8 *)(& resp->func_param),(unsigned int)desc_count);
  #line 4506 
  if (port != (struct be_port_res_desc *)0) 
                                            #line 4507 
                                            adapter->mc_type = port->mc_type;
  #line 4509 
  nic = be_get_func_nic_desc((u8 *)(& resp->func_param),(unsigned int)desc_count,(unsigned char)((int)adapter->pf_num));
  #line 4511 
  if (nic != (struct be_nic_res_desc *)0) 
                                          #line 4512 
                                          be_copy_nic_desc(res,nic);
  #line 4514 
  vf_res = be_get_vft_desc((u8 *)(& resp->func_param),(unsigned int)desc_count,(unsigned char)((int)adapter->pf_num));
  #line 4516 
  if (vf_res != (struct be_nic_res_desc *)0) 
                                             #line 4517 
                                             res->vf_if_cap_flags = vf_res->cap_flags;
  #line 4518 
  err: 
       #line 4518 
  ;
  #line 4519 
  if (cmd.va != (void *)0) 
                           #line 4520 
                           dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 4522 
  return status;
}

#line 4526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_set_profile_config(struct be_adapter *adapter, void *desc, int size, int count, u8 version, u8 domain)
{
  #line 4529 
  struct be_cmd_req_set_profile_config *req;
  #line 4531 
  struct be_dma_mem cmd;
  #line 4532 
  int status;
  #line 4530 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  #line 4534 
  memset((void *)(& cmd),0,24UL);
  #line 4535 
  cmd.size = 200U;
  #line 4536 
  cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,2592U);
  #line 4538 
  if (cmd.va == (void *)0) 
                           #line 4539 
                           return -12;
  #line 4541 
  req = (struct be_cmd_req_set_profile_config *)cmd.va;
  #line 4542 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)165,(int)cmd.size,& wrb,& cmd);
  #line 4545 
  req->hdr.version = version;
  #line 4546 
  req->hdr.domain = domain;
  #line 4547 
  req->desc_count = (unsigned int)count;
  #line 4548 
  memcpy((void *)(& req->desc),desc,(unsigned long)size);
  #line 4550 
  status = be_cmd_notify_wait(adapter,& wrb);
  #line 4552 
  if (cmd.va != (void *)0) 
                           #line 4553 
                           dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 4555 
  return status;
}

#line 4559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_reset_nic_desc(struct be_nic_res_desc *nic)
{
  #line 4561 
  memset((void *)nic,0,88UL);
  #line 4562 
  nic->unicast_mac_count = (unsigned short)65535U;
  #line 4563 
  nic->mcc_count = (unsigned short)65535U;
  #line 4564 
  nic->vlan_count = (unsigned short)65535U;
  #line 4565 
  nic->mcast_mac_count = (unsigned short)65535U;
  #line 4566 
  nic->txq_count = (unsigned short)65535U;
  #line 4567 
  nic->rq_count = (unsigned short)65535U;
  #line 4568 
  nic->rssq_count = (unsigned short)65535U;
  #line 4569 
  nic->lro_count = (unsigned short)65535U;
  #line 4570 
  nic->cq_count = (unsigned short)65535U;
  #line 4571 
  nic->toe_conn_count = (unsigned short)65535U;
  #line 4572 
  nic->eq_count = (unsigned short)65535U;
  #line 4573 
  nic->iface_count = (unsigned short)65535U;
  #line 4574 
  nic->link_param = (unsigned char)255U;
  #line 4575 
  nic->channel_id_param = (unsigned short)61440U;
  #line 4576 
  nic->acpi_params = (unsigned char)255U;
  #line 4577 
  nic->wol_param = (unsigned char)15U;
  #line 4578 
  nic->tunnel_iface_count = (unsigned short)65535U;
  #line 4579 
  nic->direct_tenant_iface_count = (unsigned short)65535U;
  #line 4580 
  nic->bw_min = 4294967295U;
  #line 4581 
  nic->bw_max = 4294967295U;
  #line 4582 
  return;
}

#line 4585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_reset_pcie_desc(struct be_pcie_res_desc *pcie)
{
  #line 4587 
  memset((void *)pcie,0,88UL);
  #line 4588 
  pcie->sriov_state = (unsigned char)255U;
  #line 4589 
  pcie->pf_state = (unsigned char)255U;
  #line 4590 
  pcie->pf_type = (unsigned char)255U;
  #line 4591 
  pcie->num_vfs = (unsigned short)65535U;
  #line 4592 
  return;
}

#line 4594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_config_qos(struct be_adapter *adapter, u32 max_rate, u16 link_speed, u8 domain)
{
  #line 4597 
  struct be_nic_res_desc nic_desc;
  #line 4598 
  u32 bw_percent;
  #line 4599 
  u16 version = (unsigned short)0U;
  #line 4601 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
    #line 4602 
    return be_cmd_set_qos(adapter,max_rate / 10U,(unsigned int)domain);
  }
  #line 4604 
  be_reset_nic_desc(& nic_desc);
  #line 4605 
  nic_desc.pf_num = adapter->pf_num;
  #line 4606 
  nic_desc.vf_num = domain;
  #line 4607 
  nic_desc.bw_min = 0U;
  #line 4608 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    #line 4609 
    nic_desc.hdr.desc_type = (unsigned char)65U;
    #line 4610 
    nic_desc.hdr.desc_len = (unsigned char)72U;
    #line 4611 
    nic_desc.flags = (unsigned char)208U;
    #line 4613 
    nic_desc.bw_max = max_rate / 10U;
  }
  else {
    #line 4615 
    version = (unsigned short)1U;
    #line 4616 
    nic_desc.hdr.desc_type = (unsigned char)81U;
    #line 4617 
    nic_desc.hdr.desc_len = (unsigned char)88U;
    #line 4618 
    nic_desc.flags = (unsigned char)192U;
    #line 4619 
    if (max_rate != 0U) 
                        #line 4619 
                        bw_percent = (max_rate * 100U) / (unsigned int)link_speed; else 
                                                                    #line 4619 
                                                                    bw_percent = 100U;
    #line 4620 
    nic_desc.bw_max = bw_percent;
  }
  #line 4623 
  return be_cmd_set_profile_config(adapter,(void *)(& nic_desc),
                                  (int)nic_desc.hdr.desc_len,1,
                                  (unsigned char)((int)((unsigned char)version)),
                                  (unsigned char)((int)domain));
}

#line 4628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_sriov_config(struct be_adapter *adapter, struct be_resources pool_res, u16 num_vfs_0, struct be_resources *vft_res)
{
  #line 4635 
  struct __anonstruct_desc_1060 desc;
  #line 4638 
  be_reset_pcie_desc(& desc.pcie);
  #line 4639 
  desc.pcie.hdr.desc_type = (unsigned char)80U;
  #line 4640 
  desc.pcie.hdr.desc_len = (unsigned char)88U;
  #line 4641 
  desc.pcie.flags = (unsigned char)192U;
  #line 4642 
  desc.pcie.pf_num = (unsigned char)(adapter->pdev)->devfn;
  #line 4643 
  desc.pcie.sriov_state = (unsigned char)((unsigned int)num_vfs_0 != 0U);
  #line 4644 
  desc.pcie.num_vfs = num_vfs_0;
  #line 4647 
  be_reset_nic_desc(& desc.nic_vft);
  #line 4648 
  desc.nic_vft.hdr.desc_type = (unsigned char)81U;
  #line 4649 
  desc.nic_vft.hdr.desc_len = (unsigned char)88U;
  #line 4650 
  desc.nic_vft.flags = (unsigned char)((unsigned int)((unsigned char)vft_res->flags) | 200U);
  #line 4652 
  desc.nic_vft.pf_num = (unsigned char)(adapter->pdev)->devfn;
  #line 4653 
  desc.nic_vft.vf_num = (unsigned char)0U;
  #line 4654 
  desc.nic_vft.cap_flags = vft_res->vf_if_cap_flags;
  #line 4655 
  desc.nic_vft.rq_count = vft_res->max_rx_qs;
  #line 4656 
  desc.nic_vft.txq_count = vft_res->max_tx_qs;
  #line 4657 
  desc.nic_vft.rssq_count = vft_res->max_rss_qs;
  #line 4658 
  desc.nic_vft.cq_count = vft_res->max_cq_count;
  #line 4660 
  if ((unsigned int)vft_res->max_uc_mac != 0U) 
                                               #line 4661 
                                               desc.nic_vft.unicast_mac_count = vft_res->max_uc_mac;
  #line 4663 
  if ((unsigned int)vft_res->max_vlans != 0U) 
                                              #line 4664 
                                              desc.nic_vft.vlan_count = vft_res->max_vlans;
  #line 4665 
  if ((unsigned int)vft_res->max_iface_count != 0U) 
                                                    #line 4666 
                                                    desc.nic_vft.iface_count = vft_res->max_iface_count;
  #line 4668 
  if ((unsigned int)vft_res->max_mcc_count != 0U) 
                                                  #line 4669 
                                                  desc.nic_vft.mcc_count = vft_res->max_mcc_count;
  #line 4671 
  return be_cmd_set_profile_config(adapter,(void *)(& desc),176,2,
                                (unsigned char)1,(unsigned char)0);
}

#line 4675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_manage_iface(struct be_adapter *adapter, u32 iface, u8 op)
{
  #line 4677 
  struct be_mcc_wrb *wrb;
  #line 4678 
  struct be_cmd_req_manage_iface_filters *req;
  #line 4679 
  int status;
  #line 4681 
  if (iface == 4294967295U) 
                            #line 4682 
                            return -1;
  #line 4684 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4686 
  wrb = wrb_from_mccq(adapter);
  #line 4687 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4688 
    status = -16;
    #line 4689 
    goto err;
  }
  #line 4691 
  req = (struct be_cmd_req_manage_iface_filters *)embedded_payload(wrb);
  #line 4693 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)193,52,wrb,(struct be_dma_mem *)0);
  #line 4696 
  req->op = op;
  #line 4697 
  req->target_iface_id = iface;
  #line 4699 
  status = be_mcc_notify_wait(adapter);
  #line 4700 
  err: 
       #line 4700 
  ;
  #line 4701 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4702 
  return status;
}

#line 4705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_vxlan_port(struct be_adapter *adapter, __be16 port)
{
  #line 4707 
  struct be_port_res_desc port_desc;
  #line 4709 
  memset((void *)(& port_desc),0,88UL);
  #line 4710 
  port_desc.hdr.desc_type = (unsigned char)85U;
  #line 4711 
  port_desc.hdr.desc_len = (unsigned char)88U;
  #line 4712 
  port_desc.flags = (unsigned char)192U;
  #line 4713 
  port_desc.link_num = adapter->hba_port_num;
  #line 4714 
  if ((unsigned int)port != 0U) {
    #line 4715 
    port_desc.nv_flags = (unsigned char)23U;
    #line 4717 
    port_desc.nv_port = __builtin_bswap16((unsigned short)((int)port));
  }
  else {
    #line 4719 
    port_desc.nv_flags = (unsigned char)1U;
    #line 4720 
    port_desc.nv_port = (unsigned short)0U;
  }
  #line 4723 
  return be_cmd_set_profile_config(adapter,(void *)(& port_desc),88,1,
                                (unsigned char)1,(unsigned char)0);
}

#line 4727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_if_id(struct be_adapter *adapter, struct be_vf_cfg *vf_cfg, int vf_num)
{
  #line 4730 
  struct be_mcc_wrb *wrb;
  #line 4731 
  struct be_cmd_req_get_iface_list *req;
  #line 4732 
  struct be_cmd_resp_get_iface_list *resp;
  #line 4733 
  int status;
  #line 4735 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4737 
  wrb = wrb_from_mccq(adapter);
  #line 4738 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4739 
    status = -16;
    #line 4740 
    goto err;
  }
  #line 4742 
  req = (struct be_cmd_req_get_iface_list *)embedded_payload(wrb);
  #line 4744 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)194,32,wrb,(struct be_dma_mem *)0);
  #line 4747 
  req->hdr.domain = (unsigned char)((unsigned int)((unsigned char)vf_num) + 1U);
  #line 4749 
  status = be_mcc_notify_wait(adapter);
  #line 4750 
  if (status == 0) {
    #line 4751 
    resp = (struct be_cmd_resp_get_iface_list *)req;
    #line 4752 
    vf_cfg->if_handle = (int)resp->if_desc.if_id;
  }
  #line 4755 
  err: 
       #line 4755 
  ;
  #line 4756 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4757 
  return status;
}

#line 4760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int lancer_wait_idle(struct be_adapter *adapter)
{
  #line 4763 
  u32 reg_val;
  #line 4764 
  int i;
  #line 4764 
  int status = 0;
  #line 4766 
  i = 0;
  #line 4766 
  while (i <= 29) {
    #line 4767 
    reg_val = ioread32((void *)(adapter->db + 1044U));
    #line 4768 
    if ((reg_val & 1073741824U) == 0U) 
                                       #line 4769 
                                       break;
    #line 4771 
    ssleep(1U);
    #line 4766 
    i ++;
  }
  #line 4774 
  if (i == 30) 
               #line 4775 
               status = -1;
  #line 4777 
  return status;
}

#line 4780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_physdev_ctrl(struct be_adapter *adapter, u32 mask)
{
  #line 4782 
  int status = 0;
  #line 4784 
  status = lancer_wait_idle(adapter);
  #line 4785 
  if (status != 0) 
                   #line 4786 
                   return status;
  #line 4788 
  iowrite32(mask,(void *)(adapter->db + 1044U));
  #line 4790 
  return status;
}

#line 4794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
bool dump_present(struct be_adapter *adapter)
{
  #line 4796 
  u32 sliport_status = 0U;
  #line 4798 
  sliport_status = ioread32((void *)(adapter->db + 1028U));
  #line 4799 
  return (_Bool)((sliport_status & 33554432U) != 0U);
}

#line 4802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_initiate_dump(struct be_adapter *adapter)
{
  #line 4805 
  int status;
  #line 4804 
  struct device *dev = & (adapter->pdev)->dev;
  #line 4807 
  if ((int)dump_present(adapter) != 0) {
    #line 4808 
    _dev_info(dev,(char *)"Previous dump not cleared, not forcing dump\n");
    #line 4809 
    return -17;
  }
  #line 4813 
  status = lancer_physdev_ctrl(adapter,6U);
  #line 4815 
  if (status < 0) {
    #line 4816 
    _dev_err(dev,(char *)"FW reset failed\n");
    #line 4817 
    return status;
  }
  #line 4820 
  status = lancer_wait_idle(adapter);
  #line 4821 
  if (status != 0) 
                   #line 4822 
                   return status;
  #line 4824 
  if (! dump_present(adapter)) {
    #line 4825 
    _dev_err(dev,(char *)"FW dump not generated\n");
    #line 4826 
    return -5;
  }
  #line 4829 
  return 0;
}

#line 4832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_delete_dump(struct be_adapter *adapter)
{
  #line 4834 
  int status;
  #line 4837 
  int tmp;
  #line 4836 
  status = lancer_cmd_delete_object(adapter,(char *)"/dbg/dump.bin");
  #line 4837 
  if (status <= 0) 
                   #line 4837 
                   tmp = status; else 
                                      #line 4837 
                                      tmp = -5;
  #line 4837 
  return tmp;
}

#line 4841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_enable_vf(struct be_adapter *adapter, u8 domain)
{
  #line 4843 
  struct be_mcc_wrb *wrb;
  #line 4844 
  struct be_cmd_enable_disable_vf *req;
  #line 4845 
  int status;
  #line 4847 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    #line 4848 
    return 0;
  #line 4850 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4852 
  wrb = wrb_from_mccq(adapter);
  #line 4853 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4854 
    status = -16;
    #line 4855 
    goto err;
  }
  #line 4858 
  req = (struct be_cmd_enable_disable_vf *)embedded_payload(wrb);
  #line 4860 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)196,20,wrb,(struct be_dma_mem *)0);
  #line 4864 
  req->hdr.domain = domain;
  #line 4865 
  req->enable = (unsigned char)1U;
  #line 4866 
  status = be_mcc_notify_wait(adapter);
  #line 4867 
  err: 
       #line 4867 
  ;
  #line 4868 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4869 
  return status;
}

#line 4872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_intr_set(struct be_adapter *adapter, bool intr_enable)
{
  #line 4874 
  struct be_mcc_wrb *wrb;
  #line 4875 
  struct be_cmd_req_intr_set *req;
  #line 4876 
  int status;
  #line 4878 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 4879 
    return -1;
  #line 4881 
  wrb = wrb_from_mbox(adapter);
  #line 4883 
  req = (struct be_cmd_req_intr_set *)embedded_payload(wrb);
  #line 4885 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)89,20,wrb,(struct be_dma_mem *)0);
  #line 4889 
  req->intr_enabled = (unsigned char)intr_enable;
  #line 4891 
  status = be_mbox_notify_wait(adapter);
  #line 4893 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 4894 
  return status;
}

#line 4898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_active_profile(struct be_adapter *adapter, u16 *profile_id)
{
  #line 4900 
  struct be_cmd_req_get_active_profile *req;
  #line 4901 
  struct be_mcc_wrb *wrb;
  #line 4902 
  int status;
  #line 4904 
  if (cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(& adapter->mbox_lock) != 0) 
    #line 4905 
    return -1;
  #line 4907 
  wrb = wrb_from_mbox(adapter);
  #line 4908 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4909 
    status = -16;
    #line 4910 
    goto err;
  }
  #line 4913 
  req = (struct be_cmd_req_get_active_profile *)embedded_payload(wrb);
  #line 4915 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)167,20,wrb,(struct be_dma_mem *)0);
  #line 4919 
  status = be_mbox_notify_wait(adapter);
  #line 4920 
  if (status == 0) {
    #line 4922 
    struct be_cmd_resp_get_active_profile *resp = embedded_payload(wrb);
    #line 4924 
    *profile_id = resp->active_profile_id;
  }
  #line 4927 
  err: 
       #line 4927 
  ;
  #line 4928 
  cif_mutex_unlock_mbox_lock_of_be_adapter(& adapter->mbox_lock);
  #line 4929 
  return status;
}

#line 4933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int __be_cmd_set_logical_link_config(struct be_adapter *adapter, int link_state, int version, u8 domain)
{
  #line 4936 
  struct be_cmd_req_set_ll_link *req;
  #line 4937 
  struct be_mcc_wrb *wrb;
  #line 4939 
  int status;
  #line 4938 
  u32 link_config = 0U;
  #line 4941 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4943 
  wrb = wrb_from_mccq(adapter);
  #line 4944 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 4945 
    status = -16;
    #line 4946 
    goto err;
  }
  #line 4949 
  req = (struct be_cmd_req_set_ll_link *)embedded_payload(wrb);
  #line 4951 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)80,20,wrb,(struct be_dma_mem *)0);
  #line 4955 
  req->hdr.version = (unsigned char)version;
  #line 4956 
  req->hdr.domain = domain;
  #line 4958 
  if ((unsigned int)link_state <= 1U) 
                                      #line 4960 
                                      link_config |= 1U;
  #line 4962 
  if (link_state == 0) 
                       #line 4963 
                       link_config |= 256U;
  #line 4965 
  req->link_config = link_config;
  #line 4967 
  status = be_mcc_notify_wait(adapter);
  #line 4968 
  err: 
       #line 4968 
  ;
  #line 4969 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 4970 
  return status;
}

#line 4973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_logical_link_config(struct be_adapter *adapter, int link_state, u8 domain)
{
  #line 4976 
  int status;
  #line 4978 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
    #line 4979 
    return -95;
  #line 4981 
  status = __be_cmd_set_logical_link_config(adapter,link_state,2,(unsigned char)((int)domain));
  #line 4987 
  if (status > 0 && ((unsigned int)status & 65535U) == 2U) 
                                                           #line 4988 
                                                           status = __be_cmd_set_logical_link_config(adapter,link_state,1,(unsigned char)((int)domain));
  #line 4990 
  return status;
}

#line 4993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_features(struct be_adapter *adapter)
{
  #line 4995 
  struct be_cmd_resp_set_features *resp;
  #line 4996 
  struct be_cmd_req_set_features *req;
  #line 4997 
  struct be_mcc_wrb *wrb;
  #line 4998 
  int status;
  #line 5000 
  if (cif_mutex_lock_interruptible_mcc_lock_of_be_adapter(& adapter->mcc_lock) != 0) 
    #line 5001 
    return -1;
  #line 5003 
  wrb = wrb_from_mccq(adapter);
  #line 5004 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 5005 
    status = -16;
    #line 5006 
    goto err;
  }
  #line 5009 
  req = (struct be_cmd_req_set_features *)embedded_payload(wrb);
  #line 5011 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)191,32,wrb,(struct be_dma_mem *)0);
  #line 5015 
  req->features = 16U;
  #line 5016 
  req->parameter_len = 8U;
  #line 5017 
  req->parameter.req.uer = 1U;
  #line 5019 
  status = be_mcc_notify_wait(adapter);
  #line 5020 
  if (status != 0) 
                   #line 5021 
                   goto err;
  #line 5023 
  resp = (struct be_cmd_resp_set_features *)embedded_payload(wrb);
  #line 5025 
  adapter->error_recovery.ue_to_poll_time = resp->parameter.resp.ue2rp;
  #line 5027 
  adapter->error_recovery.ue_to_reset_time = resp->parameter.resp.ue2sr;
  #line 5029 
  adapter->error_recovery.recovery_supported = (_Bool)1;
  #line 5030 
  err: 
       #line 5030 
  ;
  #line 5034 
  if (status > 0 && (((unsigned int)status & 65535U) == 2U || ((unsigned int)status & 65535U) == 116U)) 
    #line 5036 
    _dev_info(& (adapter->pdev)->dev,(char *)"Adapter does not support HW error recovery\n");
  #line 5039 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 5040 
  return status;
}

#line 5043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_roce_mcc_cmd(void *netdev_handle, void *wrb_payload, int wrb_payload_size, u16 *cmd_status, u16 *ext_status)
{
  #line 5047 
  struct be_mcc_wrb *wrb;
  #line 5049 
  struct be_cmd_req_hdr *req;
  #line 5050 
  struct be_cmd_resp_hdr *resp;
  #line 5051 
  int status;
  #line 5046 
  struct be_adapter *adapter = netdev_priv((struct net_device *)netdev_handle);
  #line 5048 
  struct be_cmd_req_hdr *hdr = (struct be_cmd_req_hdr *)wrb_payload;
  #line 5053 
  cif_mutex_lock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 5055 
  wrb = wrb_from_mccq(adapter);
  #line 5056 
  if (wrb == (struct be_mcc_wrb *)0) {
    #line 5057 
    status = -16;
    #line 5058 
    goto err;
  }
  #line 5060 
  req = (struct be_cmd_req_hdr *)embedded_payload(wrb);
  #line 5061 
  resp = (struct be_cmd_resp_hdr *)embedded_payload(wrb);
  #line 5063 
  be_wrb_cmd_hdr_prepare(req,(unsigned char)((int)hdr->subsystem),(unsigned char)((int)hdr->opcode),wrb_payload_size,wrb,(struct be_dma_mem *)0);
  #line 5065 
  memcpy((void *)req,wrb_payload,(unsigned long)wrb_payload_size);
  #line 5066 
  swap_dws((void *)req,wrb_payload_size);
  #line 5068 
  status = be_mcc_notify_wait(adapter);
  #line 5069 
  if (cmd_status != (u16 *)0U) 
                               #line 5070 
                               *cmd_status = (unsigned short)status;
  #line 5071 
  if (ext_status != (u16 *)0U) 
                               #line 5072 
                               *ext_status = (unsigned short)0U;
  #line 5073 
  memcpy(wrb_payload,(void *)resp,(unsigned long)resp->response_length + 16UL);
  #line 5074 
  swap_dws(wrb_payload,(int)(resp->response_length + 16U));
  #line 5075 
  err: 
       #line 5075 
  ;
  #line 5076 
  cif_mutex_unlock_mcc_lock_of_be_adapter(& adapter->mcc_lock);
  #line 5077 
  return status;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 185 
  ldv_atomic_inc(v);
  #line 186 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 192 
  ldv_atomic_dec(v);
  #line 193 
  return;
}

#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_spin_lock_bh_mcc_cq_lock_of_be_adapter(spinlock_t *lock)
{
  #line 823 
  ldv_spin_model_lock((char *)"mcc_cq_lock_of_be_adapter");
  #line 825 
  spin_lock_bh(lock);
  #line 826 
  return;
}

#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_spin_unlock_bh_mcc_cq_lock_of_be_adapter(spinlock_t *lock)
{
  #line 832 
  ldv_spin_model_unlock((char *)"mcc_cq_lock_of_be_adapter");
  #line 834 
  spin_unlock_bh(lock);
  #line 835 
  return;
}

#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_mutex_lock_mcc_lock_of_be_adapter(struct mutex *lock)
{
  #line 841 
  ldv_mutex_model_lock(lock,(char *)"mcc_lock_of_be_adapter");
  #line 842 
  return;
}

#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static int cif_mutex_lock_interruptible_mbox_lock_of_be_adapter(struct mutex *lock)
{
  #line 848 
  int nondetermined = ldv_undef_int();
  #line 850 
  if (nondetermined != 0) {
    #line 852 
    ldv_mutex_model_lock(lock,(char *)"mbox_lock_of_be_adapter");
    #line 854 
    return 0;
  }
  else 
       #line 859 
       return -4;
}

#line 864  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_mutex_unlock_mcc_lock_of_be_adapter(struct mutex *lock)
{
  #line 867 
  ldv_mutex_model_unlock(lock,(char *)"mcc_lock_of_be_adapter");
  #line 868 
  return;
}

#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static void cif_mutex_unlock_mbox_lock_of_be_adapter(struct mutex *lock)
{
  #line 874 
  ldv_mutex_model_unlock(lock,(char *)"mbox_lock_of_be_adapter");
  #line 875 
  return;
}

#line 878  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_cmds.i.aux"
static int cif_mutex_lock_interruptible_mcc_lock_of_be_adapter(struct mutex *lock)
{
  #line 881 
  int nondetermined = ldv_undef_int();
  #line 883 
  if (nondetermined != 0) {
    #line 885 
    ldv_mutex_model_lock(lock,(char *)"mcc_lock_of_be_adapter");
    #line 887 
    return 0;
  }
  else 
       #line 892 
       return -4;
}

/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 5 
#line 5 
void ldv_atomic_sub(int i, atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 277  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 291  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static __u32 rol32(__u32 word, unsigned int shift)
{
  #line 102 
  return (word << (shift & 31U)) | (word >> (- shift & 31U));
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1073 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1075 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size)
{
  #line 31 
  if (0 != 0) {
    #line 38 
    int tmp_30;
    #line 38 
    int tmp_31;
    #line 38 
    int tmp;
    #line 38 
    int tmp_0;
    #line 38 
    int tmp_32;
    #line 38 
    int tmp_33;
    #line 38 
    int tmp_1;
    #line 38 
    int tmp_2;
    #line 38 
    int tmp_34;
    #line 38 
    int tmp_35;
    #line 38 
    int tmp_3;
    #line 38 
    int tmp_4;
    #line 38 
    int tmp_36;
    #line 38 
    int tmp_37;
    #line 38 
    int tmp_5;
    #line 38 
    int tmp_6;
    #line 38 
    int tmp_38;
    #line 38 
    int tmp_39;
    #line 38 
    int tmp_7;
    #line 38 
    int tmp_8;
    #line 38 
    int tmp_40;
    #line 38 
    int tmp_41;
    #line 38 
    int tmp_9;
    #line 38 
    int tmp_10;
    #line 38 
    int tmp_42;
    #line 38 
    int tmp_43;
    #line 38 
    int tmp_11;
    #line 38 
    int tmp_12;
    #line 38 
    int tmp_44;
    #line 38 
    int tmp_45;
    #line 38 
    int tmp_13;
    #line 38 
    int tmp_14;
    #line 38 
    int tmp_46;
    #line 38 
    int tmp_47;
    #line 38 
    int tmp_15;
    #line 38 
    int tmp_16;
    #line 38 
    int tmp_48;
    #line 38 
    int tmp_49;
    #line 38 
    int tmp_17;
    #line 38 
    int tmp_18;
    #line 38 
    int tmp_50;
    #line 38 
    int tmp_51;
    #line 38 
    int tmp_19;
    #line 38 
    int tmp_20;
    #line 38 
    int tmp_52;
    #line 38 
    int tmp_53;
    #line 38 
    int tmp_21;
    #line 38 
    int tmp_22;
    #line 38 
    int tmp_54;
    #line 38 
    int tmp_55;
    #line 38 
    int tmp_23;
    #line 38 
    int tmp_24;
    #line 38 
    int tmp_56;
    #line 38 
    int tmp_57;
    #line 38 
    int tmp_25;
    #line 38 
    int tmp_26;
    #line 38 
    int tmp_58;
    #line 38 
    int tmp_59;
    #line 38 
    int tmp_27;
    #line 38 
    int tmp_28;
    #line 38 
    int tmp_60;
    #line 38 
    int tmp_61;
    #line 38 
    int tmp_29;
    #line 38 
    int tmp_63;
    #line 32 
    if (size == 0UL) 
                     #line 33 
                     return 52;
    #line 35 
    if (size <= 4095UL) 
                        #line 36 
                        return 0;
    #line 38 
    if (0 != 0) {
      #line 38 
      if (size + 18446744073709551615UL > 1UL) {
        #line 38 
        if (((unsigned long long)(size + 18446744073709551615UL) & 9223372036854775808ULL) == 0ULL) {
          #line 38 
          if (((unsigned long long)(size + 18446744073709551615UL) & 4611686018427387904ULL) == 0ULL) {
            #line 38 
            if (((unsigned long long)(size + 18446744073709551615UL) & 2305843009213693952ULL) == 0ULL) {
              #line 38 
              if (((unsigned long long)(size + 18446744073709551615UL) & 1152921504606846976ULL) == 0ULL) {
                #line 38 
                if (((unsigned long long)(size + 18446744073709551615UL) & 576460752303423488ULL) == 0ULL) {
                  #line 38 
                  if (((unsigned long long)(size + 18446744073709551615UL) & 288230376151711744ULL) == 0ULL) {
                    #line 38 
                    if (((unsigned long long)(size + 18446744073709551615UL) & 144115188075855872ULL) == 0ULL) {
                      #line 38 
                      if (((unsigned long long)(size + 18446744073709551615UL) & 72057594037927936ULL) == 0ULL) {
                        #line 38 
                        if (((unsigned long long)(size + 18446744073709551615UL) & 36028797018963968ULL) == 0ULL) {
                          #line 38 
                          if (((unsigned long long)(size + 18446744073709551615UL) & 18014398509481984ULL) == 0ULL) {
                            #line 38 
                            if (((unsigned long long)(size + 18446744073709551615UL) & 9007199254740992ULL) == 0ULL) {
                              #line 38 
                              if (((unsigned long long)(size + 18446744073709551615UL) & 4503599627370496ULL) == 0ULL) {
                                #line 38 
                                if (((unsigned long long)(size + 18446744073709551615UL) & 2251799813685248ULL) == 0ULL) {
                                  #line 38 
                                  if (((unsigned long long)(size + 18446744073709551615UL) & 1125899906842624ULL) == 0ULL) {
                                    #line 38 
                                    if (((unsigned long long)(size + 18446744073709551615UL) & 562949953421312ULL) == 0ULL) {
                                      #line 38 
                                      if (((unsigned long long)(size + 18446744073709551615UL) & 281474976710656ULL) == 0ULL) {
                                        #line 38 
                                        if (((unsigned long long)(size + 18446744073709551615UL) & 140737488355328ULL) == 0ULL) {
                                          #line 38 
                                          if (((unsigned long long)(size + 18446744073709551615UL) & 70368744177664ULL) == 0ULL) {
                                            #line 38 
                                            if (((unsigned long long)(size + 18446744073709551615UL) & 35184372088832ULL) == 0ULL) {
                                              #line 38 
                                              if (((unsigned long long)(size + 18446744073709551615UL) & 17592186044416ULL) == 0ULL) {
                                                #line 38 
                                                if (((unsigned long long)(size + 18446744073709551615UL) & 8796093022208ULL) == 0ULL) {
                                                  #line 38 
                                                  if (((unsigned long long)(size + 18446744073709551615UL) & 4398046511104ULL) == 0ULL) {
                                                    #line 38 
                                                    if (((unsigned long long)(size + 18446744073709551615UL) & 2199023255552ULL) == 0ULL) {
                                                      #line 38 
                                                      if (((unsigned long long)(size + 18446744073709551615UL) & 1099511627776ULL) == 0ULL) {
                                                        #line 38 
                                                        if (((unsigned long long)(size + 18446744073709551615UL) & 549755813888ULL) == 0ULL) {
                                                          #line 38 
                                                          if (((unsigned long long)(size + 18446744073709551615UL) & 274877906944ULL) == 0ULL) {
                                                            #line 38 
                                                            if (((unsigned long long)(size + 18446744073709551615UL) & 137438953472ULL) == 0ULL) {
                                                              #line 38 
                                                              if (((unsigned long long)(size + 18446744073709551615UL) & 68719476736ULL) == 0ULL) {
                                                                #line 38 
                                                                if (((unsigned long long)(size + 18446744073709551615UL) & 34359738368ULL) == 0ULL) {
                                                                  #line 38 
                                                                  if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 17179869184ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8589934592ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4294967296ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2147483648ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1073741824ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 536870912ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 268435456ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 134217728ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 67108864ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 33554432ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16777216ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8388608ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4194304ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2097152ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1048576ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 524288ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 262144ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 131072ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 65536ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32768ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16384ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8192ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4096ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2048ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1024ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 512ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 256ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 128ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 64ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4ULL) != 0ULL) 
                                                                    #line 38 
                                                                    tmp = -9; else 
                                                                    #line 38 
                                                                    tmp = -10;
                                                                    #line 38 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_0 = -8;
                                                                    #line 38 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_1 = -7;
                                                                    #line 38 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_2 = -6;
                                                                    #line 38 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_3 = -5;
                                                                    #line 38 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_4 = -4;
                                                                    #line 38 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_5 = -3;
                                                                    #line 38 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_6 = -2;
                                                                    #line 38 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_7 = -1;
                                                                    #line 38 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_8 = 0;
                                                                    #line 38 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_9 = 1;
                                                                    #line 38 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_10 = 2;
                                                                    #line 38 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_11 = 3;
                                                                    #line 38 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_12 = 4;
                                                                    #line 38 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_13 = 5;
                                                                    #line 38 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_14 = 6;
                                                                    #line 38 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_15 = 7;
                                                                    #line 38 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_16 = 8;
                                                                    #line 38 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_17 = 9;
                                                                    #line 38 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_18 = 10;
                                                                    #line 38 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_19 = 11;
                                                                    #line 38 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_20 = 12;
                                                                    #line 38 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_21 = 13;
                                                                    #line 38 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_22 = 14;
                                                                    #line 38 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_23 = 15;
                                                                    #line 38 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_24 = 16;
                                                                    #line 38 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_25 = 17;
                                                                    #line 38 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_26 = 18;
                                                                    #line 38 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_27 = 19;
                                                                    #line 38 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_28 = 20;
                                                                    #line 38 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_29 = 21;
                                                                    #line 38 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_30 = 22;
                                                                    #line 38 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 38 
                                                                    tmp_31 = 23;
                                                                  #line 38 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 38 
                                                                  tmp_32 = 24;
                                                                #line 38 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 38 
                                                                   tmp_33 = 25;
                                                              #line 38 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 38 
                                                                 tmp_34 = 26;
                                                            #line 38 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 38 
                                                               tmp_35 = 27;
                                                          #line 38 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 38 
                                                             tmp_36 = 28;
                                                        #line 38 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 38 
                                                           tmp_37 = 29;
                                                      #line 38 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 38 
                                                         tmp_38 = 30;
                                                    #line 38 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 38 
                                                       tmp_39 = 31;
                                                  #line 38 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 38 
                                                     tmp_40 = 32;
                                                #line 38 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 38 
                                                   tmp_41 = 33;
                                              #line 38 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 38 
                                                 tmp_42 = 34;
                                            #line 38 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 38 
                                               tmp_43 = 35;
                                          #line 38 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 38 
                                             tmp_44 = 36;
                                        #line 38 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 38 
                                           tmp_45 = 37;
                                      #line 38 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 38 
                                         tmp_46 = 38;
                                    #line 38 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 38 
                                       tmp_47 = 39;
                                  #line 38 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 38 
                                     tmp_48 = 40;
                                #line 38 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 38 
                                   tmp_49 = 41;
                              #line 38 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 38 
                                 tmp_50 = 42;
                            #line 38 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 38 
                               tmp_51 = 43;
                          #line 38 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 38 
                             tmp_52 = 44;
                        #line 38 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 38 
                           tmp_53 = 45;
                      #line 38 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 38 
                         tmp_54 = 46;
                    #line 38 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 38 
                       tmp_55 = 47;
                  #line 38 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 38 
                     tmp_56 = 48;
                #line 38 
                tmp_57 = tmp_56;
              }
              else 
                   #line 38 
                   tmp_57 = 49;
              #line 38 
              tmp_58 = tmp_57;
            }
            else 
                 #line 38 
                 tmp_58 = 50;
            #line 38 
            tmp_59 = tmp_58;
          }
          else 
               #line 38 
               tmp_59 = 51;
          #line 38 
          tmp_60 = tmp_59;
        }
        else 
             #line 38 
             tmp_60 = 52;
        #line 38 
        tmp_61 = tmp_60;
      }
      else 
           #line 38 
           tmp_61 = -11;
      #line 38 
      tmp_63 = tmp_61;
    }
    else {
      #line 38 
      tmp_63 = __ilog2_u64((unsigned long long)(size + 18446744073709551615UL)) + -11;
    }
    #line 38 
    return tmp_63;
  }
  #line 41 
  size --;
  #line 42 
  size >>= 12;
  #line 46 
  return fls64((unsigned long long)size);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1127 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 60 
#line 326  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 148 
#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_sub(int i, atomic_t *v);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 347  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_dec_0(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 99 
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read_0(& __num_online_cpus);
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 247 
#line 247 
unsigned int cpumask_local_spread(unsigned int, int);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 740 
#line 740 
bool zalloc_cpumask_var(cpumask_var_t *, gfp_t);
#line 742 
#line 742 
void free_cpumask_var(cpumask_var_t);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 718  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 776  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 803  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 785  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 26 
#line 985 
static void cif_mutex_lock_rx_filter_lock_of_be_adapter(struct mutex *lock);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_mutex_unlock_rx_filter_lock_of_be_adapter(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 291 
#line 291 
unsigned int jiffies_to_msecs(unsigned long);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 496 
#line 468  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_1209 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 107 
void pci_iounmap(struct pci_dev *, void *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/pci_iomap.h"
#line 13 
void *pci_iomap(struct pci_dev *, int, unsigned long);
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static bool gfpflags_allow_blocking(gfp_t gfp_flags)
{
  #line 325 
  return (_Bool)((gfp_flags & 1024U) != 0U);
}

#line 527 
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static unsigned int refcount_read(refcount_t *r)
{
  #line 134 
  return (unsigned int)atomic_read_0(& r->refs);
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 636  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 657  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1234 
#line 1234 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);
#line 1237 
#line 1237 
int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1061  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1069  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 12 
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read_0(& page->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc_0(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_131_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 2033 
#line 2033 
int pci_num_vf(struct pci_dev *);
#line 2034 
#line 2034 
int pci_vfs_assigned(struct pci_dev *);
#line 2035 
#line 2035 
int pci_sriov_set_totalvfs(struct pci_dev *, u16);
#line 2036 
#line 2036 
int pci_sriov_get_totalvfs(struct pci_dev *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_add(skb_frag_t *frag, int delta)
{
  #line 347 
  frag->bv_len += (unsigned int)delta;
  #line 348 
  return;
}

#line 1019 
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1105 
#line 1105 
struct sk_buff *skb_clone(struct sk_buff *, gfp_t);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read_0(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_shared(struct sk_buff *skb)
{
  #line 1663 
  return refcount_read(& skb->users) != 1U;
}

#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
  #line 1681 
  if ((int)gfpflags_allow_blocking(pri) != 0) 
                                              #line 1681 
                                              __might_sleep((char *)"./include/linux/skbuff.h",1681,0);
  #line 1682 
  if (skb_shared(skb) != 0) {
    #line 1683 
    struct sk_buff *nskb = skb_clone(skb,pri);
    #line 1685 
    if ((long)(nskb != (struct sk_buff *)0) != 0L) 
                                                   #line 1686 
                                                   consume_skb(skb); else 
                                                                    #line 1688 
                                                                    kfree_skb(skb);
    #line 1689 
    skb = nskb;
  }
  #line 1691 
  return skb;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  #line 2158 
  skb->tail = (unsigned int)(skb->data - skb->head);
  #line 2159 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
  #line 2163 
  skb_reset_tail_pointer(skb);
  #line 2164 
  skb->tail += (unsigned int)offset;
  #line 2165 
  return;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_inner_transport_offset(struct sk_buff *skb)
{
  #line 2405 
  ;
  #line 2405 
  return (int)(skb_inner_transport_header(skb) - skb->data);
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff *skb)
{
  #line 2439 
  return skb->head + (unsigned long)skb->inner_mac_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2637 
#line 2637 
int ___pskb_trim(struct sk_buff *, unsigned int);
#line 2639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_length(struct sk_buff *skb, unsigned int len)
{
  #line 2641 
  int __ret_warn_on;
  {
    #line 2641 
    __ret_warn_on = (int)skb_is_nonlinear(skb) != 0;
    #line 2641 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2642 
      ldv_inline_asm();
      #line 2643 
      ldv_inline_asm();
    }
    }
  #line 2641 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 2642 
                                                return;
  #line 2643 
  skb->len = len;
  #line 2644 
  skb_set_tail_pointer(skb,(int)len);
  #line 2645 
  return;
}

#line 2647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2649 
  __skb_set_length(skb,len);
  #line 2650 
  return;
}

#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2656 
  if (skb->data_len != 0U) {
    #line 2657 
    return ___pskb_trim(skb,len);
  }
  #line 2658 
  __skb_trim(skb,len);
  #line 2659 
  return 0;
}

#line 2662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int pskb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2664 
  int tmp_0;
  #line 2664 
  if (skb->len > len) 
                      #line 2664 
                      tmp_0 = __pskb_trim(skb,len); else 
                                                         #line 2664 
                                                         tmp_0 = 0;
  #line 2664 
  return tmp_0;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  #line 2811 
  return __netdev_alloc_skb_ip_align(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_off_set(skb_frag_t *frag, unsigned int offset)
{
  #line 2918 
  frag->bv_offset = offset;
  #line 2919 
  return;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_frag_set_page(skb_frag_t *frag, struct page *page)
{
  #line 3037 
  frag->bv_page = page;
  #line 3038 
  return;
}

#line 3048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_set_page(struct sk_buff *skb, int f, struct page *page)
{
  #line 3051 
  ;
  #line 3051 
  __skb_frag_set_page(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f],page);
  #line 3052 
  return;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff *skb)
{
  #line 4398 
  ;
  #line 4398 
  return (_Bool)((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 16U) != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 2679 
#line 1037  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3462 
#line 3462 
int netif_set_xps_queue(struct net_device *, struct cpumask *, u16);
#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3609 
#line 3609 
int netif_get_num_default_rss_queues(void);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3667 
#line 3667 
struct sk_buff *napi_get_frags(struct napi_struct *);
#line 3668 
#line 3668 
gro_result_t napi_gro_frags(struct napi_struct *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock(struct net_device *dev)
{
  #line 4004 
  int pscr_ret__;
  #line 4000 
  unsigned int i;
  #line 4001 
  int cpu;
  #line 4003 
  cif_spin_lock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4004 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4004 
    void *__vpp_verify = (void *)0;
    #line 4004 
    void *tmp = __vpp_verify;
  }
  #line 4004 
  switch (4UL) {
    #line 4004 
    int pfo_ret__;
    #line 4004 
    int pfo_ret___0;
    #line 4004 
    int pfo_ret___1;
    #line 4004 
    int pfo_ret___2;
    #line 4004 
    case (unsigned long)1: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret__;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)2: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___0;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)4: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___1;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)8: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___2;
    #line 4004 
    break;
    #line 4004 
    default: 
             #line 4004 
    ;
    #line 4004 
    __bad_size_call_parameter();
    #line 4004 
    break;
  }
  #line 4004 
  cpu = pscr_ret__;
  #line 4005 
  i = 0U;
  #line 4005 
  while (dev->num_tx_queues > i) {
    {
      #line 4006 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4014 
      __netif_tx_lock(txq,cpu);
      #line 4015 
      cif_set_bit(2L,& txq->state);
      #line 4016 
      __netif_tx_unlock(txq);
    }
    #line 4005 
    i ++;
  }
  #line 4018 
  return;
}

#line 4020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock_bh(struct net_device *dev)
{
  #line 4022 
  local_bh_disable();
  #line 4023 
  netif_tx_lock(dev);
  #line 4024 
  return;
}

#line 4026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock(struct net_device *dev)
{
  #line 4028 
  unsigned int i;
  #line 4030 
  i = 0U;
  #line 4030 
  while (dev->num_tx_queues > i) {
    {
      #line 4031 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4037 
      cif_clear_bit(2L,& txq->state);
      #line 4038 
      netif_schedule_queue(txq);
    }
    #line 4030 
    i ++;
  }
  #line 4040 
  cif_spin_unlock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4041 
  return;
}

#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock_bh(struct net_device *dev)
{
  #line 4045 
  netif_tx_unlock(dev);
  #line 4046 
  local_bh_enable();
  #line 4047 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4131 
#line 1053  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1029  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4152 
#line 4152 
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_uc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4206 
  __hw_addr_unsync_dev(& dev->uc,dev,unsync);
  #line 4207 
  return;
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_mc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4250 
  __hw_addr_unsync_dev(& dev->mc,dev,unsync);
  #line 4251 
  return;
}

#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_set_gso_max_size(struct net_device *dev, unsigned int size)
{
  #line 4578 
  dev->gso_max_size = size;
  #line 4579 
  return;
}

#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1045  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 36 
#line 36 
int rtnl_is_locked(void);
#line 130 
#line 130 
int ndo_dflt_bridge_getlink(struct sk_buff *, u32, u32, struct net_device *, u16, u32, u32, int, u32, int (*)(struct sk_buff *, struct net_device *, u32 ));
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static int __vlan_insert_inner_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci, unsigned int mac_len)
{
  #line 337 
  struct vlan_ethhdr *veth;
  #line 339 
  if (skb_cow_head(skb,4U) < 0) 
                                #line 340 
                                return -12;
  #line 342 
  skb_push(skb,4U);
  #line 345 
  if ((long)(mac_len > 2U) != 0L) 
                                  #line 346 
                                  __memmove((void *)skb->data,(void *)(skb->data + 4U),(unsigned long)(mac_len + 4294967294U));
  #line 347 
  skb->mac_header = (unsigned short)((unsigned int)skb->mac_header + 65532U);
  #line 349 
  veth = (struct vlan_ethhdr *)(skb->data + ((unsigned long)mac_len + 18446744073709551602U));
  #line 352 
  if ((long)(mac_len > 1U) != 0L) 
                                  #line 356 
                                  veth->h_vlan_proto = vlan_proto; else 
                                                                    #line 361 
                                                                    veth->h_vlan_encapsulated_proto = skb->protocol;
  #line 365 
  veth->h_vlan_TCI = __builtin_bswap16((unsigned short)((int)vlan_tci));
  #line 367 
  return 0;
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_inner_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci, unsigned int mac_len)
{
  #line 407 
  int err;
  #line 409 
  err = __vlan_insert_inner_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vlan_tci),mac_len);
  #line 410 
  if (err != 0) {
    #line 411 
    dev_kfree_skb_any(skb);
    #line 412 
    return (struct sk_buff *)0;
  }
  #line 414 
  return skb;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 434 
  return vlan_insert_inner_tag(skb,(unsigned short)((int)vlan_proto),
                            (unsigned short)((int)vlan_tci),14U);
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_tag_set_proto(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 453 
  skb = vlan_insert_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vlan_tci));
  #line 454 
  if (skb != (struct sk_buff *)0) 
                                  #line 455 
                                  skb->protocol = vlan_proto;
  #line 456 
  return skb;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_clear_tag(struct sk_buff *skb)
{
  #line 467 
  skb->vlan_present = (unsigned char)0U;
  #line 468 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool skb_vlan_tagged_multi(struct sk_buff *skb)
{
  #line 687 
  __be16 protocol = skb->protocol;
  #line 689 
  if ((unsigned int)skb->vlan_present == 0U) {
    #line 690 
    struct vlan_ethhdr *veh;
    #line 692 
    int tmp_0;
    #line 695 
    int tmp_2;
    #line 692 
    if (eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 692 
                                                        tmp_0 = 0; else 
                                                                    #line 692 
                                                                    tmp_0 = 1;
    #line 692 
    if ((long)tmp_0 != 0L) 
                           #line 693 
                           return (_Bool)0;
    #line 695 
    if (pskb_may_pull(skb,18U)) 
                                #line 695 
                                tmp_2 = 0; else 
                                                #line 695 
                                                tmp_2 = 1;
    #line 695 
    if ((long)tmp_2 != 0L) 
                           #line 696 
                           return (_Bool)0;
    #line 698 
    veh = (struct vlan_ethhdr *)skb->data;
    #line 699 
    protocol = veh->h_vlan_encapsulated_proto;
  }
  #line 702 
  if (! eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 703 
                                                        return (_Bool)0;
  #line 705 
  return (_Bool)1;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static netdev_features_t vlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  #line 718 
  if ((int)skb_vlan_tagged_multi(skb) != 0) 
                                            #line 724 
                                            features &= 17592186044649ULL;
  #line 729 
  return features;
}

#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
#line 441 
struct nlattr *nla_find(struct nlattr *, int, int);
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void *nlmsg_data(struct nlmsghdr *nlh)
{
  #line 503 
  return (void *)((unsigned char *)nlh + 16U);
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nlmsg_len(struct nlmsghdr *nlh)
{
  #line 512 
  return (int)(nlh->nlmsg_len + 4294967280U);
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nlmsg_attrdata(struct nlmsghdr *nlh, int hdrlen)
{
  #line 523 
  unsigned char *data = nlmsg_data(nlh);
  #line 524 
  return (struct nlattr *)(data + ((unsigned long)((unsigned int)hdrlen + 3U) & (unsigned long)4294967292U));
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nlmsg_attrlen(struct nlmsghdr *nlh, int hdrlen)
{
  #line 534 
  ;
  #line 534 
  return (int)((unsigned int)nlmsg_len(nlh) - (((unsigned int)hdrlen + 3U) & 4294967292U));
}

#line 738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nlmsg_find_attr(struct nlmsghdr *nlh, int hdrlen, int attrtype)
{
  #line 741 
  ;
  #line 741 
  return nla_find(nlmsg_attrdata(nlh,hdrlen),nlmsg_attrlen(nlh,hdrlen),
                 attrtype);
}

#line 1063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_type(struct nlattr *nla)
{
  #line 1065 
  return (int)nla->nla_type & -49153;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void *nla_data(struct nlattr *nla)
{
  #line 1074 
  return (void *)((char *)nla + 4U);
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_len(struct nlattr *nla)
{
  #line 1083 
  return (int)nla->nla_len + -4;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_ok(struct nlattr *nla, int remaining)
{
  #line 1094 
  return ((remaining > 3 && (unsigned int)nla->nla_len > 3U) && (int)nla->nla_len <= remaining) != 0;
}

#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nla_next(struct nlattr *nla, int *remaining)
{
  #line 1108 
  unsigned int totlen = (unsigned int)((int)nla->nla_len + 3) & 4294967292U;
  #line 1110 
  *remaining = (int)((unsigned int)*remaining - totlen);
  #line 1111 
  return (struct nlattr *)((char *)nla + (unsigned long)totlen);
}

#line 1499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u16 nla_get_u16(struct nlattr *nla)
{
  #line 1501 
  return *((u16 *)nla_data(nla));
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/packed_struct.h"
__inline static u32 __get_unaligned_cpu32(void *p)
{
  #line 18 
  struct __una_u32 *ptr = (struct __una_u32 *)p;
  #line 19 
  return ptr->x;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
__inline static u32 jhash(void *key, u32 length, u32 initval)
{
  #line 72 
  u32 a;
  #line 72 
  u32 b;
  #line 72 
  u32 c;
  #line 73 
  u8 *k = (u8 *)key;
  #line 76 
  c = (length + initval) + 3735928559U;
  #line 76 
  b = c;
  #line 76 
  a = b;
  #line 79 
  while (length > 12U) {
    #line 80 
    a = __get_unaligned_cpu32((void *)k) + a;
    #line 81 
    b = __get_unaligned_cpu32((void *)(k + 4U)) + b;
    #line 82 
    c = __get_unaligned_cpu32((void *)(k + 8U)) + c;
    #line 83 
    a -= c;
    #line 83 
    a = rol32(c,4U) ^ a;
    #line 83 
    c += b;
    #line 83 
    b -= a;
    #line 83 
    b = rol32(a,6U) ^ b;
    #line 83 
    a += c;
    #line 83 
    c -= b;
    #line 83 
    c = rol32(b,8U) ^ c;
    #line 83 
    b += a;
    #line 83 
    a -= c;
    #line 83 
    a = rol32(c,16U) ^ a;
    #line 83 
    c += b;
    #line 83 
    b -= a;
    #line 83 
    b = rol32(a,19U) ^ b;
    #line 83 
    a += c;
    #line 83 
    c -= b;
    #line 83 
    c = rol32(b,4U) ^ c;
    #line 83 
    b += a;
    #line 84 
    length += 4294967284U;
    #line 85 
    k += 12U;
  }
  #line 88 
  switch (length) {
    #line 89 
    case (u32)12: 
                  #line 89 
    ;
    #line 89 
    c = ((unsigned int)*(k + 11U) << 24) + c;
    #line 90 
    case (u32)11: 
                  #line 90 
    ;
    #line 90 
    c = ((unsigned int)*(k + 10U) << 16) + c;
    #line 91 
    case (u32)10: 
                  #line 91 
    ;
    #line 91 
    c = ((unsigned int)*(k + 9U) << 8) + c;
    #line 92 
    case (u32)9: 
                 #line 92 
    ;
    #line 92 
    c = (unsigned int)*(k + 8U) + c;
    #line 93 
    case (u32)8: 
                 #line 93 
    ;
    #line 93 
    b = ((unsigned int)*(k + 7U) << 24) + b;
    #line 94 
    case (u32)7: 
                 #line 94 
    ;
    #line 94 
    b = ((unsigned int)*(k + 6U) << 16) + b;
    #line 95 
    case (u32)6: 
                 #line 95 
    ;
    #line 95 
    b = ((unsigned int)*(k + 5U) << 8) + b;
    #line 96 
    case (u32)5: 
                 #line 96 
    ;
    #line 96 
    b = (unsigned int)*(k + 4U) + b;
    #line 97 
    case (u32)4: 
                 #line 97 
    ;
    #line 97 
    a = ((unsigned int)*(k + 3U) << 24) + a;
    #line 98 
    case (u32)3: 
                 #line 98 
    ;
    #line 98 
    a = ((unsigned int)*(k + 2U) << 16) + a;
    #line 99 
    case (u32)2: 
                 #line 99 
    ;
    #line 99 
    a = ((unsigned int)*(k + 1U) << 8) + a;
    #line 100 
    case (u32)1: 
                 #line 100 
    ;
    #line 100 
    a = (unsigned int)*k + a;
    #line 101 
    c ^= b;
    #line 101 
    c -= rol32(b,14U);
    #line 101 
    a ^= c;
    #line 101 
    a -= rol32(c,11U);
    #line 101 
    b ^= a;
    #line 101 
    b -= rol32(a,25U);
    #line 101 
    c ^= b;
    #line 101 
    c -= rol32(b,16U);
    #line 101 
    a ^= c;
    #line 101 
    a -= rol32(c,4U);
    #line 101 
    b ^= a;
    #line 101 
    b -= rol32(a,14U);
    #line 101 
    c ^= b;
    #line 101 
    c -= rol32(b,24U);
    #line 102 
    case (u32)0: 
                 #line 102 
    ;
    #line 103 
    break;
  }
  #line 106 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff *skb)
{
  #line 41 
  return (struct tcphdr *)skb_inner_transport_header(skb);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff *skb)
{
  #line 46 
  ;
  #line 46 
  return (unsigned int)((int)inner_tcp_hdr(skb)->doff * 4);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *inner_ip_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct iphdr *)skb_inner_network_header(skb);
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/icmpv6.h"
__inline static struct icmp6hdr *icmp6_hdr(struct sk_buff *skb)
{
  #line 10 
  return (struct icmp6hdr *)skb_transport_header(skb);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff *skb)
{
  #line 23 
  return (struct udphdr *)skb_transport_header(skb);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *inner_ipv6_hdr(struct sk_buff *skb)
{
  #line 99 
  return (struct ipv6hdr *)skb_inner_network_header(skb);
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1060 
bool ipv6_ext_hdr(u8);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1022  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hwmon.h"
#line 402 
struct device *devm_hwmon_device_register_with_groups(struct device *, char *, void *, struct attribute_group **);
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void index_adv(u32 *index, u32 val, u32 limit)
{
  #line 144 
  *index = MODULO(*index + val,limit);
  #line 145 
  return;
}

#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_rx_irqs(struct be_adapter *adapter)
{
  #line 725 
  unsigned short __UNIQUE_ID___x557;
  #line 725 
  int tmp_4;
  #line 723 
  unsigned short __UNIQUE_ID___x553;
  #line 723 
  int tmp;
  {
    #line 723 
    __UNIQUE_ID___x553 = adapter->res.max_rss_qs;
    #line 723 
    unsigned short __UNIQUE_ID___y554 = (unsigned short)1U;
    #line 723 
    if ((int)__UNIQUE_ID___x553 > (int)__UNIQUE_ID___y554) 
                                                           #line 723 
                                                           tmp = (int)__UNIQUE_ID___x553; else 
                                                                    #line 723 
                                                                    tmp = (int)__UNIQUE_ID___y554;
    }
  #line 723 
  u16 num = (unsigned short)tmp;
  {
    #line 725 
    unsigned short __UNIQUE_ID___x555;
    #line 725 
    int tmp_2;
    #line 725 
    __UNIQUE_ID___x557 = num;
    {
      #line 725 
      __UNIQUE_ID___x555 = adapter->res.max_nic_evt_qs;
      #line 725 
      unsigned short __UNIQUE_ID___y556 = (unsigned short)num_online_cpus();
      #line 725 
      if ((int)__UNIQUE_ID___x555 < (int)__UNIQUE_ID___y556) 
                                                             #line 725 
                                                             tmp_2 = (int)__UNIQUE_ID___x555; else 
                                                                    #line 725 
                                                                    tmp_2 = (int)__UNIQUE_ID___y556;
      }
    #line 725 
    unsigned short __UNIQUE_ID___y558 = (unsigned short)tmp_2;
    #line 725 
    if ((int)__UNIQUE_ID___x557 < (int)__UNIQUE_ID___y558) 
                                                           #line 725 
                                                           tmp_4 = (int)__UNIQUE_ID___x557; else 
                                                                    #line 725 
                                                                    tmp_4 = (int)__UNIQUE_ID___y558;
    }
  #line 725 
  return (unsigned short)tmp_4;
}

#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_tx_irqs(struct be_adapter *adapter)
{
  #line 731 
  int tmp_2;
  #line 731 
  unsigned short __UNIQUE_ID___x561;
  {
    #line 731 
    int tmp_0;
    #line 731 
    unsigned short __UNIQUE_ID___x559;
    #line 731 
    __UNIQUE_ID___x561 = adapter->res.max_tx_qs;
    {
      #line 731 
      __UNIQUE_ID___x559 = adapter->res.max_nic_evt_qs;
      #line 731 
      unsigned short __UNIQUE_ID___y560 = (unsigned short)num_online_cpus();
      #line 731 
      if ((int)__UNIQUE_ID___x559 < (int)__UNIQUE_ID___y560) 
                                                             #line 731 
                                                             tmp_0 = (int)__UNIQUE_ID___x559; else 
                                                                    #line 731 
                                                                    tmp_0 = (int)__UNIQUE_ID___y560;
      }
    #line 731 
    unsigned short __UNIQUE_ID___y562 = (unsigned short)tmp_0;
    #line 731 
    if ((int)__UNIQUE_ID___x561 < (int)__UNIQUE_ID___y562) 
                                                           #line 731 
                                                           tmp_2 = (int)__UNIQUE_ID___x561; else 
                                                                    #line 731 
                                                                    tmp_2 = (int)__UNIQUE_ID___y562;
    }
  #line 731 
  return (unsigned short)tmp_2;
}

#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_qp_irqs(struct be_adapter *adapter)
{
  #line 737 
  u16 __UNIQUE_ID___x563;
  #line 737 
  int tmp_1;
  {
    #line 737 
    __UNIQUE_ID___x563 = be_max_tx_irqs(adapter);
    #line 737 
    u16 __UNIQUE_ID___y564 = be_max_rx_irqs(adapter);
    #line 737 
    if ((int)__UNIQUE_ID___x563 < (int)__UNIQUE_ID___y564) 
                                                           #line 737 
                                                           tmp_1 = (int)__UNIQUE_ID___x563; else 
                                                                    #line 737 
                                                                    tmp_1 = (int)__UNIQUE_ID___y564;
    }
  #line 737 
  return (unsigned short)tmp_1;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_any_irqs(struct be_adapter *adapter)
{
  #line 743 
  u16 __UNIQUE_ID___x565;
  #line 743 
  int tmp_1;
  {
    #line 743 
    __UNIQUE_ID___x565 = be_max_tx_irqs(adapter);
    #line 743 
    u16 __UNIQUE_ID___y566 = be_max_rx_irqs(adapter);
    #line 743 
    if ((int)__UNIQUE_ID___x565 > (int)__UNIQUE_ID___y566) 
                                                           #line 743 
                                                           tmp_1 = (int)__UNIQUE_ID___x565; else 
                                                                    #line 743 
                                                                    tmp_1 = (int)__UNIQUE_ID___y566;
    }
  #line 743 
  return (unsigned short)tmp_1;
}

#line 785 
#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
struct ethtool_ops be_ethtool_ops;
#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u8 is_udp_pkt(struct sk_buff *skb)
{
  #line 911 
  u8 val = (unsigned char)0U;
  #line 913 
  ;
  #line 913 
  if ((unsigned int)ip_hdr(skb)->version == 4U) {
    #line 914 
    val = (unsigned char)((unsigned int)ip_hdr(skb)->protocol == 17U);
  }
  else {
    #line 915 
    ;
    #line 915 
    if ((unsigned int)ip_hdr(skb)->version == 6U) {
      #line 916 
      val = (unsigned char)((unsigned int)ipv6_hdr(skb)->nexthdr == 17U);
    }
  }
  #line 918 
  return val;
}

#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static bool is_ipv4_pkt(struct sk_buff *skb)
{
  #line 923 
  int tmp_0;
  #line 923 
  if ((unsigned int)skb->protocol == 8U) {
    #line 923 
    ;
    #line 923 
    if ((unsigned int)ip_hdr(skb)->version == 4U) 
                                                  #line 923 
                                                  tmp_0 = 1; else 
                                                                  #line 923 
                                                                  tmp_0 = 0;
  }
  else 
       #line 923 
       tmp_0 = 0;
  #line 923 
  return (_Bool)(tmp_0 != 0);
}

#line 926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static bool is_ipv6_ext_hdr(struct sk_buff *skb)
{
  #line 928 
  ;
  #line 928 
  if ((unsigned int)ip_hdr(skb)->version == 6U) {
    #line 929 
    return ipv6_ext_hdr((unsigned char)((int)ipv6_hdr(skb)->nexthdr));
  }
  else 
       #line 931 
       return (_Bool)0;
}

#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static void be_clear_error(struct be_adapter *adapter, int err_type)
{
  #line 963 
  adapter->err_flags = (unsigned char)((int)adapter->err_flags & ~ err_type);
  #line 964 
  return;
}

#line 966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static bool be_multi_rxq(struct be_adapter *adapter)
{
  #line 968 
  return (_Bool)((unsigned int)adapter->num_rx_qs > 1U);
}

#line 975 
#line 4929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
int be_load_fw(struct be_adapter *adapter, u8 *fw_file);
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
#line 977 
bool be_pause_supported(struct be_adapter *adapter);
#line 979 
#line 4696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
int be_update_queues(struct be_adapter *adapter);
#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
#line 3294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
int be_poll(struct napi_struct *napi, int budget);
#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
#line 2229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
void be_eqd_update(struct be_adapter *adapter, bool force_update);
#line 986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
#line 986 
void be_roce_dev_add(struct be_adapter *adapter);
#line 987 
#line 987 
void be_roce_dev_remove(struct be_adapter *adapter);
#line 992 
#line 992 
void be_roce_dev_shutdown(struct be_adapter *adapter);
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
__inline static struct lancer_pport_stats *pport_stats_from_cmd(struct be_adapter *adapter)
{
  #line 1010 
  struct lancer_cmd_resp_pport_stats *cmd = (struct lancer_cmd_resp_pport_stats *)adapter->stats_cmd.va;
  #line 1011 
  return & cmd->pport_stats;
}

#line 2298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_cmds.h"
__inline static bool check_privilege(struct be_adapter *adapter, u32 flags)
{
  #line 2300 
  return (_Bool)((adapter->cmd_privileges & flags) != 0U);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/busy_poll.h"
__inline static void skb_mark_napi_id(struct sk_buff *skb, struct napi_struct *napi)
{
  #line 117 
  skb->__anonCompField_sk_buff_98.napi_id = napi->napi_id;
  #line 118 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
__inline static void udp_tunnel_get_rx_info(struct net_device *dev)
{
  {
    #line 130 
    bool __warned;
    #line 130 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 130 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 130 
      __warned = (_Bool)1;
      {
        #line 130 
        int __ret_warn_on = 1;
        #line 130 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 130 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"./include/net/udp_tunnel.h",130);
          #line 131 
          ldv_inline_asm();
          #line 132 
          ldv_inline_asm();
        }
        #line 130 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 130 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 131 
  call_netdevice_notifiers(28UL,dev);
  #line 132 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static unsigned int num_vfs;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static ushort rx_frag_size = (unsigned short)2048U;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct workqueue_struct *be_err_recovery_workq;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct pci_device_id be_dev_ids[9U] = {{.vendor = 6562U, .device = 529U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6562U, .device = 1792U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6562U, .device = 545U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6562U, .device = 1808U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4319U, .device = 57888U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4319U, .device = 57896U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4319U, .device = 1824U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4319U, .device = 1832U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
struct pci_device_id __mod_pci__be_dev_ids_device_table[9U];
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct workqueue_struct *be_wq;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static char *ue_status_low_desc[32U] = {(char *)"CEV", (char *)"CTX", (char *)"DBUF", (char *)"ERX", (char *)"Host", (char *)"MPU", (char *)"NDMA", (char *)"PTC ", (char *)"RDMA ", (char *)"RXF ", (char *)"RXIPS ", (char *)"RXULP0 ", (char *)"RXULP1 ", (char *)"RXULP2 ", (char *)"TIM ", (char *)"TPOST ", (char *)"TPRE ", (char *)"TXIPS ", (char *)"TXULP0 ", (char *)"TXULP1 ", (char *)"UC ", (char *)"WDMA ", (char *)"TXULP2 ", (char *)"HOST1 ", (char *)"P0_OB_LINK ", (char *)"P1_OB_LINK ", (char *)"HOST_GPIO ", (char *)"MBOX ", (char *)"ERX2 ", (char *)"SPARE ", (char *)"JTAG ", (char *)"MPU_INTPEND "};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static char *ue_status_hi_desc[32U] = {(char *)"LPCMEMHOST", (char *)"MGMT_MAC", (char *)"PCS0ONLINE", (char *)"MPU_IRAM", (char *)"PCS1ONLINE", (char *)"PCTL0", (char *)"PCTL1", (char *)"PMEM", (char *)"RR", (char *)"TXPB", (char *)"RXPP", (char *)"XAUI", (char *)"TXP", (char *)"ARM", (char *)"IPC", (char *)"HOST2", (char *)"HOST3", (char *)"HOST4", (char *)"HOST5", (char *)"HOST6", (char *)"HOST7", (char *)"ECRC", (char *)"Poison TLP", (char *)"NETC", (char *)"PERIPH", (char *)"LLTXULP", (char *)"D2P", (char *)"RCON", (char *)"LDMA", (char *)"LLTXP", (char *)"LLTXPB", (char *)"Unknown"};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_queue_free(struct be_adapter *adapter, struct be_queue_info *q)
{
  #line 148 
  struct be_dma_mem *mem = & q->dma_mem;
  #line 150 
  if (mem->va != (void *)0) {
    #line 151 
    dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)mem->size,mem->va,mem->dma);
    #line 153 
    mem->va = (void *)0;
  }
  #line 155 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_queue_alloc(struct be_adapter *adapter, struct be_queue_info *q, u16 len, u16 entry_size)
{
  #line 160 
  struct be_dma_mem *mem = & q->dma_mem;
  #line 162 
  memset((void *)q,0,56UL);
  #line 163 
  q->len = (unsigned int)len;
  #line 164 
  q->entry_size = (unsigned int)entry_size;
  #line 165 
  mem->size = (unsigned int)((int)len * (int)entry_size);
  #line 166 
  mem->va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)mem->size,& mem->dma,3264U);
  #line 168 
  if (mem->va == (void *)0) 
                            #line 169 
                            return -12;
  #line 170 
  return 0;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_reg_intr_set(struct be_adapter *adapter, bool enable)
{
  #line 175 
  u32 reg;
  #line 175 
  u32 enabled;
  #line 177 
  pci_read_config_dword(adapter->pdev,252,& reg);
  #line 179 
  enabled = reg & 536870912U;
  #line 181 
  if (enabled == 0U && (int)enable != 0) 
                                         #line 182 
                                         reg |= 536870912U;
  else 
    #line 183 
    if (enabled != 0U && ! enable) 
                                   #line 184 
                                   reg &= 3758096383U; else 
                                                            #line 186 
                                                            return;
  #line 188 
  pci_write_config_dword(adapter->pdev,252,reg);
  #line 189 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_intr_set(struct be_adapter *adapter, bool enable)
{
  #line 194 
  int status = 0;
  #line 197 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 198 
    return;
  #line 200 
  if ((unsigned int)be_check_error(adapter,1U) != 0U) 
                                                      #line 201 
                                                      return;
  #line 203 
  status = be_cmd_intr_set(adapter,(_Bool)((bool)((int)enable) != 0));
  #line 204 
  if (status != 0) 
                   #line 205 
                   be_reg_intr_set(adapter,(_Bool)((bool)((int)enable) != 0));
  #line 206 
  return;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rxq_notify(struct be_adapter *adapter, u16 qid, u16 posted)
{
  #line 210 
  u32 val = 0U;
  #line 212 
  if ((unsigned int)be_check_error(adapter,11U) != 0U) 
                                                       #line 213 
                                                       return;
  #line 215 
  val = ((unsigned int)qid & 1023U) | val;
  #line 216 
  val = (unsigned int)((int)posted << 24) | val;
  #line 217 
  ldv_inline_asm();
  #line 219 
  iowrite32(val,(void *)(adapter->db + 256U));
  #line 220 
  return;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_txq_notify(struct be_adapter *adapter, struct be_tx_obj *txo, u16 posted)
{
  #line 225 
  u32 val = 0U;
  #line 227 
  if ((unsigned int)be_check_error(adapter,11U) != 0U) 
                                                       #line 228 
                                                       return;
  #line 230 
  val = (txo->q.id & 2047U) | val;
  #line 231 
  val = ((unsigned int)((int)posted << 16) & 1073676288U) | val;
  #line 232 
  ldv_inline_asm();
  #line 234 
  iowrite32(val,(void *)(adapter->db + (unsigned long)txo->db_offset));
  #line 235 
  return;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_eq_notify(struct be_adapter *adapter, u16 qid, bool arm, bool clear_int, u16 num_popped, u32 eq_delay_mult_enc)
{
  #line 241 
  u32 val = 0U;
  #line 243 
  val = ((unsigned int)qid & 511U) | val;
  #line 244 
  val = ((unsigned int)((int)qid << 2) & 63488U) | val;
  #line 246 
  if ((unsigned int)be_check_error(adapter,11U) != 0U) 
                                                       #line 247 
                                                       return;
  #line 249 
  if ((int)arm != 0) 
                     #line 250 
                     val |= 536870912U;
  #line 251 
  if ((int)clear_int != 0) 
                           #line 252 
                           val |= 512U;
  #line 253 
  val |= 1024U;
  #line 254 
  val = (unsigned int)((int)num_popped << 16) | val;
  #line 255 
  val = (eq_delay_mult_enc << 30) | val;
  #line 256 
  iowrite32(val,(void *)(adapter->db + 288U));
  #line 257 
  return;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
void be_cq_notify(struct be_adapter *adapter, u16 qid, bool arm, u16 num_popped)
{
  #line 261 
  u32 val = 0U;
  #line 263 
  val = ((unsigned int)qid & 1023U) | val;
  #line 264 
  val = ((unsigned int)((int)qid << 1) & 63488U) | val;
  #line 267 
  if ((unsigned int)be_check_error(adapter,11U) != 0U) 
                                                       #line 268 
                                                       return;
  #line 270 
  if ((int)arm != 0) 
                     #line 271 
                     val |= 536870912U;
  #line 272 
  val = (unsigned int)((int)num_popped << 16) | val;
  #line 273 
  iowrite32(val,(void *)(adapter->db + 288U));
  #line 274 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_dev_mac_add(struct be_adapter *adapter, u8 *mac)
{
  #line 278 
  int i;
  #line 281 
  i = 0;
  #line 281 
  while (adapter->uc_macs > (unsigned int)i) {
    #line 282 
    if ((int)ether_addr_equal((u8 *)(& (adapter->uc_list + (unsigned long)i)->mac),
                       mac) != 0) {
      #line 284 
      *(adapter->pmac_id) = *(adapter->pmac_id + ((unsigned long)i + (unsigned long)1U));
      #line 285 
      return 0;
    }
    #line 281 
    i ++;
  }
  #line 289 
  return be_cmd_pmac_add(adapter,mac,(unsigned int)adapter->if_handle,
                        adapter->pmac_id,0U);
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_dev_mac_del(struct be_adapter *adapter, int pmac_id)
{
  #line 295 
  int i;
  #line 300 
  i = 0;
  #line 300 
  while (adapter->uc_macs > (unsigned int)i) {
    #line 301 
    if (*(adapter->pmac_id + ((unsigned long)i + (unsigned long)1U)) == (unsigned int)pmac_id) 
      #line 302 
      return;
    #line 300 
    i ++;
  }
  #line 304 
  be_cmd_pmac_del(adapter,(unsigned int)adapter->if_handle,pmac_id,0U);
  #line 305 
  return;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_mac_addr_set(struct net_device *netdev, void *p)
{
  #line 312 
  int status;
  #line 313 
  u8 mac[6U];
  #line 309 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 310 
  struct device *dev = & (adapter->pdev)->dev;
  #line 311 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 314 
  u32 old_pmac_id = *(adapter->pmac_id);
  #line 316 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 317 
                                                      return -99;
  #line 322 
  if ((int)ether_addr_equal((u8 *)(& addr->sa_data),(u8 *)(& adapter->dev_mac)) != 0) 
    #line 323 
    return 0;
  #line 328 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) && (unsigned int)adapter->virtfn != 0U) {
    #line 329 
    if (! check_privilege(adapter,64U)) 
                                        #line 330 
                                        return -1;
  }
  #line 333 
  if (! netif_running(netdev)) 
                               #line 334 
                               goto done;
  #line 342 
  cif_mutex_lock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 343 
  status = be_dev_mac_add(adapter,(u8 *)(& addr->sa_data));
  #line 344 
  if (status == 0) 
    #line 349 
    if (*(adapter->pmac_id) != old_pmac_id) 
                                            #line 350 
                                            be_dev_mac_del(adapter,(int)old_pmac_id);
  #line 353 
  cif_mutex_unlock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 357 
  status = be_cmd_get_active_mac(adapter,*(adapter->pmac_id),(u8 *)(& mac),(unsigned int)adapter->if_handle,(_Bool)1,0U);
  #line 359 
  if (status != 0) 
                   #line 360 
                   goto err;
  #line 365 
  if (! ether_addr_equal((u8 *)(& addr->sa_data),(u8 *)(& mac))) {
    #line 366 
    status = -1;
    #line 367 
    goto err;
  }
  #line 371 
  ether_addr_copy((u8 *)(& adapter->dev_mac),(u8 *)(& addr->sa_data));
  #line 372 
  done: 
        #line 372 
  ;
  #line 373 
  ether_addr_copy(netdev->dev_addr,(u8 *)(& addr->sa_data));
  #line 374 
  _dev_info(dev,(char *)"MAC address changed to %pM\n",(char *)(& addr->sa_data));
  #line 375 
  return 0;
  #line 376 
  err: 
       #line 376 
  ;
  #line 377 
  _dev_warn(dev,(char *)"MAC address change to %pM failed\n",(char *)(& addr->sa_data));
  #line 378 
  return status;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void *hw_stats_from_cmd(struct be_adapter *adapter)
{
  #line 384 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) {
    #line 385 
    struct be_cmd_resp_get_stats_v0 *cmd = (struct be_cmd_resp_get_stats_v0 *)adapter->stats_cmd.va;
    #line 387 
    return (void *)(& cmd->hw_stats);
  }
  else 
    #line 388 
    if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
      #line 389 
      struct be_cmd_resp_get_stats_v1 *cmd_0 = (struct be_cmd_resp_get_stats_v1 *)adapter->stats_cmd.va;
      #line 391 
      return (void *)(& cmd_0->hw_stats);
    }
    else {
      #line 393 
      struct be_cmd_resp_get_stats_v2 *cmd_1 = (struct be_cmd_resp_get_stats_v2 *)adapter->stats_cmd.va;
      #line 395 
      return (void *)(& cmd_1->hw_stats);
    }
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void *be_erx_stats_from_cmd(struct be_adapter *adapter)
{
  #line 402 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) {
    #line 403 
    struct be_hw_stats_v0 *hw_stats = hw_stats_from_cmd(adapter);
    #line 405 
    return (void *)(& hw_stats->erx);
  }
  else 
    #line 406 
    if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
      #line 407 
      struct be_hw_stats_v1 *hw_stats_0 = hw_stats_from_cmd(adapter);
      #line 409 
      return (void *)(& hw_stats_0->erx);
    }
    else {
      #line 411 
      struct be_hw_stats_v2 *hw_stats_1 = hw_stats_from_cmd(adapter);
      #line 413 
      return (void *)(& hw_stats_1->erx);
    }
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_be_v0_stats(struct be_adapter *adapter)
{
  #line 419 
  struct be_hw_stats_v0 *hw_stats = hw_stats_from_cmd(adapter);
  #line 420 
  struct be_pmem_stats *pmem_sts = & hw_stats->pmem;
  #line 421 
  struct be_rxf_stats_v0 *rxf_stats = & hw_stats->rxf;
  #line 422 
  struct be_port_rxf_stats_v0 *port_stats = & rxf_stats->port[adapter->port_num];
  #line 424 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  #line 426 
  swap_dws((void *)hw_stats,1060);
  #line 427 
  drvs->rx_pause_frames = port_stats->rx_pause_frames;
  #line 428 
  drvs->rx_crc_errors = port_stats->rx_crc_errors;
  #line 429 
  drvs->rx_control_frames = port_stats->rx_control_frames;
  #line 430 
  drvs->rx_in_range_errors = port_stats->rx_in_range_errors;
  #line 431 
  drvs->rx_frame_too_long = port_stats->rx_frame_too_long;
  #line 432 
  drvs->rx_dropped_runt = port_stats->rx_dropped_runt;
  #line 433 
  drvs->rx_ip_checksum_errs = port_stats->rx_ip_checksum_errs;
  #line 434 
  drvs->rx_tcp_checksum_errs = port_stats->rx_tcp_checksum_errs;
  #line 435 
  drvs->rx_udp_checksum_errs = port_stats->rx_udp_checksum_errs;
  #line 436 
  drvs->rxpp_fifo_overflow_drop = port_stats->rx_fifo_overflow;
  #line 437 
  drvs->rx_dropped_tcp_length = port_stats->rx_dropped_tcp_length;
  #line 438 
  drvs->rx_dropped_too_small = port_stats->rx_dropped_too_small;
  #line 439 
  drvs->rx_dropped_too_short = port_stats->rx_dropped_too_short;
  #line 440 
  drvs->rx_out_range_errors = port_stats->rx_out_range_errors;
  #line 441 
  drvs->rx_input_fifo_overflow_drop = port_stats->rx_input_fifo_overflow;
  #line 442 
  drvs->rx_dropped_header_too_small = port_stats->rx_dropped_header_too_small;
  #line 444 
  drvs->rx_address_filtered = port_stats->rx_address_filtered + port_stats->rx_vlan_filtered;
  #line 447 
  drvs->rx_alignment_symbol_errors = port_stats->rx_alignment_symbol_errors;
  #line 450 
  drvs->tx_pauseframes = port_stats->tx_pauseframes;
  #line 451 
  drvs->tx_controlframes = port_stats->tx_controlframes;
  #line 453 
  if (adapter->port_num != 0U) 
                               #line 454 
                               drvs->jabber_events = rxf_stats->port1_jabber_events; else 
                                                                    #line 456 
                                                                    drvs->jabber_events = rxf_stats->port0_jabber_events;
  #line 457 
  drvs->rx_drops_no_pbuf = rxf_stats->rx_drops_no_pbuf;
  #line 458 
  drvs->rx_drops_no_erx_descr = rxf_stats->rx_drops_no_erx_descr;
  #line 459 
  drvs->forwarded_packets = rxf_stats->forwarded_packets;
  #line 460 
  drvs->rx_drops_mtu = rxf_stats->rx_drops_mtu;
  #line 461 
  drvs->rx_drops_no_tpre_descr = rxf_stats->rx_drops_no_tpre_descr;
  #line 462 
  drvs->rx_drops_too_many_frags = rxf_stats->rx_drops_too_many_frags;
  #line 463 
  adapter->drv_stats.eth_red_drops = pmem_sts->eth_red_drops;
  #line 464 
  return;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_be_v1_stats(struct be_adapter *adapter)
{
  #line 468 
  struct be_hw_stats_v1 *hw_stats = hw_stats_from_cmd(adapter);
  #line 469 
  struct be_pmem_stats *pmem_sts = & hw_stats->pmem;
  #line 470 
  struct be_rxf_stats_v1 *rxf_stats = & hw_stats->rxf;
  #line 471 
  struct be_port_rxf_stats_v1 *port_stats = & rxf_stats->port[adapter->port_num];
  #line 473 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  #line 475 
  swap_dws((void *)hw_stats,1848);
  #line 476 
  drvs->pmem_fifo_overflow_drop = port_stats->pmem_fifo_overflow_drop;
  #line 477 
  drvs->rx_priority_pause_frames = port_stats->rx_priority_pause_frames;
  #line 478 
  drvs->rx_pause_frames = port_stats->rx_pause_frames;
  #line 479 
  drvs->rx_crc_errors = port_stats->rx_crc_errors;
  #line 480 
  drvs->rx_control_frames = port_stats->rx_control_frames;
  #line 481 
  drvs->rx_in_range_errors = port_stats->rx_in_range_errors;
  #line 482 
  drvs->rx_frame_too_long = port_stats->rx_frame_too_long;
  #line 483 
  drvs->rx_dropped_runt = port_stats->rx_dropped_runt;
  #line 484 
  drvs->rx_ip_checksum_errs = port_stats->rx_ip_checksum_errs;
  #line 485 
  drvs->rx_tcp_checksum_errs = port_stats->rx_tcp_checksum_errs;
  #line 486 
  drvs->rx_udp_checksum_errs = port_stats->rx_udp_checksum_errs;
  #line 487 
  drvs->rx_dropped_tcp_length = port_stats->rx_dropped_tcp_length;
  #line 488 
  drvs->rx_dropped_too_small = port_stats->rx_dropped_too_small;
  #line 489 
  drvs->rx_dropped_too_short = port_stats->rx_dropped_too_short;
  #line 490 
  drvs->rx_out_range_errors = port_stats->rx_out_range_errors;
  #line 491 
  drvs->rx_dropped_header_too_small = port_stats->rx_dropped_header_too_small;
  #line 493 
  drvs->rx_input_fifo_overflow_drop = port_stats->rx_input_fifo_overflow_drop;
  #line 495 
  drvs->rx_address_filtered = port_stats->rx_address_filtered;
  #line 496 
  drvs->rx_alignment_symbol_errors = port_stats->rx_alignment_symbol_errors;
  #line 498 
  drvs->rxpp_fifo_overflow_drop = port_stats->rxpp_fifo_overflow_drop;
  #line 499 
  drvs->tx_pauseframes = port_stats->tx_pauseframes;
  #line 500 
  drvs->tx_controlframes = port_stats->tx_controlframes;
  #line 501 
  drvs->tx_priority_pauseframes = port_stats->tx_priority_pauseframes;
  #line 502 
  drvs->jabber_events = port_stats->jabber_events;
  #line 503 
  drvs->rx_drops_no_pbuf = rxf_stats->rx_drops_no_pbuf;
  #line 504 
  drvs->rx_drops_no_erx_descr = rxf_stats->rx_drops_no_erx_descr;
  #line 505 
  drvs->forwarded_packets = rxf_stats->forwarded_packets;
  #line 506 
  drvs->rx_drops_mtu = rxf_stats->rx_drops_mtu;
  #line 507 
  drvs->rx_drops_no_tpre_descr = rxf_stats->rx_drops_no_tpre_descr;
  #line 508 
  drvs->rx_drops_too_many_frags = rxf_stats->rx_drops_too_many_frags;
  #line 509 
  adapter->drv_stats.eth_red_drops = pmem_sts->eth_red_drops;
  #line 510 
  return;
}

#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_be_v2_stats(struct be_adapter *adapter)
{
  #line 514 
  struct be_hw_stats_v2 *hw_stats = hw_stats_from_cmd(adapter);
  #line 515 
  struct be_pmem_stats *pmem_sts = & hw_stats->pmem;
  #line 516 
  struct be_rxf_stats_v2 *rxf_stats = & hw_stats->rxf;
  #line 517 
  struct be_port_rxf_stats_v2 *port_stats = & rxf_stats->port[adapter->port_num];
  #line 519 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  #line 521 
  swap_dws((void *)hw_stats,2680);
  #line 522 
  drvs->pmem_fifo_overflow_drop = port_stats->pmem_fifo_overflow_drop;
  #line 523 
  drvs->rx_priority_pause_frames = port_stats->rx_priority_pause_frames;
  #line 524 
  drvs->rx_pause_frames = port_stats->rx_pause_frames;
  #line 525 
  drvs->rx_crc_errors = port_stats->rx_crc_errors;
  #line 526 
  drvs->rx_control_frames = port_stats->rx_control_frames;
  #line 527 
  drvs->rx_in_range_errors = port_stats->rx_in_range_errors;
  #line 528 
  drvs->rx_frame_too_long = port_stats->rx_frame_too_long;
  #line 529 
  drvs->rx_dropped_runt = port_stats->rx_dropped_runt;
  #line 530 
  drvs->rx_ip_checksum_errs = port_stats->rx_ip_checksum_errs;
  #line 531 
  drvs->rx_tcp_checksum_errs = port_stats->rx_tcp_checksum_errs;
  #line 532 
  drvs->rx_udp_checksum_errs = port_stats->rx_udp_checksum_errs;
  #line 533 
  drvs->rx_dropped_tcp_length = port_stats->rx_dropped_tcp_length;
  #line 534 
  drvs->rx_dropped_too_small = port_stats->rx_dropped_too_small;
  #line 535 
  drvs->rx_dropped_too_short = port_stats->rx_dropped_too_short;
  #line 536 
  drvs->rx_out_range_errors = port_stats->rx_out_range_errors;
  #line 537 
  drvs->rx_dropped_header_too_small = port_stats->rx_dropped_header_too_small;
  #line 539 
  drvs->rx_input_fifo_overflow_drop = port_stats->rx_input_fifo_overflow_drop;
  #line 541 
  drvs->rx_address_filtered = port_stats->rx_address_filtered;
  #line 542 
  drvs->rx_alignment_symbol_errors = port_stats->rx_alignment_symbol_errors;
  #line 544 
  drvs->rxpp_fifo_overflow_drop = port_stats->rxpp_fifo_overflow_drop;
  #line 545 
  drvs->tx_pauseframes = port_stats->tx_pauseframes;
  #line 546 
  drvs->tx_controlframes = port_stats->tx_controlframes;
  #line 547 
  drvs->tx_priority_pauseframes = port_stats->tx_priority_pauseframes;
  #line 548 
  drvs->jabber_events = port_stats->jabber_events;
  #line 549 
  drvs->rx_drops_no_pbuf = rxf_stats->rx_drops_no_pbuf;
  #line 550 
  drvs->rx_drops_no_erx_descr = rxf_stats->rx_drops_no_erx_descr;
  #line 551 
  drvs->forwarded_packets = rxf_stats->forwarded_packets;
  #line 552 
  drvs->rx_drops_mtu = rxf_stats->rx_drops_mtu;
  #line 553 
  drvs->rx_drops_no_tpre_descr = rxf_stats->rx_drops_no_tpre_descr;
  #line 554 
  drvs->rx_drops_too_many_frags = rxf_stats->rx_drops_too_many_frags;
  #line 555 
  adapter->drv_stats.eth_red_drops = pmem_sts->eth_red_drops;
  #line 556 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    #line 557 
    drvs->rx_roce_bytes_lsd = port_stats->roce_bytes_received_lsd;
    #line 558 
    drvs->rx_roce_bytes_msd = port_stats->roce_bytes_received_msd;
    #line 559 
    drvs->rx_roce_frames = port_stats->roce_frames_received;
    #line 560 
    drvs->roce_drops_crc = port_stats->roce_drops_crc;
    #line 561 
    drvs->roce_drops_payload_len = port_stats->roce_drops_payload_len;
  }
  #line 564 
  return;
}

#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_lancer_stats(struct be_adapter *adapter)
{
  #line 568 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  #line 569 
  struct lancer_pport_stats *pport_stats = pport_stats_from_cmd(adapter);
  #line 571 
  swap_dws((void *)pport_stats,656);
  #line 572 
  drvs->rx_pause_frames = pport_stats->rx_pause_frames_lo;
  #line 573 
  drvs->rx_crc_errors = pport_stats->rx_crc_errors_lo;
  #line 574 
  drvs->rx_control_frames = pport_stats->rx_control_frames_lo;
  #line 575 
  drvs->rx_in_range_errors = pport_stats->rx_in_range_errors;
  #line 576 
  drvs->rx_frame_too_long = pport_stats->rx_frames_too_long_lo;
  #line 577 
  drvs->rx_dropped_runt = pport_stats->rx_dropped_runt;
  #line 578 
  drvs->rx_ip_checksum_errs = pport_stats->rx_ip_checksum_errors;
  #line 579 
  drvs->rx_tcp_checksum_errs = pport_stats->rx_tcp_checksum_errors;
  #line 580 
  drvs->rx_udp_checksum_errs = pport_stats->rx_udp_checksum_errors;
  #line 581 
  drvs->rx_dropped_tcp_length = pport_stats->rx_dropped_invalid_tcp_length;
  #line 583 
  drvs->rx_dropped_too_small = pport_stats->rx_dropped_too_small;
  #line 584 
  drvs->rx_dropped_too_short = pport_stats->rx_dropped_too_short;
  #line 585 
  drvs->rx_out_range_errors = pport_stats->rx_out_of_range_errors;
  #line 586 
  drvs->rx_dropped_header_too_small = pport_stats->rx_dropped_header_too_small;
  #line 588 
  drvs->rx_input_fifo_overflow_drop = pport_stats->rx_fifo_overflow;
  #line 589 
  drvs->rx_address_filtered = pport_stats->rx_address_filtered + pport_stats->rx_vlan_filtered;
  #line 592 
  drvs->rx_alignment_symbol_errors = pport_stats->rx_symbol_errors_lo;
  #line 593 
  drvs->rxpp_fifo_overflow_drop = pport_stats->rx_fifo_overflow;
  #line 594 
  drvs->tx_pauseframes = pport_stats->tx_pause_frames_lo;
  #line 595 
  drvs->tx_controlframes = pport_stats->tx_control_frames_lo;
  #line 596 
  drvs->jabber_events = pport_stats->rx_jabbers;
  #line 597 
  drvs->forwarded_packets = pport_stats->num_forwards_lo;
  #line 598 
  drvs->rx_drops_mtu = pport_stats->rx_drops_mtu_lo;
  #line 599 
  drvs->rx_drops_too_many_frags = pport_stats->rx_drops_too_many_frags_lo;
  #line 601 
  return;
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void accumulate_16bit_val(u32 *acc, u16 val)
{
  #line 607 
  bool wrapped = (_Bool)((unsigned int)val < (*acc & 65535U));
  #line 608 
  u32 newacc = (*acc & 4294901760U) + (unsigned int)val;
  #line 610 
  if ((int)wrapped != 0) 
                         #line 611 
                         newacc += 65536U;
  {
    #line 613 
    union __anonunion___u_2178 __u = {.__val = newacc};
    #line 612 
    __write_once_size((void *)acc,(void *)(& __u.__c),4);
    #line 612 
    u32 tmp = __u.__val;
  }
  #line 614 
  return;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_erx_stats(struct be_adapter *adapter, struct be_rx_obj *rxo, u32 erx_stat)
{
  #line 618 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
    #line 619 
    rxo->stats.rx_drops_no_frags = erx_stat; else 
                                                  #line 624 
                                                  accumulate_16bit_val(& rxo->stats.rx_drops_no_frags,(unsigned short)((int)((unsigned short)erx_stat)));
  #line 626 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
void be_parse_stats(struct be_adapter *adapter)
{
  #line 631 
  struct be_rx_obj *rxo;
  #line 632 
  int i;
  #line 633 
  u32 erx_stat;
  #line 630 
  struct be_erx_stats_v2 *erx = be_erx_stats_from_cmd(adapter);
  #line 635 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 636 
    populate_lancer_stats(adapter);
  else {
    #line 638 
    if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
      #line 639 
      populate_be_v0_stats(adapter);
    else 
      #line 640 
      if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) 
        #line 642 
        populate_be_v1_stats(adapter); else 
                                            #line 644 
                                            populate_be_v2_stats(adapter);
    #line 647 
    i = 0;
    #line 647 
    rxo = & adapter->rx_obj[i];
    #line 647 
    while ((int)adapter->num_rx_qs > i) {
      #line 648 
      erx_stat = erx->rx_drops_no_fragments[rxo->q.id];
      #line 649 
      populate_erx_stats(adapter,rxo,erx_stat);
      #line 647 
      i ++;
      #line 647 
      rxo ++;
    }
  }
  #line 652 
  return;
}

#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 659 
  struct be_rx_obj *rxo;
  #line 660 
  struct be_tx_obj *txo;
  #line 661 
  u64 pkts;
  #line 661 
  u64 bytes;
  #line 662 
  unsigned int start;
  #line 663 
  int i;
  #line 657 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 658 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  #line 665 
  i = 0;
  #line 665 
  rxo = & adapter->rx_obj[i];
  #line 665 
  while ((int)adapter->num_rx_qs > i) {
    {
      #line 666 
      struct be_rx_stats *rx_stats = & rxo->stats;
      #line 668 
      while (1) {
        #line 669 
        start = u64_stats_fetch_begin_irq(& rx_stats->sync);
        #line 670 
        pkts = rxo->stats.rx_pkts;
        #line 671 
        bytes = rxo->stats.rx_bytes;
        #line 672 
        if (! ((int)u64_stats_fetch_retry_irq(& rx_stats->sync,start) != 0)) 
          #line 668 
          break;
      }
      #line 673 
      stats->rx_packets += pkts;
      #line 674 
      stats->rx_bytes += bytes;
      #line 675 
      stats->multicast += (unsigned long long)rxo->stats.rx_mcast_pkts;
      #line 676 
      stats->rx_dropped += (unsigned long long)(rxo->stats.rx_drops_no_skbs + rxo->stats.rx_drops_no_frags);
    }
    #line 665 
    i ++;
    #line 665 
    rxo ++;
  }
  #line 680 
  i = 0;
  #line 680 
  txo = & adapter->tx_obj[i];
  #line 680 
  while ((int)adapter->num_tx_qs > i) {
    {
      #line 681 
      struct be_tx_stats *tx_stats = & txo->stats;
      #line 683 
      while (1) {
        #line 684 
        start = u64_stats_fetch_begin_irq(& tx_stats->sync);
        #line 685 
        pkts = txo->stats.tx_pkts;
        #line 686 
        bytes = txo->stats.tx_bytes;
        #line 687 
        if (! ((int)u64_stats_fetch_retry_irq(& tx_stats->sync,start) != 0)) 
          #line 683 
          break;
      }
      #line 688 
      stats->tx_packets += pkts;
      #line 689 
      stats->tx_bytes += bytes;
    }
    #line 680 
    i ++;
    #line 680 
    txo ++;
  }
  #line 693 
  stats->rx_errors = (unsigned long long)(((((((((drvs->rx_crc_errors + drvs->rx_alignment_symbol_errors) + drvs->rx_in_range_errors) + drvs->rx_out_range_errors) + drvs->rx_frame_too_long) + drvs->rx_dropped_too_small) + drvs->rx_dropped_too_short) + drvs->rx_dropped_header_too_small) + drvs->rx_dropped_tcp_length) + drvs->rx_dropped_runt);
  #line 705 
  stats->rx_length_errors = (unsigned long long)((drvs->rx_in_range_errors + drvs->rx_out_range_errors) + drvs->rx_frame_too_long);
  #line 709 
  stats->rx_crc_errors = (unsigned long long)drvs->rx_crc_errors;
  #line 712 
  stats->rx_frame_errors = (unsigned long long)drvs->rx_alignment_symbol_errors;
  #line 716 
  stats->rx_fifo_errors = (unsigned long long)((drvs->rxpp_fifo_overflow_drop + drvs->rx_input_fifo_overflow_drop) + drvs->rx_drops_no_pbuf);
  #line 719 
  return;
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
void be_link_status_update(struct be_adapter *adapter, u8 link_status)
{
  #line 735 
  char *tmp;
  #line 723 
  struct net_device *netdev = adapter->netdev;
  #line 725 
  if (((unsigned long)adapter->flags & 2UL) == 0UL) {
    #line 726 
    netif_carrier_off(netdev);
    #line 727 
    adapter->flags |= 2U;
  }
  #line 730 
  if ((unsigned int)link_status != 0U) 
                                       #line 731 
                                       netif_carrier_on(netdev); else 
                                                                   #line 733 
                                                                   netif_carrier_off(netdev);
  #line 735 
  if ((unsigned int)link_status != 0U) 
                                       #line 735 
                                       tmp = (char *)"Up"; else 
                                                                #line 735 
                                                                tmp = (char *)"Down";
  #line 735 
  ;
  #line 735 
  netdev_info(netdev,(char *)"Link is %s\n",tmp);
  #line 736 
  return;
}

#line 738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_gso_hdr_len(struct sk_buff *skb)
{
  #line 740 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 741 
    return (int)((unsigned int)skb_inner_transport_offset(skb) + inner_tcp_hdrlen(skb));
  }
  #line 743 
  return (int)((unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb));
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_stats_update(struct be_tx_obj *txo, struct sk_buff *skb)
{
  #line 749 
  unsigned int tmp_1;
  #line 751 
  unsigned int tmp_3;
  #line 748 
  struct be_tx_stats *stats = & txo->stats;
  #line 749 
  ;
  #line 749 
  if ((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs != 0) {
    #line 749 
    tmp_1 = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs);
  }
  else 
       #line 749 
       tmp_1 = 1U;
  #line 749 
  u32 tx_pkts = tmp_1;
  #line 751 
  if (tx_pkts > 1U) {
    #line 751 
    tmp_3 = (unsigned int)be_gso_hdr_len(skb) * (tx_pkts + 4294967295U);
  }
  else 
       #line 751 
       tmp_3 = 0U;
  #line 751 
  u32 dup_hdr_len = tmp_3;
  #line 753 
  u64_stats_init(& stats->sync);
  #line 754 
  (stats->tx_reqs) ++;
  #line 755 
  stats->tx_bytes += (unsigned long long)(skb->len + dup_hdr_len);
  #line 756 
  stats->tx_pkts += (unsigned long long)tx_pkts;
  #line 757 
  if ((unsigned int)skb->encapsulation != 0U && (unsigned int)skb->ip_summed == 3U) 
    #line 758 
    stats->tx_vxlan_offload_pkts += (unsigned long long)tx_pkts;
  #line 759 
  u64_stats_init(& stats->sync);
  #line 760 
  return;
}

#line 763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u32 skb_wrb_cnt(struct sk_buff *skb)
{
  #line 766 
  int tmp_0;
  #line 766 
  if (skb_headlen(skb) != 0U) 
                              #line 766 
                              tmp_0 = 2; else 
                                              #line 766 
                                              tmp_0 = 1;
  #line 766 
  ;
  #line 766 
  return (unsigned int)(tmp_0 + (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags);
}

#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void wrb_fill(struct be_eth_wrb *wrb, u64 addr, int len)
{
  #line 771 
  wrb->frag_pa_hi = (unsigned int)(addr >> 32);
  #line 772 
  wrb->frag_pa_lo = (unsigned int)addr;
  #line 773 
  wrb->frag_len = (unsigned int)len & 65535U;
  #line 774 
  wrb->rsvd0 = 0U;
  #line 775 
  return;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void wrb_fill_dummy(struct be_eth_wrb *wrb)
{
  #line 782 
  wrb->frag_pa_hi = 0U;
  #line 783 
  wrb->frag_pa_lo = 0U;
  #line 784 
  wrb->frag_len = 0U;
  #line 785 
  wrb->rsvd0 = 0U;
  #line 786 
  return;
}

#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static u16 be_get_tx_vlan_tag(struct be_adapter *adapter, struct sk_buff *skb)
{
  #line 791 
  u8 vlan_prio;
  #line 792 
  u16 vlan_tag;
  #line 794 
  vlan_tag = skb->vlan_tci;
  #line 795 
  vlan_prio = (unsigned char)((int)skb->vlan_tci >> 13);
  #line 797 
  if ((((int)adapter->vlan_prio_bmap >> (int)vlan_prio) & 1) == 0) 
                                                                   #line 798 
                                                                   vlan_tag = (unsigned short)(((int)vlan_tag & 8191) | (int)adapter->recommended_prio_bits);
  #line 801 
  return vlan_tag;
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 skb_inner_ip_proto(struct sk_buff *skb)
{
  #line 808 
  int tmp_2;
  #line 808 
  ;
  #line 808 
  if ((unsigned int)inner_ip_hdr(skb)->version == 4U) {
    #line 808 
    tmp_2 = (int)((unsigned short)inner_ip_hdr(skb)->protocol);
  }
  else {
    #line 808 
    tmp_2 = (int)((unsigned short)inner_ipv6_hdr(skb)->nexthdr);
  }
  #line 808 
  return (unsigned short)tmp_2;
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 skb_ip_proto(struct sk_buff *skb)
{
  #line 814 
  int tmp_2;
  #line 814 
  ;
  #line 814 
  if ((unsigned int)ip_hdr(skb)->version == 4U) {
    #line 814 
    tmp_2 = (int)((unsigned short)ip_hdr(skb)->protocol);
  }
  else {
    #line 814 
    tmp_2 = (int)((unsigned short)ipv6_hdr(skb)->nexthdr);
  }
  #line 814 
  return (unsigned short)tmp_2;
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_is_txq_full(struct be_tx_obj *txo)
{
  #line 819 
  ;
  #line 819 
  return (_Bool)((unsigned int)(atomic_read_0(& txo->q.used) + 30) >= txo->q.len);
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_can_txq_wake(struct be_tx_obj *txo)
{
  #line 824 
  ;
  #line 824 
  return (_Bool)((unsigned int)atomic_read_0(& txo->q.used) < txo->q.len / 2U);
}

#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_is_tx_compl_pending(struct be_tx_obj *txo)
{
  #line 829 
  ;
  #line 829 
  return (_Bool)(atomic_read_0(& txo->q.used) > (int)txo->pend_wrb_cnt);
}

#line 832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_get_wrb_params_from_skb(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  #line 836 
  u16 proto;
  #line 838 
  if ((int)skb_is_gso(skb) != 0) {
    #line 839 
    wrb_params->features |= 16U;
    #line 840 
    wrb_params->lso_mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 841 
    if ((int)skb_is_gso_v6(skb) != 0) 
      #line 841 
      if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
        #line 842 
        wrb_params->features |= 32U;
  }
  else 
    #line 843 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 844 
      if ((unsigned int)skb->encapsulation != 0U) {
        #line 845 
        wrb_params->features |= 2U;
        #line 846 
        proto = skb_inner_ip_proto(skb);
      }
      else 
           #line 848 
           proto = skb_ip_proto(skb);
      #line 850 
      if ((unsigned int)proto == 6U) 
                                     #line 851 
                                     wrb_params->features |= 4U;
      else 
        #line 852 
        if ((unsigned int)proto == 17U) 
                                        #line 853 
                                        wrb_params->features |= 8U;
    }
  #line 856 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 857 
    wrb_params->features |= 64U;
    #line 858 
    wrb_params->vlan_tag = be_get_tx_vlan_tag(adapter,skb);
  }
  #line 861 
  wrb_params->features |= 1U;
  #line 862 
  return;
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void wrb_fill_hdr(struct be_adapter *adapter, struct be_eth_hdr_wrb *hdr, struct be_wrb_params *wrb_params, struct sk_buff *skb)
{
  #line 869 
  memset((void *)hdr,0,16UL);
  #line 871 
  ;
  #line 871 
  ;
  #line 871 
  amap_set((void *)hdr,2U,amap_mask(1U),2U,wrb_params->features & 1U);
  #line 873 
  ;
  #line 873 
  ;
  #line 873 
  amap_set((void *)hdr,2U,amap_mask(1U),6U,(unsigned int)((unsigned long)wrb_params->features >> 1) & 1U);
  #line 875 
  ;
  #line 875 
  ;
  #line 875 
  amap_set((void *)hdr,2U,amap_mask(1U),8U,(unsigned int)((unsigned long)wrb_params->features >> 2) & 1U);
  #line 877 
  ;
  #line 877 
  ;
  #line 877 
  amap_set((void *)hdr,2U,amap_mask(1U),7U,(unsigned int)((unsigned long)wrb_params->features >> 3) & 1U);
  #line 880 
  ;
  #line 880 
  ;
  #line 880 
  amap_set((void *)hdr,2U,amap_mask(1U),9U,(unsigned int)((unsigned long)wrb_params->features >> 4) & 1U);
  #line 882 
  ;
  #line 882 
  ;
  #line 882 
  amap_set((void *)hdr,2U,amap_mask(1U),4U,(unsigned int)((unsigned long)wrb_params->features >> 5) & 1U);
  #line 884 
  ;
  #line 884 
  ;
  #line 884 
  amap_set((void *)hdr,2U,amap_mask(14U),18U,(unsigned int)wrb_params->lso_mss);
  #line 889 
  ;
  #line 889 
  ;
  #line 889 
  amap_set((void *)hdr,2U,amap_mask(1U),1U,(unsigned int)((unsigned long)wrb_params->features >> 7) & 1U);
  #line 891 
  ;
  #line 891 
  ;
  #line 891 
  amap_set((void *)hdr,2U,amap_mask(1U),10U,(unsigned int)((unsigned long)wrb_params->features >> 6) & 1U);
  #line 893 
  ;
  #line 893 
  ;
  #line 893 
  amap_set((void *)hdr,3U,amap_mask(16U),16U,(unsigned int)wrb_params->vlan_tag);
  #line 895 
  ;
  #line 895 
  amap_set((void *)hdr,2U,amap_mask(5U),13U,skb_wrb_cnt(skb));
  #line 896 
  ;
  #line 896 
  ;
  #line 896 
  amap_set((void *)hdr,3U,amap_mask(16U),0U,skb->len);
  #line 897 
  ;
  #line 897 
  ;
  #line 897 
  amap_set((void *)hdr,2U,amap_mask(1U),5U,(unsigned int)((unsigned long)wrb_params->features >> 8) & 1U);
  #line 898 
  return;
}

#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void unmap_tx_frag(struct device *dev, struct be_eth_wrb *wrb, bool unmap_single)
{
  #line 904 
  dma_addr_t dma;
  #line 905 
  u32 frag_len = wrb->frag_len;
  #line 908 
  dma = ((unsigned long long)wrb->frag_pa_hi << 32) | (unsigned long long)wrb->frag_pa_lo;
  #line 910 
  if (frag_len != 0U) 
    #line 911 
    if ((int)unmap_single != 0) 
                                #line 912 
                                dma_unmap_single_attrs(dev,dma,(unsigned long)frag_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 914 
                                                                    dma_unmap_page_attrs(dev,dma,(unsigned long)frag_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 915 
  return;
}

#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u32 be_tx_get_wrb_hdr(struct be_tx_obj *txo)
{
  #line 921 
  u32 head = txo->q.head;
  #line 923 
  queue_head_inc(& txo->q);
  #line 924 
  return head;
}

#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_setup_wrb_hdr(struct be_adapter *adapter, struct be_tx_obj *txo, struct be_wrb_params *wrb_params, struct sk_buff *skb, u16 head)
{
  #line 933 
  u32 num_frags = skb_wrb_cnt(skb);
  #line 934 
  struct be_queue_info *txq = & txo->q;
  #line 935 
  struct be_eth_hdr_wrb *hdr = queue_index_node(txq,(unsigned short)((int)head));
  #line 937 
  wrb_fill_hdr(adapter,hdr,wrb_params,skb);
  #line 938 
  swap_dws((void *)hdr,16);
  #line 940 
  if ((long)(txo->sent_skb_list[(int)head] != (struct sk_buff *)0) != 0L) {
    #line 941 
    ldv_inline_asm();
    #line 942 
    ldv_inline_asm();
    #line 943 
    ldv_inline_asm();
    #line 940 
    ;
  }
  #line 941 
  txo->sent_skb_list[(int)head] = skb;
  #line 942 
  txo->last_req_hdr = head;
  #line 943 
  atomic_add((int)num_frags,& txq->used);
  #line 944 
  txo->last_req_wrb_cnt = (unsigned short)num_frags;
  #line 945 
  txo->pend_wrb_cnt = (unsigned short)((int)txo->pend_wrb_cnt + (int)((unsigned short)num_frags));
  #line 946 
  return;
}

#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_setup_wrb_frag(struct be_tx_obj *txo, dma_addr_t busaddr, int len)
{
  #line 952 
  struct be_eth_wrb *wrb;
  #line 953 
  struct be_queue_info *txq = & txo->q;
  #line 955 
  wrb = (struct be_eth_wrb *)queue_head_node(txq);
  #line 956 
  wrb_fill(wrb,busaddr,len);
  #line 957 
  queue_head_inc(txq);
  #line 958 
  return;
}

#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_xmit_restore(struct be_adapter *adapter, struct be_tx_obj *txo, u32 head, bool map_single, u32 copied)
{
  #line 968 
  struct device *dev;
  #line 969 
  struct be_eth_wrb *wrb;
  #line 970 
  struct be_queue_info *txq = & txo->q;
  #line 972 
  dev = & (adapter->pdev)->dev;
  #line 973 
  txq->head = head;
  #line 976 
  queue_head_inc(txq);
  #line 977 
  while (copied != 0U) {
    #line 978 
    wrb = (struct be_eth_wrb *)queue_head_node(txq);
    #line 979 
    unmap_tx_frag(dev,wrb,(_Bool)((bool)((int)map_single) != 0));
    #line 980 
    map_single = (_Bool)0;
    #line 981 
    copied -= wrb->frag_len;
    #line 982 
    queue_head_inc(txq);
  }
  #line 985 
  txq->head = head;
  #line 986 
  return;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u32 be_xmit_enqueue(struct be_adapter *adapter, struct be_tx_obj *txo, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  #line 996 
  u32 i;
  #line 999 
  u32 head;
  #line 1000 
  dma_addr_t busaddr;
  #line 1001 
  int len;
  #line 996 
  u32 copied = 0U;
  #line 996 
  u32 wrb_cnt = skb_wrb_cnt(skb);
  #line 997 
  struct device *dev = & (adapter->pdev)->dev;
  #line 998 
  bool map_single = (_Bool)0;
  #line 1003 
  head = be_tx_get_wrb_hdr(txo);
  #line 1005 
  if (skb->len > skb->data_len) {
    #line 1006 
    len = (int)skb_headlen(skb);
    #line 1008 
    busaddr = dma_map_single_attrs(dev,(void *)skb->data,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1009 
    if (dma_mapping_error(dev,busaddr) != 0) 
                                             #line 1010 
                                             goto dma_err;
    #line 1011 
    map_single = (_Bool)1;
    #line 1012 
    be_tx_setup_wrb_frag(txo,busaddr,len);
    #line 1013 
    copied += (unsigned int)len;
  }
  #line 1016 
  i = 0U;
  #line 1016 
  while (1) {
    #line 1016 
    ;
    #line 1016 
    if (! ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 1016 
      break;
    {
      #line 1017 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 1018 
      len = (int)skb_frag_size(frag);
      #line 1020 
      busaddr = skb_frag_dma_map(dev,frag,0UL,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 1021 
      if (dma_mapping_error(dev,busaddr) != 0) 
                                               #line 1022 
                                               goto dma_err;
      #line 1023 
      be_tx_setup_wrb_frag(txo,busaddr,len);
      #line 1024 
      copied += (unsigned int)len;
    }
    #line 1016 
    i ++;
  }
  #line 1027 
  be_tx_setup_wrb_hdr(adapter,txo,wrb_params,skb,(unsigned short)((int)((unsigned short)head)));
  #line 1029 
  be_tx_stats_update(txo,skb);
  #line 1030 
  return wrb_cnt;
  #line 1032 
  dma_err: 
           #line 1032 
  ;
  #line 1033 
  (adapter->drv_stats.dma_map_errors) ++;
  #line 1034 
  be_xmit_restore(adapter,txo,head,(_Bool)((bool)((int)map_single) != 0),copied);
  #line 1035 
  return 0U;
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int qnq_async_evt_rcvd(struct be_adapter *adapter)
{
  #line 1040 
  return (int)adapter->flags & 128;
}

#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sk_buff *be_insert_vlan_in_pkt(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  #line 1048 
  bool insert_vlan = (_Bool)0;
  #line 1049 
  u16 vlan_tag = (unsigned short)0U;
  #line 1051 
  skb = skb_share_check(skb,2592U);
  #line 1052 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 1053 
                                                return skb;
  #line 1055 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1056 
    vlan_tag = be_get_tx_vlan_tag(adapter,skb);
    #line 1057 
    insert_vlan = (_Bool)1;
  }
  #line 1060 
  if (qnq_async_evt_rcvd(adapter) != 0) 
    #line 1060 
    if ((unsigned int)adapter->pvid != 0U) {
      #line 1061 
      if (! insert_vlan) {
        #line 1062 
        vlan_tag = adapter->pvid;
        #line 1063 
        insert_vlan = (_Bool)1;
      }
      #line 1068 
      wrb_params->features |= 128U;
    }
  #line 1071 
  if ((int)insert_vlan != 0) {
    #line 1072 
    skb = vlan_insert_tag_set_proto(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
    #line 1074 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                  #line 1075 
                                                  return skb;
    #line 1076 
    __vlan_hwaccel_clear_tag(skb);
  }
  #line 1080 
  if ((unsigned int)adapter->qnq_vid != 0U) {
    #line 1081 
    vlan_tag = adapter->qnq_vid;
    #line 1082 
    skb = vlan_insert_tag_set_proto(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
    #line 1084 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                  #line 1085 
                                                  return skb;
    #line 1086 
    wrb_params->features |= 128U;
  }
  #line 1089 
  return skb;
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_ipv6_exthdr_check(struct sk_buff *skb)
{
  #line 1094 
  struct ethhdr *eh = (struct ethhdr *)skb->data;
  #line 1095 
  u16 offset = (unsigned short)14U;
  #line 1097 
  if ((unsigned int)eh->h_proto == 56710U) {
    #line 1098 
    struct ipv6hdr *ip6h = (struct ipv6hdr *)(skb->data + (unsigned long)offset);
    #line 1100 
    offset = (unsigned short)((unsigned int)offset + 40U);
    #line 1101 
    if ((unsigned int)ip6h->nexthdr != 6U && (unsigned int)ip6h->nexthdr != 17U) {
      #line 1103 
      struct ipv6_opt_hdr *ehdr = (struct ipv6_opt_hdr *)(skb->data + (unsigned long)offset);
      #line 1107 
      if ((unsigned int)ehdr->hdrlen == 255U) 
                                              #line 1108 
                                              return (_Bool)1;
    }
  }
  #line 1111 
  return (_Bool)0;
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vlan_tag_tx_chk(struct be_adapter *adapter, struct sk_buff *skb)
{
  #line 1116 
  return (((unsigned int)skb->vlan_present != 0U || (unsigned int)adapter->pvid != 0U) || (unsigned int)adapter->qnq_vid != 0U) != 0;
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_ipv6_tx_stall_chk(struct be_adapter *adapter, struct sk_buff *skb)
{
  #line 1121 
  int tmp_0;
  #line 1121 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
    #line 1121 
    if ((int)be_ipv6_exthdr_check(skb) != 0) 
                                             #line 1121 
                                             tmp_0 = 1; else 
                                                             #line 1121 
                                                             tmp_0 = 0;
  }
  else 
       #line 1121 
       tmp_0 = 0;
  #line 1121 
  return tmp_0;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sk_buff *be_lancer_xmit_workarounds(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  #line 1130 
  unsigned int eth_hdr_len;
  #line 1131 
  struct iphdr *ip;
  #line 1168 
  int tmp_3;
  #line 1129 
  struct vlan_ethhdr *veh = (struct vlan_ethhdr *)skb->data;
  #line 1137 
  if ((unsigned int)__builtin_bswap16((unsigned short)((int)skb->protocol)) == 33024U) 
    #line 1137 
    eth_hdr_len = 18U; else 
                            #line 1137 
                            eth_hdr_len = 14U;
  #line 1139 
  if (skb->len <= 60U && (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) || (unsigned int)skb->vlan_present != 0U)) {
    #line 1140 
    if ((int)is_ipv4_pkt(skb) != 0) {
      #line 1142 
      ip = ip_hdr(skb);
      #line 1143 
      ;
      #line 1143 
      ;
      #line 1143 
      pskb_trim(skb,(unsigned int)__builtin_bswap16((unsigned short)((int)ip->tot_len)) + eth_hdr_len);
    }
  }
  #line 1149 
  if ((unsigned int)adapter->pvid != 0U && (unsigned int)veh->h_vlan_proto == 129U) 
    #line 1151 
    wrb_params->features |= 128U;
  #line 1157 
  if ((unsigned int)skb->ip_summed != 3U && (unsigned int)skb->vlan_present != 0U) {
    #line 1159 
    skb = be_insert_vlan_in_pkt(adapter,skb,wrb_params);
    #line 1160 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                  #line 1161 
                                                  goto err;
  }
  #line 1168 
  if ((long)(be_ipv6_tx_stall_chk(adapter,skb) != 0) != 0L) 
    #line 1168 
    if ((((long)((unsigned int)adapter->pvid != 0U) != 0L || (long)((unsigned int)adapter->qnq_vid != 0U) != 0L) != 0) != 0) 
      #line 1168 
      tmp_3 = 1; else 
                      #line 1168 
                      tmp_3 = 0;
  else 
       #line 1168 
       tmp_3 = 0;
  #line 1168 
  if (tmp_3 != 0) {
    #line 1168 
    if ((long)(qnq_async_evt_rcvd(adapter) == 0) != 0L) 
                                                        #line 1171 
                                                        goto tx_drop;
  }
  #line 1179 
  if (be_ipv6_tx_stall_chk(adapter,skb) != 0) {
    #line 1179 
    if (be_vlan_tag_tx_chk(adapter,skb) != 0) {
      #line 1181 
      skb = be_insert_vlan_in_pkt(adapter,skb,wrb_params);
      #line 1182 
      if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                    #line 1183 
                                                    goto err;
    }
  }
  #line 1186 
  return skb;
  #line 1187 
  tx_drop: 
           #line 1187 
  ;
  #line 1188 
  dev_kfree_skb_any(skb);
  #line 1189 
  err: 
       #line 1189 
  ;
  #line 1190 
  return (struct sk_buff *)0;
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sk_buff *be_xmit_workarounds(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  #line 1197 
  int err;
  #line 1204 
  if (skb->len <= 32U) {
    #line 1205 
    if (skb_put_padto(skb,36U) != 0) 
                                     #line 1206 
                                     return (struct sk_buff *)0;
  }
  #line 1209 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) {
    #line 1210 
    skb = be_lancer_xmit_workarounds(adapter,skb,wrb_params);
    #line 1211 
    if (skb == (struct sk_buff *)0) 
                                    #line 1212 
                                    return (struct sk_buff *)0;
  }
  {
    #line 1218 
    int __ret_warn_on = skb->len > 65527U;
    #line 1218 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1219 
      ldv_inline_asm();
      #line 1220 
      ldv_inline_asm();
    }
    #line 1218 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1219 
  err = pskb_trim(skb,65527U);
  {
    #line 1220 
    int __ret_warn_on_0 = err != 0;
    #line 1220 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1221 
      ldv_inline_asm();
      #line 1222 
      ldv_inline_asm();
    }
    #line 1220 
    long tmp_4 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1222 
  return skb;
}

#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_xmit_flush(struct be_adapter *adapter, struct be_tx_obj *txo)
{
  #line 1227 
  struct be_queue_info *txq = & txo->q;
  #line 1228 
  struct be_eth_hdr_wrb *hdr = queue_index_node(txq,(unsigned short)((int)txo->last_req_hdr));
  #line 1231 
  if ((hdr->dw[2] & 2U) == 0U) 
                               #line 1232 
                               hdr->dw[2] |= 3U;
  #line 1235 
  if (((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) && ((int)txo->pend_wrb_cnt & 1) != 0) {
    #line 1236 
    wrb_fill_dummy((struct be_eth_wrb *)queue_head_node(txq));
    #line 1237 
    queue_head_inc(txq);
    #line 1238 
    atomic_inc_0(& txq->used);
    #line 1239 
    txo->pend_wrb_cnt = (u16)((int)txo->pend_wrb_cnt + 1);
    #line 1240 
    hdr->dw[2] &= 4294713343U;
    #line 1242 
    hdr->dw[2] |= (unsigned int)(((int)txo->last_req_wrb_cnt + 1) << 13);
  }
  #line 1245 
  be_txq_notify(adapter,txo,(unsigned short)((int)txo->pend_wrb_cnt));
  #line 1246 
  txo->pend_wrb_cnt = (unsigned short)0U;
  #line 1247 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_send_pkt_to_bmc(struct be_adapter *adapter, struct sk_buff **skb)
{
  #line 1302 
  struct ethhdr *eh = (struct ethhdr *)(*skb)->data;
  #line 1303 
  bool os2bmc = (_Bool)0;
  #line 1305 
  if (((unsigned long)adapter->flags & 4096UL) == 0UL) 
                                                       #line 1306 
                                                       goto done;
  #line 1308 
  if (! is_multicast_ether_addr((u8 *)(& eh->h_dest))) 
                                                       #line 1309 
                                                       goto done;
  #line 1311 
  if (((unsigned long)adapter->bmc_filt_mask & 32768UL) == 0UL) {
    #line 1311 
    if ((int)is_multicast_ether_addr((u8 *)(& eh->h_dest)) != 0) {
      #line 1311 
      if (is_broadcast_ether_addr((u8 *)(& eh->h_dest))) 
                                                         #line 1311 
                                                         goto _LAND_1; else 
                                                                    #line 1311 
                                                                    goto _LOR;
    }
    else 
         #line 1311 
         goto _LAND_1;
  }
  else {
    #line 1311 
    _LAND_1: 
             #line 1311 
    ;
    #line 1311 
    if (((unsigned long)adapter->bmc_filt_mask & 128UL) == 0UL) {
      #line 1312 
      if ((int)is_broadcast_ether_addr((u8 *)(& eh->h_dest)) != 0) 
                                                                   #line 1311 
                                                                   goto _LOR; else 
                                                                    #line 1311 
                                                                    goto _LAND;
    }
    else 
      #line 1311 
      _LAND: 
             #line 1312 
             if ((unsigned int)(*skb)->protocol == 1544U && ((unsigned long)adapter->bmc_filt_mask & 1UL) != 0UL) {
               #line 1311 
               _LOR: {
                       #line 1314 
                       os2bmc = (_Bool)1;
                       #line 1315 
                       goto done;
                     }
             }
  }
  #line 1318 
  if ((unsigned int)(*skb)->protocol == 56710U) {
    #line 1319 
    struct ipv6hdr *hdr = ipv6_hdr(*skb);
    #line 1320 
    u8 nexthdr = hdr->nexthdr;
    #line 1322 
    if ((unsigned int)nexthdr == 58U) {
      #line 1323 
      struct icmp6hdr *icmp6 = icmp6_hdr(*skb);
      #line 1325 
      switch ((int)icmp6->icmp6_type) {
        #line 1326 
        case 134: 
                  #line 1326 
        ;
        #line 1327 
        os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 512UL) != 0UL);
        #line 1328 
        goto done;
        #line 1329 
        case 136: 
                  #line 1329 
        ;
        #line 1330 
        os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 256UL) != 0UL);
        #line 1331 
        goto done;
        #line 1332 
        default: 
                 #line 1332 
        ;
        #line 1333 
        break;
      }
    }
  }
  #line 1338 
  if ((unsigned int)is_udp_pkt(*skb) != 0U) {
    #line 1339 
    struct udphdr *udp = udp_hdr(*skb);
    #line 1341 
    switch ((int)__builtin_bswap16((unsigned short)((int)udp->dest))) {
      #line 1342 
      case 68: 
               #line 1342 
      ;
      #line 1343 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 2UL) != 0UL);
      #line 1344 
      goto done;
      #line 1345 
      case 67: 
               #line 1345 
      ;
      #line 1346 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 4UL) != 0UL);
      #line 1347 
      goto done;
      #line 1348 
      case 137: 
                #line 1348 
      ;
      #line 1349 
      case 138: 
                #line 1349 
      ;
      #line 1350 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 8UL) != 0UL);
      #line 1351 
      goto done;
      #line 1352 
      case 547: 
                #line 1352 
      ;
      #line 1353 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 1024UL) != 0UL);
      #line 1354 
      goto done;
      #line 1355 
      default: 
               #line 1355 
      ;
      #line 1356 
      break;
    }
  }
  #line 1359 
  done: 
        #line 1359 
  ;
  #line 1363 
  if ((int)os2bmc != 0) 
                        #line 1364 
                        *skb = be_insert_vlan_in_pkt(adapter,*skb,(struct be_wrb_params *)0);
  #line 1366 
  return os2bmc;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static netdev_tx_t be_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  #line 1375 
  int tmp_2;
  #line 1376 
  u16 wrb_cnt;
  #line 1371 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1372 
  u16 q_idx = skb_get_queue_mapping(skb);
  #line 1373 
  struct be_tx_obj *txo = & adapter->tx_obj[(int)q_idx];
  #line 1374 
  struct be_wrb_params wrb_params = {.features = 0U, .vlan_tag = (unsigned short)0, .lso_mss = (unsigned short)0};
  #line 1375 
  if ((int)netdev_xmit_more() != 0) 
                                    #line 1375 
                                    tmp_2 = 0; else 
                                                    #line 1375 
                                                    tmp_2 = 1;
  #line 1375 
  bool flush = (_Bool)(tmp_2 != 0);
  #line 1378 
  skb = be_xmit_workarounds(adapter,skb,& wrb_params);
  #line 1379 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 1380 
                                                goto drop;
  #line 1382 
  be_get_wrb_params_from_skb(adapter,skb,& wrb_params);
  #line 1384 
  wrb_cnt = (unsigned short)be_xmit_enqueue(adapter,txo,skb,& wrb_params);
  #line 1385 
  if ((long)((unsigned int)wrb_cnt == 0U) != 0L) {
    #line 1386 
    dev_kfree_skb_any(skb);
    #line 1387 
    goto drop;
  }
  #line 1393 
  if ((int)be_send_pkt_to_bmc(adapter,& skb) != 0) {
    #line 1394 
    wrb_params.features |= 256U;
    #line 1395 
    wrb_cnt = (unsigned short)be_xmit_enqueue(adapter,txo,skb,& wrb_params);
    #line 1396 
    if ((long)((unsigned int)wrb_cnt == 0U) != 0L) 
                                                   #line 1397 
                                                   goto drop; else 
                                                                   #line 1399 
                                                                   skb_get(skb);
  }
  #line 1402 
  if ((int)be_is_txq_full(txo) != 0) {
    #line 1403 
    netif_stop_subqueue(netdev,(unsigned short)((int)q_idx));
    #line 1404 
    (txo->stats.tx_stops) ++;
  }
  #line 1407 
  if ((int)flush != 0) 
                       #line 1408 
                       be_xmit_flush(adapter,txo);
  else {
    #line 1407 
    if ((int)__netif_subqueue_stopped(netdev,(unsigned short)((int)q_idx)) != 0) 
      #line 1408 
      be_xmit_flush(adapter,txo);
  }
  #line 1410 
  return NETDEV_TX_OK;
  #line 1411 
  drop: 
        #line 1411 
  ;
  #line 1412 
  (txo->stats.tx_drv_drops) ++;
  #line 1414 
  if ((int)flush != 0 && (unsigned int)txo->pend_wrb_cnt != 0U) 
                                                                #line 1415 
                                                                be_xmit_flush(adapter,txo);
  #line 1417 
  return NETDEV_TX_OK;
}

#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_timeout(struct net_device *netdev)
{
  #line 1424 
  struct be_tx_obj *txo;
  #line 1425 
  struct sk_buff *skb;
  #line 1426 
  struct tcphdr *tcphdr;
  #line 1427 
  struct udphdr *udphdr;
  #line 1428 
  u32 *entry;
  #line 1429 
  int status;
  #line 1430 
  int i;
  #line 1430 
  int j;
  #line 1422 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1423 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1432 
  i = 0;
  #line 1432 
  txo = & adapter->tx_obj[i];
  #line 1432 
  while ((int)adapter->num_tx_qs > i) {
    {
      #line 1433 
      ;
      #line 1433 
      ;
      #line 1433 
      ;
      #line 1433 
      ;
      #line 1433 
      ;
      #line 1433 
      _dev_info(dev,(char *)"TXQ Dump: %d H: %d T: %d used: %d, qid: 0x%x\n",i,txo->q.head,txo->q.tail,atomic_read_0(& txo->q.used),txo->q.id);
      #line 1437 
      entry = (u32 *)txo->q.dma_mem.va;
      #line 1438 
      j = 0;
      #line 1438 
      while (j <= 8191) {
        #line 1439 
        if (((*(entry + (unsigned long)j) != 0U || *(entry + ((unsigned long)j + (unsigned long)1U)) != 0U) || *(entry + ((unsigned long)j + (unsigned long)2U)) != 0U) || *(entry + ((unsigned long)j + (unsigned long)3U)) != 0U) 
          #line 1441 
          _dev_info(dev,(char *)"Entry %d 0x%x 0x%x 0x%x 0x%x\n",j,*(entry + (unsigned long)j),*(entry + ((unsigned long)j + (unsigned long)1U)),*(entry + ((unsigned long)j + (unsigned long)2U)),*(entry + ((unsigned long)j + (unsigned long)3U)));
        #line 1438 
        j += 4;
      }
      #line 1447 
      entry = (u32 *)txo->cq.dma_mem.va;
      #line 1448 
      ;
      #line 1448 
      ;
      #line 1448 
      ;
      #line 1448 
      ;
      #line 1448 
      _dev_info(dev,(char *)"TXCQ Dump: %d  H: %d T: %d used: %d\n",i,txo->cq.head,txo->cq.tail,atomic_read_0(& txo->cq.used));
      #line 1451 
      j = 0;
      #line 1451 
      while (j <= 4095) {
        #line 1452 
        if (((*(entry + (unsigned long)j) != 0U || *(entry + ((unsigned long)j + (unsigned long)1U)) != 0U) || *(entry + ((unsigned long)j + (unsigned long)2U)) != 0U) || *(entry + ((unsigned long)j + (unsigned long)3U)) != 0U) 
          #line 1454 
          _dev_info(dev,(char *)"Entry %d 0x%x 0x%x 0x%x 0x%x\n",j,*(entry + (unsigned long)j),*(entry + ((unsigned long)j + (unsigned long)1U)),*(entry + ((unsigned long)j + (unsigned long)2U)),*(entry + ((unsigned long)j + (unsigned long)3U)));
        #line 1451 
        j += 4;
      }
      #line 1460 
      j = 0;
      #line 1460 
      while (j <= 2047) {
        #line 1461 
        if (txo->sent_skb_list[j] != (struct sk_buff *)0) {
          #line 1462 
          skb = txo->sent_skb_list[j];
          #line 1463 
          ;
          #line 1463 
          if ((unsigned int)ip_hdr(skb)->protocol == 6U) {
            #line 1464 
            tcphdr = tcp_hdr(skb);
            #line 1465 
            ;
            #line 1465 
            _dev_info(dev,(char *)"TCP source port %d\n",(int)__builtin_bswap16((unsigned short)((int)tcphdr->source)));
            #line 1467 
            ;
            #line 1467 
            _dev_info(dev,(char *)"TCP dest port %d\n",(int)__builtin_bswap16((unsigned short)((int)tcphdr->dest)));
            #line 1469 
            ;
            #line 1469 
            _dev_info(dev,(char *)"TCP sequence num %d\n",(int)__builtin_bswap16((unsigned short)((int)((unsigned short)tcphdr->seq))));
            #line 1471 
            ;
            #line 1471 
            _dev_info(dev,(char *)"TCP ack_seq %d\n",(int)__builtin_bswap16((unsigned short)((int)((unsigned short)tcphdr->ack_seq))));
          }
          else {
            #line 1473 
            ;
            #line 1473 
            if ((unsigned int)ip_hdr(skb)->protocol == 17U) {
              #line 1475 
              udphdr = udp_hdr(skb);
              #line 1476 
              ;
              #line 1476 
              _dev_info(dev,(char *)"UDP source port %d\n",(int)__builtin_bswap16((unsigned short)((int)udphdr->source)));
              #line 1478 
              ;
              #line 1478 
              _dev_info(dev,(char *)"UDP dest port %d\n",(int)__builtin_bswap16((unsigned short)((int)udphdr->dest)));
            }
          }
          #line 1481 
          _dev_info(dev,(char *)"skb[%d] %p len %d proto 0x%x\n",j,skb,skb->len,(int)skb->protocol);
        }
        #line 1460 
        j ++;
      }
    }
    #line 1432 
    i ++;
    #line 1432 
    txo ++;
  }
  #line 1487 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    #line 1488 
    _dev_info(dev,(char *)"Initiating reset due to tx timeout\n");
    #line 1489 
    _dev_info(dev,(char *)"Resetting adapter\n");
    #line 1490 
    status = lancer_physdev_ctrl(adapter,2U);
    #line 1492 
    if (status != 0) 
                     #line 1493 
                     _dev_err(dev,(char *)"Reset failed .. Reboot server\n");
  }
  #line 1495 
  return;
}

#line 1497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_in_all_promisc(struct be_adapter *adapter)
{
  #line 1499 
  return (_Bool)((adapter->if_flags & 648U) == 648U);
}

#line 1503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vlan_promisc(struct be_adapter *adapter)
{
  #line 1506 
  int status;
  #line 1505 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1508 
  if ((adapter->if_flags & 128U) != 0U) 
                                        #line 1509 
                                        return 0;
  #line 1511 
  status = be_cmd_rx_filter(adapter,128U,1U);
  #line 1512 
  if (status == 0) {
    #line 1513 
    _dev_info(dev,(char *)"Enabled VLAN promiscuous mode\n");
    #line 1514 
    adapter->if_flags |= 128U;
  }
  else 
       #line 1516 
       _dev_err(dev,(char *)"Failed to enable VLAN promiscuous mode\n");
  #line 1518 
  return status;
}

#line 1521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_clear_vlan_promisc(struct be_adapter *adapter)
{
  #line 1524 
  int status;
  #line 1523 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1526 
  status = be_cmd_rx_filter(adapter,128U,0U);
  #line 1527 
  if (status == 0) {
    #line 1528 
    _dev_info(dev,(char *)"Disabling VLAN promiscuous mode\n");
    #line 1529 
    adapter->if_flags &= 4294967167U;
  }
  #line 1531 
  return status;
}

#line 1538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vid_config(struct be_adapter *adapter)
{
  #line 1541 
  u16 vids[64U];
  #line 1540 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1542 
  u16 num = (unsigned short)0U;
  #line 1542 
  u16 i = (unsigned short)0U;
  #line 1543 
  int status = 0;
  #line 1546 
  if (((adapter->netdev)->flags & 256U) != 0U) 
                                               #line 1547 
                                               return 0;
  #line 1549 
  if ((int)adapter->vlans_added > (int)adapter->res.max_vlans) {
    #line 1550 
    return be_set_vlan_promisc(adapter);
  }
  #line 1552 
  if ((adapter->if_flags & 128U) != 0U) {
    #line 1553 
    status = be_clear_vlan_promisc(adapter);
    #line 1554 
    if (status != 0) 
                     #line 1555 
                     return status;
  }
  #line 1558 
  i = (unsigned short)cif_find_first_bit((unsigned long *)(& adapter->vids),4096UL);
  #line 1558 
  while ((unsigned int)i <= 4095U) {
    #line 1559 
    u16 tmp_2;
    #line 1559 
    tmp_2 = num;
    #line 1559 
    num = (u16)((int)num + 1);
    #line 1559 
    vids[(int)tmp_2] = i;
    #line 1558 
    i = (unsigned short)cif_find_next_bit((unsigned long *)(& adapter->vids),4096UL,
                          (unsigned long)((int)i + 1));
  }
  #line 1561 
  status = be_cmd_vlan_config(adapter,(unsigned int)adapter->if_handle,(u16 *)(& vids),(unsigned int)num,0U);
  #line 1562 
  if (status != 0) {
    #line 1563 
    _dev_err(dev,(char *)"Setting HW VLAN filtering failed\n");
    #line 1565 
    if (status > 0 && (((unsigned int)(status >> 16) & 255U) == 171U || ((unsigned int)(status >> 16) & 255U) == 22U)) {
      #line 1568 
      return be_set_vlan_promisc(adapter);
    }
  }
  #line 1570 
  return status;
}

#line 1573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vlan_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1575 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1576 
  int status = 0;
  #line 1578 
  cif_mutex_lock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 1581 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) && (unsigned int)vid == 0U) 
    #line 1582 
    goto done;
  #line 1584 
  if ((int)test_bit((long)vid,(unsigned long *)(& adapter->vids)) != 0) 
    #line 1585 
    goto done;
  #line 1587 
  cif_set_bit((long)vid,(unsigned long *)(& adapter->vids));
  #line 1588 
  adapter->vlans_added = (u16)((int)adapter->vlans_added + 1);
  #line 1590 
  status = be_vid_config(adapter);
  #line 1591 
  done: 
        #line 1591 
  ;
  #line 1592 
  cif_mutex_unlock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 1593 
  return status;
}

#line 1596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vlan_rem_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1598 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1599 
  int status = 0;
  #line 1601 
  cif_mutex_lock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 1604 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) && (unsigned int)vid == 0U) 
    #line 1605 
    goto done;
  #line 1607 
  if (! test_bit((long)vid,(unsigned long *)(& adapter->vids))) 
                                                                #line 1608 
                                                                goto done;
  #line 1610 
  cif_clear_bit((long)vid,(unsigned long *)(& adapter->vids));
  #line 1611 
  adapter->vlans_added = (u16)((int)adapter->vlans_added - 1);
  #line 1613 
  status = be_vid_config(adapter);
  #line 1614 
  done: 
        #line 1614 
  ;
  #line 1615 
  cif_mutex_unlock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 1616 
  return status;
}

#line 1619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_all_promisc(struct be_adapter *adapter)
{
  #line 1621 
  be_cmd_rx_filter(adapter,648U,1U);
  #line 1622 
  adapter->if_flags |= 648U;
  #line 1623 
  return;
}

#line 1625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_mc_promisc(struct be_adapter *adapter)
{
  #line 1627 
  int status;
  #line 1629 
  if ((adapter->if_flags & 512U) != 0U) 
                                        #line 1630 
                                        return;
  #line 1632 
  status = be_cmd_rx_filter(adapter,512U,1U);
  #line 1633 
  if (status == 0) 
                   #line 1634 
                   adapter->if_flags |= 512U;
  #line 1635 
  return;
}

#line 1637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_uc_promisc(struct be_adapter *adapter)
{
  #line 1639 
  int status;
  #line 1641 
  if ((adapter->if_flags & 8U) != 0U) 
                                      #line 1642 
                                      return;
  #line 1644 
  status = be_cmd_rx_filter(adapter,8U,1U);
  #line 1645 
  if (status == 0) 
                   #line 1646 
                   adapter->if_flags |= 8U;
  #line 1647 
  return;
}

#line 1649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_clear_uc_promisc(struct be_adapter *adapter)
{
  #line 1651 
  int status;
  #line 1653 
  if ((adapter->if_flags & 8U) == 0U) 
                                      #line 1654 
                                      return;
  #line 1656 
  status = be_cmd_rx_filter(adapter,8U,0U);
  #line 1657 
  if (status == 0) 
                   #line 1658 
                   adapter->if_flags &= 4294967287U;
  #line 1659 
  return;
}

#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_uc_list_update(struct net_device *netdev, unsigned char *addr)
{
  #line 1669 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1671 
  adapter->update_uc_list = (_Bool)1;
  #line 1672 
  return 0;
}

#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_mc_list_update(struct net_device *netdev, unsigned char *addr)
{
  #line 1678 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1680 
  adapter->update_mc_list = (_Bool)1;
  #line 1681 
  return 0;
}

#line 1684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_mc_list(struct be_adapter *adapter)
{
  #line 1687 
  struct netdev_hw_addr *ha;
  #line 1689 
  int status;
  #line 1686 
  struct net_device *netdev = adapter->netdev;
  #line 1688 
  bool mc_promisc = (_Bool)0;
  #line 1691 
  netif_addr_lock_bh(netdev);
  #line 1692 
  __dev_mc_sync(netdev,& be_mc_list_update,& be_mc_list_update);
  #line 1694 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 1695 
                                    adapter->update_mc_list = (_Bool)0;
  else 
    #line 1696 
    if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)adapter->res.max_mcast_mac) {
      #line 1701 
      mc_promisc = (_Bool)1;
      #line 1702 
      adapter->update_mc_list = (_Bool)0;
    }
    else 
      #line 1703 
      if ((adapter->if_flags & 512U) != 0U) 
                                            #line 1707 
                                            adapter->update_mc_list = (_Bool)1;
  #line 1710 
  if ((int)adapter->update_mc_list != 0) {
    #line 1714 
    void *__mptr;
    #line 1711 
    int i = 0;
    #line 1714 
    __mptr = (void *)netdev->mc.list.next;
    #line 1714 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 1714 
    while (& ha->list != & netdev->mc.list) {
      #line 1714 
      void *__mptr_0;
      #line 1715 
      ether_addr_copy((u8 *)(& (adapter->mc_list + (unsigned long)i)->mac),(u8 *)(& ha->addr));
      #line 1716 
      i ++;
      #line 1714 
      __mptr_0 = (void *)ha->list.next;
      #line 1714 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
    #line 1718 
    adapter->mc_count = (unsigned int)netdev->mc.count;
  }
  #line 1720 
  netif_addr_unlock_bh(netdev);
  #line 1722 
  if ((int)mc_promisc != 0) 
                            #line 1723 
                            be_set_mc_promisc(adapter);
  else 
    #line 1724 
    if ((int)adapter->update_mc_list != 0) {
      #line 1725 
      status = be_cmd_rx_filter(adapter,4096U,1U);
      #line 1726 
      if (status == 0) 
                       #line 1727 
                       adapter->if_flags &= 4294966783U; else 
                                                              #line 1729 
                                                              be_set_mc_promisc(adapter);
      #line 1731 
      adapter->update_mc_list = (_Bool)0;
    }
  #line 1733 
  return;
}

#line 1735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_clear_mc_list(struct be_adapter *adapter)
{
  #line 1737 
  struct net_device *netdev = adapter->netdev;
  #line 1739 
  __dev_mc_unsync(netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 1740 
  be_cmd_rx_filter(adapter,4096U,0U);
  #line 1741 
  adapter->mc_count = 0U;
  #line 1742 
  return;
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_uc_mac_add(struct be_adapter *adapter, int uc_idx)
{
  #line 1746 
  if ((int)ether_addr_equal((u8 *)(& (adapter->uc_list + (unsigned long)uc_idx)->mac),
                       (u8 *)(& adapter->dev_mac)) != 0) {
    #line 1747 
    *(adapter->pmac_id + ((unsigned long)uc_idx + (unsigned long)1U)) = *(adapter->pmac_id);
    #line 1748 
    return 0;
  }
  #line 1751 
  return be_cmd_pmac_add(adapter,
                        (u8 *)(& (adapter->uc_list + (unsigned long)uc_idx)->mac),
                        (unsigned int)adapter->if_handle,
                        adapter->pmac_id + ((unsigned long)uc_idx + (unsigned long)1U),
                        0U);
}

#line 1756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_uc_mac_del(struct be_adapter *adapter, int pmac_id)
{
  #line 1758 
  if (*(adapter->pmac_id) == (unsigned int)pmac_id) 
                                                    #line 1759 
                                                    return;
  #line 1761 
  be_cmd_pmac_del(adapter,(unsigned int)adapter->if_handle,pmac_id,0U);
  #line 1762 
  return;
}

#line 1764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_uc_list(struct be_adapter *adapter)
{
  #line 1767 
  struct netdev_hw_addr *ha;
  #line 1769 
  int i;
  #line 1766 
  struct net_device *netdev = adapter->netdev;
  #line 1768 
  bool uc_promisc = (_Bool)0;
  #line 1769 
  int curr_uc_macs = 0;
  #line 1771 
  netif_addr_lock_bh(netdev);
  #line 1772 
  __dev_uc_sync(netdev,& be_uc_list_update,& be_uc_list_update);
  #line 1774 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 1775 
                                    adapter->update_uc_list = (_Bool)0;
  else 
    #line 1776 
    if ((int)adapter->res.max_uc_mac <= netdev->uc.count) {
      #line 1777 
      uc_promisc = (_Bool)1;
      #line 1778 
      adapter->update_uc_list = (_Bool)0;
    }
    else 
      #line 1779 
      if ((adapter->if_flags & 8U) != 0U) 
                                          #line 1783 
                                          adapter->update_uc_list = (_Bool)1;
  #line 1786 
  if ((int)adapter->update_uc_list != 0) {
    #line 1789 
    void *__mptr;
    #line 1788 
    i = 0;
    #line 1789 
    __mptr = (void *)netdev->uc.list.next;
    #line 1789 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 1789 
    while (& ha->list != & netdev->uc.list) {
      #line 1789 
      void *__mptr_0;
      #line 1790 
      ether_addr_copy((u8 *)(& (adapter->uc_list + (unsigned long)i)->mac),(u8 *)(& ha->addr));
      #line 1791 
      i ++;
      #line 1789 
      __mptr_0 = (void *)ha->list.next;
      #line 1789 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
    #line 1793 
    curr_uc_macs = netdev->uc.count;
  }
  #line 1795 
  netif_addr_unlock_bh(netdev);
  #line 1797 
  if ((int)uc_promisc != 0) 
                            #line 1798 
                            be_set_uc_promisc(adapter);
  else 
    #line 1799 
    if ((int)adapter->update_uc_list != 0) {
      #line 1800 
      be_clear_uc_promisc(adapter);
      #line 1802 
      i = 0;
      #line 1802 
      while (adapter->uc_macs > (unsigned int)i) {
        #line 1803 
        be_uc_mac_del(adapter,(int)*(adapter->pmac_id + ((unsigned long)i + (unsigned long)1U)));
        #line 1802 
        i ++;
      }
      #line 1805 
      i = 0;
      #line 1805 
      while (i < curr_uc_macs) {
        #line 1806 
        be_uc_mac_add(adapter,i);
        #line 1805 
        i ++;
      }
      #line 1807 
      adapter->uc_macs = (unsigned int)curr_uc_macs;
      #line 1808 
      adapter->update_uc_list = (_Bool)0;
    }
  #line 1810 
  return;
}

#line 1812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_clear_uc_list(struct be_adapter *adapter)
{
  #line 1815 
  int i;
  #line 1814 
  struct net_device *netdev = adapter->netdev;
  #line 1817 
  __dev_uc_unsync(netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 1818 
  i = 0;
  #line 1818 
  while (adapter->uc_macs > (unsigned int)i) {
    #line 1819 
    be_uc_mac_del(adapter,(int)*(adapter->pmac_id + ((unsigned long)i + (unsigned long)1U)));
    #line 1818 
    i ++;
  }
  #line 1821 
  adapter->uc_macs = 0U;
  #line 1822 
  return;
}

#line 1824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void __be_set_rx_mode(struct be_adapter *adapter)
{
  #line 1826 
  struct net_device *netdev = adapter->netdev;
  #line 1828 
  cif_mutex_lock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 1830 
  if ((netdev->flags & 256U) != 0U) {
    #line 1831 
    if (! be_in_all_promisc(adapter)) 
                                      #line 1832 
                                      be_set_all_promisc(adapter);
  }
  else {
    #line 1833 
    if ((int)be_in_all_promisc(adapter) != 0) 
                                              #line 1838 
                                              be_vid_config(adapter);
  }
  #line 1841 
  be_set_uc_list(adapter);
  #line 1842 
  be_set_mc_list(adapter);
  #line 1844 
  cif_mutex_unlock_rx_filter_lock_of_be_adapter(& adapter->rx_filter_lock);
  #line 1845 
  return;
}

#line 1847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_work_set_rx_mode(struct work_struct *work)
{
  #line 1850 
  void *__mptr;
  #line 1850 
  __mptr = (void *)work;
  #line 1849 
  struct be_cmd_work *cmd_work = ((struct be_cmd_work *)__mptr);
  #line 1852 
  __be_set_rx_mode(cmd_work->adapter);
  #line 1853 
  kfree((void *)cmd_work);
  #line 1854 
  return;
}

#line 1856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  #line 1860 
  int status;
  #line 1858 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1859 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 1862 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) 
                                                    #line 1863 
                                                    return -1;
  #line 1865 
  if (is_valid_ether_addr(mac)) {
    #line 1865 
    if ((int)adapter->num_vfs <= vf) 
                                     #line 1866 
                                     return -22;
  }
  else 
       #line 1866 
       return -22;
  #line 1871 
  if ((int)ether_addr_equal(mac,(u8 *)(& vf_cfg->mac_addr)) != 0) 
                                                                  #line 1872 
                                                                  return 0;
  #line 1874 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    #line 1875 
    be_cmd_pmac_del(adapter,(unsigned int)vf_cfg->if_handle,vf_cfg->pmac_id,(unsigned int)(vf + 1));
    #line 1878 
    status = be_cmd_pmac_add(adapter,mac,(unsigned int)vf_cfg->if_handle,(u32 *)(& vf_cfg->pmac_id),(unsigned int)(vf + 1));
  }
  else 
       #line 1881 
       status = be_cmd_set_mac(adapter,mac,vf_cfg->if_handle,(unsigned int)(vf + 1));
  #line 1885 
  if (status != 0) {
    #line 1888 
    int tmp_2;
    #line 1886 
    _dev_err(& (adapter->pdev)->dev,(char *)"MAC %pM set on VF %d Failed: %#x",mac,vf,status);
    #line 1888 
    if (status <= 0) 
                     #line 1888 
                     tmp_2 = status; else 
                                          #line 1888 
                                          tmp_2 = -5;
    #line 1888 
    return tmp_2;
  }
  #line 1891 
  ether_addr_copy((u8 *)(& vf_cfg->mac_addr),mac);
  #line 1893 
  return 0;
}

#line 1896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *vi)
{
  #line 1899 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1900 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 1902 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) 
                                                    #line 1903 
                                                    return -1;
  #line 1905 
  if ((int)adapter->num_vfs <= vf) 
                                   #line 1906 
                                   return -22;
  #line 1908 
  vi->vf = (unsigned int)vf;
  #line 1909 
  vi->max_tx_rate = vf_cfg->tx_rate;
  #line 1910 
  vi->min_tx_rate = 0U;
  #line 1911 
  vi->vlan = (unsigned int)vf_cfg->vlan_tag & 4095U;
  #line 1912 
  vi->qos = (unsigned int)((int)vf_cfg->vlan_tag >> 13);
  #line 1913 
  memcpy((void *)(& vi->mac),(void *)(& vf_cfg->mac_addr),6UL);
  #line 1914 
  vi->linkstate = (adapter->vf_cfg + (unsigned long)vf)->plink_tracking;
  #line 1915 
  vi->spoofchk = (unsigned int)(adapter->vf_cfg + (unsigned long)vf)->spoofchk;
  #line 1917 
  return 0;
}

#line 1920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_tvt(struct be_adapter *adapter, int vf, u16 vlan)
{
  #line 1923 
  u16 vids[64U];
  #line 1925 
  int status;
  #line 1922 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 1924 
  int vf_if_id = vf_cfg->if_handle;
  #line 1928 
  status = be_cmd_set_hsw_config(adapter,(unsigned short)((int)vlan),(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_if_id)),(unsigned short)0,(unsigned char)0);
  #line 1929 
  if (status != 0) 
                   #line 1930 
                   return status;
  #line 1933 
  vids[0] = (unsigned short)0U;
  #line 1934 
  status = be_cmd_vlan_config(adapter,(unsigned int)vf_if_id,(u16 *)(& vids),1U,(unsigned int)(vf + 1));
  #line 1935 
  if (status == 0) 
                   #line 1936 
                   _dev_info(& (adapter->pdev)->dev,(char *)"Cleared guest VLANs on VF%d",vf);
  #line 1940 
  if ((vf_cfg->privileges & 64U) != 0U) {
    #line 1941 
    status = be_cmd_set_fn_privileges(adapter,vf_cfg->privileges & 4294967231U,(unsigned int)(vf + 1));
    #line 1943 
    if (status == 0) 
                     #line 1944 
                     vf_cfg->privileges &= 4294967231U;
  }
  #line 1946 
  return 0;
}

#line 1949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_clear_vf_tvt(struct be_adapter *adapter, int vf)
{
  #line 1953 
  int status;
  #line 1951 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 1952 
  struct device *dev = & (adapter->pdev)->dev;
  #line 1956 
  status = be_cmd_set_hsw_config(adapter,(unsigned short)65535,(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_cfg->if_handle)),(unsigned short)0,(unsigned char)0);
  #line 1958 
  if (status != 0) 
                   #line 1959 
                   return status;
  #line 1962 
  if ((vf_cfg->privileges & 64U) == 0U) {
    #line 1963 
    status = be_cmd_set_fn_privileges(adapter,vf_cfg->privileges | 64U,(unsigned int)(vf + 1));
    #line 1965 
    if (status == 0) {
      #line 1966 
      vf_cfg->privileges |= 64U;
      #line 1967 
      _dev_info(dev,(char *)"VF%d: FILTMGMT priv enabled",vf);
    }
  }
  #line 1971 
  _dev_info(dev,(char *)"Disable/re-enable i/f in VM to clear Transparent VLAN tag");
  #line 1973 
  return 0;
}

#line 1976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos, __be16 vlan_proto)
{
  #line 1981 
  int status;
  #line 1979 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1980 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 1983 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) 
                                                    #line 1984 
                                                    return -1;
  #line 1986 
  if ((int)adapter->num_vfs <= vf || ((unsigned int)vlan > 4095U || (unsigned int)qos > 7U)) 
    #line 1987 
    return -22;
  #line 1989 
  if ((unsigned int)vlan_proto != 129U) 
                                        #line 1990 
                                        return -93;
  #line 1992 
  if ((unsigned int)vlan != 0U || (unsigned int)qos != 0U) {
    #line 1993 
    vlan = (unsigned short)(((int)qos << 13) | (int)vlan);
    #line 1994 
    status = be_set_vf_tvt(adapter,vf,(unsigned short)((int)vlan));
  }
  else 
       #line 1996 
       status = be_clear_vf_tvt(adapter,vf);
  #line 1999 
  if (status != 0) {
    #line 2003 
    int tmp_0;
    #line 2000 
    _dev_err(& (adapter->pdev)->dev,(char *)"VLAN %d config on VF %d failed : %#x\n",(int)vlan,vf,status);
    #line 2003 
    if (status <= 0) 
                     #line 2003 
                     tmp_0 = status; else 
                                          #line 2003 
                                          tmp_0 = -5;
    #line 2003 
    return tmp_0;
  }
  #line 2006 
  vf_cfg->vlan_tag = vlan;
  #line 2007 
  return 0;
}

#line 2010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_tx_rate(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate)
{
  #line 2015 
  int percent_rate;
  #line 2017 
  u8 link_status;
  #line 2069 
  int tmp_0;
  #line 2013 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 2014 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2015 
  int status = 0;
  #line 2016 
  u16 link_speed = (unsigned short)0U;
  #line 2019 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) 
                                                    #line 2020 
                                                    return -1;
  #line 2022 
  if ((int)adapter->num_vfs <= vf) 
                                   #line 2023 
                                   return -22;
  #line 2025 
  if (min_tx_rate != 0) 
                        #line 2026 
                        return -22;
  #line 2028 
  if (max_tx_rate == 0) 
                        #line 2029 
                        goto config_qos;
  #line 2031 
  status = be_cmd_link_status_query(adapter,& link_speed,& link_status,0U);
  #line 2033 
  if (status != 0) 
                   #line 2034 
                   goto err;
  #line 2036 
  if ((unsigned int)link_status == 0U) {
    #line 2037 
    _dev_err(dev,(char *)"TX-rate setting not allowed when link is down\n");
    #line 2038 
    status = -100;
    #line 2039 
    goto err;
  }
  #line 2042 
  if (max_tx_rate <= 99 || (int)link_speed < max_tx_rate) {
    #line 2043 
    _dev_err(dev,(char *)"TX-rate must be between 100 and %d Mbps\n",(int)link_speed);
    #line 2045 
    status = -22;
    #line 2046 
    goto err;
  }
  #line 2050 
  percent_rate = (int)((unsigned int)link_speed / 100U);
  #line 2051 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && max_tx_rate % percent_rate != 0) {
    #line 2052 
    _dev_err(dev,(char *)"TX-rate must be a multiple of %d Mbps\n",percent_rate);
    #line 2054 
    status = -22;
    #line 2055 
    goto err;
  }
  #line 2058 
  config_qos: 
              #line 2058 
  ;
  #line 2059 
  status = be_cmd_config_qos(adapter,(unsigned int)max_tx_rate,(unsigned short)((int)link_speed),(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
  #line 2060 
  if (status != 0) 
                   #line 2061 
                   goto err;
  #line 2063 
  (adapter->vf_cfg + (unsigned long)vf)->tx_rate = (unsigned int)max_tx_rate;
  #line 2064 
  return 0;
  #line 2066 
  err: 
       #line 2066 
  ;
  #line 2067 
  _dev_err(dev,(char *)"TX-rate setting of %dMbps on VF%d failed\n",max_tx_rate,vf);
  #line 2069 
  if (status <= 0) 
                   #line 2069 
                   tmp_0 = status; else 
                                        #line 2069 
                                        tmp_0 = -5;
  #line 2069 
  return tmp_0;
}

#line 2072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_link_state(struct net_device *netdev, int vf, int link_state)
{
  #line 2076 
  int status;
  #line 2075 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 2078 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) 
                                                    #line 2079 
                                                    return -1;
  #line 2081 
  if ((int)adapter->num_vfs <= vf) 
                                   #line 2082 
                                   return -22;
  #line 2084 
  status = be_cmd_set_logical_link_config(adapter,link_state,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
  #line 2085 
  if (status != 0) {
    #line 2088 
    int tmp_0;
    #line 2086 
    _dev_err(& (adapter->pdev)->dev,(char *)"Link state change on VF %d failed: %#x\n",vf,status);
    #line 2088 
    if (status <= 0) 
                     #line 2088 
                     tmp_0 = status; else 
                                          #line 2088 
                                          tmp_0 = -5;
    #line 2088 
    return tmp_0;
  }
  #line 2091 
  (adapter->vf_cfg + (unsigned long)vf)->plink_tracking = (unsigned int)link_state;
  #line 2093 
  return 0;
}

#line 2096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_spoofchk(struct net_device *netdev, int vf, bool enable)
{
  #line 2100 
  u8 spoofchk;
  #line 2101 
  int status;
  #line 2098 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 2099 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 2103 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) 
                                                    #line 2104 
                                                    return -1;
  #line 2106 
  if ((int)adapter->num_vfs <= vf) 
                                   #line 2107 
                                   return -22;
  #line 2109 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    #line 2110 
    return -95;
  #line 2112 
  if ((int)vf_cfg->spoofchk == (int)enable) 
                                            #line 2113 
                                            return 0;
  #line 2115 
  if ((int)enable != 0) 
                        #line 2115 
                        spoofchk = (unsigned char)2U; else 
                                                           #line 2115 
                                                           spoofchk = (unsigned char)3U;
  #line 2117 
  status = be_cmd_set_hsw_config(adapter,(unsigned short)0,(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_cfg->if_handle)),(unsigned short)0,(unsigned char)((int)spoofchk));
  #line 2119 
  if (status != 0) {
    #line 2122 
    int tmp_0;
    #line 2120 
    _dev_err(& (adapter->pdev)->dev,(char *)"Spoofchk change on VF %d failed: %#x\n",vf,status);
    #line 2122 
    if (status <= 0) 
                     #line 2122 
                     tmp_0 = status; else 
                                          #line 2122 
                                          tmp_0 = -5;
    #line 2122 
    return tmp_0;
  }
  #line 2125 
  vf_cfg->spoofchk = enable;
  #line 2126 
  return 0;
}

#line 2129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_aic_update(struct be_aic_obj *aic, u64 rx_pkts, u64 tx_pkts, ulong now)
{
  #line 2132 
  aic->rx_pkts_prev = rx_pkts;
  #line 2133 
  aic->tx_reqs_prev = tx_pkts;
  #line 2134 
  aic->jiffies = now;
  #line 2135 
  return;
}

#line 2137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_new_eqd(struct be_eq_obj *eqo)
{
  #line 2190 
  unsigned int tmp_5;
  #line 2191 
  unsigned int __UNIQUE_ID___x584;
  #line 2191 
  unsigned int tmp_7;
  #line 2190 
  unsigned int __UNIQUE_ID___x582;
  #line 2140 
  int eqd;
  #line 2140 
  int start;
  #line 2141 
  struct be_aic_obj *aic;
  #line 2142 
  struct be_rx_obj *rxo;
  #line 2143 
  struct be_tx_obj *txo;
  #line 2145 
  ulong now;
  #line 2146 
  u32 pps;
  #line 2146 
  u32 delta;
  #line 2147 
  int i;
  #line 2139 
  struct be_adapter *adapter = eqo->adapter;
  #line 2144 
  u64 rx_pkts = 0ULL;
  #line 2144 
  u64 tx_pkts = 0ULL;
  #line 2149 
  aic = & adapter->aic_obj[(int)eqo->idx];
  #line 2150 
  if (! adapter->aic_enabled) {
    #line 2151 
    if (aic->jiffies != 0UL) 
                             #line 2152 
                             aic->jiffies = 0UL;
    #line 2153 
    eqd = (int)aic->et_eqd;
    #line 2154 
    return eqd;
  }
  #line 2157 
  i = (int)eqo->idx;
  #line 2157 
  rxo = & adapter->rx_obj[i];
  #line 2157 
  while ((int)adapter->num_rx_qs > i) {
    #line 2158 
    while (1) {
      {
        #line 2159 
        start = (int)u64_stats_fetch_begin_irq(& rxo->stats.sync);
        #line 2160 
        rx_pkts = rxo->stats.rx_pkts + rx_pkts;
      }
      #line 2161 
      if (! ((int)u64_stats_fetch_retry_irq(& rxo->stats.sync,(unsigned int)start) != 0)) 
        #line 2158 
        break;
    }
    #line 2157 
    i = (int)adapter->num_evt_qs + i;
    #line 2157 
    rxo += (unsigned long)adapter->num_evt_qs;
  }
  #line 2164 
  i = (int)eqo->idx;
  #line 2164 
  txo = & adapter->tx_obj[i];
  #line 2164 
  while ((int)adapter->num_tx_qs > i) {
    #line 2165 
    while (1) {
      {
        #line 2166 
        start = (int)u64_stats_fetch_begin_irq(& txo->stats.sync);
        #line 2167 
        tx_pkts = txo->stats.tx_reqs + tx_pkts;
      }
      #line 2168 
      if (! ((int)u64_stats_fetch_retry_irq(& txo->stats.sync,(unsigned int)start) != 0)) 
        #line 2165 
        break;
    }
    #line 2164 
    i = (int)adapter->num_evt_qs + i;
    #line 2164 
    txo += (unsigned long)adapter->num_evt_qs;
  }
  #line 2172 
  now = jiffies;
  #line 2173 
  if (aic->jiffies == 0UL) 
                           #line 2173 
                           goto _LOR;
  else {
    {
      #line 2173 
      unsigned long __dummy;
      #line 2173 
      ulong __dummy2;
      }
    #line 2173 
    if (1 != 0) {
      {
        #line 2173 
        unsigned long __dummy_0;
        #line 2173 
        ulong __dummy2_0;
        }
      #line 2173 
      if (1 != 0) {
        #line 2173 
        if ((long)(now - aic->jiffies) < 0L) 
                                             #line 2173 
                                             goto _LOR; else 
                                                             #line 2173 
                                                             goto _LAND_0;
      }
      else 
           #line 2173 
           goto _LAND_0;
    }
    else {
      #line 2173 
      _LAND_0: 
               #line 2173 
      ;
      #line 2173 
      if (aic->rx_pkts_prev > rx_pkts) 
                                       #line 2173 
                                       goto _LOR;
      else 
        #line 2174 
        if (aic->tx_reqs_prev > tx_pkts) {
          #line 2173 
          _LOR: {
                  #line 2176 
                  be_aic_update(aic,rx_pkts,tx_pkts,now);
                  #line 2177 
                  return (int)aic->prev_eqd;
                }
        }
    }
  }
  #line 2180 
  delta = jiffies_to_msecs(now - aic->jiffies);
  #line 2181 
  if (delta == 0U) 
                   #line 2182 
                   return (int)aic->prev_eqd;
  #line 2184 
  pps = (((unsigned int)rx_pkts - (unsigned int)aic->rx_pkts_prev) * 1000U) / delta + (((unsigned int)tx_pkts - (unsigned int)aic->tx_reqs_prev) * 1000U) / delta;
  #line 2186 
  eqd = (int)(pps / 15000U << 2);
  #line 2188 
  if (eqd <= 7) 
                #line 2189 
                eqd = 0;
  {
    #line 2190 
    __UNIQUE_ID___x582 = (unsigned int)eqd;
    #line 2190 
    unsigned int __UNIQUE_ID___y583 = aic->max_eqd;
    #line 2190 
    if (__UNIQUE_ID___x582 < __UNIQUE_ID___y583) 
                                                 #line 2190 
                                                 tmp_5 = __UNIQUE_ID___x582; else 
                                                                    #line 2190 
                                                                    tmp_5 = __UNIQUE_ID___y583;
    }
  #line 2190 
  eqd = (int)tmp_5;
  {
    #line 2191 
    __UNIQUE_ID___x584 = (unsigned int)eqd;
    #line 2191 
    unsigned int __UNIQUE_ID___y585 = aic->min_eqd;
    #line 2191 
    if (__UNIQUE_ID___x584 > __UNIQUE_ID___y585) 
                                                 #line 2191 
                                                 tmp_7 = __UNIQUE_ID___x584; else 
                                                                    #line 2191 
                                                                    tmp_7 = __UNIQUE_ID___y585;
    }
  #line 2191 
  eqd = (int)tmp_7;
  #line 2193 
  be_aic_update(aic,rx_pkts,tx_pkts,now);
  #line 2195 
  return eqd;
}

#line 2199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u32 be_get_eq_delay_mult_enc(struct be_eq_obj *eqo)
{
  #line 2204 
  int eqd;
  #line 2205 
  u32 mult_enc;
  #line 2201 
  struct be_adapter *adapter = eqo->adapter;
  #line 2202 
  struct be_aic_obj *aic = & adapter->aic_obj[(int)eqo->idx];
  #line 2203 
  ulong now = jiffies;
  #line 2207 
  if (! adapter->aic_enabled) 
                              #line 2208 
                              return 0U;
  #line 2210 
  if (jiffies_to_msecs(now - aic->jiffies) == 0U) 
                                                  #line 2211 
                                                  eqd = (int)aic->prev_eqd; else 
                                                                    #line 2213 
                                                                    eqd = be_get_new_eqd(eqo);
  #line 2215 
  if (eqd > 100) 
                 #line 2216 
                 mult_enc = 1U;
  else 
    #line 2217 
    if (eqd > 60) 
                  #line 2218 
                  mult_enc = 2U;
    else 
      #line 2219 
      if (eqd > 20) 
                    #line 2220 
                    mult_enc = 3U; else 
                                        #line 2222 
                                        mult_enc = 0U;
  #line 2224 
  aic->prev_eqd = (unsigned int)eqd;
  #line 2226 
  return mult_enc;
}

#line 2229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
void be_eqd_update(struct be_adapter *adapter, bool force_update)
{
  #line 2231 
  struct be_set_eqd set_eqd[32U];
  #line 2232 
  struct be_aic_obj *aic;
  #line 2233 
  struct be_eq_obj *eqo;
  #line 2234 
  int i;
  #line 2234 
  int eqd;
  #line 2234 
  int num = 0;
  #line 2236 
  i = 0;
  #line 2236 
  eqo = & adapter->eq_obj[i];
  #line 2236 
  while ((int)adapter->num_evt_qs > i) {
    #line 2237 
    aic = & adapter->aic_obj[(int)eqo->idx];
    #line 2238 
    eqd = be_get_new_eqd(eqo);
    #line 2239 
    if ((int)force_update != 0 || aic->prev_eqd != (unsigned int)eqd) {
      #line 2240 
      set_eqd[num].delay_multiplier = (unsigned int)((eqd * 65) / 100);
      #line 2241 
      set_eqd[num].eq_id = eqo->q.id;
      #line 2242 
      aic->prev_eqd = (unsigned int)eqd;
      #line 2243 
      num ++;
    }
    #line 2236 
    i ++;
    #line 2236 
    eqo ++;
  }
  #line 2247 
  if (num != 0) 
                #line 2248 
                be_cmd_modify_eqd(adapter,(struct be_set_eqd *)(& set_eqd),num);
  #line 2249 
  return;
}

#line 2251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_stats_update(struct be_rx_obj *rxo, struct be_rx_compl_info *rxcp)
{
  #line 2254 
  struct be_rx_stats *stats = & rxo->stats;
  #line 2256 
  u64_stats_init(& stats->sync);
  #line 2257 
  (stats->rx_compl) ++;
  #line 2258 
  stats->rx_bytes += (unsigned long long)rxcp->pkt_size;
  #line 2259 
  (stats->rx_pkts) ++;
  #line 2260 
  if ((unsigned int)rxcp->tunneled != 0U) 
                                          #line 2261 
                                          (stats->rx_vxlan_offload_pkts) ++;
  #line 2262 
  if ((unsigned int)rxcp->pkt_type == 1U) 
                                          #line 2263 
                                          (stats->rx_mcast_pkts) ++;
  #line 2264 
  if ((unsigned int)rxcp->err != 0U) 
                                     #line 2265 
                                     (stats->rx_compl_err) ++;
  #line 2266 
  u64_stats_init(& stats->sync);
  #line 2267 
  return;
}

#line 2269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool csum_passed(struct be_rx_compl_info *rxcp)
{
  #line 2275 
  return (_Bool)((((((unsigned int)rxcp->tcpf != 0U || (unsigned int)rxcp->udpf != 0U) && (unsigned int)rxcp->l4_csum != 0U) && ((unsigned int)rxcp->ip_csum != 0U || (unsigned int)rxcp->ipv6 != 0U)) && (unsigned int)rxcp->err == 0U) != 0);
}

#line 2278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct be_rx_page_info *get_rx_page_info(struct be_rx_obj *rxo)
{
  #line 2281 
  struct be_rx_page_info *rx_page_info;
  #line 2280 
  struct be_adapter *adapter = rxo->adapter;
  #line 2282 
  struct be_queue_info *rxq = & rxo->q;
  #line 2283 
  u32 frag_idx = rxq->tail;
  #line 2285 
  rx_page_info = & rxo->page_info_tbl[frag_idx];
  #line 2286 
  if ((long)(rx_page_info->page == (struct page *)0) != 0L) {
    #line 2287 
    ldv_inline_asm();
    #line 2288 
    ldv_inline_asm();
    #line 2289 
    ldv_inline_asm();
    #line 2286 
    ;
  }
  #line 2288 
  if ((int)rx_page_info->last_frag != 0) {
    #line 2289 
    dma_unmap_page_attrs(& (adapter->pdev)->dev,rx_page_info->bus,(unsigned long)adapter->big_page_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 2292 
    rx_page_info->last_frag = (_Bool)0;
  }
  else 
       #line 2294 
       dma_sync_single_for_cpu(& (adapter->pdev)->dev,rx_page_info->bus,(unsigned long)rx_frag_size,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 2299 
  queue_tail_inc(rxq);
  #line 2300 
  atomic_dec_0(& rxq->used);
  #line 2301 
  return rx_page_info;
}

#line 2305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_compl_discard(struct be_rx_obj *rxo, struct be_rx_compl_info *rxcp)
{
  #line 2308 
  struct be_rx_page_info *page_info;
  #line 2309 
  u16 i;
  #line 2309 
  u16 num_rcvd = (unsigned short)rxcp->num_rcvd;
  #line 2311 
  i = (unsigned short)0U;
  #line 2311 
  while ((int)i < (int)num_rcvd) {
    #line 2312 
    page_info = get_rx_page_info(rxo);
    #line 2313 
    put_page(page_info->page);
    #line 2314 
    memset((void *)page_info,0,24UL);
    #line 2311 
    i = (u16)((int)i + 1);
  }
  #line 2316 
  return;
}

#line 2322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void skb_fill_rx_data(struct be_rx_obj *rxo, struct sk_buff *skb, struct be_rx_compl_info *rxcp)
{
  #line 2335 
  u16 __UNIQUE_ID___x587;
  #line 2335 
  int tmp_0;
  #line 2325 
  struct be_rx_page_info *page_info;
  #line 2326 
  u16 i;
  #line 2326 
  u16 j;
  #line 2327 
  u16 hdr_len;
  #line 2327 
  u16 curr_frag_len;
  #line 2327 
  u16 remaining;
  #line 2328 
  u8 *start;
  #line 2330 
  page_info = get_rx_page_info(rxo);
  #line 2331 
  start = (u8 *)(lowmem_page_address(page_info->page) + (unsigned long)page_info->page_offset);
  #line 2332 
  __builtin_prefetch((void const *)((void *)start));
  {
    #line 2335 
    __UNIQUE_ID___x587 = rxcp->pkt_size;
    #line 2335 
    ushort __UNIQUE_ID___y588 = rx_frag_size;
    #line 2335 
    if ((int)__UNIQUE_ID___x587 < (int)__UNIQUE_ID___y588) 
                                                           #line 2335 
                                                           tmp_0 = (int)__UNIQUE_ID___x587; else 
                                                                    #line 2335 
                                                                    tmp_0 = (int)__UNIQUE_ID___y588;
    }
  #line 2335 
  curr_frag_len = (unsigned short)tmp_0;
  #line 2337 
  skb->len = (unsigned int)curr_frag_len;
  #line 2338 
  if ((unsigned int)curr_frag_len <= 64U) {
    #line 2339 
    memcpy((void *)skb->data,(void *)start,(unsigned long)curr_frag_len);
    #line 2341 
    put_page(page_info->page);
    #line 2342 
    skb->data_len = 0U;
    #line 2343 
    skb->tail += (unsigned int)curr_frag_len;
  }
  else {
    #line 2345 
    hdr_len = (unsigned short)14U;
    #line 2346 
    memcpy((void *)skb->data,(void *)start,(unsigned long)hdr_len);
    #line 2347 
    ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)1U;
    #line 2348 
    skb_frag_set_page(skb,0,page_info->page);
    #line 2349 
    ;
    #line 2349 
    skb_frag_off_set(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0],(unsigned int)((int)page_info->page_offset + (int)hdr_len));
    #line 2351 
    ;
    #line 2351 
    skb_frag_size_set(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0],(unsigned int)((int)curr_frag_len - (int)hdr_len));
    #line 2353 
    skb->data_len = (unsigned int)((int)curr_frag_len - (int)hdr_len);
    #line 2354 
    skb->truesize += (unsigned int)rx_frag_size;
    #line 2355 
    skb->tail += (unsigned int)hdr_len;
  }
  #line 2357 
  page_info->page = (struct page *)0;
  #line 2359 
  if ((int)rxcp->pkt_size <= (int)rx_frag_size) {
    #line 2360 
    if ((long)((unsigned int)rxcp->num_rcvd != 1U) != 0L) {
      #line 2361 
      ldv_inline_asm();
      #line 2362 
      ldv_inline_asm();
      #line 2363 
      ldv_inline_asm();
      #line 2360 
      ;
    }
    #line 2361 
    return;
  }
  #line 2365 
  remaining = (unsigned short)((int)rxcp->pkt_size - (int)curr_frag_len);
  #line 2366 
  i = (unsigned short)1U;
  #line 2366 
  j = (unsigned short)0U;
  #line 2366 
  while ((int)((unsigned short)rxcp->num_rcvd) > (int)i) {
    {
      #line 2368 
      u16 __UNIQUE_ID___x590;
      #line 2368 
      int tmp_5;
      #line 2367 
      page_info = get_rx_page_info(rxo);
      {
        #line 2368 
        __UNIQUE_ID___x590 = remaining;
        #line 2368 
        ushort __UNIQUE_ID___y591 = rx_frag_size;
        #line 2368 
        if ((int)__UNIQUE_ID___x590 < (int)__UNIQUE_ID___y591) 
                                                               #line 2368 
                                                               tmp_5 = (int)__UNIQUE_ID___x590; else 
                                                                    #line 2368 
                                                                    tmp_5 = (int)__UNIQUE_ID___y591;
        }
      #line 2368 
      curr_frag_len = (unsigned short)tmp_5;
      #line 2371 
      if ((unsigned int)page_info->page_offset == 0U) {
        #line 2373 
        j = (u16)((int)j + 1);
        #line 2374 
        skb_frag_set_page(skb,(int)j,page_info->page);
        #line 2375 
        ;
        #line 2375 
        skb_frag_off_set(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)j],(unsigned int)page_info->page_offset);
        #line 2377 
        skb_frag_size_set(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)j],0U);
        #line 2378 
        ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (__u8)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1);
      }
      else 
           #line 2380 
           put_page(page_info->page);
      #line 2383 
      ;
      #line 2383 
      skb_frag_size_add(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)j],(int)curr_frag_len);
      #line 2384 
      skb->len += (unsigned int)curr_frag_len;
      #line 2385 
      skb->data_len += (unsigned int)curr_frag_len;
      #line 2386 
      skb->truesize += (unsigned int)rx_frag_size;
      #line 2387 
      remaining = (unsigned short)((int)remaining - (int)curr_frag_len);
      #line 2388 
      page_info->page = (struct page *)0;
    }
    #line 2366 
    i = (u16)((int)i + 1);
  }
  #line 2390 
  if ((long)((unsigned int)j > 17U) != 0L) {
    #line 2391 
    ldv_inline_asm();
    #line 2392 
    ldv_inline_asm();
    #line 2393 
    ldv_inline_asm();
    #line 2390 
    ;
  }
  #line 2393 
  return;
}

#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_compl_process(struct be_rx_obj *rxo, struct napi_struct *napi, struct be_rx_compl_info *rxcp)
{
  #line 2399 
  struct sk_buff *skb;
  #line 2397 
  struct be_adapter *adapter = rxo->adapter;
  #line 2398 
  struct net_device *netdev = adapter->netdev;
  #line 2401 
  skb = netdev_alloc_skb_ip_align(netdev,256U);
  #line 2402 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 2403 
    (rxo->stats.rx_drops_no_skbs) ++;
    #line 2404 
    be_rx_compl_discard(rxo,rxcp);
    #line 2405 
    return;
  }
  #line 2408 
  skb_fill_rx_data(rxo,skb,rxcp);
  #line 2410 
  if ((long)((netdev->features & 549755813888ULL) != 0ULL) != 0L) {
    #line 2410 
    if ((long)((int)csum_passed(rxcp) != 0) != 0L) 
                                                   #line 2411 
                                                   skb->ip_summed = (unsigned char)1U; else 
                                                                    #line 2413 
                                                                    skb_checksum_none_assert(skb);
  }
  else 
       #line 2413 
       skb_checksum_none_assert(skb);
  #line 2415 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 2416 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)((rxo - & adapter->rx_obj[0]) / 24832L))));
  #line 2417 
  if ((netdev->features & 274877906944ULL) != 0ULL) 
                                                    #line 2418 
                                                    skb_set_hash(skb,rxcp->rss_hash,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  #line 2420 
  skb->csum_level = (unsigned char)rxcp->tunneled;
  #line 2421 
  skb_mark_napi_id(skb,napi);
  #line 2423 
  if ((unsigned int)rxcp->vlanf != 0U) 
                                       #line 2424 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)rxcp->vlan_tag));
  #line 2426 
  netif_receive_skb(skb);
  #line 2427 
  return;
}

#line 2430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_compl_process_gro(struct be_rx_obj *rxo, struct napi_struct *napi, struct be_rx_compl_info *rxcp)
{
  #line 2435 
  struct be_rx_page_info *page_info;
  #line 2437 
  u16 remaining;
  #line 2437 
  u16 curr_frag_len;
  #line 2438 
  u16 i;
  #line 2438 
  u16 j;
  #line 2434 
  struct be_adapter *adapter = rxo->adapter;
  #line 2436 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 2440 
  skb = napi_get_frags(napi);
  #line 2441 
  if (skb == (struct sk_buff *)0) {
    #line 2442 
    be_rx_compl_discard(rxo,rxcp);
    #line 2443 
    return;
  }
  #line 2446 
  remaining = rxcp->pkt_size;
  #line 2447 
  i = (unsigned short)0U;
  #line 2447 
  j = (unsigned short)65535U;
  #line 2447 
  while ((int)((unsigned short)rxcp->num_rcvd) > (int)i) {
    {
      #line 2450 
      u16 __UNIQUE_ID___x593;
      #line 2450 
      int tmp;
      #line 2448 
      page_info = get_rx_page_info(rxo);
      {
        #line 2450 
        __UNIQUE_ID___x593 = remaining;
        #line 2450 
        ushort __UNIQUE_ID___y594 = rx_frag_size;
        #line 2450 
        if ((int)__UNIQUE_ID___x593 < (int)__UNIQUE_ID___y594) 
                                                               #line 2450 
                                                               tmp = (int)__UNIQUE_ID___x593; else 
                                                                    #line 2450 
                                                                    tmp = (int)__UNIQUE_ID___y594;
        }
      #line 2450 
      curr_frag_len = (unsigned short)tmp;
      #line 2453 
      if ((unsigned int)i == 0U || (unsigned int)page_info->page_offset == 0U) {
        #line 2455 
        j = (u16)((int)j + 1);
        #line 2456 
        skb_frag_set_page(skb,(int)j,page_info->page);
        #line 2457 
        ;
        #line 2457 
        skb_frag_off_set(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)j],(unsigned int)page_info->page_offset);
        #line 2459 
        skb_frag_size_set(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)j],0U);
      }
      else 
           #line 2461 
           put_page(page_info->page);
      #line 2463 
      ;
      #line 2463 
      skb_frag_size_add(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)j],(int)curr_frag_len);
      #line 2464 
      skb->truesize += (unsigned int)rx_frag_size;
      #line 2465 
      remaining = (unsigned short)((int)remaining - (int)curr_frag_len);
      #line 2466 
      memset((void *)page_info,0,24UL);
    }
    #line 2447 
    i = (u16)((int)i + 1);
  }
  #line 2468 
  if ((long)((unsigned int)j > 17U) != 0L) {
    #line 2469 
    ldv_inline_asm();
    #line 2470 
    ldv_inline_asm();
    #line 2471 
    ldv_inline_asm();
    #line 2468 
    ;
  }
  #line 2470 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)j) + 1U);
  #line 2471 
  skb->len = (unsigned int)rxcp->pkt_size;
  #line 2472 
  skb->data_len = (unsigned int)rxcp->pkt_size;
  #line 2473 
  skb->ip_summed = (unsigned char)1U;
  #line 2474 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)((rxo - & adapter->rx_obj[0]) / 24832L))));
  #line 2475 
  if (((adapter->netdev)->features & 274877906944ULL) != 0ULL) 
                                                               #line 2476 
                                                               skb_set_hash(skb,rxcp->rss_hash,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  #line 2478 
  skb->csum_level = (unsigned char)rxcp->tunneled;
  #line 2480 
  if ((unsigned int)rxcp->vlanf != 0U) 
                                       #line 2481 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)rxcp->vlan_tag));
  #line 2483 
  napi_gro_frags(napi);
  #line 2484 
  return;
}

#line 2486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_parse_rx_compl_v1(struct be_eth_rx_compl *compl, struct be_rx_compl_info *rxcp)
{
  #line 2489 
  ;
  #line 2489 
  rxcp->pkt_size = (unsigned short)amap_get((void *)compl,0U,amap_mask(14U),16U);
  #line 2490 
  ;
  #line 2490 
  rxcp->vlanf = (unsigned char)amap_get((void *)compl,0U,amap_mask(1U),30U);
  #line 2491 
  ;
  #line 2491 
  rxcp->err = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),0U);
  #line 2492 
  ;
  #line 2492 
  rxcp->tcpf = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),3U);
  #line 2493 
  ;
  #line 2493 
  rxcp->udpf = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),4U);
  #line 2494 
  ;
  #line 2494 
  rxcp->ip_csum = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),5U);
  #line 2495 
  ;
  #line 2495 
  rxcp->l4_csum = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),6U);
  #line 2496 
  ;
  #line 2496 
  rxcp->ipv6 = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),7U);
  #line 2497 
  ;
  #line 2497 
  rxcp->num_rcvd = (unsigned char)amap_get((void *)compl,1U,amap_mask(3U),29U);
  #line 2498 
  ;
  #line 2498 
  rxcp->pkt_type = (unsigned char)amap_get((void *)compl,2U,amap_mask(2U),1U);
  #line 2499 
  ;
  #line 2499 
  rxcp->rss_hash = amap_get((void *)compl,3U,amap_mask(32U),0U);
  #line 2500 
  if ((unsigned int)rxcp->vlanf != 0U) {
    #line 2501 
    ;
    #line 2501 
    rxcp->qnq = (unsigned char)amap_get((void *)compl,2U,amap_mask(1U),3U);
    #line 2502 
    ;
    #line 2502 
    rxcp->vlan_tag = (unsigned short)amap_get((void *)compl,0U,amap_mask(16U),0U);
  }
  #line 2504 
  ;
  #line 2504 
  rxcp->port = (unsigned short)amap_get((void *)compl,2U,amap_mask(2U),5U);
  #line 2505 
  ;
  #line 2505 
  rxcp->tunneled = (unsigned char)amap_get((void *)compl,2U,amap_mask(1U),30U);
  #line 2507 
  return;
}

#line 2509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_parse_rx_compl_v0(struct be_eth_rx_compl *compl, struct be_rx_compl_info *rxcp)
{
  #line 2512 
  ;
  #line 2512 
  rxcp->pkt_size = (unsigned short)amap_get((void *)compl,0U,amap_mask(14U),16U);
  #line 2513 
  ;
  #line 2513 
  rxcp->vlanf = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),14U);
  #line 2514 
  ;
  #line 2514 
  rxcp->err = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),0U);
  #line 2515 
  ;
  #line 2515 
  rxcp->tcpf = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),3U);
  #line 2516 
  ;
  #line 2516 
  rxcp->udpf = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),4U);
  #line 2517 
  ;
  #line 2517 
  rxcp->ip_csum = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),5U);
  #line 2518 
  ;
  #line 2518 
  rxcp->l4_csum = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),6U);
  #line 2519 
  ;
  #line 2519 
  rxcp->ipv6 = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),7U);
  #line 2520 
  ;
  #line 2520 
  rxcp->num_rcvd = (unsigned char)amap_get((void *)compl,1U,amap_mask(3U),29U);
  #line 2521 
  ;
  #line 2521 
  rxcp->pkt_type = (unsigned char)amap_get((void *)compl,2U,amap_mask(2U),1U);
  #line 2522 
  ;
  #line 2522 
  rxcp->rss_hash = amap_get((void *)compl,3U,amap_mask(32U),0U);
  #line 2523 
  if ((unsigned int)rxcp->vlanf != 0U) {
    #line 2524 
    ;
    #line 2524 
    rxcp->qnq = (unsigned char)amap_get((void *)compl,2U,amap_mask(1U),3U);
    #line 2525 
    ;
    #line 2525 
    rxcp->vlan_tag = (unsigned short)amap_get((void *)compl,0U,amap_mask(16U),0U);
  }
  #line 2527 
  ;
  #line 2527 
  rxcp->port = (unsigned short)amap_get((void *)compl,0U,amap_mask(1U),30U);
  #line 2528 
  ;
  #line 2528 
  rxcp->ip_frag = (unsigned char)amap_get((void *)compl,1U,amap_mask(1U),15U);
  #line 2529 
  return;
}

#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct be_rx_compl_info *be_rx_compl_get(struct be_rx_obj *rxo)
{
  #line 2533 
  struct be_eth_rx_compl *compl = queue_tail_node(& rxo->cq);
  #line 2534 
  struct be_rx_compl_info *rxcp = & rxo->rxcp;
  #line 2535 
  struct be_adapter *adapter = rxo->adapter;
  #line 2539 
  if (compl->dw[2UL] == 0U) 
                            #line 2540 
                            return (struct be_rx_compl_info *)0;
  #line 2541 
  ldv_inline_asm();
  #line 2543 
  swap_dws((void *)compl,16);
  #line 2545 
  if ((int)adapter->be3_native != 0) 
                                     #line 2546 
                                     be_parse_rx_compl_v1(compl,rxcp); else 
                                                                    #line 2548 
                                                                    be_parse_rx_compl_v0(compl,rxcp);
  #line 2550 
  if ((unsigned int)rxcp->ip_frag != 0U) 
                                         #line 2551 
                                         rxcp->l4_csum = (unsigned char)0U;
  #line 2553 
  if ((unsigned int)rxcp->vlanf != 0U) {
    #line 2558 
    if ((adapter->function_mode & 1024U) != 0U && (unsigned int)rxcp->qnq == 0U) 
      #line 2559 
      rxcp->vlanf = (unsigned char)0U;
    #line 2561 
    if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
      #line 2562 
      rxcp->vlan_tag = __builtin_bswap16((unsigned short)((int)rxcp->vlan_tag));
    #line 2564 
    if ((int)adapter->pvid == ((int)rxcp->vlan_tag & 4095)) {
      #line 2565 
      if (! test_bit((long)rxcp->vlan_tag,(unsigned long *)(& adapter->vids))) 
        #line 2566 
        rxcp->vlanf = (unsigned char)0U;
    }
  }
  #line 2570 
  compl->dw[2UL] = 0U;
  #line 2572 
  queue_tail_inc(& rxo->cq);
  #line 2573 
  return rxcp;
}

#line 2576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static struct page *be_alloc_pages(u32 size, gfp_t gfp)
{
  #line 2578 
  u32 order = (unsigned int)get_order((unsigned long)size);
  #line 2580 
  if (order != 0U) 
                   #line 2581 
                   gfp |= 262144U;
  #line 2582 
  return alloc_pages(gfp,order);
}

#line 2589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_post_rx_frags(struct be_rx_obj *rxo, gfp_t gfp, u32 frags_needed)
{
  #line 2596 
  struct be_eth_rx_d *rxd;
  #line 2597 
  u64 frag_dmaaddr;
  #line 2598 
  u32 posted;
  #line 2591 
  struct be_adapter *adapter = rxo->adapter;
  #line 2592 
  struct be_rx_page_info *page_info = (struct be_rx_page_info *)0;
  #line 2592 
  struct be_rx_page_info *prev_page_info = (struct be_rx_page_info *)0;
  #line 2593 
  struct be_queue_info *rxq = & rxo->q;
  #line 2594 
  struct page *pagep = (struct page *)0;
  #line 2595 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2597 
  u64 page_dmaaddr = 0ULL;
  #line 2598 
  u32 page_offset = 0U;
  #line 2598 
  u32 notify = 0U;
  #line 2600 
  page_info = & rxo->page_info_tbl[rxq->head];
  #line 2601 
  posted = 0U;
  #line 2601 
  while (posted < frags_needed && page_info->page == (struct page *)0) {
    #line 2602 
    if (pagep == (struct page *)0) {
      #line 2603 
      pagep = be_alloc_pages(adapter->big_page_size,gfp);
      #line 2604 
      if ((long)(pagep == (struct page *)0) != 0L) {
        #line 2605 
        (rxo->stats.rx_post_fail) ++;
        #line 2606 
        break;
      }
      #line 2608 
      page_dmaaddr = dma_map_page_attrs(dev,pagep,0UL,(unsigned long)adapter->big_page_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 2611 
      if (dma_mapping_error(dev,page_dmaaddr) != 0) {
        #line 2612 
        put_page(pagep);
        #line 2613 
        pagep = (struct page *)0;
        #line 2614 
        (adapter->drv_stats.dma_map_errors) ++;
        #line 2615 
        break;
      }
      #line 2617 
      page_offset = 0U;
    }
    else {
      #line 2619 
      get_page(pagep);
      #line 2620 
      page_offset = (unsigned int)rx_frag_size + page_offset;
    }
    #line 2622 
    page_info->page_offset = (unsigned short)page_offset;
    #line 2623 
    page_info->page = pagep;
    #line 2625 
    rxd = (struct be_eth_rx_d *)queue_head_node(rxq);
    #line 2626 
    frag_dmaaddr = (unsigned long long)page_info->page_offset + page_dmaaddr;
    #line 2627 
    rxd->fragpa_lo = (unsigned int)frag_dmaaddr;
    #line 2628 
    rxd->fragpa_hi = (unsigned int)(frag_dmaaddr >> 32);
    #line 2631 
    if (((unsigned int)rx_frag_size + page_offset) + (unsigned int)rx_frag_size > adapter->big_page_size) {
      #line 2633 
      pagep = (struct page *)0;
      #line 2634 
      page_info->last_frag = (_Bool)1;
      #line 2635 
      page_info->bus = page_dmaaddr;
    }
    else 
         #line 2637 
         page_info->bus = frag_dmaaddr;
    #line 2640 
    prev_page_info = page_info;
    #line 2641 
    queue_head_inc(rxq);
    #line 2642 
    page_info = & rxo->page_info_tbl[rxq->head];
    #line 2601 
    posted ++;
  }
  #line 2648 
  if (pagep != (struct page *)0) {
    #line 2649 
    prev_page_info->last_frag = (_Bool)1;
    #line 2650 
    prev_page_info->bus = page_dmaaddr;
  }
  #line 2653 
  if (posted != 0U) {
    #line 2654 
    atomic_add((int)posted,& rxq->used);
    #line 2655 
    if ((int)rxo->rx_post_starved != 0) 
                                        #line 2656 
                                        rxo->rx_post_starved = (_Bool)0;
    #line 2657 
    while (1) {
      {
        #line 2658 
        unsigned int __UNIQUE_ID___x596;
        #line 2658 
        unsigned int tmp_1;
        {
          #line 2658 
          __UNIQUE_ID___x596 = 255U;
          #line 2658 
          u32 __UNIQUE_ID___y597 = posted;
          #line 2658 
          if (__UNIQUE_ID___x596 < __UNIQUE_ID___y597) 
                                                       #line 2658 
                                                       tmp_1 = __UNIQUE_ID___x596; else 
                                                                    #line 2658 
                                                                    tmp_1 = __UNIQUE_ID___y597;
          }
        #line 2658 
        notify = tmp_1;
        #line 2659 
        be_rxq_notify(adapter,(unsigned short)((int)((unsigned short)rxq->id)),(unsigned short)((int)((unsigned short)notify)));
        #line 2660 
        posted -= notify;
      }
      #line 2661 
      if (! (posted != 0U)) 
                            #line 2657 
                            break;
    }
  }
  else {
    #line 2662 
    if (atomic_read_0(& rxq->used) == 0) 
                                         #line 2664 
                                         rxo->rx_post_starved = (_Bool)1;
  }
  #line 2665 
  return;
}

#line 2668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void be_update_tx_err(struct be_tx_obj *txo, u8 status)
{
  #line 2670 
  switch ((int)status) {
    #line 2671 
    case 2: 
            #line 2671 
    ;
    #line 2672 
    (txo->stats.tx_hdr_parse_err) ++;
    #line 2673 
    break;
    #line 2674 
    case 3: 
            #line 2674 
    ;
    #line 2675 
    (txo->stats.tx_dma_err) ++;
    #line 2676 
    break;
    #line 2677 
    case 5: 
            #line 2677 
    ;
    #line 2678 
    (txo->stats.tx_spoof_check_err) ++;
    #line 2679 
    break;
  }
  #line 2681 
  return;
}

#line 2683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void lancer_update_tx_err(struct be_tx_obj *txo, u8 status)
{
  #line 2685 
  switch ((int)status) {
    #line 2686 
    case 1: 
            #line 2686 
    ;
    #line 2687 
    (txo->stats.tx_tso_err) ++;
    #line 2688 
    break;
    #line 2689 
    case 3: 
            #line 2689 
    ;
    #line 2690 
    case 5: 
            #line 2690 
    ;
    #line 2691 
    (txo->stats.tx_spoof_check_err) ++;
    #line 2692 
    break;
    #line 2693 
    case 7: 
            #line 2693 
    ;
    #line 2694 
    (txo->stats.tx_qinq_err) ++;
    #line 2695 
    break;
    #line 2696 
    case 11: 
             #line 2696 
    ;
    #line 2697 
    (txo->stats.tx_internal_parity_err) ++;
    #line 2698 
    break;
    #line 2699 
    case 13: 
             #line 2699 
    ;
    #line 2700 
    (txo->stats.tx_dma_err) ++;
    #line 2701 
    break;
    #line 2702 
    case 9: 
            #line 2702 
    ;
    #line 2703 
    (txo->stats.tx_sge_err) ++;
    #line 2704 
    break;
  }
  #line 2706 
  return;
}

#line 2708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct be_tx_compl_info *be_tx_compl_get(struct be_adapter *adapter, struct be_tx_obj *txo)
{
  #line 2711 
  struct be_queue_info *tx_cq = & txo->cq;
  #line 2712 
  struct be_tx_compl_info *txcp = & txo->txcp;
  #line 2713 
  struct be_eth_tx_compl *compl = queue_tail_node(tx_cq);
  #line 2715 
  if (compl->dw[3UL] == 0U) 
                            #line 2716 
                            return (struct be_tx_compl_info *)0;
  #line 2717 
  ldv_inline_asm();
  #line 2720 
  swap_dws((void *)compl,16);
  #line 2722 
  ;
  #line 2722 
  txcp->status = (unsigned char)amap_get((void *)compl,0U,amap_mask(4U),28U);
  #line 2723 
  ;
  #line 2723 
  txcp->end_index = (unsigned short)amap_get((void *)compl,0U,amap_mask(16U),0U);
  #line 2725 
  if ((unsigned int)txcp->status != 0U) 
    #line 2726 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
      #line 2727 
      lancer_update_tx_err(txo,(unsigned char)((int)txcp->status));
      #line 2731 
      if (((unsigned int)txcp->status == 1U || (unsigned int)txcp->status == 11U) || (unsigned int)txcp->status == 9U) 
        #line 2734 
        be_set_error(adapter,8);
    }
    else 
         #line 2736 
         be_update_tx_err(txo,(unsigned char)((int)txcp->status));
  #line 2740 
  if ((unsigned int)be_check_error(adapter,8U) != 0U) 
                                                      #line 2741 
                                                      return (struct be_tx_compl_info *)0;
  #line 2743 
  compl->dw[3UL] = 0U;
  #line 2744 
  queue_tail_inc(tx_cq);
  #line 2745 
  return txcp;
}

#line 2748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 be_tx_compl_process(struct be_adapter *adapter, struct be_tx_obj *txo, u16 last_index)
{
  #line 2755 
  struct be_eth_wrb *wrb;
  #line 2757 
  u32 frag_index;
  #line 2751 
  struct sk_buff **sent_skbs = (struct sk_buff **)(& txo->sent_skb_list);
  #line 2752 
  struct be_queue_info *txq = & txo->q;
  #line 2753 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 2754 
  bool unmap_skb_hdr = (_Bool)0;
  #line 2756 
  u16 num_wrbs = (unsigned short)0U;
  #line 2759 
  while (1) {
    {
      #line 2773 
      int tmp_1;
      #line 2760 
      if (*(sent_skbs + (unsigned long)txq->tail) != (struct sk_buff *)0) {
        #line 2762 
        if (skb != (struct sk_buff *)0) 
                                        #line 2763 
                                        dev_consume_skb_any(skb);
        #line 2764 
        skb = *(sent_skbs + (unsigned long)txq->tail);
        #line 2765 
        *(sent_skbs + (unsigned long)txq->tail) = (struct sk_buff *)0;
        #line 2766 
        queue_tail_inc(txq);
        #line 2767 
        num_wrbs = (u16)((int)num_wrbs + 1);
        #line 2768 
        unmap_skb_hdr = (_Bool)1;
      }
      #line 2770 
      wrb = (struct be_eth_wrb *)queue_tail_node(txq);
      #line 2771 
      frag_index = txq->tail;
      #line 2773 
      if ((int)unmap_skb_hdr != 0) {
        #line 2773 
        if (skb_headlen(skb) != 0U) 
                                    #line 2773 
                                    tmp_1 = 1; else 
                                                    #line 2773 
                                                    tmp_1 = 0;
      }
      else 
           #line 2773 
           tmp_1 = 0;
      #line 2772 
      ;
      #line 2772 
      ;
      #line 2772 
      unmap_tx_frag(& (adapter->pdev)->dev,wrb,(_Bool)((int)((_Bool)(tmp_1 != 0))));
      #line 2774 
      unmap_skb_hdr = (_Bool)0;
      #line 2775 
      queue_tail_inc(txq);
      #line 2776 
      num_wrbs = (u16)((int)num_wrbs + 1);
    }
    #line 2777 
    if (! ((unsigned int)last_index != frag_index)) 
                                                    #line 2759 
                                                    break;
  }
  #line 2778 
  dev_consume_skb_any(skb);
  #line 2780 
  return num_wrbs;
}

#line 2784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int events_get(struct be_eq_obj *eqo)
{
  #line 2786 
  struct be_eq_entry *eqe;
  #line 2787 
  int num = 0;
  #line 2789 
  while (1) {
    #line 2790 
    eqe = (struct be_eq_entry *)queue_tail_node(& eqo->q);
    #line 2791 
    if (eqe->evt == 0U) 
                        #line 2792 
                        break;
    #line 2793 
    ldv_inline_asm();
    #line 2795 
    eqe->evt = 0U;
    #line 2796 
    num ++;
    #line 2797 
    queue_tail_inc(& eqo->q);
  }
  #line 2800 
  return num;
}

#line 2804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_eq_clean(struct be_eq_obj *eqo)
{
  #line 2806 
  int num = events_get(eqo);
  #line 2808 
  be_eq_notify(eqo->adapter,(unsigned short)((int)((unsigned short)eqo->q.id)),(_Bool)0,(_Bool)1,(unsigned short)((int)((unsigned short)num)),0U);
  #line 2809 
  return;
}

#line 2812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rxq_clean(struct be_rx_obj *rxo)
{
  #line 2815 
  struct be_rx_page_info *page_info;
  #line 2814 
  struct be_queue_info *rxq = & rxo->q;
  #line 2817 
  while (1) {
    #line 2817 
    if (! (atomic_read_0(& rxq->used) > 0)) 
                                            #line 2817 
                                            break;
    #line 2818 
    page_info = get_rx_page_info(rxo);
    #line 2819 
    put_page(page_info->page);
    #line 2820 
    memset((void *)page_info,0,24UL);
  }
  #line 2822 
  if ((long)(atomic_read_0(& rxq->used) != 0) != 0L) {
    #line 2823 
    ldv_inline_asm();
    #line 2824 
    ldv_inline_asm();
    #line 2825 
    ldv_inline_asm();
    #line 2822 
    ;
  }
  #line 2823 
  rxq->tail = 0U;
  #line 2824 
  rxq->head = 0U;
  #line 2825 
  return;
}

#line 2827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_cq_clean(struct be_rx_obj *rxo)
{
  #line 2830 
  struct be_rx_compl_info *rxcp;
  #line 2829 
  struct be_queue_info *rx_cq = & rxo->cq;
  #line 2831 
  struct be_adapter *adapter = rxo->adapter;
  #line 2832 
  int flush_wait = 0;
  #line 2840 
  while (1) {
    #line 2841 
    rxcp = be_rx_compl_get(rxo);
    #line 2842 
    if (rxcp == (struct be_rx_compl_info *)0) {
      #line 2846 
      int tmp;
      #line 2843 
      if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
        #line 2844 
        break;
      #line 2846 
      tmp = flush_wait;
      #line 2846 
      flush_wait ++;
      #line 2846 
      ;
      #line 2846 
      if (tmp > 50) 
                    #line 2846 
                    goto _LOR;
      else {
        #line 2846 
        if ((unsigned int)be_check_error(adapter,11U) != 0U) {
          #line 2846 
          _LOR: {
                  #line 2849 
                  _dev_warn(& (adapter->pdev)->dev,(char *)"did not receive flush compl\n");
                  #line 2851 
                  break;
                }
        }
      }
      #line 2853 
      be_cq_notify(adapter,(unsigned short)((int)((unsigned short)rx_cq->id)),(_Bool)1,(unsigned short)0);
      #line 2854 
      __const_udelay(4295000UL);
    }
    else {
      #line 2856 
      be_rx_compl_discard(rxo,rxcp);
      #line 2857 
      be_cq_notify(adapter,(unsigned short)((int)((unsigned short)rx_cq->id)),(_Bool)0,(unsigned short)1);
      #line 2858 
      if ((unsigned int)rxcp->num_rcvd == 0U) 
                                              #line 2859 
                                              break;
    }
  }
  #line 2864 
  be_cq_notify(adapter,(unsigned short)((int)((unsigned short)rx_cq->id)),(_Bool)0,(unsigned short)0);
  #line 2865 
  return;
}

#line 2867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_compl_clean(struct be_adapter *adapter)
{
  #line 2871 
  struct be_tx_compl_info *txcp;
  #line 2872 
  struct be_queue_info *txq;
  #line 2873 
  u32 end_idx;
  #line 2873 
  u32 notified_idx;
  #line 2874 
  struct be_tx_obj *txo;
  #line 2875 
  int i;
  #line 2875 
  int pending_txqs;
  #line 2869 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2870 
  u16 cmpl = (unsigned short)0U;
  #line 2870 
  u16 timeo = (unsigned short)0U;
  #line 2870 
  u16 num_wrbs = (unsigned short)0U;
  #line 2878 
  while (1) {
    #line 2879 
    pending_txqs = (int)adapter->num_tx_qs;
    #line 2881 
    i = 0;
    #line 2881 
    txo = & adapter->tx_obj[i];
    #line 2881 
    while ((int)adapter->num_tx_qs > i) {
      {
        #line 2882 
        cmpl = (unsigned short)0U;
        #line 2883 
        num_wrbs = (unsigned short)0U;
        #line 2884 
        txq = & txo->q;
        #line 2885 
        while (1) {
          #line 2885 
          txcp = be_tx_compl_get(adapter,txo);
          #line 2885 
          if (! (txcp != (struct be_tx_compl_info *)0)) 
                                                        #line 2885 
                                                        break;
          {
            #line 2888 
            num_wrbs = (unsigned short)((int)be_tx_compl_process(adapter,txo,(unsigned short)((int)txcp->end_index)) + (int)num_wrbs);
            #line 2889 
            cmpl = (u16)((int)cmpl + 1);
          }
        }
        #line 2891 
        if ((unsigned int)cmpl != 0U) {
          #line 2892 
          be_cq_notify(adapter,(unsigned short)((int)((unsigned short)txo->cq.id)),(_Bool)0,(unsigned short)((int)cmpl));
          #line 2893 
          atomic_sub((int)num_wrbs,& txq->used);
          #line 2894 
          timeo = (unsigned short)0U;
        }
        #line 2896 
        if (! be_is_tx_compl_pending(txo)) 
                                           #line 2897 
                                           pending_txqs --;
      }
      #line 2881 
      i ++;
      #line 2881 
      txo ++;
    }
    #line 2900 
    if (pending_txqs == 0) 
                           #line 2902 
                           break;
    else {
      #line 2900 
      timeo = (u16)((int)timeo + 1);
      #line 2900 
      if ((unsigned int)timeo > 10U) 
                                     #line 2902 
                                     break;
      else {
        #line 2900 
        if ((unsigned int)be_check_error(adapter,11U) != 0U) 
                                                             #line 2902 
                                                             break;
      }
    }
    #line 2904 
    __const_udelay(4295000UL);
  }
  #line 2908 
  i = 0;
  #line 2908 
  txo = & adapter->tx_obj[i];
  #line 2908 
  while ((int)adapter->num_tx_qs > i) {
    {
      #line 2909 
      txq = & txo->q;
      #line 2911 
      if (atomic_read_0(& txq->used) != 0) {
        #line 2912 
        ;
        #line 2912 
        ;
        #line 2912 
        _dev_info(dev,(char *)"txq%d: cleaning %d pending tx-wrbs\n",i,atomic_read_0(& txq->used));
        #line 2914 
        notified_idx = txq->tail;
        #line 2915 
        end_idx = txq->tail;
        #line 2916 
        ;
        #line 2916 
        index_adv(& end_idx,(unsigned int)(atomic_read_0(& txq->used) + -1),txq->len);
        #line 2921 
        num_wrbs = be_tx_compl_process(adapter,txo,(unsigned short)((int)((unsigned short)end_idx)));
        #line 2922 
        atomic_sub((int)num_wrbs,& txq->used);
        #line 2923 
        if ((long)(atomic_read_0(& txq->used) != 0) != 0L) {
          #line 2924 
          ldv_inline_asm();
          #line 2925 
          ldv_inline_asm();
          #line 2926 
          ldv_inline_asm();
          #line 2923 
          ;
        }
        #line 2924 
        txo->pend_wrb_cnt = (unsigned short)0U;
        #line 2928 
        txq->head = notified_idx;
        #line 2929 
        txq->tail = notified_idx;
      }
    }
    #line 2908 
    i ++;
    #line 2908 
    txo ++;
  }
  #line 2932 
  return;
}

#line 2934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_evt_queues_destroy(struct be_adapter *adapter)
{
  #line 2936 
  struct be_eq_obj *eqo;
  #line 2937 
  int i;
  #line 2939 
  i = 0;
  #line 2939 
  eqo = & adapter->eq_obj[i];
  #line 2939 
  while ((int)adapter->num_evt_qs > i) {
    #line 2940 
    if ((int)eqo->q.created != 0) {
      #line 2941 
      be_eq_clean(eqo);
      #line 2942 
      be_cmd_q_destroy(adapter,& eqo->q,1);
      #line 2943 
      netif_napi_del(& eqo->napi);
      #line 2944 
      free_cpumask_var(eqo->affinity_mask);
    }
    #line 2946 
    be_queue_free(adapter,& eqo->q);
    #line 2939 
    i ++;
    #line 2939 
    eqo ++;
  }
  #line 2948 
  return;
}

#line 2950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_evt_queues_create(struct be_adapter *adapter)
{
  #line 2958 
  unsigned short __UNIQUE_ID___x602;
  #line 2958 
  int tmp_2;
  #line 2952 
  struct be_queue_info *eq;
  #line 2953 
  struct be_eq_obj *eqo;
  #line 2954 
  struct be_aic_obj *aic;
  #line 2955 
  int i;
  #line 2955 
  int rc;
  {
    #line 2958 
    u16 __UNIQUE_ID___x600;
    #line 2958 
    int tmp_0;
    #line 2958 
    unsigned int tmp;
    #line 2958 
    if ((unsigned int)adapter->num_msix_vec != 0U) 
                                                   #line 2958 
                                                   tmp = (unsigned int)adapter->num_msix_vec; else 
                                                                    #line 2958 
                                                                    tmp = 1U;
    #line 2958 
    __UNIQUE_ID___x602 = (unsigned short)tmp;
    {
      #line 2958 
      __UNIQUE_ID___x600 = adapter->cfg_num_rx_irqs;
      #line 2958 
      u16 __UNIQUE_ID___y601 = adapter->cfg_num_tx_irqs;
      #line 2958 
      if ((int)__UNIQUE_ID___x600 > (int)__UNIQUE_ID___y601) 
                                                             #line 2958 
                                                             tmp_0 = (int)__UNIQUE_ID___x600; else 
                                                                    #line 2958 
                                                                    tmp_0 = (int)__UNIQUE_ID___y601;
      }
    #line 2958 
    unsigned short __UNIQUE_ID___y603 = (unsigned short)tmp_0;
    #line 2958 
    if ((int)__UNIQUE_ID___x602 < (int)__UNIQUE_ID___y603) 
                                                           #line 2958 
                                                           tmp_2 = (int)__UNIQUE_ID___x602; else 
                                                                    #line 2958 
                                                                    tmp_2 = (int)__UNIQUE_ID___y603;
    }
  #line 2958 
  adapter->num_evt_qs = (unsigned short)tmp_2;
  #line 2962 
  adapter->aic_enabled = (_Bool)1;
  #line 2964 
  i = 0;
  #line 2964 
  eqo = & adapter->eq_obj[i];
  #line 2964 
  while ((int)adapter->num_evt_qs > i) {
    {
      #line 2965 
      int numa_node = dev_to_node(& (adapter->pdev)->dev);
      #line 2967 
      aic = & adapter->aic_obj[i];
      #line 2968 
      eqo->adapter = adapter;
      #line 2969 
      eqo->idx = (unsigned char)i;
      #line 2970 
      aic->max_eqd = 128U;
      #line 2972 
      eq = & eqo->q;
      #line 2973 
      rc = be_queue_alloc(adapter,eq,(unsigned short)1024,(unsigned short)4);
      #line 2975 
      if (rc != 0) 
                   #line 2976 
                   return rc;
      #line 2978 
      rc = be_cmd_eq_create(adapter,eqo);
      #line 2979 
      if (rc != 0) 
                   #line 2980 
                   return rc;
      #line 2982 
      if (! zalloc_cpumask_var(& eqo->affinity_mask,3264U)) 
                                                            #line 2983 
                                                            return -12;
      #line 2984 
      ;
      #line 2984 
      cpumask_set_cpu(cpumask_local_spread((unsigned int)i,numa_node),eqo->affinity_mask);
      #line 2986 
      netif_napi_add(adapter->netdev,& eqo->napi,& be_poll,64);
    }
    #line 2964 
    i ++;
    #line 2964 
    eqo ++;
  }
  #line 2989 
  return 0;
}

#line 2992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_mcc_queues_destroy(struct be_adapter *adapter)
{
  #line 2994 
  struct be_queue_info *q;
  #line 2996 
  q = & adapter->mcc_obj.q;
  #line 2997 
  if ((int)q->created != 0) 
                            #line 2998 
                            be_cmd_q_destroy(adapter,q,5);
  #line 2999 
  be_queue_free(adapter,q);
  #line 3001 
  q = & adapter->mcc_obj.cq;
  #line 3002 
  if ((int)q->created != 0) 
                            #line 3003 
                            be_cmd_q_destroy(adapter,q,2);
  #line 3004 
  be_queue_free(adapter,q);
  #line 3005 
  return;
}

#line 3008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_mcc_queues_create(struct be_adapter *adapter)
{
  #line 3010 
  struct be_queue_info *q;
  #line 3010 
  struct be_queue_info *cq;
  #line 3012 
  cq = & adapter->mcc_obj.cq;
  #line 3013 
  if (be_queue_alloc(adapter,cq,(unsigned short)256,(unsigned short)16) != 0) 
    #line 3015 
    goto err;
  #line 3018 
  if (be_cmd_cq_create(adapter,cq,& adapter->eq_obj[0].q,(_Bool)1,0) != 0) 
    #line 3019 
    goto mcc_cq_free;
  #line 3021 
  q = & adapter->mcc_obj.q;
  #line 3022 
  if (be_queue_alloc(adapter,q,(unsigned short)128,(unsigned short)256) != 0) 
    #line 3023 
    goto mcc_cq_destroy;
  #line 3025 
  if (be_cmd_mccq_create(adapter,q,cq) != 0) 
                                             #line 3026 
                                             goto mcc_q_free;
  #line 3028 
  return 0;
  #line 3030 
  mcc_q_free: 
              #line 3030 
  ;
  #line 3031 
  be_queue_free(adapter,q);
  #line 3032 
  mcc_cq_destroy: 
                  #line 3032 
  ;
  #line 3033 
  be_cmd_q_destroy(adapter,cq,2);
  #line 3034 
  mcc_cq_free: 
               #line 3034 
  ;
  #line 3035 
  be_queue_free(adapter,cq);
  #line 3036 
  err: 
       #line 3036 
  ;
  #line 3037 
  return -1;
}

#line 3040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_queues_destroy(struct be_adapter *adapter)
{
  #line 3042 
  struct be_queue_info *q;
  #line 3043 
  struct be_tx_obj *txo;
  #line 3044 
  u8 i;
  #line 3046 
  i = (unsigned char)0U;
  #line 3046 
  txo = & adapter->tx_obj[(int)i];
  #line 3046 
  while ((int)((unsigned short)i) < (int)adapter->num_tx_qs) {
    #line 3047 
    q = & txo->q;
    #line 3048 
    if ((int)q->created != 0) 
                              #line 3049 
                              be_cmd_q_destroy(adapter,q,3);
    #line 3050 
    be_queue_free(adapter,q);
    #line 3052 
    q = & txo->cq;
    #line 3053 
    if ((int)q->created != 0) 
                              #line 3054 
                              be_cmd_q_destroy(adapter,q,2);
    #line 3055 
    be_queue_free(adapter,q);
    #line 3046 
    i = (u8)((int)i + 1);
    #line 3046 
    txo ++;
  }
  #line 3057 
  return;
}

#line 3059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_tx_qs_create(struct be_adapter *adapter)
{
  #line 3066 
  u16 __UNIQUE_ID___x604;
  #line 3066 
  int tmp;
  #line 3061 
  struct be_queue_info *cq;
  #line 3062 
  struct be_tx_obj *txo;
  #line 3063 
  struct be_eq_obj *eqo;
  #line 3064 
  int status;
  #line 3064 
  int i;
  {
    #line 3066 
    __UNIQUE_ID___x604 = adapter->num_evt_qs;
    #line 3066 
    u16 __UNIQUE_ID___y605 = adapter->cfg_num_tx_irqs;
    #line 3066 
    if ((int)__UNIQUE_ID___x604 < (int)__UNIQUE_ID___y605) 
                                                           #line 3066 
                                                           tmp = (int)__UNIQUE_ID___x604; else 
                                                                    #line 3066 
                                                                    tmp = (int)__UNIQUE_ID___y605;
    }
  #line 3066 
  adapter->num_tx_qs = (unsigned short)tmp;
  #line 3068 
  i = 0;
  #line 3068 
  txo = & adapter->tx_obj[i];
  #line 3068 
  while ((int)adapter->num_tx_qs > i) {
    #line 3069 
    cq = & txo->cq;
    #line 3070 
    status = be_queue_alloc(adapter,cq,(unsigned short)1024,(unsigned short)16);
    #line 3072 
    if (status != 0) 
                     #line 3073 
                     return status;
    #line 3075 
    u64_stats_init(& txo->stats.sync);
    #line 3076 
    u64_stats_init(& txo->stats.sync_compl);
    #line 3081 
    eqo = & adapter->eq_obj[i % (int)adapter->num_evt_qs];
    #line 3082 
    status = be_cmd_cq_create(adapter,cq,& eqo->q,(_Bool)0,3);
    #line 3083 
    if (status != 0) 
                     #line 3084 
                     return status;
    #line 3086 
    status = be_queue_alloc(adapter,& txo->q,(unsigned short)2048,(unsigned short)16);
    #line 3088 
    if (status != 0) 
                     #line 3089 
                     return status;
    #line 3091 
    status = be_cmd_txq_create(adapter,txo);
    #line 3092 
    if (status != 0) 
                     #line 3093 
                     return status;
    #line 3095 
    netif_set_xps_queue(adapter->netdev,eqo->affinity_mask,(unsigned short)((int)eqo->idx));
    #line 3068 
    i ++;
    #line 3068 
    txo ++;
  }
  #line 3099 
  _dev_info(& (adapter->pdev)->dev,(char *)"created %d TX queue(s)\n",(int)adapter->num_tx_qs);
  #line 3101 
  return 0;
}

#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_cqs_destroy(struct be_adapter *adapter)
{
  #line 3106 
  struct be_queue_info *q;
  #line 3107 
  struct be_rx_obj *rxo;
  #line 3108 
  int i;
  #line 3110 
  i = 0;
  #line 3110 
  rxo = & adapter->rx_obj[i];
  #line 3110 
  while ((int)adapter->num_rx_qs > i) {
    #line 3111 
    q = & rxo->cq;
    #line 3112 
    if ((int)q->created != 0) 
                              #line 3113 
                              be_cmd_q_destroy(adapter,q,2);
    #line 3114 
    be_queue_free(adapter,q);
    #line 3110 
    i ++;
    #line 3110 
    rxo ++;
  }
  #line 3116 
  return;
}

#line 3118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_rx_cqs_create(struct be_adapter *adapter)
{
  #line 3125 
  u16 __UNIQUE_ID___x606;
  #line 3125 
  int tmp;
  #line 3120 
  struct be_queue_info *eq;
  #line 3120 
  struct be_queue_info *cq;
  #line 3121 
  struct be_rx_obj *rxo;
  #line 3122 
  int rc;
  #line 3122 
  int i;
  {
    #line 3125 
    __UNIQUE_ID___x606 = adapter->num_evt_qs;
    #line 3125 
    u16 __UNIQUE_ID___y607 = adapter->cfg_num_rx_irqs;
    #line 3125 
    if ((int)__UNIQUE_ID___x606 < (int)__UNIQUE_ID___y607) 
                                                           #line 3125 
                                                           tmp = (int)__UNIQUE_ID___x606; else 
                                                                    #line 3125 
                                                                    tmp = (int)__UNIQUE_ID___y607;
    }
  #line 3124 
  adapter->num_rss_qs = (unsigned short)tmp;
  #line 3128 
  if ((unsigned int)adapter->num_rss_qs <= 1U) 
                                               #line 3129 
                                               adapter->num_rss_qs = (unsigned short)0U;
  #line 3131 
  adapter->num_rx_qs = (unsigned short)((int)adapter->num_rss_qs + (int)adapter->need_def_rxq);
  #line 3136 
  if ((unsigned int)adapter->num_rx_qs == 0U) 
                                              #line 3137 
                                              adapter->num_rx_qs = (unsigned short)1U;
  #line 3139 
  adapter->big_page_size = (unsigned int)((unsigned long)(1 << get_order((unsigned long)rx_frag_size))) * 4096U;
  #line 3140 
  i = 0;
  #line 3140 
  rxo = & adapter->rx_obj[i];
  #line 3140 
  while ((int)adapter->num_rx_qs > i) {
    #line 3141 
    rxo->adapter = adapter;
    #line 3142 
    cq = & rxo->cq;
    #line 3143 
    rc = be_queue_alloc(adapter,cq,(unsigned short)1024,(unsigned short)16);
    #line 3145 
    if (rc != 0) 
                 #line 3146 
                 return rc;
    #line 3148 
    u64_stats_init(& rxo->stats.sync);
    #line 3149 
    eq = & adapter->eq_obj[i % (int)adapter->num_evt_qs].q;
    #line 3150 
    rc = be_cmd_cq_create(adapter,cq,eq,(_Bool)0,3);
    #line 3151 
    if (rc != 0) 
                 #line 3152 
                 return rc;
    #line 3140 
    i ++;
    #line 3140 
    rxo ++;
  }
  #line 3155 
  _dev_info(& (adapter->pdev)->dev,(char *)"created %d RX queue(s)\n",(int)adapter->num_rx_qs);
  #line 3157 
  return 0;
}

#line 3160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static irqreturn_t be_intx(int irq, void *dev)
{
  #line 3162 
  struct be_eq_obj *eqo = (struct be_eq_obj *)dev;
  #line 3163 
  struct be_adapter *adapter = eqo->adapter;
  #line 3164 
  int num_evts = 0;
  #line 3174 
  if ((int)napi_schedule_prep(& eqo->napi) != 0) {
    #line 3175 
    num_evts = events_get(eqo);
    #line 3176 
    __napi_schedule(& eqo->napi);
    #line 3177 
    if (num_evts != 0) 
                       #line 3178 
                       eqo->spurious_intr = (unsigned short)0U;
  }
  #line 3180 
  be_eq_notify(adapter,(unsigned short)((int)((unsigned short)eqo->q.id)),(_Bool)0,(_Bool)1,(unsigned short)((int)((unsigned short)num_evts)),0U);
  #line 3186 
  if (num_evts != 0) 
                     #line 3186 
                     goto _LOR;
  else {
    #line 3186 
    u16 tmp_0;
    #line 3186 
    tmp_0 = eqo->spurious_intr;
    #line 3186 
    eqo->spurious_intr = (u16)((int)eqo->spurious_intr + 1);
    #line 3186 
    ;
    #line 3186 
    if ((unsigned int)tmp_0 == 0U) 
                                   #line 3186 
                                   _LOR: 
                                         #line 3187 
                                         return IRQ_HANDLED; else 
                                                                  #line 3189 
                                                                  return IRQ_NONE;
  }
}

#line 3192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static irqreturn_t be_msix(int irq, void *dev)
{
  #line 3194 
  struct be_eq_obj *eqo = (struct be_eq_obj *)dev;
  #line 3196 
  be_eq_notify(eqo->adapter,(unsigned short)((int)((unsigned short)eqo->q.id)),(_Bool)0,(_Bool)1,(unsigned short)0,0U);
  #line 3197 
  napi_schedule(& eqo->napi);
  #line 3198 
  return IRQ_HANDLED;
}

#line 3201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool do_gro(struct be_rx_compl_info *rxcp)
{
  #line 3203 
  return (_Bool)((((unsigned int)rxcp->tcpf != 0U && (unsigned int)rxcp->err == 0U) && (unsigned int)rxcp->l4_csum != 0U) != 0);
}

#line 3206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_process_rx(struct be_rx_obj *rxo, struct napi_struct *napi, int budget)
{
  #line 3211 
  struct be_rx_compl_info *rxcp;
  #line 3212 
  u32 work_done;
  #line 3209 
  struct be_adapter *adapter = rxo->adapter;
  #line 3210 
  struct be_queue_info *rx_cq = & rxo->cq;
  #line 3213 
  u32 frags_consumed = 0U;
  #line 3215 
  work_done = 0U;
  #line 3215 
  while (work_done < (unsigned int)budget) {
    {
      #line 3216 
      rxcp = be_rx_compl_get(rxo);
      #line 3217 
      if (rxcp == (struct be_rx_compl_info *)0) 
                                                #line 3218 
                                                break;
      #line 3221 
      if ((long)((unsigned int)rxcp->num_rcvd == 0U) != 0L) 
                                                            #line 3222 
                                                            goto loop_continue;
      #line 3225 
      if ((long)((unsigned int)rxcp->pkt_size == 0U) != 0L) {
        #line 3226 
        be_rx_compl_discard(rxo,rxcp);
        #line 3227 
        goto loop_continue;
      }
      #line 3233 
      if ((long)((unsigned int)rxcp->port != adapter->port_num) != 0L && (long)(((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) != 0) != 0L) {
        #line 3235 
        be_rx_compl_discard(rxo,rxcp);
        #line 3236 
        goto loop_continue;
      }
      #line 3239 
      if ((int)do_gro(rxcp) != 0) 
                                  #line 3240 
                                  be_rx_compl_process_gro(rxo,napi,rxcp); else 
                                                                    #line 3242 
                                                                    be_rx_compl_process(rxo,napi,rxcp);
      #line 3244 
      loop_continue: 
                     #line 3244 
      ;
      #line 3245 
      frags_consumed = (unsigned int)rxcp->num_rcvd + frags_consumed;
      #line 3246 
      be_rx_stats_update(rxo,rxcp);
    }
    #line 3215 
    work_done ++;
  }
  #line 3249 
  if (work_done != 0U) {
    #line 3250 
    be_cq_notify(adapter,(unsigned short)((int)((unsigned short)rx_cq->id)),(_Bool)1,(unsigned short)((int)((unsigned short)work_done)));
    #line 3255 
    if (atomic_read_0(& rxo->q.used) <= 959) 
      #line 3256 
      if (! rxo->rx_post_starved) {
        #line 3258 
        unsigned int __UNIQUE_ID___x608;
        #line 3258 
        unsigned int tmp_0;
        {
          #line 3258 
          __UNIQUE_ID___x608 = 64U;
          #line 3258 
          unsigned int __UNIQUE_ID___y609 = frags_consumed;
          #line 3258 
          if (__UNIQUE_ID___x608 > __UNIQUE_ID___y609) 
                                                       #line 3258 
                                                       tmp_0 = __UNIQUE_ID___x608; else 
                                                                    #line 3258 
                                                                    tmp_0 = __UNIQUE_ID___y609;
          }
        #line 3257 
        ;
        #line 3257 
        be_post_rx_frags(rxo,2592U,tmp_0);
      }
  }
  #line 3262 
  return (int)work_done;
}

#line 3266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_process_tx(struct be_adapter *adapter, struct be_tx_obj *txo, int idx)
{
  #line 3270 
  struct be_tx_compl_info *txcp;
  #line 3269 
  int num_wrbs = 0;
  #line 3269 
  int work_done = 0;
  #line 3272 
  while (1) {
    #line 3272 
    txcp = be_tx_compl_get(adapter,txo);
    #line 3272 
    if (! (txcp != (struct be_tx_compl_info *)0)) 
                                                  #line 3272 
                                                  break;
    {
      #line 3273 
      num_wrbs = (int)be_tx_compl_process(adapter,txo,(unsigned short)((int)txcp->end_index)) + num_wrbs;
      #line 3274 
      work_done ++;
    }
  }
  #line 3277 
  if (work_done != 0) {
    #line 3278 
    be_cq_notify(adapter,(unsigned short)((int)((unsigned short)txo->cq.id)),(_Bool)1,(unsigned short)((int)((unsigned short)work_done)));
    #line 3279 
    atomic_sub(num_wrbs,& txo->q.used);
    #line 3283 
    if ((int)__netif_subqueue_stopped(adapter->netdev,
                                 (unsigned short)((int)((unsigned short)idx))) != 0) {
      #line 3283 
      if ((int)be_can_txq_wake(txo) != 0) 
                                          #line 3285 
                                          netif_wake_subqueue(adapter->netdev,(unsigned short)((int)((unsigned short)idx)));
    }
    #line 3288 
    u64_stats_init(& txo->stats.sync_compl);
    #line 3289 
    txo->stats.tx_compl += (unsigned long long)work_done;
    #line 3290 
    u64_stats_init(& txo->stats.sync_compl);
  }
  #line 3292 
  return;
}

#line 3294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
int be_poll(struct napi_struct *napi, int budget)
{
  #line 3296 
  void *__mptr;
  #line 3298 
  int work;
  #line 3298 
  int i;
  #line 3298 
  int num_evts;
  #line 3299 
  struct be_rx_obj *rxo;
  #line 3300 
  struct be_tx_obj *txo;
  #line 3296 
  __mptr = (void *)napi;
  #line 3296 
  struct be_eq_obj *eqo = ((struct be_eq_obj *)(__mptr + 18446744073709551520U));
  #line 3297 
  struct be_adapter *adapter = eqo->adapter;
  #line 3298 
  int max_work = 0;
  #line 3301 
  u32 mult_enc = 0U;
  #line 3303 
  num_evts = events_get(eqo);
  #line 3305 
  i = (int)eqo->idx;
  #line 3305 
  txo = & adapter->tx_obj[i];
  #line 3305 
  while ((int)adapter->num_tx_qs > i) {
    #line 3306 
    be_process_tx(adapter,txo,i);
    #line 3305 
    i = (int)adapter->num_evt_qs + i;
    #line 3305 
    txo += (unsigned long)adapter->num_evt_qs;
  }
  #line 3312 
  i = (int)eqo->idx;
  #line 3312 
  rxo = & adapter->rx_obj[i];
  #line 3312 
  while ((int)adapter->num_rx_qs > i) {
    {
      #line 3314 
      int tmp_0;
      #line 3314 
      int __UNIQUE_ID___x610;
      #line 3313 
      work = be_process_rx(rxo,napi,budget);
      {
        #line 3314 
        __UNIQUE_ID___x610 = work;
        #line 3314 
        int __UNIQUE_ID___y611 = max_work;
        #line 3314 
        if (__UNIQUE_ID___x610 > __UNIQUE_ID___y611) 
                                                     #line 3314 
                                                     tmp_0 = __UNIQUE_ID___x610; else 
                                                                    #line 3314 
                                                                    tmp_0 = __UNIQUE_ID___y611;
        }
      #line 3314 
      max_work = tmp_0;
    }
    #line 3312 
    i = (int)adapter->num_evt_qs + i;
    #line 3312 
    rxo += (unsigned long)adapter->num_evt_qs;
  }
  #line 3317 
  if ((unsigned int)eqo->idx == 0U) 
                                    #line 3318 
                                    be_process_mcc(adapter);
  #line 3320 
  if (max_work < budget) {
    #line 3321 
    napi_complete_done(napi,max_work);
    #line 3326 
    if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
      #line 3327 
      mult_enc = be_get_eq_delay_mult_enc(eqo);
    #line 3329 
    be_eq_notify(adapter,(unsigned short)((int)((unsigned short)eqo->q.id)),(_Bool)1,(_Bool)0,(unsigned short)((int)((unsigned short)num_evts)),mult_enc);
  }
  else 
       #line 3333 
       be_eq_notify(adapter,(unsigned short)((int)((unsigned short)eqo->q.id)),(_Bool)0,(_Bool)0,(unsigned short)((int)((unsigned short)num_evts)),0U);
  #line 3335 
  return max_work;
}

#line 3338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
void be_detect_error(struct be_adapter *adapter)
{
  #line 3343 
  u16 val;
  #line 3344 
  u32 i;
  #line 3340 
  u32 ue_lo = 0U;
  #line 3340 
  u32 ue_hi = 0U;
  #line 3340 
  u32 ue_lo_mask = 0U;
  #line 3340 
  u32 ue_hi_mask = 0U;
  #line 3341 
  u32 sliport_status = 0U;
  #line 3341 
  u32 sliport_err1 = 0U;
  #line 3341 
  u32 sliport_err2 = 0U;
  #line 3342 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3346 
  if ((unsigned int)be_check_error(adapter,11U) != 0U) 
                                                       #line 3347 
                                                       return;
  #line 3349 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    #line 3350 
    sliport_status = ioread32((void *)(adapter->db + 1028U));
    #line 3351 
    if ((sliport_status & 2147483648U) != 0U) {
      #line 3352 
      be_set_error(adapter,2);
      #line 3353 
      sliport_err1 = ioread32((void *)(adapter->db + 1036U));
      #line 3355 
      sliport_err2 = ioread32((void *)(adapter->db + 1040U));
      #line 3358 
      if (sliport_err1 == 2U && sliport_err2 == 0U) 
                                                    #line 3360 
                                                    _dev_info(dev,(char *)"Reset is in progress\n");
      else {
        #line 3362 
        _dev_err(dev,(char *)"Error detected in the card\n");
        #line 3363 
        _dev_err(dev,(char *)"ERR: sliport status 0x%x\n",sliport_status);
        #line 3365 
        _dev_err(dev,(char *)"ERR: sliport error1 0x%x\n",sliport_err1);
        #line 3367 
        _dev_err(dev,(char *)"ERR: sliport error2 0x%x\n",sliport_err2);
      }
    }
  }
  else {
    #line 3372 
    ue_lo = ioread32((void *)(adapter->pcicfg + 160U));
    #line 3373 
    ue_hi = ioread32((void *)(adapter->pcicfg + 164U));
    #line 3374 
    ue_lo_mask = ioread32((void *)(adapter->pcicfg + 168U));
    #line 3376 
    ue_hi_mask = ioread32((void *)(adapter->pcicfg + 172U));
    #line 3379 
    ue_lo = ~ ue_lo_mask & ue_lo;
    #line 3380 
    ue_hi = ~ ue_hi_mask & ue_hi;
    #line 3382 
    if (ue_lo != 0U || ue_hi != 0U) {
      #line 3390 
      if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
        #line 3391 
        val = be_POST_stage_get(adapter);
        #line 3392 
        if ((((int)val & 3328) != 3328 && ((int)val & 61440) != 61440) && ((int)val & 57344) != 57344) 
          #line 3398 
          return;
      }
      #line 3401 
      _dev_err(dev,(char *)"Error detected in the adapter");
      #line 3402 
      be_set_error(adapter,2);
      #line 3404 
      i = 0U;
      #line 3404 
      while (ue_lo != 0U) {
        #line 3405 
        if ((ue_lo & 1U) != 0U) 
                                #line 3406 
                                _dev_err(dev,(char *)"UE: %s bit set\n",ue_status_low_desc[i]);
        #line 3404 
        ue_lo >>= 1;
        #line 3404 
        i ++;
      }
      #line 3409 
      i = 0U;
      #line 3409 
      while (ue_hi != 0U) {
        #line 3410 
        if ((ue_hi & 1U) != 0U) 
                                #line 3411 
                                _dev_err(dev,(char *)"UE: %s bit set\n",ue_status_hi_desc[i]);
        #line 3409 
        ue_hi >>= 1;
        #line 3409 
        i ++;
      }
    }
  }
  #line 3414 
  return;
}

#line 3418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_msix_disable(struct be_adapter *adapter)
{
  #line 3420 
  if ((unsigned int)adapter->num_msix_vec != 0U) {
    #line 3421 
    pci_disable_msix(adapter->pdev);
    #line 3422 
    adapter->num_msix_vec = (unsigned short)0U;
    #line 3423 
    adapter->num_msix_roce_vec = 0U;
  }
  #line 3425 
  return;
}

#line 3427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_msix_enable(struct be_adapter *adapter)
{
  #line 3429 
  unsigned int i;
  #line 3429 
  unsigned int max_roce_eqs;
  #line 3431 
  int num_vec;
  #line 3430 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3437 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    #line 3440 
    unsigned int __UNIQUE_ID___x612;
    #line 3440 
    unsigned int tmp_0;
    #line 3438 
    max_roce_eqs = (unsigned int)((int)adapter->res.max_evt_qs - (int)adapter->res.max_nic_evt_qs);
    {
      #line 3440 
      __UNIQUE_ID___x612 = max_roce_eqs;
      #line 3440 
      unsigned int __UNIQUE_ID___y613 = num_online_cpus();
      #line 3440 
      if (__UNIQUE_ID___x612 < __UNIQUE_ID___y613) 
                                                   #line 3440 
                                                   tmp_0 = __UNIQUE_ID___x612; else 
                                                                    #line 3440 
                                                                    tmp_0 = __UNIQUE_ID___y613;
      }
    #line 3440 
    max_roce_eqs = tmp_0;
    #line 3441 
    num_vec = (int)((unsigned int)be_max_any_irqs(adapter) + max_roce_eqs);
  }
  else {
    #line 3443 
    u16 __UNIQUE_ID___x614;
    #line 3443 
    int tmp_3;
    {
      #line 3443 
      __UNIQUE_ID___x614 = adapter->cfg_num_rx_irqs;
      #line 3443 
      u16 __UNIQUE_ID___y615 = adapter->cfg_num_tx_irqs;
      #line 3443 
      if ((int)__UNIQUE_ID___x614 > (int)__UNIQUE_ID___y615) 
                                                             #line 3443 
                                                             tmp_3 = (int)__UNIQUE_ID___x614; else 
                                                                    #line 3443 
                                                                    tmp_3 = (int)__UNIQUE_ID___y615;
      }
    #line 3443 
    num_vec = tmp_3;
  }
  #line 3447 
  i = 0U;
  #line 3447 
  while (i < (unsigned int)num_vec) {
    #line 3448 
    adapter->msix_entries[i].entry = (unsigned short)i;
    #line 3447 
    i ++;
  }
  #line 3450 
  num_vec = pci_enable_msix_range(adapter->pdev,(struct msix_entry *)(& adapter->msix_entries),1,num_vec);
  #line 3452 
  if (num_vec < 0) 
                   #line 3453 
                   goto fail;
  #line 3455 
  if ((((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) && num_vec > 1) {
    #line 3456 
    adapter->num_msix_roce_vec = (unsigned int)(num_vec / 2);
    #line 3457 
    _dev_info(dev,(char *)"enabled %d MSI-x vector(s) for RoCE\n",adapter->num_msix_roce_vec);
  }
  #line 3461 
  adapter->num_msix_vec = (unsigned short)((int)((unsigned short)num_vec) - (int)((unsigned short)adapter->num_msix_roce_vec));
  #line 3463 
  _dev_info(dev,(char *)"enabled %d MSI-x vector(s) for NIC\n",(int)adapter->num_msix_vec);
  #line 3465 
  return 0;
  #line 3467 
  fail: 
        #line 3467 
  ;
  #line 3468 
  _dev_warn(dev,(char *)"MSIx enable failed\n");
  #line 3471 
  if ((unsigned int)adapter->virtfn != 0U) 
                                           #line 3472 
                                           return num_vec;
  #line 3473 
  return 0;
}

#line 3476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int be_msix_vec_get(struct be_adapter *adapter, struct be_eq_obj *eqo)
{
  #line 3479 
  return (int)adapter->msix_entries[(int)eqo->msix_idx].vector;
}

#line 3482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_msix_register(struct be_adapter *adapter)
{
  #line 3485 
  struct be_eq_obj *eqo;
  #line 3486 
  int status;
  #line 3486 
  int i;
  #line 3486 
  int vec;
  #line 3484 
  struct net_device *netdev = adapter->netdev;
  #line 3488 
  i = 0;
  #line 3488 
  eqo = & adapter->eq_obj[i];
  #line 3488 
  while ((int)adapter->num_evt_qs > i) {
    #line 3489 
    sprintf((char *)(& eqo->desc),(char *)"%s-q%d",(char *)(& netdev->name),i);
    #line 3490 
    vec = be_msix_vec_get(adapter,eqo);
    #line 3491 
    status = cif_request_irq((unsigned int)vec,& be_msix,0UL,(char *)(& eqo->desc),(void *)eqo);
    #line 3492 
    if (status != 0) 
                     #line 3493 
                     goto err_msix;
    #line 3495 
    irq_set_affinity_hint((unsigned int)vec,eqo->affinity_mask);
    #line 3488 
    i ++;
    #line 3488 
    eqo ++;
  }
  #line 3498 
  return 0;
  #line 3499 
  err_msix: 
            #line 3499 
  ;
  #line 3500 
  i --;
  #line 3500 
  while (i >= 0) {
    {
      #line 3501 
      eqo = & adapter->eq_obj[i];
      #line 3502 
      ;
      #line 3502 
      cif_free_irq((unsigned int)be_msix_vec_get(adapter,eqo),(void *)eqo);
    }
    #line 3500 
    i --;
  }
  #line 3504 
  _dev_warn(& (adapter->pdev)->dev,(char *)"MSIX Request IRQ failed - err %d\n",status);
  #line 3506 
  be_msix_disable(adapter);
  #line 3507 
  return status;
}

#line 3510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_irq_register(struct be_adapter *adapter)
{
  #line 3513 
  int status;
  #line 3512 
  struct net_device *netdev = adapter->netdev;
  #line 3515 
  if ((unsigned int)adapter->num_msix_vec != 0U) {
    #line 3516 
    status = be_msix_register(adapter);
    #line 3517 
    if (status == 0) 
                     #line 3518 
                     goto done;
    #line 3520 
    if ((unsigned int)adapter->virtfn != 0U) 
                                             #line 3521 
                                             return status;
  }
  #line 3525 
  netdev->irq = (int)(adapter->pdev)->irq;
  #line 3526 
  status = cif_request_irq((unsigned int)netdev->irq,& be_intx,128UL,(char *)(& netdev->name),(void *)(& adapter->eq_obj[0]));
  #line 3528 
  if (status != 0) {
    #line 3529 
    _dev_err(& (adapter->pdev)->dev,(char *)"INTx request IRQ failed - err %d\n",status);
    #line 3531 
    return status;
  }
  #line 3533 
  done: 
        #line 3533 
  ;
  #line 3534 
  adapter->isr_registered = (_Bool)1;
  #line 3535 
  return 0;
}

#line 3538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_irq_unregister(struct be_adapter *adapter)
{
  #line 3541 
  struct be_eq_obj *eqo;
  #line 3542 
  int i;
  #line 3542 
  int vec;
  #line 3540 
  struct net_device *netdev = adapter->netdev;
  #line 3544 
  if (! adapter->isr_registered) 
                                 #line 3545 
                                 return;
  #line 3548 
  if ((unsigned int)adapter->num_msix_vec == 0U) {
    #line 3549 
    cif_free_irq((unsigned int)netdev->irq,(void *)(& adapter->eq_obj[0]));
    #line 3550 
    goto done;
  }
  #line 3554 
  i = 0;
  #line 3554 
  eqo = & adapter->eq_obj[i];
  #line 3554 
  while ((int)adapter->num_evt_qs > i) {
    #line 3555 
    vec = be_msix_vec_get(adapter,eqo);
    #line 3556 
    irq_set_affinity_hint((unsigned int)vec,(struct cpumask *)0);
    #line 3557 
    cif_free_irq((unsigned int)vec,(void *)eqo);
    #line 3554 
    i ++;
    #line 3554 
    eqo ++;
  }
  #line 3560 
  done: 
        #line 3560 
  ;
  #line 3561 
  adapter->isr_registered = (_Bool)0;
  #line 3562 
  return;
}

#line 3564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_qs_destroy(struct be_adapter *adapter)
{
  #line 3567 
  struct be_queue_info *q;
  #line 3568 
  struct be_rx_obj *rxo;
  #line 3569 
  int i;
  #line 3566 
  struct rss_info *rss = & adapter->rss_info;
  #line 3571 
  i = 0;
  #line 3571 
  rxo = & adapter->rx_obj[i];
  #line 3571 
  while ((int)adapter->num_rx_qs > i) {
    #line 3572 
    q = & rxo->q;
    #line 3573 
    if ((int)q->created != 0) {
      #line 3580 
      if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
        #line 3581 
        be_rx_cq_clean(rxo);
        #line 3582 
        if (atomic_read_0(& q->used) == 0) 
                                           #line 3583 
                                           be_post_rx_frags(rxo,3264U,64U);
      }
      #line 3587 
      be_cmd_rxq_destroy(adapter,q);
      #line 3588 
      be_rx_cq_clean(rxo);
      #line 3589 
      be_rxq_clean(rxo);
    }
    #line 3591 
    be_queue_free(adapter,q);
    #line 3571 
    i ++;
    #line 3571 
    rxo ++;
  }
  #line 3594 
  if (rss->rss_flags != 0ULL) {
    #line 3595 
    rss->rss_flags = 0ULL;
    #line 3596 
    be_cmd_rss_config(adapter,(u8 *)(& rss->rsstable),(unsigned int)rss->rss_flags,(unsigned short)128,(u8 *)(& rss->rss_hkey));
  }
  #line 3599 
  return;
}

#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_disable_if_filters(struct be_adapter *adapter)
{
  #line 3604 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) || (unsigned int)adapter->virtfn == 0U) 
    #line 3604 
    goto _LOR;
  else {
    #line 3604 
    if ((int)check_privilege(adapter,64U) != 0) {
      #line 3604 
      _LOR: {
              #line 3606 
              be_dev_mac_del(adapter,(int)*(adapter->pmac_id));
              #line 3607 
              eth_zero_addr((u8 *)(& adapter->dev_mac));
            }
    }
  }
  #line 3610 
  be_clear_uc_list(adapter);
  #line 3611 
  be_clear_mc_list(adapter);
  #line 3627 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    #line 3628 
    be_cmd_rx_filter(adapter,6840U,0U);
    #line 3629 
    adapter->if_flags &= 4294960455U;
  }
  #line 3631 
  return;
}

#line 3633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_close(struct net_device *netdev)
{
  #line 3636 
  struct be_eq_obj *eqo;
  #line 3637 
  int i;
  #line 3635 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 3642 
  if (((unsigned long)adapter->flags & 512UL) == 0UL) 
                                                      #line 3643 
                                                      return 0;
  #line 3648 
  flush_workqueue(be_wq);
  #line 3650 
  be_disable_if_filters(adapter);
  #line 3652 
  if (((unsigned long)adapter->flags & 64UL) != 0UL) {
    #line 3653 
    i = 0;
    #line 3653 
    eqo = & adapter->eq_obj[i];
    #line 3653 
    while ((int)adapter->num_evt_qs > i) {
      #line 3654 
      napi_disable(& eqo->napi);
      #line 3653 
      i ++;
      #line 3653 
      eqo ++;
    }
    #line 3656 
    adapter->flags &= 4294967231U;
  }
  #line 3659 
  be_async_mcc_disable(adapter);
  #line 3664 
  netif_tx_disable(netdev);
  #line 3665 
  be_tx_compl_clean(adapter);
  #line 3667 
  be_rx_qs_destroy(adapter);
  #line 3669 
  i = 0;
  #line 3669 
  eqo = & adapter->eq_obj[i];
  #line 3669 
  while ((int)adapter->num_evt_qs > i) {
    #line 3670 
    if ((unsigned int)adapter->num_msix_vec != 0U) {
      #line 3671 
      synchronize_irq((unsigned int)be_msix_vec_get(adapter,eqo));
    }
    else 
         #line 3673 
         synchronize_irq((unsigned int)netdev->irq);
    #line 3674 
    be_eq_clean(eqo);
    #line 3669 
    i ++;
    #line 3669 
    eqo ++;
  }
  #line 3677 
  be_irq_unregister(adapter);
  #line 3679 
  return 0;
}

#line 3682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_rx_qs_create(struct be_adapter *adapter)
{
  #line 3685 
  u8 rss_key[40U];
  #line 3686 
  struct be_rx_obj *rxo;
  #line 3687 
  int rc;
  #line 3687 
  int i;
  #line 3687 
  int j;
  #line 3684 
  struct rss_info *rss = & adapter->rss_info;
  #line 3689 
  i = 0;
  #line 3689 
  rxo = & adapter->rx_obj[i];
  #line 3689 
  while ((int)adapter->num_rx_qs > i) {
    #line 3690 
    rc = be_queue_alloc(adapter,& rxo->q,(unsigned short)1024,(unsigned short)8);
    #line 3692 
    if (rc != 0) 
                 #line 3693 
                 return rc;
    #line 3689 
    i ++;
    #line 3689 
    rxo ++;
  }
  #line 3696 
  if ((unsigned int)adapter->need_def_rxq != 0U || (unsigned int)adapter->num_rss_qs == 0U) {
    #line 3697 
    rxo = & adapter->rx_obj[(int)adapter->num_rx_qs + -1];
    #line 3698 
    rc = be_cmd_rxq_create(adapter,& rxo->q,(unsigned short)((int)((unsigned short)rxo->cq.id)),(unsigned short)((int)rx_frag_size),(unsigned int)adapter->if_handle,0U,& rxo->rss_id);
    #line 3701 
    if (rc != 0) 
                 #line 3702 
                 return rc;
  }
  #line 3705 
  i = 0;
  #line 3705 
  rxo = & adapter->rx_obj[i];
  #line 3705 
  while ((int)adapter->num_rss_qs > i) {
    #line 3706 
    rc = be_cmd_rxq_create(adapter,& rxo->q,(unsigned short)((int)((unsigned short)rxo->cq.id)),(unsigned short)((int)rx_frag_size),(unsigned int)adapter->if_handle,1U,& rxo->rss_id);
    #line 3709 
    if (rc != 0) 
                 #line 3710 
                 return rc;
    #line 3705 
    i ++;
    #line 3705 
    rxo ++;
  }
  #line 3713 
  if ((int)be_multi_rxq(adapter) != 0) {
    #line 3714 
    j = 0;
    #line 3714 
    while (j <= 127) {
      #line 3715 
      i = 0;
      #line 3715 
      rxo = & adapter->rx_obj[i];
      #line 3715 
      while ((int)adapter->num_rss_qs > i) {
        #line 3716 
        if (j + i > 127) 
                         #line 3717 
                         break;
        #line 3718 
        rss->rsstable[j + i] = rxo->rss_id;
        #line 3719 
        rss->rss_queue[j + i] = (unsigned char)i;
        #line 3715 
        i ++;
        #line 3715 
        rxo ++;
      }
      #line 3714 
      j = (int)adapter->num_rss_qs + j;
    }
    #line 3722 
    rss->rss_flags = 15ULL;
    #line 3725 
    if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
      #line 3726 
      rss->rss_flags |= 48ULL;
    #line 3729 
    netdev_rss_key_fill((void *)(& rss_key),40UL);
    #line 3730 
    rc = be_cmd_rss_config(adapter,(u8 *)(& rss->rsstable),(unsigned int)rss->rss_flags,(unsigned short)128,(u8 *)(& rss_key));
    #line 3732 
    if (rc != 0) {
      #line 3733 
      rss->rss_flags = 0ULL;
      #line 3734 
      return rc;
    }
    #line 3737 
    memcpy((void *)(& rss->rss_hkey),(void *)(& rss_key),40UL);
  }
  else 
       #line 3740 
       rss->rss_flags = 0ULL;
  #line 3747 
  i = 0;
  #line 3747 
  rxo = & adapter->rx_obj[i];
  #line 3747 
  while ((int)adapter->num_rx_qs > i) {
    #line 3748 
    be_post_rx_frags(rxo,3264U,1023U);
    #line 3747 
    i ++;
    #line 3747 
    rxo ++;
  }
  #line 3750 
  return 0;
}

#line 3753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_enable_if_filters(struct be_adapter *adapter)
{
  #line 3755 
  int status;
  #line 3757 
  status = be_cmd_rx_filter(adapter,2096U,1U);
  #line 3758 
  if (status != 0) 
                   #line 3759 
                   return status;
  #line 3765 
  if (! ether_addr_equal((u8 *)(& adapter->dev_mac),
                         (adapter->netdev)->dev_addr)) {
    #line 3766 
    int old_pmac_id = -1;
    #line 3769 
    if (! is_zero_ether_addr((u8 *)(& adapter->dev_mac))) 
                                                          #line 3770 
                                                          old_pmac_id = (int)*(adapter->pmac_id);
    #line 3772 
    status = be_dev_mac_add(adapter,(adapter->netdev)->dev_addr);
    #line 3773 
    if (status != 0) 
                     #line 3774 
                     return status;
    #line 3779 
    if (old_pmac_id >= 0 && *(adapter->pmac_id) != (unsigned int)old_pmac_id) 
      #line 3780 
      be_dev_mac_del(adapter,old_pmac_id);
    #line 3782 
    ether_addr_copy((u8 *)(& adapter->dev_mac),(adapter->netdev)->dev_addr);
  }
  #line 3785 
  if ((unsigned int)adapter->vlans_added != 0U) 
                                                #line 3786 
                                                be_vid_config(adapter);
  #line 3788 
  __be_set_rx_mode(adapter);
  #line 3790 
  return 0;
}

#line 3793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_open(struct net_device *netdev)
{
  #line 3796 
  struct be_eq_obj *eqo;
  #line 3797 
  struct be_rx_obj *rxo;
  #line 3798 
  struct be_tx_obj *txo;
  #line 3799 
  u8 link_status;
  #line 3800 
  int status;
  #line 3800 
  int i;
  #line 3795 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 3802 
  status = be_rx_qs_create(adapter);
  #line 3803 
  if (status != 0) 
                   #line 3804 
                   goto err;
  #line 3806 
  status = be_enable_if_filters(adapter);
  #line 3807 
  if (status != 0) 
                   #line 3808 
                   goto err;
  #line 3810 
  status = be_irq_register(adapter);
  #line 3811 
  if (status != 0) 
                   #line 3812 
                   goto err;
  #line 3814 
  i = 0;
  #line 3814 
  rxo = & adapter->rx_obj[i];
  #line 3814 
  while ((int)adapter->num_rx_qs > i) {
    #line 3815 
    be_cq_notify(adapter,(unsigned short)((int)((unsigned short)rxo->cq.id)),(_Bool)1,(unsigned short)0);
    #line 3814 
    i ++;
    #line 3814 
    rxo ++;
  }
  #line 3817 
  i = 0;
  #line 3817 
  txo = & adapter->tx_obj[i];
  #line 3817 
  while ((int)adapter->num_tx_qs > i) {
    #line 3818 
    be_cq_notify(adapter,(unsigned short)((int)((unsigned short)txo->cq.id)),(_Bool)1,(unsigned short)0);
    #line 3817 
    i ++;
    #line 3817 
    txo ++;
  }
  #line 3820 
  be_async_mcc_enable(adapter);
  #line 3822 
  i = 0;
  #line 3822 
  eqo = & adapter->eq_obj[i];
  #line 3822 
  while ((int)adapter->num_evt_qs > i) {
    #line 3823 
    napi_enable(& eqo->napi);
    #line 3824 
    be_eq_notify(adapter,(unsigned short)((int)((unsigned short)eqo->q.id)),(_Bool)1,(_Bool)1,(unsigned short)0,0U);
    #line 3822 
    i ++;
    #line 3822 
    eqo ++;
  }
  #line 3826 
  adapter->flags |= 64U;
  #line 3828 
  status = be_cmd_link_status_query(adapter,(u16 *)0U,& link_status,0U);
  #line 3829 
  if (status == 0) 
                   #line 3830 
                   be_link_status_update(adapter,(unsigned char)((int)link_status));
  #line 3832 
  netif_tx_start_all_queues(netdev);
  #line 3833 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
    #line 3834 
    udp_tunnel_get_rx_info(netdev);
  #line 3836 
  return 0;
  #line 3837 
  err: 
       #line 3837 
  ;
  #line 3838 
  be_close(adapter->netdev);
  #line 3839 
  return -5;
}

#line 3842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_vf_eth_addr_generate(struct be_adapter *adapter, u8 *mac)
{
  #line 3844 
  u32 addr;
  #line 3846 
  addr = jhash((void *)(adapter->netdev)->dev_addr,6U,0U);
  #line 3848 
  *(mac + 5U) = (unsigned char)addr;
  #line 3849 
  *(mac + 4U) = (unsigned char)(addr >> 8);
  #line 3850 
  *(mac + 3U) = (unsigned char)(addr >> 16);
  #line 3852 
  memcpy((void *)mac,(void *)(adapter->netdev)->dev_addr,3UL);
  #line 3853 
  return;
}

#line 3861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vf_eth_addr_config(struct be_adapter *adapter)
{
  #line 3863 
  u32 vf;
  #line 3865 
  u8 mac[6U];
  #line 3866 
  struct be_vf_cfg *vf_cfg;
  #line 3864 
  int status = 0;
  #line 3868 
  be_vf_eth_addr_generate(adapter,(u8 *)(& mac));
  #line 3870 
  vf = 0U;
  #line 3870 
  vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 3870 
  while ((unsigned int)adapter->num_vfs > vf) {
    #line 3871 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
      #line 3872 
      status = be_cmd_pmac_add(adapter,(u8 *)(& mac),(unsigned int)vf_cfg->if_handle,(u32 *)(& vf_cfg->pmac_id),vf + 1U); else 
                                                                    #line 3876 
                                                                    status = be_cmd_set_mac(adapter,(u8 *)(& mac),vf_cfg->if_handle,vf + 1U);
    #line 3879 
    if (status != 0) 
                     #line 3880 
                     _dev_err(& (adapter->pdev)->dev,(char *)"Mac address assignment failed for VF %d\n",vf); else 
                                                                    #line 3884 
                                                                    memcpy((void *)(& vf_cfg->mac_addr),(void *)(& mac),6UL);
    #line 3886 
    mac[5] = (unsigned char)((unsigned int)mac[5] + 1U);
    #line 3870 
    vf ++;
    #line 3870 
    vf_cfg ++;
  }
  #line 3888 
  return status;
}

#line 3891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vfs_mac_query(struct be_adapter *adapter)
{
  #line 3893 
  int status;
  #line 3893 
  int vf;
  #line 3894 
  u8 mac[6U];
  #line 3895 
  struct be_vf_cfg *vf_cfg;
  #line 3897 
  vf = 0;
  #line 3897 
  vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 3897 
  while ((int)adapter->num_vfs > vf) {
    #line 3898 
    status = be_cmd_get_active_mac(adapter,(unsigned int)vf_cfg->pmac_id,(u8 *)(& mac),(unsigned int)vf_cfg->if_handle,(_Bool)0,(unsigned int)(vf + 1));
    #line 3901 
    if (status != 0) 
                     #line 3902 
                     return status;
    #line 3903 
    memcpy((void *)(& vf_cfg->mac_addr),(void *)(& mac),6UL);
    #line 3897 
    vf ++;
    #line 3897 
    vf_cfg ++;
  }
  #line 3905 
  return 0;
}

#line 3908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_vf_clear(struct be_adapter *adapter)
{
  #line 3910 
  struct be_vf_cfg *vf_cfg;
  #line 3911 
  u32 vf;
  #line 3913 
  if (pci_vfs_assigned(adapter->pdev) != 0) {
    #line 3914 
    _dev_warn(& (adapter->pdev)->dev,(char *)"VFs are assigned to VMs: not disabling VFs\n");
    #line 3916 
    goto done;
  }
  #line 3919 
  pci_disable_sriov(adapter->pdev);
  #line 3921 
  vf = 0U;
  #line 3921 
  vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 3921 
  while ((unsigned int)adapter->num_vfs > vf) {
    #line 3922 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
      #line 3923 
      be_cmd_pmac_del(adapter,(unsigned int)vf_cfg->if_handle,vf_cfg->pmac_id,vf + 1U); else 
                                                                    #line 3926 
                                                                    be_cmd_set_mac(adapter,(u8 *)0U,vf_cfg->if_handle,vf + 1U);
    #line 3929 
    be_cmd_if_destroy(adapter,vf_cfg->if_handle,vf + 1U);
    #line 3921 
    vf ++;
    #line 3921 
    vf_cfg ++;
  }
  #line 3932 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) 
    #line 3933 
    be_cmd_set_hsw_config(adapter,(unsigned short)0,0U,(unsigned short)((int)((unsigned short)adapter->if_handle)),(unsigned short)1,(unsigned char)0);
  #line 3936 
  done: 
        #line 3936 
  ;
  #line 3937 
  kfree((void *)adapter->vf_cfg);
  #line 3938 
  adapter->num_vfs = (unsigned short)0U;
  #line 3939 
  adapter->flags &= 4294967291U;
  #line 3940 
  return;
}

#line 3942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_clear_queues(struct be_adapter *adapter)
{
  #line 3944 
  be_mcc_queues_destroy(adapter);
  #line 3945 
  be_rx_cqs_destroy(adapter);
  #line 3946 
  be_tx_queues_destroy(adapter);
  #line 3947 
  be_evt_queues_destroy(adapter);
  #line 3948 
  return;
}

#line 3950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_cancel_worker(struct be_adapter *adapter)
{
  #line 3952 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) {
    #line 3953 
    cancel_delayed_work_sync(& adapter->work);
    #line 3954 
    adapter->flags &= 4294967287U;
  }
  #line 3956 
  return;
}

#line 3958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_cancel_err_detection(struct be_adapter *adapter)
{
  #line 3960 
  struct be_error_recovery *err_rec = & adapter->error_recovery;
  #line 3962 
  if (be_err_recovery_workq == (struct workqueue_struct *)0) 
                                                             #line 3963 
                                                             return;
  #line 3965 
  if (((unsigned long)adapter->flags & 2048UL) != 0UL) {
    #line 3966 
    cancel_delayed_work_sync(& err_rec->err_detection_work);
    #line 3967 
    adapter->flags &= 4294965247U;
  }
  #line 3969 
  return;
}

#line 3971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_enable_vxlan_offloads(struct be_adapter *adapter)
{
  #line 3979 
  void *__mptr;
  #line 3975 
  struct be_vxlan_port *vxlan_port;
  #line 3976 
  __be16 port;
  #line 3977 
  int status;
  #line 3973 
  struct net_device *netdev = adapter->netdev;
  #line 3974 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3979 
  __mptr = (void *)adapter->vxlan_port_list.next;
  #line 3979 
  vxlan_port = ((struct be_vxlan_port *)__mptr);
  #line 3981 
  port = vxlan_port->port;
  #line 3983 
  status = be_cmd_manage_iface(adapter,(unsigned int)adapter->if_handle,(unsigned char)0);
  #line 3985 
  if (status != 0) {
    #line 3986 
    _dev_warn(dev,(char *)"Failed to convert normal interface to tunnel\n");
    #line 3987 
    return status;
  }
  #line 3989 
  adapter->flags |= 256U;
  #line 3991 
  status = be_cmd_set_vxlan_port(adapter,(unsigned short)((int)port));
  #line 3992 
  if (status != 0) {
    #line 3993 
    _dev_warn(dev,(char *)"Failed to add VxLAN port\n");
    #line 3994 
    return status;
  }
  #line 3996 
  adapter->vxlan_port = port;
  #line 3998 
  netdev->hw_enc_features |= 68222994ULL;
  #line 4002 
  ;
  #line 4002 
  _dev_info(dev,(char *)"Enabled VxLAN offloads for UDP port %d\n",(int)__builtin_bswap16((unsigned short)((int)port)));
  #line 4004 
  return 0;
}

#line 4007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_disable_vxlan_offloads(struct be_adapter *adapter)
{
  #line 4009 
  struct net_device *netdev = adapter->netdev;
  #line 4011 
  if (((unsigned long)adapter->flags & 256UL) != 0UL) 
                                                      #line 4012 
                                                      be_cmd_manage_iface(adapter,(unsigned int)adapter->if_handle,(unsigned char)1);
  #line 4015 
  if ((unsigned int)adapter->vxlan_port != 0U) 
                                               #line 4016 
                                               be_cmd_set_vxlan_port(adapter,(unsigned short)0);
  #line 4018 
  adapter->flags &= 4294967039U;
  #line 4019 
  adapter->vxlan_port = (unsigned short)0U;
  #line 4021 
  netdev->hw_enc_features = 0ULL;
  #line 4022 
  return;
}

#line 4024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_calculate_vf_res(struct be_adapter *adapter, u16 num_vfs_0, struct be_resources *vft_res)
{
  #line 4027 
  struct be_resources res = adapter->pool_res;
  #line 4028 
  u32 vf_if_cap_flags = res.vf_if_cap_flags;
  #line 4029 
  struct be_resources res_mod = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
  #line 4030 
  u16 num_vf_qs = (unsigned short)1U;
  #line 4033 
  if ((unsigned int)num_vfs_0 != 0U) {
    #line 4037 
    int __UNIQUE_ID___x616;
    #line 4037 
    int tmp;
    {
      #line 4037 
      __UNIQUE_ID___x616 = 3;
      #line 4037 
      int __UNIQUE_ID___y617 = (int)res.max_rss_qs / ((int)num_vfs_0 + 1);
      #line 4037 
      if (__UNIQUE_ID___x616 < __UNIQUE_ID___y617) 
                                                   #line 4037 
                                                   tmp = __UNIQUE_ID___x616; else 
                                                                    #line 4037 
                                                                    tmp = __UNIQUE_ID___y617;
      }
    #line 4037 
    num_vf_qs = (unsigned short)tmp;
    #line 4044 
    if ((int)adapter->pool_res.max_rss_tables <= (int)num_vfs_0) 
                                                                 #line 4045 
                                                                 num_vf_qs = (unsigned short)1U;
  }
  #line 4051 
  be_cmd_get_profile_config(adapter,& res_mod,(struct be_port_resources *)0,(unsigned char)2,(unsigned char)1,(unsigned char)0);
  #line 4059 
  if ((res_mod.vf_if_cap_flags & 4U) != 0U) {
    #line 4060 
    vft_res->flags |= 1U;
    #line 4061 
    if ((unsigned int)num_vf_qs > 1U) {
      #line 4062 
      vf_if_cap_flags |= 4U;
      #line 4063 
      if ((res.if_cap_flags & 16777216U) != 0U) 
                                                #line 4064 
                                                vf_if_cap_flags |= 16777216U;
    }
    else 
         #line 4066 
         vf_if_cap_flags &= 4278190075U;
  }
  else 
       #line 4070 
       num_vf_qs = (unsigned short)1U;
  #line 4073 
  if ((res_mod.vf_if_cap_flags & 128U) != 0U) {
    #line 4074 
    vft_res->flags |= 1U;
    #line 4075 
    vf_if_cap_flags &= 4294967167U;
  }
  #line 4078 
  vft_res->vf_if_cap_flags = vf_if_cap_flags;
  #line 4079 
  vft_res->max_rx_qs = num_vf_qs;
  #line 4080 
  vft_res->max_rss_qs = num_vf_qs;
  #line 4081 
  vft_res->max_tx_qs = (unsigned short)((int)res.max_tx_qs / ((int)num_vfs_0 + 1));
  #line 4082 
  vft_res->max_cq_count = (unsigned short)((int)res.max_cq_count / ((int)num_vfs_0 + 1));
  #line 4087 
  if ((unsigned int)res_mod.max_uc_mac == 65535U) 
                                                  #line 4088 
                                                  vft_res->max_uc_mac = (unsigned short)((int)res.max_uc_mac / ((int)num_vfs_0 + 1));
  #line 4090 
  if ((unsigned int)res_mod.max_vlans == 65535U) 
                                                 #line 4091 
                                                 vft_res->max_vlans = (unsigned short)((int)res.max_vlans / ((int)num_vfs_0 + 1));
  #line 4093 
  if ((unsigned int)res_mod.max_iface_count == 65535U) 
                                                       #line 4094 
                                                       vft_res->max_iface_count = (unsigned short)((int)res.max_iface_count / ((int)num_vfs_0 + 1));
  #line 4096 
  if ((unsigned int)res_mod.max_mcc_count == 65535U) 
                                                     #line 4097 
                                                     vft_res->max_mcc_count = (unsigned short)((int)res.max_mcc_count / ((int)num_vfs_0 + 1));
  #line 4098 
  return;
}

#line 4100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_if_destroy(struct be_adapter *adapter)
{
  #line 4102 
  be_cmd_if_destroy(adapter,adapter->if_handle,0U);
  #line 4104 
  kfree((void *)adapter->pmac_id);
  #line 4105 
  adapter->pmac_id = (u32 *)0U;
  #line 4107 
  kfree((void *)adapter->mc_list);
  #line 4108 
  adapter->mc_list = (struct be_eth_addr *)0;
  #line 4110 
  kfree((void *)adapter->uc_list);
  #line 4111 
  adapter->uc_list = (struct be_eth_addr *)0;
  #line 4112 
  return;
}

#line 4114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_clear(struct be_adapter *adapter)
{
  #line 4116 
  struct pci_dev *pdev = adapter->pdev;
  #line 4117 
  struct be_resources vft_res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
  #line 4119 
  be_cancel_worker(adapter);
  #line 4121 
  flush_workqueue(be_wq);
  #line 4123 
  if (((unsigned long)adapter->flags & 4UL) != 0UL) 
                                                    #line 4124 
                                                    be_vf_clear(adapter);
  #line 4129 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (unsigned int)adapter->virtfn == 0U) {
    #line 4129 
    if (pci_vfs_assigned(pdev) == 0) {
      #line 4131 
      ;
      #line 4131 
      be_calculate_vf_res(adapter,(unsigned short)((int)((unsigned short)pci_sriov_get_totalvfs(pdev))),& vft_res);
      #line 4134 
      ;
      #line 4134 
      ;
      #line 4134 
      be_cmd_set_sriov_config(adapter,adapter->pool_res,(unsigned short)((int)((unsigned short)pci_sriov_get_totalvfs(pdev))),& vft_res);
    }
  }
  #line 4139 
  be_disable_vxlan_offloads(adapter);
  #line 4141 
  be_if_destroy(adapter);
  #line 4143 
  be_clear_queues(adapter);
  #line 4145 
  be_msix_disable(adapter);
  #line 4146 
  adapter->flags &= 4294966783U;
  #line 4147 
  return 0;
}

#line 4150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vfs_if_create(struct be_adapter *adapter)
{
  #line 4153 
  u32 cap_flags;
  #line 4153 
  u32 en_flags;
  #line 4153 
  u32 vf;
  #line 4154 
  struct be_vf_cfg *vf_cfg;
  #line 4155 
  int status;
  #line 4152 
  struct be_resources res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
  #line 4158 
  cap_flags = 6192U;
  #line 4160 
  vf = 0U;
  #line 4160 
  vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 4160 
  while ((unsigned int)adapter->num_vfs > vf) {
    #line 4161 
    if ((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) {
      #line 4162 
      status = be_cmd_get_profile_config(adapter,& res,(struct be_port_resources *)0,(unsigned char)2,(unsigned char)0,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
      #line 4166 
      if (status == 0) {
        #line 4167 
        cap_flags = res.if_cap_flags;
        #line 4171 
        cap_flags &= 4294967167U;
      }
    }
    #line 4176 
    en_flags = cap_flags & 6192U;
    #line 4177 
    status = be_cmd_if_create(adapter,cap_flags,en_flags,(u32 *)(& vf_cfg->if_handle),vf + 1U);
    #line 4179 
    if (status != 0) 
                     #line 4180 
                     return status;
    #line 4160 
    vf ++;
    #line 4160 
    vf_cfg ++;
  }
  #line 4183 
  return 0;
}

#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vf_setup_init(struct be_adapter *adapter)
{
  #line 4188 
  struct be_vf_cfg *vf_cfg;
  #line 4189 
  int vf;
  #line 4191 
  adapter->vf_cfg = (struct be_vf_cfg *)kcalloc((unsigned long)adapter->num_vfs,36UL,3264U);
  #line 4193 
  if (adapter->vf_cfg == (struct be_vf_cfg *)0) 
                                                #line 4194 
                                                return -12;
  #line 4196 
  vf = 0;
  #line 4196 
  vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 4196 
  while ((int)adapter->num_vfs > vf) {
    #line 4197 
    vf_cfg->if_handle = -1;
    #line 4198 
    vf_cfg->pmac_id = -1;
    #line 4196 
    vf ++;
    #line 4196 
    vf_cfg ++;
  }
  #line 4200 
  return 0;
}

#line 4203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vf_setup(struct be_adapter *adapter)
{
  #line 4206 
  struct be_vf_cfg *vf_cfg;
  #line 4207 
  int status;
  #line 4207 
  int old_vfs;
  #line 4207 
  int vf;
  #line 4208 
  bool spoofchk;
  #line 4205 
  struct device *dev = & (adapter->pdev)->dev;
  #line 4210 
  old_vfs = pci_num_vf(adapter->pdev);
  #line 4212 
  status = be_vf_setup_init(adapter);
  #line 4213 
  if (status != 0) 
                   #line 4214 
                   goto err;
  #line 4216 
  if (old_vfs != 0) {
    #line 4217 
    vf = 0;
    #line 4217 
    vf_cfg = adapter->vf_cfg + (unsigned long)vf;
    #line 4217 
    while ((int)adapter->num_vfs > vf) {
      #line 4218 
      status = be_cmd_get_if_id(adapter,vf_cfg,vf);
      #line 4219 
      if (status != 0) 
                       #line 4220 
                       goto err;
      #line 4217 
      vf ++;
      #line 4217 
      vf_cfg ++;
    }
    #line 4223 
    status = be_vfs_mac_query(adapter);
    #line 4224 
    if (status != 0) 
                     #line 4225 
                     goto err;
  }
  else {
    #line 4227 
    status = be_vfs_if_create(adapter);
    #line 4228 
    if (status != 0) 
                     #line 4229 
                     goto err;
    #line 4231 
    status = be_vf_eth_addr_config(adapter);
    #line 4232 
    if (status != 0) 
                     #line 4233 
                     goto err;
  }
  #line 4236 
  vf = 0;
  #line 4236 
  vf_cfg = adapter->vf_cfg + (unsigned long)vf;
  #line 4236 
  while ((int)adapter->num_vfs > vf) {
    #line 4238 
    status = be_cmd_get_fn_privileges(adapter,& vf_cfg->privileges,(unsigned int)(vf + 1));
    #line 4240 
    if (status == 0 && (vf_cfg->privileges & 64U) == 0U) {
      #line 4241 
      status = be_cmd_set_fn_privileges(adapter,vf_cfg->privileges | 64U,(unsigned int)(vf + 1));
      #line 4245 
      if (status == 0) {
        #line 4246 
        vf_cfg->privileges |= 64U;
        #line 4247 
        _dev_info(dev,(char *)"VF%d has FILTMGMT privilege\n",vf);
      }
    }
    #line 4253 
    if (old_vfs == 0) 
                      #line 4254 
                      be_cmd_config_qos(adapter,0U,(unsigned short)0,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
    #line 4256 
    status = be_cmd_get_hsw_config(adapter,(u16 *)0U,(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_cfg->if_handle)),(u8 *)0U,& spoofchk);
    #line 4259 
    if (status == 0) 
                     #line 4260 
                     vf_cfg->spoofchk = spoofchk;
    #line 4262 
    if (old_vfs == 0) {
      #line 4263 
      be_cmd_enable_vf(adapter,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
      #line 4264 
      be_cmd_set_logical_link_config(adapter,0,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
    }
    #line 4236 
    vf ++;
    #line 4236 
    vf_cfg ++;
  }
  #line 4270 
  if (old_vfs == 0) {
    #line 4271 
    status = pci_enable_sriov(adapter->pdev,(int)adapter->num_vfs);
    #line 4272 
    if (status != 0) {
      #line 4273 
      _dev_err(dev,(char *)"SRIOV enable failed\n");
      #line 4274 
      adapter->num_vfs = (unsigned short)0U;
      #line 4275 
      goto err;
    }
  }
  #line 4279 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
    #line 4281 
    status = be_cmd_set_hsw_config(adapter,(unsigned short)0,0U,(unsigned short)((int)((unsigned short)adapter->if_handle)),(unsigned short)2,(unsigned char)0);
    #line 4284 
    if (status != 0) 
                     #line 4285 
                     goto err;
  }
  #line 4288 
  adapter->flags |= 4U;
  #line 4289 
  return 0;
  #line 4290 
  err: 
       #line 4290 
  ;
  #line 4291 
  _dev_err(dev,(char *)"VF setup failed\n");
  #line 4292 
  be_vf_clear(adapter);
  #line 4293 
  return status;
}

#line 4298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static u8 be_convert_mc_type(u32 function_mode)
{
  #line 4300 
  if ((function_mode & 131072U) != 0U && (function_mode & 1024U) != 0U) 
    #line 4301 
    return (unsigned char)4U;
  else 
    #line 4302 
    if ((function_mode & 1024U) != 0U) 
                                       #line 4303 
                                       return (unsigned char)3U;
    else 
      #line 4304 
      if ((function_mode & 131072U) != 0U) 
                                           #line 4305 
                                           return (unsigned char)7U;
      else 
        #line 4306 
        if ((function_mode & 16777216U) != 0U) 
                                               #line 4307 
                                               return (unsigned char)2U; else 
                                                                    #line 4309 
                                                                    return (unsigned char)1U;
}

#line 4313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void BEx_get_resources(struct be_adapter *adapter, struct be_resources *res)
{
  #line 4316 
  bool use_sriov = (_Bool)((unsigned int)adapter->num_vfs != 0U);
  #line 4318 
  if ((unsigned int)adapter->virtfn == 0U) 
                                           #line 4319 
                                           res->max_uc_mac = (unsigned short)30U; else 
                                                                    #line 4321 
                                                                    res->max_uc_mac = (unsigned short)2U;
  #line 4323 
  adapter->mc_type = be_convert_mc_type(adapter->function_mode);
  #line 4325 
  if ((int)be_is_mc(adapter) != 0) 
    #line 4329 
    if ((adapter->function_mode & 1024U) != 0U) 
                                                #line 4330 
                                                res->max_vlans = (unsigned short)8U; else 
                                                                    #line 4335 
                                                                    res->max_vlans = (unsigned short)15U;
  else 
       #line 4337 
       res->max_vlans = (unsigned short)64U;
  #line 4340 
  res->max_mcast_mac = (unsigned short)64U;
  #line 4346 
  if (((((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) || (int)use_sriov != 0) || adapter->port_num > 1U) || (unsigned int)adapter->virtfn != 0U) 
    #line 4346 
    goto _LOR;
  else {
    #line 4347 
    if ((int)be_is_mc(adapter) != 0) {
      #line 4348 
      if ((adapter->function_caps & 2U) == 0U) 
                                               #line 4346 
                                               _LOR: 
                                                     #line 4350 
                                                     res->max_tx_qs = (unsigned short)1U; else 
                                                                    #line 4346 
                                                                    goto _LAND;
    }
    else {
      #line 4346 
      _LAND: 
             #line 4351 
      ;
      #line 4351 
      if ((adapter->function_caps & 64U) != 0U) {
        #line 4352 
        struct be_resources super_nic_res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
        #line 4357 
        be_cmd_get_profile_config(adapter,& super_nic_res,(struct be_port_resources *)0,(unsigned char)2,(unsigned char)0,(unsigned char)0);
        #line 4361 
        if ((int)super_nic_res.max_tx_qs != 0) 
                                               #line 4361 
                                               res->max_tx_qs = (unsigned short)((int)super_nic_res.max_tx_qs); else 
                                                                    #line 4361 
                                                                    res->max_tx_qs = (unsigned short)16U;
      }
      else 
           #line 4363 
           res->max_tx_qs = (unsigned short)16U;
    }
  }
  #line 4366 
  if (((adapter->function_caps & 2U) != 0U && ! use_sriov) && (unsigned int)adapter->virtfn == 0U) 
    #line 4368 
    if ((int)adapter->be3_native != 0) 
                                       #line 4368 
                                       res->max_rss_qs = (unsigned short)16U; else 
                                                                    #line 4368 
                                                                    res->max_rss_qs = (unsigned short)4U;
  #line 4370 
  res->max_rx_qs = (unsigned short)((unsigned int)res->max_rss_qs + 1U);
  #line 4372 
  if ((unsigned int)adapter->virtfn == 0U) 
    #line 4373 
    if ((unsigned int)adapter->pool_res.max_vfs != 0U) 
                                                       #line 4373 
                                                       res->max_evt_qs = (unsigned short)8U; else 
                                                                    #line 4373 
                                                                    res->max_evt_qs = (unsigned short)16U;
  else 
       #line 4376 
       res->max_evt_qs = (unsigned short)1U;
  #line 4378 
  res->if_cap_flags = 16784316U;
  #line 4379 
  res->if_cap_flags &= 4278190079U;
  #line 4380 
  if ((adapter->function_caps & 2U) == 0U) 
                                           #line 4381 
                                           res->if_cap_flags &= 4294967291U;
  #line 4382 
  return;
}

#line 4384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_setup_init(struct be_adapter *adapter)
{
  #line 4386 
  adapter->vlan_prio_bmap = (unsigned char)255U;
  #line 4387 
  adapter->phy.link_speed = -1;
  #line 4388 
  adapter->if_handle = -1;
  #line 4389 
  adapter->be3_native = (_Bool)0;
  #line 4390 
  adapter->if_flags = 0U;
  #line 4391 
  adapter->phy_state = (unsigned char)255U;
  #line 4392 
  if ((unsigned int)adapter->virtfn == 0U) 
                                           #line 4393 
                                           adapter->cmd_privileges = 1792U; else 
                                                                    #line 4395 
                                                                    adapter->cmd_privileges = 1U;
  #line 4396 
  return;
}

#line 4405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_calculate_pf_pool_rss_tables(struct be_adapter *adapter)
{
  #line 4408 
  u8 rss_tables_on_port;
  #line 4407 
  struct be_port_resources port_res = {.max_vfs = (unsigned short)0U, .nic_pfs = (unsigned short)0};
  #line 4409 
  u16 max_vfs = adapter->pool_res.max_vfs;
  #line 4411 
  be_cmd_get_profile_config(adapter,(struct be_resources *)0,& port_res,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 4414 
  rss_tables_on_port = (unsigned char)(15U - (unsigned int)((unsigned char)port_res.nic_pfs));
  #line 4419 
  adapter->pool_res.max_rss_tables = (unsigned short)(((int)max_vfs * (int)rss_tables_on_port) / (int)port_res.max_vfs);
  #line 4421 
  return;
}

#line 4423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_sriov_config(struct be_adapter *adapter)
{
  #line 4426 
  int max_vfs;
  #line 4426 
  int old_vfs;
  #line 4425 
  struct be_resources res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
  #line 4428 
  be_cmd_get_profile_config(adapter,& res,(struct be_port_resources *)0,(unsigned char)2,(unsigned char)0,(unsigned char)0);
  #line 4432 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) && (unsigned int)res.max_vfs == 0U) {
    #line 4433 
    max_vfs = pci_sriov_get_totalvfs(adapter->pdev);
    #line 4434 
    if (max_vfs > 0) {
      #line 4434 
      int __UNIQUE_ID___x618;
      #line 4434 
      int tmp;
      {
        #line 4434 
        __UNIQUE_ID___x618 = 30;
        #line 4434 
        int __UNIQUE_ID___y619 = max_vfs;
        #line 4434 
        if (__UNIQUE_ID___x618 < __UNIQUE_ID___y619) 
                                                     #line 4434 
                                                     tmp = __UNIQUE_ID___x618; else 
                                                                    #line 4434 
                                                                    tmp = __UNIQUE_ID___y619;
        }
      #line 4434 
      res.max_vfs = (unsigned short)tmp;
    }
    else 
         #line 4434 
         res.max_vfs = (unsigned short)0U;
  }
  #line 4437 
  adapter->pool_res = res;
  #line 4443 
  old_vfs = pci_num_vf(adapter->pdev);
  #line 4444 
  if (old_vfs != 0) {
    #line 4445 
    _dev_info(& (adapter->pdev)->dev,(char *)"%d VFs are already enabled\n",old_vfs);
    #line 4448 
    adapter->pool_res.max_vfs = (unsigned short)pci_sriov_get_totalvfs(adapter->pdev);
    #line 4450 
    adapter->num_vfs = (unsigned short)old_vfs;
  }
  #line 4453 
  if ((((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (unsigned int)adapter->pool_res.max_vfs != 0U) && old_vfs == 0) {
    #line 4454 
    be_calculate_pf_pool_rss_tables(adapter);
    #line 4455 
    _dev_info(& (adapter->pdev)->dev,(char *)"RSS can be enabled for all VFs if num_vfs <= %d\n",(int)adapter->pool_res.max_rss_tables);
  }
  #line 4459 
  return 0;
}

#line 4462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_alloc_sriov_res(struct be_adapter *adapter)
{
  #line 4466 
  int status;
  #line 4464 
  int old_vfs = pci_num_vf(adapter->pdev);
  #line 4465 
  struct be_resources vft_res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
  #line 4468 
  be_get_sriov_config(adapter);
  #line 4470 
  if (old_vfs == 0) 
                    #line 4471 
                    pci_sriov_set_totalvfs(adapter->pdev,(unsigned short)((int)adapter->pool_res.max_vfs));
  #line 4478 
  if ((((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (unsigned int)adapter->pool_res.max_vfs != 0U) && old_vfs == 0) {
    #line 4479 
    be_calculate_vf_res(adapter,(unsigned short)0,& vft_res);
    #line 4480 
    status = be_cmd_set_sriov_config(adapter,adapter->pool_res,(unsigned short)0,& vft_res);
    #line 4482 
    if (status != 0) 
                     #line 4483 
                     _dev_err(& (adapter->pdev)->dev,(char *)"Failed to optimize SRIOV resources\n");
  }
  #line 4485 
  return;
}

#line 4488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_resources(struct be_adapter *adapter)
{
  #line 4532 
  unsigned short __UNIQUE_ID___x620;
  #line 4532 
  int tmp_1;
  #line 4492 
  int status;
  #line 4490 
  struct device *dev = & (adapter->pdev)->dev;
  #line 4491 
  struct be_resources res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
  #line 4498 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    #line 4499 
    BEx_get_resources(adapter,& res);
  else {
    #line 4501 
    status = be_cmd_get_func_config(adapter,& res);
    #line 4502 
    if (status != 0) 
                     #line 4503 
                     return status;
    #line 4506 
    if (((unsigned int)res.max_rss_qs != 0U && (int)res.max_rss_qs == (int)res.max_rx_qs) && (res.if_cap_flags & 16777216U) == 0U) 
      #line 4508 
      res.max_rss_qs = (unsigned short)((unsigned int)res.max_rss_qs + 65535U);
  }
  #line 4512 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) 
    #line 4512 
    res.max_nic_evt_qs = (unsigned short)((unsigned int)res.max_evt_qs / 2U); else 
                                                                    #line 4512 
                                                                    res.max_nic_evt_qs = res.max_evt_qs;
  #line 4514 
  adapter->res = res;
  #line 4519 
  adapter->need_def_rxq = (unsigned short)((adapter->res.if_cap_flags & 16777216U) == 0U);
  #line 4522 
  _dev_info(dev,(char *)"Max: txqs %d, rxqs %d, rss %d, eqs %d, vfs %d\n",(int)adapter->res.max_tx_qs,(int)adapter->res.max_rx_qs,(int)adapter->res.max_rss_qs,(int)adapter->res.max_nic_evt_qs,(int)adapter->pool_res.max_vfs);
  #line 4526 
  _dev_info(dev,(char *)"Max: uc-macs %d, mc-macs %d, vlans %d\n",(int)adapter->res.max_uc_mac,(int)adapter->res.max_mcast_mac,(int)adapter->res.max_vlans);
  {
    #line 4532 
    __UNIQUE_ID___x620 = (unsigned short)netif_get_num_default_rss_queues();
    #line 4532 
    unsigned short __UNIQUE_ID___y621 = be_max_qp_irqs(adapter);
    #line 4532 
    if ((int)__UNIQUE_ID___x620 < (int)__UNIQUE_ID___y621) 
                                                           #line 4532 
                                                           tmp_1 = (int)__UNIQUE_ID___x620; else 
                                                                    #line 4532 
                                                                    tmp_1 = (int)__UNIQUE_ID___y621;
    }
  #line 4531 
  adapter->cfg_num_rx_irqs = (unsigned short)tmp_1;
  #line 4534 
  adapter->cfg_num_tx_irqs = adapter->cfg_num_rx_irqs;
  #line 4535 
  return 0;
}

#line 4538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_config(struct be_adapter *adapter)
{
  #line 4540 
  int status;
  #line 4540 
  int level;
  #line 4541 
  u16 profile_id;
  #line 4543 
  status = be_cmd_get_cntl_attributes(adapter);
  #line 4544 
  if (status != 0) 
                   #line 4545 
                   return status;
  #line 4547 
  status = be_cmd_query_fw_cfg(adapter);
  #line 4548 
  if (status != 0) 
                   #line 4549 
                   return status;
  #line 4551 
  if (((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) && (unsigned int)adapter->virtfn == 0U) 
    #line 4552 
    be_cmd_get_fat_dump_len(adapter,& adapter->fat_dump_len);
  #line 4554 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    #line 4555 
    level = be_cmd_get_fw_log_level(adapter);
    #line 4556 
    if (level <= 48) 
                     #line 4556 
                     adapter->msg_enable = 8192U; else 
                                                       #line 4556 
                                                       adapter->msg_enable = 0U;
  }
  #line 4560 
  be_cmd_get_acpi_wol_cap(adapter);
  #line 4561 
  pci_enable_wake(adapter->pdev,3,(_Bool)((bool)((int)adapter->wol_en) != 0));
  #line 4562 
  pci_enable_wake(adapter->pdev,4,(_Bool)((bool)((int)adapter->wol_en) != 0));
  #line 4564 
  be_cmd_query_port_name(adapter);
  #line 4566 
  if ((unsigned int)adapter->virtfn == 0U) {
    #line 4567 
    status = be_cmd_get_active_profile(adapter,& profile_id);
    #line 4568 
    if (status == 0) 
                     #line 4569 
                     _dev_info(& (adapter->pdev)->dev,(char *)"Using profile 0x%x\n",(int)profile_id);
  }
  #line 4573 
  return 0;
}

#line 4576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_mac_setup(struct be_adapter *adapter)
{
  #line 4578 
  u8 mac[6U];
  #line 4579 
  int status;
  #line 4581 
  if ((int)is_zero_ether_addr((adapter->netdev)->dev_addr) != 0) {
    #line 4582 
    status = be_cmd_get_perm_mac(adapter,(u8 *)(& mac));
    #line 4583 
    if (status != 0) 
                     #line 4584 
                     return status;
    #line 4586 
    memcpy((void *)(adapter->netdev)->dev_addr,(void *)(& mac),6UL);
    #line 4587 
    memcpy((void *)(& (adapter->netdev)->perm_addr),(void *)(& mac),6UL);
    #line 4590 
    if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) && (unsigned int)adapter->virtfn != 0U) 
      #line 4591 
      memcpy((void *)(& adapter->dev_mac),(void *)(& mac),6UL);
  }
  #line 4594 
  return 0;
}

#line 4597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_schedule_worker(struct be_adapter *adapter)
{
  #line 4599 
  ;
  #line 4599 
  ;
  #line 4599 
  cif_queue_delayed_work(be_wq,& adapter->work,msecs_to_jiffies(1000U));
  #line 4600 
  adapter->flags |= 8U;
  #line 4601 
  return;
}

#line 4603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_destroy_err_recovery_workq(void)
{
  #line 4605 
  if (be_err_recovery_workq == (struct workqueue_struct *)0) 
                                                             #line 4606 
                                                             return;
  #line 4608 
  flush_workqueue(be_err_recovery_workq);
  #line 4609 
  destroy_workqueue(be_err_recovery_workq);
  #line 4610 
  be_err_recovery_workq = (struct workqueue_struct *)0;
  #line 4611 
  return;
}

#line 4613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_schedule_err_detection(struct be_adapter *adapter, u32 delay)
{
  #line 4615 
  struct be_error_recovery *err_rec = & adapter->error_recovery;
  #line 4617 
  if (be_err_recovery_workq == (struct workqueue_struct *)0) 
                                                             #line 4618 
                                                             return;
  #line 4620 
  ;
  #line 4620 
  ;
  #line 4620 
  cif_queue_delayed_work(be_err_recovery_workq,& err_rec->err_detection_work,msecs_to_jiffies(delay));
  #line 4622 
  adapter->flags |= 2048U;
  #line 4623 
  return;
}

#line 4625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_setup_queues(struct be_adapter *adapter)
{
  #line 4628 
  int status;
  #line 4627 
  struct net_device *netdev = adapter->netdev;
  #line 4630 
  status = be_evt_queues_create(adapter);
  #line 4631 
  if (status != 0) 
                   #line 4632 
                   goto err;
  #line 4634 
  status = be_tx_qs_create(adapter);
  #line 4635 
  if (status != 0) 
                   #line 4636 
                   goto err;
  #line 4638 
  status = be_rx_cqs_create(adapter);
  #line 4639 
  if (status != 0) 
                   #line 4640 
                   goto err;
  #line 4642 
  status = be_mcc_queues_create(adapter);
  #line 4643 
  if (status != 0) 
                   #line 4644 
                   goto err;
  #line 4646 
  status = netif_set_real_num_rx_queues(netdev,(unsigned int)adapter->num_rx_qs);
  #line 4647 
  if (status != 0) 
                   #line 4648 
                   goto err;
  #line 4650 
  status = netif_set_real_num_tx_queues(netdev,(unsigned int)adapter->num_tx_qs);
  #line 4651 
  if (status != 0) 
                   #line 4652 
                   goto err;
  #line 4654 
  return 0;
  #line 4655 
  err: 
       #line 4655 
  ;
  #line 4656 
  _dev_err(& (adapter->pdev)->dev,(char *)"queue_setup failed\n");
  #line 4657 
  return status;
}

#line 4660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_if_create(struct be_adapter *adapter)
{
  #line 4664 
  int status;
  #line 4662 
  u32 en_flags = 16777220U;
  #line 4663 
  u32 cap_flags = adapter->res.if_cap_flags;
  #line 4667 
  adapter->pmac_id = (u32 *)kcalloc((unsigned long)adapter->res.max_uc_mac,4UL,3264U);
  #line 4669 
  if (adapter->pmac_id == (u32 *)0U) 
                                     #line 4670 
                                     return -12;
  #line 4672 
  adapter->mc_list = (struct be_eth_addr *)kcalloc((unsigned long)adapter->res.max_mcast_mac,6UL,3264U);
  #line 4674 
  if (adapter->mc_list == (struct be_eth_addr *)0) 
                                                   #line 4675 
                                                   return -12;
  #line 4677 
  adapter->uc_list = (struct be_eth_addr *)kcalloc((unsigned long)adapter->res.max_uc_mac,6UL,3264U);
  #line 4679 
  if (adapter->uc_list == (struct be_eth_addr *)0) 
                                                   #line 4680 
                                                   return -12;
  #line 4682 
  if ((unsigned int)adapter->cfg_num_rx_irqs == 1U) 
                                                    #line 4683 
                                                    cap_flags &= 4278190075U;
  #line 4685 
  en_flags &= cap_flags;
  #line 4687 
  status = be_cmd_if_create(adapter,adapter->res.if_cap_flags,en_flags,(u32 *)(& adapter->if_handle),0U);
  #line 4690 
  if (status != 0) 
                   #line 4691 
                   return status;
  #line 4693 
  return 0;
}

#line 4696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
int be_update_queues(struct be_adapter *adapter)
{
  #line 4699 
  int status;
  #line 4698 
  struct net_device *netdev = adapter->netdev;
  #line 4701 
  if ((int)netif_running(netdev) != 0) {
    #line 4705 
    netif_tx_lock_bh(netdev);
    #line 4707 
    netif_carrier_off(netdev);
    #line 4708 
    netif_tx_unlock_bh(netdev);
    #line 4710 
    be_close(netdev);
  }
  #line 4713 
  be_cancel_worker(adapter);
  #line 4718 
  if (adapter->num_msix_roce_vec == 0U) 
                                        #line 4719 
                                        be_msix_disable(adapter);
  #line 4721 
  be_clear_queues(adapter);
  #line 4722 
  status = be_cmd_if_destroy(adapter,adapter->if_handle,0U);
  #line 4723 
  if (status != 0) 
                   #line 4724 
                   return status;
  #line 4726 
  if ((unsigned int)adapter->num_msix_vec == 0U) {
    #line 4727 
    status = be_msix_enable(adapter);
    #line 4728 
    if (status != 0) 
                     #line 4729 
                     return status;
  }
  #line 4732 
  status = be_if_create(adapter);
  #line 4733 
  if (status != 0) 
                   #line 4734 
                   return status;
  #line 4736 
  status = be_setup_queues(adapter);
  #line 4737 
  if (status != 0) 
                   #line 4738 
                   return status;
  #line 4740 
  be_schedule_worker(adapter);
  #line 4748 
  adapter->if_flags &= 4294966647U;
  #line 4750 
  if ((int)netif_running(netdev) != 0) 
                                       #line 4751 
                                       status = be_open(netdev);
  #line 4753 
  return status;
}

#line 4756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int fw_major_num(char *fw_ver)
{
  #line 4758 
  int i;
  #line 4758 
  int fw_major = 0;
  #line 4760 
  i = sscanf(fw_ver,(char *)"%d.",& fw_major);
  #line 4761 
  if (i != 1) 
              #line 4762 
              return 0;
  #line 4764 
  return fw_major;
}

#line 4770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_reset_required(struct be_adapter *adapter)
{
  #line 4772 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) 
                                                       #line 4773 
                                                       return (_Bool)1;
  else {
    #line 4775 
    return (_Bool)(pci_num_vf(adapter->pdev) == 0);
  }
}

#line 4779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_func_init(struct be_adapter *adapter)
{
  #line 4781 
  int status;
  #line 4783 
  status = be_fw_wait_ready(adapter);
  #line 4784 
  if (status != 0) 
                   #line 4785 
                   return status;
  #line 4788 
  be_clear_error(adapter,255);
  #line 4790 
  if ((int)be_reset_required(adapter) != 0) {
    #line 4791 
    status = be_cmd_reset_function(adapter);
    #line 4792 
    if (status != 0) 
                     #line 4793 
                     return status;
    #line 4796 
    msleep(100U);
  }
  #line 4800 
  status = be_cmd_fw_init(adapter);
  #line 4801 
  if (status != 0) 
                   #line 4802 
                   return status;
  #line 4805 
  be_intr_set(adapter,(_Bool)1);
  #line 4807 
  return 0;
}

#line 4810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_setup(struct be_adapter *adapter)
{
  #line 4813 
  int status;
  #line 4812 
  struct device *dev = & (adapter->pdev)->dev;
  #line 4815 
  status = be_func_init(adapter);
  #line 4816 
  if (status != 0) 
                   #line 4817 
                   return status;
  #line 4819 
  be_setup_init(adapter);
  #line 4821 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
    #line 4822 
    be_cmd_req_native_mode(adapter);
  #line 4827 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) {
    #line 4828 
    status = be_cmd_get_func_config(adapter,(struct be_resources *)0);
    #line 4829 
    if (status != 0) 
                     #line 4830 
                     return status;
  }
  #line 4833 
  status = be_get_config(adapter);
  #line 4834 
  if (status != 0) 
                   #line 4835 
                   goto err;
  #line 4837 
  if (((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) && (unsigned int)adapter->virtfn == 0U) 
    #line 4838 
    be_alloc_sriov_res(adapter);
  #line 4840 
  status = be_get_resources(adapter);
  #line 4841 
  if (status != 0) 
                   #line 4842 
                   goto err;
  #line 4844 
  status = be_msix_enable(adapter);
  #line 4845 
  if (status != 0) 
                   #line 4846 
                   goto err;
  #line 4849 
  status = be_if_create(adapter);
  #line 4850 
  if (status != 0) 
                   #line 4851 
                   goto err;
  #line 4854 
  rtnl_lock();
  #line 4855 
  status = be_setup_queues(adapter);
  #line 4856 
  rtnl_unlock();
  #line 4857 
  if (status != 0) 
                   #line 4858 
                   goto err;
  #line 4860 
  be_cmd_get_fn_privileges(adapter,& adapter->cmd_privileges,0U);
  #line 4862 
  status = be_mac_setup(adapter);
  #line 4863 
  if (status != 0) 
                   #line 4864 
                   goto err;
  #line 4866 
  be_cmd_get_fw_ver(adapter);
  #line 4867 
  _dev_info(dev,(char *)"FW version is %s\n",(char *)(& adapter->fw_ver));
  #line 4869 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) {
    #line 4869 
    if (fw_major_num((char *)(& adapter->fw_ver)) <= 3) {
      #line 4870 
      _dev_err(dev,(char *)"Firmware on card is old(%s), IRQs may not work",(char *)(& adapter->fw_ver));
      #line 4872 
      _dev_err(dev,(char *)"Please upgrade firmware to version >= 4.0\n");
    }
  }
  #line 4875 
  status = be_cmd_set_flow_control(adapter,adapter->tx_fc,adapter->rx_fc);
  #line 4877 
  if (status != 0) 
                   #line 4878 
                   be_cmd_get_flow_control(adapter,& adapter->tx_fc,& adapter->rx_fc);
  #line 4881 
  _dev_info(& (adapter->pdev)->dev,(char *)"HW Flow control - TX:%d RX:%d\n",adapter->tx_fc,adapter->rx_fc);
  #line 4884 
  if ((unsigned int)adapter->virtfn == 0U) 
                                           #line 4885 
                                           be_cmd_set_logical_link_config(adapter,0,(unsigned char)0);
  #line 4893 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) 
    #line 4894 
    be_cmd_set_hsw_config(adapter,(unsigned short)0,0U,(unsigned short)((int)((unsigned short)adapter->if_handle)),(unsigned short)1,(unsigned char)0);
  #line 4897 
  if ((unsigned int)adapter->num_vfs != 0U) 
                                            #line 4898 
                                            be_vf_setup(adapter);
  #line 4900 
  status = be_cmd_get_phy_info(adapter);
  #line 4901 
  if (status == 0) {
    #line 4901 
    if ((int)be_pause_supported(adapter) != 0) 
                                               #line 4902 
                                               adapter->phy.fc_autoneg = (unsigned char)1U;
  }
  #line 4904 
  if ((unsigned int)adapter->virtfn == 0U && ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U)) 
    #line 4905 
    be_cmd_set_features(adapter);
  #line 4907 
  be_schedule_worker(adapter);
  #line 4908 
  adapter->flags |= 512U;
  #line 4909 
  return 0;
  #line 4910 
  err: 
       #line 4910 
  ;
  #line 4911 
  be_clear(adapter);
  #line 4912 
  return status;
}

#line 4916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_netpoll(struct net_device *netdev)
{
  #line 4919 
  struct be_eq_obj *eqo;
  #line 4920 
  int i;
  #line 4918 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 4922 
  i = 0;
  #line 4922 
  eqo = & adapter->eq_obj[i];
  #line 4922 
  while ((int)adapter->num_evt_qs > i) {
    #line 4923 
    be_eq_notify(eqo->adapter,(unsigned short)((int)((unsigned short)eqo->q.id)),(_Bool)0,(_Bool)1,(unsigned short)0,0U);
    #line 4924 
    napi_schedule(& eqo->napi);
    #line 4922 
    i ++;
    #line 4922 
    eqo ++;
  }
  #line 4926 
  return;
}

#line 4929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
int be_load_fw(struct be_adapter *adapter, u8 *fw_file)
{
  #line 4931 
  struct firmware *fw;
  #line 4932 
  int status;
  #line 4934 
  if (! netif_running(adapter->netdev)) {
    #line 4935 
    _dev_err(& (adapter->pdev)->dev,(char *)"Firmware load not allowed (interface is down)\n");
    #line 4937 
    return -100;
  }
  #line 4940 
  status = cif_request_firmware(& fw,(char *)fw_file,& (adapter->pdev)->dev);
  #line 4941 
  if (status != 0) 
                   #line 4942 
                   goto fw_exit;
  #line 4944 
  _dev_info(& (adapter->pdev)->dev,(char *)"Flashing firmware file %s\n",fw_file);
  #line 4946 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 4947 
    status = lancer_fw_download(adapter,fw); else 
                                                  #line 4949 
                                                  status = be_fw_download(adapter,fw);
  #line 4951 
  if (status == 0) 
                   #line 4952 
                   be_cmd_get_fw_ver(adapter);
  #line 4954 
  fw_exit: 
           #line 4954 
  ;
  #line 4955 
  cif_release_firmware(fw);
  #line 4956 
  return status;
}

#line 4959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_ndo_bridge_setlink(struct net_device *dev, struct nlmsghdr *nlh, u16 flags, struct netlink_ext_ack *extack)
{
  #line 4963 
  struct nlattr *attr;
  #line 4963 
  struct nlattr *br_spec;
  #line 4964 
  int rem;
  #line 5003 
  char *tmp_6;
  #line 4962 
  struct be_adapter *adapter = netdev_priv(dev);
  #line 4965 
  int status = 0;
  #line 4966 
  u16 mode = (unsigned short)0U;
  #line 4968 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) 
                                                    #line 4969 
                                                    return -95;
  #line 4971 
  br_spec = nlmsg_find_attr(nlh,16,26);
  #line 4972 
  if (br_spec == (struct nlattr *)0) 
                                     #line 4973 
                                     return -22;
  #line 4975 
  attr = (struct nlattr *)nla_data(br_spec);
  #line 4975 
  rem = nla_len(br_spec);
  #line 4975 
  while (1) {
    #line 4975 
    if (! (nla_ok(attr,rem) != 0)) 
                                   #line 4975 
                                   break;
    {
      #line 4990 
      int tmp_3;
      #line 4997 
      char *tmp_4;
      #line 4976 
      if (nla_type(attr) != 1) 
                               #line 4977 
                               goto __Cont;
      #line 4979 
      if ((unsigned int)nla_len(attr) <= 1U) 
                                             #line 4980 
                                             return -22;
      #line 4982 
      mode = nla_get_u16(attr);
      #line 4983 
      if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) && (unsigned int)mode == 1U) 
        #line 4984 
        return -95;
      #line 4986 
      if ((unsigned int)mode > 1U) 
                                   #line 4987 
                                   return -22;
      #line 4990 
      if ((unsigned int)mode == 1U) 
                                    #line 4990 
                                    tmp_3 = 3; else 
                                                    #line 4990 
                                                    tmp_3 = 2;
      #line 4989 
      ;
      #line 4989 
      ;
      #line 4989 
      status = be_cmd_set_hsw_config(adapter,(unsigned short)0,0U,(unsigned short)((int)((unsigned short)adapter->if_handle)),(unsigned short)tmp_3,(unsigned char)0);
      #line 4994 
      if (status != 0) 
                       #line 4995 
                       goto err;
      #line 4997 
      if ((unsigned int)mode == 1U) 
                                    #line 4997 
                                    tmp_4 = (char *)"VEPA"; else 
                                                                 #line 4997 
                                                                 tmp_4 = (char *)"VEB";
      #line 4997 
      ;
      #line 4997 
      _dev_info(& (adapter->pdev)->dev,(char *)"enabled switch mode: %s\n",tmp_4);
      #line 5000 
      return status;
    }
    #line 4975 
    __Cont: 
            #line 4975 
    attr = nla_next(attr,& rem);
  }
  #line 5002 
  err: 
       #line 5002 
  ;
  #line 5003 
  if ((unsigned int)mode == 1U) 
                                #line 5003 
                                tmp_6 = (char *)"VEPA"; else 
                                                             #line 5003 
                                                             tmp_6 = (char *)"VEB";
  #line 5003 
  ;
  #line 5003 
  _dev_err(& (adapter->pdev)->dev,(char *)"Failed to set switch mode %s\n",tmp_6);
  #line 5006 
  return status;
}

#line 5009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_ndo_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq, struct net_device *dev, u32 filter_mask, int nlflags)
{
  #line 5015 
  u8 hsw_mode;
  #line 5013 
  struct be_adapter *adapter = netdev_priv(dev);
  #line 5014 
  int status = 0;
  #line 5018 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) {
    #line 5020 
    if (pci_sriov_get_totalvfs(adapter->pdev) == 0) 
                                                    #line 5021 
                                                    return 0;
    #line 5022 
    hsw_mode = (unsigned char)2U;
  }
  else {
    #line 5024 
    status = be_cmd_get_hsw_config(adapter,(u16 *)0U,0U,(unsigned short)((int)((unsigned short)adapter->if_handle)),& hsw_mode,(bool *)0);
    #line 5027 
    if (status != 0) 
                     #line 5028 
                     return 0;
    #line 5030 
    if ((unsigned int)hsw_mode == 1U) 
                                      #line 5031 
                                      return 0;
  }
  #line 5034 
  return ndo_dflt_bridge_getlink(skb,pid,seq,dev,
                                (unsigned short)((unsigned int)hsw_mode == 3U),
                                0U,0U,nlflags,filter_mask,
                                (int (*)(struct sk_buff *,
                                         struct net_device *, u32 ))0);
}

#line 5040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct be_cmd_work *be_alloc_work(struct be_adapter *adapter, void (*func)(struct work_struct *))
{
  #line 5043 
  struct be_cmd_work *work;
  #line 5045 
  work = (struct be_cmd_work *)kzalloc(96UL,2592U);
  #line 5046 
  if (work == (struct be_cmd_work *)0) {
    #line 5047 
    _dev_err(& (adapter->pdev)->dev,(char *)"be_work memory allocation failed\n");
    #line 5049 
    return (struct be_cmd_work *)0;
  }
  {
    #line 5052 
    struct lock_class_key __key;
    #line 5052 
    __init_work(& work->work,0);
    #line 5052 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 5052 
    work->work.data = __constr_expr_44;
    #line 5052 
    lockdep_init_map(& work->work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 5052 
    INIT_LIST_HEAD(& work->work.entry);
    #line 5052 
    work->work.func = func;
  }
  #line 5053 
  work->adapter = adapter;
  #line 5054 
  return work;
}

#line 5071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_work_add_vxlan_port(struct work_struct *work)
{
  #line 5074 
  void *__mptr;
  #line 5082 
  void *__mptr_0;
  #line 5078 
  struct be_vxlan_port *vxlan_port;
  #line 5079 
  int status;
  #line 5074 
  __mptr = (void *)work;
  #line 5073 
  struct be_cmd_work *cmd_work = ((struct be_cmd_work *)__mptr);
  #line 5075 
  struct be_adapter *adapter = cmd_work->adapter;
  #line 5076 
  struct device *dev = & (adapter->pdev)->dev;
  #line 5077 
  __be16 port = cmd_work->info.vxlan_port;
  #line 5082 
  __mptr_0 = (void *)adapter->vxlan_port_list.next;
  #line 5082 
  vxlan_port = ((struct be_vxlan_port *)__mptr_0);
  #line 5082 
  while (& vxlan_port->list != & adapter->vxlan_port_list) {
    #line 5082 
    void *__mptr_1;
    #line 5083 
    if ((int)vxlan_port->port == (int)port) {
      #line 5084 
      (vxlan_port->port_aliases) ++;
      #line 5085 
      goto done;
    }
    #line 5082 
    __mptr_1 = (void *)vxlan_port->list.next;
    #line 5082 
    vxlan_port = ((struct be_vxlan_port *)__mptr_1);
  }
  #line 5093 
  vxlan_port = (struct be_vxlan_port *)kzalloc(24UL,3264U);
  #line 5094 
  if (vxlan_port == (struct be_vxlan_port *)0) 
                                               #line 5095 
                                               goto done;
  #line 5097 
  vxlan_port->port = port;
  #line 5098 
  INIT_LIST_HEAD(& vxlan_port->list);
  #line 5099 
  list_add_tail(& vxlan_port->list,& adapter->vxlan_port_list);
  #line 5100 
  (adapter->vxlan_port_count) ++;
  #line 5102 
  if (((unsigned long)adapter->flags & 256UL) != 0UL) {
    #line 5103 
    _dev_info(dev,(char *)"Only one UDP port supported for VxLAN offloads\n");
    #line 5105 
    _dev_info(dev,(char *)"Disabling VxLAN offloads\n");
    #line 5106 
    goto err;
  }
  #line 5109 
  if (adapter->vxlan_port_count > 1) 
                                     #line 5110 
                                     goto done;
  #line 5112 
  status = be_enable_vxlan_offloads(adapter);
  #line 5113 
  if (status == 0) 
                   #line 5114 
                   goto done;
  #line 5116 
  err: 
       #line 5116 
  ;
  #line 5117 
  be_disable_vxlan_offloads(adapter);
  #line 5118 
  done: 
        #line 5118 
  ;
  #line 5119 
  kfree((void *)cmd_work);
  #line 5120 
  return;
}

#line 5123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_work_del_vxlan_port(struct work_struct *work)
{
  #line 5126 
  void *__mptr;
  #line 5132 
  void *__mptr_0;
  #line 5129 
  struct be_vxlan_port *vxlan_port;
  #line 5126 
  __mptr = (void *)work;
  #line 5125 
  struct be_cmd_work *cmd_work = ((struct be_cmd_work *)__mptr);
  #line 5127 
  struct be_adapter *adapter = cmd_work->adapter;
  #line 5128 
  __be16 port = cmd_work->info.vxlan_port;
  #line 5132 
  __mptr_0 = (void *)adapter->vxlan_port_list.next;
  #line 5132 
  vxlan_port = ((struct be_vxlan_port *)__mptr_0);
  #line 5132 
  while (& vxlan_port->list != & adapter->vxlan_port_list) {
    #line 5132 
    void *__mptr_1;
    #line 5133 
    if ((int)vxlan_port->port == (int)port) {
      #line 5134 
      if (vxlan_port->port_aliases != 0) {
        #line 5135 
        (vxlan_port->port_aliases) --;
        #line 5136 
        goto done;
      }
      #line 5138 
      break;
    }
    #line 5132 
    __mptr_1 = (void *)vxlan_port->list.next;
    #line 5132 
    vxlan_port = ((struct be_vxlan_port *)__mptr_1);
  }
  #line 5143 
  list_del(& vxlan_port->list);
  #line 5144 
  (adapter->vxlan_port_count) --;
  #line 5147 
  if ((int)adapter->vxlan_port == (int)vxlan_port->port) {
    {
      #line 5148 
      int __ret_warn_on = adapter->vxlan_port_count != 0;
      #line 5148 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 5149 
        ldv_inline_asm();
        #line 5150 
        ldv_inline_asm();
      }
      #line 5148 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 5149 
    be_disable_vxlan_offloads(adapter);
    #line 5150 
    ;
    #line 5150 
    _dev_info(& (adapter->pdev)->dev,(char *)"Disabled VxLAN offloads for UDP port %d\n",(int)__builtin_bswap16((unsigned short)((int)port)));
    #line 5153 
    goto out;
  }
  #line 5157 
  if (adapter->vxlan_port_count == 1) 
                                      #line 5158 
                                      be_enable_vxlan_offloads(adapter);
  #line 5160 
  out: 
       #line 5160 
  ;
  #line 5161 
  kfree((void *)vxlan_port);
  #line 5162 
  done: 
        #line 5162 
  ;
  #line 5163 
  kfree((void *)cmd_work);
  #line 5164 
  return;
}

#line 5166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_cfg_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti, void (*func)(struct work_struct *))
{
  #line 5171 
  struct be_cmd_work *cmd_work;
  #line 5170 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 5173 
  if ((unsigned int)ti->type != 0U) 
                                    #line 5174 
                                    return;
  #line 5176 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) 
    #line 5177 
    return;
  else {
    #line 5176 
    if ((int)be_is_mc(adapter) != 0) 
                                     #line 5177 
                                     return;
  }
  #line 5179 
  cmd_work = be_alloc_work(adapter,func);
  #line 5180 
  if (cmd_work != (struct be_cmd_work *)0) {
    #line 5181 
    cmd_work->info.vxlan_port = ti->port;
    #line 5182 
    cif_queue_work(be_wq,& cmd_work->work);
  }
  #line 5184 
  return;
}

#line 5186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_del_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 5189 
  be_cfg_vxlan_port(netdev,ti,& be_work_del_vxlan_port);
  #line 5190 
  return;
}

#line 5192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_add_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 5195 
  be_cfg_vxlan_port(netdev,ti,& be_work_add_vxlan_port);
  #line 5196 
  return;
}

#line 5198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static netdev_features_t be_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 5202 
  struct be_adapter *adapter = netdev_priv(dev);
  #line 5203 
  u8 l4_hdr = (unsigned char)0U;
  #line 5205 
  if ((int)skb_is_gso(skb) != 0) {
    #line 5209 
    if ((unsigned int)(adapter->pdev)->device != 1824U && (unsigned int)(adapter->pdev)->device != 1832U) {
      #line 5209 
      if ((int)is_ipv6_ext_hdr(skb) != 0) 
                                          #line 5210 
                                          features &= 18446744073708503039ULL;
    }
    #line 5216 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
      #line 5216 
      ;
      #line 5216 
      if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size <= 255U) 
        #line 5219 
        features &= 18446744056529747967ULL;
      else {
        #line 5217 
        ;
        #line 5217 
        if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs == 1U) 
          #line 5219 
          features &= 18446744056529747967ULL;
      }
    }
  }
  #line 5226 
  features = vlan_features_check(skb,features);
  #line 5227 
  if ((unsigned int)skb->encapsulation == 0U || ((unsigned long)adapter->flags & 256UL) == 0UL) 
    #line 5229 
    return features;
  #line 5237 
  switch ((int)vlan_get_protocol(skb)) {
    #line 5238 
    case 8: 
            #line 5238 
    ;
    #line 5239 
    l4_hdr = ip_hdr(skb)->protocol;
    #line 5240 
    break;
    #line 5241 
    case 56710: 
                #line 5241 
    ;
    #line 5242 
    l4_hdr = ipv6_hdr(skb)->nexthdr;
    #line 5243 
    break;
    #line 5244 
    default: 
             #line 5244 
    ;
    #line 5245 
    return features;
  }
  #line 5248 
  if (((unsigned int)l4_hdr != 17U || (unsigned int)skb->inner_protocol_type != 0U) || (unsigned int)skb->__anonCompField_sk_buff_100.inner_protocol != 22629U) 
    #line 5255 
    return features & 18446744056529747941ULL;
  else {
    #line 5250 
    if (skb_inner_mac_header(skb) - skb_transport_header(skb) != 16L) 
      #line 5255 
      return features & 18446744056529747941ULL;
    else 
      #line 5252 
      if ((unsigned int)adapter->vxlan_port == 0U) 
                                                   #line 5255 
                                                   return features & 18446744056529747941ULL;
      else {
        #line 5253 
        ;
        #line 5253 
        if ((int)udp_hdr(skb)->dest != (int)adapter->vxlan_port) 
                                                                 #line 5255 
                                                                 return features & 18446744056529747941ULL;
      }
  }
  #line 5257 
  return features;
}

#line 5260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_phys_port_id(struct net_device *dev, struct netdev_phys_item_id *ppid)
{
  #line 5263 
  int i;
  #line 5265 
  u8 *id;
  #line 5263 
  int id_len = 17;
  #line 5264 
  struct be_adapter *adapter = netdev_priv(dev);
  #line 5267 
  if (id_len > 32) 
                   #line 5268 
                   return -28;
  #line 5270 
  ppid->id[0] = (unsigned char)((unsigned int)adapter->hba_port_num + 1U);
  #line 5271 
  id = & ppid->id[1];
  #line 5272 
  i = 7;
  #line 5272 
  while (i >= 0) {
    #line 5274 
    memcpy((void *)id,(void *)(& adapter->serial_num[i]),2UL);
    #line 5272 
    i --;
    #line 5273 
    id += 2UL;
  }
  #line 5276 
  ppid->id_len = (unsigned char)id_len;
  #line 5278 
  return 0;
}

#line 5281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_rx_mode(struct net_device *dev)
{
  #line 5284 
  struct be_cmd_work *work;
  #line 5283 
  struct be_adapter *adapter = netdev_priv(dev);
  #line 5286 
  work = be_alloc_work(adapter,& be_work_set_rx_mode);
  #line 5287 
  if (work != (struct be_cmd_work *)0) 
                                       #line 5288 
                                       cif_queue_work(be_wq,& work->work);
  #line 5289 
  return;
}

#line 5291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct net_device_ops be_netdev_ops = {.ndo_open = & be_open, .ndo_stop = & be_close, .ndo_start_xmit = & be_xmit, .ndo_features_check = & be_features_check, .ndo_set_rx_mode = & be_set_rx_mode, .ndo_set_mac_address = & be_mac_addr_set, .ndo_validate_addr = & eth_validate_addr, .ndo_tx_timeout = & be_tx_timeout, .ndo_get_stats64 = & be_get_stats64, .ndo_vlan_rx_add_vid = & be_vlan_add_vid, .ndo_vlan_rx_kill_vid = & be_vlan_rem_vid, .ndo_poll_controller = & be_netpoll, .ndo_set_vf_mac = & be_set_vf_mac, .ndo_set_vf_vlan = & be_set_vf_vlan, .ndo_set_vf_rate = & be_set_vf_tx_rate, .ndo_set_vf_spoofchk = & be_set_vf_spoofchk, .ndo_get_vf_config = & be_get_vf_config, .ndo_set_vf_link_state = & be_set_vf_link_state, .ndo_bridge_setlink = & be_ndo_bridge_setlink, .ndo_bridge_getlink = & be_ndo_bridge_getlink, .ndo_get_phys_port_id = & be_get_phys_port_id, .ndo_udp_tunnel_add = & be_add_vxlan_port, .ndo_udp_tunnel_del = & be_del_vxlan_port};
#line 5319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_netdev_init(struct net_device *netdev)
{
  #line 5321 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 5323 
  netdev->hw_features |= 549824037011ULL;
  #line 5327 
  if ((adapter->res.if_cap_flags & 4U) != 0U) 
                                              #line 5328 
                                              netdev->hw_features |= 274877906944ULL;
  #line 5330 
  netdev->features = (netdev->features | netdev->hw_features) | 768ULL;
  #line 5333 
  netdev->vlan_features |= 1114131ULL;
  #line 5336 
  netdev->priv_flags |= 4096U;
  #line 5338 
  netdev->flags |= 4096U;
  #line 5340 
  netif_set_gso_max_size(netdev,65513U);
  #line 5342 
  netdev->netdev_ops = & be_netdev_ops;
  #line 5344 
  netdev->ethtool_ops = & be_ethtool_ops;
  #line 5347 
  netdev->min_mtu = 256U;
  #line 5348 
  netdev->max_mtu = 9000U;
  #line 5349 
  return;
}

#line 5351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_cleanup(struct be_adapter *adapter)
{
  #line 5353 
  struct net_device *netdev = adapter->netdev;
  #line 5355 
  rtnl_lock();
  #line 5356 
  netif_device_detach(netdev);
  #line 5357 
  if ((int)netif_running(netdev) != 0) 
                                       #line 5358 
                                       be_close(netdev);
  #line 5359 
  rtnl_unlock();
  #line 5361 
  be_clear(adapter);
  #line 5362 
  return;
}

#line 5364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_resume(struct be_adapter *adapter)
{
  #line 5367 
  int status;
  #line 5366 
  struct net_device *netdev = adapter->netdev;
  #line 5369 
  status = be_setup(adapter);
  #line 5370 
  if (status != 0) 
                   #line 5371 
                   return status;
  #line 5373 
  rtnl_lock();
  #line 5374 
  if ((int)netif_running(netdev) != 0) 
                                       #line 5375 
                                       status = be_open(netdev);
  #line 5376 
  rtnl_unlock();
  #line 5378 
  if (status != 0) 
                   #line 5379 
                   return status;
  #line 5381 
  netif_device_attach(netdev);
  #line 5383 
  return 0;
}

#line 5386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_soft_reset(struct be_adapter *adapter)
{
  #line 5388 
  u32 val;
  #line 5390 
  _dev_info(& (adapter->pdev)->dev,(char *)"Initiating chip soft reset\n");
  #line 5391 
  val = ioread32((void *)(adapter->pcicfg + 92U));
  #line 5392 
  val |= 128U;
  #line 5393 
  iowrite32(val,(void *)(adapter->pcicfg + 92U));
  #line 5394 
  return;
}

#line 5396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_err_is_recoverable(struct be_adapter *adapter)
{
  #line 5403 
  u16 ue_err_code;
  #line 5404 
  u32 val;
  #line 5398 
  struct be_error_recovery *err_rec = & adapter->error_recovery;
  #line 5399 
  unsigned long initial_idle_time = msecs_to_jiffies(86400000U);
  #line 5401 
  unsigned long recovery_interval = msecs_to_jiffies(259200000U);
  #line 5406 
  val = (unsigned int)be_POST_stage_get(adapter);
  #line 5407 
  if ((val & 57344U) != 57344U) 
                                #line 5408 
                                return (_Bool)0;
  #line 5409 
  ue_err_code = (unsigned short)((unsigned int)((unsigned short)val) & 4095U);
  #line 5410 
  if ((unsigned int)ue_err_code == 0U) 
                                       #line 5411 
                                       return (_Bool)0;
  #line 5413 
  _dev_err(& (adapter->pdev)->dev,(char *)"Recoverable HW error code: 0x%x\n",(int)ue_err_code);
  {
    #line 5416 
    unsigned long __dummy;
    #line 5416 
    unsigned long __dummy2;
    }
  #line 5416 
  if (1 != 0) {
    {
      #line 5416 
      unsigned long __dummy_0;
      #line 5416 
      unsigned long __dummy2_0;
      }
    #line 5416 
    if (1 != 0) 
      #line 5416 
      if ((long)((err_rec->probe_time - jiffies) + initial_idle_time) >= 0L) {
        #line 5417 
        ;
        #line 5417 
        _dev_err(& (adapter->pdev)->dev,(char *)"Cannot recover within %lu sec from driver load\n",(long)(jiffies_to_msecs(initial_idle_time) / 1000U));
        #line 5420 
        return (_Bool)0;
      }
  }
  {
    #line 5423 
    unsigned long __dummy_1;
    #line 5423 
    unsigned long __dummy2_1;
    }
  #line 5423 
  if (1 != 0) {
    {
      #line 5423 
      unsigned long __dummy_2;
      #line 5423 
      unsigned long __dummy2_2;
      }
    #line 5423 
    if (1 != 0) 
      #line 5423 
      if ((long)((err_rec->last_recovery_time - jiffies) + recovery_interval) >= 0L) 
        #line 5423 
        if (err_rec->last_recovery_time != 0UL) {
          #line 5425 
          ;
          #line 5425 
          _dev_err(& (adapter->pdev)->dev,(char *)"Cannot recover within %lu sec from last recovery\n",(long)(jiffies_to_msecs(recovery_interval) / 1000U));
          #line 5428 
          return (_Bool)0;
        }
  }
  #line 5431 
  if ((int)err_rec->last_err_code == (int)ue_err_code) {
    #line 5432 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot recover from a consecutive TPE error\n");
    #line 5434 
    return (_Bool)0;
  }
  #line 5437 
  err_rec->last_recovery_time = jiffies;
  #line 5438 
  err_rec->last_err_code = ue_err_code;
  #line 5439 
  return (_Bool)1;
}

#line 5442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_tpe_recover(struct be_adapter *adapter)
{
  #line 5446 
  u32 val;
  #line 5444 
  struct be_error_recovery *err_rec = & adapter->error_recovery;
  #line 5445 
  int status = -11;
  #line 5448 
  switch ((int)err_rec->__anonCompField_be_error_recovery_201.recovery_state) {
    #line 5449 
    case 0: 
            #line 5449 
    ;
    #line 5450 
    err_rec->__anonCompField_be_error_recovery_201.recovery_state = (unsigned char)1U;
    #line 5451 
    err_rec->resched_delay = 1000U;
    #line 5452 
    break;
    #line 5454 
    case 1: 
            #line 5454 
    ;
    #line 5455 
    val = (unsigned int)be_POST_stage_get(adapter);
    #line 5456 
    if ((val & 57344U) != 57344U) {
      #line 5458 
      _dev_err(& (adapter->pdev)->dev,(char *)"Unrecoverable HW error detected: 0x%x\n",val);
      #line 5460 
      status = -22;
      #line 5461 
      err_rec->resched_delay = 0U;
      #line 5462 
      break;
    }
    #line 5465 
    _dev_err(& (adapter->pdev)->dev,(char *)"Recoverable HW error detected\n");
    #line 5472 
    if ((unsigned int)adapter->pf_num == 0U) {
      #line 5473 
      err_rec->__anonCompField_be_error_recovery_201.recovery_state = (unsigned char)2U;
      #line 5474 
      err_rec->resched_delay = (unsigned int)((int)err_rec->ue_to_reset_time + -1000);
      #line 5476 
      break;
    }
    #line 5479 
    err_rec->__anonCompField_be_error_recovery_201.recovery_state = (unsigned char)3U;
    #line 5480 
    err_rec->resched_delay = (unsigned int)((int)err_rec->ue_to_poll_time + -1000);
    #line 5482 
    break;
    #line 5484 
    case 2: 
            #line 5484 
    ;
    #line 5485 
    if (! be_err_is_recoverable(adapter)) {
      #line 5486 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to meet recovery criteria\n");
      #line 5488 
      status = -5;
      #line 5489 
      err_rec->resched_delay = 0U;
      #line 5490 
      break;
    }
    #line 5492 
    be_soft_reset(adapter);
    #line 5493 
    err_rec->__anonCompField_be_error_recovery_201.recovery_state = (unsigned char)3U;
    #line 5494 
    err_rec->resched_delay = (unsigned int)((int)err_rec->ue_to_poll_time - (int)err_rec->ue_to_reset_time);
    #line 5496 
    break;
    #line 5498 
    case 3: 
            #line 5498 
    ;
    #line 5499 
    err_rec->__anonCompField_be_error_recovery_201.recovery_state = (unsigned char)4U;
    #line 5500 
    err_rec->resched_delay = 0U;
    #line 5501 
    status = 0;
    #line 5502 
    break;
    #line 5504 
    default: 
             #line 5504 
    ;
    #line 5505 
    status = -22;
    #line 5506 
    err_rec->resched_delay = 0U;
    #line 5507 
    break;
  }
  #line 5510 
  return status;
}

#line 5513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_err_recover(struct be_adapter *adapter)
{
  #line 5515 
  int status;
  #line 5517 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) {
    #line 5518 
    if (! adapter->error_recovery.recovery_supported || (adapter->priv_flags & 1U) != 0U) 
      #line 5520 
      return -5;
    #line 5521 
    status = be_tpe_recover(adapter);
    #line 5522 
    if (status != 0) 
                     #line 5523 
                     goto err;
  }
  #line 5529 
  status = be_fw_wait_ready(adapter);
  #line 5530 
  if (status != 0) 
                   #line 5531 
                   goto err;
  #line 5533 
  adapter->flags |= 8192U;
  #line 5535 
  be_cleanup(adapter);
  #line 5537 
  status = be_resume(adapter);
  #line 5538 
  if (status != 0) 
                   #line 5539 
                   goto err;
  #line 5541 
  adapter->flags &= 4294959103U;
  #line 5543 
  err: 
       #line 5543 
  ;
  #line 5544 
  return status;
}

#line 5547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_err_detection_task(struct work_struct *work)
{
  #line 5553 
  void *__mptr_0;
  #line 5550 
  void *__mptr;
  #line 5557 
  int recovery_status;
  #line 5550 
  __mptr = (void *)work;
  #line 5549 
  struct be_error_recovery *err_rec = ((struct be_error_recovery *)(__mptr + 18446744073709551584U));
  #line 5553 
  __mptr_0 = (void *)err_rec;
  #line 5552 
  struct be_adapter *adapter = ((struct be_adapter *)(__mptr_0 + 18446744073708203856U));
  #line 5555 
  u32 resched_delay = 1000U;
  #line 5556 
  struct device *dev = & (adapter->pdev)->dev;
  #line 5559 
  be_detect_error(adapter);
  #line 5560 
  if ((unsigned int)be_check_error(adapter,11U) == 0U) 
                                                       #line 5561 
                                                       goto reschedule_task;
  #line 5563 
  recovery_status = be_err_recover(adapter);
  #line 5564 
  if (recovery_status == 0) {
    #line 5565 
    err_rec->__anonCompField_be_error_recovery_201.recovery_retries = (unsigned char)0U;
    #line 5566 
    err_rec->__anonCompField_be_error_recovery_201.recovery_state = (unsigned char)0U;
    #line 5567 
    _dev_info(dev,(char *)"Adapter recovery successful\n");
    #line 5568 
    goto reschedule_task;
  }
  else 
    #line 5569 
    if (((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) && err_rec->resched_delay != 0U) {
      #line 5571 
      if ((unsigned int)adapter->pf_num == 0U && (unsigned int)err_rec->__anonCompField_be_error_recovery_201.recovery_state > 1U) 
        #line 5573 
        _dev_err(& (adapter->pdev)->dev,(char *)"Adapter recovery in progress\n");
      #line 5575 
      resched_delay = err_rec->resched_delay;
      #line 5576 
      goto reschedule_task;
    }
    else 
      #line 5577 
      if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) && (unsigned int)adapter->virtfn != 0U) {
        #line 5581 
        _dev_err(dev,(char *)"Re-trying adapter recovery\n");
        #line 5582 
        goto reschedule_task;
      }
      else 
        #line 5583 
        if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
          #line 5583 
          u8 tmp_2;
          #line 5583 
          tmp_2 = err_rec->__anonCompField_be_error_recovery_201.recovery_retries;
          #line 5583 
          err_rec->__anonCompField_be_error_recovery_201.recovery_retries = (u8)((int)err_rec->__anonCompField_be_error_recovery_201.recovery_retries + 1);
          #line 5583 
          ;
          #line 5583 
          if ((unsigned int)tmp_2 <= 2U) {
            #line 5589 
            _dev_err(& (adapter->pdev)->dev,(char *)"Re-trying adapter recovery\n");
            #line 5590 
            resched_delay = 30000U;
            #line 5591 
            goto reschedule_task;
          }
          else 
               #line 5583 
               goto _LAND;
        }
        else {
          #line 5583 
          _LAND: {
                   #line 5593 
                   _dev_err(dev,(char *)"Adapter recovery failed\n");
                   #line 5594 
                   _dev_err(dev,(char *)"Please reboot server to recover\n");
                 }
        }
  #line 5597 
  return;
  #line 5599 
  reschedule_task: 
                   #line 5599 
  ;
  #line 5600 
  be_schedule_err_detection(adapter,resched_delay);
  #line 5601 
  return;
}

#line 5603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_log_sfp_info(struct be_adapter *adapter)
{
  #line 5605 
  int status;
  #line 5607 
  status = be_cmd_query_sfp_info(adapter);
  #line 5608 
  if (status == 0) 
                   #line 5609 
                   _dev_err(& (adapter->pdev)->dev,(char *)"Port %c: %s Vendor: %s part no: %s",(int)adapter->port_name,be_misconfig_evt_port_state[(int)adapter->phy_state],(u8 *)(& adapter->phy.vendor_name),(u8 *)(& adapter->phy.vendor_pn));
  #line 5616 
  adapter->flags &= 4294966271U;
  #line 5617 
  return;
}

#line 5619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_worker(struct work_struct *work)
{
  #line 5622 
  void *__mptr;
  #line 5623 
  struct be_rx_obj *rxo;
  #line 5624 
  int i;
  #line 5622 
  __mptr = (void *)work;
  #line 5621 
  struct be_adapter *adapter = ((struct be_adapter *)(__mptr + 18446744073708205608U));
  #line 5626 
  if ((unsigned int)adapter->virtfn == 0U) {
    #line 5626 
    if (MODULO((unsigned int)adapter->work_counter,
               (unsigned int)adapter->be_get_temp_freq) == 0U) 
      #line 5628 
      be_cmd_get_die_temperature(adapter);
  }
  #line 5633 
  if (! netif_running(adapter->netdev)) {
    #line 5634 
    be_process_mcc(adapter);
    #line 5635 
    goto reschedule;
  }
  #line 5638 
  if (! adapter->stats_cmd_sent) 
    #line 5639 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
      #line 5640 
      lancer_cmd_get_pport_stats(adapter,& adapter->stats_cmd); else 
                                                                  #line 5643 
                                                                  be_cmd_get_stats(adapter,& adapter->stats_cmd);
  #line 5646 
  i = 0;
  #line 5646 
  rxo = & adapter->rx_obj[i];
  #line 5646 
  while ((int)adapter->num_rx_qs > i) {
    #line 5650 
    if ((int)rxo->rx_post_starved != 0) 
                                        #line 5651 
                                        be_post_rx_frags(rxo,3264U,64U);
    #line 5646 
    i ++;
    #line 5646 
    rxo ++;
  }
  #line 5655 
  if ((unsigned int)(adapter->pdev)->device != 1824U && (unsigned int)(adapter->pdev)->device != 1832U) 
    #line 5656 
    be_eqd_update(adapter,(_Bool)0);
  #line 5658 
  if (((unsigned long)adapter->flags & 1024UL) != 0UL) 
                                                       #line 5659 
                                                       be_log_sfp_info(adapter);
  #line 5661 
  reschedule: 
              #line 5661 
  ;
  #line 5662 
  adapter->work_counter = (u16)((int)adapter->work_counter + 1);
  #line 5663 
  ;
  #line 5663 
  ;
  #line 5663 
  cif_queue_delayed_work(be_wq,& adapter->work,msecs_to_jiffies(1000U));
  #line 5664 
  return;
}

#line 5666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_unmap_pci_bars(struct be_adapter *adapter)
{
  #line 5668 
  if (adapter->csr != (u8 *)0U) 
                                #line 5669 
                                pci_iounmap(adapter->pdev,(void *)adapter->csr);
  #line 5670 
  if (adapter->db != (u8 *)0U) 
                               #line 5671 
                               pci_iounmap(adapter->pdev,(void *)adapter->db);
  #line 5672 
  if (adapter->pcicfg != (u8 *)0U && (int)adapter->pcicfg_mapped != 0) 
    #line 5673 
    pci_iounmap(adapter->pdev,(void *)adapter->pcicfg);
  #line 5674 
  return;
}

#line 5676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int db_bar(struct be_adapter *adapter)
{
  #line 5678 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) || (unsigned int)adapter->virtfn != 0U) 
    #line 5679 
    return 0; else 
                   #line 5681 
                   return 4;
}

#line 5684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_roce_map_pci_bars(struct be_adapter *adapter)
{
  #line 5686 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) {
    #line 5687 
    adapter->roce_db.size = 4096U;
    #line 5688 
    adapter->roce_db.io_addr = (adapter->pdev)->resource[db_bar(adapter)].start;
    #line 5690 
    ;
    #line 5690 
    if ((adapter->pdev)->resource[db_bar(adapter)].start != 0ULL) 
                                                                  #line 5690 
                                                                  goto _LOR;
    else {
      #line 5690 
      ;
      #line 5690 
      if ((adapter->pdev)->resource[db_bar(adapter)].end != (adapter->pdev)->resource[db_bar(adapter)].start) {
        #line 5690 
        _LOR: 
        #line 5690 
        adapter->roce_db.total_size = ((unsigned int)(adapter->pdev)->resource[db_bar(adapter)].end - (unsigned int)(adapter->pdev)->resource[db_bar(adapter)].start) + 1U;
      }
      else 
           #line 5690 
           adapter->roce_db.total_size = 0U;
    }
  }
  #line 5693 
  return 0;
}

#line 5696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_map_pci_bars(struct be_adapter *adapter)
{
  #line 5699 
  u8 *addr;
  #line 5700 
  u32 sli_intf;
  #line 5698 
  struct pci_dev *pdev = adapter->pdev;
  #line 5702 
  pci_read_config_dword(adapter->pdev,88,& sli_intf);
  #line 5703 
  adapter->sli_family = (sli_intf >> 8) & 15U;
  #line 5705 
  adapter->virtfn = (unsigned char)((unsigned int)((unsigned char)sli_intf) & 1U);
  #line 5707 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) && (unsigned int)adapter->virtfn == 0U) {
    #line 5708 
    adapter->csr = (u8 *)pci_iomap(pdev,2,0UL);
    #line 5709 
    if (adapter->csr == (u8 *)0U) 
                                  #line 5710 
                                  return -12;
  }
  #line 5713 
  ;
  #line 5713 
  addr = (u8 *)pci_iomap(pdev,db_bar(adapter),0UL);
  #line 5714 
  if (addr == (u8 *)0U) 
                        #line 5715 
                        goto pci_map_err;
  #line 5716 
  adapter->db = addr;
  #line 5718 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) || ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U)) 
    #line 5719 
    if ((unsigned int)adapter->virtfn == 0U) {
      #line 5721 
      addr = (u8 *)pci_iomap(pdev,((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) != 0,0UL);
      #line 5722 
      if (addr == (u8 *)0U) 
                            #line 5723 
                            goto pci_map_err;
      #line 5724 
      adapter->pcicfg = addr;
      #line 5725 
      adapter->pcicfg_mapped = (_Bool)1;
    }
    else {
      #line 5727 
      adapter->pcicfg = adapter->db + 4096U;
      #line 5728 
      adapter->pcicfg_mapped = (_Bool)0;
    }
  #line 5732 
  be_roce_map_pci_bars(adapter);
  #line 5733 
  return 0;
  #line 5735 
  pci_map_err: 
               #line 5735 
  ;
  #line 5736 
  _dev_err(& pdev->dev,(char *)"Error in mapping PCI BARs\n");
  #line 5737 
  be_unmap_pci_bars(adapter);
  #line 5738 
  return -12;
}

#line 5741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_drv_cleanup(struct be_adapter *adapter)
{
  #line 5743 
  struct be_dma_mem *mem = & adapter->mbox_mem_alloced;
  #line 5744 
  struct device *dev = & (adapter->pdev)->dev;
  #line 5746 
  if (mem->va != (void *)0) 
                            #line 5747 
                            dma_free_coherent(dev,(unsigned long)mem->size,mem->va,mem->dma);
  #line 5749 
  mem = & adapter->rx_filter;
  #line 5750 
  if (mem->va != (void *)0) 
                            #line 5751 
                            dma_free_coherent(dev,(unsigned long)mem->size,mem->va,mem->dma);
  #line 5753 
  mem = & adapter->stats_cmd;
  #line 5754 
  if (mem->va != (void *)0) 
                            #line 5755 
                            dma_free_coherent(dev,(unsigned long)mem->size,mem->va,mem->dma);
  #line 5756 
  return;
}

#line 5759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_drv_init(struct be_adapter *adapter)
{
  #line 5761 
  struct be_dma_mem *mbox_mem_alloc = & adapter->mbox_mem_alloced;
  #line 5762 
  struct be_dma_mem *mbox_mem_align = & adapter->mbox_mem;
  #line 5763 
  struct be_dma_mem *rx_filter = & adapter->rx_filter;
  #line 5764 
  struct be_dma_mem *stats_cmd = & adapter->stats_cmd;
  #line 5765 
  struct device *dev = & (adapter->pdev)->dev;
  #line 5766 
  int status = 0;
  #line 5768 
  mbox_mem_alloc->size = 288U;
  #line 5769 
  mbox_mem_alloc->va = dma_alloc_coherent(dev,(unsigned long)mbox_mem_alloc->size,& mbox_mem_alloc->dma,3264U);
  #line 5772 
  if (mbox_mem_alloc->va == (void *)0) 
                                       #line 5773 
                                       return -12;
  #line 5775 
  mbox_mem_align->size = 272U;
  #line 5776 
  mbox_mem_align->va = (void *)(((unsigned long)mbox_mem_alloc->va + 15UL) & 18446744073709551600UL);
  #line 5777 
  mbox_mem_align->dma = (unsigned long long)((unsigned long)mbox_mem_alloc->dma + 15UL) & 18446744073709551600ULL;
  #line 5779 
  rx_filter->size = 424U;
  #line 5780 
  rx_filter->va = dma_alloc_coherent(dev,(unsigned long)rx_filter->size,& rx_filter->dma,3264U);
  #line 5782 
  if (rx_filter->va == (void *)0) {
    #line 5783 
    status = -12;
    #line 5784 
    goto free_mbox;
  }
  #line 5787 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 5788 
    stats_cmd->size = 672U;
  else 
    #line 5789 
    if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
      #line 5790 
      stats_cmd->size = 1076U;
    else 
      #line 5791 
      if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) 
        #line 5792 
        stats_cmd->size = 1864U; else 
                                      #line 5794 
                                      stats_cmd->size = 2696U;
  #line 5795 
  stats_cmd->va = dma_alloc_coherent(dev,(unsigned long)stats_cmd->size,& stats_cmd->dma,3264U);
  #line 5797 
  if (stats_cmd->va == (void *)0) {
    #line 5798 
    status = -12;
    #line 5799 
    goto free_rx_filter;
  }
  {
    #line 5802 
    struct lock_class_key __key;
    #line 5802 
    __mutex_init(& adapter->mbox_lock,(char *)"&adapter->mbox_lock",& __key);
  }
  {
    #line 5803 
    struct lock_class_key __key_0;
    #line 5803 
    __mutex_init(& adapter->mcc_lock,(char *)"&adapter->mcc_lock",& __key_0);
  }
  {
    #line 5804 
    struct lock_class_key __key_1;
    #line 5804 
    __mutex_init(& adapter->rx_filter_lock,(char *)"&adapter->rx_filter_lock",& __key_1);
  }
  #line 5805 
  spinlock_check(& adapter->mcc_cq_lock);
  {
    #line 5805 
    struct lock_class_key __key_2;
    #line 5805 
    __raw_spin_lock_init(& adapter->mcc_cq_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->mcc_cq_lock)->rlock",& __key_2);
  }
  #line 5806 
  __init_completion(& adapter->et_cmd_compl);
  #line 5808 
  pci_save_state(adapter->pdev);
  {
    #line 5810 
    struct lock_class_key __key_3;
    #line 5810 
    __init_work(& adapter->work.work,0);
    #line 5810 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 5810 
    adapter->work.work.data = __constr_expr_45;
    #line 5810 
    lockdep_init_map(& adapter->work.work.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 5810 
    INIT_LIST_HEAD(& adapter->work.work.entry);
    #line 5810 
    adapter->work.work.func = & be_worker;
  }
  {
    #line 5810 
    struct lock_class_key __key_4;
    #line 5810 
    init_timer_key(& adapter->work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->work)->timer",& __key_4);
  }
  #line 5812 
  adapter->error_recovery.__anonCompField_be_error_recovery_201.recovery_state = (unsigned char)0U;
  #line 5813 
  adapter->error_recovery.resched_delay = 0U;
  {
    #line 5814 
    struct lock_class_key __key_5;
    #line 5814 
    __init_work(& adapter->error_recovery.err_detection_work.work,0);
    #line 5814 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 5814 
    adapter->error_recovery.err_detection_work.work.data = __constr_expr_46;
    #line 5814 
    lockdep_init_map(& adapter->error_recovery.err_detection_work.work.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 5814 
    INIT_LIST_HEAD(& adapter->error_recovery.err_detection_work.work.entry);
    #line 5814 
    adapter->error_recovery.err_detection_work.work.func = & be_err_detection_task;
  }
  {
    #line 5814 
    struct lock_class_key __key_6;
    #line 5814 
    init_timer_key(& adapter->error_recovery.err_detection_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->error_recovery.err_detection_work)->timer",& __key_6);
  }
  #line 5817 
  adapter->rx_fc = 1U;
  #line 5818 
  adapter->tx_fc = 1U;
  #line 5821 
  adapter->be_get_temp_freq = 64;
  #line 5823 
  INIT_LIST_HEAD(& adapter->vxlan_port_list);
  #line 5824 
  return 0;
  #line 5826 
  free_rx_filter: 
                  #line 5826 
  ;
  #line 5827 
  dma_free_coherent(dev,(unsigned long)rx_filter->size,rx_filter->va,rx_filter->dma);
  #line 5828 
  free_mbox: 
             #line 5828 
  ;
  #line 5829 
  dma_free_coherent(dev,(unsigned long)mbox_mem_alloc->size,mbox_mem_alloc->va,mbox_mem_alloc->dma);
  #line 5831 
  return status;
}

#line 5834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_remove(struct pci_dev *pdev)
{
  #line 5836 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 5838 
  if (adapter == (struct be_adapter *)0) 
                                         #line 5839 
                                         return;
  #line 5841 
  be_roce_dev_remove(adapter);
  #line 5842 
  be_intr_set(adapter,(_Bool)0);
  #line 5844 
  be_cancel_err_detection(adapter);
  #line 5846 
  cif_unregister_netdev(adapter->netdev);
  #line 5848 
  be_clear(adapter);
  #line 5850 
  if (pci_vfs_assigned(adapter->pdev) == 0) 
                                            #line 5851 
                                            be_cmd_reset_function(adapter);
  #line 5854 
  be_cmd_fw_clean(adapter);
  #line 5856 
  be_unmap_pci_bars(adapter);
  #line 5857 
  be_drv_cleanup(adapter);
  #line 5859 
  pci_disable_pcie_error_reporting(pdev);
  #line 5861 
  pci_release_regions(pdev);
  #line 5862 
  pci_disable_device(pdev);
  #line 5864 
  cif_free_netdev(adapter->netdev);
  #line 5865 
  return;
}

#line 5867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static ssize_t be_hwmon_show_temp(struct device *dev, struct device_attribute *dev_attr, char *buf)
{
  #line 5871 
  struct be_adapter *adapter = dev_get_drvdata(dev);
  #line 5874 
  if ((unsigned int)adapter->hwmon_info.be_on_die_temp == 255U) 
                                                                #line 5875 
                                                                return -5L;
  else {
    #line 5877 
    return (long)sprintf(buf,(char *)"%u\n",
                (int)adapter->hwmon_info.be_on_die_temp * 1000);
  }
}

#line 5881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sensor_device_attribute sensor_dev_attr_temp1_input = {.dev_attr = {.attr = {.name = (char *)"temp1_input", .mode = (unsigned short)292U}, .show = & be_hwmon_show_temp}, .index = 1};
#line 5884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct attribute *be_hwmon_attrs[2U] = {& sensor_dev_attr_temp1_input.dev_attr.attr};
#line 5889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct attribute_group be_hwmon_group = {.attrs = (struct attribute **)(& be_hwmon_attrs)};
#line 5889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct attribute_group *be_hwmon_groups[2U] = {& be_hwmon_group};
#line 5891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static char *mc_name(struct be_adapter *adapter)
{
  #line 5893 
  char *str = (char *)"";
  #line 5895 
  switch ((int)adapter->mc_type) {
    #line 5896 
    case 2: 
            #line 5896 
    ;
    #line 5897 
    str = (char *)"UMC";
    #line 5898 
    break;
    #line 5899 
    case 3: 
            #line 5899 
    ;
    #line 5900 
    str = (char *)"FLEX10";
    #line 5901 
    break;
    #line 5902 
    case 4: 
            #line 5902 
    ;
    #line 5903 
    str = (char *)"vNIC-1";
    #line 5904 
    break;
    #line 5905 
    case 5: 
            #line 5905 
    ;
    #line 5906 
    str = (char *)"nPAR";
    #line 5907 
    break;
    #line 5908 
    case 6: 
            #line 5908 
    ;
    #line 5909 
    str = (char *)"UFP";
    #line 5910 
    break;
    #line 5911 
    case 7: 
            #line 5911 
    ;
    #line 5912 
    str = (char *)"vNIC-2";
    #line 5913 
    break;
    #line 5914 
    default: 
             #line 5914 
    ;
    #line 5915 
    str = (char *)"";
  }
  #line 5918 
  return str;
}

#line 5921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static char *func_name(struct be_adapter *adapter)
{
  #line 5923 
  char *tmp;
  #line 5923 
  if ((unsigned int)adapter->virtfn == 0U) 
                                           #line 5923 
                                           tmp = (char *)"PF"; else 
                                                                    #line 5923 
                                                                    tmp = (char *)"VF";
  #line 5923 
  return tmp;
}

#line 5926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static char *nic_name(struct pci_dev *pdev)
{
  #line 5928 
  switch ((int)pdev->device) {
    #line 5929 
    case 1792: 
               #line 5929 
    ;
    #line 5930 
    return (char *)"Emulex OneConnect";
    #line 5931 
    case 1808: 
               #line 5931 
    ;
    #line 5932 
    return (char *)"Emulex OneConnect";
    #line 5933 
    case 57888: 
                #line 5933 
    ;
    #line 5934 
    case 57896: 
                #line 5934 
    ;
    #line 5935 
    return (char *)"Emulex OneConnect";
    #line 5936 
    case 545: 
              #line 5936 
    ;
    #line 5937 
    return (char *)"Emulex BladeEngine3";
    #line 5938 
    case 1824: 
               #line 5938 
    ;
    #line 5939 
    case 1832: 
               #line 5939 
    ;
    #line 5940 
    return (char *)"Emulex OneConnect";
    #line 5941 
    default: 
             #line 5941 
    ;
    #line 5942 
    return (char *)"Emulex BladeEngine2";
  }
}

#line 5946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_probe(struct pci_dev *pdev, struct pci_device_id *pdev_id)
{
  #line 5948 
  struct be_adapter *adapter;
  #line 5949 
  struct net_device *netdev;
  #line 5950 
  int status = 0;
  #line 5952 
  _dev_info(& pdev->dev,(char *)"%s version is %s\n",(char *)"be2net",(char *)"12.0.0.0");
  #line 5954 
  status = pci_enable_device(pdev);
  #line 5955 
  if (status != 0) 
                   #line 5956 
                   goto do_none;
  #line 5958 
  status = pci_request_regions(pdev,(char *)"be2net");
  #line 5959 
  if (status != 0) 
                   #line 5960 
                   goto disable_dev;
  #line 5961 
  pci_set_master(pdev);
  #line 5963 
  netdev = cif_alloc_etherdev_mqs(1348032,32U,32U);
  #line 5964 
  if (netdev == (struct net_device *)0) {
    #line 5965 
    status = -12;
    #line 5966 
    goto rel_reg;
  }
  #line 5968 
  adapter = (struct be_adapter *)netdev_priv(netdev);
  #line 5969 
  adapter->pdev = pdev;
  #line 5970 
  pci_set_drvdata(pdev,(void *)adapter);
  #line 5971 
  adapter->netdev = netdev;
  #line 5972 
  netdev->dev.parent = & pdev->dev;
  #line 5974 
  status = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  #line 5975 
  if (status == 0) 
                   #line 5976 
                   netdev->features |= 32ULL;
  else {
    #line 5978 
    status = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    #line 5979 
    if (status != 0) {
      #line 5980 
      _dev_err(& pdev->dev,(char *)"Could not set PCI DMA Mask\n");
      #line 5981 
      goto free_netdev;
    }
  }
  #line 5985 
  status = pci_enable_pcie_error_reporting(pdev);
  #line 5986 
  if (status == 0) 
                   #line 5987 
                   _dev_info(& pdev->dev,(char *)"PCIe error reporting enabled\n");
  #line 5989 
  status = be_map_pci_bars(adapter);
  #line 5990 
  if (status != 0) 
                   #line 5991 
                   goto free_netdev;
  #line 5993 
  status = be_drv_init(adapter);
  #line 5994 
  if (status != 0) 
                   #line 5995 
                   goto unmap_bars;
  #line 5997 
  status = be_setup(adapter);
  #line 5998 
  if (status != 0) 
                   #line 5999 
                   goto drv_cleanup;
  #line 6001 
  be_netdev_init(netdev);
  #line 6002 
  status = cif_register_netdev(netdev);
  #line 6003 
  if (status != 0) 
                   #line 6004 
                   goto unsetup;
  #line 6006 
  be_roce_dev_add(adapter);
  #line 6008 
  be_schedule_err_detection(adapter,1000U);
  #line 6009 
  adapter->error_recovery.probe_time = jiffies;
  #line 6012 
  if ((unsigned int)adapter->virtfn == 0U) {
    #line 6013 
    adapter->hwmon_info.hwmon_dev = devm_hwmon_device_register_with_groups(& pdev->dev,(char *)"be2net",(void *)adapter,(struct attribute_group **)(& be_hwmon_groups));
    #line 6018 
    adapter->hwmon_info.be_on_die_temp = (unsigned char)255U;
  }
  #line 6021 
  ;
  #line 6021 
  ;
  #line 6021 
  _dev_info(& pdev->dev,(char *)"%s: %s %s port %c\n",nic_name(pdev),func_name(adapter),mc_name(adapter),(int)adapter->port_name);
  #line 6024 
  return 0;
  #line 6026 
  unsetup: 
           #line 6026 
  ;
  #line 6027 
  be_clear(adapter);
  #line 6028 
  drv_cleanup: 
               #line 6028 
  ;
  #line 6029 
  be_drv_cleanup(adapter);
  #line 6030 
  unmap_bars: 
              #line 6030 
  ;
  #line 6031 
  be_unmap_pci_bars(adapter);
  #line 6032 
  free_netdev: 
               #line 6032 
  ;
  #line 6033 
  cif_free_netdev(netdev);
  #line 6034 
  rel_reg: 
           #line 6034 
  ;
  #line 6035 
  pci_release_regions(pdev);
  #line 6036 
  disable_dev: 
               #line 6036 
  ;
  #line 6037 
  pci_disable_device(pdev);
  #line 6038 
  do_none: 
           #line 6038 
  ;
  #line 6039 
  ;
  #line 6039 
  _dev_err(& pdev->dev,(char *)"%s initialization failed\n",nic_name(pdev));
  #line 6040 
  return status;
}

#line 6043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 6045 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 6047 
  be_intr_set(adapter,(_Bool)0);
  #line 6048 
  be_cancel_err_detection(adapter);
  #line 6050 
  be_cleanup(adapter);
  #line 6052 
  pci_save_state(pdev);
  #line 6053 
  pci_disable_device(pdev);
  #line 6054 
  ;
  #line 6054 
  pci_set_power_state(pdev,pci_choose_state(pdev,state));
  #line 6055 
  return 0;
}

#line 6058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_pci_resume(struct pci_dev *pdev)
{
  #line 6060 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 6061 
  int status = 0;
  #line 6063 
  status = pci_enable_device(pdev);
  #line 6064 
  if (status != 0) 
                   #line 6065 
                   return status;
  #line 6067 
  pci_restore_state(pdev);
  #line 6069 
  status = be_resume(adapter);
  #line 6070 
  if (status != 0) 
                   #line 6071 
                   return status;
  #line 6073 
  be_schedule_err_detection(adapter,1000U);
  #line 6075 
  return 0;
}

#line 6081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_shutdown(struct pci_dev *pdev)
{
  #line 6083 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 6085 
  if (adapter == (struct be_adapter *)0) 
                                         #line 6086 
                                         return;
  #line 6088 
  be_roce_dev_shutdown(adapter);
  #line 6089 
  cancel_delayed_work_sync(& adapter->work);
  #line 6090 
  be_cancel_err_detection(adapter);
  #line 6092 
  netif_device_detach(adapter->netdev);
  #line 6094 
  be_cmd_reset_function(adapter);
  #line 6096 
  pci_disable_device(pdev);
  #line 6097 
  return;
}

#line 6099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static pci_ers_result_t be_eeh_err_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 6102 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 6104 
  _dev_err(& (adapter->pdev)->dev,(char *)"EEH error detected\n");
  #line 6106 
  be_roce_dev_remove(adapter);
  #line 6108 
  if ((unsigned int)be_check_error(adapter,1U) == 0U) {
    #line 6109 
    be_set_error(adapter,1);
    #line 6111 
    be_cancel_err_detection(adapter);
    #line 6113 
    be_cleanup(adapter);
  }
  #line 6116 
  if (state == 3U) 
                   #line 6117 
                   return 4U;
  #line 6119 
  pci_disable_device(pdev);
  #line 6127 
  if (pdev->devfn == 0U) 
                         #line 6128 
                         ssleep(30U);
  #line 6130 
  return 3U;
}

#line 6133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static pci_ers_result_t be_eeh_reset(struct pci_dev *pdev)
{
  #line 6136 
  int status;
  #line 6135 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 6138 
  _dev_info(& (adapter->pdev)->dev,(char *)"EEH reset\n");
  #line 6140 
  status = pci_enable_device(pdev);
  #line 6141 
  if (status != 0) 
                   #line 6142 
                   return 4U;
  #line 6144 
  pci_set_master(pdev);
  #line 6145 
  pci_restore_state(pdev);
  #line 6148 
  _dev_info(& (adapter->pdev)->dev,(char *)"Waiting for FW to be ready after EEH reset\n");
  #line 6150 
  status = be_fw_wait_ready(adapter);
  #line 6151 
  if (status != 0) 
                   #line 6152 
                   return 4U;
  #line 6154 
  be_clear_error(adapter,255);
  #line 6155 
  return 5U;
}

#line 6158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_eeh_resume(struct pci_dev *pdev)
{
  #line 6160 
  int status = 0;
  #line 6161 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 6163 
  _dev_info(& (adapter->pdev)->dev,(char *)"EEH resume\n");
  #line 6165 
  pci_save_state(pdev);
  #line 6167 
  status = be_resume(adapter);
  #line 6168 
  if (status != 0) 
                   #line 6169 
                   goto err;
  #line 6171 
  be_roce_dev_add(adapter);
  #line 6173 
  be_schedule_err_detection(adapter,1000U);
  #line 6174 
  return;
  #line 6175 
  err: 
       #line 6175 
  ;
  #line 6176 
  _dev_err(& (adapter->pdev)->dev,(char *)"EEH resume failed\n");
  #line 6177 
  return;
}

#line 6179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_pci_sriov_configure(struct pci_dev *pdev, int num_vfs_0)
{
  #line 6183 
  int status;
  #line 6181 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  #line 6182 
  struct be_resources vft_res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .max_nic_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U, .flags = 0U, .max_rss_tables = (unsigned short)0};
  #line 6185 
  if (num_vfs_0 == 0) 
                      #line 6186 
                      be_vf_clear(adapter);
  #line 6188 
  adapter->num_vfs = (unsigned short)num_vfs_0;
  #line 6190 
  if ((unsigned int)adapter->num_vfs == 0U) {
    #line 6190 
    if (pci_vfs_assigned(pdev) != 0) {
      #line 6191 
      _dev_warn(& pdev->dev,(char *)"Cannot disable VFs while they are assigned\n");
      #line 6193 
      return -16;
    }
  }
  #line 6204 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) {
    #line 6204 
    if (pci_num_vf(pdev) == 0) {
      #line 6205 
      be_calculate_vf_res(adapter,(unsigned short)((int)adapter->num_vfs),& vft_res);
      #line 6207 
      status = be_cmd_set_sriov_config(adapter,adapter->pool_res,(unsigned short)((int)adapter->num_vfs),& vft_res);
      #line 6209 
      if (status != 0) 
                       #line 6210 
                       _dev_err(& pdev->dev,(char *)"Failed to optimize SR-IOV resources\n");
    }
  }
  #line 6214 
  status = be_get_resources(adapter);
  #line 6215 
  if (status != 0) {
    #line 6216 
    int tmp_2;
    #line 6216 
    if (status <= 0) 
                     #line 6216 
                     tmp_2 = status; else 
                                          #line 6216 
                                          tmp_2 = -5;
    #line 6216 
    return tmp_2;
  }
  #line 6219 
  rtnl_lock();
  #line 6220 
  status = be_update_queues(adapter);
  #line 6221 
  rtnl_unlock();
  #line 6222 
  if (status != 0) {
    #line 6223 
    int tmp_3;
    #line 6223 
    if (status <= 0) 
                     #line 6223 
                     tmp_3 = status; else 
                                          #line 6223 
                                          tmp_3 = -5;
    #line 6223 
    return tmp_3;
  }
  #line 6225 
  if ((unsigned int)adapter->num_vfs != 0U) 
                                            #line 6226 
                                            status = be_vf_setup(adapter);
  #line 6228 
  if (status == 0) 
                   #line 6229 
                   return (int)adapter->num_vfs;
  #line 6231 
  return 0;
}

#line 6234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct pci_error_handlers be_eeh_handlers = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& be_eeh_err_detected), .slot_reset = & be_eeh_reset, .resume = & be_eeh_resume};
#line 6240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static struct pci_driver be_driver = {.name = (char *)"be2net", .id_table = (struct pci_device_id *)(& be_dev_ids), .probe = & be_probe, .remove = & be_remove, .suspend = & be_suspend, .resume = & be_pci_resume, .shutdown = & be_shutdown, .sriov_configure = & be_pci_sriov_configure, .err_handler = & be_eeh_handlers};
#line 6252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_init_module(void)
{
  #line 6254 
  int status;
  #line 6256 
  if (((unsigned int)rx_frag_size != 8192U && (unsigned int)rx_frag_size != 4096U) && (unsigned int)rx_frag_size != 2048U) {
    #line 6258 
    printk((char *)"\001");
    #line 6261 
    rx_frag_size = (unsigned short)2048U;
  }
  #line 6264 
  if (num_vfs != 0U) {
    #line 6265 
    printk((char *)"\001");
    #line 6266 
    printk((char *)"\001");
  }
  #line 6269 
  be_wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"be_wq");
  #line 6270 
  if (be_wq == (struct workqueue_struct *)0) {
    #line 6271 
    printk((char *)"\001");
    #line 6272 
    return -1;
  }
  #line 6275 
  be_err_recovery_workq = alloc_workqueue((char *)"%s",917514U,1,(char *)"be_err_recover");
  #line 6277 
  if (be_err_recovery_workq == (struct workqueue_struct *)0) 
                                                             #line 6278 
                                                             printk((char *)"\001");
  #line 6280 
  status = cif___pci_register_driver(& be_driver,& __this_module,(char *)"be2net");
  #line 6281 
  if (status != 0) {
    #line 6282 
    destroy_workqueue(be_wq);
    #line 6283 
    be_destroy_err_recovery_workq();
  }
  #line 6285 
  return status;
}

#line 6289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_exit_module(void)
{
  #line 6291 
  cif_pci_unregister_driver(& be_driver);
  #line 6293 
  be_destroy_err_recovery_workq();
  #line 6295 
  if (be_wq != (struct workqueue_struct *)0) 
                                             #line 6296 
                                             destroy_workqueue(be_wq);
  #line 6297 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
struct pci_device_id (*emg_alias_be_dev_ids)[9U] = & be_dev_ids;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
struct pci_driver *emg_alias_be_driver = & be_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 101 
#line 101 
void emg_free_netdev(struct net_device *arg0);
#line 102 
#line 102 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 103 
#line 103 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 104 
#line 104 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 105 
#line 105 
int emg_register_netdev(struct net_device *arg0);
#line 106 
#line 106 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 107 
#line 107 
void emg_unregister_netdev(struct net_device *arg0);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_be_exit_module(void)
{
  #line 112 
  be_exit_module();
  #line 113 
  return;
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_be_init_module(void)
{
  #line 116 
  return be_init_module();
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_add_vxlan_port(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 120 
  be_add_vxlan_port(arg0,arg1);
  #line 121 
  return;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_close(struct net_device *arg0)
{
  #line 125 
  return be_close(arg0);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_del_vxlan_port(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 130 
  be_del_vxlan_port(arg0,arg1);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
unsigned long long emg_wrapper_be_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 135 
  return be_features_check(arg0,arg1,arg2);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_get_phys_port_id(struct net_device *arg0, struct netdev_phys_item_id *arg1)
{
  #line 140 
  return be_get_phys_port_id(arg0,arg1);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 145 
  be_get_stats64(arg0,arg1);
  #line 146 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_get_vf_config(struct net_device *arg0, int arg1, struct ifla_vf_info *arg2)
{
  #line 150 
  return be_get_vf_config(arg0,arg1,arg2);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
enum irqreturn emg_wrapper_be_intx(int arg0, void *arg1)
{
  #line 155 
  return be_intx(arg0,arg1);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_mac_addr_set(struct net_device *arg0, void *arg1)
{
  #line 160 
  return be_mac_addr_set(arg0,arg1);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
enum irqreturn emg_wrapper_be_msix(int arg0, void *arg1)
{
  #line 165 
  return be_msix(arg0,arg1);
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_ndo_bridge_getlink(struct sk_buff *arg0, unsigned int arg1, unsigned int arg2, struct net_device *arg3, unsigned int arg4, int arg5)
{
  #line 170 
  return be_ndo_bridge_getlink(arg0,arg1,arg2,arg3,arg4,arg5);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_ndo_bridge_setlink(struct net_device *arg0, struct nlmsghdr *arg1, unsigned short arg2, struct netlink_ext_ack *arg3)
{
  #line 175 
  return be_ndo_bridge_setlink(arg0,arg1,(unsigned short)((int)arg2),arg3);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_netpoll(struct net_device *arg0)
{
  #line 180 
  be_netpoll(arg0);
  #line 181 
  return;
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_open(struct net_device *arg0)
{
  #line 185 
  return be_open(arg0);
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_pci_resume(struct pci_dev *arg0)
{
  #line 190 
  return be_pci_resume(arg0);
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_pci_sriov_configure(struct pci_dev *arg0, int arg1)
{
  #line 195 
  return be_pci_sriov_configure(arg0,arg1);
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 200 
  return be_probe(arg0,arg1);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_remove(struct pci_dev *arg0)
{
  #line 205 
  be_remove(arg0);
  #line 206 
  return;
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_set_rx_mode(struct net_device *arg0)
{
  #line 210 
  be_set_rx_mode(arg0);
  #line 211 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_set_vf_link_state(struct net_device *arg0, int arg1, int arg2)
{
  #line 215 
  return be_set_vf_link_state(arg0,arg1,arg2);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_set_vf_mac(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  #line 220 
  return be_set_vf_mac(arg0,arg1,arg2);
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_set_vf_spoofchk(struct net_device *arg0, int arg1, _Bool arg2)
{
  #line 225 
  return be_set_vf_spoofchk(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_set_vf_tx_rate(struct net_device *arg0, int arg1, int arg2, int arg3)
{
  #line 230 
  return be_set_vf_tx_rate(arg0,arg1,arg2,arg3);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_set_vf_vlan(struct net_device *arg0, int arg1, unsigned short arg2, unsigned char arg3, unsigned short arg4)
{
  #line 235 
  return be_set_vf_vlan(arg0,arg1,(unsigned short)((int)arg2),
                     (unsigned char)((int)arg3),(unsigned short)((int)arg4));
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_shutdown(struct pci_dev *arg0)
{
  #line 240 
  be_shutdown(arg0);
  #line 241 
  return;
}

#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 245 
  return be_suspend(arg0,arg1);
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
void emg_wrapper_be_tx_timeout(struct net_device *arg0)
{
  #line 250 
  be_tx_timeout(arg0);
  #line 251 
  return;
}

#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_vlan_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 255 
  return be_vlan_add_vid(arg0,(unsigned short)((int)arg1),
                      (unsigned short)((int)arg2));
}

#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
int emg_wrapper_be_vlan_rem_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 260 
  return be_vlan_rem_vid(arg0,(unsigned short)((int)arg1),
                      (unsigned short)((int)arg2));
}

#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
enum netdev_tx emg_wrapper_be_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 265 
  return be_xmit(arg0,arg1);
}

#line 277  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 280 
  return ldv_find_next_bit(addr,size,offset);
}

#line 284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 287 
  ldv_set_bit(nr,addr);
  #line 288 
  return;
}

#line 291  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 294 
  ldv_clear_bit(nr,addr);
  #line 295 
  return;
}

#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 301 
  ldv_init_list_head(list);
  #line 302 
  return;
}

#line 319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 322 
  return ldv_find_first_bit(addr,size);
}

#line 326  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 329 
  ldv_atomic_add(i,v);
  #line 330 
  return;
}

#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_sub(int i, atomic_t *v)
{
  #line 343 
  ldv_atomic_sub(i,v);
  #line 344 
  return;
}

#line 347  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 350 
  ldv_atomic_inc(v);
  #line 351 
  return;
}

#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void atomic_dec_0(atomic_t *v)
{
  #line 357 
  ldv_atomic_dec(v);
  #line 358 
  return;
}

#line 468  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 472 
  return emg_queue_work(wq,work);
}

#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 480 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 636  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 639 
  return ldv_kcalloc(n,size,flags);
}

#line 657  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 660 
  return ldv_kzalloc(size,flags);
}

#line 718  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 721 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 723 
  spin_lock(lock);
  #line 724 
  return;
}

#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 761 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 763 
  spin_unlock(lock);
  #line 764 
  return;
}

#line 776  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 779 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  #line 781 
  spin_lock(lock);
  #line 782 
  return;
}

#line 785  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 788 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  #line 790 
  spin_unlock(lock);
  #line 791 
  return;
}

#line 803  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 806 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 808 
  spin_lock_bh_0(lock);
  #line 809 
  return;
}

#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 824 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 826 
  spin_unlock_bh_0(lock);
  #line 827 
  return;
}

#line 985  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_mutex_lock_rx_filter_lock_of_be_adapter(struct mutex *lock)
{
  #line 988 
  ldv_mutex_model_lock(lock,(char *)"rx_filter_lock_of_be_adapter");
  #line 989 
  return;
}

#line 992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_mutex_unlock_rx_filter_lock_of_be_adapter(struct mutex *lock)
{
  #line 995 
  ldv_mutex_model_unlock(lock,(char *)"rx_filter_lock_of_be_adapter");
  #line 996 
  return;
}

#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1003 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1011 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 1018 
  return ldv_request_firmware(fw);
}

#line 1022  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 1025 
  ldv_release_firmware(fw);
  #line 1026 
  return;
}

#line 1029  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1033 
  emg_unregister_netdev(dev);
  #line 1034 
  return;
}

#line 1037  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1041 
  emg_free_netdev(dev);
  #line 1042 
  return;
}

#line 1045  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1049 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1053  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1057 
  return emg_register_netdev(dev);
}

#line 1061  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1065 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1069  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1073 
  emg_pci_unregister_driver(dev);
  #line 1074 
  return;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2245 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus_0(void)
{
  #line 112 
  return (unsigned int)atomic_read_1(& __num_online_cpus);
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_rx_irqs_0(struct be_adapter *adapter)
{
  #line 723 
  unsigned short __UNIQUE_ID___x553;
  #line 723 
  int tmp;
  #line 725 
  unsigned short __UNIQUE_ID___x557;
  #line 725 
  int tmp_4;
  {
    #line 723 
    __UNIQUE_ID___x553 = adapter->res.max_rss_qs;
    #line 723 
    unsigned short __UNIQUE_ID___y554 = (unsigned short)1U;
    #line 723 
    if ((int)__UNIQUE_ID___x553 > (int)__UNIQUE_ID___y554) 
                                                           #line 723 
                                                           tmp = (int)__UNIQUE_ID___x553; else 
                                                                    #line 723 
                                                                    tmp = (int)__UNIQUE_ID___y554;
    }
  #line 723 
  u16 num = (unsigned short)tmp;
  {
    #line 725 
    unsigned short __UNIQUE_ID___x555;
    #line 725 
    int tmp_2;
    #line 725 
    __UNIQUE_ID___x557 = num;
    {
      #line 725 
      __UNIQUE_ID___x555 = adapter->res.max_nic_evt_qs;
      #line 725 
      unsigned short __UNIQUE_ID___y556 = (unsigned short)num_online_cpus_0();
      #line 725 
      if ((int)__UNIQUE_ID___x555 < (int)__UNIQUE_ID___y556) 
                                                             #line 725 
                                                             tmp_2 = (int)__UNIQUE_ID___x555; else 
                                                                    #line 725 
                                                                    tmp_2 = (int)__UNIQUE_ID___y556;
      }
    #line 725 
    unsigned short __UNIQUE_ID___y558 = (unsigned short)tmp_2;
    #line 725 
    if ((int)__UNIQUE_ID___x557 < (int)__UNIQUE_ID___y558) 
                                                           #line 725 
                                                           tmp_4 = (int)__UNIQUE_ID___x557; else 
                                                                    #line 725 
                                                                    tmp_4 = (int)__UNIQUE_ID___y558;
    }
  #line 725 
  return (unsigned short)tmp_4;
}

#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_tx_irqs_0(struct be_adapter *adapter)
{
  #line 731 
  unsigned short __UNIQUE_ID___x561;
  #line 731 
  int tmp_2;
  {
    #line 731 
    unsigned short __UNIQUE_ID___x559;
    #line 731 
    int tmp_0;
    #line 731 
    __UNIQUE_ID___x561 = adapter->res.max_tx_qs;
    {
      #line 731 
      __UNIQUE_ID___x559 = adapter->res.max_nic_evt_qs;
      #line 731 
      unsigned short __UNIQUE_ID___y560 = (unsigned short)num_online_cpus_0();
      #line 731 
      if ((int)__UNIQUE_ID___x559 < (int)__UNIQUE_ID___y560) 
                                                             #line 731 
                                                             tmp_0 = (int)__UNIQUE_ID___x559; else 
                                                                    #line 731 
                                                                    tmp_0 = (int)__UNIQUE_ID___y560;
      }
    #line 731 
    unsigned short __UNIQUE_ID___y562 = (unsigned short)tmp_0;
    #line 731 
    if ((int)__UNIQUE_ID___x561 < (int)__UNIQUE_ID___y562) 
                                                           #line 731 
                                                           tmp_2 = (int)__UNIQUE_ID___x561; else 
                                                                    #line 731 
                                                                    tmp_2 = (int)__UNIQUE_ID___y562;
    }
  #line 731 
  return (unsigned short)tmp_2;
}

#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_qp_irqs_0(struct be_adapter *adapter)
{
  #line 737 
  int tmp_1;
  #line 737 
  u16 __UNIQUE_ID___x563;
  {
    #line 737 
    __UNIQUE_ID___x563 = be_max_tx_irqs_0(adapter);
    #line 737 
    u16 __UNIQUE_ID___y564 = be_max_rx_irqs_0(adapter);
    #line 737 
    if ((int)__UNIQUE_ID___x563 < (int)__UNIQUE_ID___y564) 
                                                           #line 737 
                                                           tmp_1 = (int)__UNIQUE_ID___x563; else 
                                                                    #line 737 
                                                                    tmp_1 = (int)__UNIQUE_ID___y564;
    }
  #line 737 
  return (unsigned short)tmp_1;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static struct be_ethtool_stat et_stats[37U] = {{.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 36}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'s', (char)'y', (char)'m', (char)'b', (char)'o', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 40}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .type = 2, .size = 4, .offset = 44}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .type = 2, .size = 4, .offset = 52}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'n', (char)'_', (char)'r', (char)'a', (char)'n', (char)'g', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 56}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'r', (char)'a', (char)'n', (char)'g', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 60}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g'}, .type = 2, .size = 4, .offset = 64}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'d', (char)'d', (char)'r', (char)'e', (char)'s', (char)'s', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'e', (char)'d'}, .type = 2, .size = 4, .offset = 68}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'s', (char)'m', (char)'a', (char)'l', (char)'l'}, .type = 2, .size = 4, .offset = 72}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t'}, .type = 2, .size = 4, .offset = 76}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'h', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'s', (char)'m', (char)'a', (char)'l', (char)'l'}, .type = 2, .size = 4, .offset = 80}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h'}, .type = 2, .size = 4, .offset = 84}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t'}, .type = 2, .size = 4, .offset = 88}, {.desc = {(char)'r', (char)'x', (char)'p', (char)'p', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .type = 2, .size = 4, .offset = 116}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'n', (char)'p', (char)'u', (char)'t', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .type = 2, .size = 4, .offset = 120}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 92}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 96}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'d', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 100}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .type = 2, .size = 4, .offset = 104}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .type = 2, .size = 4, .offset = 112}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'r', (char)'i', (char)'o', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .type = 2, .size = 4, .offset = 48}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'r', (char)'i', (char)'o', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .type = 2, .size = 4, .offset = 108}, {.desc = {(char)'p', (char)'m', (char)'e', (char)'m', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .type = 2, .size = 4, .offset = 124}, {.desc = {(char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'s'}, .type = 2, .size = 4, .offset = 128}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'p', (char)'b', (char)'u', (char)'f'}, .type = 2, .size = 4, .offset = 8}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'e', (char)'r', (char)'x', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'r'}, .type = 2, .size = 4, .offset = 16}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'t', (char)'p', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'r'}, .type = 2, .size = 4, .offset = 20}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'m', (char)'a', (char)'n', (char)'y', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s'}, .type = 2, .size = 4, .offset = 24}, {.desc = {(char)'f', (char)'o', (char)'r', (char)'w', (char)'a', (char)'r', (char)'d', (char)'e', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .type = 2, .size = 4, .offset = 28}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'m', (char)'t', (char)'u'}, .type = 2, .size = 4, .offset = 32}, {.desc = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'m', (char)'a', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 2, .size = 4, .offset = 4}, {.desc = {(char)'e', (char)'t', (char)'h', (char)'_', (char)'r', (char)'e', (char)'d', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}, .type = 2, .size = 4}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'l', (char)'s', (char)'d'}, .type = 2, .size = 4, .offset = 132}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'m', (char)'s', (char)'d'}, .type = 2, .size = 4, .offset = 136}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .type = 2, .size = 4, .offset = 140}, {.desc = {(char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'p', (char)'a', (char)'y', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'l', (char)'e', (char)'n'}, .type = 2, .size = 4, .offset = 144}, {.desc = {(char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'c', (char)'r', (char)'c'}, .type = 2, .size = 4, .offset = 148}};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static struct be_ethtool_stat et_rx_stats[9U] = {{.desc = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .type = 1, .size = 8}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .type = 1, .size = 8, .offset = 8}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .type = 1, .size = 8, .offset = 16}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l'}, .type = 1, .size = 4, .offset = 36}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r'}, .type = 1, .size = 4, .offset = 44}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .type = 1, .size = 4, .offset = 40}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'o', (char)'s', (char)'t', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .type = 1, .size = 4, .offset = 32}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'s', (char)'k', (char)'b', (char)'s'}, .type = 1, .size = 4, .offset = 24}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s'}, .type = 1, .size = 4, .offset = 28}};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static struct be_ethtool_stat et_tx_stats[14U] = {{.desc = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l'}, .size = 8, .offset = 32}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'d', (char)'r', (char)'_', (char)'p', (char)'a', (char)'r', (char)'s', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r'}, .size = 4, .offset = 48}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r'}, .size = 4, .offset = 52}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'p', (char)'o', (char)'o', (char)'f', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'_', (char)'e', (char)'r', (char)'r'}, .size = 4, .offset = 60}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r'}, .size = 4, .offset = 56}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'q', (char)'i', (char)'n', (char)'q', (char)'_', (char)'e', (char)'r', (char)'r'}, .size = 4, .offset = 64}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)'_', (char)'p', (char)'a', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r'}, .size = 4, .offset = 68}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'g', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r'}, .size = 4, .offset = 72}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .size = 8}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .size = 8, .offset = 8}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .size = 8, .offset = 16}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'q', (char)'s'}, .size = 8, .offset = 24}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'t', (char)'o', (char)'p', (char)'s'}, .size = 4, .offset = 40}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'v', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}, .size = 4, .offset = 44}};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static char et_self_tests[5U][32U] = {{(char)'M', (char)'A', (char)'C', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}, {(char)'P', (char)'H', (char)'Y', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}, {(char)'E', (char)'x', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}, {(char)'D', (char)'D', (char)'R', (char)' ', (char)'D', (char)'M', (char)'A', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t'}};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 221 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 223 
  strlcpy((char *)(& drvinfo->driver),(char *)"be2net",32UL);
  #line 224 
  strlcpy((char *)(& drvinfo->version),(char *)"12.0.0.0",32UL);
  #line 225 
  if (memcmp((void *)(& adapter->fw_ver),(void *)(& adapter->fw_on_flash),
               32UL) == 0) 
    #line 226 
    strlcpy((char *)(& drvinfo->fw_version),(char *)(& adapter->fw_ver),32UL); else 
                                                                    #line 229 
                                                                    snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%s [%s]",(char *)(& adapter->fw_ver),(char *)(& adapter->fw_on_flash));
  #line 232 
  ;
  #line 232 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 233 
  return;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 lancer_cmd_get_file_len(struct be_adapter *adapter, u8 *file_name)
{
  #line 238 
  u32 eof;
  #line 239 
  u8 addn_status;
  #line 240 
  struct be_dma_mem data_len_cmd;
  #line 238 
  u32 data_read = 0U;
  #line 242 
  memset((void *)(& data_len_cmd),0,24UL);
  #line 244 
  lancer_cmd_read_object(adapter,& data_len_cmd,0U,0U,(char *)file_name,& data_read,& eof,& addn_status);
  #line 247 
  return data_read;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_dump_len(struct be_adapter *adapter)
{
  #line 252 
  u32 dump_size = 0U;
  #line 254 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 255 
    dump_size = lancer_cmd_get_file_len(adapter,(u8 *)"/dbg/dump.bin"); else 
                                                                    #line 258 
                                                                    dump_size = adapter->fat_dump_len;
  #line 260 
  return (int)dump_size;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int lancer_cmd_read_file(struct be_adapter *adapter, u8 *file_name, u32 buf_len, void *buf)
{
  #line 266 
  struct be_dma_mem read_cmd;
  #line 267 
  u32 chunk_size;
  #line 269 
  u8 addn_status;
  #line 267 
  u32 read_len = 0U;
  #line 267 
  u32 total_read_len = 0U;
  #line 268 
  u32 eof = 0U;
  #line 270 
  int status = 0;
  #line 272 
  read_cmd.size = 32768U;
  #line 273 
  read_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)read_cmd.size,& read_cmd.dma,2592U);
  #line 276 
  if (read_cmd.va == (void *)0) {
    #line 277 
    _dev_err(& (adapter->pdev)->dev,(char *)"Memory allocation failure while reading dump\n");
    #line 279 
    return -12;
  }
  #line 282 
  while (total_read_len < buf_len && eof == 0U) {
    #line 283 
    unsigned int __UNIQUE_ID___x567;
    #line 283 
    unsigned int tmp;
    {
      #line 283 
      __UNIQUE_ID___x567 = buf_len - total_read_len;
      #line 283 
      unsigned int __UNIQUE_ID___y568 = 32768U;
      #line 283 
      if (__UNIQUE_ID___x567 < __UNIQUE_ID___y568) 
                                                   #line 283 
                                                   tmp = __UNIQUE_ID___x567; else 
                                                                    #line 283 
                                                                    tmp = __UNIQUE_ID___y568;
      }
    #line 283 
    chunk_size = tmp;
    #line 285 
    chunk_size = (chunk_size + 3U) & 4294967292U;
    #line 286 
    status = lancer_cmd_read_object(adapter,& read_cmd,chunk_size,total_read_len,(char *)file_name,& read_len,& eof,& addn_status);
    #line 289 
    if (status == 0) {
      #line 290 
      memcpy(buf + (unsigned long)total_read_len,read_cmd.va,(unsigned long)read_len);
      #line 291 
      total_read_len += read_len;
      #line 292 
      eof &= 2147483648U;
    }
    else {
      #line 294 
      status = -5;
      #line 295 
      break;
    }
  }
  #line 298 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)read_cmd.size,read_cmd.va,read_cmd.dma);
  #line 301 
  return status;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_read_dump_data(struct be_adapter *adapter, u32 dump_len, void *buf)
{
  #line 307 
  int status = 0;
  #line 309 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 310 
    status = lancer_cmd_read_file(adapter,(u8 *)"/dbg/dump.bin",dump_len,buf); else 
                                                                    #line 313 
                                                                    status = be_cmd_get_fat_dump(adapter,dump_len,buf);
  #line 315 
  return status;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *et)
{
  #line 321 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 322 
  struct be_aic_obj *aic = & adapter->aic_obj[0];
  #line 324 
  et->rx_coalesce_usecs = aic->prev_eqd;
  #line 325 
  et->rx_coalesce_usecs_high = aic->max_eqd;
  #line 326 
  et->rx_coalesce_usecs_low = aic->min_eqd;
  #line 328 
  et->tx_coalesce_usecs = aic->prev_eqd;
  #line 329 
  et->tx_coalesce_usecs_high = aic->max_eqd;
  #line 330 
  et->tx_coalesce_usecs_low = aic->min_eqd;
  #line 332 
  et->use_adaptive_rx_coalesce = (unsigned int)adapter->aic_enabled;
  #line 333 
  et->use_adaptive_tx_coalesce = (unsigned int)adapter->aic_enabled;
  #line 335 
  return 0;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *et)
{
  #line 346 
  struct be_eq_obj *eqo;
  #line 347 
  int i;
  #line 344 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 345 
  struct be_aic_obj *aic = & adapter->aic_obj[0];
  #line 349 
  adapter->aic_enabled = (_Bool)(et->use_adaptive_rx_coalesce != 0U);
  #line 351 
  i = 0;
  #line 351 
  eqo = & adapter->eq_obj[i];
  #line 351 
  while ((int)adapter->num_evt_qs > i) {
    {
      #line 354 
      __u32 tmp_4;
      #line 355 
      u32 __UNIQUE_ID___x575;
      #line 355 
      u32 tmp_6;
      #line 352 
      __u32 __UNIQUE_ID___x569;
      #line 352 
      __u32 tmp_0;
      #line 353 
      __u32 __UNIQUE_ID___x571;
      #line 353 
      __u32 tmp_2;
      #line 354 
      __u32 __UNIQUE_ID___x573;
      {
        #line 352 
        __UNIQUE_ID___x569 = et->rx_coalesce_usecs_high;
        #line 352 
        unsigned int __UNIQUE_ID___y570 = 128U;
        #line 352 
        if (__UNIQUE_ID___x569 < __UNIQUE_ID___y570) 
                                                     #line 352 
                                                     tmp_0 = __UNIQUE_ID___x569; else 
                                                                    #line 352 
                                                                    tmp_0 = __UNIQUE_ID___y570;
        }
      #line 352 
      aic->max_eqd = tmp_0;
      {
        #line 353 
        __UNIQUE_ID___x571 = et->rx_coalesce_usecs_low;
        #line 353 
        u32 __UNIQUE_ID___y572 = aic->max_eqd;
        #line 353 
        if (__UNIQUE_ID___x571 < __UNIQUE_ID___y572) 
                                                     #line 353 
                                                     tmp_2 = __UNIQUE_ID___x571; else 
                                                                    #line 353 
                                                                    tmp_2 = __UNIQUE_ID___y572;
        }
      #line 353 
      aic->min_eqd = tmp_2;
      {
        #line 354 
        __UNIQUE_ID___x573 = et->rx_coalesce_usecs;
        #line 354 
        u32 __UNIQUE_ID___y574 = aic->max_eqd;
        #line 354 
        if (__UNIQUE_ID___x573 < __UNIQUE_ID___y574) 
                                                     #line 354 
                                                     tmp_4 = __UNIQUE_ID___x573; else 
                                                                    #line 354 
                                                                    tmp_4 = __UNIQUE_ID___y574;
        }
      #line 354 
      aic->et_eqd = tmp_4;
      {
        #line 355 
        __UNIQUE_ID___x575 = aic->et_eqd;
        #line 355 
        u32 __UNIQUE_ID___y576 = aic->min_eqd;
        #line 355 
        if (__UNIQUE_ID___x575 > __UNIQUE_ID___y576) 
                                                     #line 355 
                                                     tmp_6 = __UNIQUE_ID___x575; else 
                                                                    #line 355 
                                                                    tmp_6 = __UNIQUE_ID___y576;
        }
      #line 355 
      aic->et_eqd = tmp_6;
      #line 356 
      aic ++;
    }
    #line 351 
    i ++;
    #line 351 
    eqo ++;
  }
  #line 364 
  if (et->use_adaptive_rx_coalesce == 0U && ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U)) 
    #line 365 
    be_eqd_update(adapter,(_Bool)1);
  #line 367 
  return 0;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, uint64_t *data)
{
  #line 374 
  struct be_rx_obj *rxo;
  #line 375 
  struct be_tx_obj *txo;
  #line 376 
  void *p;
  #line 377 
  unsigned int i;
  #line 377 
  unsigned int j;
  #line 377 
  unsigned int start;
  #line 373 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 377 
  unsigned int base = 0U;
  #line 379 
  i = 0U;
  #line 379 
  while (i <= 36U) {
    #line 380 
    p = (void *)((u8 *)(& adapter->drv_stats) + (unsigned long)et_stats[i].offset);
    #line 381 
    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 379 
    i ++;
  }
  #line 383 
  base += 37U;
  #line 385 
  j = 0U;
  #line 385 
  rxo = & adapter->rx_obj[j];
  #line 385 
  while ((unsigned int)adapter->num_rx_qs > j) {
    {
      #line 386 
      struct be_rx_stats *stats_0 = & rxo->stats;
      #line 388 
      while (1) {
        #line 389 
        start = u64_stats_fetch_begin_irq(& stats_0->sync);
        #line 390 
        *(data + (unsigned long)base) = stats_0->rx_bytes;
        #line 391 
        *(data + (unsigned long)(base + 1U)) = stats_0->rx_pkts;
        #line 392 
        if (! ((int)u64_stats_fetch_retry_irq(& stats_0->sync,start) != 0)) 
          #line 388 
          break;
      }
      #line 394 
      i = 2U;
      #line 394 
      while (i <= 8U) {
        #line 395 
        p = (void *)((u8 *)stats_0 + (unsigned long)et_rx_stats[i].offset);
        #line 396 
        *(data + (unsigned long)(base + i)) = (unsigned long long)*((u32 *)p);
        #line 394 
        i ++;
      }
      #line 398 
      base += 9U;
    }
    #line 385 
    j ++;
    #line 385 
    rxo ++;
  }
  #line 401 
  j = 0U;
  #line 401 
  txo = & adapter->tx_obj[j];
  #line 401 
  while ((unsigned int)adapter->num_tx_qs > j) {
    {
      #line 402 
      struct be_tx_stats *stats_1 = & txo->stats;
      #line 404 
      while (1) {
        #line 405 
        start = u64_stats_fetch_begin_irq(& stats_1->sync_compl);
        #line 406 
        *(data + (unsigned long)base) = stats_1->tx_compl;
        #line 407 
        if (! ((int)u64_stats_fetch_retry_irq(& stats_1->sync_compl,start) != 0)) 
          #line 404 
          break;
      }
      #line 409 
      while (1) {
        #line 410 
        start = u64_stats_fetch_begin_irq(& stats_1->sync);
        #line 411 
        i = 1U;
        #line 411 
        while (i <= 13U) {
          #line 412 
          p = (void *)((u8 *)stats_1 + (unsigned long)et_tx_stats[i].offset);
          #line 413 
          if (et_tx_stats[i].size == 8) 
                                        #line 413 
                                        *(data + (unsigned long)(base + i)) = *((u64 *)p); else 
                                                                    #line 413 
                                                                    *(data + (unsigned long)(base + i)) = (unsigned long long)*((u32 *)p);
          #line 411 
          i ++;
        }
        #line 417 
        if (! ((int)u64_stats_fetch_retry_irq(& stats_1->sync,start) != 0)) 
          #line 409 
          break;
      }
      #line 418 
      base += 14U;
    }
    #line 401 
    j ++;
    #line 401 
    txo ++;
  }
  #line 420 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static char be_priv_flags[1U][32U] = {{(char)'d', (char)'i', (char)'s', (char)'a', (char)'b', (char)'l', (char)'e', (char)'-', (char)'t', (char)'p', (char)'e', (char)'-', (char)'r', (char)'e', (char)'c', (char)'o', (char)'v', (char)'e', (char)'r', (char)'y'}};
#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_stat_strings(struct net_device *netdev, uint32_t stringset, uint8_t *data)
{
  #line 430 
  int i;
  #line 430 
  int j;
  #line 429 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 432 
  switch (stringset) {
    #line 433 
    case (uint32_t)1: 
                      #line 433 
    ;
    #line 434 
    i = 0;
    #line 434 
    while ((unsigned int)i <= 36U) {
      #line 435 
      memcpy((void *)data,(void *)(& et_stats[i].desc),32UL);
      #line 436 
      data += 32U;
      #line 434 
      i ++;
    }
    #line 438 
    i = 0;
    #line 438 
    while ((int)adapter->num_rx_qs > i) {
      #line 439 
      j = 0;
      #line 439 
      while ((unsigned int)j <= 8U) {
        #line 440 
        sprintf((char *)data,(char *)"rxq%d: %s",i,(char *)(& et_rx_stats[j].desc));
        #line 442 
        data += 32U;
        #line 439 
        j ++;
      }
      #line 438 
      i ++;
    }
    #line 445 
    i = 0;
    #line 445 
    while ((int)adapter->num_tx_qs > i) {
      #line 446 
      j = 0;
      #line 446 
      while ((unsigned int)j <= 13U) {
        #line 447 
        sprintf((char *)data,(char *)"txq%d: %s",i,(char *)(& et_tx_stats[j].desc));
        #line 449 
        data += 32U;
        #line 446 
        j ++;
      }
      #line 445 
      i ++;
    }
    #line 452 
    break;
    #line 453 
    case (uint32_t)0: 
                      #line 453 
    ;
    #line 454 
    i = 0;
    #line 454 
    while ((unsigned int)i <= 4U) {
      #line 455 
      memcpy((void *)data,(void *)(& et_self_tests[i]),32UL);
      #line 456 
      data += 32U;
      #line 454 
      i ++;
    }
    #line 458 
    break;
    #line 459 
    case (uint32_t)2: 
                      #line 459 
    ;
    #line 460 
    i = 0;
    #line 460 
    while (i == 0) {
      #line 461 
      strcpy((char *)(data + (unsigned long)(i * 32)),(char *)(& be_priv_flags[i]));
      #line 460 
      i ++;
    }
    #line 462 
    break;
  }
  #line 464 
  return;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_sset_count(struct net_device *netdev, int stringset)
{
  #line 468 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 470 
  switch (stringset) {
    #line 471 
    case 0: 
            #line 471 
    ;
    #line 472 
    return 5;
    #line 473 
    case 1: 
            #line 473 
    ;
    #line 475 
    return (int)(((unsigned int)adapter->num_rx_qs * 9U + (unsigned int)adapter->num_tx_qs * 14U) + 37U);
    #line 477 
    case 2: 
            #line 477 
    ;
    #line 478 
    return 1;
    #line 479 
    default: 
             #line 479 
    ;
    #line 480 
    return -22;
  }
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_port_type(struct be_adapter *adapter)
{
  #line 486 
  u32 port;
  #line 488 
  switch ((int)adapter->phy.interface_type) {
    #line 489 
    case 7: 
            #line 489 
    ;
    #line 490 
    case 8: 
            #line 490 
    ;
    #line 491 
    case 9: 
            #line 491 
    ;
    #line 492 
    port = 0U;
    #line 493 
    break;
    #line 494 
    case 3: 
            #line 494 
    ;
    #line 495 
    if (((int)adapter->phy.cable_type & 4) != 0) 
                                                 #line 496 
                                                 port = 5U; else 
                                                                 #line 498 
                                                                 port = 3U;
    #line 499 
    break;
    #line 500 
    case 10: 
             #line 500 
    ;
    #line 501 
    if (((int)adapter->phy.cable_type & 8) != 0) 
                                                 #line 502 
                                                 port = 5U; else 
                                                                 #line 504 
                                                                 port = 3U;
    #line 505 
    break;
    #line 506 
    case 1: 
            #line 506 
    ;
    #line 507 
    case 2: 
            #line 507 
    ;
    #line 508 
    port = 3U;
    #line 509 
    break;
    #line 510 
    case 6: 
            #line 510 
    ;
    #line 511 
    port = 0U;
    #line 512 
    break;
    #line 513 
    default: 
             #line 513 
    ;
    #line 514 
    port = 255U;
  }
  #line 517 
  return port;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 convert_to_et_setting(struct be_adapter *adapter, u32 if_speeds)
{
  #line 522 
  u32 val = 0U;
  #line 524 
  switch ((int)adapter->phy.interface_type) {
    #line 525 
    case 7: 
            #line 525 
    ;
    #line 526 
    case 8: 
            #line 526 
    ;
    #line 527 
    case 9: 
            #line 527 
    ;
    #line 528 
    val |= 128U;
    #line 529 
    if ((if_speeds & 4U) != 0U) 
                                #line 530 
                                val |= 32U;
    #line 531 
    if ((if_speeds & 2U) != 0U) 
                                #line 532 
                                val |= 8U;
    #line 533 
    if ((if_speeds & 1U) != 0U) 
                                #line 534 
                                val |= 2U;
    #line 535 
    break;
    #line 536 
    case 5: 
            #line 536 
    ;
    #line 537 
    val |= 65536U;
    #line 538 
    if ((if_speeds & 4U) != 0U) 
                                #line 539 
                                val |= 131072U;
    #line 540 
    if ((if_speeds & 8U) != 0U) 
                                #line 541 
                                val |= 262144U;
    #line 542 
    break;
    #line 543 
    case 12: 
             #line 543 
    ;
    #line 544 
    val |= 65536U;
    #line 545 
    if ((if_speeds & 8U) != 0U) 
                                #line 546 
                                val |= 524288U;
    #line 547 
    if ((if_speeds & 16U) != 0U) 
                                 #line 548 
                                 val |= 4194304U;
    #line 549 
    break;
    #line 550 
    case 4: 
            #line 550 
    ;
    #line 551 
    val |= 589824U;
    #line 553 
    break;
    #line 554 
    case 11: 
             #line 554 
    ;
    #line 555 
    val |= 65536U;
    #line 556 
    if ((if_speeds & 8U) != 0U) 
                                #line 557 
                                val |= 524288U;
    #line 558 
    if ((if_speeds & 32U) != 0U) 
                                 #line 559 
                                 val |= 8388608U;
    #line 560 
    break;
    #line 561 
    case 10: 
             #line 561 
    ;
    #line 562 
    if ((if_speeds & 32U) != 0U) 
      #line 563 
      switch ((int)adapter->phy.cable_type) {
        #line 564 
        case 8: 
                #line 564 
        ;
        #line 565 
        val |= 16777216U;
        #line 566 
        break;
        #line 567 
        case 2: 
                #line 567 
        ;
        #line 568 
        val |= 67108864U;
        #line 569 
        break;
        #line 570 
        default: 
                 #line 570 
        ;
        #line 571 
        val |= 33554432U;
        #line 572 
        break;
      }
    #line 576 
    case 3: 
            #line 576 
    ;
    #line 577 
    case 1: 
            #line 577 
    ;
    #line 578 
    case 2: 
            #line 578 
    ;
    #line 579 
    val |= 1024U;
    #line 580 
    if ((if_speeds & 8U) != 0U) 
                                #line 581 
                                val |= 4096U;
    #line 582 
    if ((if_speeds & 4U) != 0U) 
                                #line 583 
                                val |= 32U;
    #line 584 
    break;
    #line 585 
    case 6: 
            #line 585 
    ;
    #line 586 
    val |= 128U;
    #line 587 
    if ((if_speeds & 8U) != 0U) 
                                #line 588 
                                val |= 4096U;
    #line 589 
    if ((if_speeds & 4U) != 0U) 
                                #line 590 
                                val |= 32U;
    #line 591 
    if ((if_speeds & 2U) != 0U) 
                                #line 592 
                                val |= 8U;
    #line 593 
    break;
    #line 594 
    default: 
             #line 594 
    ;
    #line 595 
    val |= 128U;
  }
  #line 598 
  return val;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
bool be_pause_supported(struct be_adapter *adapter)
{
  #line 605 
  return (_Bool)(((unsigned int)adapter->phy.interface_type != 3U && (unsigned int)adapter->phy.interface_type != 1U) != 0);
}

#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 612 
  u8 link_status;
  #line 614 
  int status;
  #line 615 
  u32 auto_speeds;
  #line 616 
  u32 fixed_speeds;
  #line 611 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 613 
  u16 link_speed = (unsigned short)0U;
  #line 617 
  u32 supported = 0U;
  #line 617 
  u32 advertising = 0U;
  #line 619 
  if (adapter->phy.link_speed < 0) {
    #line 620 
    status = be_cmd_link_status_query(adapter,& link_speed,& link_status,0U);
    #line 622 
    if (status == 0) 
                     #line 623 
                     be_link_status_update(adapter,(unsigned char)((int)link_status));
    #line 624 
    cmd->base.speed = (unsigned int)link_speed;
    #line 626 
    status = be_cmd_get_phy_info(adapter);
    #line 627 
    if (status == 0) {
      #line 628 
      auto_speeds = (unsigned int)adapter->phy.auto_speeds_supported;
      #line 629 
      fixed_speeds = (unsigned int)adapter->phy.fixed_speeds_supported;
      #line 631 
      be_cmd_query_cable_type(adapter);
      #line 633 
      supported = convert_to_et_setting(adapter,auto_speeds | fixed_speeds);
      #line 637 
      advertising = convert_to_et_setting(adapter,auto_speeds);
      #line 640 
      cmd->base.port = (unsigned char)be_get_port_type(adapter);
      #line 642 
      if ((unsigned int)adapter->phy.auto_speeds_supported != 0U) {
        #line 643 
        supported |= 64U;
        #line 644 
        cmd->base.autoneg = (unsigned char)1U;
        #line 645 
        advertising |= 64U;
      }
      #line 648 
      supported |= 8192U;
      #line 649 
      if ((int)be_pause_supported(adapter) != 0) 
                                                 #line 650 
                                                 advertising |= 8192U;
    }
    else {
      #line 652 
      cmd->base.port = (unsigned char)255U;
      #line 653 
      cmd->base.autoneg = (unsigned char)0U;
    }
    #line 657 
    adapter->phy.link_speed = (int)cmd->base.speed;
    #line 658 
    adapter->phy.port_type = cmd->base.port;
    #line 659 
    adapter->phy.autoneg = cmd->base.autoneg;
    #line 660 
    adapter->phy.advertising = advertising;
    #line 661 
    adapter->phy.supported = supported;
  }
  else {
    #line 663 
    cmd->base.speed = (unsigned int)adapter->phy.link_speed;
    #line 664 
    cmd->base.port = adapter->phy.port_type;
    #line 665 
    cmd->base.autoneg = adapter->phy.autoneg;
    #line 666 
    advertising = adapter->phy.advertising;
    #line 667 
    supported = adapter->phy.supported;
  }
  #line 670 
  if ((int)netif_carrier_ok(netdev) != 0) 
                                          #line 670 
                                          cmd->base.duplex = (unsigned char)1U; else 
                                                                    #line 670 
                                                                    cmd->base.duplex = (unsigned char)255U;
  #line 672 
  cmd->base.phy_address = (unsigned char)adapter->port_num;
  #line 674 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 676 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 679 
  return 0;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 685 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 687 
  ring->rx_max_pending = adapter->rx_obj[0].q.len;
  #line 688 
  ring->rx_pending = adapter->rx_obj[0].q.len;
  #line 689 
  ring->tx_max_pending = adapter->tx_obj[0].q.len;
  #line 690 
  ring->tx_pending = adapter->tx_obj[0].q.len;
  #line 691 
  return;
}

#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *ecmd)
{
  #line 696 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 698 
  be_cmd_get_flow_control(adapter,& ecmd->tx_pause,& ecmd->rx_pause);
  #line 699 
  ecmd->autoneg = (unsigned int)adapter->phy.fc_autoneg;
  #line 700 
  return;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *ecmd)
{
  #line 706 
  int status;
  #line 705 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 708 
  if (ecmd->autoneg != (unsigned int)adapter->phy.fc_autoneg) 
                                                              #line 709 
                                                              return -22;
  #line 711 
  status = be_cmd_set_flow_control(adapter,ecmd->tx_pause,ecmd->rx_pause);
  #line 713 
  if (status != 0) {
    #line 715 
    int tmp_0;
    #line 714 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Pause param set failed\n");
    #line 715 
    if (status <= 0) 
                     #line 715 
                     tmp_0 = status; else 
                                          #line 715 
                                          tmp_0 = -5;
    #line 715 
    return tmp_0;
  }
  #line 718 
  adapter->tx_fc = ecmd->tx_pause;
  #line 719 
  adapter->rx_fc = ecmd->rx_pause;
  #line 720 
  return 0;
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 752 
  int tmp_1;
  #line 726 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 727 
  int status = 0;
  #line 729 
  switch ((unsigned int)state) {
    #line 730 
    case (unsigned int)1: 
                          #line 730 
    ;
    #line 731 
    status = be_cmd_get_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),& adapter->beacon_state);
    #line 733 
    if (status != 0) {
      #line 734 
      int tmp_0;
      #line 734 
      if (status <= 0) 
                       #line 734 
                       tmp_0 = status; else 
                                            #line 734 
                                            tmp_0 = -5;
      #line 734 
      return tmp_0;
    }
    #line 735 
    return 1;
    #line 737 
    case (unsigned int)2: 
                          #line 737 
    ;
    #line 738 
    status = be_cmd_set_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)0,(unsigned char)0,(unsigned char)1);
    #line 740 
    break;
    #line 742 
    case (unsigned int)3: 
                          #line 742 
    ;
    #line 743 
    status = be_cmd_set_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 745 
    break;
    #line 747 
    case (unsigned int)0: 
                          #line 747 
    ;
    #line 748 
    status = be_cmd_set_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)0,(unsigned char)0,(unsigned char)((int)((unsigned char)adapter->beacon_state)));
  }
  #line 752 
  if (status <= 0) 
                   #line 752 
                   tmp_1 = status; else 
                                        #line 752 
                                        tmp_1 = -5;
  #line 752 
  return tmp_1;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_dump(struct net_device *netdev, struct ethtool_dump *dump)
{
  #line 759 
  int status;
  #line 757 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 758 
  struct device *dev = & (adapter->pdev)->dev;
  #line 761 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
    #line 763 
    return -95;
  else {
    #line 762 
    if (! check_privilege(adapter,1792U)) 
                                          #line 763 
                                          return -95;
  }
  #line 765 
  switch (dump->flag) {
    #line 766 
    case (__u32)1: 
                   #line 766 
    ;
    #line 767 
    status = lancer_initiate_dump(adapter);
    #line 768 
    if (status == 0) 
                     #line 769 
                     _dev_info(dev,(char *)"FW dump initiated successfully\n");
    #line 770 
    break;
    #line 771 
    case (__u32)2: 
                   #line 771 
    ;
    #line 772 
    status = lancer_delete_dump(adapter);
    #line 773 
    if (status == 0) 
                     #line 774 
                     _dev_info(dev,(char *)"FW dump deleted successfully\n");
    #line 775 
    break;
    #line 776 
    default: 
             #line 776 
    ;
    #line 777 
    _dev_err(dev,(char *)"Invalid dump level: 0x%x\n",dump->flag);
    #line 778 
    return -22;
  }
  #line 780 
  return status;
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 785 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 787 
  if (((int)adapter->wol_cap & 1) != 0) {
    #line 788 
    wol->supported |= 32U;
    #line 789 
    if ((int)adapter->wol_en != 0) 
                                   #line 790 
                                   wol->wolopts |= 32U;
  }
  else 
       #line 792 
       wol->wolopts = 0U;
  #line 794 
  memset((void *)(& wol->sopass),0,6UL);
  #line 795 
  return;
}

#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 801 
  struct be_dma_mem cmd;
  #line 802 
  u8 mac[6U];
  #line 803 
  bool enable;
  #line 804 
  int status;
  #line 799 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 800 
  struct device *dev = & (adapter->pdev)->dev;
  #line 806 
  if ((wol->wolopts & 4294967263U) != 0U) 
                                          #line 807 
                                          return -95;
  #line 809 
  if (((int)adapter->wol_cap & 1) == 0) {
    #line 810 
    _dev_warn(& (adapter->pdev)->dev,(char *)"WOL not supported\n");
    #line 811 
    return -95;
  }
  #line 814 
  cmd.size = 604U;
  #line 815 
  cmd.va = dma_alloc_coherent(dev,(unsigned long)cmd.size,& cmd.dma,3264U);
  #line 816 
  if (cmd.va == (void *)0) 
                           #line 817 
                           return -12;
  #line 819 
  eth_zero_addr((u8 *)(& mac));
  #line 821 
  enable = (_Bool)((wol->wolopts & 32U) != 0U);
  #line 822 
  if ((int)enable != 0) 
                        #line 823 
                        ether_addr_copy((u8 *)(& mac),(adapter->netdev)->dev_addr);
  #line 825 
  status = be_cmd_enable_magic_wol(adapter,(u8 *)(& mac),& cmd);
  #line 826 
  if (status != 0) {
    #line 827 
    _dev_err(dev,(char *)"Could not set Wake-on-lan mac address\n");
    #line 828 
    if (status <= 0) 
                     #line 828 
                     status = status; else 
                                           #line 828 
                                           status = -5;
    #line 829 
    goto err;
  }
  #line 832 
  pci_enable_wake(adapter->pdev,3,(_Bool)((bool)((int)enable) != 0));
  #line 833 
  pci_enable_wake(adapter->pdev,4,(_Bool)((bool)((int)enable) != 0));
  #line 835 
  adapter->wol_en = (_Bool)((int)enable != 0);
  #line 837 
  err: 
       #line 837 
  ;
  #line 838 
  dma_free_coherent(dev,(unsigned long)cmd.size,cmd.va,cmd.dma);
  #line 839 
  return status;
}

#line 842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_test_ddr_dma(struct be_adapter *adapter)
{
  #line 844 
  int ret;
  #line 844 
  int i;
  #line 845 
  struct be_dma_mem ddrdma_cmd;
  #line 867 
  int tmp;
  #line 846 
  u64 pattern[2U] = {6510615555426900570ULL, 11936128518282651045ULL};
  #line 850 
  ddrdma_cmd.size = 8224U;
  #line 851 
  ddrdma_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)ddrdma_cmd.size,& ddrdma_cmd.dma,3264U);
  #line 854 
  if (ddrdma_cmd.va == (void *)0) 
                                  #line 855 
                                  return -12;
  #line 857 
  i = 0;
  #line 857 
  while (i <= 1) {
    #line 858 
    ret = be_cmd_ddr_dma_test(adapter,pattern[i],4096U,& ddrdma_cmd);
    #line 860 
    if (ret != 0) 
                  #line 861 
                  goto err;
    #line 857 
    i ++;
  }
  #line 864 
  err: 
       #line 864 
  ;
  #line 865 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)ddrdma_cmd.size,ddrdma_cmd.va,ddrdma_cmd.dma);
  #line 867 
  if (ret <= 0) 
                #line 867 
                tmp = ret; else 
                                #line 867 
                                tmp = -5;
  #line 867 
  return tmp;
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u64 be_loopback_test(struct be_adapter *adapter, u8 loopback_type, u64 *status)
{
  #line 873 
  int ret;
  #line 875 
  ret = be_cmd_set_loopback(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)((int)loopback_type),(unsigned char)1);
  #line 877 
  if (ret != 0) 
                #line 878 
                return (unsigned long long)ret;
  #line 880 
  *status = (unsigned long long)be_cmd_loopback_test(adapter,(unsigned int)adapter->hba_port_num,
                           (unsigned int)loopback_type,1500U,2U,2748ULL);
  #line 883 
  ret = be_cmd_set_loopback(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)255,(unsigned char)1);
  #line 885 
  if (ret != 0) 
                #line 886 
                return (unsigned long long)ret;
  #line 888 
  return *status;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_self_test(struct net_device *netdev, struct ethtool_test *test, u64 *data)
{
  #line 895 
  int status;
  #line 895 
  int cnt;
  #line 894 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 896 
  u8 link_status = (unsigned char)0U;
  #line 898 
  if ((adapter->function_caps & 64U) != 0U) {
    #line 899 
    _dev_err(& (adapter->pdev)->dev,(char *)"Self test not supported\n");
    #line 900 
    test->flags |= 2U;
    #line 901 
    return;
  }
  #line 904 
  memset((void *)data,0,40UL);
  #line 907 
  link_status = (u8)netif_carrier_ok(netdev);
  #line 909 
  if ((test->flags & 1U) != 0U) {
    #line 910 
    if (be_loopback_test(adapter,(unsigned char)0,data) != 0ULL) 
                                                                 #line 911 
                                                                 test->flags |= 2U;
    #line 913 
    if (be_loopback_test(adapter,(unsigned char)1,data + 1U) != 0ULL) 
      #line 914 
      test->flags |= 2U;
    #line 916 
    if ((test->flags & 4U) != 0U) {
      #line 917 
      if (be_loopback_test(adapter,(unsigned char)2,data + 2U) != 0ULL) 
        #line 919 
        test->flags |= 2U;
      #line 920 
      test->flags |= 8U;
    }
  }
  #line 924 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) {
    #line 924 
    if (be_test_ddr_dma(adapter) != 0) {
      #line 925 
      *(data + 3U) = 1ULL;
      #line 926 
      test->flags |= 2U;
    }
  }
  #line 930 
  if ((unsigned int)link_status == 0U) {
    #line 931 
    test->flags |= 2U;
    #line 932 
    *(data + 4U) = 1ULL;
    #line 933 
    return;
  }
  #line 936 
  cnt = 10;
  #line 936 
  while (cnt != 0) {
    #line 937 
    status = be_cmd_link_status_query(adapter,(u16 *)0U,& link_status,0U);
    #line 939 
    if (status != 0) {
      #line 940 
      test->flags |= 2U;
      #line 941 
      *(data + 4U) = 18446744073709551615ULL;
      #line 942 
      break;
    }
    #line 945 
    if ((unsigned int)link_status != 0U) 
                                         #line 946 
                                         break;
    #line 948 
    msleep_interruptible(500U);
    #line 936 
    cnt --;
  }
  #line 950 
  return;
}

#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_do_flash(struct net_device *netdev, struct ethtool_flash *efl)
{
  #line 954 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 956 
  return be_load_fw(adapter,(u8 *)(& efl->data));
}

#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_dump_flag(struct net_device *netdev, struct ethtool_dump *dump)
{
  #line 962 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 964 
  if (! check_privilege(adapter,1792U)) 
                                        #line 965 
                                        return -95;
  #line 967 
  dump->len = (unsigned int)be_get_dump_len(adapter);
  #line 968 
  dump->version = 1U;
  #line 969 
  dump->flag = 1U;
  #line 970 
  return 0;
}

#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_dump_data(struct net_device *netdev, struct ethtool_dump *dump, void *buf)
{
  #line 978 
  int status;
  #line 984 
  int tmp_1;
  #line 977 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 980 
  if (! check_privilege(adapter,1792U)) 
                                        #line 981 
                                        return -95;
  #line 983 
  status = be_read_dump_data(adapter,dump->len,buf);
  #line 984 
  if (status <= 0) 
                   #line 984 
                   tmp_1 = status; else 
                                        #line 984 
                                        tmp_1 = -5;
  #line 984 
  return tmp_1;
}

#line 987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_eeprom_len(struct net_device *netdev)
{
  #line 989 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 991 
  if (! check_privilege(adapter,1792U)) 
                                        #line 992 
                                        return 0;
  #line 994 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 995 
    if ((unsigned int)adapter->virtfn == 0U) {
      #line 996 
      return (int)lancer_cmd_get_file_len(adapter,(u8 *)"/vpd/ntr_pf.vpd");
    }
    else {
      #line 999 
      return (int)lancer_cmd_get_file_len(adapter,(u8 *)"/vpd/ntr_vf.vpd");
    }
  else 
       #line 1002 
       return 1024;
}

#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_read_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, uint8_t *data)
{
  #line 1010 
  struct be_dma_mem eeprom_cmd;
  #line 1011 
  struct be_cmd_resp_seeprom_read *resp;
  #line 1012 
  int status;
  #line 1046 
  int tmp_2;
  #line 1009 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1014 
  if (eeprom->len == 0U) 
                         #line 1015 
                         return -22;
  #line 1017 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    #line 1018 
    if ((unsigned int)adapter->virtfn == 0U) {
      #line 1019 
      return lancer_cmd_read_file(adapter,(u8 *)"/vpd/ntr_pf.vpd",eeprom->len,
                             (void *)data);
    }
    else {
      #line 1022 
      return lancer_cmd_read_file(adapter,(u8 *)"/vpd/ntr_vf.vpd",eeprom->len,
                             (void *)data);
    }
  #line 1026 
  eeprom->magic = (unsigned int)(((int)(adapter->pdev)->device << 16) | 6562);
  #line 1028 
  memset((void *)(& eeprom_cmd),0,24UL);
  #line 1029 
  eeprom_cmd.size = 1040U;
  #line 1030 
  eeprom_cmd.va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)eeprom_cmd.size,& eeprom_cmd.dma,3264U);
  #line 1034 
  if (eeprom_cmd.va == (void *)0) 
                                  #line 1035 
                                  return -12;
  #line 1037 
  status = be_cmd_get_seeprom_data(adapter,& eeprom_cmd);
  #line 1039 
  if (status == 0) {
    #line 1040 
    resp = (struct be_cmd_resp_seeprom_read *)eeprom_cmd.va;
    #line 1041 
    memcpy((void *)data,(void *)((u8 *)(& resp->seeprom_data) + (unsigned long)eeprom->offset),(unsigned long)eeprom->len);
  }
  #line 1043 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)eeprom_cmd.size,eeprom_cmd.va,eeprom_cmd.dma);
  #line 1046 
  if (status <= 0) 
                   #line 1046 
                   tmp_2 = status; else 
                                        #line 1046 
                                        tmp_2 = -5;
  #line 1046 
  return tmp_2;
}

#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_msg_level(struct net_device *netdev)
{
  #line 1051 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1053 
  return adapter->msg_enable;
}

#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_set_msg_level(struct net_device *netdev, u32 level)
{
  #line 1058 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1060 
  if (adapter->msg_enable == level) 
                                    #line 1061 
                                    return;
  #line 1063 
  if (((adapter->msg_enable ^ level) & 8192U) != 0U) 
    #line 1064 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
      #line 1065 
      unsigned int tmp_0;
      #line 1065 
      if ((level & 8192U) != 0U) 
                                 #line 1065 
                                 tmp_0 = 48U; else 
                                                   #line 1065 
                                                   tmp_0 = 64U;
      #line 1065 
      ;
      #line 1065 
      be_cmd_set_fw_log_level(adapter,tmp_0);
    }
  #line 1068 
  adapter->msg_enable = level;
  #line 1069 
  return;
}

#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u64 be_get_rss_hash_opts(struct be_adapter *adapter, u64 flow_type)
{
  #line 1073 
  u64 data = 0ULL;
  #line 1075 
  switch (flow_type) {
    #line 1076 
    case (u64)1: 
                 #line 1076 
    ;
    #line 1077 
    if ((adapter->rss_info.rss_flags & 1ULL) != 0ULL) 
                                                      #line 1078 
                                                      data |= 48ULL;
    #line 1079 
    if ((adapter->rss_info.rss_flags & 2ULL) != 0ULL) 
                                                      #line 1080 
                                                      data |= 192ULL;
    #line 1081 
    break;
    #line 1082 
    case (u64)2: 
                 #line 1082 
    ;
    #line 1083 
    if ((adapter->rss_info.rss_flags & 1ULL) != 0ULL) 
                                                      #line 1084 
                                                      data |= 48ULL;
    #line 1085 
    if ((adapter->rss_info.rss_flags & 16ULL) != 0ULL) 
                                                       #line 1086 
                                                       data |= 192ULL;
    #line 1087 
    break;
    #line 1088 
    case (u64)5: 
                 #line 1088 
    ;
    #line 1089 
    if ((adapter->rss_info.rss_flags & 4ULL) != 0ULL) 
                                                      #line 1090 
                                                      data |= 48ULL;
    #line 1091 
    if ((adapter->rss_info.rss_flags & 8ULL) != 0ULL) 
                                                      #line 1092 
                                                      data |= 192ULL;
    #line 1093 
    break;
    #line 1094 
    case (u64)6: 
                 #line 1094 
    ;
    #line 1095 
    if ((adapter->rss_info.rss_flags & 4ULL) != 0ULL) 
                                                      #line 1096 
                                                      data |= 48ULL;
    #line 1097 
    if ((adapter->rss_info.rss_flags & 32ULL) != 0ULL) 
                                                       #line 1098 
                                                       data |= 192ULL;
    #line 1099 
    break;
  }
  #line 1102 
  return data;
}

#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 1108 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1110 
  if (! be_multi_rxq(adapter)) {
    #line 1111 
    _dev_info(& (adapter->pdev)->dev,(char *)"ethtool::get_rxnfc: RX flow hashing is disabled\n");
    #line 1113 
    return -22;
  }
  #line 1116 
  switch (cmd->cmd) {
    #line 1117 
    case (__u32)41: 
                    #line 1117 
    ;
    #line 1118 
    cmd->data = be_get_rss_hash_opts(adapter,(unsigned long long)cmd->flow_type);
    #line 1119 
    break;
    #line 1120 
    case (__u32)45: 
                    #line 1120 
    ;
    #line 1121 
    cmd->data = (unsigned long long)adapter->num_rx_qs;
    #line 1122 
    break;
    #line 1123 
    default: 
             #line 1123 
    ;
    #line 1124 
    return -22;
  }
  #line 1127 
  return 0;
}

#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_rss_hash_opts(struct be_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 1133 
  int status;
  #line 1190 
  int tmp;
  #line 1134 
  u32 rss_flags = (unsigned int)adapter->rss_info.rss_flags;
  #line 1136 
  if (cmd->data != 48ULL && cmd->data != 240ULL) 
                                                 #line 1138 
                                                 return -22;
  #line 1140 
  switch (cmd->flow_type) {
    #line 1141 
    case (__u32)1: 
                   #line 1141 
    ;
    #line 1142 
    if (cmd->data == 48ULL) 
                            #line 1143 
                            rss_flags &= 4294967293U;
    else 
      #line 1144 
      if (cmd->data == 240ULL) 
                               #line 1145 
                               rss_flags |= 3U;
    #line 1147 
    break;
    #line 1148 
    case (__u32)5: 
                   #line 1148 
    ;
    #line 1149 
    if (cmd->data == 48ULL) 
                            #line 1150 
                            rss_flags &= 4294967287U;
    else 
      #line 1151 
      if (cmd->data == 240ULL) 
                               #line 1152 
                               rss_flags |= 12U;
    #line 1154 
    break;
    #line 1155 
    case (__u32)2: 
                   #line 1155 
    ;
    #line 1156 
    if (cmd->data == 240ULL && (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) 
      #line 1158 
      return -22;
    #line 1160 
    if (cmd->data == 48ULL) 
                            #line 1161 
                            rss_flags &= 4294967279U;
    else 
      #line 1162 
      if (cmd->data == 240ULL) 
                               #line 1163 
                               rss_flags |= 17U;
    #line 1165 
    break;
    #line 1166 
    case (__u32)6: 
                   #line 1166 
    ;
    #line 1167 
    if (cmd->data == 240ULL && (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) 
      #line 1169 
      return -22;
    #line 1171 
    if (cmd->data == 48ULL) 
                            #line 1172 
                            rss_flags &= 4294967263U;
    else 
      #line 1173 
      if (cmd->data == 240ULL) 
                               #line 1174 
                               rss_flags |= 36U;
    #line 1176 
    break;
    #line 1177 
    default: 
             #line 1177 
    ;
    #line 1178 
    return -22;
  }
  #line 1181 
  if ((unsigned long long)rss_flags == adapter->rss_info.rss_flags) 
                                                                    #line 1182 
                                                                    return 0;
  #line 1184 
  status = be_cmd_rss_config(adapter,(u8 *)(& adapter->rss_info.rsstable),rss_flags,(unsigned short)128,(u8 *)(& adapter->rss_info.rss_hkey));
  #line 1187 
  if (status == 0) 
                   #line 1188 
                   adapter->rss_info.rss_flags = (unsigned long long)rss_flags;
  #line 1190 
  if (status <= 0) 
                   #line 1190 
                   tmp = status; else 
                                      #line 1190 
                                      tmp = -5;
  #line 1190 
  return tmp;
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  #line 1195 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1196 
  int status = 0;
  #line 1198 
  if (! be_multi_rxq(adapter)) {
    #line 1199 
    _dev_err(& (adapter->pdev)->dev,(char *)"ethtool::set_rxnfc: RX flow hashing is disabled\n");
    #line 1201 
    return -22;
  }
  #line 1204 
  switch (cmd->cmd) {
    #line 1205 
    case (__u32)42: 
                    #line 1205 
    ;
    #line 1206 
    status = be_set_rss_hash_opts(adapter,cmd);
    #line 1207 
    break;
    #line 1208 
    default: 
             #line 1208 
    ;
    #line 1209 
    return -22;
  }
  #line 1212 
  return status;
}

#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 1219 
  unsigned short __UNIQUE_ID___x577;
  #line 1219 
  int tmp_0;
  #line 1222 
  u16 __UNIQUE_ID___x579;
  #line 1222 
  int tmp_2;
  #line 1218 
  struct be_adapter *adapter = netdev_priv(netdev);
  {
    #line 1219 
    __UNIQUE_ID___x577 = adapter->num_rss_qs;
    #line 1219 
    unsigned short __UNIQUE_ID___y578 = (unsigned short)1U;
    #line 1219 
    if ((int)__UNIQUE_ID___x577 > (int)__UNIQUE_ID___y578) 
                                                           #line 1219 
                                                           tmp_0 = (int)__UNIQUE_ID___x577; else 
                                                                    #line 1219 
                                                                    tmp_0 = (int)__UNIQUE_ID___y578;
    }
  #line 1219 
  u16 num_rx_irqs = (unsigned short)tmp_0;
  {
    #line 1222 
    __UNIQUE_ID___x579 = adapter->num_tx_qs;
    #line 1222 
    u16 __UNIQUE_ID___y580 = num_rx_irqs;
    #line 1222 
    if ((int)__UNIQUE_ID___x579 < (int)__UNIQUE_ID___y580) 
                                                           #line 1222 
                                                           tmp_2 = (int)__UNIQUE_ID___x579; else 
                                                                    #line 1222 
                                                                    tmp_2 = (int)__UNIQUE_ID___y580;
    }
  #line 1222 
  ch->combined_count = (unsigned int)tmp_2;
  #line 1223 
  ch->rx_count = (unsigned int)num_rx_irqs - ch->combined_count;
  #line 1224 
  ch->tx_count = (unsigned int)adapter->num_tx_qs - ch->combined_count;
  #line 1226 
  ch->max_combined = (unsigned int)be_max_qp_irqs_0(adapter);
  #line 1228 
  ch->max_rx = (unsigned int)((int)be_max_rx_irqs_0(adapter) + -1);
  #line 1229 
  ch->max_tx = (unsigned int)((int)be_max_tx_irqs_0(adapter) + -1);
  #line 1230 
  return;
}

#line 1232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 1236 
  int status;
  #line 1256 
  int tmp_3;
  #line 1235 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1241 
  if ((ch->other_count != 0U || ch->combined_count == 0U) || ch->rx_count != 0U && ch->tx_count != 0U) 
    #line 1243 
    return -22;
  #line 1245 
  ;
  #line 1245 
  if (ch->combined_count > (unsigned int)be_max_qp_irqs_0(adapter)) 
                                                                    #line 1250 
                                                                    return -22;
  else 
    #line 1245 
    if (ch->rx_count != 0U) {
      #line 1246 
      ;
      #line 1246 
      if (ch->rx_count + ch->combined_count > (unsigned int)be_max_rx_irqs_0(adapter)) 
        #line 1250 
        return -22; else 
                         #line 1245 
                         goto _LAND;
    }
    else {
      #line 1245 
      _LAND: 
             #line 1247 
      ;
      #line 1247 
      if (ch->tx_count != 0U) {
        #line 1248 
        ;
        #line 1248 
        if (ch->tx_count + ch->combined_count > (unsigned int)be_max_tx_irqs_0(adapter)) 
          #line 1250 
          return -22;
      }
    }
  #line 1252 
  adapter->cfg_num_rx_irqs = (unsigned short)((int)((unsigned short)ch->combined_count) + (int)((unsigned short)ch->rx_count));
  #line 1253 
  adapter->cfg_num_tx_irqs = (unsigned short)((int)((unsigned short)ch->combined_count) + (int)((unsigned short)ch->tx_count));
  #line 1255 
  status = be_update_queues(adapter);
  #line 1256 
  if (status <= 0) 
                   #line 1256 
                   tmp_3 = status; else 
                                        #line 1256 
                                        tmp_3 = -5;
  #line 1256 
  return tmp_3;
}

#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 1261 
  return 128U;
}

#line 1264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_rxfh_key_size(struct net_device *netdev)
{
  #line 1266 
  return 40U;
}

#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_rxfh(struct net_device *netdev, u32 *indir, u8 *hkey, u8 *hfunc)
{
  #line 1273 
  int i;
  #line 1272 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1274 
  struct rss_info *rss = & adapter->rss_info;
  #line 1276 
  if (indir != (u32 *)0U) {
    #line 1277 
    i = 0;
    #line 1277 
    while (i <= 127) {
      #line 1278 
      *(indir + (unsigned long)i) = (unsigned int)rss->rss_queue[i];
      #line 1277 
      i ++;
    }
  }
  #line 1281 
  if (hkey != (u8 *)0U) 
                        #line 1282 
                        memcpy((void *)hkey,(void *)(& rss->rss_hkey),40UL);
  #line 1284 
  if (hfunc != (u8 *)0U) 
                         #line 1285 
                         *hfunc = (unsigned char)1U;
  #line 1287 
  return 0;
}

#line 1290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_rxfh(struct net_device *netdev, u32 *indir, u8 *hkey, u8 hfunc)
{
  #line 1293 
  int i;
  #line 1293 
  int j;
  #line 1295 
  u8 rsstable[128U];
  #line 1293 
  int rc = 0;
  #line 1294 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1298 
  if ((unsigned int)hfunc > 1U) 
                                #line 1299 
                                return -95;
  #line 1301 
  if (indir != (u32 *)0U) {
    #line 1302 
    struct be_rx_obj *rxo;
    #line 1304 
    i = 0;
    #line 1304 
    while (i <= 127) {
      #line 1305 
      j = (int)*(indir + (unsigned long)i);
      #line 1306 
      rxo = & adapter->rx_obj[j];
      #line 1307 
      rsstable[i] = rxo->rss_id;
      #line 1308 
      adapter->rss_info.rss_queue[i] = (unsigned char)j;
      #line 1304 
      i ++;
    }
  }
  else 
       #line 1311 
       memcpy((void *)(& rsstable),(void *)(& adapter->rss_info.rsstable),128UL);
  #line 1315 
  if (hkey == (u8 *)0U) 
                        #line 1316 
                        hkey = (u8 *)(& adapter->rss_info.rss_hkey);
  #line 1318 
  rc = be_cmd_rss_config(adapter,(u8 *)(& rsstable),(unsigned int)adapter->rss_info.rss_flags,(unsigned short)128,hkey);
  #line 1321 
  if (rc != 0) {
    #line 1322 
    adapter->rss_info.rss_flags = 0ULL;
    #line 1323 
    return -5;
  }
  #line 1325 
  memcpy((void *)(& adapter->rss_info.rss_hkey),(void *)hkey,40UL);
  #line 1326 
  memcpy((void *)(& adapter->rss_info.rsstable),(void *)(& rsstable),128UL);
  #line 1328 
  return 0;
}

#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_module_info(struct net_device *netdev, struct ethtool_modinfo *modinfo)
{
  #line 1335 
  u8 page_data[256U];
  #line 1336 
  int status;
  #line 1352 
  int tmp_1;
  #line 1334 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1338 
  if (! check_privilege(adapter,1792U)) 
                                        #line 1339 
                                        return -95;
  #line 1341 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,(u8 *)(& page_data));
  #line 1343 
  if (status == 0) 
    #line 1344 
    if ((unsigned int)page_data[94] == 0U) {
      #line 1345 
      modinfo->type = 1U;
      #line 1346 
      modinfo->eeprom_len = 256U;
    }
    else {
      #line 1348 
      modinfo->type = 2U;
      #line 1349 
      modinfo->eeprom_len = 512U;
    }
  #line 1352 
  if (status <= 0) 
                   #line 1352 
                   tmp_1 = status; else 
                                        #line 1352 
                                        tmp_1 = -5;
  #line 1352 
  return tmp_1;
}

#line 1355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_module_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 1359 
  int status;
  #line 1380 
  int tmp_1;
  #line 1358 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1361 
  if (! check_privilege(adapter,1792U)) 
                                        #line 1362 
                                        return -95;
  #line 1364 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,data);
  #line 1366 
  if (status != 0) 
                   #line 1367 
                   goto err;
  #line 1369 
  if (eeprom->offset + eeprom->len > 256U) {
    #line 1370 
    status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)162,data + 256U);
    #line 1374 
    if (status != 0) 
                     #line 1375 
                     goto err;
  }
  #line 1377 
  if (eeprom->offset != 0U) 
                            #line 1378 
                            memcpy((void *)data,(void *)(data + (unsigned long)eeprom->offset),(unsigned long)eeprom->len);
  #line 1379 
  err: 
       #line 1379 
  ;
  #line 1380 
  if (status <= 0) 
                   #line 1380 
                   tmp_1 = status; else 
                                        #line 1380 
                                        tmp_1 = -5;
  #line 1380 
  return tmp_1;
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_priv_flags(struct net_device *netdev)
{
  #line 1385 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1387 
  return adapter->priv_flags;
}

#line 1390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_priv_flags(struct net_device *netdev, u32 flags)
{
  #line 1392 
  struct be_adapter *adapter = netdev_priv(netdev);
  #line 1393 
  bool tpe_old = (_Bool)((adapter->priv_flags & 1U) != 0U);
  #line 1394 
  bool tpe_new = (_Bool)((flags & 1U) != 0U);
  #line 1396 
  if ((int)tpe_old != (int)tpe_new) 
    #line 1397 
    if ((int)tpe_new != 0) {
      #line 1398 
      adapter->priv_flags |= 1U;
      #line 1399 
      _dev_info(& (adapter->pdev)->dev,(char *)"HW error recovery is disabled\n");
    }
    else {
      #line 1402 
      adapter->priv_flags &= 4294967294U;
      #line 1403 
      _dev_info(& (adapter->pdev)->dev,(char *)"HW error recovery is enabled\n");
    }
  #line 1408 
  return 0;
}

#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_ethtool.c"
struct ethtool_ops be_ethtool_ops = {.get_drvinfo = & be_get_drvinfo, .get_wol = & be_get_wol, .set_wol = & be_set_wol, .get_msglevel = & be_get_msg_level, .set_msglevel = & be_set_msg_level, .get_link = & ethtool_op_get_link, .get_eeprom_len = & be_get_eeprom_len, .get_eeprom = & be_read_eeprom, .get_coalesce = & be_get_coalesce, .set_coalesce = & be_set_coalesce, .get_ringparam = & be_get_ringparam, .get_pauseparam = & be_get_pauseparam, .set_pauseparam = & be_set_pauseparam, .self_test = & be_self_test, .get_strings = & be_get_stat_strings, .set_phys_id = & be_set_phys_id, .get_ethtool_stats = & be_get_ethtool_stats, .get_priv_flags = & be_get_priv_flags, .set_priv_flags = & be_set_priv_flags, .get_sset_count = & be_get_sset_count, .get_rxnfc = & be_get_rxnfc, .set_rxnfc = & be_set_rxnfc, .flash_device = & be_do_flash, .get_rxfh_key_size = & be_get_rxfh_key_size, .get_rxfh_indir_size = & be_get_rxfh_indir_size, .get_rxfh = & be_get_rxfh, .set_rxfh = & be_set_rxfh, .get_channels = & be_get_channels, .set_channels = & be_set_channels, .get_dump_flag = & be_get_dump_flag, .get_dump_data = & be_get_dump_data, .set_dump = & be_set_dump, .get_module_info = & be_get_module_info, .get_module_eeprom = & be_get_module_eeprom, .get_link_ksettings = & be_get_link_ksettings};
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_do_flash(struct net_device *arg0, struct ethtool_flash *arg1)
{
  #line 107 
  return be_do_flash(arg0,arg1);
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 112 
  be_get_channels(arg0,arg1);
  #line 113 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 117 
  return be_get_coalesce(arg0,arg1);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 122 
  be_get_drvinfo(arg0,arg1);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_dump_data(struct net_device *arg0, struct ethtool_dump *arg1, void *arg2)
{
  #line 127 
  return be_get_dump_data(arg0,arg1,arg2);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_dump_flag(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 132 
  return be_get_dump_flag(arg0,arg1);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_eeprom_len(struct net_device *arg0)
{
  #line 137 
  return be_get_eeprom_len(arg0);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 142 
  be_get_ethtool_stats(arg0,arg1,arg2);
  #line 143 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 147 
  return be_get_link_ksettings(arg0,arg1);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_module_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 152 
  return be_get_module_eeprom(arg0,arg1,arg2);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_module_info(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  #line 157 
  return be_get_module_info(arg0,arg1);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
unsigned int emg_wrapper_be_get_msg_level(struct net_device *arg0)
{
  #line 162 
  return be_get_msg_level(arg0);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 167 
  be_get_pauseparam(arg0,arg1);
  #line 168 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
unsigned int emg_wrapper_be_get_priv_flags(struct net_device *arg0)
{
  #line 172 
  return be_get_priv_flags(arg0);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 177 
  be_get_ringparam(arg0,arg1);
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 182 
  return be_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
unsigned int emg_wrapper_be_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 187 
  return be_get_rxfh_indir_size(arg0);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
unsigned int emg_wrapper_be_get_rxfh_key_size(struct net_device *arg0)
{
  #line 192 
  return be_get_rxfh_key_size(arg0);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 197 
  return be_get_rxnfc(arg0,arg1,arg2);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 202 
  return be_get_sset_count(arg0,arg1);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_get_stat_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 207 
  be_get_stat_strings(arg0,arg1,arg2);
  #line 208 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 212 
  be_get_wol(arg0,arg1);
  #line 213 
  return;
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_read_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 217 
  return be_read_eeprom(arg0,arg1,arg2);
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 222 
  be_self_test(arg0,arg1,arg2);
  #line 223 
  return;
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 227 
  return be_set_channels(arg0,arg1);
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 232 
  return be_set_coalesce(arg0,arg1);
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_dump(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 237 
  return be_set_dump(arg0,arg1);
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
void emg_wrapper_be_set_msg_level(struct net_device *arg0, unsigned int arg1)
{
  #line 242 
  be_set_msg_level(arg0,arg1);
  #line 243 
  return;
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 247 
  return be_set_pauseparam(arg0,arg1);
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 252 
  return be_set_phys_id(arg0,arg1);
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_priv_flags(struct net_device *arg0, unsigned int arg1)
{
  #line 257 
  return be_set_priv_flags(arg0,arg1);
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 262 
  return be_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 267 
  return be_set_rxnfc(arg0,arg1);
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_ethtool.i.aux"
int emg_wrapper_be_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 272 
  return be_set_wol(arg0,arg1);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_roce.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3257 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3259 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_roce.i.aux"
#line 820 
static void cif_mutex_lock_be_adapter_list_lock(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_roce.i.aux"
static void cif_mutex_unlock_be_adapter_list_lock(struct mutex *lock);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.h"
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
int be_roce_register_driver(struct ocrdma_driver *drv);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.h"
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_unregister_driver(struct ocrdma_driver *drv);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
static struct ocrdma_driver *ocrdma_drv;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
static struct list_head be_adapter_list = {.next = & be_adapter_list, .prev = & be_adapter_list};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
static struct mutex be_adapter_list_lock = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"be_adapter_list_lock.wait_lock"}}}}, .wait_list = {.next = & be_adapter_list_lock.wait_list, .prev = & be_adapter_list_lock.wait_list}, .magic = (void *)(& be_adapter_list_lock), .dep_map = {.name = (char *)"be_adapter_list_lock"}};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
static void _be_roce_dev_add(struct be_adapter *adapter)
{
  #line 28 
  struct be_dev_info dev_info;
  #line 29 
  int i;
  #line 29 
  int num_vec;
  #line 30 
  struct pci_dev *pdev = adapter->pdev;
  #line 32 
  if (ocrdma_drv == (struct ocrdma_driver *)0) 
                                               #line 33 
                                               return;
  #line 35 
  if (ocrdma_drv->be_abi_version != 1U) {
    #line 36 
    _dev_warn(& pdev->dev,(char *)"Cannot initialize RoCE due to ocrdma ABI mismatch\n");
    #line 37 
    return;
  }
  #line 40 
  if ((unsigned int)pdev->device == 1824U) {
    #line 42 
    if ((unsigned int)adapter->num_msix_vec == 0U) 
                                                   #line 43 
                                                   return;
    #line 45 
    dev_info.dpp_unmapped_addr = pdev->resource[2].start;
    #line 46 
    if (pdev->resource[2].start != 0ULL || pdev->resource[2].end != pdev->resource[2].start) 
      #line 46 
      dev_info.dpp_unmapped_len = ((unsigned int)pdev->resource[2].end - (unsigned int)pdev->resource[2].start) + 1U; else 
                                                                    #line 46 
                                                                    dev_info.dpp_unmapped_len = 0U;
  }
  else {
    #line 48 
    dev_info.dpp_unmapped_addr = 0ULL;
    #line 49 
    dev_info.dpp_unmapped_len = 0U;
  }
  #line 51 
  dev_info.pdev = adapter->pdev;
  #line 52 
  dev_info.db = adapter->db;
  #line 53 
  dev_info.unmapped_db = adapter->roce_db.io_addr;
  #line 54 
  dev_info.db_page_size = adapter->roce_db.size;
  #line 55 
  dev_info.db_total_size = adapter->roce_db.total_size;
  #line 56 
  dev_info.netdev = adapter->netdev;
  #line 57 
  memcpy((void *)(& dev_info.mac_addr),(void *)(adapter->netdev)->dev_addr,6UL);
  #line 58 
  dev_info.dev_family = adapter->sli_family;
  #line 59 
  if ((unsigned int)adapter->num_msix_vec != 0U) {
    #line 65 
    int __UNIQUE_ID___x567;
    #line 65 
    int tmp;
    #line 63 
    num_vec = (int)((unsigned int)adapter->num_msix_vec + adapter->num_msix_roce_vec);
    #line 64 
    dev_info.intr_mode = BE_INTERRUPT_MODE_MSIX;
    {
      #line 65 
      __UNIQUE_ID___x567 = num_vec;
      #line 65 
      int __UNIQUE_ID___y568 = 32;
      #line 65 
      if (__UNIQUE_ID___x567 < __UNIQUE_ID___y568) 
                                                   #line 65 
                                                   tmp = __UNIQUE_ID___x567; else 
                                                                    #line 65 
                                                                    tmp = __UNIQUE_ID___y568;
      }
    #line 65 
    dev_info.msix.num_vectors = tmp;
    #line 70 
    dev_info.msix.start_vector = (int)adapter->num_evt_qs;
    #line 71 
    i = 0;
    #line 71 
    while (dev_info.msix.num_vectors > i) {
      #line 72 
      dev_info.msix.vector_list[i] = adapter->msix_entries[i].vector;
      #line 71 
      i ++;
    }
  }
  else {
    #line 76 
    dev_info.msix.num_vectors = 0;
    #line 77 
    dev_info.intr_mode = BE_INTERRUPT_MODE_INTX;
  }
  #line 79 
  adapter->ocrdma_dev = (*(ocrdma_drv->add))(& dev_info);
  #line 80 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_add(struct be_adapter *adapter)
{
  #line 84 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    #line 85 
    INIT_LIST_HEAD_0(& adapter->entry);
    #line 86 
    cif_mutex_lock_be_adapter_list_lock(& be_adapter_list_lock);
    #line 87 
    list_add_tail_0(& adapter->entry,& be_adapter_list);
    #line 93 
    _be_roce_dev_add(adapter);
    #line 94 
    cif_mutex_unlock_be_adapter_list_lock(& be_adapter_list_lock);
  }
  #line 96 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
static void _be_roce_dev_remove(struct be_adapter *adapter)
{
  #line 100 
  if ((ocrdma_drv != (struct ocrdma_driver *)0 && ocrdma_drv->remove != (void (*)(struct ocrdma_dev *))0) && adapter->ocrdma_dev != (struct ocrdma_dev *)0) 
    #line 101 
    (*(ocrdma_drv->remove))(adapter->ocrdma_dev);
  #line 102 
  adapter->ocrdma_dev = (struct ocrdma_dev *)0;
  #line 103 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_remove(struct be_adapter *adapter)
{
  #line 107 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    #line 108 
    cif_mutex_lock_be_adapter_list_lock(& be_adapter_list_lock);
    #line 109 
    _be_roce_dev_remove(adapter);
    #line 110 
    list_del_0(& adapter->entry);
    #line 111 
    cif_mutex_unlock_be_adapter_list_lock(& be_adapter_list_lock);
  }
  #line 113 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_shutdown(struct be_adapter *adapter)
{
  #line 117 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    #line 118 
    cif_mutex_lock_be_adapter_list_lock(& be_adapter_list_lock);
    #line 119 
    if ((ocrdma_drv != (struct ocrdma_driver *)0 && adapter->ocrdma_dev != (struct ocrdma_dev *)0) && ocrdma_drv->state_change_handler != (void (*)(struct ocrdma_dev *, u32 ))0) 
      #line 121 
      (*(ocrdma_drv->state_change_handler))(adapter->ocrdma_dev,2U);
    #line 123 
    cif_mutex_unlock_be_adapter_list_lock(& be_adapter_list_lock);
  }
  #line 125 
  return;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
int be_roce_register_driver(struct ocrdma_driver *drv)
{
  #line 137 
  void *__mptr;
  #line 129 
  struct be_adapter *dev;
  #line 131 
  cif_mutex_lock_be_adapter_list_lock(& be_adapter_list_lock);
  #line 132 
  if (ocrdma_drv != (struct ocrdma_driver *)0) {
    #line 133 
    cif_mutex_unlock_be_adapter_list_lock(& be_adapter_list_lock);
    #line 134 
    return -22;
  }
  #line 136 
  ocrdma_drv = drv;
  #line 137 
  __mptr = (void *)be_adapter_list.next;
  #line 137 
  dev = ((struct be_adapter *)(__mptr + 18446744073708204552U));
  #line 137 
  while (& dev->entry != & be_adapter_list) {
    #line 137 
    void *__mptr_0;
    #line 138 
    _be_roce_dev_add(dev);
    #line 137 
    __mptr_0 = (void *)dev->entry.next;
    #line 137 
    dev = ((struct be_adapter *)(__mptr_0 + 18446744073708204552U));
  }
  #line 140 
  cif_mutex_unlock_be_adapter_list_lock(& be_adapter_list_lock);
  #line 141 
  return 0;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_unregister_driver(struct ocrdma_driver *drv)
{
  #line 150 
  void *__mptr;
  #line 147 
  struct be_adapter *dev;
  #line 149 
  cif_mutex_lock_be_adapter_list_lock(& be_adapter_list_lock);
  #line 150 
  __mptr = (void *)be_adapter_list.next;
  #line 150 
  dev = ((struct be_adapter *)(__mptr + 18446744073708204552U));
  #line 150 
  while (& dev->entry != & be_adapter_list) {
    #line 150 
    void *__mptr_0;
    #line 151 
    if (dev->ocrdma_dev != (struct ocrdma_dev *)0) 
                                                   #line 152 
                                                   _be_roce_dev_remove(dev);
    #line 150 
    __mptr_0 = (void *)dev->entry.next;
    #line 150 
    dev = ((struct be_adapter *)(__mptr_0 + 18446744073708204552U));
  }
  #line 154 
  ocrdma_drv = (struct ocrdma_driver *)0;
  #line 155 
  cif_mutex_unlock_be_adapter_list_lock(& be_adapter_list_lock);
  #line 156 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_roce.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 136 
  ldv_init_list_head(list);
  #line 137 
  return;
}

#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_roce.i.aux"
static void cif_mutex_lock_be_adapter_list_lock(struct mutex *lock)
{
  #line 823 
  ldv_mutex_model_lock(lock,(char *)"be_adapter_list_lock");
  #line 824 
  return;
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/0/concurrency safety/weaver/be_roce.i.aux"
static void cif_mutex_unlock_be_adapter_list_lock(struct mutex *lock)
{
  #line 830 
  ldv_mutex_model_unlock(lock,(char *)"be_adapter_list_lock");
  #line 831 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
#line 215 
void emg_dispatch_deregister_11(struct net_device *arg0);
#line 114 
#line 169 
void emg_dispatch_deregister_6(struct pci_driver *arg0);
#line 115 
#line 153 
void emg_dispatch_irq_deregister_4(int arg0);
#line 116 
#line 189 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 117 
#line 142 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 118 
#line 178 
void emg_dispatch_register_9(struct net_device *arg0);
#line 119 
#line 1572 
void *emg_entry_point_insmod(void *arg0);
#line 122 
#line 224 
void *emg_interrupt_interrupt_scenario_be_intx(void *arg0);
#line 123 
#line 287 
void *emg_interrupt_interrupt_scenario_be_msix(void *arg0);
#line 124 
#line 350 
void *emg_net_random_allocationless_scenario_be_do_flash(void *arg0);
#line 125 
#line 1128 
void *emg_pci_pci_scenario_be_driver(void *arg0);
#line 132 
#line 1601 
int main(void);
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 143 
  int ret;
  #line 144 
  struct emg_struct_pci_scenario_be_driver_15 *cf_arg_15;
  #line 145 
  cf_arg_15 = (struct emg_struct_pci_scenario_be_driver_15 *)ldv_xmalloc(16UL);
  #line 146 
  cf_arg_15->arg0 = arg0;
  #line 147 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_pci_pci_scenario_be_driver,(void *)cf_arg_15);
  #line 148 
  __VERIFIER_assume(ret == 0);
  #line 149 
  return;
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_4(int arg0)
{
  #line 154 
  int ret;
  #line 155 
  struct emg_struct_free_irq_4 *cf_arg_12;
  #line 156 
  struct emg_struct_free_irq_4 *cf_arg_13;
  #line 157 
  if (ldv_undef_int() != 0) {
    #line 158 
    ret = pthread_join(emg_thread_12,(void **)0);
    #line 159 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 162 
    ret = pthread_join(emg_thread_13,(void **)0);
    #line 163 
    __VERIFIER_assume(ret == 0);
  }
  #line 165 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct pci_driver *arg0)
{
  #line 170 
  int ret;
  #line 171 
  struct emg_struct_pci_scenario_be_driver_15 *cf_arg_15;
  #line 172 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 173 
  __VERIFIER_assume(ret == 0);
  #line 174 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 179 
  int ret;
  #line 180 
  struct emg_struct_random_allocationless_scenario_be_do_flash_14 *cf_arg_14;
  #line 181 
  cf_arg_14 = (struct emg_struct_random_allocationless_scenario_be_do_flash_14 *)ldv_xmalloc(16UL);
  #line 182 
  cf_arg_14->arg0 = arg0;
  #line 183 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_be_do_flash,(void *)cf_arg_14);
  #line 184 
  __VERIFIER_assume(ret == 0);
  #line 185 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 190 
  int ret;
  #line 191 
  struct emg_struct_interrupt_scenario_be_intx_12 *cf_arg_12;
  #line 192 
  struct emg_struct_interrupt_scenario_be_intx_12 *cf_arg_13;
  #line 193 
  if (ldv_undef_int() != 0) {
    #line 194 
    cf_arg_12 = (struct emg_struct_interrupt_scenario_be_intx_12 *)ldv_xmalloc(40UL);
    #line 195 
    cf_arg_12->arg0 = arg0;
    #line 196 
    cf_arg_12->arg1 = arg1;
    #line 197 
    cf_arg_12->arg2 = arg2;
    #line 198 
    cf_arg_12->arg3 = arg3;
    #line 199 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_be_intx,(void *)cf_arg_12);
    #line 200 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 203 
    cf_arg_13 = (struct emg_struct_interrupt_scenario_be_intx_12 *)ldv_xmalloc(40UL);
    #line 204 
    cf_arg_13->arg0 = arg0;
    #line 205 
    cf_arg_13->arg1 = arg1;
    #line 206 
    cf_arg_13->arg2 = arg2;
    #line 207 
    cf_arg_13->arg3 = arg3;
    #line 208 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_be_msix,(void *)cf_arg_13);
    #line 209 
    __VERIFIER_assume(ret == 0);
  }
  #line 211 
  return;
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct net_device *arg0)
{
  #line 216 
  int ret;
  #line 217 
  struct emg_struct_random_allocationless_scenario_be_do_flash_14 *cf_arg_14;
  #line 218 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 219 
  __VERIFIER_assume(ret == 0);
  #line 220 
  return;
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_be_intx(void *arg0)
{
  #line 227 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 228 
  void *emg_12_data;
  #line 229 
  int emg_12_line;
  #line 230 
  enum irqreturn emg_12_ret_val;
  #line 231 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 233 
  struct emg_struct_interrupt_scenario_be_intx_12 *data = (struct emg_struct_interrupt_scenario_be_intx_12 *)arg0;
  #line 236 
  emg_12_callback = & emg_wrapper_be_intx;
  #line 239 
  if (data != (struct emg_struct_interrupt_scenario_be_intx_12 *)0) {
    #line 240 
    emg_12_line = data->arg0;
    #line 241 
    emg_12_callback = data->arg1;
    #line 242 
    emg_12_thread = data->arg2;
    #line 243 
    emg_12_data = data->arg3;
    #line 244 
    ldv_free((void *)data);
  }
  #line 250 
  ldv_switch_to_interrupt_context();
  #line 254 
  emg_12_ret_val = emg_wrapper_be_intx(emg_12_line,emg_12_data);
  #line 259 
  ldv_switch_to_process_context();
  #line 262 
  if (ldv_undef_int() != 0) {
    #line 264 
    __VERIFIER_assume(emg_12_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 268 
    if (emg_12_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 269 
                                                              (*emg_12_thread)(emg_12_line,emg_12_data);
  }
  else 
       #line 274 
       __VERIFIER_assume(emg_12_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 282 
  return (void *)0;
}

#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_be_msix(void *arg0)
{
  #line 290 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 291 
  void *emg_13_data;
  #line 292 
  int emg_13_line;
  #line 293 
  enum irqreturn emg_13_ret_val;
  #line 294 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 296 
  struct emg_struct_interrupt_scenario_be_intx_12 *data = (struct emg_struct_interrupt_scenario_be_intx_12 *)arg0;
  #line 299 
  emg_13_callback = & emg_wrapper_be_msix;
  #line 302 
  if (data != (struct emg_struct_interrupt_scenario_be_intx_12 *)0) {
    #line 303 
    emg_13_line = data->arg0;
    #line 304 
    emg_13_callback = data->arg1;
    #line 305 
    emg_13_thread = data->arg2;
    #line 306 
    emg_13_data = data->arg3;
    #line 307 
    ldv_free((void *)data);
  }
  #line 313 
  ldv_switch_to_interrupt_context();
  #line 317 
  emg_13_ret_val = emg_wrapper_be_msix(emg_13_line,emg_13_data);
  #line 322 
  ldv_switch_to_process_context();
  #line 325 
  if (ldv_undef_int() != 0) {
    #line 327 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 331 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 332 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 337 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 345 
  return (void *)0;
}

#line 350  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_be_do_flash(void *arg0)
{
  #line 353 
  struct net_device *emg_14_container;
  #line 354 
  struct sk_buff *emg_14_emg_param_0_26;
  #line 355 
  struct sk_buff *emg_14_emg_param_0_34;
  #line 356 
  struct sk_buff *emg_14_emg_param_0_54;
  #line 357 
  struct ethtool_flash *emg_14_emg_param_1_0;
  #line 358 
  struct ethtool_channels *emg_14_emg_param_1_1;
  #line 359 
  struct ethtool_link_ksettings *emg_14_emg_param_1_11;
  #line 360 
  struct ethtool_eeprom *emg_14_emg_param_1_12;
  #line 361 
  struct ethtool_modinfo *emg_14_emg_param_1_14;
  #line 362 
  struct ethtool_pauseparam *emg_14_emg_param_1_15;
  #line 363 
  struct ethtool_ringparam *emg_14_emg_param_1_16;
  #line 364 
  unsigned int *emg_14_emg_param_1_17;
  #line 365 
  struct ethtool_coalesce *emg_14_emg_param_1_2;
  #line 366 
  struct ethtool_rxnfc *emg_14_emg_param_1_20;
  #line 367 
  int emg_14_emg_param_1_22;
  #line 368 
  unsigned int emg_14_emg_param_1_23;
  #line 369 
  struct ethtool_wolinfo *emg_14_emg_param_1_25;
  #line 370 
  unsigned int emg_14_emg_param_1_27;
  #line 371 
  struct ethtool_drvinfo *emg_14_emg_param_1_3;
  #line 372 
  struct nlmsghdr *emg_14_emg_param_1_31;
  #line 373 
  struct netdev_phys_item_id *emg_14_emg_param_1_36;
  #line 374 
  struct rtnl_link_stats64 *emg_14_emg_param_1_37;
  #line 375 
  int emg_14_emg_param_1_38;
  #line 376 
  struct ethtool_dump *emg_14_emg_param_1_4;
  #line 377 
  void *emg_14_emg_param_1_40;
  #line 378 
  int emg_14_emg_param_1_41;
  #line 379 
  int emg_14_emg_param_1_43;
  #line 380 
  int emg_14_emg_param_1_45;
  #line 381 
  int emg_14_emg_param_1_48;
  #line 382 
  int emg_14_emg_param_1_50;
  #line 383 
  struct udp_tunnel_info *emg_14_emg_param_1_55;
  #line 384 
  struct udp_tunnel_info *emg_14_emg_param_1_56;
  #line 385 
  unsigned short emg_14_emg_param_1_57;
  #line 386 
  unsigned short emg_14_emg_param_1_59;
  #line 387 
  struct ethtool_dump *emg_14_emg_param_1_6;
  #line 388 
  struct ethtool_test *emg_14_emg_param_1_61;
  #line 389 
  struct ethtool_channels *emg_14_emg_param_1_63;
  #line 390 
  struct ethtool_coalesce *emg_14_emg_param_1_64;
  #line 391 
  struct ethtool_dump *emg_14_emg_param_1_65;
  #line 392 
  unsigned int emg_14_emg_param_1_66;
  #line 393 
  struct ethtool_pauseparam *emg_14_emg_param_1_67;
  #line 394 
  enum ethtool_phys_id_state *emg_14_emg_param_1_68;
  #line 395 
  unsigned int emg_14_emg_param_1_69;
  #line 396 
  struct ethtool_eeprom *emg_14_emg_param_1_7;
  #line 397 
  unsigned int *emg_14_emg_param_1_70;
  #line 398 
  struct ethtool_rxnfc *emg_14_emg_param_1_73;
  #line 399 
  struct ethtool_wolinfo *emg_14_emg_param_1_74;
  #line 400 
  struct ethtool_stats *emg_14_emg_param_1_9;
  #line 401 
  unsigned long long *emg_14_emg_param_2_10;
  #line 402 
  unsigned char *emg_14_emg_param_2_13;
  #line 403 
  unsigned char *emg_14_emg_param_2_18;
  #line 404 
  unsigned int *emg_14_emg_param_2_21;
  #line 405 
  unsigned char *emg_14_emg_param_2_24;
  #line 406 
  unsigned int emg_14_emg_param_2_28;
  #line 407 
  unsigned short emg_14_emg_param_2_32;
  #line 408 
  unsigned long long emg_14_emg_param_2_35;
  #line 409 
  struct ifla_vf_info *emg_14_emg_param_2_39;
  #line 410 
  int emg_14_emg_param_2_42;
  #line 411 
  unsigned char *emg_14_emg_param_2_44;
  #line 412 
  int emg_14_emg_param_2_46;
  #line 413 
  _Bool emg_14_emg_param_2_49;
  #line 414 
  void *emg_14_emg_param_2_5;
  #line 415 
  unsigned short emg_14_emg_param_2_51;
  #line 416 
  unsigned short emg_14_emg_param_2_58;
  #line 417 
  unsigned short emg_14_emg_param_2_60;
  #line 418 
  unsigned long long *emg_14_emg_param_2_62;
  #line 419 
  unsigned char *emg_14_emg_param_2_71;
  #line 420 
  unsigned char *emg_14_emg_param_2_8;
  #line 421 
  unsigned char *emg_14_emg_param_3_19;
  #line 422 
  struct netlink_ext_ack *emg_14_emg_param_3_33;
  #line 423 
  int emg_14_emg_param_3_47;
  #line 424 
  unsigned char emg_14_emg_param_3_52;
  #line 425 
  unsigned char emg_14_emg_param_3_72;
  #line 426 
  unsigned int emg_14_emg_param_4_29;
  #line 427 
  unsigned short emg_14_emg_param_4_53;
  #line 428 
  int emg_14_emg_param_5_30;
  #line 429 
  int emg_repeat_cnt_call_14 = 1;
  #line 431 
  struct emg_struct_random_allocationless_scenario_be_do_flash_14 *data = (struct emg_struct_random_allocationless_scenario_be_do_flash_14 *)arg0;
  #line 436 
  if (data != (struct emg_struct_random_allocationless_scenario_be_do_flash_14 *)0) {
    #line 437 
    emg_14_container = data->arg0;
    #line 438 
    ldv_free((void *)data);
  }
  #line 443 
  goto emg_call_14;
  #line 447 
  return (void *)0;
  #line 450 
  emg_call_14: 
               #line 450 
  ;
  #line 451 
  switch (ldv_undef_int()) {
    #line 452 
    case 0: 
            #line 452 
    ;
    #line 454 
    emg_14_emg_param_1_74 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 454 
    emg_14_emg_param_1_74 = emg_14_emg_param_1_74;
    #line 458 
    emg_wrapper_be_set_wol(emg_14_container,emg_14_emg_param_1_74);
    #line 462 
    ldv_free((void *)emg_14_emg_param_1_74);
    #line 464 
    break;
    #line 466 
    case 1: 
            #line 466 
    ;
    #line 468 
    emg_14_emg_param_1_73 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 468 
    emg_14_emg_param_1_73 = emg_14_emg_param_1_73;
    #line 472 
    emg_wrapper_be_set_rxnfc(emg_14_container,emg_14_emg_param_1_73);
    #line 476 
    ldv_free((void *)emg_14_emg_param_1_73);
    #line 478 
    break;
    #line 480 
    case 2: 
            #line 480 
    ;
    #line 482 
    emg_14_emg_param_1_70 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 482 
    emg_14_emg_param_1_70 = emg_14_emg_param_1_70;
    #line 483 
    emg_14_emg_param_2_71 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 483 
    emg_14_emg_param_2_71 = emg_14_emg_param_2_71;
    #line 487 
    emg_wrapper_be_set_rxfh(emg_14_container,emg_14_emg_param_1_70,emg_14_emg_param_2_71,(unsigned char)((int)emg_14_emg_param_3_72));
    #line 491 
    ldv_free((void *)emg_14_emg_param_1_70);
    #line 492 
    ldv_free((void *)emg_14_emg_param_2_71);
    #line 494 
    break;
    #line 496 
    case 3: 
            #line 496 
    ;
    #line 498 
    emg_wrapper_be_set_priv_flags(emg_14_container,emg_14_emg_param_1_69);
    #line 500 
    break;
    #line 502 
    case 4: 
            #line 502 
    ;
    #line 504 
    emg_14_emg_param_1_68 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 504 
    emg_14_emg_param_1_68 = emg_14_emg_param_1_68;
    #line 508 
    emg_wrapper_be_set_phys_id(emg_14_container,*emg_14_emg_param_1_68);
    #line 512 
    ldv_free((void *)emg_14_emg_param_1_68);
    #line 514 
    break;
    #line 516 
    case 5: 
            #line 516 
    ;
    #line 518 
    emg_14_emg_param_1_67 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 518 
    emg_14_emg_param_1_67 = emg_14_emg_param_1_67;
    #line 522 
    emg_wrapper_be_set_pauseparam(emg_14_container,emg_14_emg_param_1_67);
    #line 526 
    ldv_free((void *)emg_14_emg_param_1_67);
    #line 528 
    break;
    #line 530 
    case 6: 
            #line 530 
    ;
    #line 532 
    emg_wrapper_be_set_msg_level(emg_14_container,emg_14_emg_param_1_66);
    #line 534 
    break;
    #line 536 
    case 7: 
            #line 536 
    ;
    #line 538 
    emg_14_emg_param_1_65 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 538 
    emg_14_emg_param_1_65 = emg_14_emg_param_1_65;
    #line 542 
    emg_wrapper_be_set_dump(emg_14_container,emg_14_emg_param_1_65);
    #line 546 
    ldv_free((void *)emg_14_emg_param_1_65);
    #line 548 
    break;
    #line 550 
    case 8: 
            #line 550 
    ;
    #line 552 
    emg_14_emg_param_1_64 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 552 
    emg_14_emg_param_1_64 = emg_14_emg_param_1_64;
    #line 556 
    emg_wrapper_be_set_coalesce(emg_14_container,emg_14_emg_param_1_64);
    #line 560 
    ldv_free((void *)emg_14_emg_param_1_64);
    #line 562 
    break;
    #line 564 
    case 9: 
            #line 564 
    ;
    #line 566 
    emg_14_emg_param_1_63 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 566 
    emg_14_emg_param_1_63 = emg_14_emg_param_1_63;
    #line 570 
    emg_wrapper_be_set_channels(emg_14_container,emg_14_emg_param_1_63);
    #line 574 
    ldv_free((void *)emg_14_emg_param_1_63);
    #line 576 
    break;
    #line 578 
    case 10: 
             #line 578 
    ;
    #line 580 
    emg_14_emg_param_1_61 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 580 
    emg_14_emg_param_1_61 = emg_14_emg_param_1_61;
    #line 581 
    emg_14_emg_param_2_62 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 581 
    emg_14_emg_param_2_62 = emg_14_emg_param_2_62;
    #line 585 
    emg_wrapper_be_self_test(emg_14_container,emg_14_emg_param_1_61,emg_14_emg_param_2_62);
    #line 589 
    ldv_free((void *)emg_14_emg_param_1_61);
    #line 590 
    ldv_free((void *)emg_14_emg_param_2_62);
    #line 592 
    break;
    #line 594 
    case 11: 
             #line 594 
    ;
    #line 596 
    emg_wrapper_be_vlan_rem_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_59),(unsigned short)((int)emg_14_emg_param_2_60));
    #line 598 
    break;
    #line 600 
    case 12: 
             #line 600 
    ;
    #line 602 
    emg_wrapper_be_vlan_add_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_57),(unsigned short)((int)emg_14_emg_param_2_58));
    #line 604 
    break;
    #line 606 
    case 13: 
             #line 606 
    ;
    #line 608 
    (*emg_alias_eth_validate_addr)(emg_14_container);
    #line 610 
    break;
    #line 612 
    case 14: 
             #line 612 
    ;
    #line 614 
    emg_14_emg_param_1_56 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 614 
    emg_14_emg_param_1_56 = emg_14_emg_param_1_56;
    #line 618 
    emg_wrapper_be_del_vxlan_port(emg_14_container,emg_14_emg_param_1_56);
    #line 622 
    ldv_free((void *)emg_14_emg_param_1_56);
    #line 624 
    break;
    #line 626 
    case 15: 
             #line 626 
    ;
    #line 628 
    emg_14_emg_param_1_55 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 628 
    emg_14_emg_param_1_55 = emg_14_emg_param_1_55;
    #line 632 
    emg_wrapper_be_add_vxlan_port(emg_14_container,emg_14_emg_param_1_55);
    #line 636 
    ldv_free((void *)emg_14_emg_param_1_55);
    #line 638 
    break;
    #line 640 
    case 16: 
             #line 640 
    ;
    #line 642 
    emg_wrapper_be_tx_timeout(emg_14_container);
    #line 644 
    break;
    #line 646 
    case 17: 
             #line 646 
    ;
    #line 648 
    emg_14_emg_param_0_54 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 648 
    emg_14_emg_param_0_54 = emg_14_emg_param_0_54;
    #line 652 
    emg_wrapper_be_xmit(emg_14_emg_param_0_54,emg_14_container);
    #line 656 
    ldv_free((void *)emg_14_emg_param_0_54);
    #line 658 
    break;
    #line 660 
    case 18: 
             #line 660 
    ;
    #line 662 
    emg_wrapper_be_set_vf_vlan(emg_14_container,emg_14_emg_param_1_50,(unsigned short)((int)emg_14_emg_param_2_51),(unsigned char)((int)emg_14_emg_param_3_52),(unsigned short)((int)emg_14_emg_param_4_53));
    #line 664 
    break;
    #line 666 
    case 19: 
             #line 666 
    ;
    #line 668 
    emg_wrapper_be_set_vf_spoofchk(emg_14_container,emg_14_emg_param_1_48,(_Bool)((_Bool)((int)emg_14_emg_param_2_49) != 0));
    #line 670 
    break;
    #line 672 
    case 20: 
             #line 672 
    ;
    #line 674 
    emg_wrapper_be_set_vf_tx_rate(emg_14_container,emg_14_emg_param_1_45,emg_14_emg_param_2_46,emg_14_emg_param_3_47);
    #line 676 
    break;
    #line 678 
    case 21: 
             #line 678 
    ;
    #line 680 
    emg_14_emg_param_2_44 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 680 
    emg_14_emg_param_2_44 = emg_14_emg_param_2_44;
    #line 684 
    emg_wrapper_be_set_vf_mac(emg_14_container,emg_14_emg_param_1_43,emg_14_emg_param_2_44);
    #line 688 
    ldv_free((void *)emg_14_emg_param_2_44);
    #line 690 
    break;
    #line 692 
    case 22: 
             #line 692 
    ;
    #line 694 
    emg_wrapper_be_set_vf_link_state(emg_14_container,emg_14_emg_param_1_41,emg_14_emg_param_2_42);
    #line 696 
    break;
    #line 698 
    case 23: 
             #line 698 
    ;
    #line 700 
    emg_wrapper_be_set_rx_mode(emg_14_container);
    #line 702 
    break;
    #line 704 
    case 24: 
             #line 704 
    ;
    #line 706 
    emg_14_emg_param_1_40 = ldv_xmalloc_unknown_size(0UL);
    #line 706 
    emg_14_emg_param_1_40 = emg_14_emg_param_1_40;
    #line 710 
    emg_wrapper_be_mac_addr_set(emg_14_container,emg_14_emg_param_1_40);
    #line 714 
    ldv_free(emg_14_emg_param_1_40);
    #line 716 
    break;
    #line 718 
    case 25: 
             #line 718 
    ;
    #line 720 
    emg_wrapper_be_netpoll(emg_14_container);
    #line 722 
    break;
    #line 724 
    case 26: 
             #line 724 
    ;
    #line 726 
    emg_14_emg_param_2_39 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
    #line 726 
    emg_14_emg_param_2_39 = emg_14_emg_param_2_39;
    #line 730 
    emg_wrapper_be_get_vf_config(emg_14_container,emg_14_emg_param_1_38,emg_14_emg_param_2_39);
    #line 734 
    ldv_free((void *)emg_14_emg_param_2_39);
    #line 736 
    break;
    #line 738 
    case 27: 
             #line 738 
    ;
    #line 740 
    emg_14_emg_param_1_37 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 740 
    emg_14_emg_param_1_37 = emg_14_emg_param_1_37;
    #line 744 
    emg_wrapper_be_get_stats64(emg_14_container,emg_14_emg_param_1_37);
    #line 748 
    ldv_free((void *)emg_14_emg_param_1_37);
    #line 750 
    break;
    #line 752 
    case 28: 
             #line 752 
    ;
    #line 754 
    emg_14_emg_param_1_36 = (struct netdev_phys_item_id *)ldv_xmalloc_unknown_size(0UL);
    #line 754 
    emg_14_emg_param_1_36 = emg_14_emg_param_1_36;
    #line 758 
    emg_wrapper_be_get_phys_port_id(emg_14_container,emg_14_emg_param_1_36);
    #line 762 
    ldv_free((void *)emg_14_emg_param_1_36);
    #line 764 
    break;
    #line 766 
    case 29: 
             #line 766 
    ;
    #line 768 
    emg_14_emg_param_0_34 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 768 
    emg_14_emg_param_0_34 = emg_14_emg_param_0_34;
    #line 772 
    emg_wrapper_be_features_check(emg_14_emg_param_0_34,emg_14_container,emg_14_emg_param_2_35);
    #line 776 
    ldv_free((void *)emg_14_emg_param_0_34);
    #line 778 
    break;
    #line 780 
    case 30: 
             #line 780 
    ;
    #line 782 
    emg_14_emg_param_1_31 = (struct nlmsghdr *)ldv_xmalloc_unknown_size(0UL);
    #line 782 
    emg_14_emg_param_1_31 = emg_14_emg_param_1_31;
    #line 783 
    emg_14_emg_param_3_33 = (struct netlink_ext_ack *)ldv_xmalloc_unknown_size(0UL);
    #line 783 
    emg_14_emg_param_3_33 = emg_14_emg_param_3_33;
    #line 787 
    emg_wrapper_be_ndo_bridge_setlink(emg_14_container,emg_14_emg_param_1_31,(unsigned short)((int)emg_14_emg_param_2_32),emg_14_emg_param_3_33);
    #line 791 
    ldv_free((void *)emg_14_emg_param_1_31);
    #line 792 
    ldv_free((void *)emg_14_emg_param_3_33);
    #line 794 
    break;
    #line 796 
    case 31: 
             #line 796 
    ;
    #line 798 
    emg_14_emg_param_0_26 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 798 
    emg_14_emg_param_0_26 = emg_14_emg_param_0_26;
    #line 802 
    emg_wrapper_be_ndo_bridge_getlink(emg_14_emg_param_0_26,emg_14_emg_param_1_27,emg_14_emg_param_2_28,emg_14_container,emg_14_emg_param_4_29,emg_14_emg_param_5_30);
    #line 806 
    ldv_free((void *)emg_14_emg_param_0_26);
    #line 808 
    break;
    #line 810 
    case 32: 
             #line 810 
    ;
    #line 812 
    emg_14_emg_param_1_25 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 812 
    emg_14_emg_param_1_25 = emg_14_emg_param_1_25;
    #line 816 
    emg_wrapper_be_get_wol(emg_14_container,emg_14_emg_param_1_25);
    #line 820 
    ldv_free((void *)emg_14_emg_param_1_25);
    #line 822 
    break;
    #line 824 
    case 33: 
             #line 824 
    ;
    #line 826 
    emg_14_emg_param_2_24 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 826 
    emg_14_emg_param_2_24 = emg_14_emg_param_2_24;
    #line 830 
    emg_wrapper_be_get_stat_strings(emg_14_container,emg_14_emg_param_1_23,emg_14_emg_param_2_24);
    #line 834 
    ldv_free((void *)emg_14_emg_param_2_24);
    #line 836 
    break;
    #line 838 
    case 34: 
             #line 838 
    ;
    #line 840 
    emg_wrapper_be_get_sset_count(emg_14_container,emg_14_emg_param_1_22);
    #line 842 
    break;
    #line 844 
    case 35: 
             #line 844 
    ;
    #line 846 
    emg_14_emg_param_1_20 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 846 
    emg_14_emg_param_1_20 = emg_14_emg_param_1_20;
    #line 847 
    emg_14_emg_param_2_21 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 847 
    emg_14_emg_param_2_21 = emg_14_emg_param_2_21;
    #line 851 
    emg_wrapper_be_get_rxnfc(emg_14_container,emg_14_emg_param_1_20,emg_14_emg_param_2_21);
    #line 855 
    ldv_free((void *)emg_14_emg_param_1_20);
    #line 856 
    ldv_free((void *)emg_14_emg_param_2_21);
    #line 858 
    break;
    #line 860 
    case 36: 
             #line 860 
    ;
    #line 862 
    emg_wrapper_be_get_rxfh_key_size(emg_14_container);
    #line 864 
    break;
    #line 866 
    case 37: 
             #line 866 
    ;
    #line 868 
    emg_wrapper_be_get_rxfh_indir_size(emg_14_container);
    #line 870 
    break;
    #line 872 
    case 38: 
             #line 872 
    ;
    #line 874 
    emg_14_emg_param_1_17 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 874 
    emg_14_emg_param_1_17 = emg_14_emg_param_1_17;
    #line 875 
    emg_14_emg_param_2_18 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 875 
    emg_14_emg_param_2_18 = emg_14_emg_param_2_18;
    #line 876 
    emg_14_emg_param_3_19 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 876 
    emg_14_emg_param_3_19 = emg_14_emg_param_3_19;
    #line 880 
    emg_wrapper_be_get_rxfh(emg_14_container,emg_14_emg_param_1_17,emg_14_emg_param_2_18,emg_14_emg_param_3_19);
    #line 884 
    ldv_free((void *)emg_14_emg_param_1_17);
    #line 885 
    ldv_free((void *)emg_14_emg_param_2_18);
    #line 886 
    ldv_free((void *)emg_14_emg_param_3_19);
    #line 888 
    break;
    #line 890 
    case 39: 
             #line 890 
    ;
    #line 892 
    emg_14_emg_param_1_16 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 892 
    emg_14_emg_param_1_16 = emg_14_emg_param_1_16;
    #line 896 
    emg_wrapper_be_get_ringparam(emg_14_container,emg_14_emg_param_1_16);
    #line 900 
    ldv_free((void *)emg_14_emg_param_1_16);
    #line 902 
    break;
    #line 904 
    case 40: 
             #line 904 
    ;
    #line 906 
    emg_wrapper_be_get_priv_flags(emg_14_container);
    #line 908 
    break;
    #line 910 
    case 41: 
             #line 910 
    ;
    #line 912 
    emg_14_emg_param_1_15 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 912 
    emg_14_emg_param_1_15 = emg_14_emg_param_1_15;
    #line 916 
    emg_wrapper_be_get_pauseparam(emg_14_container,emg_14_emg_param_1_15);
    #line 920 
    ldv_free((void *)emg_14_emg_param_1_15);
    #line 922 
    break;
    #line 924 
    case 42: 
             #line 924 
    ;
    #line 926 
    emg_wrapper_be_get_msg_level(emg_14_container);
    #line 928 
    break;
    #line 930 
    case 43: 
             #line 930 
    ;
    #line 932 
    emg_14_emg_param_1_14 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 932 
    emg_14_emg_param_1_14 = emg_14_emg_param_1_14;
    #line 936 
    emg_wrapper_be_get_module_info(emg_14_container,emg_14_emg_param_1_14);
    #line 940 
    ldv_free((void *)emg_14_emg_param_1_14);
    #line 942 
    break;
    #line 944 
    case 44: 
             #line 944 
    ;
    #line 946 
    emg_14_emg_param_1_12 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 946 
    emg_14_emg_param_1_12 = emg_14_emg_param_1_12;
    #line 947 
    emg_14_emg_param_2_13 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 947 
    emg_14_emg_param_2_13 = emg_14_emg_param_2_13;
    #line 951 
    emg_wrapper_be_get_module_eeprom(emg_14_container,emg_14_emg_param_1_12,emg_14_emg_param_2_13);
    #line 955 
    ldv_free((void *)emg_14_emg_param_1_12);
    #line 956 
    ldv_free((void *)emg_14_emg_param_2_13);
    #line 958 
    break;
    #line 960 
    case 45: 
             #line 960 
    ;
    #line 962 
    emg_14_emg_param_1_11 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 962 
    emg_14_emg_param_1_11 = emg_14_emg_param_1_11;
    #line 966 
    emg_wrapper_be_get_link_ksettings(emg_14_container,emg_14_emg_param_1_11);
    #line 970 
    ldv_free((void *)emg_14_emg_param_1_11);
    #line 972 
    break;
    #line 974 
    case 46: 
             #line 974 
    ;
    #line 976 
    ethtool_op_get_link(emg_14_container);
    #line 978 
    break;
    #line 980 
    case 47: 
             #line 980 
    ;
    #line 982 
    emg_14_emg_param_1_9 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 982 
    emg_14_emg_param_1_9 = emg_14_emg_param_1_9;
    #line 983 
    emg_14_emg_param_2_10 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 983 
    emg_14_emg_param_2_10 = emg_14_emg_param_2_10;
    #line 987 
    emg_wrapper_be_get_ethtool_stats(emg_14_container,emg_14_emg_param_1_9,emg_14_emg_param_2_10);
    #line 991 
    ldv_free((void *)emg_14_emg_param_1_9);
    #line 992 
    ldv_free((void *)emg_14_emg_param_2_10);
    #line 994 
    break;
    #line 996 
    case 48: 
             #line 996 
    ;
    #line 998 
    emg_wrapper_be_get_eeprom_len(emg_14_container);
    #line 1000 
    break;
    #line 1002 
    case 49: 
             #line 1002 
    ;
    #line 1004 
    emg_14_emg_param_1_7 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1004 
    emg_14_emg_param_1_7 = emg_14_emg_param_1_7;
    #line 1005 
    emg_14_emg_param_2_8 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1005 
    emg_14_emg_param_2_8 = emg_14_emg_param_2_8;
    #line 1009 
    emg_wrapper_be_read_eeprom(emg_14_container,emg_14_emg_param_1_7,emg_14_emg_param_2_8);
    #line 1013 
    ldv_free((void *)emg_14_emg_param_1_7);
    #line 1014 
    ldv_free((void *)emg_14_emg_param_2_8);
    #line 1016 
    break;
    #line 1018 
    case 50: 
             #line 1018 
    ;
    #line 1020 
    emg_14_emg_param_1_6 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 1020 
    emg_14_emg_param_1_6 = emg_14_emg_param_1_6;
    #line 1024 
    emg_wrapper_be_get_dump_flag(emg_14_container,emg_14_emg_param_1_6);
    #line 1028 
    ldv_free((void *)emg_14_emg_param_1_6);
    #line 1030 
    break;
    #line 1032 
    case 51: 
             #line 1032 
    ;
    #line 1034 
    emg_14_emg_param_1_4 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 1034 
    emg_14_emg_param_1_4 = emg_14_emg_param_1_4;
    #line 1035 
    emg_14_emg_param_2_5 = ldv_xmalloc_unknown_size(0UL);
    #line 1035 
    emg_14_emg_param_2_5 = emg_14_emg_param_2_5;
    #line 1039 
    emg_wrapper_be_get_dump_data(emg_14_container,emg_14_emg_param_1_4,emg_14_emg_param_2_5);
    #line 1043 
    ldv_free((void *)emg_14_emg_param_1_4);
    #line 1044 
    ldv_free(emg_14_emg_param_2_5);
    #line 1046 
    break;
    #line 1048 
    case 52: 
             #line 1048 
    ;
    #line 1050 
    emg_14_emg_param_1_3 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1050 
    emg_14_emg_param_1_3 = emg_14_emg_param_1_3;
    #line 1054 
    emg_wrapper_be_get_drvinfo(emg_14_container,emg_14_emg_param_1_3);
    #line 1058 
    ldv_free((void *)emg_14_emg_param_1_3);
    #line 1060 
    break;
    #line 1062 
    case 53: 
             #line 1062 
    ;
    #line 1064 
    emg_14_emg_param_1_2 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1064 
    emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
    #line 1068 
    emg_wrapper_be_get_coalesce(emg_14_container,emg_14_emg_param_1_2);
    #line 1072 
    ldv_free((void *)emg_14_emg_param_1_2);
    #line 1074 
    break;
    #line 1076 
    case 54: 
             #line 1076 
    ;
    #line 1078 
    emg_14_emg_param_1_1 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1078 
    emg_14_emg_param_1_1 = emg_14_emg_param_1_1;
    #line 1082 
    emg_wrapper_be_get_channels(emg_14_container,emg_14_emg_param_1_1);
    #line 1086 
    ldv_free((void *)emg_14_emg_param_1_1);
    #line 1088 
    break;
    #line 1090 
    case 55: 
             #line 1090 
    ;
    #line 1092 
    emg_14_emg_param_1_0 = (struct ethtool_flash *)ldv_xmalloc_unknown_size(0UL);
    #line 1092 
    emg_14_emg_param_1_0 = emg_14_emg_param_1_0;
    #line 1096 
    emg_wrapper_be_do_flash(emg_14_container,emg_14_emg_param_1_0);
    #line 1100 
    ldv_free((void *)emg_14_emg_param_1_0);
    #line 1103 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 1104 
      emg_repeat_cnt_call_14 --;
      #line 1106 
      goto emg_call_14;
    }
    else 
         #line 1108 
         __VERIFIER_assume(0);
    #line 1112 
    break;
    #line 1114 
    case 56: 
             #line 1114 
    ;
    #line 1118 
    break;
    #line 1120 
    default: 
             #line 1120 
    ;
    #line 1120 
    __VERIFIER_assume(0);
  }
  #line 1123 
  return (void *)0;
}

#line 1128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_be_driver(void *arg0)
{
  #line 1131 
  int emg_15_choice;
  #line 1132 
  struct pci_driver *emg_15_container;
  #line 1133 
  struct pci_device_id *emg_15_device_id;
  #line 1134 
  int emg_15_emg_param_1_0;
  #line 1135 
  struct pci_dev *emg_15_resource_0;
  #line 1136 
  struct pm_message emg_15_resource_1;
  #line 1137 
  int emg_15_ret;
  #line 1138 
  int emg_repeat_cnt_call_15_1 = 1;
  #line 1139 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 1140 
  int emg_repeat_cnt_call_15_0 = 1;
  #line 1141 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 1143 
  struct emg_struct_pci_scenario_be_driver_15 *data = (struct emg_struct_pci_scenario_be_driver_15 *)arg0;
  #line 1147 
  emg_15_choice = 0;
  #line 1148 
  emg_15_ret = ldv_undef_int();
  #line 1149 
  emg_15_choice = 0;
  #line 1150 
  emg_15_container = emg_alias_be_driver;
  #line 1151 
  emg_15_ret = ldv_undef_int();
  #line 1153 
  __VERIFIER_assume(data->arg0 == emg_alias_be_driver);
  #line 1155 
  if (data != (struct emg_struct_pci_scenario_be_driver_15 *)0) {
    #line 1156 
    emg_15_container = data->arg0;
    #line 1157 
    ldv_free((void *)data);
  }
  #line 1162 
  emg_15_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1163 
  emg_15_choice = __ldv_undef_int_range(0,8);
  #line 1164 
  emg_15_device_id = emg_15_container->id_table + (unsigned long)emg_15_choice;
  #line 1168 
  goto emg_main_15;
  #line 1172 
  return (void *)0;
  #line 1175 
  emg_call_15: 
               #line 1175 
  ;
  #line 1176 
  switch (ldv_undef_int()) {
    #line 1177 
    case 0: 
            #line 1177 
    ;
    #line 1179 
    emg_wrapper_be_pci_sriov_configure(emg_15_resource_0,emg_15_emg_param_1_0);
    #line 1182 
    if (emg_repeat_cnt_call_15_1 > 0) {
      #line 1183 
      emg_repeat_cnt_call_15_1 --;
      #line 1185 
      goto emg_call_15;
    }
    else 
         #line 1187 
         __VERIFIER_assume(0);
    #line 1191 
    break;
    #line 1193 
    case 1: 
            #line 1193 
    ;
    #line 1195 
    emg_15_ret = emg_wrapper_be_suspend(emg_15_resource_0,emg_15_resource_1);
    #line 1200 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 1204 
    emg_wrapper_be_pci_resume(emg_15_resource_0);
    #line 1207 
    if (emg_repeat_cnt_call_15_0 > 0) {
      #line 1208 
      emg_repeat_cnt_call_15_0 --;
      #line 1210 
      goto emg_call_15;
    }
    else 
         #line 1212 
         __VERIFIER_assume(0);
    #line 1216 
    break;
    #line 1218 
    case 2: 
            #line 1218 
    ;
    #line 1220 
    emg_wrapper_be_shutdown(emg_15_resource_0);
    #line 1224 
    emg_wrapper_be_remove(emg_15_resource_0);
    #line 1227 
    if (emg_repeat_cnt_main_15_1 > 0) {
      #line 1228 
      emg_repeat_cnt_main_15_1 --;
      #line 1230 
      goto emg_main_15;
    }
    else 
         #line 1232 
         __VERIFIER_assume(0);
    #line 1236 
    break;
    #line 1238 
    default: 
             #line 1238 
    ;
    #line 1238 
    __VERIFIER_assume(0);
  }
  #line 1241 
  return (void *)0;
  #line 1244 
  emg_main_15: 
               #line 1244 
  ;
  #line 1245 
  if (ldv_undef_int() != 0) {
    #line 1248 
    ldv_pre_probe();
    #line 1252 
    emg_15_ret = emg_wrapper_be_probe(emg_15_resource_0,emg_15_device_id);
    #line 1257 
    emg_15_ret = ldv_post_probe(emg_15_ret);
    #line 1260 
    if (ldv_undef_int() != 0) {
      #line 1262 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 1266 
      goto emg_call_15;
    }
    else 
         #line 1271 
         __VERIFIER_assume(emg_15_ret != 0);
    #line 1275 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 1276 
      emg_repeat_cnt_main_15_0 --;
      #line 1278 
      goto emg_main_15;
    }
    else 
         #line 1280 
         __VERIFIER_assume(0);
  }
  else 
       #line 1286 
       ldv_free((void *)emg_15_resource_0);
  #line 1294 
  return (void *)0;
}

#line 1299  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1302 
  struct pci_driver *emg_2_pci_driver;
  #line 1304 
  emg_2_pci_driver = emg_alias_be_driver;
  #line 1305 
  if (ldv_undef_int() != 0) {
    #line 1307 
    emg_2_pci_driver = arg0;
    #line 1311 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1315 
    return 0;
  }
  else {
    #line 1319 
    return ldv_undef_int_negative();
  }
}

#line 1327  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1330 
  struct net_device *emg_3_netdev;
  #line 1332 
  if (ldv_undef_int() != 0) {
    #line 1334 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1338 
    return emg_3_netdev;
  }
  else 
       #line 1342 
       return (struct net_device *)0;
}

#line 1350  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1353 
  int emg_4_line;
  #line 1356 
  emg_4_line = (int)arg0;
  #line 1360 
  emg_dispatch_irq_deregister_4(emg_4_line);
  #line 1361 
  ;
  #line 1361 
  return (void *)0;
}

#line 1367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1370 
  struct net_device *emg_5_netdev;
  #line 1373 
  emg_5_netdev = arg0;
  #line 1374 
  ldv_free((void *)emg_5_netdev);
  #line 1377 
  return;
}

#line 1382  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1385 
  struct pci_driver *emg_6_pci_driver;
  #line 1387 
  emg_6_pci_driver = emg_alias_be_driver;
  #line 1389 
  emg_6_pci_driver = arg0;
  #line 1393 
  emg_dispatch_deregister_6(emg_6_pci_driver);
  #line 1396 
  return;
}

#line 1401  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 1404 
  struct delayed_work *emg_7_delayed_work;
  #line 1405 
  struct work_struct *emg_7_emg_param_0_0;
  #line 1407 
  if (ldv_undef_int() != 0) {
    #line 1409 
    emg_7_delayed_work = arg1;
    #line 1413 
    emg_7_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1413 
    emg_7_emg_param_0_0 = emg_7_emg_param_0_0;
    #line 1417 
    if (emg_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1418 
      (*(emg_7_delayed_work->work.func))(emg_7_emg_param_0_0);
    #line 1423 
    ldv_free((void *)emg_7_emg_param_0_0);
    #line 1427 
    return (_Bool)1;
  }
  else 
       #line 1431 
       return (_Bool)0;
}

#line 1439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1442 
  struct work_struct *emg_8_work_struct;
  #line 1444 
  if (ldv_undef_int() != 0) {
    #line 1446 
    emg_8_work_struct = arg1;
    #line 1450 
    if (emg_8_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1451 
      (*(emg_8_work_struct->func))(emg_8_work_struct);
    #line 1456 
    return (_Bool)1;
  }
  else 
       #line 1460 
       return (_Bool)0;
}

#line 1468  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1471 
  struct net_device *emg_9_netdev;
  #line 1472 
  int emg_9_ret;
  #line 1475 
  emg_9_ret = ldv_undef_int();
  #line 1476 
  emg_9_ret = ldv_undef_int();
  #line 1477 
  if (ldv_undef_int() != 0) {
    #line 1479 
    emg_9_netdev = arg0;
    #line 1483 
    emg_9_ret = emg_wrapper_be_open(emg_9_netdev);
    #line 1486 
    if (ldv_undef_int() != 0) {
      #line 1488 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1492 
      emg_dispatch_register_9(emg_9_netdev);
      #line 1496 
      return 0;
    }
    else {
      #line 1500 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1501 
      ldv_failed_register_netdev();
      #line 1502 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1507 
    ldv_failed_register_netdev();
    #line 1508 
    return ldv_undef_int_negative();
  }
}

#line 1516  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1519 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1520 
  void *emg_10_data;
  #line 1521 
  int emg_10_line;
  #line 1522 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1524 
  emg_10_callback = & emg_wrapper_be_intx;
  #line 1525 
  if (ldv_undef_int() != 0) {
    #line 1527 
    emg_10_line = (int)arg0;
    #line 1528 
    emg_10_callback = arg1;
    #line 1529 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1530 
    emg_10_data = arg4;
    #line 1534 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1538 
    return 0;
  }
  else {
    #line 1542 
    return ldv_undef_int_negative();
  }
}

#line 1550  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1553 
  struct net_device *emg_11_netdev;
  #line 1556 
  emg_11_netdev = arg0;
  #line 1560 
  emg_wrapper_be_close(emg_11_netdev);
  #line 1564 
  emg_dispatch_deregister_11(emg_11_netdev);
  #line 1567 
  return;
}

#line 1572  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1575 
  int emg_1_ret;
  #line 1578 
  emg_1_ret = emg_be_init_module();
  #line 1579 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1582 
  if (ldv_undef_int() != 0) {
    #line 1584 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1588 
    emg_be_exit_module();
  }
  else 
       #line 1592 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1596 
  return (void *)0;
}

#line 1601  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1603 
  ldv_initialize();
  #line 1605 
  emg_entry_point_insmod((void *)0);
  #line 1607 
  return 0;
}

