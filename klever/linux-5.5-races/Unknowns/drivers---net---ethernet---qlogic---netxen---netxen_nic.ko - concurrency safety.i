/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long ulong;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u16 uint16_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ctx.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct netxen_adapter;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_114 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_114 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_115 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_115 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_116 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_116 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_117 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_117 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_130 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_131 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_28 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_129 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_132 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_132 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_135 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   struct list_head slab_list ;
   struct __anonstruct_138 __anonCompField___anonunion_137_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_139 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_140 __anonCompField___anonunion_139_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   union __anonunion_137 __anonCompField___anonstruct_136_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_139 __anonCompField___anonstruct_136_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_142 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_144 __anonCompField___anonstruct_143_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_145 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct __anonstruct_134 __anonCompField___anonunion_133_31 ;
   struct __anonstruct_135 __anonCompField___anonunion_133_32 ;
   struct __anonstruct_136 __anonCompField___anonunion_133_37 ;
   struct __anonstruct_141 __anonCompField___anonunion_133_38 ;
   struct __anonstruct_142 __anonCompField___anonunion_133_39 ;
   struct __anonstruct_143 __anonCompField___anonunion_133_41 ;
   struct __anonstruct_145 __anonCompField___anonunion_133_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_146 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_133 __anonCompField_page_43 ;
   union __anonunion_146 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_147 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_147 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_148 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_148 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_239 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_238 {
   struct __anonstruct_239 __anonCompField___anonunion_238_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_238 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_258 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_258 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_261 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_261 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_269 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_269 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_309 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_309 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_311 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_312 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_313 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_316 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_317 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_315 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_316 _addr_bnd ;
   struct __anonstruct__addr_pkey_317 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_314 {
   void *_addr ;
   union __anonunion_315 __anonCompField___anonstruct__sigfault_314_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_318 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_319 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_310 _kill ;
   struct __anonstruct__timer_311 _timer ;
   struct __anonstruct__rt_312 _rt ;
   struct __anonstruct__sigchld_313 _sigchld ;
   struct __anonstruct__sigfault_314 _sigfault ;
   struct __anonstruct__sigpoll_318 _sigpoll ;
   struct __anonstruct__sigsys_319 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_324 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_324 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_329 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_329 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_331 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_331 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_408 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_408 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_422 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_421 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_424 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct __anonstruct_424 __anonCompField___anonunion_423_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_423 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_425 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_426 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_425 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_426 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_438 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_437 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_438 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_437 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_465 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_467 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_466 {
   unsigned long nr_segs ;
   struct __anonstruct_467 __anonCompField___anonunion_466_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_465 __anonCompField_iov_iter_72 ;
   union __anonunion_466 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_470 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_470 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_471 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_471 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_472 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_472 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_473 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_473 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_474 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_474 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_475 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_475 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_476 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_476 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_477 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_477 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_478 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_479 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_478 ifr_ifrn ;
   union __anonunion_ifr_ifru_479 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11230 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11230 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_514 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_514 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_515 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_515 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_526 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_527 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_528 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_529 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_526 ports ;
   struct __anonstruct_icmpt_527 icmpt ;
   struct __anonstruct_dnports_528 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_529 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_530 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_530 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_536 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_537 __anonCompField___anonstruct_536_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct __anonstruct_536 __anonCompField___anonunion_535_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_539 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   struct __anonstruct_541 __anonCompField___anonunion_540_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_543 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   __wsum csum ;
   struct __anonstruct_543 __anonCompField___anonunion_542_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_545 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_546 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_535 __anonCompField_sk_buff_92 ;
   union __anonunion_538 __anonCompField_sk_buff_93 ;
   union __anonunion_539 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_540 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_542 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_544 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_545 __anonCompField_sk_buff_100 ;
   union __anonunion_546 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_572 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_572 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_575 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_575 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_576 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_576 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_577 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_577 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_578 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_578 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_579 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_579 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 178 
struct fib_rules_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_581 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_581 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_594 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct __anonstruct_594 __anonCompField___anonunion_593_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_593 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_596 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   struct keyring_index_key index_key ;
   struct __anonstruct_598 __anonCompField___anonunion_597_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_600 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_599 {
   union key_payload payload ;
   struct __anonstruct_600 __anonCompField___anonunion_599_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_595 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_596 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_597 __anonCompField_key_109 ;
   union __anonunion_599 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_603 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_603 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_604 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_604 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_606 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_605 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_606 __anonCompField___anonunion_605_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_605 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_608 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_610 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_610 __anonCompField___anonstruct_609_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_612 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_614 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_616 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_615 {
   union __anonunion_616 __anonCompField___anonstruct_615_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_617 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_618 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_619 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_620 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_621 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_608 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_612 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_613 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_614 test ;
   struct __anonstruct_615 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_617 info ;
   struct __anonstruct_query_618 query ;
   struct __anonstruct_raw_tracepoint_619 raw_tracepoint ;
   struct __anonstruct_620 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_621 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_648 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_648 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_650 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct __anonstruct_tail_call_650 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_649 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_651 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_651 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_653 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_653 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_655 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_654 {
   struct __anonstruct_655 __anonCompField___anonunion_654_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_654 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_678 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_678 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_684 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_685 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_686 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_682 {
   struct __anonstruct_683 __anonCompField___anonunion_682_157 ;
   struct __anonstruct_684 __anonCompField___anonunion_682_158 ;
   struct __anonstruct_685 __anonCompField___anonunion_682_159 ;
   struct __anonstruct_xsk_686 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_682 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15281 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15282 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_687 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct dn_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_688 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_687 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15281 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15282 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_688 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_699 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_699 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_700 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_700 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_703 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_704 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_706 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_707 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_705 {
   struct __anonstruct_elv_706 elv ;
   struct __anonstruct_flush_707 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_708 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_703 __anonCompField_request_164 ;
   union __anonunion_704 __anonCompField_request_165 ;
   union __anonunion_705 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_708 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_731 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_730 {
   void *validation_data ;
   struct __anonstruct_731 __anonCompField___anonunion_730_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_730 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_805 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_806 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_804 {
   struct __anonstruct_805 __anonCompField___anonunion_804_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_806 __anonCompField___anonunion_804_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_804 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_808 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_808 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_821 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_821 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_843 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_843 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_845 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   __addrpair skc_addrpair ;
   struct __anonstruct_845 __anonCompField___anonunion_844_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_848 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   __portpair skc_portpair ;
   struct __anonstruct_848 __anonCompField___anonunion_847_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_844 __anonCompField_sock_common_178 ;
   union __anonunion_846 __anonCompField_sock_common_179 ;
   union __anonunion_847 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_849 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_850 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_851 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_852 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_853 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_854 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_855 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_856 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_854 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_855 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_856 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_891 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_891 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_rcv_ring {
   __le64 addr ;
   __le32 size ;
   __le32 rsrvd ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_sts_ring {
   __le64 addr ;
   __le32 size ;
   __le16 msi_index ;
   __le16 rsvd ;
};
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_ring_ctx {
   __le64 cmd_consumer_offset ;
   __le64 cmd_ring_addr ;
   __le32 cmd_ring_size ;
   __le32 rsrvd ;
   struct netxen_rcv_ring rcv_rings[3U] ;
   __le64 sts_ring_addr ;
   __le32 sts_ring_size ;
   __le32 ctx_id ;
   __le64 rsrvd_2[3U] ;
   __le32 sts_ring_count ;
   __le32 rsrvd_3 ;
   struct netxen_sts_ring sts_rings[4U] ;
} __attribute__((__aligned__(64)));
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct cmd_desc_type0 {
   u8 tcp_hdr_offset ;
   u8 ip_hdr_offset ;
   __le16 flags_opcode ;
   __le32 nfrags__length ;
   __le64 addr_buffer2 ;
   __le16 reference_handle ;
   __le16 mss ;
   u8 port_ctxid ;
   u8 total_hdr_length ;
   __le16 conn_id ;
   __le64 addr_buffer3 ;
   __le64 addr_buffer1 ;
   __le16 buffer_length[4U] ;
   __le64 addr_buffer4 ;
   __le32 reserved2 ;
   __le16 reserved ;
   __le16 vlan_TCI ;
} __attribute__((__aligned__(64)));
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct rcv_desc {
   __le16 reference_handle ;
   __le16 reserved ;
   __le32 buffer_length ;
   __le64 addr_buffer ;
};
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct status_desc {
   __le64 status_desc_data[2U] ;
} __attribute__((__aligned__(16)));
#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_skb_frag {
   u64 dma ;
   u64 length ;
};
#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_recv_crb {
   u32 crb_rcv_producer[3U] ;
   u32 crb_sts_consumer[4U] ;
   u32 sw_int_mask[4U] ;
};
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_cmd_buffer {
   struct sk_buff *skb ;
   struct netxen_skb_frag frag_array[18U] ;
   u32 frag_count ;
};
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_rx_buffer {
   struct list_head list ;
   struct sk_buff *skb ;
   u64 dma ;
   u16 ref_handle ;
   u16 state ;
};
#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_hardware_context {
   void *pci_base0 ;
   void *pci_base1 ;
   void *pci_base2 ;
   void *db_base ;
   void *ocm_win_crb ;
   unsigned long db_len ;
   unsigned long pci_len0 ;
   u32 ocm_win ;
   u32 crb_win ;
   rwlock_t crb_lock ;
   spinlock_t mem_lock ;
   u8 cut_through ;
   u8 revision_id ;
   u8 pci_func ;
   u8 linkup ;
   u16 port_type ;
   u16 board_type ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_adapter_stats {
   u64 xmitcalled ;
   u64 xmitfinished ;
   u64 rxdropped ;
   u64 txdropped ;
   u64 csummed ;
   u64 rx_pkts ;
   u64 lro_pkts ;
   u64 rxbytes ;
   u64 txbytes ;
};
#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct nx_host_rds_ring {
   u32 producer ;
   u32 num_desc ;
   u32 dma_size ;
   u32 skb_size ;
   u32 flags ;
   void *crb_rcv_producer ;
   struct rcv_desc *desc_head ;
   struct netxen_rx_buffer *rx_buf_arr ;
   struct list_head free_list ;
   spinlock_t lock ;
   dma_addr_t phys_addr ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct nx_host_sds_ring {
   u32 consumer ;
   u32 num_desc ;
   void *crb_sts_consumer ;
   void *crb_intr_mask ;
   struct status_desc *desc_head ;
   struct netxen_adapter *adapter ;
   struct napi_struct napi ;
   struct list_head free_list[3U] ;
   int irq ;
   dma_addr_t phys_addr ;
   char name[20U] ;
};
#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct nx_host_tx_ring {
   u32 producer ;
   __le32 *hw_consumer ;
   u32 sw_consumer ;
   void *crb_cmd_producer ;
   void *crb_cmd_consumer ;
   u32 num_desc ;
   struct netdev_queue *txq ;
   struct netxen_cmd_buffer *cmd_buf_arr ;
   struct cmd_desc_type0 *desc_head ;
   dma_addr_t phys_addr ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_recv_context {
   u32 state ;
   u16 context_id ;
   u16 virt_port ;
   struct nx_host_rds_ring *rds_rings ;
   struct nx_host_sds_ring *sds_rings ;
   struct netxen_ring_ctx *hwctx ;
   dma_addr_t phys_addr ;
};
#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct _cdrp_cmd {
   u32 cmd ;
   u32 arg1 ;
   u32 arg2 ;
   u32 arg3 ;
};
#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_cmd_args {
   struct _cdrp_cmd req ;
   struct _cdrp_cmd rsp ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_hostrq_sds_ring_t_961 {
   __le64 host_phys_addr ;
   __le32 ring_size ;
   __le16 msi_index ;
   __le16 rsvd ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_hostrq_sds_ring_t_961 nx_hostrq_sds_ring_t;
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_hostrq_rds_ring_t_962 {
   __le64 host_phys_addr ;
   __le64 buff_size ;
   __le32 ring_size ;
   __le32 ring_kind ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_hostrq_rds_ring_t_962 nx_hostrq_rds_ring_t;
#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_hostrq_rx_ctx_t_963 {
   __le64 host_rsp_dma_addr ;
   __le32 capabilities[4U] ;
   __le32 host_int_crb_mode ;
   __le32 host_rds_crb_mode ;
   __le32 rds_ring_offset ;
   __le32 sds_ring_offset ;
   __le16 num_rds_rings ;
   __le16 num_sds_rings ;
   __le16 rsvd1 ;
   __le16 rsvd2 ;
   u8 reserved[128U] ;
   char data[0U] ;
};
#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_hostrq_rx_ctx_t_963 nx_hostrq_rx_ctx_t;
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_cardrsp_rds_ring_t_964 {
   __le32 host_producer_crb ;
   __le32 rsvd1 ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_cardrsp_rds_ring_t_964 nx_cardrsp_rds_ring_t;
#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_cardrsp_sds_ring_t_965 {
   __le32 host_consumer_crb ;
   __le32 interrupt_crb ;
};
#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_cardrsp_sds_ring_t_965 nx_cardrsp_sds_ring_t;
#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_cardrsp_rx_ctx_t_966 {
   __le32 rds_ring_offset ;
   __le32 sds_ring_offset ;
   __le32 host_ctx_state ;
   __le32 num_fn_per_port ;
   __le16 num_rds_rings ;
   __le16 num_sds_rings ;
   __le16 context_id ;
   u8 phys_port ;
   u8 virt_port ;
   u8 reserved[128U] ;
   char data[0U] ;
};
#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_cardrsp_rx_ctx_t_966 nx_cardrsp_rx_ctx_t;
#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_hostrq_cds_ring_t_967 {
   __le64 host_phys_addr ;
   __le32 ring_size ;
   __le32 rsvd ;
};
#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_hostrq_cds_ring_t_967 nx_hostrq_cds_ring_t;
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_hostrq_tx_ctx_t_968 {
   __le64 host_rsp_dma_addr ;
   __le64 cmd_cons_dma_addr ;
   __le64 dummy_dma_addr ;
   __le32 capabilities[4U] ;
   __le32 host_int_crb_mode ;
   __le32 rsvd1 ;
   __le16 rsvd2 ;
   __le16 interrupt_ctl ;
   __le16 msi_index ;
   __le16 rsvd3 ;
   nx_hostrq_cds_ring_t cds_ring ;
   u8 reserved[128U] ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_hostrq_tx_ctx_t_968 nx_hostrq_tx_ctx_t;
#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_cardrsp_cds_ring_t_969 {
   __le32 host_producer_crb ;
   __le32 interrupt_crb ;
};
#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_cardrsp_cds_ring_t_969 nx_cardrsp_cds_ring_t;
#line 899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_cardrsp_tx_ctx_t_970 {
   __le32 host_ctx_state ;
   __le16 context_id ;
   u8 phys_port ;
   u8 virt_port ;
   nx_cardrsp_cds_ring_t cds_ring ;
   u8 reserved[128U] ;
};
#line 899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_cardrsp_tx_ctx_t_970 nx_cardrsp_tx_ctx_t;
#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_data_972 {
   uint16_t rx_packets ;
   uint16_t rx_time_us ;
   uint16_t tx_packets ;
   uint16_t tx_time_us ;
};
#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_nx_nic_intr_coalesce_data_t_971 {
   struct __anonstruct_data_972 data ;
   uint64_t word ;
};
#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef union __anonunion_nx_nic_intr_coalesce_data_t_971 nx_nic_intr_coalesce_data_t;
#line 966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_nic_intr_coalesce_t_973 {
   uint16_t stats_time_us ;
   uint16_t rate_sample_time ;
   uint16_t flags ;
   uint16_t rsvd_1 ;
   uint32_t low_threshold ;
   uint32_t high_threshold ;
   nx_nic_intr_coalesce_data_t normal ;
   nx_nic_intr_coalesce_data_t low ;
   nx_nic_intr_coalesce_data_t high ;
   nx_nic_intr_coalesce_data_t irq ;
};
#line 966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_nic_intr_coalesce_t_973 nx_nic_intr_coalesce_t;
#line 1287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump {
   u32 pos ;
   u8 fw_supports_md ;
   u8 has_valid_dump ;
   u8 md_capture_mask ;
   u8 md_enabled ;
   u32 md_dump_size ;
   u32 md_capture_size ;
   u32 md_template_size ;
   u32 md_template_ver ;
   u64 md_timestamp ;
   void *md_template ;
   void *md_capture_buff ;
};
#line 1579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_dummy_dma {
   void *addr ;
   dma_addr_t phys_addr ;
};
#line 1584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_adapter {
   struct netxen_hardware_context ahw ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   struct list_head mac_list ;
   struct list_head ip_list ;
   spinlock_t tx_clean_lock ;
   u16 num_txd ;
   u16 num_rxd ;
   u16 num_jumbo_rxd ;
   u16 num_lro_rxd ;
   u8 max_rds_rings ;
   u8 max_sds_rings ;
   u8 driver_mismatch ;
   u8 msix_supported ;
   u8 __pad ;
   u8 pci_using_dac ;
   u8 portnum ;
   u8 physical_port ;
   u8 mc_enabled ;
   u8 max_mc_count ;
   u8 rss_supported ;
   u8 link_changed ;
   u8 fw_wait_cnt ;
   u8 fw_fail_cnt ;
   u8 tx_timeo_cnt ;
   u8 need_fw_reset ;
   u8 has_link_events ;
   u8 fw_type ;
   u16 tx_context_id ;
   u16 mtu ;
   u16 is_up ;
   u16 link_speed ;
   u16 link_duplex ;
   u16 link_autoneg ;
   u16 module_type ;
   u32 capabilities ;
   u32 flags ;
   u32 irq ;
   u32 temp ;
   u32 int_vec_bit ;
   u32 heartbit ;
   u8 mac_addr[6U] ;
   struct netxen_adapter_stats stats ;
   struct netxen_recv_context recv_ctx ;
   struct nx_host_tx_ring *tx_ring ;
   int (*macaddr_set)(struct netxen_adapter *, u8 *) ;
   int (*set_mtu)(struct netxen_adapter *, int ) ;
   int (*set_promisc)(struct netxen_adapter *, u32 ) ;
   void (*set_multi)(struct net_device *) ;
   int (*phy_read)(struct netxen_adapter *, u32 , u32 *) ;
   int (*phy_write)(struct netxen_adapter *, u32 , u32 ) ;
   int (*init_port)(struct netxen_adapter *, int ) ;
   int (*stop_port)(struct netxen_adapter *) ;
   u32 (*crb_read)(struct netxen_adapter *, ulong ) ;
   int (*crb_write)(struct netxen_adapter *, ulong , u32 ) ;
   int (*pci_mem_read)(struct netxen_adapter *, u64 , u64 *) ;
   int (*pci_mem_write)(struct netxen_adapter *, u64 , u64 ) ;
   int (*pci_set_window)(struct netxen_adapter *, u64 , u32 *) ;
   u32 (*io_read)(struct netxen_adapter *, void *) ;
   void (*io_write)(struct netxen_adapter *, void *, u32 ) ;
   void *tgt_mask_reg ;
   void *pci_int_reg ;
   void *tgt_status_reg ;
   void *crb_int_state_reg ;
   void *isr_int_vec ;
   struct msix_entry msix_entries[4U] ;
   struct netxen_dummy_dma dummy_dma ;
   struct delayed_work fw_work ;
   struct work_struct tx_timeout_task ;
   nx_nic_intr_coalesce_t coal ;
   unsigned long state ;
   __le32 file_prd_off ;
   u32 fw_version ;
   struct firmware *fw ;
   struct netxen_minidump mdump ;
   int fw_mdump_rdy ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1038 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1040 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1042 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.h"
struct __anonstruct_crb_128M_2M_sub_block_map_t_1984 {
   unsigned int valid ;
   unsigned int start_128M ;
   unsigned int end_128M ;
   unsigned int start_2M ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.h"
typedef struct __anonstruct_crb_128M_2M_sub_block_map_t_1984 crb_128M_2M_sub_block_map_t;
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.h"
struct __anonstruct_crb_128M_2M_block_map_t_1985 {
   crb_128M_2M_sub_block_map_t sub_block[16U] ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.h"
typedef struct __anonstruct_crb_128M_2M_block_map_t_1985 crb_128M_2M_block_map_t;
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct nx_mac_list_s {
   struct list_head list ;
   uint8_t mac_addr[8U] ;
};
#line 939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct nx_mac_list_s nx_mac_list_t;
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_nic_req_t_2002 {
   __le64 qhdr ;
   __le64 req_hdr ;
   __le64 words[6U] ;
};
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_nic_req_t_2002 nx_nic_req_t;
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_mac_req_t_2003 {
   u8 op ;
   u8 tag ;
   u8 mac_addr[6U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_mac_req_t_2003 nx_mac_req_t;
#line 1304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_template_hdr {
   u32 entry_type ;
   u32 first_entry_offset ;
   u32 size_of_template ;
   u32 capture_mask ;
   u32 num_of_entries ;
   u32 version ;
   u32 driver_timestamp ;
   u32 checksum ;
   u32 driver_capture_mask ;
   u32 driver_info_word2 ;
   u32 driver_info_word3 ;
   u32 driver_info_word4 ;
   u32 saved_state_array[16U] ;
   u32 capture_size_array[8U] ;
   u32 rsvd[0U] ;
};
#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2005 {
   u8 entry_capture_mask ;
   u8 entry_code ;
   u8 driver_code ;
   u8 driver_flags ;
};
#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2004 {
   struct __anonstruct_2005 __anonCompField___anonunion_2004_193 ;
   u32 entry_ctrl_word ;
};
#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_common_entry_hdr {
   u32 entry_type ;
   u32 entry_size ;
   u32 entry_capture_size ;
   union __anonunion_2004 __anonCompField_netxen_common_entry_hdr_194 ;
};
#line 1345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry {
   struct netxen_common_entry_hdr hdr ;
   u32 entry_data00 ;
   u32 entry_data01 ;
   u32 entry_data02 ;
   u32 entry_data03 ;
   u32 entry_data04 ;
   u32 entry_data05 ;
   u32 entry_data06 ;
   u32 entry_data07 ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2007 {
   u32 select_addr_reg ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2006 {
   struct __anonstruct_2007 __anonCompField___anonunion_2006_195 ;
   u32 rsvd_0 ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2009 {
   u8 addr_stride ;
   u8 addr_cnt ;
   u16 data_size ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2008 {
   struct __anonstruct_2009 __anonCompField___anonunion_2008_197 ;
   u32 rsvd_1 ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2011 {
   u32 op_count ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2010 {
   struct __anonstruct_2011 __anonCompField___anonunion_2010_199 ;
   u32 rsvd_2 ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2013 {
   u32 read_addr_reg ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2012 {
   struct __anonstruct_2013 __anonCompField___anonunion_2012_201 ;
   u32 rsvd_3 ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2015 {
   u32 write_mask ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2014 {
   struct __anonstruct_2015 __anonCompField___anonunion_2014_203 ;
   u32 rsvd_4 ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2017 {
   u32 read_mask ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2016 {
   struct __anonstruct_2017 __anonCompField___anonunion_2016_205 ;
   u32 rsvd_5 ;
};
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry_rdrom {
   struct netxen_common_entry_hdr h ;
   union __anonunion_2006 __anonCompField_netxen_minidump_entry_rdrom_196 ;
   union __anonunion_2008 __anonCompField_netxen_minidump_entry_rdrom_198 ;
   union __anonunion_2010 __anonCompField_netxen_minidump_entry_rdrom_200 ;
   union __anonunion_2012 __anonCompField_netxen_minidump_entry_rdrom_202 ;
   union __anonunion_2014 __anonCompField_netxen_minidump_entry_rdrom_204 ;
   union __anonunion_2016 __anonCompField_netxen_minidump_entry_rdrom_206 ;
   u32 read_addr ;
   u32 read_data_size ;
};
#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2019 {
   u8 addr_stride ;
   u8 state_index_a ;
   u16 poll_timeout ;
};
#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2018 {
   struct __anonstruct_2019 __anonCompField___anonunion_2018_207 ;
   u32 addr_cntrl ;
};
#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2021 {
   u8 opcode ;
   u8 state_index_v ;
   u8 shl ;
   u8 shr ;
};
#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2020 {
   struct __anonstruct_2021 __anonCompField___anonunion_2020_209 ;
   u32 control_value ;
};
#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry_crb {
   struct netxen_common_entry_hdr h ;
   u32 addr ;
   union __anonunion_2018 __anonCompField_netxen_minidump_entry_crb_208 ;
   u32 data_size ;
   u32 op_count ;
   union __anonunion_2020 __anonCompField_netxen_minidump_entry_crb_210 ;
   u32 value_1 ;
   u32 value_2 ;
   u32 value_3 ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2023 {
   u32 select_addr_reg ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2022 {
   struct __anonstruct_2023 __anonCompField___anonunion_2022_211 ;
   u32 rsvd_0 ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2025 {
   u8 addr_stride ;
   u8 addr_cnt ;
   u16 data_size ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2024 {
   struct __anonstruct_2025 __anonCompField___anonunion_2024_213 ;
   u32 rsvd_1 ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2027 {
   u32 op_count ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2026 {
   struct __anonstruct_2027 __anonCompField___anonunion_2026_215 ;
   u32 rsvd_2 ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2029 {
   u32 read_addr_reg ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2028 {
   struct __anonstruct_2029 __anonCompField___anonunion_2028_217 ;
   u32 rsvd_3 ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2031 {
   u32 cntrl_addr_reg ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2030 {
   struct __anonstruct_2031 __anonCompField___anonunion_2030_219 ;
   u32 rsvd_4 ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2033 {
   u8 wr_byte0 ;
   u8 wr_byte1 ;
   u8 poll_mask ;
   u8 poll_cnt ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2032 {
   struct __anonstruct_2033 __anonCompField___anonunion_2032_221 ;
   u32 rsvd_5 ;
};
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry_rdmem {
   struct netxen_common_entry_hdr h ;
   union __anonunion_2022 __anonCompField_netxen_minidump_entry_rdmem_212 ;
   union __anonunion_2024 __anonCompField_netxen_minidump_entry_rdmem_214 ;
   union __anonunion_2026 __anonCompField_netxen_minidump_entry_rdmem_216 ;
   union __anonunion_2028 __anonCompField_netxen_minidump_entry_rdmem_218 ;
   union __anonunion_2030 __anonCompField_netxen_minidump_entry_rdmem_220 ;
   union __anonunion_2032 __anonCompField_netxen_minidump_entry_rdmem_222 ;
   u32 read_addr ;
   u32 read_data_size ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2035 {
   u16 tag_value_stride ;
   u16 init_tag_value ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2034 {
   struct __anonstruct_2035 __anonCompField___anonunion_2034_223 ;
   u32 select_addr_cntrl ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2037 {
   u16 write_value ;
   u8 poll_mask ;
   u8 poll_wait ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2036 {
   struct __anonstruct_2037 __anonCompField___anonunion_2036_225 ;
   u32 control_value ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2039 {
   u8 read_addr_stride ;
   u8 read_addr_cnt ;
   u16 rsvd_1 ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2038 {
   struct __anonstruct_2039 __anonCompField___anonunion_2038_227 ;
   u32 read_addr_cntrl ;
};
#line 1480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry_cache {
   struct netxen_common_entry_hdr h ;
   u32 tag_reg_addr ;
   union __anonunion_2034 __anonCompField_netxen_minidump_entry_cache_224 ;
   u32 data_size ;
   u32 op_count ;
   u32 control_addr ;
   union __anonunion_2036 __anonCompField_netxen_minidump_entry_cache_226 ;
   u32 read_addr ;
   union __anonunion_2038 __anonCompField_netxen_minidump_entry_cache_228 ;
};
#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2041 {
   u32 rsvd_1 ;
};
#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2040 {
   struct __anonstruct_2041 __anonCompField___anonunion_2040_229 ;
   u32 select_addr_cntrl ;
};
#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2043 {
   u32 read_addr_stride ;
};
#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2042 {
   struct __anonstruct_2043 __anonCompField___anonunion_2042_231 ;
   u32 read_addr_cntrl ;
};
#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry_rdocm {
   struct netxen_common_entry_hdr h ;
   u32 rsvd_0 ;
   union __anonunion_2040 __anonCompField_netxen_minidump_entry_rdocm_230 ;
   u32 data_size ;
   u32 op_count ;
   u32 rsvd_2 ;
   u32 rsvd_3 ;
   u32 read_addr ;
   union __anonunion_2042 __anonCompField_netxen_minidump_entry_rdocm_232 ;
};
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2045 {
   u32 rsvd_0 ;
};
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2044 {
   struct __anonstruct_2045 __anonCompField___anonunion_2044_233 ;
   u32 select_addr_cntrl ;
};
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry_mux {
   struct netxen_common_entry_hdr h ;
   u32 select_addr ;
   union __anonunion_2044 __anonCompField_netxen_minidump_entry_mux_234 ;
   u32 data_size ;
   u32 op_count ;
   u32 select_value ;
   u32 select_value_stride ;
   u32 read_addr ;
   u32 rsvd_1 ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2047 {
   u16 queue_id_stride ;
   u16 rsvd_0 ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2046 {
   struct __anonstruct_2047 __anonCompField___anonunion_2046_235 ;
   u32 select_addr_cntrl ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_2049 {
   u8 read_addr_stride ;
   u8 read_addr_cnt ;
   u16 rsvd_3 ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_2048 {
   struct __anonstruct_2049 __anonCompField___anonunion_2048_237 ;
   u32 read_addr_cntrl ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_minidump_entry_queue {
   struct netxen_common_entry_hdr h ;
   u32 select_addr ;
   union __anonunion_2046 __anonCompField_netxen_minidump_entry_queue_236 ;
   u32 data_size ;
   u32 op_count ;
   u32 rsvd_1 ;
   u32 rsvd_2 ;
   u32 read_addr ;
   union __anonunion_2048 __anonCompField_netxen_minidump_entry_queue_238 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_2078 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_2078 __anonCompField_ip_ra_chain_244 ;
   struct callback_head rcu ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2098 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2100 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2152 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
typedef enum irqreturn irqreturn_t;
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hdr.h"
struct netxen_legacy_intr_set {
   uint32_t int_vec_bit ;
   uint32_t tgt_status_reg ;
   uint32_t tgt_mask_reg ;
   uint32_t pci_int_reg ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct nx_ip_list {
   struct list_head list ;
   __be32 ip_addr ;
   bool master ;
};
#line 1802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_brdinfo {
   int brdtype ;
   long ports ;
   char short_name[32U] ;
};
#line 1808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct netxen_dimm_cfg {
   u8 presence ;
   u8 mem_type ;
   u8 dimm_type ;
   u32 size ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct in_ifaddr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[32U] ;
   unsigned long state[1U] ;
};
#line 25 
struct ip_mc_list;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   refcount_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned long mr_qi ;
   unsigned long mr_qri ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __u32 ifa_rt_priority ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
union __anonunion___u_3146 {
   struct in_device *__val ;
   char __c[1U] ;
};
#line 3261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3150 {
   struct in_ifaddr *__val ;
   char __c[1U] ;
};
#line 3261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3152 {
   struct in_ifaddr *__val ;
   char __c[1U] ;
};
#line 3332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3154 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 3332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3156 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 3367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3158 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 3367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3160 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 3412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3162 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 3412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
union __anonunion___u_3164 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3177 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3179 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3181 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.h"
typedef u32 netxen_ctx_msg;
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct uni_table_desc {
   uint32_t findex ;
   uint32_t num_entries ;
   uint32_t entry_size ;
   uint32_t reserved[5U] ;
};
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct uni_data_desc {
   uint32_t findex ;
   uint32_t size ;
   uint32_t reserved[5U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_4140 {
   u64 hdr ;
   u64 body[7U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
union __anonunion_4139 {
   struct __anonstruct_4140 __anonCompField___anonunion_4139_191 ;
   u64 words[8U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
struct __anonstruct_nx_fw_msg_t_4138 {
   union __anonunion_4139 __anonCompField___anonstruct_nx_fw_msg_t_4138_192 ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
typedef struct __anonstruct_nx_fw_msg_t_4138 nx_fw_msg_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
struct crb_addr_pair {
   u32 addr ;
   u32 data ;
};
#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
typedef int ldv_func_ret_type;
#line 888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
typedef int ldv_func_ret_type_0;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
struct netxen_nic_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7000 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_7000 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7001 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_7001 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7017 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_7017 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_7021 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_7021 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7022 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7023 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_7022 __anonCompField_media_link_90 ;
   union __anonunion_7023 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_7025 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_7024 {
   struct __anonstruct_dev_7025 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_7024 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_7039 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_7040 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_7038 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_7039 i2c ;
   struct __anonstruct_custom_7040 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_7038 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_7941 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_7941 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_2_16 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 {
   struct device *arg0 ;
   struct device_attribute *arg1 ;
   int signal_pending ;
};
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_netxen_get_intr_coalesce_17 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_netxen_driver_18 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_write(void *p, unsigned int size)
{
  #line 40 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_write((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 443  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ctx.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  #line 20 
  return dma_alloc_coherent(& hwdev->dev,size,dma_handle,2592U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  #line 34 
  dma_free_coherent(& hwdev->dev,size,vaddr,dma_handle);
  #line 35 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
char netxen_nic_driver_name[11U];
#line 1687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_query_phy(struct netxen_adapter *adapter, u32 reg, u32 *val);
#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_set_phy(struct netxen_adapter *adapter, u32 reg, u32 val);
#line 1699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1699 
int netxen_pcie_sem_lock(struct netxen_adapter *adapter, int sem, u32 id_reg);
#line 1700 
#line 1700 
void netxen_pcie_sem_unlock(struct netxen_adapter *adapter, int sem);
#line 1755 
#line 1755 
void *netxen_get_ioaddr(struct netxen_adapter *adapter, u32 offset);
#line 1757 
#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int netxen_alloc_hw_resources(struct netxen_adapter *adapter);
#line 1758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
void netxen_free_hw_resources(struct netxen_adapter *adapter);
#line 1780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_set_gbe_port(struct netxen_adapter *adapter, u32 speed, u32 duplex, u32 autoneg);
#line 1782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_set_mtu(struct netxen_adapter *adapter, int mtu);
#line 1787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int netxen_setup_minidump(struct netxen_adapter *adapter);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static u32 netxen_poll_rsp(struct netxen_adapter *adapter)
{
  #line 16 
  u32 rsp = 1U;
  #line 17 
  int timeout = 0;
  #line 19 
  while (1) {
    #line 21 
    msleep(1U);
    #line 23 
    timeout ++;
    #line 23 
    if (timeout > 4000) 
                        #line 24 
                        return 3U;
    #line 26 
    rsp = (*(adapter->crb_read))(adapter,136323608UL);
    #line 27 
    if (! ((rsp & 2147483648U) != 0U)) 
                                       #line 19 
                                       break;
  }
  #line 29 
  return rsp;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static u32 netxen_issue_cmd(struct netxen_adapter *adapter, struct netxen_cmd_args *cmd)
{
  #line 35 
  u32 rsp;
  #line 36 
  u32 signature = 0U;
  #line 37 
  u32 rcode = 0U;
  #line 39 
  signature = (unsigned int)((int)adapter->ahw.pci_func | -889323264);
  #line 42 
  if (netxen_pcie_sem_lock(adapter,5,0U) != 0) 
                                               #line 43 
                                               return 17U;
  #line 45 
  (*(adapter->crb_write))(adapter,136323624UL,signature);
  #line 47 
  (*(adapter->crb_write))(adapter,136323612UL,cmd->req.arg1);
  #line 49 
  (*(adapter->crb_write))(adapter,136323616UL,cmd->req.arg2);
  #line 51 
  (*(adapter->crb_write))(adapter,136323620UL,cmd->req.arg3);
  #line 53 
  (*(adapter->crb_write))(adapter,136323608UL,cmd->req.cmd | 2147483648U);
  #line 55 
  rsp = netxen_poll_rsp(adapter);
  #line 57 
  if (rsp == 3U) {
    #line 58 
    printk((char *)"\001",(char *)(& netxen_nic_driver_name));
    #line 61 
    rcode = 17U;
  }
  else 
    #line 62 
    if (rsp == 2U) {
      #line 63 
      rcode = (*(adapter->crb_read))(adapter,136323612UL);
      #line 65 
      printk((char *)"\001",(char *)(& netxen_nic_driver_name),rcode);
    }
    else 
      #line 67 
      if (rsp == 1U) {
        #line 68 
        cmd->rsp.cmd = 0U;
        #line 69 
        if (cmd->rsp.arg2 != 0U) 
                                 #line 70 
                                 cmd->rsp.arg2 = (*(adapter->crb_read))(adapter,136323616UL);
        #line 71 
        if (cmd->rsp.arg3 != 0U) 
                                 #line 72 
                                 cmd->rsp.arg3 = (*(adapter->crb_read))(adapter,136323620UL);
      }
  #line 75 
  if (cmd->rsp.arg1 != 0U) 
                           #line 76 
                           cmd->rsp.arg1 = (*(adapter->crb_read))(adapter,136323612UL);
  #line 78 
  netxen_pcie_sem_unlock(adapter,5);
  #line 80 
  return rcode;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static int netxen_get_minidump_template_size(struct netxen_adapter *adapter)
{
  #line 86 
  struct netxen_cmd_args cmd;
  #line 87 
  memset((void *)(& cmd),0,32UL);
  #line 88 
  cmd.req.cmd = 47U;
  #line 89 
  memset((void *)(& cmd.rsp),1,16UL);
  #line 90 
  netxen_issue_cmd(adapter,& cmd);
  #line 91 
  if (cmd.rsp.cmd != 0U) {
    #line 92 
    _dev_info(& (adapter->pdev)->dev,(char *)"Can\'t get template size %d\n",cmd.rsp.cmd);
    #line 94 
    return -5;
  }
  #line 96 
  adapter->mdump.md_template_size = cmd.rsp.arg2;
  #line 97 
  adapter->mdump.md_template_ver = cmd.rsp.arg3;
  #line 98 
  return 0;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static int netxen_get_minidump_template(struct netxen_adapter *adapter)
{
  #line 104 
  dma_addr_t md_template_addr;
  #line 105 
  void *addr;
  #line 106 
  u32 size;
  #line 107 
  struct netxen_cmd_args cmd;
  #line 108 
  size = adapter->mdump.md_template_size;
  #line 110 
  if (size == 0U) {
    #line 111 
    _dev_err(& (adapter->pdev)->dev,(char *)"Can not capture Minidump ");
    #line 113 
    return 6;
  }
  #line 116 
  addr = pci_alloc_consistent(adapter->pdev,(unsigned long)size,& md_template_addr);
  #line 117 
  if (addr == (void *)0) {
    #line 118 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to allocate dmable memory for template.\n");
    #line 119 
    return -12;
  }
  #line 122 
  memset((void *)(& cmd),0,32UL);
  #line 123 
  memset((void *)(& cmd.rsp),1,16UL);
  #line 124 
  cmd.req.cmd = 48U;
  #line 125 
  cmd.req.arg1 = (unsigned int)md_template_addr;
  #line 126 
  cmd.req.arg2 = (unsigned int)(md_template_addr >> 32);
  #line 127 
  cmd.req.arg3 |= size;
  #line 128 
  netxen_issue_cmd(adapter,& cmd);
  #line 130 
  if (cmd.rsp.cmd == 0U && cmd.rsp.arg2 == size) 
                                                 #line 131 
                                                 memcpy(adapter->mdump.md_template,addr,(unsigned long)size); else 
                                                                    #line 133 
                                                                    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to get minidump template, err_code : %d, requested_size : %d, actual_size : %d\n",cmd.rsp.cmd,size,cmd.rsp.arg2);
  #line 136 
  pci_free_consistent(adapter->pdev,(unsigned long)size,addr,md_template_addr);
  #line 137 
  return 0;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static u32 netxen_check_template_checksum(struct netxen_adapter *adapter)
{
  #line 143 
  u64 sum = 0ULL;
  #line 144 
  u32 *buff = (u32 *)adapter->mdump.md_template;
  #line 145 
  int count = (int)(adapter->mdump.md_template_size / 4U);
  #line 147 
  while (1) {
    #line 147 
    int tmp_0;
    #line 148 
    u32 *tmp;
    #line 147 
    tmp_0 = count;
    #line 147 
    count --;
    #line 147 
    ;
    #line 147 
    if (! (tmp_0 > 0)) 
                       #line 147 
                       break;
    #line 148 
    tmp = buff;
    #line 148 
    buff ++;
    #line 148 
    sum = (unsigned long long)*tmp + sum;
  }
  #line 149 
  while (sum >> 32 != 0ULL) 
                            #line 150 
                            sum = (sum & 4294967295ULL) + (sum >> 32);
  #line 152 
  return ~ ((unsigned int)sum);
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int netxen_setup_minidump(struct netxen_adapter *adapter)
{
  #line 158 
  int i;
  #line 159 
  u32 *template;
  #line 159 
  u32 *tmp_buf;
  #line 158 
  int err = 0;
  #line 160 
  err = netxen_get_minidump_template_size(adapter);
  #line 161 
  if (err != 0) {
    #line 162 
    adapter->mdump.fw_supports_md = (unsigned char)0U;
    #line 163 
    if ((unsigned int)err + 4294967281U <= 1U) 
                                               #line 165 
                                               _dev_info(& (adapter->pdev)->dev,(char *)"Flashed firmware version does not support minidump, minimum version required is [ %u.%u.%u ]\n",4,0,579);
    #line 170 
    return err;
  }
  #line 173 
  if (adapter->mdump.md_template_size == 0U) {
    #line 174 
    _dev_err(& (adapter->pdev)->dev,(char *)"Error : Invalid template size ");
    #line 176 
    return -5;
  }
  #line 178 
  adapter->mdump.md_template = kmalloc((unsigned long)adapter->mdump.md_template_size,3264U);
  #line 181 
  if (adapter->mdump.md_template == (void *)0) 
                                               #line 182 
                                               return -12;
  #line 184 
  err = netxen_get_minidump_template(adapter);
  #line 185 
  if (err != 0) {
    #line 186 
    if (err == 15) 
                   #line 187 
                   adapter->mdump.fw_supports_md = (unsigned char)0U;
    #line 188 
    goto free_template;
  }
  #line 191 
  if (netxen_check_template_checksum(adapter) != 0U) {
    #line 192 
    _dev_err(& (adapter->pdev)->dev,(char *)"Minidump template checksum Error\n");
    #line 193 
    err = -5;
    #line 194 
    goto free_template;
  }
  #line 197 
  adapter->mdump.md_capture_mask = (unsigned char)31U;
  #line 198 
  tmp_buf = (u32 *)adapter->mdump.md_template;
  #line 199 
  template = (u32 *)adapter->mdump.md_template;
  #line 200 
  i = 0;
  #line 200 
  while ((unsigned long)i < (unsigned long)(adapter->mdump.md_template_size / 4U)) {
    #line 201 
    u32 *tmp_0;
    #line 201 
    u32 *tmp_1;
    #line 201 
    tmp_0 = template;
    #line 201 
    template ++;
    #line 201 
    tmp_1 = tmp_buf;
    #line 201 
    tmp_buf ++;
    #line 201 
    *tmp_0 = *tmp_1;
    #line 200 
    i ++;
  }
  #line 202 
  adapter->mdump.md_capture_buff = (void *)0;
  #line 203 
  adapter->mdump.fw_supports_md = (unsigned char)1U;
  #line 204 
  adapter->mdump.md_enabled = (unsigned char)0U;
  #line 206 
  return err;
  #line 208 
  free_template: 
                 #line 208 
  ;
  #line 209 
  kfree(adapter->mdump.md_template);
  #line 210 
  adapter->mdump.md_template = (void *)0;
  #line 211 
  return err;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_set_mtu(struct netxen_adapter *adapter, int mtu)
{
  #line 220 
  struct netxen_cmd_args cmd;
  #line 218 
  u32 rcode = 0U;
  #line 219 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 222 
  memset((void *)(& cmd),0,32UL);
  #line 223 
  cmd.req.cmd = 18U;
  #line 224 
  cmd.req.arg1 = (unsigned int)recv_ctx->context_id;
  #line 225 
  cmd.req.arg2 = (unsigned int)mtu;
  #line 226 
  cmd.req.arg3 = 0U;
  #line 228 
  if (recv_ctx->state == 2U) 
                             #line 229 
                             rcode = netxen_issue_cmd(adapter,& cmd);
  #line 231 
  if (rcode != 0U) 
                   #line 232 
                   return -5;
  #line 234 
  return 0;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_set_gbe_port(struct netxen_adapter *adapter, u32 speed, u32 duplex, u32 autoneg)
{
  #line 241 
  struct netxen_cmd_args cmd;
  #line 243 
  memset((void *)(& cmd),0,32UL);
  #line 244 
  cmd.req.cmd = 31U;
  #line 245 
  cmd.req.arg1 = speed;
  #line 246 
  cmd.req.arg2 = duplex;
  #line 247 
  cmd.req.arg3 = autoneg;
  #line 248 
  return (int)netxen_issue_cmd(adapter,& cmd);
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static int nx_fw_cmd_create_rx_ctx(struct netxen_adapter *adapter)
{
  #line 254 
  void *addr;
  #line 255 
  nx_hostrq_rx_ctx_t *prq;
  #line 256 
  nx_cardrsp_rx_ctx_t *prsp;
  #line 257 
  nx_hostrq_rds_ring_t *prq_rds;
  #line 258 
  nx_hostrq_sds_ring_t *prq_sds;
  #line 259 
  nx_cardrsp_rds_ring_t *prsp_rds;
  #line 260 
  nx_cardrsp_sds_ring_t *prsp_sds;
  #line 261 
  struct nx_host_rds_ring *rds_ring;
  #line 262 
  struct nx_host_sds_ring *sds_ring;
  #line 263 
  struct netxen_cmd_args cmd;
  #line 265 
  dma_addr_t hostrq_phys_addr;
  #line 265 
  dma_addr_t cardrsp_phys_addr;
  #line 266 
  u64 phys_addr;
  #line 268 
  int i;
  #line 268 
  int nrds_rings;
  #line 268 
  int nsds_rings;
  #line 269 
  size_t rq_size;
  #line 269 
  size_t rsp_size;
  #line 270 
  u32 cap;
  #line 270 
  u32 reg;
  #line 270 
  u32 val;
  #line 272 
  int err;
  #line 274 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 276 
  nrds_rings = (int)adapter->max_rds_rings;
  #line 277 
  nsds_rings = (int)adapter->max_sds_rings;
  #line 279 
  rq_size = ((unsigned long)nrds_rings * 24UL + (unsigned long)nsds_rings * 16UL) + 176UL;
  #line 281 
  rsp_size = (((unsigned long)nrds_rings + (unsigned long)nsds_rings) + 19UL) * 8UL;
  #line 284 
  addr = pci_alloc_consistent(adapter->pdev,rq_size,& hostrq_phys_addr);
  #line 286 
  if (addr == (void *)0) 
                         #line 287 
                         return -12;
  #line 288 
  prq = (nx_hostrq_rx_ctx_t *)addr;
  #line 290 
  addr = pci_alloc_consistent(adapter->pdev,rsp_size,& cardrsp_phys_addr);
  #line 292 
  if (addr == (void *)0) {
    #line 293 
    err = -12;
    #line 294 
    goto out_free_rq;
  }
  #line 296 
  prsp = (nx_cardrsp_rx_ctx_t *)addr;
  #line 298 
  prq->host_rsp_dma_addr = cardrsp_phys_addr;
  #line 300 
  cap = 5U;
  #line 301 
  cap |= 384U;
  #line 303 
  if ((adapter->flags & 128U) != 0U) 
                                     #line 304 
                                     cap |= 2097152U;
  #line 306 
  prq->capabilities[0] = cap;
  #line 307 
  prq->host_int_crb_mode = 1U;
  #line 309 
  prq->host_rds_crb_mode = 0U;
  #line 312 
  prq->num_rds_rings = (unsigned short)nrds_rings;
  #line 313 
  prq->num_sds_rings = (unsigned short)nsds_rings;
  #line 314 
  prq->rds_ring_offset = 0U;
  #line 316 
  val = prq->rds_ring_offset + (unsigned int)((unsigned long)nrds_rings) * 24U;
  #line 318 
  prq->sds_ring_offset = val;
  #line 320 
  prq_rds = (nx_hostrq_rds_ring_t *)((char *)(& prq->data) + (unsigned long)prq->rds_ring_offset);
  #line 323 
  i = 0;
  #line 323 
  while (i < nrds_rings) {
    #line 325 
    rds_ring = recv_ctx->rds_rings + (unsigned long)i;
    #line 327 
    (prq_rds + (unsigned long)i)->host_phys_addr = rds_ring->phys_addr;
    #line 328 
    (prq_rds + (unsigned long)i)->ring_size = rds_ring->num_desc;
    #line 329 
    (prq_rds + (unsigned long)i)->ring_kind = (unsigned int)i;
    #line 330 
    (prq_rds + (unsigned long)i)->buff_size = (unsigned long long)rds_ring->dma_size;
    #line 323 
    i ++;
  }
  #line 333 
  prq_sds = (nx_hostrq_sds_ring_t *)((char *)(& prq->data) + (unsigned long)prq->sds_ring_offset);
  #line 336 
  i = 0;
  #line 336 
  while (i < nsds_rings) {
    #line 338 
    sds_ring = recv_ctx->sds_rings + (unsigned long)i;
    #line 340 
    (prq_sds + (unsigned long)i)->host_phys_addr = sds_ring->phys_addr;
    #line 341 
    (prq_sds + (unsigned long)i)->ring_size = sds_ring->num_desc;
    #line 342 
    (prq_sds + (unsigned long)i)->msi_index = (unsigned short)i;
    #line 336 
    i ++;
  }
  #line 345 
  phys_addr = hostrq_phys_addr;
  #line 346 
  memset((void *)(& cmd),0,32UL);
  #line 347 
  cmd.req.arg1 = (unsigned int)(phys_addr >> 32);
  #line 348 
  cmd.req.arg2 = (unsigned int)phys_addr;
  #line 349 
  cmd.req.arg3 = (unsigned int)rq_size;
  #line 350 
  cmd.req.cmd = 7U;
  #line 351 
  err = (int)netxen_issue_cmd(adapter,& cmd);
  #line 352 
  if (err != 0) {
    #line 353 
    printk((char *)"\001",err);
    #line 355 
    goto out_free_rsp;
  }
  #line 359 
  prsp_rds = (nx_cardrsp_rds_ring_t *)(& prsp->data[prsp->rds_ring_offset]);
  #line 362 
  i = 0;
  #line 362 
  while ((int)prsp->num_rds_rings > i) {
    #line 363 
    rds_ring = recv_ctx->rds_rings + (unsigned long)i;
    #line 365 
    reg = (prsp_rds + (unsigned long)i)->host_producer_crb;
    #line 366 
    rds_ring->crb_rcv_producer = netxen_get_ioaddr(adapter,reg + 136323072U);
    #line 362 
    i ++;
  }
  #line 370 
  prsp_sds = (nx_cardrsp_sds_ring_t *)(& prsp->data[prsp->sds_ring_offset]);
  #line 373 
  i = 0;
  #line 373 
  while ((int)prsp->num_sds_rings > i) {
    #line 374 
    sds_ring = recv_ctx->sds_rings + (unsigned long)i;
    #line 376 
    reg = (prsp_sds + (unsigned long)i)->host_consumer_crb;
    #line 377 
    sds_ring->crb_sts_consumer = netxen_get_ioaddr(adapter,reg + 136323072U);
    #line 380 
    reg = (prsp_sds + (unsigned long)i)->interrupt_crb;
    #line 381 
    sds_ring->crb_intr_mask = netxen_get_ioaddr(adapter,reg + 136323072U);
    #line 373 
    i ++;
  }
  #line 385 
  recv_ctx->state = prsp->host_ctx_state;
  #line 386 
  recv_ctx->context_id = prsp->context_id;
  #line 387 
  recv_ctx->virt_port = (unsigned short)prsp->virt_port;
  #line 389 
  out_free_rsp: 
                #line 389 
  ;
  #line 390 
  pci_free_consistent(adapter->pdev,rsp_size,(void *)prsp,cardrsp_phys_addr);
  #line 391 
  out_free_rq: 
               #line 391 
  ;
  #line 392 
  pci_free_consistent(adapter->pdev,rq_size,(void *)prq,hostrq_phys_addr);
  #line 393 
  return err;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static void nx_fw_cmd_destroy_rx_ctx(struct netxen_adapter *adapter)
{
  #line 400 
  struct netxen_cmd_args cmd;
  #line 399 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 402 
  memset((void *)(& cmd),0,32UL);
  #line 403 
  cmd.req.arg1 = (unsigned int)recv_ctx->context_id;
  #line 404 
  cmd.req.arg2 = 0U;
  #line 405 
  cmd.req.arg3 = 0U;
  #line 406 
  cmd.req.cmd = 8U;
  #line 408 
  if (netxen_issue_cmd(adapter,& cmd) != 0U) 
                                             #line 409 
                                             printk((char *)"\001",(char *)(& netxen_nic_driver_name));
  #line 412 
  return;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static int nx_fw_cmd_create_tx_ctx(struct netxen_adapter *adapter)
{
  #line 418 
  nx_hostrq_tx_ctx_t *prq;
  #line 419 
  nx_hostrq_cds_ring_t *prq_cds;
  #line 420 
  nx_cardrsp_tx_ctx_t *prsp;
  #line 421 
  void *rq_addr;
  #line 421 
  void *rsp_addr;
  #line 422 
  size_t rq_size;
  #line 422 
  size_t rsp_size;
  #line 423 
  u32 temp;
  #line 425 
  u64 offset;
  #line 425 
  u64 phys_addr;
  #line 426 
  dma_addr_t rq_phys_addr;
  #line 426 
  dma_addr_t rsp_phys_addr;
  #line 429 
  struct netxen_cmd_args cmd;
  #line 424 
  int err = 0;
  #line 427 
  struct nx_host_tx_ring *tx_ring = adapter->tx_ring;
  #line 428 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 431 
  rq_size = 200UL;
  #line 432 
  rq_addr = pci_alloc_consistent(adapter->pdev,rq_size,& rq_phys_addr);
  #line 434 
  if (rq_addr == (void *)0) 
                            #line 435 
                            return -12;
  #line 437 
  rsp_size = 144UL;
  #line 438 
  rsp_addr = pci_alloc_consistent(adapter->pdev,rsp_size,& rsp_phys_addr);
  #line 440 
  if (rsp_addr == (void *)0) {
    #line 441 
    err = -12;
    #line 442 
    goto out_free_rq;
  }
  #line 445 
  prq = (nx_hostrq_tx_ctx_t *)rq_addr;
  #line 447 
  prsp = (nx_cardrsp_tx_ctx_t *)rsp_addr;
  #line 449 
  prq->host_rsp_dma_addr = rsp_phys_addr;
  #line 451 
  temp = 69U;
  #line 452 
  prq->capabilities[0] = temp;
  #line 454 
  prq->host_int_crb_mode = 1U;
  #line 457 
  prq->interrupt_ctl = (unsigned short)0U;
  #line 458 
  prq->msi_index = (unsigned short)0U;
  #line 460 
  prq->dummy_dma_addr = adapter->dummy_dma.phys_addr;
  #line 462 
  offset = recv_ctx->phys_addr + 192ULL;
  #line 463 
  prq->cmd_cons_dma_addr = offset;
  #line 465 
  prq_cds = & prq->cds_ring;
  #line 467 
  prq_cds->host_phys_addr = tx_ring->phys_addr;
  #line 468 
  prq_cds->ring_size = tx_ring->num_desc;
  #line 470 
  phys_addr = rq_phys_addr;
  #line 471 
  memset((void *)(& cmd),0,32UL);
  #line 472 
  cmd.req.arg1 = (unsigned int)(phys_addr >> 32);
  #line 473 
  cmd.req.arg2 = (unsigned int)phys_addr;
  #line 474 
  cmd.req.arg3 = (unsigned int)rq_size;
  #line 475 
  cmd.req.cmd = 9U;
  #line 476 
  err = (int)netxen_issue_cmd(adapter,& cmd);
  #line 478 
  if (err == 0) {
    #line 479 
    temp = prsp->cds_ring.host_producer_crb;
    #line 480 
    tx_ring->crb_cmd_producer = netxen_get_ioaddr(adapter,temp + 136323072U);
    #line 486 
    adapter->tx_context_id = prsp->context_id;
  }
  else {
    #line 489 
    printk((char *)"\001",err);
    #line 491 
    err = -5;
  }
  #line 494 
  pci_free_consistent(adapter->pdev,rsp_size,rsp_addr,rsp_phys_addr);
  #line 496 
  out_free_rq: 
               #line 496 
  ;
  #line 497 
  pci_free_consistent(adapter->pdev,rq_size,rq_addr,rq_phys_addr);
  #line 499 
  return err;
}

#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static void nx_fw_cmd_destroy_tx_ctx(struct netxen_adapter *adapter)
{
  #line 505 
  struct netxen_cmd_args cmd;
  #line 507 
  memset((void *)(& cmd),0,32UL);
  #line 508 
  cmd.req.arg1 = (unsigned int)adapter->tx_context_id;
  #line 509 
  cmd.req.arg2 = 0U;
  #line 510 
  cmd.req.arg3 = 0U;
  #line 511 
  cmd.req.cmd = 10U;
  #line 512 
  if (netxen_issue_cmd(adapter,& cmd) != 0U) 
                                             #line 513 
                                             printk((char *)"\001",(char *)(& netxen_nic_driver_name));
  #line 516 
  return;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_query_phy(struct netxen_adapter *adapter, u32 reg, u32 *val)
{
  #line 522 
  u32 rcode;
  #line 523 
  struct netxen_cmd_args cmd;
  #line 525 
  memset((void *)(& cmd),0,32UL);
  #line 526 
  cmd.req.arg1 = reg;
  #line 527 
  cmd.req.arg2 = 0U;
  #line 528 
  cmd.req.arg3 = 0U;
  #line 529 
  cmd.req.cmd = 19U;
  #line 530 
  cmd.rsp.arg1 = 1U;
  #line 531 
  rcode = netxen_issue_cmd(adapter,& cmd);
  #line 532 
  if (rcode != 0U) 
                   #line 533 
                   return -5;
  #line 535 
  if (val == (u32 *)0U) 
                        #line 536 
                        return -5;
  #line 538 
  *val = cmd.rsp.arg1;
  #line 539 
  return 0;
}

#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int nx_fw_cmd_set_phy(struct netxen_adapter *adapter, u32 reg, u32 val)
{
  #line 545 
  u32 rcode;
  #line 546 
  struct netxen_cmd_args cmd;
  #line 548 
  memset((void *)(& cmd),0,32UL);
  #line 549 
  cmd.req.arg1 = reg;
  #line 550 
  cmd.req.arg2 = val;
  #line 551 
  cmd.req.arg3 = 0U;
  #line 552 
  cmd.req.cmd = 20U;
  #line 553 
  rcode = netxen_issue_cmd(adapter,& cmd);
  #line 554 
  if (rcode != 0U) 
                   #line 555 
                   return -5;
  #line 557 
  return 0;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static u64 ctx_addr_sig_regs[4U][3U] = {{136323976ULL, 136323980ULL, 136324032ULL}, {136323984ULL, 136323988ULL, 136324036ULL}, {136323992ULL, 136323996ULL, 136324040ULL}, {136324000ULL, 136324004ULL, 136324044ULL}};
#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static struct netxen_recv_crb recv_crb_registers[4U] = {{.crb_rcv_producer = {136323840U, 136323856U, 136323872U}, .crb_sts_consumer = {136323896U, 136324864U, 136324868U, 136324872U}, .sw_int_mask = {136324056U, 136324932U, 136324936U, 136324940U}}, {.crb_rcv_producer = {136323908U, 136323924U, 136323940U}, .crb_sts_consumer = {136323964U, 136324896U, 136324900U, 136324904U}, .sw_int_mask = {136324064U, 136324964U, 136324968U, 136324972U}}, {.crb_rcv_producer = {136324056U, 136324088U, 136324104U}, .crb_sts_consumer = {136324128U, 136324924U, 136324924U, 136324924U}, .sw_int_mask = {136324068U, 136324924U, 136324924U, 136324924U}}, {.crb_rcv_producer = {136324140U, 136324156U, 136324172U}, .crb_sts_consumer = {136324196U, 136324924U, 136324924U, 136324924U}, .sw_int_mask = {136324072U, 136324924U, 136324924U, 136324924U}}};
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
static int netxen_init_old_ctx(struct netxen_adapter *adapter)
{
  #line 680 
  struct netxen_recv_context *recv_ctx;
  #line 681 
  struct nx_host_rds_ring *rds_ring;
  #line 682 
  struct nx_host_sds_ring *sds_ring;
  #line 683 
  struct nx_host_tx_ring *tx_ring;
  #line 684 
  int ring;
  #line 686 
  struct netxen_ring_ctx *hwctx;
  #line 687 
  u32 signature;
  #line 685 
  int port = (int)adapter->portnum;
  #line 689 
  tx_ring = adapter->tx_ring;
  #line 690 
  recv_ctx = & adapter->recv_ctx;
  #line 691 
  hwctx = recv_ctx->hwctx;
  #line 693 
  hwctx->cmd_ring_addr = tx_ring->phys_addr;
  #line 694 
  hwctx->cmd_ring_size = tx_ring->num_desc;
  #line 697 
  ring = 0;
  #line 697 
  while ((int)adapter->max_rds_rings > ring) {
    #line 698 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 700 
    hwctx->rcv_rings[ring].addr = rds_ring->phys_addr;
    #line 702 
    hwctx->rcv_rings[ring].size = rds_ring->num_desc;
    #line 697 
    ring ++;
  }
  #line 706 
  ring = 0;
  #line 706 
  while ((int)adapter->max_sds_rings > ring) {
    #line 707 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 709 
    if (ring == 0) {
      #line 710 
      hwctx->sts_ring_addr = sds_ring->phys_addr;
      #line 711 
      hwctx->sts_ring_size = sds_ring->num_desc;
    }
    #line 713 
    hwctx->sts_rings[ring].addr = sds_ring->phys_addr;
    #line 714 
    hwctx->sts_rings[ring].size = sds_ring->num_desc;
    #line 715 
    hwctx->sts_rings[ring].msi_index = (unsigned short)ring;
    #line 706 
    ring ++;
  }
  #line 717 
  hwctx->sts_ring_count = (unsigned int)adapter->max_sds_rings;
  #line 719 
  if ((unsigned int)adapter->max_sds_rings > 1U) 
                                                 #line 719 
                                                 signature = 188128U; else 
                                                                    #line 719 
                                                                    signature = 57056U;
  #line 722 
  (*(adapter->crb_write))(adapter,(unsigned long)ctx_addr_sig_regs[port][0],(unsigned int)recv_ctx->phys_addr);
  #line 724 
  (*(adapter->crb_write))(adapter,(unsigned long)ctx_addr_sig_regs[port][2],(unsigned int)(recv_ctx->phys_addr >> 32));
  #line 726 
  (*(adapter->crb_write))(adapter,(unsigned long)ctx_addr_sig_regs[port][1],signature | (unsigned int)port);
  #line 728 
  return 0;
}

#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
int netxen_alloc_hw_resources(struct netxen_adapter *adapter)
{
  #line 733 
  void *addr;
  #line 735 
  int ring;
  #line 736 
  struct netxen_recv_context *recv_ctx;
  #line 737 
  struct nx_host_rds_ring *rds_ring;
  #line 738 
  struct nx_host_sds_ring *sds_ring;
  #line 739 
  struct nx_host_tx_ring *tx_ring;
  #line 734 
  int err = 0;
  #line 741 
  struct pci_dev *pdev = adapter->pdev;
  #line 742 
  struct net_device *netdev = adapter->netdev;
  #line 743 
  int port = (int)adapter->portnum;
  #line 745 
  recv_ctx = & adapter->recv_ctx;
  #line 746 
  tx_ring = adapter->tx_ring;
  #line 748 
  addr = pci_alloc_consistent(pdev,196UL,& recv_ctx->phys_addr);
  #line 751 
  if (addr == (void *)0) {
    #line 752 
    _dev_err(& pdev->dev,(char *)"failed to allocate hw context\n");
    #line 753 
    return -12;
  }
  #line 756 
  recv_ctx->hwctx = (struct netxen_ring_ctx *)addr;
  #line 757 
  (recv_ctx->hwctx)->ctx_id = (unsigned int)port;
  #line 758 
  (recv_ctx->hwctx)->cmd_consumer_offset = recv_ctx->phys_addr + 192ULL;
  #line 761 
  tx_ring->hw_consumer = (__le32 *)((char *)addr + 192UL);
  #line 765 
  addr = pci_alloc_consistent(pdev,(unsigned long)tx_ring->num_desc * 64UL,& tx_ring->phys_addr);
  #line 768 
  if (addr == (void *)0) {
    #line 769 
    _dev_err(& pdev->dev,(char *)"%s: failed to allocate tx desc ring\n",(char *)(& netdev->name));
    #line 771 
    err = -12;
    #line 772 
    goto err_out_free;
  }
  #line 775 
  tx_ring->desc_head = (struct cmd_desc_type0 *)addr;
  #line 777 
  ring = 0;
  #line 777 
  while ((int)adapter->max_rds_rings > ring) {
    #line 778 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 779 
    addr = pci_alloc_consistent(adapter->pdev,(unsigned long)rds_ring->num_desc * 16UL,& rds_ring->phys_addr);
    #line 782 
    if (addr == (void *)0) {
      #line 783 
      _dev_err(& pdev->dev,(char *)"%s: failed to allocate rds ring [%d]\n",(char *)(& netdev->name),ring);
      #line 786 
      err = -12;
      #line 787 
      goto err_out_free;
    }
    #line 789 
    rds_ring->desc_head = (struct rcv_desc *)addr;
    #line 791 
    if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                       #line 792 
                                                       rds_ring->crb_rcv_producer = netxen_get_ioaddr(adapter,recv_crb_registers[port].crb_rcv_producer[ring]);
    #line 777 
    ring ++;
  }
  #line 797 
  ring = 0;
  #line 797 
  while ((int)adapter->max_sds_rings > ring) {
    #line 798 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 800 
    addr = pci_alloc_consistent(adapter->pdev,(unsigned long)sds_ring->num_desc * 16UL,& sds_ring->phys_addr);
    #line 803 
    if (addr == (void *)0) {
      #line 804 
      _dev_err(& pdev->dev,(char *)"%s: failed to allocate sds ring [%d]\n",(char *)(& netdev->name),ring);
      #line 807 
      err = -12;
      #line 808 
      goto err_out_free;
    }
    #line 810 
    sds_ring->desc_head = (struct status_desc *)addr;
    #line 812 
    if ((unsigned int)adapter->ahw.revision_id <= 37U) {
      #line 813 
      sds_ring->crb_sts_consumer = netxen_get_ioaddr(adapter,recv_crb_registers[port].crb_sts_consumer[ring]);
      #line 817 
      sds_ring->crb_intr_mask = netxen_get_ioaddr(adapter,recv_crb_registers[port].sw_int_mask[ring]);
    }
    #line 797 
    ring ++;
  }
  #line 824 
  if ((unsigned int)adapter->ahw.revision_id > 37U) {
    #line 825 
    if ((int)test_and_set_bit(0L,& adapter->state) != 0) 
                                                         #line 826 
                                                         goto done;
    #line 827 
    err = nx_fw_cmd_create_rx_ctx(adapter);
    #line 828 
    if (err != 0) 
                  #line 829 
                  goto err_out_free;
    #line 830 
    err = nx_fw_cmd_create_tx_ctx(adapter);
    #line 831 
    if (err != 0) 
                  #line 832 
                  goto err_out_free;
  }
  else {
    #line 834 
    err = netxen_init_old_ctx(adapter);
    #line 835 
    if (err != 0) 
                  #line 836 
                  goto err_out_free;
  }
  #line 839 
  done: 
        #line 839 
  ;
  #line 840 
  return 0;
  #line 842 
  err_out_free: 
                #line 842 
  ;
  #line 843 
  netxen_free_hw_resources(adapter);
  #line 844 
  return err;
}

#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ctx.c"
void netxen_free_hw_resources(struct netxen_adapter *adapter)
{
  #line 849 
  struct netxen_recv_context *recv_ctx;
  #line 850 
  struct nx_host_rds_ring *rds_ring;
  #line 851 
  struct nx_host_sds_ring *sds_ring;
  #line 852 
  struct nx_host_tx_ring *tx_ring;
  #line 853 
  int ring;
  #line 855 
  int port = (int)adapter->portnum;
  #line 857 
  if ((unsigned int)adapter->ahw.revision_id > 37U) {
    #line 858 
    if (! test_and_set_bit(0L,& adapter->state)) 
                                                 #line 859 
                                                 goto done;
    #line 861 
    nx_fw_cmd_destroy_rx_ctx(adapter);
    #line 862 
    nx_fw_cmd_destroy_tx_ctx(adapter);
  }
  else {
    #line 864 
    netxen_pcie_sem_lock(adapter,5,0U);
    #line 865 
    (*(adapter->crb_write))(adapter,(unsigned long)ctx_addr_sig_regs[port][1],(unsigned int)(port | 44224));
    #line 867 
    netxen_pcie_sem_unlock(adapter,5);
  }
  #line 871 
  msleep(20U);
  #line 873 
  done: 
        #line 873 
  ;
  #line 874 
  recv_ctx = & adapter->recv_ctx;
  #line 876 
  if (recv_ctx->hwctx != (struct netxen_ring_ctx *)0) {
    #line 877 
    pci_free_consistent(adapter->pdev,196UL,(void *)recv_ctx->hwctx,recv_ctx->phys_addr);
    #line 882 
    recv_ctx->hwctx = (struct netxen_ring_ctx *)0;
  }
  #line 885 
  tx_ring = adapter->tx_ring;
  #line 886 
  if (tx_ring->desc_head != (struct cmd_desc_type0 *)0) {
    #line 887 
    pci_free_consistent(adapter->pdev,(unsigned long)tx_ring->num_desc * 64UL,(void *)tx_ring->desc_head,tx_ring->phys_addr);
    #line 890 
    tx_ring->desc_head = (struct cmd_desc_type0 *)0;
  }
  #line 893 
  ring = 0;
  #line 893 
  while ((int)adapter->max_rds_rings > ring) {
    #line 894 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 896 
    if (rds_ring->desc_head != (struct rcv_desc *)0) {
      #line 897 
      pci_free_consistent(adapter->pdev,(unsigned long)rds_ring->num_desc * 16UL,(void *)rds_ring->desc_head,rds_ring->phys_addr);
      #line 901 
      rds_ring->desc_head = (struct rcv_desc *)0;
    }
    #line 893 
    ring ++;
  }
  #line 905 
  ring = 0;
  #line 905 
  while ((int)adapter->max_sds_rings > ring) {
    #line 906 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 908 
    if (sds_ring->desc_head != (struct status_desc *)0) {
      #line 909 
      pci_free_consistent(adapter->pdev,(unsigned long)sds_ring->num_desc * 16UL,(void *)sds_ring->desc_head,sds_ring->phys_addr);
      #line 913 
      sds_ring->desc_head = (struct status_desc *)0;
    }
    #line 905 
    ring ++;
  }
  #line 916 
  return;
}

#line 443  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ctx.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 446 
  return ldv_kmalloc(size,flags);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_write((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 183 
int __printk_ratelimit(char *);
#line 204 
#line 204 
void dump_stack(void);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1038 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1040 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list, struct list_head *head)
{
  #line 213 
  __list_del_entry(list);
  #line 214 
  list_add_tail(list,head);
  #line 215 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_1042 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_splice(struct list_head *list, struct list_head *prev, struct list_head *next)
{
  #line 405 
  struct list_head *first = list->next;
  #line 406 
  struct list_head *last = list->prev;
  #line 408 
  first->prev = prev;
  #line 409 
  prev->next = first;
  #line 411 
  last->next = next;
  #line 412 
  next->prev = last;
  #line 413 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_splice_tail_init(struct list_head *list, struct list_head *head)
{
  #line 466 
  if (list_empty(list) == 0) {
    #line 467 
    __list_splice(list,head->prev,head);
    #line 468 
    INIT_LIST_HEAD(list);
  }
  #line 470 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock_api_smp.h"
#line 18 
void _raw_read_lock(rwlock_t *);
#line 26 
#line 26 
unsigned long _raw_write_lock_irqsave(rwlock_t *);
#line 30 
#line 30 
void _raw_read_unlock(rwlock_t *);
#line 40 
#line 40 
void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_lock_mem_lock_of_netxen_hardware_context(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 548  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_lock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_unlock_mem_lock_of_netxen_hardware_context(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 588  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_unlock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_vfree(void *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 52 
time64_t ktime_get_seconds(void);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock_bh(struct netdev_queue *txq)
{
  #line 3954 
  int pscr_ret__;
  #line 3953 
  cif_spin_lock_bh__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3954 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 3954 
    void *__vpp_verify = (void *)0;
    #line 3954 
    void *tmp = __vpp_verify;
  }
  #line 3954 
  switch (4UL) {
    #line 3954 
    int pfo_ret___1;
    #line 3954 
    int pfo_ret___2;
    #line 3954 
    int pfo_ret__;
    #line 3954 
    int pfo_ret___0;
    #line 3954 
    case (unsigned long)1: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret__;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)2: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___0;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)4: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___1;
    #line 3954 
    break;
    #line 3954 
    case (unsigned long)8: 
                           #line 3954 
    ;
    #line 3954 
    switch (4UL) {
      #line 3954 
      case (unsigned long)1: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)2: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)4: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      case (unsigned long)8: 
                             #line 3954 
      ;
      #line 3955 
      ldv_inline_asm();
      #line 3954 
      break;
      #line 3954 
      default: 
               #line 3954 
      ;
      #line 3954 
      __bad_percpu_size();
    }
    #line 3954 
    pscr_ret__ = pfo_ret___2;
    #line 3954 
    break;
    #line 3954 
    default: 
             #line 3954 
    ;
    #line 3954 
    __bad_size_call_parameter();
    #line 3954 
    break;
  }
  #line 3954 
  txq->xmit_lock_owner = pscr_ret__;
  #line 3957 
  return;
}

#line 3971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
  #line 3973 
  txq->xmit_lock_owner = -1;
  #line 3974 
  cif_spin_unlock_bh__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3975 
  return;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.h"
#line 1847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_nic_set_link_parameters(struct netxen_adapter *adapter);
#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_nic_get_board_info(struct netxen_adapter *adapter);
#line 1724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_nic_wol_supported(struct netxen_adapter *adapter);
#line 1738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1738 
int netxen_rom_fast_read(struct netxen_adapter *adapter, int addr, int *valp);
#line 1754 
#line 1729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_setup_hwops(struct netxen_adapter *adapter);
#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_p3_free_mac_list(struct netxen_adapter *adapter);
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_intr_coalesce(struct netxen_adapter *adapter);
#line 1773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_rss(struct netxen_adapter *adapter, int enable);
#line 1774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_ipaddr(struct netxen_adapter *adapter, __be32 ip, int cmd);
#line 1775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_linkevent_request(struct netxen_adapter *adapter, int enable);
#line 1777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_pci_camqm_read_2M(struct netxen_adapter *adapter, u64 off, u64 *data);
#line 1778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_pci_camqm_write_2M(struct netxen_adapter *adapter, u64 off, u64 data);
#line 1783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_nic_change_mtu(struct net_device *netdev, int mtu);
#line 1784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_hw_lro(struct netxen_adapter *adapter, int enable);
#line 1785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_bridged_mode(struct netxen_adapter *adapter, int enable);
#line 1786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_send_lro_cleanup(struct netxen_adapter *adapter);
#line 1788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 2498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_dump_fw(struct netxen_adapter *adapter);
#line 1789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1789 
void netxen_nic_update_cmd_producer(struct netxen_adapter *adapter, struct nx_host_tx_ring *tx_ring);
#line 1858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
__inline static u32 netxen_tx_avail(struct nx_host_tx_ring *tx_ring)
{
  #line 1861 
  u32 tmp;
  #line 1860 
  ldv_inline_asm();
  #line 1861 
  if (tx_ring->producer < tx_ring->sw_consumer) 
                                                #line 1861 
                                                tmp = tx_ring->sw_consumer - tx_ring->producer; else 
                                                                    #line 1861 
                                                                    tmp = (tx_ring->sw_consumer + tx_ring->num_desc) - tx_ring->producer;
  #line 1861 
  return tmp;
}

#line 1866 
#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_get_flash_mac_addr(struct netxen_adapter *adapter, u64 *mac);
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_p3_get_mac_addr(struct netxen_adapter *adapter, u64 *mac);
#line 28 
#line 1281 
static void netxen_nic_io_write_128M(struct netxen_adapter *adapter, void *addr, u32 data);
#line 30 
#line 1289 
static u32 netxen_nic_io_read_128M(struct netxen_adapter *adapter, void *addr);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void *pci_base_offset(struct netxen_adapter *adapter, unsigned long off)
{
  #line 43 
  if (off <= 1048575UL) 
                        #line 44 
                        return adapter->ahw.pci_base0 + off;
  #line 46 
  if (off + 18446744073608888320UL <= 9158655UL) 
                                                 #line 47 
                                                 return adapter->ahw.pci_base1 + (off + 18446744073608888320U);
  #line 49 
  if (off + 18446744073591177216UL <= 15843327UL) 
                                                  #line 50 
                                                  return adapter->ahw.pci_base2 + (off + 18446744073591177216U);
  #line 52 
  return (void *)0;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static crb_128M_2M_block_map_t crb_128M_2M_map[64U] = {[1] = {.sub_block = {{.valid = 1U, .start_128M = 1048576U, .end_128M = 1056768U, .start_2M = 1179648U}, {.valid = 1U, .start_128M = 1114112U, .end_128M = 1179648U, .start_2M = 1245184U}, {.valid = 1U, .start_128M = 1179648U, .end_128M = 1187840U, .start_2M = 1196032U}, {.valid = 1U, .start_128M = 1245184U, .end_128M = 1253376U, .start_2M = 1204224U}, {.valid = 1U, .start_128M = 1310720U, .end_128M = 1318912U, .start_2M = 1212416U}, {.valid = 1U, .start_128M = 1376256U, .end_128M = 1384448U, .start_2M = 1220608U}, {.valid = 1U, .start_128M = 1441792U, .end_128M = 1507328U, .start_2M = 1114112U}, {.valid = 1U, .start_128M = 1507328U, .end_128M = 1515520U, .start_2M = 1236992U}, [14] = {.valid = 1U, .start_128M = 1966080U, .end_128M = 1968128U, .start_2M = 1187840U}}}, {.sub_block = {{.valid = 1U, .start_128M = 2097152U, .end_128M = 2162688U, .start_2M = 1572864U}}}, [4] = {.sub_block = {{.valid = 1U, .start_128M = 4194304U, .end_128M = 4198400U, .start_2M = 1478656U}}}, {.sub_block = {{.valid = 1U, .start_128M = 5242880U, .end_128M = 5308416U, .start_2M = 1310720U}}}, {.sub_block = {{.valid = 1U, .start_128M = 6291456U, .end_128M = 6356992U, .start_2M = 1835008U}}}, {.sub_block = {{.valid = 1U, .start_128M = 7340032U, .end_128M = 7356416U, .start_2M = 1802240U}}}, {.sub_block = {{.valid = 1U, .start_128M = 8388608U, .end_128M = 8396800U, .start_2M = 1507328U}, [15] = {.valid = 1U, .start_128M = 9371648U, .end_128M = 9379840U, .start_2M = 1515520U}}}, {.sub_block = {{.valid = 1U, .start_128M = 9437184U, .end_128M = 9445376U, .start_2M = 1523712U}, [15] = {.valid = 1U, .start_128M = 10420224U, .end_128M = 10428416U, .start_2M = 1531904U}}}, {.sub_block = {{.start_128M = 10485760U, .end_128M = 10493952U, .start_2M = 1540096U}, [15] = {.valid = 1U, .start_128M = 11468800U, .end_128M = 11476992U, .start_2M = 1548288U}}}, {.sub_block = {{.start_128M = 11534336U, .end_128M = 11542528U, .start_2M = 1556480U}, [15] = {.valid = 1U, .start_128M = 12517376U, .end_128M = 12525568U, .start_2M = 1564672U}}}, {.sub_block = {{.valid = 1U, .start_128M = 12582912U, .end_128M = 12599296U, .start_2M = 1916928U}}}, {.sub_block = {{.valid = 1U, .start_128M = 13631488U, .end_128M = 13647872U, .start_2M = 1720320U}}}, {.sub_block = {{.valid = 1U, .start_128M = 14680064U, .end_128M = 14696448U, .start_2M = 1703936U}}}, {.sub_block = {{.valid = 1U, .start_128M = 15728640U, .end_128M = 15732736U, .start_2M = 1458176U}}}, {.sub_block = {{.start_128M = 16777216U, .end_128M = 16793600U, .start_2M = 1736704U}}}, {.sub_block = {{.valid = 1U, .start_128M = 17825792U, .end_128M = 17829888U, .start_2M = 1441792U}}}, {.sub_block = {{.valid = 1U, .start_128M = 18874368U, .end_128M = 18878464U, .start_2M = 1445888U}}}, {.sub_block = {{.valid = 1U, .start_128M = 19922944U, .end_128M = 19927040U, .start_2M = 1449984U}}}, {.sub_block = {{.valid = 1U, .start_128M = 20971520U, .end_128M = 20975616U, .start_2M = 1454080U}}}, {.sub_block = {{.valid = 1U, .start_128M = 22020096U, .end_128M = 22024192U, .start_2M = 1462272U}}}, {.sub_block = {{.valid = 1U, .start_128M = 23068672U, .end_128M = 23072768U, .start_2M = 1466368U}}}, [29] = {.sub_block = {{.valid = 1U, .start_128M = 30408704U, .end_128M = 30474240U, .start_2M = 1638400U}}}, {.sub_block = {{.valid = 1U, .start_128M = 31457280U, .end_128M = 31461376U, .start_2M = 1482752U}}}, {.sub_block = {{.valid = 1U, .start_128M = 32505856U, .end_128M = 32571392U, .start_2M = 1376256U}}}, [33] = {.sub_block = {{.valid = 1U, .start_128M = 34603008U, .end_128M = 34611200U, .start_2M = 1179648U}, {.valid = 1U, .start_128M = 34668544U, .end_128M = 34734080U, .start_2M = 1245184U}, {.valid = 1U, .start_128M = 34734080U, .end_128M = 34742272U, .start_2M = 1196032U}, {.valid = 1U, .start_128M = 34799616U, .end_128M = 34807808U, .start_2M = 1204224U}, {.valid = 1U, .start_128M = 34865152U, .end_128M = 34873344U, .start_2M = 1212416U}, {.valid = 1U, .start_128M = 34930688U, .end_128M = 34938880U, .start_2M = 1220608U}, {.valid = 1U, .start_128M = 34996224U, .end_128M = 35061760U, .start_2M = 1114112U}, {.valid = 1U, .start_128M = 35061760U, .end_128M = 35069952U, .start_2M = 1236992U}}}, {.sub_block = {{.valid = 1U, .start_128M = 35651584U, .end_128M = 35667968U, .start_2M = 1769472U}}}, [40] = {.sub_block = {{.valid = 1U, .start_128M = 41943040U, .end_128M = 41959424U, .start_2M = 1720320U}}}, {.sub_block = {{.valid = 1U, .start_128M = 42991616U, .end_128M = 42995712U, .start_2M = 1486848U}}}, {.sub_block = {{.valid = 1U, .start_128M = 44040192U, .end_128M = 44041216U, .start_2M = 1754112U}}}, {.sub_block = {{.valid = 1U, .start_128M = 45088768U, .end_128M = 45089792U, .start_2M = 1755136U}}}, {.sub_block = {{.valid = 1U, .start_128M = 46137344U, .end_128M = 46138368U, .start_2M = 1756160U}}}, {.sub_block = {{.valid = 1U, .start_128M = 47185920U, .end_128M = 47186944U, .start_2M = 1757184U}}}, {.sub_block = {{.valid = 1U, .start_128M = 48234496U, .end_128M = 48235520U, .start_2M = 1758208U}}}, {.sub_block = {{.valid = 1U, .start_128M = 49283072U, .end_128M = 49284096U, .start_2M = 1759232U}}}, {.sub_block = {{.valid = 1U, .start_128M = 50331648U, .end_128M = 50332672U, .start_2M = 1760256U}}}, {.sub_block = {{.start_128M = 51380224U, .end_128M = 51396608U, .start_2M = 1736704U}}}, {.sub_block = {{.valid = 1U, .start_128M = 52428800U, .end_128M = 52445184U, .start_2M = 1916928U}}}, {.sub_block = {{.valid = 1U, .start_128M = 53477376U, .end_128M = 53493760U, .start_2M = 1703936U}}}, [53] = {.sub_block = {{.valid = 1U, .start_128M = 55574528U, .end_128M = 55575552U, .start_2M = 1753088U}}}, {.sub_block = {{.valid = 1U, .start_128M = 56623104U, .end_128M = 56624128U, .start_2M = 1761280U}}}, {.sub_block = {{.valid = 1U, .start_128M = 57671680U, .end_128M = 57672704U, .start_2M = 1762304U}}}, {.sub_block = {{.valid = 1U, .start_128M = 58720256U, .end_128M = 58736640U, .start_2M = 1900544U}}}, {.sub_block = {{.valid = 1U, .start_128M = 59768832U, .end_128M = 59785216U, .start_2M = 1785856U}}}, {.sub_block = {{.valid = 1U, .start_128M = 60817408U, .end_128M = 60833792U, .start_2M = 1933312U}}}, [61] = {.sub_block = {{.valid = 1U, .start_128M = 63963136U, .end_128M = 63979520U, .start_2M = 1933312U}}}, {.sub_block = {{.valid = 1U, .start_128M = 65011712U, .end_128M = 65015808U, .start_2M = 1470464U}}}, {.sub_block = {{.valid = 1U, .start_128M = 66060288U, .end_128M = 66064384U, .start_2M = 1474560U}}}};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static unsigned int crb_hub_agt[64U] = {[1] = 1907U, 661U, 677U, [5] = 208U, 433U, 230U, 224U, 225U, 226U, 227U, 1056U, 1047U, 1057U, 843U, 1029U, 832U, 833U, 834U, 835U, 837U, 836U, 960U, 961U, 962U, 963U, [28] = 964U, 1040U, [31] = 209U, [33] = 1907U, 1046U, [40] = 1047U, [42] = 137U, 1802U, 1803U, 1804U, 141U, 142U, 1807U, 1029U, 1056U, 1057U, [53] = 136U, 145U, 1810U, 1030U, [58] = 1816U, 409U, 425U, [62] = 838U};
#line 290 
#line 1837 
static int netxen_nic_set_mtu_xgb(struct netxen_adapter *adapter, int new_mtu);
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_pcie_sem_lock(struct netxen_adapter *adapter, int sem, u32 id_reg)
{
  #line 295 
  int done = 0;
  #line 295 
  int timeout = 0;
  #line 297 
  while (done == 0) {
    #line 298 
    done = (int)(*(adapter->crb_read))(adapter,
                             (unsigned long)((sem + 14336) * 8) + 101711872UL);
    #line 299 
    if (done == 1) 
                   #line 300 
                   break;
    #line 301 
    timeout ++;
    #line 301 
    if (timeout > 9999) 
                        #line 302 
                        return -5;
    #line 303 
    msleep(1U);
  }
  #line 306 
  if (id_reg != 0U) 
                    #line 307 
                    (*(adapter->crb_write))(adapter,(unsigned long)id_reg,(unsigned int)adapter->portnum);
  #line 309 
  return 0;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_pcie_sem_unlock(struct netxen_adapter *adapter, int sem)
{
  #line 315 
  (*(adapter->crb_read))(adapter,(unsigned long)(sem * 8 + 114692) + 101711872UL);
  #line 316 
  return;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_niu_xg_init_port(struct netxen_adapter *adapter, int port)
{
  #line 320 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 321 
    (*(adapter->crb_write))(adapter,(unsigned long)(port * 65536) + 107413508UL,5191U);
    #line 322 
    (*(adapter->crb_write))(adapter,(unsigned long)(port * 65536) + 107413504UL,5U);
  }
  #line 325 
  return 0;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_niu_disable_xg_port(struct netxen_adapter *adapter)
{
  #line 331 
  __u32 mac_cfg;
  #line 332 
  u32 port = (unsigned int)adapter->physical_port;
  #line 334 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 335 
                                                    return 0;
  #line 337 
  if (port > 1U) 
                 #line 338 
                 return -22;
  #line 340 
  mac_cfg = 0U;
  #line 341 
  if ((*(adapter->crb_write))(adapter,
                              (unsigned long)(port * 65536U) + 107413504UL,
                              mac_cfg) != 0) 
    #line 343 
    return -5;
  #line 344 
  return 0;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_p2_nic_set_promisc(struct netxen_adapter *adapter, u32 mode)
{
  #line 358 
  u32 mac_cfg;
  #line 359 
  u32 cnt = 0U;
  #line 360 
  __u32 reg = 512U;
  #line 361 
  u32 port = (unsigned int)adapter->physical_port;
  #line 362 
  u16 board_type = adapter->ahw.board_type;
  #line 364 
  if (port > 1U) 
                 #line 365 
                 return -22;
  #line 367 
  mac_cfg = (*(adapter->crb_read))(adapter,(unsigned long)(port * 65536U) + 107413504UL);
  #line 368 
  mac_cfg &= 4294967291U;
  #line 369 
  (*(adapter->crb_write))(adapter,(unsigned long)(port * 65536U) + 107413504UL,mac_cfg);
  #line 371 
  if ((unsigned int)board_type + 65523U <= 1U) 
                                               #line 373 
                                               reg = (unsigned int)(32 << port);
  #line 375 
  (*(adapter->crb_write))(adapter,106954924UL,reg);
  {
    #line 377 
    unsigned long __ms = 10UL;
    #line 377 
    while (1) {
      #line 377 
      unsigned long tmp;
      #line 377 
      tmp = __ms;
      #line 377 
      __ms --;
      #line 377 
      ;
      #line 377 
      if (! (tmp != 0UL)) 
                          #line 377 
                          break;
      #line 377 
      __const_udelay(4295000UL);
    }
  }
  #line 379 
  while (1) {
    #line 379 
    if ((*(adapter->crb_read))(adapter,106954928UL) != 0U) {
      #line 379 
      cnt ++;
      #line 379 
      if (! (cnt <= 19U)) 
                          #line 379 
                          break;
    }
    else 
         #line 379 
         break;
    {
      #line 380 
      unsigned long __ms_0 = 10UL;
      #line 380 
      while (1) {
        #line 380 
        unsigned long tmp_0;
        #line 380 
        tmp_0 = __ms_0;
        #line 380 
        __ms_0 --;
        #line 380 
        ;
        #line 380 
        if (! (tmp_0 != 0UL)) 
                              #line 380 
                              break;
        #line 380 
        __const_udelay(4295000UL);
      }
    }
  }
  #line 382 
  if (cnt <= 19U) {
    #line 384 
    reg = (*(adapter->crb_read))(adapter,(unsigned long)(port * 65536U) + 107413508UL);
    #line 387 
    if (mode == 1U) 
                    #line 388 
                    reg |= 8192U; else 
                                       #line 390 
                                       reg &= 4294959103U;
    #line 392 
    if (mode == 2U) 
                    #line 393 
                    reg |= 4096U; else 
                                       #line 395 
                                       reg &= 4294963199U;
    #line 397 
    (*(adapter->crb_write))(adapter,(unsigned long)(port * 65536U) + 107413508UL,reg);
  }
  #line 401 
  mac_cfg |= 4U;
  #line 402 
  (*(adapter->crb_write))(adapter,(unsigned long)(port * 65536U) + 107413504UL,mac_cfg);
  #line 404 
  return 0;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_p2_nic_set_mac_addr(struct netxen_adapter *adapter, u8 *addr)
{
  #line 409 
  u32 mac_hi;
  #line 409 
  u32 mac_lo;
  #line 410 
  u32 reg_hi;
  #line 410 
  u32 reg_lo;
  #line 412 
  u8 phy = adapter->physical_port;
  #line 414 
  if ((unsigned int)phy > 1U) 
                              #line 415 
                              return -22;
  #line 417 
  mac_lo = ((unsigned int)*addr << 16) | ((unsigned int)*(addr + 1U) << 24);
  #line 418 
  mac_hi = (((unsigned int)*(addr + 2U) | ((unsigned int)*(addr + 3U) << 8)) | ((unsigned int)*(addr + 4U) << 16)) | ((unsigned int)*(addr + 5U) << 24);
  #line 421 
  reg_lo = (unsigned int)((int)phy * 65536) + 107413520U;
  #line 422 
  reg_hi = (unsigned int)((int)phy * 65536) + 107413516U;
  #line 425 
  if ((*(adapter->crb_write))(adapter,(unsigned long)reg_lo,mac_lo) != 0) 
    #line 426 
    return -5;
  else {
    #line 425 
    if ((*(adapter->crb_write))(adapter,(unsigned long)reg_hi,mac_hi) != 0) 
      #line 426 
      return -5;
  }
  #line 427 
  if ((*(adapter->crb_write))(adapter,(unsigned long)reg_lo,mac_lo) != 0) 
    #line 428 
    return -5;
  else {
    #line 427 
    if ((*(adapter->crb_write))(adapter,(unsigned long)reg_hi,mac_hi) != 0) 
      #line 428 
      return -5;
  }
  #line 430 
  return 0;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_enable_mcast_filter(struct netxen_adapter *adapter)
{
  #line 436 
  u32 val = 0U;
  #line 437 
  u16 port = (unsigned short)adapter->physical_port;
  #line 438 
  u8 *addr = (u8 *)(& adapter->mac_addr);
  #line 440 
  if ((unsigned int)adapter->mc_enabled != 0U) 
                                               #line 441 
                                               return 0;
  #line 443 
  val = (*(adapter->crb_read))(adapter,106958848UL);
  #line 444 
  val = (unsigned int)(1UL << ((int)port + 28)) | val;
  #line 445 
  (*(adapter->crb_write))(adapter,106958848UL,val);
  #line 448 
  val = 16777215U;
  #line 449 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958976UL,val);
  #line 450 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958980UL,val);
  #line 453 
  val = (unsigned int)((((int)*(addr + 2U) << 16) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 454 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958984UL,val);
  #line 455 
  val = (unsigned int)((((int)*(addr + 5U) << 16) | ((int)*(addr + 4U) << 8)) | (int)*(addr + 3U));
  #line 456 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958988UL,val);
  #line 458 
  adapter->mc_enabled = (unsigned char)1U;
  #line 459 
  return 0;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_disable_mcast_filter(struct netxen_adapter *adapter)
{
  #line 465 
  u32 val = 0U;
  #line 466 
  u16 port = (unsigned short)adapter->physical_port;
  #line 467 
  u8 *addr = (u8 *)(& adapter->mac_addr);
  #line 469 
  if ((unsigned int)adapter->mc_enabled == 0U) 
                                               #line 470 
                                               return 0;
  #line 472 
  val = (*(adapter->crb_read))(adapter,106958848UL);
  #line 473 
  val = ~ ((unsigned int)(1UL << ((int)port + 28))) & val;
  #line 474 
  (*(adapter->crb_write))(adapter,106958848UL,val);
  #line 476 
  val = (unsigned int)((((int)*(addr + 2U) << 16) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 477 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958976UL,val);
  #line 478 
  val = (unsigned int)((((int)*(addr + 5U) << 16) | ((int)*(addr + 4U) << 8)) | (int)*(addr + 3U));
  #line 479 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958980UL,val);
  #line 481 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958984UL,0U);
  #line 482 
  (*(adapter->crb_write))(adapter,(unsigned long)((int)port * 32) + 106958988UL,0U);
  #line 484 
  adapter->mc_enabled = (unsigned char)0U;
  #line 485 
  return 0;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_set_mcast_addr(struct netxen_adapter *adapter, int index, u8 *addr)
{
  #line 492 
  u32 hi = 0U;
  #line 492 
  u32 lo = 0U;
  #line 493 
  u16 port = (unsigned short)adapter->physical_port;
  #line 495 
  lo = (unsigned int)((((int)*(addr + 5U) << 16) | ((int)*(addr + 4U) << 8)) | (int)*(addr + 3U));
  #line 496 
  hi = (unsigned int)((((int)*(addr + 2U) << 16) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 498 
  (*(adapter->crb_write))(adapter,((unsigned long)((int)port * 128) + (unsigned long)(index * 8)) + 106959104UL,hi);
  #line 499 
  (*(adapter->crb_write))(adapter,((unsigned long)((int)port * 128) + (unsigned long)(index * 8)) + 106959108UL,lo);
  #line 501 
  return 0;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void netxen_p2_nic_set_multi(struct net_device *netdev)
{
  #line 541 
  void *__mptr;
  #line 507 
  struct netdev_hw_addr *ha;
  #line 508 
  u8 null_addr[6U];
  #line 509 
  int i;
  #line 506 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 511 
  eth_zero_addr((u8 *)(& null_addr));
  #line 513 
  if ((netdev->flags & 256U) != 0U) {
    #line 515 
    (*(adapter->set_promisc))(adapter,1U);
    #line 519 
    netxen_nic_disable_mcast_filter(adapter);
    #line 521 
    return;
  }
  #line 524 
  if (netdev->mc.count == 0) {
    #line 525 
    (*(adapter->set_promisc))(adapter,0U);
    #line 527 
    netxen_nic_disable_mcast_filter(adapter);
    #line 528 
    return;
  }
  #line 531 
  (*(adapter->set_promisc))(adapter,2U);
  #line 532 
  if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)adapter->max_mc_count) {
    #line 534 
    netxen_nic_disable_mcast_filter(adapter);
    #line 535 
    return;
  }
  #line 538 
  netxen_nic_enable_mcast_filter(adapter);
  #line 540 
  i = 0;
  #line 541 
  __mptr = (void *)netdev->mc.list.next;
  #line 541 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 541 
  while (& ha->list != & netdev->mc.list) {
    #line 541 
    void *__mptr_0;
    #line 542 
    int tmp_2;
    #line 542 
    ;
    #line 542 
    tmp_2 = i;
    #line 542 
    i ++;
    #line 542 
    ;
    #line 542 
    ;
    #line 542 
    netxen_nic_set_mcast_addr(adapter,tmp_2,(u8 *)(& ha->addr));
    #line 541 
    __mptr_0 = (void *)ha->list.next;
    #line 541 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 545 
  while ((int)adapter->max_mc_count > i) {
    #line 546 
    int tmp_3;
    #line 546 
    tmp_3 = i;
    #line 546 
    i ++;
    #line 546 
    ;
    #line 546 
    ;
    #line 546 
    netxen_nic_set_mcast_addr(adapter,tmp_3,(u8 *)(& null_addr));
  }
  #line 547 
  return;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_send_cmd_descs(struct netxen_adapter *adapter, struct cmd_desc_type0 *cmd_desc_arr, int nr_desc)
{
  #line 553 
  u32 i;
  #line 553 
  u32 producer;
  #line 554 
  struct netxen_cmd_buffer *pbuf;
  #line 555 
  struct nx_host_tx_ring *tx_ring;
  #line 557 
  i = 0U;
  #line 559 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 560 
                                            return -5;
  #line 562 
  tx_ring = adapter->tx_ring;
  #line 563 
  __netif_tx_lock_bh(tx_ring->txq);
  #line 565 
  producer = tx_ring->producer;
  #line 567 
  ;
  #line 567 
  if (netxen_tx_avail(tx_ring) <= (unsigned int)nr_desc) {
    #line 568 
    netif_tx_stop_queue(tx_ring->txq);
    #line 569 
    ldv_inline_asm();
    #line 570 
    ;
    #line 570 
    if (netxen_tx_avail(tx_ring) > (unsigned int)nr_desc) {
      #line 571 
      if (netxen_tx_avail(tx_ring) > 10U) 
                                          #line 572 
                                          netif_tx_wake_queue(tx_ring->txq);
    }
    else {
      #line 574 
      __netif_tx_unlock_bh(tx_ring->txq);
      #line 575 
      return -16;
    }
  }
  #line 579 
  while (1) {
    #line 580 
    pbuf = tx_ring->cmd_buf_arr + (unsigned long)producer;
    #line 581 
    pbuf->skb = (struct sk_buff *)0;
    #line 582 
    pbuf->frag_count = 0U;
    #line 584 
    memcpy((void *)(tx_ring->desc_head + (unsigned long)producer),(void *)(cmd_desc_arr + (unsigned long)i),64UL);
    #line 587 
    producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    #line 588 
    i ++;
    #line 589 
    if (! (i != (unsigned int)nr_desc)) 
                                        #line 579 
                                        break;
  }
  #line 592 
  tx_ring->producer = producer;
  #line 594 
  netxen_nic_update_cmd_producer(adapter,tx_ring);
  #line 596 
  __netif_tx_unlock_bh(tx_ring->txq);
  #line 598 
  return 0;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int nx_p3_sre_macaddr_change(struct netxen_adapter *adapter, u8 *addr, unsigned int op)
{
  #line 604 
  nx_nic_req_t req;
  #line 605 
  nx_mac_req_t *mac_req;
  #line 606 
  u64 word;
  #line 608 
  memset((void *)(& req),0,64UL);
  #line 609 
  req.qhdr = 167772160ULL;
  #line 611 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  #line 612 
  req.req_hdr = word;
  #line 614 
  mac_req = (nx_mac_req_t *)(& req.words[0]);
  #line 615 
  mac_req->op = (unsigned char)op;
  #line 616 
  memcpy((void *)(& mac_req->mac_addr),(void *)addr,6UL);
  #line 618 
  return netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
}

#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int nx_p3_nic_add_mac(struct netxen_adapter *adapter, u8 *addr, struct list_head *del_list)
{
  #line 624 
  struct list_head *head;
  #line 625 
  nx_mac_list_t *cur;
  #line 628 
  head = del_list->next;
  #line 628 
  while (head != del_list) {
    {
      #line 629 
      void *__mptr;
      #line 629 
      __mptr = (void *)head;
      #line 629 
      cur = ((nx_mac_list_t *)__mptr);
      #line 631 
      if ((int)ether_addr_equal(addr,(u8 *)(& cur->mac_addr)) != 0) {
        #line 632 
        list_move_tail(head,& adapter->mac_list);
        #line 633 
        return 0;
      }
    }
    #line 628 
    head = head->next;
  }
  #line 637 
  cur = (nx_mac_list_t *)kzalloc(24UL,2592U);
  #line 638 
  if (cur == (nx_mac_list_t *)0) 
                                 #line 639 
                                 return -12;
  #line 641 
  memcpy((void *)(& cur->mac_addr),(void *)addr,6UL);
  #line 642 
  list_add_tail(& cur->list,& adapter->mac_list);
  #line 643 
  return nx_p3_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),1U);
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void netxen_p3_nic_set_multi(struct net_device *netdev)
{
  #line 650 
  struct netdev_hw_addr *ha;
  #line 656 
  struct list_head *head;
  #line 657 
  nx_mac_list_t *cur;
  #line 649 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 651 
  u8 bcast_addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 654 
  u32 mode = 0U;
  #line 655 
  struct list_head del_list = {.next = & del_list, .prev = & del_list};
  #line 659 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 660 
                                            return;
  #line 662 
  list_splice_tail_init(& adapter->mac_list,& del_list);
  #line 664 
  nx_p3_nic_add_mac(adapter,(u8 *)(& adapter->mac_addr),& del_list);
  #line 665 
  nx_p3_nic_add_mac(adapter,(u8 *)(& bcast_addr),& del_list);
  #line 667 
  if ((netdev->flags & 256U) != 0U) {
    #line 668 
    mode = 1U;
    #line 669 
    goto send_fw_cmd;
  }
  #line 672 
  if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)adapter->max_mc_count) {
    #line 674 
    mode = 2U;
    #line 675 
    goto send_fw_cmd;
  }
  #line 678 
  if (netdev->mc.count != 0) {
    #line 679 
    void *__mptr;
    #line 679 
    __mptr = (void *)netdev->mc.list.next;
    #line 679 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 679 
    while (& ha->list != & netdev->mc.list) {
      #line 679 
      void *__mptr_0;
      #line 680 
      nx_p3_nic_add_mac(adapter,(u8 *)(& ha->addr),& del_list);
      #line 679 
      __mptr_0 = (void *)ha->list.next;
      #line 679 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  #line 683 
  send_fw_cmd: 
               #line 683 
  ;
  #line 684 
  (*(adapter->set_promisc))(adapter,mode);
  #line 685 
  head = & del_list;
  #line 686 
  while (1) {
    #line 686 
    if (! (list_empty(head) == 0)) 
                                   #line 686 
                                   break;
    {
      #line 687 
      void *__mptr_1;
      #line 687 
      __mptr_1 = (void *)head->next;
      #line 687 
      cur = ((nx_mac_list_t *)__mptr_1);
      #line 689 
      nx_p3_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),2U);
      #line 691 
      list_del(& cur->list);
      #line 692 
      kfree((void *)cur);
    }
  }
  #line 694 
  return;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_p3_nic_set_promisc(struct netxen_adapter *adapter, u32 mode)
{
  #line 698 
  nx_nic_req_t req;
  #line 699 
  u64 word;
  #line 701 
  memset((void *)(& req),0,64UL);
  #line 703 
  req.qhdr = 159383552ULL;
  #line 705 
  word = ((unsigned long long)adapter->portnum << 16) | 12ULL;
  #line 707 
  req.req_hdr = word;
  #line 709 
  req.words[0] = (unsigned long long)mode;
  #line 711 
  return netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_p3_free_mac_list(struct netxen_adapter *adapter)
{
  #line 717 
  nx_mac_list_t *cur;
  #line 718 
  struct list_head *head = & adapter->mac_list;
  #line 720 
  while (1) {
    #line 720 
    if (! (list_empty(head) == 0)) 
                                   #line 720 
                                   break;
    {
      #line 721 
      void *__mptr;
      #line 721 
      __mptr = (void *)head->next;
      #line 721 
      cur = ((nx_mac_list_t *)__mptr);
      #line 722 
      nx_p3_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),2U);
      #line 724 
      list_del(& cur->list);
      #line 725 
      kfree((void *)cur);
    }
  }
  #line 727 
  return;
}

#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_p3_nic_set_mac_addr(struct netxen_adapter *adapter, u8 *addr)
{
  #line 732 
  netxen_p3_nic_set_multi(adapter->netdev);
  #line 733 
  return 0;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_intr_coalesce(struct netxen_adapter *adapter)
{
  #line 743 
  nx_nic_req_t req;
  #line 744 
  u64 word[6U];
  #line 745 
  int rv;
  #line 745 
  int i;
  #line 747 
  memset((void *)(& req),0,64UL);
  #line 748 
  memset((void *)(& word),0,48UL);
  #line 750 
  req.qhdr = 159383552ULL;
  #line 752 
  word[0] = ((unsigned long long)adapter->portnum << 16) | 3ULL;
  #line 753 
  req.req_hdr = word[0];
  #line 755 
  memcpy((void *)(word),(void *)(& adapter->coal),48UL);
  #line 756 
  i = 0;
  #line 756 
  while (i <= 5) {
    #line 757 
    req.words[i] = word[i];
    #line 756 
    i ++;
  }
  #line 759 
  rv = netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 760 
  if (rv != 0) 
               #line 761 
               printk((char *)"\001");
  #line 765 
  return rv;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_hw_lro(struct netxen_adapter *adapter, int enable)
{
  #line 770 
  nx_nic_req_t req;
  #line 771 
  u64 word;
  #line 772 
  int rv = 0;
  #line 774 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 775 
                                       return 0;
  #line 777 
  memset((void *)(& req),0,64UL);
  #line 779 
  req.qhdr = 159383552ULL;
  #line 781 
  word = ((unsigned long long)adapter->portnum << 16) | 24ULL;
  #line 782 
  req.req_hdr = word;
  #line 784 
  req.words[0] = (unsigned long long)enable;
  #line 786 
  rv = netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 787 
  if (rv != 0) 
               #line 788 
               printk((char *)"\001");
  #line 792 
  return rv;
}

#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_bridged_mode(struct netxen_adapter *adapter, int enable)
{
  #line 797 
  nx_nic_req_t req;
  #line 798 
  u64 word;
  #line 799 
  int rv = 0;
  #line 801 
  if (((adapter->flags & 16U) != 0U) == enable) 
                                                #line 802 
                                                return rv;
  #line 804 
  memset((void *)(& req),0,64UL);
  #line 806 
  req.qhdr = 159383552ULL;
  #line 808 
  word = ((unsigned long long)adapter->portnum << 16) | 23ULL;
  #line 810 
  req.req_hdr = word;
  #line 812 
  req.words[0] = (unsigned long long)enable;
  #line 814 
  rv = netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 815 
  if (rv != 0) 
               #line 816 
               printk((char *)"\001");
  #line 820 
  adapter->flags ^= 16U;
  #line 822 
  return rv;
}

#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_rss(struct netxen_adapter *adapter, int enable)
{
  #line 830 
  nx_nic_req_t req;
  #line 831 
  u64 word;
  #line 832 
  int i;
  #line 832 
  int rv;
  #line 834 
  u64 key[5U] = {13739358738236749627ULL, 9237148971100220835ULL, 12572696337890028491ULL, 4873897208919303485ULL, 2691761430505084634ULL};
  #line 841 
  memset((void *)(& req),0,64UL);
  #line 842 
  req.qhdr = 159383552ULL;
  #line 844 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  #line 845 
  req.req_hdr = word;
  #line 857 
  word = (((unsigned long long)enable << 8) & 256ULL) | 1970324836974832ULL;
  #line 861 
  req.words[0] = word;
  #line 862 
  i = 0;
  #line 862 
  while ((unsigned int)i <= 4U) {
    #line 863 
    req.words[i + 1] = key[i];
    #line 862 
    i ++;
  }
  #line 866 
  rv = netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 867 
  if (rv != 0) 
               #line 868 
               printk((char *)"\001",(char *)(& (adapter->netdev)->name));
  #line 872 
  return rv;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_config_ipaddr(struct netxen_adapter *adapter, __be32 ip, int cmd)
{
  #line 877 
  nx_nic_req_t req;
  #line 878 
  u64 word;
  #line 879 
  int rv;
  #line 881 
  memset((void *)(& req),0,64UL);
  #line 882 
  req.qhdr = 159383552ULL;
  #line 884 
  word = ((unsigned long long)adapter->portnum << 16) | 18ULL;
  #line 885 
  req.req_hdr = word;
  #line 887 
  req.words[0] = (unsigned long long)cmd;
  #line 888 
  memcpy((void *)(& req.words[1]),(void *)(& ip),4UL);
  #line 890 
  rv = netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 891 
  if (rv != 0) {
    #line 893 
    char *tmp;
    #line 892 
    ;
    #line 893 
    if (cmd == 2) 
                  #line 893 
                  tmp = (char *)"Add"; else 
                                            #line 893 
                                            tmp = (char *)"Remove";
    #line 892 
    ;
    #line 892 
    printk((char *)"\001",(char *)(& (adapter->netdev)->name),tmp,ip);
  }
  #line 896 
  return rv;
}

#line 899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_linkevent_request(struct netxen_adapter *adapter, int enable)
{
  #line 901 
  nx_nic_req_t req;
  #line 902 
  u64 word;
  #line 903 
  int rv;
  #line 905 
  memset((void *)(& req),0,64UL);
  #line 906 
  req.qhdr = 159383552ULL;
  #line 908 
  word = ((unsigned long long)adapter->portnum << 16) | 21ULL;
  #line 909 
  req.req_hdr = word;
  #line 910 
  req.words[0] = (unsigned long long)((enable << 8) | enable);
  #line 912 
  rv = netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 913 
  if (rv != 0) 
               #line 914 
               printk((char *)"\001",(char *)(& (adapter->netdev)->name));
  #line 918 
  return rv;
}

#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_send_lro_cleanup(struct netxen_adapter *adapter)
{
  #line 923 
  nx_nic_req_t req;
  #line 924 
  u64 word;
  #line 925 
  int rv;
  #line 927 
  if (! test_bit(0L,& adapter->state)) 
                                       #line 928 
                                       return 0;
  #line 930 
  memset((void *)(& req),0,64UL);
  #line 931 
  req.qhdr = 159383552ULL;
  #line 933 
  word = ((unsigned long long)adapter->portnum << 16) | 288230376151711751ULL;
  #line 937 
  req.req_hdr = word;
  #line 939 
  rv = netxen_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  #line 940 
  if (rv != 0) 
               #line 941 
               printk((char *)"\001",(char *)(& (adapter->netdev)->name));
  #line 944 
  return rv;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_nic_change_mtu(struct net_device *netdev, int mtu)
{
  #line 956 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 957 
  int rc = 0;
  #line 959 
  if (adapter->set_mtu != (int (*)(struct netxen_adapter *, int ))0) 
    #line 960 
    rc = (*(adapter->set_mtu))(adapter,mtu);
  #line 962 
  if (rc == 0) 
               #line 963 
               netdev->mtu = (unsigned int)mtu;
  #line 965 
  return rc;
}

#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_get_flash_block(struct netxen_adapter *adapter, int base, int size, __le32 *buf)
{
  #line 971 
  int i;
  #line 971 
  int v;
  #line 971 
  int addr;
  #line 972 
  __le32 *ptr32;
  #line 973 
  int ret;
  #line 975 
  addr = base;
  #line 976 
  ptr32 = buf;
  #line 977 
  i = 0;
  #line 977 
  while ((unsigned long)i < (unsigned long)size / 4UL) {
    #line 978 
    ret = netxen_rom_fast_read(adapter,addr,& v);
    #line 979 
    if (ret != 0) 
                  #line 980 
                  return ret;
    #line 982 
    *ptr32 = (unsigned int)v;
    #line 983 
    ptr32 ++;
    #line 984 
    addr = (int)((unsigned int)addr + 4U);
    #line 977 
    i ++;
  }
  #line 986 
  if ((char *)buf + (unsigned long)size > (char *)ptr32) {
    #line 987 
    __le32 local;
    #line 988 
    ret = netxen_rom_fast_read(adapter,addr,& v);
    #line 989 
    if (ret != 0) 
                  #line 990 
                  return ret;
    #line 991 
    local = (unsigned int)v;
    #line 992 
    memcpy((void *)ptr32,(void *)(& local),(unsigned long)(((char *)buf + (unsigned long)size) - (char *)ptr32));
  }
  #line 995 
  return 0;
}

#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_get_flash_mac_addr(struct netxen_adapter *adapter, u64 *mac)
{
  #line 1001 
  u32 offset;
  #line 1000 
  __le32 *pmac = (__le32 *)mac;
  #line 1003 
  offset = (unsigned int)((unsigned long)adapter->portnum + 512131UL) * 8U;
  #line 1005 
  if (netxen_get_flash_block(adapter,(int)offset,8,pmac) == -1) 
                                                                #line 1006 
                                                                return -1;
  #line 1008 
  if (*mac == 18446744073709551615ULL) {
    #line 1010 
    offset = (unsigned int)((unsigned long)adapter->portnum + 512000UL) * 8U;
    #line 1013 
    if (netxen_get_flash_block(adapter,(int)offset,8,pmac) == -1) 
                                                                  #line 1015 
                                                                  return -1;
    #line 1017 
    if (*mac == 18446744073709551615ULL) 
                                         #line 1018 
                                         return -1;
  }
  #line 1020 
  return 0;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_p3_get_mac_addr(struct netxen_adapter *adapter, u64 *mac)
{
  #line 1025 
  uint32_t crbaddr;
  #line 1025 
  uint32_t mac_hi;
  #line 1025 
  uint32_t mac_lo;
  #line 1026 
  int pci_func = (int)adapter->ahw.pci_func;
  #line 1028 
  crbaddr = ((unsigned int)((pci_func / 2) * 12) + (unsigned int)((pci_func & 1) * 4)) + 136323520U;
  #line 1031 
  mac_lo = (*(adapter->crb_read))(adapter,(unsigned long)crbaddr);
  #line 1032 
  mac_hi = (*(adapter->crb_read))(adapter,(unsigned long)(crbaddr + 4U));
  #line 1034 
  if ((pci_func & 1) != 0) 
                           #line 1035 
                           *mac = (unsigned long long)(mac_lo >> 16) | ((unsigned long long)mac_hi << 16); else 
                                                                    #line 1037 
                                                                    *mac = (unsigned long long)mac_lo | ((unsigned long long)mac_hi << 32);
  #line 1039 
  return 0;
}

#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void netxen_nic_pci_set_crbwindow_128M(struct netxen_adapter *adapter, u32 window)
{
  #line 1049 
  void *offset;
  #line 1056 
  int tmp;
  #line 1050 
  int count = 10;
  #line 1051 
  u8 func = adapter->ahw.pci_func;
  #line 1053 
  if (adapter->ahw.crb_win == window) 
                                      #line 1054 
                                      return;
  #line 1056 
  if ((unsigned int)func <= 3U) 
                                #line 1056 
                                tmp = (int)func * 32 + 66064; else 
                                                                   #line 1056 
                                                                   tmp = ((int)func + -4) * 16 + 66220;
  #line 1056 
  offset = adapter->ahw.pci_base1 + ((unsigned long)tmp + 1048576UL);
  #line 1059 
  writel(window,offset);
  #line 1060 
  while (1) {
    {
      #line 1061 
      ;
      #line 1061 
      if (readl(offset) == window) 
                                   #line 1062 
                                   break;
      #line 1064 
      if (__printk_ratelimit((char *)"netxen_nic_pci_set_crbwindow_128M") != 0) 
        #line 1065 
        _dev_warn(& (adapter->pdev)->dev,(char *)"failed to set CRB window to %d\n",window == 33554432U);
      #line 1068 
      __const_udelay(4295UL);
    }
    #line 1070 
    count --;
    #line 1070 
    if (! (count > 0)) 
                       #line 1060 
                       break;
  }
  #line 1072 
  if (count > 0) 
                 #line 1073 
                 adapter->ahw.crb_win = window;
  #line 1074 
  return;
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_get_crb_addr_2M(struct netxen_adapter *adapter, ulong off, void **addr)
{
  #line 1087 
  crb_128M_2M_sub_block_map_t *m;
  #line 1090 
  if (off + 18446744073608888320UL > 67108863UL) 
                                                 #line 1091 
                                                 return -22;
  #line 1093 
  off += 18446744073608888320UL;
  #line 1098 
  m = & crb_128M_2M_map[(off >> 20) & 63UL].sub_block[(off >> 16) & 15UL];
  #line 1100 
  if ((m->valid != 0U && (unsigned long)m->start_128M <= off) && (unsigned long)m->end_128M > off) {
    #line 1101 
    *addr = adapter->ahw.pci_base0 + ((unsigned long)m->start_2M + (off - (unsigned long)m->start_128M));
    #line 1103 
    return 0;
  }
  #line 1109 
  *addr = adapter->ahw.pci_base0 + (((unsigned long long)off & 65535ULL) + (unsigned long long)1966080UL);
  #line 1111 
  return 1;
}

#line 1120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void netxen_nic_pci_set_crbwindow_2M(struct netxen_adapter *adapter, ulong off)
{
  #line 1122 
  u32 window;
  #line 1123 
  void *addr = adapter->ahw.pci_base0 + 1245280U;
  #line 1125 
  off += 18446744073608888320UL;
  #line 1127 
  window = (crb_hub_agt[(off >> 20) & 63UL] << 20) | ((unsigned int)off & 983040U);
  #line 1129 
  writel(window,addr);
  #line 1130 
  ;
  #line 1130 
  if (readl(addr) != window) {
    #line 1131 
    if (__printk_ratelimit((char *)"netxen_nic_pci_set_crbwindow_2M") != 0) 
      #line 1132 
      _dev_warn(& (adapter->pdev)->dev,(char *)"failed to set CRB window to %d off 0x%lx\n",window,off);
  }
  #line 1133 
  return;
}

#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void *netxen_nic_map_indirect_address_128M(struct netxen_adapter *adapter, ulong win_off, void **mem_ptr)
{
  #line 1143 
  void *addr;
  #line 1144 
  resource_size_t mem_base;
  #line 1142 
  ulong off = win_off;
  #line 1146 
  if (win_off + 18446744073575333887UL <= 33554430UL) 
                                                      #line 1147 
                                                      off = win_off + 18446744073675997184UL;
  #line 1149 
  addr = pci_base_offset(adapter,off);
  #line 1150 
  if (addr != (void *)0) 
                         #line 1151 
                         return addr;
  #line 1153 
  if (adapter->ahw.pci_len0 == 0UL) 
                                    #line 1154 
                                    off += 18446744073608888320UL;
  #line 1156 
  mem_base = (adapter->pdev)->resource[0].start;
  #line 1157 
  *mem_ptr = ioremap(((unsigned long long)off & 18446744073709547520ULL) + mem_base,4096UL);
  #line 1158 
  if (*mem_ptr != (void *)0) 
                             #line 1159 
                             addr = *mem_ptr + (off & 4095UL);
  #line 1161 
  return addr;
}

#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_hw_write_wx_128M(struct netxen_adapter *adapter, ulong off, u32 data)
{
  #line 1167 
  unsigned long flags;
  #line 1168 
  void *addr;
  #line 1168 
  void *mem_ptr = (void *)0;
  #line 1170 
  addr = netxen_nic_map_indirect_address_128M(adapter,off,& mem_ptr);
  #line 1171 
  if (addr == (void *)0) 
                         #line 1172 
                         return -5;
  #line 1174 
  if (off + 18446744073575333887UL <= 33554430UL) 
                                                  #line 1175 
                                                  netxen_nic_io_write_128M(adapter,addr,data);
  else {
    {
      #line 1177 
      unsigned long __dummy;
      #line 1177 
      unsigned long __dummy2;
      }
    #line 1177 
    flags = _raw_write_lock_irqsave(& adapter->ahw.crb_lock);
    #line 1178 
    netxen_nic_pci_set_crbwindow_128M(adapter,0U);
    #line 1179 
    writel(data,addr);
    #line 1180 
    netxen_nic_pci_set_crbwindow_128M(adapter,33554432U);
    {
      #line 1182 
      unsigned long __dummy_0;
      #line 1182 
      unsigned long __dummy2_0;
      }
    #line 1182 
    _raw_write_unlock_irqrestore(& adapter->ahw.crb_lock,flags);
  }
  #line 1185 
  if (mem_ptr != (void *)0) 
                            #line 1186 
                            iounmap(mem_ptr);
  #line 1188 
  return 0;
}

#line 1192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_nic_hw_read_wx_128M(struct netxen_adapter *adapter, ulong off)
{
  #line 1194 
  unsigned long flags;
  #line 1195 
  void *addr;
  #line 1196 
  u32 data;
  #line 1195 
  void *mem_ptr = (void *)0;
  #line 1198 
  addr = netxen_nic_map_indirect_address_128M(adapter,off,& mem_ptr);
  #line 1199 
  if (addr == (void *)0) 
                         #line 1200 
                         return 4294967291U;
  #line 1202 
  if (off + 18446744073575333887UL <= 33554430UL) 
                                                  #line 1203 
                                                  data = netxen_nic_io_read_128M(adapter,addr);
  else {
    {
      #line 1205 
      unsigned long __dummy;
      #line 1205 
      unsigned long __dummy2;
      }
    #line 1205 
    flags = _raw_write_lock_irqsave(& adapter->ahw.crb_lock);
    #line 1206 
    netxen_nic_pci_set_crbwindow_128M(adapter,0U);
    #line 1207 
    data = readl(addr);
    #line 1208 
    netxen_nic_pci_set_crbwindow_128M(adapter,33554432U);
    {
      #line 1210 
      unsigned long __dummy_0;
      #line 1210 
      unsigned long __dummy2_0;
      }
    #line 1210 
    _raw_write_unlock_irqrestore(& adapter->ahw.crb_lock,flags);
  }
  #line 1213 
  if (mem_ptr != (void *)0) 
                            #line 1214 
                            iounmap(mem_ptr);
  #line 1216 
  return data;
}

#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_hw_write_wx_2M(struct netxen_adapter *adapter, ulong off, u32 data)
{
  #line 1222 
  unsigned long flags;
  #line 1223 
  int rv;
  #line 1224 
  void *addr = (void *)0;
  #line 1226 
  rv = netxen_nic_pci_get_crb_addr_2M(adapter,off,& addr);
  #line 1228 
  if (rv == 0) {
    #line 1229 
    writel(data,addr);
    #line 1230 
    return 0;
  }
  #line 1233 
  if (rv > 0) {
    {
      #line 1235 
      unsigned long __dummy;
      #line 1235 
      unsigned long __dummy2;
      }
    #line 1235 
    flags = _raw_write_lock_irqsave(& adapter->ahw.crb_lock);
    #line 1236 
    netxen_pcie_sem_lock(adapter,7,136323364U);
    #line 1237 
    netxen_nic_pci_set_crbwindow_2M(adapter,off);
    #line 1238 
    writel(data,addr);
    #line 1239 
    netxen_pcie_sem_unlock(adapter,7);
    {
      #line 1240 
      unsigned long __dummy_0;
      #line 1240 
      unsigned long __dummy2_0;
      }
    #line 1240 
    _raw_write_unlock_irqrestore(& adapter->ahw.crb_lock,flags);
    #line 1241 
    return 0;
  }
  #line 1244 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: invalid offset: 0x%016lx\n",(char *)"netxen_nic_hw_write_wx_2M",off);
  #line 1246 
  dump_stack();
  #line 1247 
  return -5;
}

#line 1251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_nic_hw_read_wx_2M(struct netxen_adapter *adapter, ulong off)
{
  #line 1253 
  unsigned long flags;
  #line 1254 
  int rv;
  #line 1255 
  u32 data;
  #line 1256 
  void *addr = (void *)0;
  #line 1258 
  rv = netxen_nic_pci_get_crb_addr_2M(adapter,off,& addr);
  #line 1260 
  if (rv == 0) {
    #line 1261 
    return readl(addr);
  }
  #line 1263 
  if (rv > 0) {
    {
      #line 1265 
      unsigned long __dummy;
      #line 1265 
      unsigned long __dummy2;
      }
    #line 1265 
    flags = _raw_write_lock_irqsave(& adapter->ahw.crb_lock);
    #line 1266 
    netxen_pcie_sem_lock(adapter,7,136323364U);
    #line 1267 
    netxen_nic_pci_set_crbwindow_2M(adapter,off);
    #line 1268 
    data = readl(addr);
    #line 1269 
    netxen_pcie_sem_unlock(adapter,7);
    {
      #line 1270 
      unsigned long __dummy_0;
      #line 1270 
      unsigned long __dummy2_0;
      }
    #line 1270 
    _raw_write_unlock_irqrestore(& adapter->ahw.crb_lock,flags);
    #line 1271 
    return data;
  }
  #line 1274 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: invalid offset: 0x%016lx\n",(char *)"netxen_nic_hw_read_wx_2M",off);
  #line 1276 
  dump_stack();
  #line 1277 
  return 4294967295U;
}

#line 1281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void netxen_nic_io_write_128M(struct netxen_adapter *adapter, void *addr, u32 data)
{
  #line 1284 
  _raw_read_lock(& adapter->ahw.crb_lock);
  #line 1285 
  writel(data,addr);
  #line 1286 
  _raw_read_unlock(& adapter->ahw.crb_lock);
  #line 1287 
  return;
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_nic_io_read_128M(struct netxen_adapter *adapter, void *addr)
{
  #line 1292 
  u32 val;
  #line 1294 
  _raw_read_lock(& adapter->ahw.crb_lock);
  #line 1295 
  val = readl(addr);
  #line 1296 
  _raw_read_unlock(& adapter->ahw.crb_lock);
  #line 1298 
  return val;
}

#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static void netxen_nic_io_write_2M(struct netxen_adapter *adapter, void *addr, u32 data)
{
  #line 1304 
  writel(data,addr);
  #line 1305 
  return;
}

#line 1307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_nic_io_read_2M(struct netxen_adapter *adapter, void *addr)
{
  #line 1310 
  return readl(addr);
}

#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void *netxen_get_ioaddr(struct netxen_adapter *adapter, u32 offset)
{
  #line 1316 
  void *addr = (void *)0;
  #line 1318 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
    #line 1319 
    if (offset + 4194303999U <= 33554430U) 
                                           #line 1321 
                                           addr = adapter->ahw.pci_base1 + ((unsigned long)offset + 18446744073608888320U); else 
                                                                    #line 1323 
                                                                    addr = pci_base_offset(adapter,(unsigned long)offset + 18446744073675997184UL);
  else {
    #line 1325 
    int __ret_warn_on = netxen_nic_pci_get_crb_addr_2M(adapter,(unsigned long)offset,& addr) != 0;
    #line 1325 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1326 
      ldv_inline_asm();
      #line 1327 
      ldv_inline_asm();
    }
    #line 1325 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1329 
  return addr;
}

#line 1333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_set_window_128M(struct netxen_adapter *adapter, u64 addr, u32 *start)
{
  #line 1336 
  if (addr + 18446744065119617024ULL <= 1048574ULL) {
    #line 1337 
    *start = (unsigned int)addr + 83886080U;
    #line 1338 
    return 0;
  }
  else 
    #line 1339 
    if (addr + 18446744065115422720ULL <= 1048574ULL) {
      #line 1341 
      *start = (unsigned int)addr + 80740352U;
      #line 1342 
      return 0;
    }
  #line 1345 
  return -5;
}

#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_set_window_2M(struct netxen_adapter *adapter, u64 addr, u32 *start)
{
  #line 1352 
  u32 window;
  #line 1354 
  window = ((unsigned int)(addr >> 1) & 16744448U) | ((unsigned int)(addr >> 25) & 1023U);
  #line 1356 
  writel(window,adapter->ahw.ocm_win_crb);
  #line 1358 
  readl(adapter->ahw.ocm_win_crb);
  #line 1360 
  adapter->ahw.ocm_win = window;
  #line 1361 
  *start = ((unsigned int)addr & 262143U) + 786432U;
  #line 1362 
  return 0;
}

#line 1366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_mem_access_direct(struct netxen_adapter *adapter, u64 off, u64 *data, int op)
{
  #line 1369 
  void *addr;
  #line 1370 
  resource_size_t mem_base;
  #line 1371 
  int ret;
  #line 1372 
  u32 start;
  #line 1369 
  void *mem_ptr = (void *)0;
  #line 1374 
  cif_spin_lock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1376 
  ret = (*(adapter->pci_set_window))(adapter,off,& start);
  #line 1377 
  if (ret != 0) 
                #line 1378 
                goto unlock;
  #line 1380 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1381 
                                                    addr = adapter->ahw.pci_base0 + (unsigned long)start;
  else {
    #line 1383 
    addr = pci_base_offset(adapter,(unsigned long)start);
    #line 1384 
    if (addr != (void *)0) 
                           #line 1385 
                           goto noremap;
    #line 1387 
    mem_base = (adapter->pdev)->resource[0].start + ((unsigned long long)start & 18446744073709547520ULL);
    #line 1389 
    mem_ptr = ioremap(mem_base,4096UL);
    #line 1390 
    if (mem_ptr == (void *)0) {
      #line 1391 
      ret = -5;
      #line 1392 
      goto unlock;
    }
    #line 1395 
    addr = mem_ptr + ((unsigned long)start & 4095UL);
  }
  #line 1397 
  noremap: 
           #line 1397 
  ;
  #line 1398 
  if (op == 0) 
               #line 1399 
               *data = readq(addr); else 
                                         #line 1401 
                                         writeq(*data,addr);
  #line 1403 
  unlock: 
          #line 1403 
  ;
  #line 1404 
  cif_spin_unlock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1406 
  if (mem_ptr != (void *)0) 
                            #line 1407 
                            iounmap(mem_ptr);
  #line 1408 
  return ret;
}

#line 1412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_pci_camqm_read_2M(struct netxen_adapter *adapter, u64 off, u64 *data)
{
  #line 1414 
  void *addr = adapter->ahw.pci_base0 + (off + (unsigned long long)18446744073635100672UL);
  #line 1417 
  cif_spin_lock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1418 
  *data = readq(addr);
  #line 1419 
  cif_spin_unlock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1420 
  return;
}

#line 1423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_pci_camqm_write_2M(struct netxen_adapter *adapter, u64 off, u64 data)
{
  #line 1425 
  void *addr = adapter->ahw.pci_base0 + (off + (unsigned long long)18446744073635100672UL);
  #line 1428 
  cif_spin_lock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1429 
  writeq(data,addr);
  #line 1430 
  cif_spin_unlock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1431 
  return;
}

#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_mem_write_128M(struct netxen_adapter *adapter, u64 off, u64 data)
{
  #line 1439 
  int j;
  #line 1439 
  int ret;
  #line 1440 
  u32 temp;
  #line 1440 
  u32 off_lo;
  #line 1440 
  u32 off_hi;
  #line 1440 
  u32 addr_hi;
  #line 1440 
  u32 data_hi;
  #line 1440 
  u32 data_lo;
  #line 1441 
  void *mem_crb;
  #line 1444 
  if ((off & 7ULL) != 0ULL) 
                            #line 1445 
                            return -5;
  #line 1448 
  if (off + 18446744060824649728ULL <= 4194302ULL) {
    #line 1450 
    mem_crb = pci_base_offset(adapter,131072096UL);
    #line 1452 
    addr_hi = 24U;
    #line 1453 
    data_lo = 8U;
    #line 1454 
    data_hi = 12U;
    #line 1455 
    off_lo = (unsigned int)off & 4194296U;
    #line 1456 
    off_hi = (unsigned int)(off >> 22);
    #line 1457 
    goto correct;
  }
  #line 1460 
  if (off <= 268435454ULL) {
    #line 1461 
    mem_crb = pci_base_offset(adapter,102760592UL);
    #line 1463 
    addr_hi = 8U;
    #line 1464 
    data_lo = 16U;
    #line 1465 
    data_hi = 20U;
    #line 1466 
    off_lo = (unsigned int)off & 4294967288U;
    #line 1467 
    off_hi = 0U;
    #line 1468 
    goto correct;
  }
  #line 1471 
  if (off + 18446744065119617024ULL <= 1048574ULL || off + 18446744065115422720ULL <= 1048574ULL) 
    #line 1473 
    if (adapter->ahw.pci_len0 != 0UL) {
      #line 1474 
      return netxen_nic_pci_mem_access_direct(adapter,off,& data,1);
    }
  #line 1479 
  return -5;
  #line 1481 
  correct: 
           #line 1481 
  ;
  #line 1482 
  cif_spin_lock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1483 
  netxen_nic_pci_set_crbwindow_128M(adapter,0U);
  #line 1485 
  writel(off_lo,mem_crb + 4U);
  #line 1486 
  writel(off_hi,mem_crb + (unsigned long)addr_hi);
  #line 1487 
  writel((unsigned int)data,mem_crb + (unsigned long)data_lo);
  #line 1488 
  writel((unsigned int)(data >> 32),mem_crb + (unsigned long)data_hi);
  #line 1489 
  writel(6U,mem_crb);
  #line 1490 
  writel(7U,mem_crb);
  #line 1493 
  j = 0;
  #line 1493 
  while (j <= 999) {
    #line 1494 
    temp = readl(mem_crb);
    #line 1495 
    if ((temp & 8U) == 0U) 
                           #line 1496 
                           break;
    #line 1493 
    j ++;
  }
  #line 1499 
  if (j > 999) {
    #line 1500 
    if (__printk_ratelimit((char *)"netxen_nic_pci_mem_write_128M") != 0) 
      #line 1501 
      _dev_err(& (adapter->pdev)->dev,(char *)"failed to write through agent\n");
    #line 1503 
    ret = -5;
  }
  else 
       #line 1505 
       ret = 0;
  #line 1507 
  netxen_nic_pci_set_crbwindow_128M(adapter,33554432U);
  #line 1508 
  cif_spin_unlock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1509 
  return ret;
}

#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_mem_read_128M(struct netxen_adapter *adapter, u64 off, u64 *data)
{
  #line 1516 
  int j;
  #line 1516 
  int ret;
  #line 1517 
  u32 temp;
  #line 1517 
  u32 off_lo;
  #line 1517 
  u32 off_hi;
  #line 1517 
  u32 addr_hi;
  #line 1517 
  u32 data_hi;
  #line 1517 
  u32 data_lo;
  #line 1518 
  u64 val;
  #line 1519 
  void *mem_crb;
  #line 1522 
  if ((off & 7ULL) != 0ULL) 
                            #line 1523 
                            return -5;
  #line 1526 
  if (off + 18446744060824649728ULL <= 4194302ULL) {
    #line 1528 
    mem_crb = pci_base_offset(adapter,131072096UL);
    #line 1530 
    addr_hi = 24U;
    #line 1531 
    data_lo = 16U;
    #line 1532 
    data_hi = 20U;
    #line 1533 
    off_lo = (unsigned int)off & 4194296U;
    #line 1534 
    off_hi = (unsigned int)(off >> 22);
    #line 1535 
    goto correct;
  }
  #line 1538 
  if (off <= 268435454ULL) {
    #line 1539 
    mem_crb = pci_base_offset(adapter,102760592UL);
    #line 1541 
    addr_hi = 8U;
    #line 1542 
    data_lo = 24U;
    #line 1543 
    data_hi = 28U;
    #line 1544 
    off_lo = (unsigned int)off & 4294967288U;
    #line 1545 
    off_hi = 0U;
    #line 1546 
    goto correct;
  }
  #line 1549 
  if (off + 18446744065119617024ULL <= 1048574ULL || off + 18446744065115422720ULL <= 1048574ULL) 
    #line 1551 
    if (adapter->ahw.pci_len0 != 0UL) {
      #line 1552 
      return netxen_nic_pci_mem_access_direct(adapter,off,data,0);
    }
  #line 1557 
  return -5;
  #line 1559 
  correct: 
           #line 1559 
  ;
  #line 1560 
  cif_spin_lock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1561 
  netxen_nic_pci_set_crbwindow_128M(adapter,0U);
  #line 1563 
  writel(off_lo,mem_crb + 4U);
  #line 1564 
  writel(off_hi,mem_crb + (unsigned long)addr_hi);
  #line 1565 
  writel(2U,mem_crb);
  #line 1566 
  writel(3U,mem_crb);
  #line 1568 
  j = 0;
  #line 1568 
  while (j <= 999) {
    #line 1569 
    temp = readl(mem_crb);
    #line 1570 
    if ((temp & 8U) == 0U) 
                           #line 1571 
                           break;
    #line 1568 
    j ++;
  }
  #line 1574 
  if (j > 999) {
    #line 1575 
    if (__printk_ratelimit((char *)"netxen_nic_pci_mem_read_128M") != 0) 
      #line 1576 
      _dev_err(& (adapter->pdev)->dev,(char *)"failed to read through agent\n");
    #line 1578 
    ret = -5;
  }
  else {
    #line 1581 
    temp = readl(mem_crb + (unsigned long)data_hi);
    #line 1582 
    val = (unsigned long long)temp << 32;
    #line 1583 
    val = (unsigned long long)readl(mem_crb + (unsigned long)data_lo) | val;
    #line 1584 
    *data = val;
    #line 1585 
    ret = 0;
  }
  #line 1588 
  netxen_nic_pci_set_crbwindow_128M(adapter,33554432U);
  #line 1589 
  cif_spin_unlock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1591 
  return ret;
}

#line 1595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_mem_write_2M(struct netxen_adapter *adapter, u64 off, u64 data)
{
  #line 1598 
  int j;
  #line 1598 
  int ret;
  #line 1599 
  u32 temp;
  #line 1599 
  u32 off8;
  #line 1600 
  void *mem_crb;
  #line 1603 
  if ((off & 7ULL) != 0ULL) 
                            #line 1604 
                            return -5;
  #line 1607 
  if (off + 18446744060824649728ULL <= 67108862ULL) {
    #line 1609 
    mem_crb = netxen_get_ioaddr(adapter,131072144U);
    #line 1611 
    goto correct;
  }
  #line 1614 
  if (off <= 268435454ULL) {
    #line 1615 
    mem_crb = netxen_get_ioaddr(adapter,102760592U);
    #line 1617 
    goto correct;
  }
  #line 1620 
  if (off + 18446744065119617024ULL <= 1048574ULL) {
    #line 1621 
    return netxen_nic_pci_mem_access_direct(adapter,off,& data,1);
  }
  #line 1623 
  return -5;
  #line 1625 
  correct: 
           #line 1625 
  ;
  #line 1626 
  off8 = (unsigned int)off & 4294967288U;
  #line 1628 
  cif_spin_lock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1630 
  writel(off8,mem_crb + 4U);
  #line 1631 
  writel(0U,mem_crb + 8U);
  #line 1633 
  writel((unsigned int)data,mem_crb + 16U);
  #line 1635 
  writel((unsigned int)(data >> 32),mem_crb + 20U);
  #line 1638 
  writel(6U,mem_crb);
  #line 1639 
  writel(7U,mem_crb);
  #line 1642 
  j = 0;
  #line 1642 
  while (j <= 999) {
    #line 1643 
    temp = readl(mem_crb);
    #line 1644 
    if ((temp & 8U) == 0U) 
                           #line 1645 
                           break;
    #line 1642 
    j ++;
  }
  #line 1648 
  if (j > 999) {
    #line 1649 
    if (__printk_ratelimit((char *)"netxen_nic_pci_mem_write_2M") != 0) 
      #line 1650 
      _dev_err(& (adapter->pdev)->dev,(char *)"failed to write through agent\n");
    #line 1652 
    ret = -5;
  }
  else 
       #line 1654 
       ret = 0;
  #line 1656 
  cif_spin_unlock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1658 
  return ret;
}

#line 1662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_pci_mem_read_2M(struct netxen_adapter *adapter, u64 off, u64 *data)
{
  #line 1665 
  int j;
  #line 1665 
  int ret;
  #line 1666 
  u32 temp;
  #line 1666 
  u32 off8;
  #line 1667 
  u64 val;
  #line 1668 
  void *mem_crb;
  #line 1671 
  if ((off & 7ULL) != 0ULL) 
                            #line 1672 
                            return -5;
  #line 1675 
  if (off + 18446744060824649728ULL <= 67108862ULL) {
    #line 1677 
    mem_crb = netxen_get_ioaddr(adapter,131072144U);
    #line 1679 
    goto correct;
  }
  #line 1682 
  if (off <= 268435454ULL) {
    #line 1683 
    mem_crb = netxen_get_ioaddr(adapter,102760592U);
    #line 1685 
    goto correct;
  }
  #line 1688 
  if (off + 18446744065119617024ULL <= 1048574ULL) {
    #line 1689 
    return netxen_nic_pci_mem_access_direct(adapter,off,data,0);
  }
  #line 1693 
  return -5;
  #line 1695 
  correct: 
           #line 1695 
  ;
  #line 1696 
  off8 = (unsigned int)off & 4294967288U;
  #line 1698 
  cif_spin_lock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1700 
  writel(off8,mem_crb + 4U);
  #line 1701 
  writel(0U,mem_crb + 8U);
  #line 1702 
  writel(2U,mem_crb);
  #line 1703 
  writel(3U,mem_crb);
  #line 1705 
  j = 0;
  #line 1705 
  while (j <= 999) {
    #line 1706 
    temp = readl(mem_crb);
    #line 1707 
    if ((temp & 8U) == 0U) 
                           #line 1708 
                           break;
    #line 1705 
    j ++;
  }
  #line 1711 
  if (j > 999) {
    #line 1712 
    if (__printk_ratelimit((char *)"netxen_nic_pci_mem_read_2M") != 0) 
      #line 1713 
      _dev_err(& (adapter->pdev)->dev,(char *)"failed to read through agent\n");
    #line 1715 
    ret = -5;
  }
  else {
    #line 1717 
    val = (unsigned long long)readl(mem_crb + 28U) << 32;
    #line 1718 
    val = (unsigned long long)readl(mem_crb + 24U) | val;
    #line 1719 
    *data = val;
    #line 1720 
    ret = 0;
  }
  #line 1723 
  cif_spin_unlock_mem_lock_of_netxen_hardware_context(& adapter->ahw.mem_lock);
  #line 1725 
  return ret;
}

#line 1729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_setup_hwops(struct netxen_adapter *adapter)
{
  #line 1731 
  adapter->init_port = & netxen_niu_xg_init_port;
  #line 1732 
  adapter->stop_port = & netxen_niu_disable_xg_port;
  #line 1734 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 1741 
    adapter->crb_read = & netxen_nic_hw_read_wx_128M;
    #line 1735 
    adapter->crb_write = & netxen_nic_hw_write_wx_128M;
    #line 1736 
    adapter->pci_set_window = & netxen_nic_pci_set_window_128M;
    #line 1737 
    adapter->pci_mem_read = & netxen_nic_pci_mem_read_128M;
    #line 1738 
    adapter->pci_mem_write = & netxen_nic_pci_mem_write_128M;
    #line 1739 
    adapter->io_read = & netxen_nic_io_read_128M;
    #line 1740 
    adapter->io_write = & netxen_nic_io_write_128M;
    #line 1741 
    adapter->macaddr_set = & netxen_p2_nic_set_mac_addr;
    #line 1744 
    adapter->set_multi = & netxen_p2_nic_set_multi;
    #line 1745 
    adapter->set_mtu = & netxen_nic_set_mtu_xgb;
    #line 1746 
    adapter->set_promisc = & netxen_p2_nic_set_promisc;
  }
  else {
    #line 1755 
    adapter->crb_read = & netxen_nic_hw_read_wx_2M;
    #line 1749 
    adapter->crb_write = & netxen_nic_hw_write_wx_2M;
    #line 1750 
    adapter->pci_set_window = & netxen_nic_pci_set_window_2M;
    #line 1751 
    adapter->pci_mem_read = & netxen_nic_pci_mem_read_2M;
    #line 1752 
    adapter->pci_mem_write = & netxen_nic_pci_mem_write_2M;
    #line 1753 
    adapter->io_read = & netxen_nic_io_read_2M;
    #line 1754 
    adapter->io_write = & netxen_nic_io_write_2M;
    #line 1755 
    adapter->set_mtu = & nx_fw_cmd_set_mtu;
    #line 1758 
    adapter->set_promisc = & netxen_p3_nic_set_promisc;
    #line 1759 
    adapter->macaddr_set = & netxen_p3_nic_set_mac_addr;
    #line 1760 
    adapter->set_multi = & netxen_p3_nic_set_multi;
    #line 1762 
    adapter->phy_read = & nx_fw_cmd_query_phy;
    #line 1763 
    adapter->phy_write = & nx_fw_cmd_set_phy;
  }
  #line 1765 
  return;
}

#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_nic_get_board_info(struct netxen_adapter *adapter)
{
  #line 1769 
  int offset;
  #line 1769 
  int board_type;
  #line 1769 
  int magic;
  #line 1770 
  struct pci_dev *pdev = adapter->pdev;
  #line 1772 
  offset = 16680;
  #line 1773 
  if (netxen_rom_fast_read(adapter,offset,& magic) != 0) 
                                                         #line 1774 
                                                         return -5;
  #line 1776 
  if (magic != 305419896) {
    #line 1777 
    _dev_err(& pdev->dev,(char *)"invalid board config, magic=%08x\n",magic);
    #line 1779 
    return -5;
  }
  #line 1782 
  offset = 16392;
  #line 1783 
  if (netxen_rom_fast_read(adapter,offset,& board_type) != 0) 
                                                              #line 1784 
                                                              return -5;
  #line 1786 
  if (board_type == 41) {
    #line 1787 
    u32 gpio = (*(adapter->crb_read))(adapter,154140684UL);
    #line 1788 
    if ((gpio & 32768U) == 0U) 
                               #line 1789 
                               board_type = 128;
  }
  #line 1792 
  adapter->ahw.board_type = (unsigned short)board_type;
  #line 1794 
  switch (board_type) {
    #line 1795 
    case 10: 
             #line 1795 
    ;
    #line 1796 
    adapter->ahw.port_type = (unsigned short)1U;
    #line 1797 
    break;
    #line 1798 
    case 11: 
             #line 1798 
    ;
    #line 1799 
    case 13: 
             #line 1799 
    ;
    #line 1800 
    case 14: 
             #line 1800 
    ;
    #line 1801 
    case 15: 
             #line 1801 
    ;
    #line 1802 
    case 34: 
             #line 1802 
    ;
    #line 1803 
    case 40: 
             #line 1803 
    ;
    #line 1804 
    case 49: 
             #line 1804 
    ;
    #line 1805 
    case 35: 
             #line 1805 
    ;
    #line 1806 
    case 37: 
             #line 1806 
    ;
    #line 1807 
    case 38: 
             #line 1807 
    ;
    #line 1808 
    case 42: 
             #line 1808 
    ;
    #line 1809 
    case 43: 
             #line 1809 
    ;
    #line 1810 
    case 50: 
             #line 1810 
    ;
    #line 1811 
    case 39: 
             #line 1811 
    ;
    #line 1812 
    adapter->ahw.port_type = (unsigned short)2U;
    #line 1813 
    break;
    #line 1814 
    case 0: 
            #line 1814 
    ;
    #line 1815 
    case 1: 
            #line 1815 
    ;
    #line 1816 
    case 2: 
            #line 1816 
    ;
    #line 1817 
    case 3: 
            #line 1817 
    ;
    #line 1818 
    case 33: 
             #line 1818 
    ;
    #line 1819 
    case 36: 
             #line 1819 
    ;
    #line 1820 
    case 41: 
             #line 1820 
    ;
    #line 1821 
    adapter->ahw.port_type = (unsigned short)1U;
    #line 1822 
    break;
    #line 1823 
    case 128: 
              #line 1823 
    ;
    #line 1824 
    if ((unsigned int)adapter->portnum <= 1U) 
                                              #line 1824 
                                              adapter->ahw.port_type = (unsigned short)2U; else 
                                                                    #line 1824 
                                                                    adapter->ahw.port_type = (unsigned short)1U;
    #line 1826 
    break;
    #line 1827 
    default: 
             #line 1827 
    ;
    #line 1828 
    _dev_err(& pdev->dev,(char *)"unknown board type %x\n",board_type);
    #line 1829 
    adapter->ahw.port_type = (unsigned short)2U;
    #line 1830 
    break;
  }
  #line 1833 
  return 0;
}

#line 1837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_nic_set_mtu_xgb(struct netxen_adapter *adapter, int new_mtu)
{
  #line 1839 
  new_mtu += 100;
  #line 1840 
  if ((unsigned int)adapter->physical_port == 0U) 
                                                  #line 1841 
                                                  (*(adapter->crb_write))(adapter,107413532UL,(unsigned int)new_mtu); else 
                                                                    #line 1843 
                                                                    (*(adapter->crb_write))(adapter,107479068UL,(unsigned int)new_mtu);
  #line 1844 
  return 0;
}

#line 1847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_nic_set_link_parameters(struct netxen_adapter *adapter)
{
  #line 1849 
  __u32 status;
  #line 1850 
  __u32 autoneg;
  #line 1851 
  __u32 port_mode_0;
  #line 1853 
  if (! netif_carrier_ok(adapter->netdev)) {
    #line 1854 
    adapter->link_speed = (unsigned short)0U;
    #line 1855 
    adapter->link_duplex = (unsigned short)65535U;
    #line 1856 
    adapter->link_autoneg = (unsigned short)1U;
    #line 1857 
    return;
  }
  #line 1860 
  if ((unsigned int)adapter->ahw.port_type == 1U) {
    #line 1861 
    port_mode_0 = (*(adapter->crb_read))(adapter,136323108UL);
    #line 1862 
    if (port_mode_0 == 3U) {
      #line 1863 
      adapter->link_speed = (unsigned short)1000U;
      #line 1864 
      adapter->link_duplex = (unsigned short)1U;
      #line 1865 
      adapter->link_autoneg = (unsigned short)0U;
      #line 1866 
      return;
    }
    #line 1869 
    if (adapter->phy_read != (int (*)(struct netxen_adapter *, u32 , u32 *))0) {
      #line 1869 
      if ((*(adapter->phy_read))(adapter,17U,& status) == 0) {
        #line 1873 
        if ((status & 1024U) != 0U) {
          #line 1874 
          switch ((status >> 14) & 3U) {
            #line 1875 
            case (unsigned int)0: 
                                  #line 1875 
            ;
            #line 1876 
            adapter->link_speed = (unsigned short)10U;
            #line 1877 
            break;
            #line 1878 
            case (unsigned int)1: 
                                  #line 1878 
            ;
            #line 1879 
            adapter->link_speed = (unsigned short)100U;
            #line 1880 
            break;
            #line 1881 
            case (unsigned int)2: 
                                  #line 1881 
            ;
            #line 1882 
            adapter->link_speed = (unsigned short)1000U;
            #line 1883 
            break;
            #line 1884 
            default: 
                     #line 1884 
            ;
            #line 1885 
            adapter->link_speed = (unsigned short)0U;
            #line 1886 
            break;
          }
          #line 1888 
          switch ((status >> 13) & 1U) {
            #line 1889 
            case (unsigned int)0: 
                                  #line 1889 
            ;
            #line 1890 
            adapter->link_duplex = (unsigned short)0U;
            #line 1891 
            break;
            #line 1892 
            case (unsigned int)1: 
                                  #line 1892 
            ;
            #line 1893 
            adapter->link_duplex = (unsigned short)1U;
            #line 1894 
            break;
            #line 1895 
            default: 
                     #line 1895 
            ;
            #line 1896 
            adapter->link_duplex = (unsigned short)65535U;
            #line 1897 
            break;
          }
          #line 1899 
          if (adapter->phy_read != (int (*)(struct netxen_adapter *, u32 , u32 *))0) {
            #line 1899 
            if ((*(adapter->phy_read))(adapter,4U,& autoneg) == 0) 
                                                                   #line 1903 
                                                                   adapter->link_autoneg = (unsigned short)autoneg;
          }
        }
        else 
             #line 1905 
             goto link_down;
      }
      else 
           #line 1869 
           goto _LAND;
    }
    else {
      #line 1869 
      _LAND: {
               #line 1907 
               link_down: 
                          #line 1907 
               ;
               #line 1908 
               adapter->link_speed = (unsigned short)0U;
               #line 1909 
               adapter->link_duplex = (unsigned short)65535U;
             }
    }
  }
  #line 1912 
  return;
}

#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
int netxen_nic_wol_supported(struct netxen_adapter *adapter)
{
  #line 1917 
  u32 wol_cfg;
  #line 1919 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 1920 
                                                     return 0;
  #line 1922 
  wol_cfg = (*(adapter->crb_read))(adapter,136323460UL);
  #line 1923 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) {
    #line 1924 
    wol_cfg = (*(adapter->crb_read))(adapter,136323464UL);
    #line 1925 
    if (((unsigned int)(1 << (int)adapter->portnum) & wol_cfg) != 0U) 
      #line 1926 
      return 1;
  }
  #line 1929 
  return 0;
}

#line 1932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_cntrl(struct netxen_adapter *adapter, struct netxen_minidump_template_hdr *template_hdr, struct netxen_minidump_entry_crb *crtEntry)
{
  #line 1936 
  int loop_cnt;
  #line 1936 
  int i;
  #line 1936 
  int timeout_flag;
  #line 1937 
  u32 op_count;
  #line 1937 
  u32 stride;
  #line 1938 
  u32 opcode;
  #line 1938 
  u32 read_value;
  #line 1938 
  u32 addr;
  #line 1939 
  unsigned long timeout;
  #line 1939 
  unsigned long timeout_jiffies;
  #line 1936 
  int rv = 0;
  #line 1940 
  addr = crtEntry->addr;
  #line 1941 
  op_count = crtEntry->op_count;
  #line 1942 
  stride = (unsigned int)crtEntry->__anonCompField_netxen_minidump_entry_crb_208.__anonCompField___anonunion_2018_207.addr_stride;
  #line 1944 
  loop_cnt = 0;
  #line 1944 
  while ((unsigned int)loop_cnt < op_count) {
    #line 1945 
    i = 0;
    #line 1945 
    while ((unsigned int)i <= 7U) {
      #line 1946 
      opcode = (unsigned int)((int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.opcode & (1 << i));
      #line 1947 
      if (opcode != 0U) 
        #line 1948 
        switch (opcode) {
          #line 1949 
          case (u32)1: 
                       #line 1949 
          ;
          #line 1950 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1950 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1950 
          writel(crtEntry->value_1,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1950 
          readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1953 
          break;
          #line 1954 
          case (u32)2: 
                       #line 1954 
          ;
          #line 1955 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1955 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1955 
          read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1958 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1958 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1958 
          writel(read_value,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1958 
          readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1961 
          break;
          #line 1962 
          case (u32)4: 
                       #line 1962 
          ;
          #line 1963 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1963 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1963 
          read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1966 
          read_value = crtEntry->value_2 & read_value;
          #line 1967 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1967 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1967 
          writel(read_value,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1967 
          readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1970 
          break;
          #line 1971 
          case (u32)8: 
                       #line 1971 
          ;
          #line 1972 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1972 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1972 
          read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1975 
          read_value = crtEntry->value_3 | read_value;
          #line 1976 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1976 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1976 
          writel(read_value,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1976 
          readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1979 
          break;
          #line 1980 
          case (u32)16: 
                        #line 1980 
          ;
          #line 1981 
          timeout = (unsigned long)crtEntry->__anonCompField_netxen_minidump_entry_crb_208.__anonCompField___anonunion_2018_207.poll_timeout;
          #line 1982 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 1982 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 1982 
          read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 1985 
          timeout_jiffies = msecs_to_jiffies((unsigned int)timeout) + jiffies;
          #line 1987 
          timeout_flag = 0;
          #line 1987 
          while (timeout_flag == 0 && (crtEntry->value_2 & read_value) != crtEntry->value_1) {
            {
              #line 1991 
              unsigned long __dummy;
              #line 1991 
              unsigned long __dummy2;
              }
            #line 1991 
            if (1 != 0) {
              {
                #line 1991 
                unsigned long __dummy_0;
                #line 1991 
                unsigned long __dummy2_0;
                }
              #line 1991 
              if (1 != 0) 
                #line 1991 
                if ((long)(timeout_jiffies - jiffies) < 0L) 
                                                            #line 1993 
                                                            timeout_flag = 1;
            }
            #line 1994 
            writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
            #line 1994 
            readl(adapter->ahw.pci_base0 + 1245280U);
            #line 1994 
            read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          }
          #line 1999 
          if (timeout_flag != 0) {
            #line 2000 
            _dev_err(& (adapter->pdev)->dev,(char *)"%s : ",(char *)"netxen_md_cntrl");
            #line 2003 
            return 4294967295U;
          }
          #line 2005 
          break;
          #line 2006 
          case (u32)32: 
                        #line 2006 
          ;
          #line 2008 
          if ((unsigned int)crtEntry->__anonCompField_netxen_minidump_entry_crb_208.__anonCompField___anonunion_2018_207.state_index_a != 0U) 
            #line 2009 
            addr = template_hdr->saved_state_array[(int)crtEntry->__anonCompField_netxen_minidump_entry_crb_208.__anonCompField___anonunion_2018_207.state_index_a];
          #line 2012 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 2012 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 2012 
          read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 2017 
          template_hdr->saved_state_array[(int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.state_index_v] = read_value;
          #line 2018 
          break;
          #line 2019 
          case (u32)64: 
                        #line 2019 
          ;
          #line 2021 
          if ((unsigned int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.state_index_v != 0U) 
            #line 2022 
            read_value = template_hdr->saved_state_array[(int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.state_index_v]; else 
                                                                    #line 2026 
                                                                    read_value = crtEntry->value_1;
          #line 2029 
          if ((unsigned int)crtEntry->__anonCompField_netxen_minidump_entry_crb_208.__anonCompField___anonunion_2018_207.state_index_a != 0U) 
            #line 2030 
            addr = template_hdr->saved_state_array[(int)crtEntry->__anonCompField_netxen_minidump_entry_crb_208.__anonCompField___anonunion_2018_207.state_index_a];
          #line 2034 
          writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 2034 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 2034 
          writel(read_value,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 2034 
          readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
          #line 2037 
          break;
          #line 2038 
          case (u32)128: 
                         #line 2038 
          ;
          #line 2039 
          read_value = template_hdr->saved_state_array[(int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.state_index_v];
          #line 2042 
          read_value <<= (int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.shl;
          #line 2043 
          read_value >>= (int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.shr;
          #line 2044 
          if (crtEntry->value_2 != 0U) 
                                       #line 2045 
                                       read_value = crtEntry->value_2 & read_value;
          #line 2047 
          read_value = crtEntry->value_3 | read_value;
          #line 2048 
          read_value = crtEntry->value_1 + read_value;
          #line 2052 
          template_hdr->saved_state_array[(int)crtEntry->__anonCompField_netxen_minidump_entry_crb_210.__anonCompField___anonunion_2020_209.state_index_v] = read_value;
          #line 2053 
          break;
          #line 2054 
          default: 
                   #line 2054 
          ;
          #line 2055 
          rv = 1;
          #line 2056 
          break;
        }
      #line 1945 
      i ++;
    }
    #line 2060 
    addr += stride;
    #line 1944 
    loop_cnt ++;
  }
  #line 2062 
  return (unsigned int)rv;
}

#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_rdmem(struct netxen_adapter *adapter, struct netxen_minidump_entry_rdmem *memEntry, u64 *data_buff)
{
  #line 2071 
  u64 addr;
  #line 2072 
  int loop_cnt;
  #line 2071 
  u64 value = 0ULL;
  #line 2072 
  int i = 0;
  #line 2074 
  addr = (unsigned long long)memEntry->read_addr;
  #line 2075 
  loop_cnt = (int)memEntry->read_data_size;
  #line 2076 
  loop_cnt = (int)((unsigned long)loop_cnt / 8UL);
  #line 2078 
  i = 0;
  #line 2078 
  while (i < loop_cnt) {
    {
      #line 2081 
      u64 *tmp_0;
      #line 2079 
      if (netxen_nic_pci_mem_read_2M(adapter,addr,& value) != 0) 
                                                                 #line 2080 
                                                                 goto out;
      #line 2081 
      tmp_0 = data_buff;
      #line 2081 
      data_buff ++;
      #line 2081 
      *tmp_0 = value;
      #line 2082 
      addr += 8ULL;
    }
    #line 2078 
    i ++;
  }
  #line 2084 
  out: 
       #line 2084 
  ;
  #line 2085 
  return (unsigned int)((unsigned long)i) * 8U;
}

#line 2089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_rd_crb(struct netxen_adapter *adapter, struct netxen_minidump_entry_crb *crbEntry, u32 *data_buff)
{
  #line 2093 
  int loop_cnt;
  #line 2094 
  u32 op_count;
  #line 2094 
  u32 addr;
  #line 2094 
  u32 stride;
  #line 2094 
  u32 value;
  #line 2096 
  addr = crbEntry->addr;
  #line 2097 
  op_count = crbEntry->op_count;
  #line 2098 
  stride = (unsigned int)crbEntry->__anonCompField_netxen_minidump_entry_crb_208.__anonCompField___anonunion_2018_207.addr_stride;
  #line 2100 
  loop_cnt = 0;
  #line 2100 
  while ((unsigned int)loop_cnt < op_count) {
    {
      #line 2102 
      u32 *tmp;
      #line 2103 
      u32 *tmp_0;
      #line 2101 
      writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
      #line 2101 
      readl(adapter->ahw.pci_base0 + 1245280U);
      #line 2101 
      value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
      #line 2102 
      tmp = data_buff;
      #line 2102 
      data_buff ++;
      #line 2102 
      *tmp = addr;
      #line 2103 
      tmp_0 = data_buff;
      #line 2103 
      data_buff ++;
      #line 2103 
      *tmp_0 = value;
      #line 2104 
      addr += stride;
    }
    #line 2100 
    loop_cnt ++;
  }
  #line 2106 
  return (unsigned int)((unsigned long)loop_cnt) * 8U;
}

#line 2111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_rdrom(struct netxen_adapter *adapter, struct netxen_minidump_entry_rdrom *romEntry, __le32 *data_buff)
{
  #line 2115 
  int i;
  #line 2116 
  u32 size;
  #line 2116 
  u32 lck_val;
  #line 2117 
  u32 val;
  #line 2118 
  u32 fl_addr;
  #line 2118 
  u32 waddr;
  #line 2118 
  u32 raddr;
  #line 2115 
  int count = 0;
  #line 2119 
  fl_addr = romEntry->read_addr;
  #line 2120 
  size = romEntry->read_data_size / 4U;
  #line 2121 
  lock_try: 
            #line 2121 
  ;
  #line 2122 
  lck_val = readl(adapter->ahw.pci_base0 + 1294352U);
  #line 2124 
  if (lck_val == 0U && count <= 999) {
    #line 2125 
    msleep(20U);
    #line 2126 
    count ++;
    #line 2127 
    goto lock_try;
  }
  #line 2129 
  writel((unsigned int)adapter->ahw.pci_func,adapter->ahw.pci_base0 + 1777920U);
  #line 2131 
  i = 0;
  #line 2131 
  while ((unsigned int)i < size) {
    {
      #line 2136 
      __le32 *tmp;
      #line 2132 
      waddr = fl_addr & 4294901760U;
      #line 2133 
      writel(1108410368U,adapter->ahw.pci_base0 + 1245280U);
      #line 2133 
      readl(adapter->ahw.pci_base0 + 1245280U);
      #line 2133 
      writel(waddr,adapter->ahw.pci_base0 + 1966128U);
      #line 2133 
      readl(adapter->ahw.pci_base0 + 1966128U);
      #line 2134 
      raddr = (fl_addr & 65535U) + 1108672512U;
      #line 2135 
      writel(raddr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
      #line 2135 
      readl(adapter->ahw.pci_base0 + 1245280U);
      #line 2135 
      val = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)raddr) + (unsigned long)1966080U));
      #line 2136 
      tmp = data_buff;
      #line 2136 
      data_buff ++;
      #line 2136 
      *tmp = val;
      #line 2137 
      fl_addr += 4U;
    }
    #line 2131 
    i ++;
  }
  #line 2139 
  readl(adapter->ahw.pci_base0 + 1294356U);
  #line 2140 
  return romEntry->read_data_size;
}

#line 2145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_L2Cache(struct netxen_adapter *adapter, struct netxen_minidump_entry_cache *cacheEntry, u32 *data_buff)
{
  #line 2149 
  int loop_cnt;
  #line 2149 
  int i;
  #line 2149 
  int k;
  #line 2150 
  u32 addr;
  #line 2150 
  u32 read_addr;
  #line 2150 
  u32 read_value;
  #line 2150 
  u32 cntrl_addr;
  #line 2150 
  u32 tag_reg_addr;
  #line 2151 
  u32 tag_value;
  #line 2151 
  u32 read_cnt;
  #line 2152 
  u8 cntl_value_w;
  #line 2152 
  u8 cntl_value_r;
  #line 2153 
  unsigned long timeout;
  #line 2153 
  unsigned long timeout_jiffies;
  #line 2149 
  int timeout_flag = 0;
  #line 2155 
  loop_cnt = (int)cacheEntry->op_count;
  #line 2156 
  read_addr = cacheEntry->read_addr;
  #line 2157 
  cntrl_addr = cacheEntry->control_addr;
  #line 2158 
  cntl_value_w = (unsigned char)cacheEntry->__anonCompField_netxen_minidump_entry_cache_226.__anonCompField___anonunion_2036_225.write_value;
  #line 2159 
  tag_reg_addr = cacheEntry->tag_reg_addr;
  #line 2160 
  tag_value = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_224.__anonCompField___anonunion_2034_223.init_tag_value;
  #line 2161 
  read_cnt = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_228.__anonCompField___anonunion_2038_227.read_addr_cnt;
  #line 2163 
  i = 0;
  #line 2163 
  while (i < loop_cnt) {
    #line 2164 
    writel(tag_reg_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
    #line 2164 
    readl(adapter->ahw.pci_base0 + 1245280U);
    #line 2164 
    writel(tag_value,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)tag_reg_addr) + (unsigned long)1966080U));
    #line 2164 
    readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)tag_reg_addr) + (unsigned long)1966080U));
    #line 2165 
    if ((unsigned int)cntl_value_w != 0U) {
      #line 2166 
      writel(cntrl_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
      #line 2166 
      readl(adapter->ahw.pci_base0 + 1245280U);
      #line 2166 
      writel((unsigned int)cntl_value_w,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)cntrl_addr) + (unsigned long)1966080U));
      #line 2166 
      readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)cntrl_addr) + (unsigned long)1966080U));
    }
    #line 2168 
    if ((unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_226.__anonCompField___anonunion_2036_225.poll_mask != 0U) {
      #line 2169 
      timeout = (unsigned long)cacheEntry->__anonCompField_netxen_minidump_entry_cache_226.__anonCompField___anonunion_2036_225.poll_wait;
      {
        #line 2170 
        writel(cntrl_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
        #line 2170 
        readl(adapter->ahw.pci_base0 + 1245280U);
        #line 2170 
        cntl_value_r = (unsigned char)readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)cntrl_addr) + (unsigned long)1966080U));
      }
      #line 2172 
      timeout_jiffies = msecs_to_jiffies((unsigned int)timeout) + jiffies;
      #line 2173 
      timeout_flag = 0;
      #line 2173 
      while (timeout_flag == 0 && (unsigned int)((int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_226.__anonCompField___anonunion_2036_225.poll_mask & (int)cntl_value_r) != 0U) {
        {
          #line 2175 
          unsigned long __dummy;
          #line 2175 
          unsigned long __dummy2;
          }
        #line 2175 
        if (1 != 0) {
          {
            #line 2175 
            unsigned long __dummy_0;
            #line 2175 
            unsigned long __dummy2_0;
            }
          #line 2175 
          if (1 != 0) 
            #line 2175 
            if ((long)(timeout_jiffies - jiffies) < 0L) 
                                                        #line 2176 
                                                        timeout_flag = 1;
        }
        {
          #line 2177 
          writel(cntrl_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
          #line 2177 
          readl(adapter->ahw.pci_base0 + 1245280U);
          #line 2177 
          cntl_value_r = (unsigned char)readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)cntrl_addr) + (unsigned long)1966080U));
        }
      }
      #line 2181 
      if (timeout_flag != 0) {
        #line 2182 
        _dev_err(& (adapter->pdev)->dev,(char *)"Timeout in processing L2 Tag poll.\n");
        #line 2184 
        return 4294967295U;
      }
    }
    #line 2187 
    addr = read_addr;
    #line 2188 
    k = 0;
    #line 2188 
    while ((unsigned int)k < read_cnt) {
      {
        #line 2191 
        u32 *tmp_4;
        #line 2189 
        writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
        #line 2189 
        readl(adapter->ahw.pci_base0 + 1245280U);
        #line 2189 
        read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
        #line 2191 
        tmp_4 = data_buff;
        #line 2191 
        data_buff ++;
        #line 2191 
        *tmp_4 = read_value;
        #line 2192 
        addr = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_228.__anonCompField___anonunion_2038_227.read_addr_stride + addr;
      }
      #line 2188 
      k ++;
    }
    #line 2194 
    tag_value = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_224.__anonCompField___anonunion_2034_223.tag_value_stride + tag_value;
    #line 2163 
    i ++;
  }
  #line 2196 
  return (read_cnt * (unsigned int)loop_cnt) * 4U;
}

#line 2201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_L1Cache(struct netxen_adapter *adapter, struct netxen_minidump_entry_cache *cacheEntry, u32 *data_buff)
{
  #line 2205 
  int i;
  #line 2205 
  int k;
  #line 2205 
  int loop_cnt;
  #line 2206 
  u32 addr;
  #line 2206 
  u32 read_addr;
  #line 2206 
  u32 read_value;
  #line 2206 
  u32 cntrl_addr;
  #line 2206 
  u32 tag_reg_addr;
  #line 2207 
  u32 tag_value;
  #line 2207 
  u32 read_cnt;
  #line 2208 
  u8 cntl_value_w;
  #line 2210 
  loop_cnt = (int)cacheEntry->op_count;
  #line 2211 
  read_addr = cacheEntry->read_addr;
  #line 2212 
  cntrl_addr = cacheEntry->control_addr;
  #line 2213 
  cntl_value_w = (unsigned char)cacheEntry->__anonCompField_netxen_minidump_entry_cache_226.__anonCompField___anonunion_2036_225.write_value;
  #line 2214 
  tag_reg_addr = cacheEntry->tag_reg_addr;
  #line 2215 
  tag_value = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_224.__anonCompField___anonunion_2034_223.init_tag_value;
  #line 2216 
  read_cnt = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_228.__anonCompField___anonunion_2038_227.read_addr_cnt;
  #line 2218 
  i = 0;
  #line 2218 
  while (i < loop_cnt) {
    #line 2219 
    writel(tag_reg_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
    #line 2219 
    readl(adapter->ahw.pci_base0 + 1245280U);
    #line 2219 
    writel(tag_value,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)tag_reg_addr) + (unsigned long)1966080U));
    #line 2219 
    readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)tag_reg_addr) + (unsigned long)1966080U));
    #line 2220 
    writel(cntrl_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
    #line 2220 
    readl(adapter->ahw.pci_base0 + 1245280U);
    #line 2220 
    writel((unsigned int)cntl_value_w,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)cntrl_addr) + (unsigned long)1966080U));
    #line 2220 
    readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)cntrl_addr) + (unsigned long)1966080U));
    #line 2222 
    addr = read_addr;
    #line 2223 
    k = 0;
    #line 2223 
    while ((unsigned int)k < read_cnt) {
      {
        #line 2227 
        u32 *tmp;
        #line 2224 
        writel(addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
        #line 2224 
        readl(adapter->ahw.pci_base0 + 1245280U);
        #line 2224 
        read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)addr) + (unsigned long)1966080U));
        #line 2227 
        tmp = data_buff;
        #line 2227 
        data_buff ++;
        #line 2227 
        *tmp = read_value;
        #line 2228 
        addr = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_228.__anonCompField___anonunion_2038_227.read_addr_stride + addr;
      }
      #line 2223 
      k ++;
    }
    #line 2230 
    tag_value = (unsigned int)cacheEntry->__anonCompField_netxen_minidump_entry_cache_224.__anonCompField___anonunion_2034_223.tag_value_stride + tag_value;
    #line 2218 
    i ++;
  }
  #line 2232 
  return (read_cnt * (unsigned int)loop_cnt) * 4U;
}

#line 2237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_rdocm(struct netxen_adapter *adapter, struct netxen_minidump_entry_rdocm *ocmEntry, u32 *data_buff)
{
  #line 2241 
  int i;
  #line 2241 
  int loop_cnt;
  #line 2242 
  u32 value;
  #line 2243 
  void *addr;
  #line 2244 
  addr = adapter->ahw.pci_base0 + (unsigned long)ocmEntry->read_addr;
  #line 2245 
  loop_cnt = (int)ocmEntry->op_count;
  #line 2247 
  i = 0;
  #line 2247 
  while (i < loop_cnt) {
    {
      #line 2249 
      u32 *tmp;
      #line 2248 
      value = readl(addr);
      #line 2249 
      tmp = data_buff;
      #line 2249 
      data_buff ++;
      #line 2249 
      *tmp = value;
      #line 2250 
      addr += (unsigned long)ocmEntry->__anonCompField_netxen_minidump_entry_rdocm_232.__anonCompField___anonunion_2042_231.read_addr_stride;
    }
    #line 2247 
    i ++;
  }
  #line 2252 
  return (unsigned int)((unsigned long)i) * 4U;
}

#line 2257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_rdmux(struct netxen_adapter *adapter, struct netxen_minidump_entry_mux *muxEntry, u32 *data_buff)
{
  #line 2261 
  u32 read_addr;
  #line 2261 
  u32 read_value;
  #line 2261 
  u32 select_addr;
  #line 2261 
  u32 sel_value;
  #line 2260 
  int loop_cnt = 0;
  #line 2263 
  read_addr = muxEntry->read_addr;
  #line 2264 
  sel_value = muxEntry->select_value;
  #line 2265 
  select_addr = muxEntry->select_addr;
  #line 2267 
  loop_cnt = 0;
  #line 2267 
  while (muxEntry->op_count > (unsigned int)loop_cnt) {
    {
      #line 2270 
      u32 *tmp;
      #line 2271 
      u32 *tmp_0;
      #line 2268 
      writel(select_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
      #line 2268 
      readl(adapter->ahw.pci_base0 + 1245280U);
      #line 2268 
      writel(sel_value,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)select_addr) + (unsigned long)1966080U));
      #line 2268 
      readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)select_addr) + (unsigned long)1966080U));
      #line 2269 
      writel(read_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
      #line 2269 
      readl(adapter->ahw.pci_base0 + 1245280U);
      #line 2269 
      read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)read_addr) + (unsigned long)1966080U));
      #line 2270 
      tmp = data_buff;
      #line 2270 
      data_buff ++;
      #line 2270 
      *tmp = sel_value;
      #line 2271 
      tmp_0 = data_buff;
      #line 2271 
      data_buff ++;
      #line 2271 
      *tmp_0 = read_value;
      #line 2272 
      sel_value = muxEntry->select_value_stride + sel_value;
    }
    #line 2267 
    loop_cnt ++;
  }
  #line 2274 
  return (unsigned int)((unsigned long)loop_cnt) * 8U;
}

#line 2279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static u32 netxen_md_rdqueue(struct netxen_adapter *adapter, struct netxen_minidump_entry_queue *queueEntry, u32 *data_buff)
{
  #line 2283 
  int loop_cnt;
  #line 2283 
  int k;
  #line 2284 
  u32 queue_id;
  #line 2284 
  u32 read_addr;
  #line 2284 
  u32 read_value;
  #line 2284 
  u32 read_stride;
  #line 2284 
  u32 select_addr;
  #line 2284 
  u32 read_cnt;
  #line 2286 
  read_cnt = (unsigned int)queueEntry->__anonCompField_netxen_minidump_entry_queue_238.__anonCompField___anonunion_2048_237.read_addr_cnt;
  #line 2287 
  read_stride = (unsigned int)queueEntry->__anonCompField_netxen_minidump_entry_queue_238.__anonCompField___anonunion_2048_237.read_addr_stride;
  #line 2288 
  select_addr = queueEntry->select_addr;
  #line 2290 
  loop_cnt = 0;
  #line 2290 
  queue_id = 0U;
  #line 2290 
  while (queueEntry->op_count > (unsigned int)loop_cnt) {
    #line 2292 
    writel(select_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
    #line 2292 
    readl(adapter->ahw.pci_base0 + 1245280U);
    #line 2292 
    writel(queue_id,adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)select_addr) + (unsigned long)1966080U));
    #line 2292 
    readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)select_addr) + (unsigned long)1966080U));
    #line 2293 
    read_addr = queueEntry->read_addr;
    #line 2294 
    k = 0;
    #line 2294 
    while ((unsigned int)k < read_cnt) {
      {
        #line 2297 
        u32 *tmp;
        #line 2295 
        writel(read_addr & 4294901760U,adapter->ahw.pci_base0 + 1245280U);
        #line 2295 
        readl(adapter->ahw.pci_base0 + 1245280U);
        #line 2295 
        read_value = readl(adapter->ahw.pci_base0 + ((unsigned long)((unsigned short)read_addr) + (unsigned long)1966080U));
        #line 2297 
        tmp = data_buff;
        #line 2297 
        data_buff ++;
        #line 2297 
        *tmp = read_value;
        #line 2298 
        read_addr += read_stride;
      }
      #line 2294 
      k ++;
    }
    #line 2300 
    queue_id = (unsigned int)queueEntry->__anonCompField_netxen_minidump_entry_queue_236.__anonCompField___anonunion_2046_235.queue_id_stride + queue_id;
    #line 2290 
    loop_cnt ++;
  }
  #line 2302 
  return ((unsigned int)((unsigned long)loop_cnt) * read_cnt) * 4U;
}

#line 2311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_md_entry_err_chk(struct netxen_adapter *adapter, struct netxen_minidump_entry *entry, int esize)
{
  #line 2314 
  if (esize < 0) {
    #line 2315 
    entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags = (unsigned char)((unsigned int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags | 128U);
    #line 2316 
    return esize;
  }
  #line 2318 
  if (entry->hdr.entry_capture_size != (unsigned int)esize) {
    #line 2319 
    entry->hdr.entry_capture_size = (unsigned int)esize;
    #line 2320 
    entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags = (unsigned char)((unsigned int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags | 64U);
    #line 2321 
    _dev_info(& (adapter->pdev)->dev,(char *)"Invalidate dump, Type:%d\tMask:%d\tSize:%dCap_size:%d\n",entry->hdr.entry_type,(int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.entry_capture_mask,esize,entry->hdr.entry_capture_size);
    #line 2325 
    _dev_info(& (adapter->pdev)->dev,(char *)"Aborting further dump capture\n");
  }
  #line 2327 
  return 0;
}

#line 2330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_parse_md_template(struct netxen_adapter *adapter)
{
  #line 2332 
  int num_of_entries;
  #line 2332 
  int buff_level;
  #line 2332 
  int e_cnt;
  #line 2332 
  int esize;
  #line 2334 
  char *dbuff;
  #line 2338 
  struct netxen_minidump_template_hdr *template_hdr;
  #line 2339 
  struct netxen_minidump_entry *entry;
  #line 2333 
  int rv = 0;
  #line 2333 
  int sane_start = 0;
  #line 2333 
  int sane_end = 0;
  #line 2335 
  void *template_buff = adapter->mdump.md_template;
  #line 2336 
  char *dump_buff = (char *)adapter->mdump.md_capture_buff;
  #line 2337 
  int capture_mask = (int)adapter->mdump.md_capture_mask;
  #line 2341 
  if ((capture_mask & 3) != 3) {
    #line 2342 
    _dev_err(& (adapter->pdev)->dev,(char *)"Capture mask %02x below minimum needed ",capture_mask);
    #line 2344 
    return -22;
  }
  #line 2346 
  template_hdr = (struct netxen_minidump_template_hdr *)template_buff;
  #line 2347 
  num_of_entries = (int)template_hdr->num_of_entries;
  #line 2348 
  entry = (struct netxen_minidump_entry *)((char *)template_buff + (unsigned long)template_hdr->first_entry_offset);
  #line 2350 
  memcpy((void *)dump_buff,template_buff,(unsigned long)adapter->mdump.md_template_size);
  #line 2351 
  dump_buff += (unsigned long)adapter->mdump.md_template_size;
  #line 2353 
  if (template_hdr->entry_type == 99U) 
                                       #line 2354 
                                       sane_start = 1;
  #line 2356 
  e_cnt = 0;
  #line 2356 
  buff_level = 0;
  #line 2356 
  while (e_cnt < num_of_entries) {
    #line 2357 
    if (((int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.entry_capture_mask & capture_mask) == 0) {
      #line 2358 
      entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags = (unsigned char)((unsigned int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags | 128U);
      #line 2359 
      entry = (struct netxen_minidump_entry *)((char *)entry + (unsigned long)entry->hdr.entry_size);
      #line 2361 
      goto __Cont;
    }
    #line 2363 
    switch (entry->hdr.entry_type) {
      #line 2364 
      case (u32)0: 
                   #line 2364 
      ;
      #line 2365 
      entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags = (unsigned char)((unsigned int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags | 128U);
      #line 2366 
      break;
      #line 2367 
      case (u32)255: 
                     #line 2367 
      ;
      #line 2368 
      entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags = (unsigned char)((unsigned int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags | 128U);
      #line 2369 
      sane_end ++;
      #line 2370 
      break;
      #line 2371 
      case (u32)98: 
                    #line 2371 
      ;
      #line 2372 
      rv = (int)netxen_md_cntrl(adapter,template_hdr,
                      (struct netxen_minidump_entry_crb *)entry);
      #line 2374 
      if (rv != 0) 
                   #line 2375 
                   entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags = (unsigned char)((unsigned int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags | 128U);
      #line 2376 
      break;
      #line 2377 
      case (u32)1: 
                   #line 2377 
      ;
      #line 2378 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2379 
      esize = (int)netxen_md_rd_crb(adapter,(struct netxen_minidump_entry_crb *)entry,
                         (u32 *)dbuff);
      #line 2381 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2383 
      if (rv < 0) 
                  #line 2384 
                  break;
      #line 2385 
      buff_level += esize;
      #line 2386 
      break;
      #line 2387 
      case (u32)73: 
                    #line 2387 
      ;
      #line 2388 
      case (u32)72: 
                    #line 2388 
      ;
      #line 2389 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2390 
      esize = (int)netxen_md_rdmem(adapter,(struct netxen_minidump_entry_rdmem *)entry,
                        (u64 *)dbuff);
      #line 2392 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2394 
      if (rv < 0) 
                  #line 2395 
                  break;
      #line 2396 
      buff_level += esize;
      #line 2397 
      break;
      #line 2398 
      case (u32)4: 
                   #line 2398 
      ;
      #line 2399 
      case (u32)71: 
                    #line 2399 
      ;
      #line 2400 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2401 
      esize = (int)netxen_md_rdrom(adapter,(struct netxen_minidump_entry_rdrom *)entry,
                        (__le32 *)dbuff);
      #line 2403 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2405 
      if (rv < 0) 
                  #line 2406 
                  break;
      #line 2407 
      buff_level += esize;
      #line 2408 
      break;
      #line 2409 
      case (u32)22: 
                    #line 2409 
      ;
      #line 2410 
      case (u32)21: 
                    #line 2410 
      ;
      #line 2411 
      case (u32)23: 
                    #line 2411 
      ;
      #line 2412 
      case (u32)24: 
                    #line 2412 
      ;
      #line 2413 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2414 
      esize = (int)netxen_md_L2Cache(adapter,
                          (struct netxen_minidump_entry_cache *)entry,
                          (u32 *)dbuff);
      #line 2416 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2418 
      if (rv < 0) 
                  #line 2419 
                  break;
      #line 2420 
      buff_level += esize;
      #line 2421 
      break;
      #line 2422 
      case (u32)11: 
                    #line 2422 
      ;
      #line 2423 
      case (u32)12: 
                    #line 2423 
      ;
      #line 2424 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2425 
      esize = (int)netxen_md_L1Cache(adapter,
                          (struct netxen_minidump_entry_cache *)entry,
                          (u32 *)dbuff);
      #line 2427 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2429 
      if (rv < 0) 
                  #line 2430 
                  break;
      #line 2431 
      buff_level += esize;
      #line 2432 
      break;
      #line 2433 
      case (u32)6: 
                   #line 2433 
      ;
      #line 2434 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2435 
      esize = (int)netxen_md_rdocm(adapter,(struct netxen_minidump_entry_rdocm *)entry,
                        (u32 *)dbuff);
      #line 2437 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2439 
      if (rv < 0) 
                  #line 2440 
                  break;
      #line 2441 
      buff_level += esize;
      #line 2442 
      break;
      #line 2443 
      case (u32)2: 
                   #line 2443 
      ;
      #line 2444 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2445 
      esize = (int)netxen_md_rdmux(adapter,(struct netxen_minidump_entry_mux *)entry,
                        (u32 *)dbuff);
      #line 2447 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2449 
      if (rv < 0) 
                  #line 2450 
                  break;
      #line 2451 
      buff_level += esize;
      #line 2452 
      break;
      #line 2453 
      case (u32)3: 
                   #line 2453 
      ;
      #line 2454 
      dbuff = dump_buff + (unsigned long)buff_level;
      #line 2455 
      esize = (int)netxen_md_rdqueue(adapter,
                          (struct netxen_minidump_entry_queue *)entry,
                          (u32 *)dbuff);
      #line 2457 
      rv = netxen_md_entry_err_chk(adapter,entry,esize);
      #line 2459 
      if (rv < 0) 
                  #line 2460 
                  break;
      #line 2461 
      buff_level += esize;
      #line 2462 
      break;
      #line 2463 
      default: 
               #line 2463 
      ;
      #line 2464 
      entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags = (unsigned char)((unsigned int)entry->hdr.__anonCompField_netxen_common_entry_hdr_194.__anonCompField___anonunion_2004_193.driver_flags | 128U);
      #line 2465 
      break;
    }
    #line 2468 
    entry = (struct netxen_minidump_entry *)((char *)entry + (unsigned long)entry->hdr.entry_size);
    #line 2356 
    __Cont: 
            #line 2356 
    e_cnt ++;
  }
  #line 2471 
  if (sane_start == 0 || sane_end > 1) 
                                       #line 2472 
                                       _dev_err(& (adapter->pdev)->dev,(char *)"Firmware minidump template configuration error.\n");
  #line 2475 
  return 0;
}

#line 2479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
static int netxen_collect_minidump(struct netxen_adapter *adapter)
{
  #line 2482 
  struct netxen_minidump_template_hdr *hdr;
  #line 2481 
  int ret = 0;
  #line 2483 
  hdr = (struct netxen_minidump_template_hdr *)adapter->mdump.md_template;
  #line 2485 
  hdr->driver_capture_mask = (unsigned int)adapter->mdump.md_capture_mask;
  #line 2486 
  hdr->driver_timestamp = (unsigned int)ktime_get_seconds();
  #line 2487 
  hdr->driver_info_word2 = adapter->fw_version;
  #line 2488 
  hdr->driver_info_word3 = (*(adapter->crb_read))(adapter,136324256UL);
  #line 2489 
  ret = netxen_parse_md_template(adapter);
  #line 2490 
  if (ret != 0) 
                #line 2491 
                return ret;
  #line 2493 
  return ret;
}

#line 2498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_hw.c"
void netxen_dump_fw(struct netxen_adapter *adapter)
{
  #line 2500 
  struct netxen_minidump_template_hdr *hdr;
  #line 2501 
  int i;
  #line 2501 
  int k;
  #line 2502 
  u32 capture_mask;
  #line 2501 
  int data_size = 0;
  #line 2503 
  hdr = (struct netxen_minidump_template_hdr *)adapter->mdump.md_template;
  #line 2505 
  capture_mask = (unsigned int)adapter->mdump.md_capture_mask;
  #line 2507 
  i = 2;
  #line 2507 
  k = 1;
  #line 2507 
  while ((i & 255) != 0) {
    #line 2508 
    if (((unsigned int)i & capture_mask) != 0U) 
                                                #line 2509 
                                                data_size = (int)(hdr->capture_size_array[k] + (unsigned int)data_size);
    #line 2507 
    i <<= 1;
    #line 2507 
    k ++;
  }
  #line 2511 
  if (data_size == 0) {
    #line 2512 
    _dev_err(& (adapter->pdev)->dev,(char *)"Invalid cap sizes for capture_mask=0x%x\n",(int)adapter->mdump.md_capture_mask);
    #line 2515 
    return;
  }
  #line 2517 
  adapter->mdump.md_capture_size = (unsigned int)data_size;
  #line 2518 
  adapter->mdump.md_dump_size = adapter->mdump.md_template_size + adapter->mdump.md_capture_size;
  #line 2520 
  if (adapter->mdump.md_capture_buff == (void *)0) {
    #line 2521 
    adapter->mdump.md_capture_buff = cif_vzalloc((unsigned long)adapter->mdump.md_dump_size);
    #line 2523 
    if (adapter->mdump.md_capture_buff == (void *)0) 
                                                     #line 2524 
                                                     return;
    #line 2526 
    if (netxen_collect_minidump(adapter) != 0) {
      #line 2527 
      adapter->mdump.has_valid_dump = (unsigned char)0U;
      #line 2528 
      adapter->mdump.md_dump_size = 0U;
      #line 2529 
      cif_vfree(adapter->mdump.md_capture_buff);
      #line 2530 
      adapter->mdump.md_capture_buff = (void *)0;
      #line 2531 
      _dev_err(& (adapter->pdev)->dev,(char *)"Error in collecting firmware minidump.\n");
    }
    else {
      #line 2534 
      adapter->mdump.md_timestamp = (unsigned long long)jiffies;
      #line 2535 
      adapter->mdump.has_valid_dump = (unsigned char)1U;
      #line 2536 
      adapter->fw_mdump_rdy = 1;
      #line 2537 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s Successfully ",(char *)(& (adapter->netdev)->name));
    }
  }
  else {
    #line 2542 
    _dev_info(& (adapter->pdev)->dev,(char *)"Cannot overwrite previously collected ");
    #line 2545 
    adapter->fw_mdump_rdy = 1;
    #line 2546 
    return;
  }
  #line 2548 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 124 
  ldv_set_bit(nr,addr);
  #line 125 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 361 
  return ldv_kzalloc(size,flags);
}

#line 548  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_lock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 551 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 553 
  spin_lock_bh(lock);
  #line 554 
  return;
}

#line 588  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_unlock_bh__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 591 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 593 
  spin_unlock_bh(lock);
  #line 594 
  return;
}

#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_lock_mem_lock_of_netxen_hardware_context(spinlock_t *lock)
{
  #line 810 
  ldv_spin_model_lock((char *)"mem_lock_of_netxen_hardware_context");
  #line 812 
  spin_lock(lock);
  #line 813 
  return;
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_spin_unlock_mem_lock_of_netxen_hardware_context(spinlock_t *lock)
{
  #line 819 
  ldv_spin_model_unlock((char *)"mem_lock_of_netxen_hardware_context");
  #line 821 
  spin_unlock(lock);
  #line 822 
  return;
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 828 
  return ldv_vzalloc(size);
}

#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_hw.i.aux"
static void cif_vfree(void *addr)
{
  #line 835 
  ldv_vfree(addr);
  #line 836 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 326 
int kstrtoull(char *, unsigned int, unsigned long long *);
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtoul(char *s, unsigned int base, unsigned long *res)
{
  #line 352 
  return kstrtoull(s,base,(unsigned long long *)res);
}

#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2098 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2100 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2152 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_sub(int i, atomic_t *v)
{
  #line 189 
  int __ret;
  #line 189 
  __ret = - i;
  #line 189 
  switch (4UL) {
    #line 189 
    case (unsigned long)1: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)2: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)4: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)8: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    default: 
             #line 189 
    ;
    #line 189 
    __xadd_wrong_size();
  }
  #line 189 
  return __ret;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_write((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_write((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_sub(int i, atomic_t *v)
{
  #line 199 
  kasan_check_write((void *)v,4U);
  #line 200 
  return arch_atomic_fetch_sub(i,v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 348 
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock.h"
#line 18 
void __rwlock_init(rwlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 686  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 221 
#line 221 
int rcu_read_lock_held(void);
#line 224 
#line 224 
int rcu_read_lock_any_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 554 
#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 954  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_vfree_0(void *addr);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static bool refcount_sub_and_test(int i, refcount_t *r)
{
  #line 253 
  int old = atomic_fetch_sub(i,& r->refs);
  #line 255 
  if (old == i) {
    #line 257 
    ldv_inline_asm();
    #line 257 
    return (_Bool)1;
  }
  #line 260 
  if ((long)(old < 0) != 0L || (long)(old - i < 0) != 0L) 
                                                          #line 261 
                                                          refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_SUB_UAF);
  #line 263 
  return (_Bool)0;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static bool refcount_dec_and_test(refcount_t *r)
{
  #line 281 
  return refcount_sub_and_test(1,r);
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 465  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 914  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry);
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 985  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr);
#line 876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 876 
int device_create_bin_file(struct device *, struct bin_attribute *);
#line 878 
#line 878 
void device_remove_bin_file(struct device *, struct bin_attribute *);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static struct device *kobj_to_dev(struct kobject *kobj)
{
  #line 1354 
  void *__mptr;
  #line 1354 
  __mptr = (void *)kobj;
  #line 1354 
  return ((struct device *)__mptr);
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1040 
int pci_find_capability(struct pci_dev *, int);
#line 1042 
#line 1042 
int pci_find_ext_capability(struct pci_dev *, int);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1234 
#line 1234 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);
#line 1237 
#line 1237 
int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 993  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1001  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 2112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u16 pcie_caps_reg(struct pci_dev *dev)
{
  #line 2114 
  return dev->pcie_flags_reg;
}

#line 2121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_type(struct pci_dev *dev)
{
  #line 2123 
  return ((int)pcie_caps_reg(dev) >> 4) & 15;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 3608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data_offset(struct sk_buff *skb, int offset, void *to, unsigned int len)
{
  #line 3612 
  memcpy(to,(void *)(skb->data + (unsigned long)offset),(unsigned long)len);
  #line 3613 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file_net.h"
#line 8 
extern struct net init_net;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct *n)
{
  #line 531 
  while (1) {
    #line 531 
    if (! ((int)test_bit(0L,& n->state) != 0)) 
                                               #line 531 
                                               break;
    #line 532 
    msleep(1U);
  }
  #line 536 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2679 
#line 946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_0(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue_0(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue_0(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4343 
struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *);
#line 4609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_bond_master(struct net_device *dev)
{
  #line 4611 
  return (_Bool)(((dev->flags & 1024U) != 0U && (dev->priv_flags & 4U) != 0U) != 0);
}

#line 4614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_bond_slave(struct net_device *dev)
{
  #line 4616 
  return (_Bool)(((dev->flags & 2048U) != 0U && (dev->priv_flags & 4U) != 0U) != 0);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool is_vlan_dev(struct net_device *dev)
{
  #line 72 
  return (_Bool)((dev->priv_flags & 1U) != 0U);
}

#line 134 
#line 134 
struct net_device *vlan_dev_real_dev(struct net_device *);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 1727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1727 
int netxen_init_dummy_dma(struct netxen_adapter *adapter);
#line 1728 
#line 1728 
void netxen_free_dummy_dma(struct netxen_adapter *adapter);
#line 1730 
#line 1730 
int netxen_check_flash_fw_compatibility(struct netxen_adapter *adapter);
#line 1731 
#line 1731 
int netxen_phantom_init(struct netxen_adapter *adapter, int pegtune_val);
#line 1732 
#line 1732 
int netxen_load_firmware(struct netxen_adapter *adapter);
#line 1733 
#line 1733 
int netxen_need_fw_reset(struct netxen_adapter *adapter);
#line 1734 
#line 1734 
void netxen_request_firmware(struct netxen_adapter *adapter);
#line 1735 
#line 1735 
void netxen_release_firmware(struct netxen_adapter *adapter);
#line 1736 
#line 1736 
int netxen_pinit_from_rom(struct netxen_adapter *adapter);
#line 1751 
#line 1751 
int netxen_alloc_sw_resources(struct netxen_adapter *adapter);
#line 1752 
#line 1752 
void netxen_free_sw_resources(struct netxen_adapter *adapter);
#line 1760 
#line 1760 
void netxen_release_rx_buffers(struct netxen_adapter *adapter);
#line 1761 
#line 1761 
void netxen_release_tx_buffers(struct netxen_adapter *adapter);
#line 1763 
#line 1763 
int netxen_init_firmware(struct netxen_adapter *adapter);
#line 1764 
#line 1764 
void netxen_nic_clear_stats(struct netxen_adapter *adapter);
#line 1766 
#line 1766 
void netxen_post_rx_buffers(struct netxen_adapter *adapter, u32 ringid, struct nx_host_rds_ring *rds_ring);
#line 1768 
#line 1768 
int netxen_process_cmd_ring(struct netxen_adapter *adapter);
#line 1769 
#line 1769 
int netxen_process_rcv_ring(struct nx_host_sds_ring *sds_ring, int max);
#line 1776 
#line 2181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
void netxen_advert_link_change(struct netxen_adapter *adapter, int linkup);
#line 1793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
int netxen_nic_reset_context(struct netxen_adapter *adapter);
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 2436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
int nx_dev_request_reset(struct netxen_adapter *adapter);
#line 1815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
static struct netxen_brdinfo netxen_boards[19U] = {{.brdtype = 15, .ports = 1L, .short_name = {(char)'X', (char)'G', (char)'b', (char)' ', (char)'C', (char)'X', (char)'4'}}, {.brdtype = 14, .ports = 1L, .short_name = {(char)'X', (char)'G', (char)'b', (char)' ', (char)'H', (char)'M', (char)'E', (char)'Z'}}, {.brdtype = 13, .ports = 2L, .short_name = {(char)'X', (char)'G', (char)'b', (char)' ', (char)'I', (char)'M', (char)'E', (char)'Z'}}, {.brdtype = 11, .ports = 1L, .short_name = {(char)'X', (char)'G', (char)'b', (char)' ', (char)'X', (char)'F', (char)'P'}}, {.brdtype = 10, .ports = 4L, .short_name = {(char)'Q', (char)'u', (char)'a', (char)'d', (char)' ', (char)'G', (char)'b'}}, {.brdtype = 12, .ports = 2L, .short_name = {(char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'G', (char)'b'}}, {.brdtype = 33, .ports = 4L, .short_name = {(char)'R', (char)'e', (char)'f', (char)'e', (char)'r', (char)'e', (char)'n', (char)'c', (char)'e', (char)' ', (char)'Q', (char)'u', (char)'a', (char)'d', (char)' ', (char)'G', (char)'i', (char)'g', (char)' '}}, {.brdtype = 34, .ports = 2L, .short_name = {(char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'X', (char)'G', (char)'b', (char)' ', (char)'H', (char)'M', (char)'E', (char)'Z'}}, {.brdtype = 35, .ports = 2L, .short_name = {(char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'X', (char)'G', (char)'b', (char)' ', (char)'C', (char)'X', (char)'4', (char)' ', (char)'L', (char)'P'}}, {.brdtype = 36, .ports = 4L, .short_name = {(char)'Q', (char)'u', (char)'a', (char)'d', (char)' ', (char)'G', (char)'i', (char)'g', (char)' ', (char)'L', (char)'P'}}, {.brdtype = 37, .ports = 2L, .short_name = {(char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'X', (char)'G', (char)'b', (char)' ', (char)'I', (char)'M', (char)'E', (char)'Z'}}, {.brdtype = 38, .ports = 2L, .short_name = {(char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'X', (char)'G', (char)'b', (char)' ', (char)'S', (char)'F', (char)'P', (char)'+', (char)' ', (char)'L', (char)'P'}}, {.brdtype = 39, .ports = 1L, .short_name = {(char)'X', (char)'G', (char)'B', (char)' ', (char)'1', (char)'0', (char)'G', (char)' ', (char)'B', (char)'a', (char)'s', (char)'e', (char)'T', (char)' ', (char)'L', (char)'P'}}, {.brdtype = 40, .ports = 2L, .short_name = {(char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'X', (char)'G', (char)'b', (char)' ', (char)'L', (char)'O', (char)'M'}}, {.brdtype = 41, .ports = 4L, .short_name = {(char)'N', (char)'X', (char)'3', (char)'0', (char)'3', (char)'1', (char)' ', (char)'G', (char)'i', (char)'g', (char)'a', (char)'b', (char)'i', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t'}}, {.brdtype = 42, .ports = 2L, .short_name = {(char)'N', (char)'X', (char)'3', (char)'0', (char)'3', (char)'1', (char)' ', (char)'1', (char)'0', (char)' ', (char)'G', (char)'i', (char)'g', (char)'a', (char)'b', (char)'i', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t'}}, {.brdtype = 43, .ports = 2L, .short_name = {(char)'Q', (char)'u', (char)'a', (char)'n', (char)'t', (char)'a', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'X', (char)'G', (char)'b', (char)' ', (char)'S', (char)'F', (char)'P', (char)'+'}}, {.brdtype = 49, .ports = 2L, .short_name = {(char)'R', (char)'e', (char)'f', (char)'e', (char)'r', (char)'e', (char)'n', (char)'c', (char)'e', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'C', (char)'X', (char)'4', (char)' ', (char)'O', (char)'p', (char)'t', (char)'i', (char)'o', (char)'n'}}, {.brdtype = 50, .ports = 1L, .short_name = {(char)'R', (char)'e', (char)'f', (char)'e', (char)'r', (char)'e', (char)'n', (char)'c', (char)'e', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'X', (char)'F', (char)'P', (char)' ', (char)'O', (char)'p', (char)'t', (char)'i', (char)'o', (char)'n'}}};
#line 1839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
__inline static int netxen_nic_get_brd_name_by_type(u32 type, char *name)
{
  #line 1841 
  int i;
  #line 1841 
  int found = 0;
  #line 1842 
  i = 0;
  #line 1842 
  while ((unsigned int)i <= 18U) {
    #line 1843 
    if ((unsigned int)netxen_boards[i].brdtype == type) {
      #line 1844 
      strcpy(name,(char *)(& netxen_boards[i].short_name));
      #line 1845 
      found = 1;
      #line 1846 
      break;
    }
    #line 1842 
    i ++;
  }
  #line 1850 
  if (found == 0) {
    #line 1851 
    strcpy(name,(char *)"Unknown");
    #line 1852 
    return -22;
  }
  #line 1855 
  return 0;
}

#line 1871 
#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
struct ethtool_ops netxen_nic_ethtool_ops;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
#line 165 
int register_inetaddr_notifier(struct notifier_block *);
#line 166 
#line 166 
int unregister_inetaddr_notifier(struct notifier_block *);
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
__inline static struct in_device *__in_dev_get_rcu(struct net_device *dev)
{
  #line 219 
  struct in_device *________p1;
  {
    #line 220 
    union __anonunion___u_3146 __u;
    #line 219 
    __read_once_size((void *)(& dev->ip_ptr),(void *)(& __u.__c),8);
    #line 219 
    ________p1 = (__u.__val);
    {
      #line 219 
      bool __warned;
      #line 219 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 219 
        if (! __warned) {
          #line 219 
          if (rcu_read_lock_held() == 0) {
            #line 219 
            __warned = (_Bool)1;
            #line 219 
            lockdep_rcu_suspicious((char *)"./include/linux/inetdevice.h",219,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 219 
  return ________p1;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
__inline static struct in_device *in_dev_get(struct net_device *dev)
{
  #line 224 
  struct in_device *in_dev;
  #line 226 
  rcu_read_lock();
  #line 227 
  in_dev = __in_dev_get_rcu(dev);
  #line 228 
  if (in_dev != (struct in_device *)0) 
                                       #line 229 
                                       refcount_inc(& in_dev->refcnt);
  #line 230 
  rcu_read_unlock();
  #line 231 
  return in_dev;
}

#line 260 
#line 260 
void in_dev_finish_destroy(struct in_device *);
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
__inline static void in_dev_put(struct in_device *idev)
{
  #line 264 
  if ((int)refcount_dec_and_test(& idev->refcnt) != 0) 
                                                       #line 265 
                                                       in_dev_finish_destroy(idev);
  #line 266 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
char netxen_nic_driver_name[11U] = {(char)'n', (char)'e', (char)'t', (char)'x', (char)'e', (char)'n', (char)'_', (char)'n', (char)'i', (char)'c'};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static char netxen_nic_driver_string[37U] = {(char)'Q', (char)'L', (char)'o', (char)'g', (char)'i', (char)'c', (char)'/', (char)'N', (char)'e', (char)'t', (char)'X', (char)'e', (char)'n', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)' ', (char)'v'};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int port_mode = 4;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int wol_port_mode = 5;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int use_msi = 1;
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int use_msi_x = 1;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int auto_fw_reset = -284119278;
#line 45 
#line 1445 
static int netxen_nic_probe(struct pci_dev *pdev, struct pci_device_id *ent);
#line 47 
#line 1629 
static void netxen_nic_remove(struct pci_dev *pdev);
#line 48 
#line 1819 
static int netxen_nic_open(struct net_device *netdev);
#line 49 
#line 1847 
static int netxen_nic_close(struct net_device *netdev);
#line 50 
#line 2036 
static netdev_tx_t netxen_nic_xmit_frame(struct sk_buff *skb, struct net_device *netdev);
#line 52 
#line 2225 
static void netxen_tx_timeout(struct net_device *netdev);
#line 53 
#line 2236 
static void netxen_tx_timeout_task(struct work_struct *work);
#line 54 
#line 2718 
static void netxen_fw_poll_work(struct work_struct *work);
#line 55 
#line 2488 
static void netxen_schedule_work(struct netxen_adapter *adapter, void (*func)(struct work_struct *), int delay);
#line 57 
#line 2496 
static void netxen_cancel_fw_work(struct netxen_adapter *adapter);
#line 58 
#line 2352 
static int netxen_nic_poll(struct napi_struct *napi, int budget);
#line 60 
#line 3106 
static void netxen_create_sysfs_entries(struct netxen_adapter *adapter);
#line 61 
#line 3120 
static void netxen_remove_sysfs_entries(struct netxen_adapter *adapter);
#line 62 
#line 3129 
static void netxen_create_diag_entries(struct netxen_adapter *adapter);
#line 63 
#line 3147 
static void netxen_remove_diag_entries(struct netxen_adapter *adapter);
#line 64 
#line 2414 
static int nx_dev_request_aer(struct netxen_adapter *adapter);
#line 65 
#line 2394 
static int nx_decr_dev_ref_cnt(struct netxen_adapter *adapter);
#line 66 
#line 2460 
static int netxen_can_start_firmware(struct netxen_adapter *adapter);
#line 68 
#line 2289 
static irqreturn_t netxen_intr(int irq, void *data);
#line 69 
#line 2332 
static irqreturn_t netxen_msi_intr(int irq, void *data);
#line 70 
#line 2344 
static irqreturn_t netxen_msix_intr(int irq, void *data);
#line 72 
#line 3175 
static void netxen_free_ip_list(struct netxen_adapter *adapter, bool master);
#line 73 
#line 3278 
static void netxen_restore_indev_addr(struct net_device *netdev, unsigned long event);
#line 74 
#line 2276 
static void netxen_nic_get_stats(struct net_device *netdev, struct rtnl_link_stats64 *stats);
#line 76 
#line 489 
static int netxen_nic_set_mac(struct net_device *netdev, void *p);
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct pci_device_id netxen_pci_tbl[9U] = {{.vendor = 16448U, .device = 1U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 16448U, .device = 2U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 16448U, .device = 3U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 16448U, .device = 4U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 16448U, .device = 5U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 16448U, .device = 36U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 16448U, .device = 37U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}, {.vendor = 16448U, .device = 256U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U}};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
struct pci_device_id __mod_pci__netxen_pci_tbl_device_table[9U];
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static uint32_t crb_cmd_producer[4U] = {136323592U, 136324012U, 136324024U, 136324048U};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
void netxen_nic_update_cmd_producer(struct netxen_adapter *adapter, struct nx_host_tx_ring *tx_ring)
{
  #line 106 
  (*(adapter->io_write))(adapter,tx_ring->crb_cmd_producer,tx_ring->producer);
  #line 107 
  return;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static uint32_t crb_cmd_consumer[4U] = {136323596U, 136324016U, 136324028U, 136324052U};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static void netxen_nic_update_cmd_consumer(struct netxen_adapter *adapter, struct nx_host_tx_ring *tx_ring)
{
  #line 118 
  (*(adapter->io_write))(adapter,tx_ring->crb_cmd_consumer,tx_ring->sw_consumer);
  #line 119 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static uint32_t msi_tgt_status[8U] = {101777688U, 101777760U, 101777764U, 101777768U, 101778272U, 101778276U, 101778280U, 101778284U};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct netxen_legacy_intr_set legacy_intr[8U] = {{.int_vec_bit = 128U, .tgt_status_reg = 101777688U, .tgt_mask_reg = 101777704U, .pci_int_reg = 101789696U}, {.int_vec_bit = 256U, .tgt_status_reg = 101777760U, .tgt_mask_reg = 101777776U, .pci_int_reg = 101789700U}, {.int_vec_bit = 512U, .tgt_status_reg = 101777764U, .tgt_mask_reg = 101777780U, .pci_int_reg = 101789704U}, {.int_vec_bit = 1024U, .tgt_status_reg = 101777768U, .tgt_mask_reg = 101777784U, .pci_int_reg = 101789708U}, {.int_vec_bit = 2048U, .tgt_status_reg = 101778272U, .tgt_mask_reg = 101778288U, .pci_int_reg = 101789712U}, {.int_vec_bit = 4096U, .tgt_status_reg = 101778276U, .tgt_mask_reg = 101778292U, .pci_int_reg = 101789716U}, {.int_vec_bit = 8192U, .tgt_status_reg = 101778280U, .tgt_mask_reg = 101778296U, .pci_int_reg = 101789720U}, {.int_vec_bit = 16384U, .tgt_status_reg = 101778284U, .tgt_mask_reg = 101778300U, .pci_int_reg = 101789724U}};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static void netxen_nic_disable_int(struct nx_host_sds_ring *sds_ring)
{
  #line 132 
  struct netxen_adapter *adapter = sds_ring->adapter;
  #line 134 
  (*(adapter->io_write))(adapter,sds_ring->crb_intr_mask,0U);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static void netxen_nic_enable_int(struct nx_host_sds_ring *sds_ring)
{
  #line 139 
  struct netxen_adapter *adapter = sds_ring->adapter;
  #line 141 
  (*(adapter->io_write))(adapter,sds_ring->crb_intr_mask,1U);
  #line 143 
  if ((adapter->flags & 6U) == 0U) 
                                   #line 144 
                                   (*(adapter->io_write))(adapter,adapter->tgt_mask_reg,64511U);
  #line 145 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_alloc_sds_rings(struct netxen_recv_context *recv_ctx, int count)
{
  #line 150 
  int size = (int)((unsigned long)count * (unsigned long)520U);
  #line 152 
  recv_ctx->sds_rings = (struct nx_host_sds_ring *)kzalloc_0((unsigned long)size,3264U);
  #line 154 
  return recv_ctx->sds_rings == (struct nx_host_sds_ring *)0;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_free_sds_rings(struct netxen_recv_context *recv_ctx)
{
  #line 160 
  kfree((void *)recv_ctx->sds_rings);
  #line 161 
  recv_ctx->sds_rings = (struct nx_host_sds_ring *)0;
  #line 162 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_napi_add(struct netxen_adapter *adapter, struct net_device *netdev)
{
  #line 167 
  int ring;
  #line 168 
  struct nx_host_sds_ring *sds_ring;
  #line 169 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 171 
  if (netxen_alloc_sds_rings(recv_ctx,(int)adapter->max_sds_rings) != 0) 
    #line 172 
    return -12;
  #line 174 
  ring = 0;
  #line 174 
  while ((int)adapter->max_sds_rings > ring) {
    #line 175 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 176 
    netif_napi_add(netdev,& sds_ring->napi,& netxen_nic_poll,64);
    #line 174 
    ring ++;
  }
  #line 180 
  return 0;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_napi_del(struct netxen_adapter *adapter)
{
  #line 186 
  int ring;
  #line 187 
  struct nx_host_sds_ring *sds_ring;
  #line 188 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 190 
  ring = 0;
  #line 190 
  while ((int)adapter->max_sds_rings > ring) {
    #line 191 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 192 
    netif_napi_del(& sds_ring->napi);
    #line 190 
    ring ++;
  }
  #line 195 
  netxen_free_sds_rings(& adapter->recv_ctx);
  #line 196 
  return;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_napi_enable(struct netxen_adapter *adapter)
{
  #line 201 
  int ring;
  #line 202 
  struct nx_host_sds_ring *sds_ring;
  #line 203 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 205 
  ring = 0;
  #line 205 
  while ((int)adapter->max_sds_rings > ring) {
    #line 206 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 207 
    napi_enable(& sds_ring->napi);
    #line 208 
    netxen_nic_enable_int(sds_ring);
    #line 205 
    ring ++;
  }
  #line 210 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_napi_disable(struct netxen_adapter *adapter)
{
  #line 215 
  int ring;
  #line 216 
  struct nx_host_sds_ring *sds_ring;
  #line 217 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 219 
  ring = 0;
  #line 219 
  while ((int)adapter->max_sds_rings > ring) {
    #line 220 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 221 
    netxen_nic_disable_int(sds_ring);
    #line 222 
    napi_synchronize(& sds_ring->napi);
    #line 223 
    napi_disable(& sds_ring->napi);
    #line 219 
    ring ++;
  }
  #line 225 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int nx_set_dma_mask(struct netxen_adapter *adapter)
{
  #line 230 
  uint64_t mask;
  #line 230 
  uint64_t cmask;
  #line 229 
  struct pci_dev *pdev = adapter->pdev;
  #line 232 
  adapter->pci_using_dac = (unsigned char)0U;
  #line 234 
  mask = 4294967295ULL;
  #line 235 
  cmask = 4294967295ULL;
  #line 237 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 239 
                                                     mask = 34359738367ULL;
  else {
    #line 242 
    mask = 549755813887ULL;
    #line 243 
    cmask = mask;
  }
  #line 246 
  if (pci_set_dma_mask(pdev,mask) == 0) {
    #line 246 
    if (pci_set_consistent_dma_mask(pdev,cmask) == 0) {
      #line 248 
      adapter->pci_using_dac = (unsigned char)1U;
      #line 249 
      return 0;
    }
  }
  #line 252 
  return -5;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int nx_update_dma_mask(struct netxen_adapter *adapter)
{
  #line 259 
  int change;
  #line 259 
  int shift;
  #line 259 
  int err;
  #line 260 
  uint64_t mask;
  #line 260 
  uint64_t old_mask;
  #line 260 
  uint64_t old_cmask;
  #line 261 
  struct pci_dev *pdev = adapter->pdev;
  #line 263 
  change = 0;
  #line 265 
  shift = (int)(*(adapter->crb_read))(adapter,136323788UL);
  #line 266 
  if (shift > 32) 
                  #line 267 
                  return 0;
  #line 269 
  if ((unsigned int)adapter->ahw.revision_id > 47U && shift > 9) 
                                                                 #line 270 
                                                                 change = 1;
  else 
    #line 271 
    if ((unsigned int)adapter->ahw.revision_id == 37U && shift <= 4) 
      #line 272 
      change = 1;
  #line 274 
  if (change != 0) {
    #line 275 
    old_mask = pdev->dma_mask;
    #line 276 
    old_cmask = pdev->dev.coherent_dma_mask;
    #line 278 
    if (shift != 32) 
                     #line 278 
                     mask = (1ULL << (shift + 32)) + 18446744073709551615ULL; else 
                                                                    #line 278 
                                                                    mask = 18446744073709551615ULL;
    #line 280 
    err = pci_set_dma_mask(pdev,mask);
    #line 281 
    if (err != 0) 
                  #line 282 
                  goto err_out;
    #line 284 
    if ((unsigned int)adapter->ahw.revision_id > 47U) {
      #line 286 
      err = pci_set_consistent_dma_mask(pdev,mask);
      #line 287 
      if (err != 0) 
                    #line 288 
                    goto err_out;
    }
    #line 290 
    _dev_info(& pdev->dev,(char *)"using %d-bit dma mask\n",shift + 32);
  }
  #line 293 
  return 0;
  #line 295 
  err_out: 
           #line 295 
  ;
  #line 296 
  pci_set_dma_mask(pdev,old_mask);
  #line 297 
  pci_set_consistent_dma_mask(pdev,old_cmask);
  #line 298 
  return err;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_check_hw_init(struct netxen_adapter *adapter, int first_boot)
{
  #line 304 
  u32 val;
  #line 304 
  u32 timeout;
  #line 306 
  if (first_boot == 1431655765) {
    #line 308 
    (*(adapter->crb_write))(adapter,136323580UL,305419896U);
    #line 310 
    if ((unsigned int)adapter->ahw.revision_id > 37U) 
                                                      #line 311 
                                                      return 0;
    #line 314 
    first_boot = (int)(*(adapter->crb_read))(adapter,101711876UL);
    #line 315 
    if ((first_boot & 4) == 0) {
      #line 316 
      first_boot |= 4;
      #line 317 
      (*(adapter->crb_write))(adapter,101711876UL,(unsigned int)first_boot);
      #line 318 
      (*(adapter->crb_read))(adapter,101711876UL);
    }
    #line 322 
    first_boot = (int)(*(adapter->crb_read))(adapter,154140680UL);
    #line 323 
    if (first_boot != 8388623) {
      #line 325 
      (*(adapter->crb_write))(adapter,136323580UL,0U);
      #line 326 
      return -5;
    }
    #line 330 
    val = (*(adapter->crb_read))(adapter,154140764UL);
    #line 331 
    (*(adapter->crb_write))(adapter,154140764UL,val | 1U);
    #line 332 
    timeout = 0U;
    #line 333 
    while (1) {
      #line 334 
      msleep(1U);
      #line 335 
      val = (*(adapter->crb_read))(adapter,136323580UL);
      #line 337 
      timeout ++;
      #line 337 
      if (timeout > 5000U) 
                           #line 338 
                           return -5;
      #line 339 
      if (! (val == 305419896U)) 
                                 #line 333 
                                 break;
    }
  }
  #line 342 
  return 0;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_set_port_mode(struct netxen_adapter *adapter)
{
  #line 347 
  u32 val;
  #line 347 
  u32 data;
  #line 349 
  val = (unsigned int)adapter->ahw.board_type;
  #line 350 
  if (val == 34U || val == 40U) {
    #line 352 
    if (port_mode == 3) {
      #line 353 
      data = 3U;
      #line 354 
      (*(adapter->crb_write))(adapter,136323108UL,data);
    }
    else 
      #line 355 
      if (port_mode == 1) {
        #line 356 
        data = 1U;
        #line 357 
        (*(adapter->crb_write))(adapter,136323108UL,data);
      }
      else 
        #line 358 
        if (port_mode == 5) {
          #line 359 
          data = 5U;
          #line 360 
          (*(adapter->crb_write))(adapter,136323108UL,data);
        }
        else 
          #line 361 
          if (port_mode == 6) {
            #line 362 
            data = 6U;
            #line 363 
            (*(adapter->crb_write))(adapter,136323108UL,data);
          }
          else {
            #line 365 
            data = 4U;
            #line 366 
            (*(adapter->crb_write))(adapter,136323108UL,data);
          }
    #line 369 
    if (((wol_port_mode != 3 && wol_port_mode != 1) && wol_port_mode != 5) && wol_port_mode != 6) 
      #line 373 
      wol_port_mode = 4;
    #line 375 
    (*(adapter->crb_write))(adapter,136323480UL,(unsigned int)wol_port_mode);
  }
  #line 377 
  return;
}

#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_pcie_strap_init(struct netxen_adapter *adapter)
{
  #line 383 
  u32 pdevfuncsave;
  #line 387 
  int i;
  #line 387 
  int pos;
  #line 388 
  struct pci_dev *pdev;
  #line 384 
  u32 c8c9value = 0U;
  #line 385 
  u32 chicken = 0U;
  #line 386 
  u32 control = 0U;
  #line 390 
  pdev = adapter->pdev;
  #line 392 
  chicken = (*(adapter->crb_read))(adapter,101785800UL);
  #line 394 
  chicken &= 4244635647U;
  #line 399 
  pos = pci_find_capability(pdev,16);
  #line 400 
  if (pos == 192) {
    #line 401 
    pci_read_config_dword(pdev,pos + 16,& control);
    #line 402 
    if ((control & 983040U) != 131072U) 
                                        #line 404 
                                        chicken |= 16777216U;
    #line 406 
    _dev_info(& (adapter->pdev)->dev,(char *)"Gen2 strapping detected\n");
    #line 407 
    c8c9value = 987136U;
  }
  else {
    #line 410 
    chicken |= 16777216U;
    #line 411 
    _dev_info(& (adapter->pdev)->dev,(char *)"Gen1 strapping detected\n");
    #line 412 
    if ((unsigned int)adapter->ahw.revision_id == 64U) 
                                                       #line 413 
                                                       c8c9value = 987168U; else 
                                                                    #line 415 
                                                                    c8c9value = 0U;
  }
  #line 418 
  (*(adapter->crb_write))(adapter,101785800UL,chicken);
  #line 420 
  if (c8c9value == 0U) 
                       #line 421 
                       return;
  #line 423 
  pdevfuncsave = pdev->devfn;
  #line 424 
  if ((pdevfuncsave & 7U) != 0U) 
                                 #line 425 
                                 return;
  #line 427 
  i = 0;
  #line 427 
  while (i <= 7) {
    #line 428 
    pci_read_config_dword(pdev,pos + 8,& control);
    #line 429 
    pci_read_config_dword(pdev,pos + 8,& control);
    #line 430 
    pci_write_config_dword(pdev,pos + 8,c8c9value);
    #line 431 
    (pdev->devfn) ++;
    #line 427 
    i ++;
  }
  #line 433 
  pdev->devfn = pdevfuncsave;
  #line 434 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_set_msix_bit(struct pci_dev *pdev, int enable)
{
  #line 438 
  u32 control;
  #line 440 
  if ((unsigned int)pdev->msix_cap != 0U) {
    #line 441 
    pci_read_config_dword(pdev,(int)pdev->msix_cap,& control);
    #line 442 
    if (enable != 0) 
                     #line 443 
                     control |= 32768U; else 
                                             #line 445 
                                             control = 0U;
    #line 446 
    pci_write_config_dword(pdev,(int)pdev->msix_cap,control);
  }
  #line 448 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_init_msix_entries(struct netxen_adapter *adapter, int count)
{
  #line 452 
  int i;
  #line 454 
  i = 0;
  #line 454 
  while (i < count) {
    #line 455 
    adapter->msix_entries[i].entry = (unsigned short)i;
    #line 454 
    i ++;
  }
  #line 456 
  return;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_read_mac_addr(struct netxen_adapter *adapter)
{
  #line 461 
  int i;
  #line 462 
  unsigned char *p;
  #line 463 
  u64 mac_addr;
  #line 464 
  struct net_device *netdev = adapter->netdev;
  #line 465 
  struct pci_dev *pdev = adapter->pdev;
  #line 467 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 468 
    if (netxen_p3_get_mac_addr(adapter,& mac_addr) != 0) 
                                                         #line 469 
                                                         return -5;
  }
  else {
    #line 471 
    if (netxen_get_flash_mac_addr(adapter,& mac_addr) != 0) 
                                                            #line 472 
                                                            return -5;
  }
  #line 475 
  p = (unsigned char *)(& mac_addr);
  #line 476 
  i = 0;
  #line 476 
  while (i <= 5) {
    #line 477 
    *(netdev->dev_addr + (unsigned long)i) = *(p + ((unsigned int)(- i) + 5U));
    #line 476 
    i ++;
  }
  #line 479 
  memcpy((void *)(& adapter->mac_addr),(void *)netdev->dev_addr,(unsigned long)netdev->addr_len);
  #line 483 
  if (! is_valid_ether_addr(netdev->dev_addr)) 
                                               #line 484 
                                               _dev_warn(& pdev->dev,(char *)"Bad MAC address %pM.\n",netdev->dev_addr);
  #line 486 
  return 0;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_set_mac(struct net_device *netdev, void *p)
{
  #line 491 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 492 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 494 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 495 
                                                      return -99;
  #line 497 
  if ((int)netif_running(netdev) != 0) {
    #line 498 
    netif_device_detach(netdev);
    #line 499 
    netxen_napi_disable(adapter);
  }
  #line 502 
  memcpy((void *)(& adapter->mac_addr),(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 503 
  memcpy((void *)netdev->dev_addr,(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 504 
  (*(adapter->macaddr_set))(adapter,(u8 *)(& addr->sa_data));
  #line 506 
  if ((int)netif_running(netdev) != 0) {
    #line 507 
    netif_device_attach(netdev);
    #line 508 
    netxen_napi_enable(adapter);
  }
  #line 510 
  return 0;
}

#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_set_multicast_list(struct net_device *dev)
{
  #line 515 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 517 
  (*(adapter->set_multi))(dev);
  #line 518 
  return;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static netdev_features_t netxen_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 523 
  if ((features & 549755813888ULL) == 0ULL) {
    #line 524 
    netdev_info(dev,(char *)"disabling LRO as RXCSUM is off\n");
    #line 526 
    features &= 18446744073709518847ULL;
  }
  #line 529 
  return features;
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 536 
  int hw_lro;
  #line 535 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 538 
  if (((dev->features ^ features) & 32768ULL) == 0ULL) 
                                                       #line 539 
                                                       return 0;
  #line 541 
  hw_lro = (int)(features >> 12) & 8;
  #line 544 
  if (netxen_config_hw_lro(adapter,hw_lro) != 0) 
                                                 #line 545 
                                                 return -5;
  #line 547 
  if ((features & 32768ULL) == 0ULL) {
    #line 547 
    if (netxen_send_lro_cleanup(adapter) != 0) 
                                               #line 548 
                                               return -5;
  }
  #line 550 
  return 0;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct net_device_ops netxen_netdev_ops = {.ndo_open = & netxen_nic_open, .ndo_stop = & netxen_nic_close, .ndo_start_xmit = & netxen_nic_xmit_frame, .ndo_set_rx_mode = & netxen_set_multicast_list, .ndo_set_mac_address = & netxen_nic_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & netxen_nic_change_mtu, .ndo_tx_timeout = & netxen_tx_timeout, .ndo_get_stats64 = & netxen_nic_get_stats, .ndo_fix_features = & netxen_fix_features, .ndo_set_features = & netxen_set_features};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static bool netxen_function_zero(struct pci_dev *pdev)
{
  #line 569 
  return (_Bool)((pdev->devfn & 7U) == 0U);
}

#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static void netxen_set_interrupt_mode(struct netxen_adapter *adapter, u32 mode)
{
  #line 575 
  (*(adapter->crb_write))(adapter,136323652UL,mode);
  #line 576 
  return;
}

#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static u32 netxen_get_interrupt_mode(struct netxen_adapter *adapter)
{
  #line 580 
  return (*(adapter->crb_read))(adapter,136323652UL);
}

#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_initialize_interrupt_registers(struct netxen_adapter *adapter)
{
  #line 586 
  struct netxen_legacy_intr_set *legacy_intrp;
  #line 587 
  u32 tgt_status_reg;
  #line 587 
  u32 int_state_reg;
  #line 589 
  if ((unsigned int)adapter->ahw.revision_id > 63U) 
                                                    #line 590 
                                                    legacy_intrp = & legacy_intr[(int)adapter->ahw.pci_func]; else 
                                                                    #line 592 
                                                                    legacy_intrp = legacy_intr;
  #line 594 
  tgt_status_reg = legacy_intrp->tgt_status_reg;
  #line 595 
  int_state_reg = 101785708U;
  #line 597 
  adapter->int_vec_bit = legacy_intrp->int_vec_bit;
  #line 598 
  adapter->tgt_status_reg = netxen_get_ioaddr(adapter,tgt_status_reg);
  #line 599 
  adapter->tgt_mask_reg = netxen_get_ioaddr(adapter,legacy_intrp->tgt_mask_reg);
  #line 601 
  adapter->pci_int_reg = netxen_get_ioaddr(adapter,legacy_intrp->pci_int_reg);
  #line 603 
  adapter->isr_int_vec = netxen_get_ioaddr(adapter,101777664U);
  #line 605 
  if ((unsigned int)adapter->ahw.revision_id > 64U) 
                                                    #line 606 
                                                    adapter->crb_int_state_reg = netxen_get_ioaddr(adapter,int_state_reg); else 
                                                                    #line 609 
                                                                    adapter->crb_int_state_reg = netxen_get_ioaddr(adapter,136323796U);
  #line 610 
  return;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_setup_msi_interrupts(struct netxen_adapter *adapter, int num_msix)
{
  #line 617 
  u32 value;
  #line 618 
  int err;
  #line 616 
  struct pci_dev *pdev = adapter->pdev;
  #line 620 
  if ((unsigned int)adapter->msix_supported != 0U) {
    #line 621 
    netxen_init_msix_entries(adapter,num_msix);
    #line 622 
    err = pci_enable_msix_range(pdev,(struct msix_entry *)(& adapter->msix_entries),num_msix,num_msix);
    #line 624 
    if (err > 0) {
      #line 625 
      adapter->flags |= 4U;
      #line 626 
      netxen_set_msix_bit(pdev,1);
      #line 628 
      if ((unsigned int)adapter->rss_supported != 0U) 
                                                      #line 629 
                                                      adapter->max_sds_rings = (unsigned char)num_msix;
      #line 631 
      _dev_info(& pdev->dev,(char *)"using msi-x interrupts\n");
      #line 632 
      return 0;
    }
  }
  #line 637 
  if (use_msi != 0) {
    #line 637 
    if (pci_enable_msi(pdev) == 0) {
      #line 638 
      value = msi_tgt_status[(int)adapter->ahw.pci_func];
      #line 639 
      adapter->flags |= 2U;
      #line 640 
      adapter->tgt_status_reg = netxen_get_ioaddr(adapter,value);
      #line 641 
      adapter->msix_entries[0].vector = pdev->irq;
      #line 642 
      _dev_info(& pdev->dev,(char *)"using msi interrupts\n");
      #line 643 
      return 0;
    }
  }
  #line 646 
  _dev_err(& pdev->dev,(char *)"Failed to acquire MSI-X/MSI interrupt vector\n");
  #line 647 
  return -5;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_setup_intr(struct netxen_adapter *adapter)
{
  #line 653 
  int num_msix;
  #line 652 
  struct pci_dev *pdev = adapter->pdev;
  #line 655 
  if ((unsigned int)adapter->rss_supported != 0U) {
    #line 656 
    if (num_online_cpus() > 3U) 
                                #line 656 
                                num_msix = 4; else 
                                                   #line 656 
                                                   num_msix = 2;
  }
  else 
       #line 659 
       num_msix = 1;
  #line 661 
  adapter->max_sds_rings = (unsigned char)1U;
  #line 662 
  adapter->flags &= 4294967289U;
  #line 664 
  netxen_initialize_interrupt_registers(adapter);
  #line 665 
  netxen_set_msix_bit(pdev,0);
  #line 667 
  if ((int)netxen_function_zero(pdev) != 0) {
    #line 668 
    if (netxen_setup_msi_interrupts(adapter,num_msix) == 0) 
                                                            #line 669 
                                                            netxen_set_interrupt_mode(adapter,1U); else 
                                                                    #line 671 
                                                                    netxen_set_interrupt_mode(adapter,2U);
  }
  else {
    #line 673 
    if (netxen_get_interrupt_mode(adapter) == 1U) {
      #line 673 
      if (netxen_setup_msi_interrupts(adapter,num_msix) != 0) {
        #line 675 
        _dev_err(& pdev->dev,(char *)"Co-existence of MSI-X/MSI and INTx interrupts is not supported\n");
        #line 676 
        return -5;
      }
    }
  }
  #line 680 
  if ((adapter->flags & 6U) == 0U) {
    #line 681 
    adapter->msix_entries[0].vector = pdev->irq;
    #line 682 
    _dev_info(& pdev->dev,(char *)"using legacy interrupts\n");
  }
  #line 684 
  return 0;
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_teardown_intr(struct netxen_adapter *adapter)
{
  #line 690 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 691 
                                   pci_disable_msix(adapter->pdev);
  #line 692 
  if ((adapter->flags & 2U) != 0U) 
                                   #line 693 
                                   pci_disable_msi(adapter->pdev);
  #line 694 
  return;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_cleanup_pci_map(struct netxen_adapter *adapter)
{
  #line 699 
  if (adapter->ahw.db_base != (void *)0) 
                                         #line 700 
                                         iounmap(adapter->ahw.db_base);
  #line 701 
  if (adapter->ahw.pci_base0 != (void *)0) 
                                           #line 702 
                                           iounmap(adapter->ahw.pci_base0);
  #line 703 
  if (adapter->ahw.pci_base1 != (void *)0) 
                                           #line 704 
                                           iounmap(adapter->ahw.pci_base1);
  #line 705 
  if (adapter->ahw.pci_base2 != (void *)0) 
                                           #line 706 
                                           iounmap(adapter->ahw.pci_base2);
  #line 707 
  return;
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_setup_pci_map(struct netxen_adapter *adapter)
{
  #line 714 
  resource_size_t mem_base;
  #line 714 
  resource_size_t db_base;
  #line 715 
  unsigned long mem_len;
  #line 712 
  void *db_ptr = (void *)0;
  #line 715 
  unsigned long db_len = 0UL;
  #line 717 
  struct pci_dev *pdev = adapter->pdev;
  #line 718 
  int pci_func = (int)adapter->ahw.pci_func;
  #line 719 
  struct netxen_hardware_context *ahw = & adapter->ahw;
  #line 721 
  int err = 0;
  #line 727 
  adapter->ahw.crb_win = 4294967295U;
  #line 728 
  adapter->ahw.ocm_win = 4294967295U;
  #line 731 
  mem_base = pdev->resource[0].start;
  #line 732 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 732 
    mem_len = (unsigned long)((pdev->resource[0].end - pdev->resource[0].start) + 1ULL); else 
                                                                    #line 732 
                                                                    mem_len = 0UL;
  #line 735 
  if (mem_len == 134217728UL) {
    #line 737 
    ahw->pci_base0 = ioremap(mem_base,1048576UL);
    #line 738 
    ahw->pci_base1 = ioremap(mem_base + 100663296ULL,9158656UL);
    #line 740 
    ahw->pci_base2 = ioremap(mem_base + 118374400ULL,15843328UL);
    #line 742 
    if ((ahw->pci_base0 == (void *)0 || ahw->pci_base1 == (void *)0) || ahw->pci_base2 == (void *)0) {
      #line 744 
      _dev_err(& pdev->dev,(char *)"failed to map PCI bar 0\n");
      #line 745 
      err = -5;
      #line 746 
      goto err_out;
    }
    #line 749 
    ahw->pci_len0 = 1048576UL;
  }
  else 
    #line 751 
    if (mem_len == 33554432UL) {
      #line 753 
      ahw->pci_base1 = ioremap(mem_base,9158656UL);
      #line 754 
      ahw->pci_base2 = ioremap(mem_base + 17711104ULL,15843328UL);
      #line 756 
      if (ahw->pci_base1 == (void *)0 || ahw->pci_base2 == (void *)0) {
        #line 757 
        _dev_err(& pdev->dev,(char *)"failed to map PCI bar 0\n");
        #line 758 
        err = -5;
        #line 759 
        goto err_out;
      }
    }
    else 
      #line 762 
      if (mem_len == 2097152UL) {
        #line 764 
        ahw->pci_base0 = pci_ioremap_bar(pdev,0);
        #line 765 
        if (ahw->pci_base0 == (void *)0) {
          #line 766 
          _dev_err(& pdev->dev,(char *)"failed to map PCI bar 0\n");
          #line 767 
          return -5;
        }
        #line 769 
        ahw->pci_len0 = mem_len;
      }
      else 
           #line 771 
           return -5;
  #line 774 
  netxen_setup_hwops(adapter);
  #line 776 
  _dev_info(& pdev->dev,(char *)"%dMB memory map\n",(int)(mem_len >> 20));
  #line 778 
  if ((unsigned int)adapter->ahw.revision_id > 79U) 
                                                    #line 779 
                                                    adapter->ahw.ocm_win_crb = netxen_get_ioaddr(adapter,(unsigned int)((pci_func + 2112) * 32) + 101711872U);
  else 
    #line 782 
    if ((unsigned int)adapter->ahw.revision_id > 47U) {
      #line 783 
      unsigned int tmp;
      #line 783 
      if (pci_func <= 3) 
                         #line 783 
                         tmp = (unsigned int)((pci_func + 2064) * 32) + 101711872U; else 
                                                                    #line 783 
                                                                    tmp = (unsigned int)((pci_func + 4134) * 16) + 101711872U;
      #line 783 
      ;
      #line 783 
      adapter->ahw.ocm_win_crb = netxen_get_ioaddr(adapter,tmp);
    }
  #line 787 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 788 
                                                    goto skip_doorbell;
  #line 790 
  db_base = pdev->resource[4].start;
  #line 791 
  if (pdev->resource[4].start != 0ULL || pdev->resource[4].end != pdev->resource[4].start) 
    #line 791 
    db_len = (unsigned long)((pdev->resource[4].end - pdev->resource[4].start) + 1ULL); else 
                                                                    #line 791 
                                                                    db_len = 0UL;
  #line 793 
  if (db_len == 0UL) {
    #line 794 
    printk((char *)"\001",(char *)(& netxen_nic_driver_name));
    #line 796 
    err = -5;
    #line 797 
    goto err_out;
  }
  #line 800 
  db_ptr = ioremap(db_base,4096UL);
  #line 801 
  if (db_ptr == (void *)0) {
    #line 802 
    printk((char *)"\001",(char *)(& netxen_nic_driver_name));
    #line 804 
    err = -5;
    #line 805 
    goto err_out;
  }
  #line 808 
  skip_doorbell: 
                 #line 808 
  ;
  #line 809 
  adapter->ahw.db_base = db_ptr;
  #line 810 
  adapter->ahw.db_len = db_len;
  #line 811 
  return 0;
  #line 813 
  err_out: 
           #line 813 
  ;
  #line 814 
  netxen_cleanup_pci_map(adapter);
  #line 815 
  return err;
}

#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_check_options(struct netxen_adapter *adapter)
{
  #line 821 
  u32 fw_major;
  #line 821 
  u32 fw_minor;
  #line 821 
  u32 fw_build;
  #line 821 
  u32 prev_fw_version;
  #line 822 
  char brd_name[32U];
  #line 823 
  char serial_num[32U];
  #line 824 
  int i;
  #line 824 
  int offset;
  #line 824 
  int val;
  #line 824 
  int err;
  #line 825 
  __le32 *ptr32;
  #line 884 
  char *tmp_3;
  #line 826 
  struct pci_dev *pdev = adapter->pdev;
  #line 828 
  adapter->driver_mismatch = (unsigned char)0U;
  #line 830 
  ptr32 = (__le32 *)(& serial_num);
  #line 831 
  offset = 4098076;
  #line 832 
  i = 0;
  #line 832 
  while (i <= 7) {
    #line 833 
    err = netxen_rom_fast_read(adapter,offset,& val);
    #line 834 
    if (err != 0) {
      #line 835 
      _dev_err(& pdev->dev,(char *)"error reading board info\n");
      #line 836 
      adapter->driver_mismatch = (unsigned char)1U;
      #line 837 
      return;
    }
    #line 839 
    *(ptr32 + (unsigned long)i) = (unsigned int)val;
    #line 840 
    offset = (int)((unsigned int)offset + 4U);
    #line 832 
    i ++;
  }
  #line 843 
  fw_major = (*(adapter->crb_read))(adapter,136323408UL);
  #line 844 
  fw_minor = (*(adapter->crb_read))(adapter,136323412UL);
  #line 845 
  fw_build = (*(adapter->crb_read))(adapter,136323416UL);
  #line 846 
  prev_fw_version = adapter->fw_version;
  #line 847 
  adapter->fw_version = ((fw_major << 24) + (fw_minor << 16)) + fw_build;
  #line 850 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
    #line 851 
    if (adapter->mdump.md_template == (void *)0 || adapter->fw_version > prev_fw_version) {
      #line 853 
      kfree(adapter->mdump.md_template);
      #line 854 
      adapter->mdump.md_template = (void *)0;
      #line 855 
      err = netxen_setup_minidump(adapter);
      #line 856 
      if (err != 0) 
                    #line 857 
                    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to setup minidump rcode = %d\n",err);
    }
  #line 862 
  if ((unsigned int)adapter->portnum == 0U) {
    #line 867 
    struct module *__mod;
    #line 867 
    char *tmp_0;
    #line 863 
    if (netxen_nic_get_brd_name_by_type((unsigned int)adapter->ahw.board_type,
                                      (char *)(& brd_name)) != 0) 
      #line 865 
      strcpy((char *)(& serial_num),(char *)"Unknown");
    #line 867 
    ;
    #line 867 
    __mod = & __this_module;
    #line 867 
    if (__mod != (struct module *)0) 
                                     #line 867 
                                     tmp_0 = (char *)(& __mod->name); else 
                                                                    #line 867 
                                                                    tmp_0 = (char *)"kernel";
    #line 867 
    printk((char *)"\001",tmp_0,(char *)(& brd_name),(char *)(& serial_num),(int)adapter->ahw.revision_id);
  }
  #line 872 
  if (adapter->fw_version <= 50594007U) {
    #line 873 
    adapter->driver_mismatch = (unsigned char)1U;
    #line 874 
    _dev_warn(& pdev->dev,(char *)"firmware version %d.%d.%d unsupported\n",fw_major,fw_minor,fw_build);
    #line 876 
    return;
  }
  #line 879 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 880 
    i = (int)(*(adapter->crb_read))(adapter,105906220UL);
    #line 881 
    adapter->ahw.cut_through = (unsigned char)((unsigned int)((unsigned char)(i >> 15)) & 1U);
  }
  #line 884 
  if ((unsigned int)adapter->ahw.cut_through != 0U) 
                                                    #line 884 
                                                    tmp_3 = (char *)"cut-through"; else 
                                                                    #line 884 
                                                                    tmp_3 = (char *)"legacy";
  #line 884 
  ;
  #line 884 
  ;
  #line 884 
  ;
  #line 884 
  ;
  #line 884 
  _dev_info(& pdev->dev,(char *)"Driver v%s, firmware v%d.%d.%d [%s]\n",(char *)"4.0.82",fw_major,fw_minor,fw_build,tmp_3);
  #line 888 
  if (adapter->fw_version > 67109085U) 
                                       #line 889 
                                       adapter->capabilities = (*(adapter->crb_read))(adapter,136323368UL);
  #line 891 
  if ((unsigned int)adapter->ahw.port_type == 2U) {
    #line 892 
    adapter->num_rxd = (unsigned short)4096U;
    #line 893 
    adapter->num_jumbo_rxd = (unsigned short)1024U;
  }
  else 
    #line 894 
    if ((unsigned int)adapter->ahw.port_type == 1U) {
      #line 895 
      adapter->num_rxd = (unsigned short)2048U;
      #line 896 
      adapter->num_jumbo_rxd = (unsigned short)512U;
    }
  #line 899 
  adapter->msix_supported = (unsigned char)0U;
  #line 900 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 901 
    adapter->msix_supported = (unsigned char)(use_msi_x != 0);
    #line 902 
    adapter->rss_supported = (unsigned char)(use_msi_x != 0);
  }
  else {
    #line 904 
    u32 flashed_ver = 0U;
    #line 905 
    netxen_rom_fast_read(adapter,4097032,(int *)(& flashed_ver));
    #line 907 
    flashed_ver = ((flashed_ver << 24) + (((flashed_ver >> 8) << 16) & 16711680U)) + (flashed_ver >> 16);
    #line 909 
    if (flashed_ver > 50594127U) 
      #line 910 
      switch ((int)adapter->ahw.board_type) {
        #line 911 
        case 11: 
                 #line 911 
        ;
        #line 912 
        case 15: 
                 #line 912 
        ;
        #line 913 
        adapter->msix_supported = (unsigned char)(use_msi_x != 0);
        #line 914 
        adapter->rss_supported = (unsigned char)(use_msi_x != 0);
        #line 915 
        break;
        #line 916 
        default: 
                 #line 916 
        ;
        #line 917 
        break;
      }
  }
  #line 922 
  adapter->num_txd = (unsigned short)1024U;
  #line 924 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 925 
    adapter->num_lro_rxd = (unsigned short)8U;
    #line 926 
    adapter->max_rds_rings = (unsigned char)3U;
  }
  else {
    #line 928 
    adapter->num_lro_rxd = (unsigned short)0U;
    #line 929 
    adapter->max_rds_rings = (unsigned char)2U;
  }
  #line 931 
  return;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_start_firmware(struct netxen_adapter *adapter)
{
  #line 936 
  int val;
  #line 936 
  int err;
  #line 936 
  int first_boot;
  #line 937 
  struct pci_dev *pdev = adapter->pdev;
  #line 940 
  err = nx_set_dma_mask(adapter);
  #line 941 
  if (err != 0) 
                #line 942 
                return err;
  #line 944 
  err = netxen_can_start_firmware(adapter);
  #line 946 
  if (err < 0) 
               #line 947 
               return err;
  #line 949 
  if (err == 0) 
                #line 950 
                goto wait_init;
  #line 952 
  first_boot = (int)(*(adapter->crb_read))(adapter,136323580UL);
  #line 954 
  err = netxen_check_hw_init(adapter,first_boot);
  #line 955 
  if (err != 0) {
    #line 956 
    _dev_err(& pdev->dev,(char *)"error in init HW init sequence\n");
    #line 957 
    return err;
  }
  #line 960 
  netxen_request_firmware(adapter);
  #line 962 
  err = netxen_need_fw_reset(adapter);
  #line 963 
  if (err < 0) 
               #line 964 
               goto err_out;
  #line 965 
  if (err == 0) 
                #line 966 
                goto pcie_strap_init;
  #line 968 
  if (first_boot != 1431655765) {
    #line 969 
    (*(adapter->crb_write))(adapter,136323664UL,0U);
    #line 970 
    netxen_pinit_from_rom(adapter);
    #line 971 
    msleep(1U);
  }
  #line 974 
  (*(adapter->crb_write))(adapter,136323788UL,1431655765U);
  #line 975 
  (*(adapter->crb_write))(adapter,136323240UL,0U);
  #line 976 
  (*(adapter->crb_write))(adapter,136323244UL,0U);
  #line 978 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 979 
                                                    netxen_set_port_mode(adapter);
  #line 981 
  err = netxen_load_firmware(adapter);
  #line 982 
  if (err != 0) 
                #line 983 
                goto err_out;
  #line 985 
  netxen_release_firmware(adapter);
  #line 987 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 990 
    val = 30292;
    #line 991 
    if ((unsigned int)adapter->ahw.port_type == 2U) 
                                                    #line 992 
                                                    val |= 251658240;
    #line 993 
    (*(adapter->crb_write))(adapter,106958848UL,(unsigned int)val);
  }
  #line 997 
  err = netxen_init_dummy_dma(adapter);
  #line 998 
  if (err != 0) 
                #line 999 
                goto err_out;
  #line 1004 
  val = 262226;
  #line 1007 
  (*(adapter->crb_write))(adapter,136324256UL,(unsigned int)val);
  #line 1009 
  pcie_strap_init: 
                   #line 1009 
  ;
  #line 1010 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1011 
                                                    netxen_pcie_strap_init(adapter);
  #line 1013 
  wait_init: 
             #line 1013 
  ;
  #line 1015 
  err = netxen_phantom_init(adapter,0);
  #line 1016 
  if (err != 0) {
    #line 1017 
    netxen_free_dummy_dma(adapter);
    #line 1018 
    goto err_out;
  }
  #line 1021 
  (*(adapter->crb_write))(adapter,136323392UL,3U);
  #line 1023 
  nx_update_dma_mask(adapter);
  #line 1025 
  netxen_check_options(adapter);
  #line 1027 
  adapter->need_fw_reset = (unsigned char)0U;
  #line 1031 
  err_out: 
           #line 1031 
  ;
  #line 1032 
  netxen_release_firmware(adapter);
  #line 1033 
  return err;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_request_irq(struct netxen_adapter *adapter)
{
  #line 1039 
  irqreturn_t (*handler)(int , void *);
  #line 1040 
  struct nx_host_sds_ring *sds_ring;
  #line 1041 
  int err;
  #line 1041 
  int ring;
  #line 1043 
  unsigned long flags = 0UL;
  #line 1044 
  struct net_device *netdev = adapter->netdev;
  #line 1045 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 1047 
  if ((adapter->flags & 4U) != 0U) 
                                   #line 1048 
                                   handler = & netxen_msix_intr;
  else 
    #line 1049 
    if ((adapter->flags & 2U) != 0U) 
                                     #line 1050 
                                     handler = & netxen_msi_intr;
    else {
      #line 1052 
      flags |= 128UL;
      #line 1053 
      handler = & netxen_intr;
    }
  #line 1055 
  adapter->irq = (unsigned int)netdev->irq;
  #line 1057 
  ring = 0;
  #line 1057 
  while ((int)adapter->max_sds_rings > ring) {
    #line 1058 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 1059 
    sprintf((char *)(& sds_ring->name),(char *)"%s[%d]",(char *)(& netdev->name),ring);
    #line 1060 
    err = cif_request_irq((unsigned int)sds_ring->irq,handler,flags,(char *)(& sds_ring->name),(void *)sds_ring);
    #line 1062 
    if (err != 0) 
                  #line 1063 
                  return err;
    #line 1057 
    ring ++;
  }
  #line 1066 
  return 0;
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_free_irq(struct netxen_adapter *adapter)
{
  #line 1072 
  int ring;
  #line 1073 
  struct nx_host_sds_ring *sds_ring;
  #line 1075 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 1077 
  ring = 0;
  #line 1077 
  while ((int)adapter->max_sds_rings > ring) {
    #line 1078 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 1079 
    cif_free_irq((unsigned int)sds_ring->irq,(void *)sds_ring);
    #line 1077 
    ring ++;
  }
  #line 1081 
  return;
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_init_coalesce_defaults(struct netxen_adapter *adapter)
{
  #line 1086 
  adapter->coal.flags = (unsigned short)4U;
  #line 1087 
  adapter->coal.normal.data.rx_time_us = (unsigned short)3U;
  #line 1089 
  adapter->coal.normal.data.rx_packets = (unsigned short)256U;
  #line 1091 
  adapter->coal.normal.data.tx_time_us = (unsigned short)4U;
  #line 1093 
  adapter->coal.normal.data.tx_packets = (unsigned short)64U;
  #line 1094 
  return;
}

#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int __netxen_nic_up(struct netxen_adapter *adapter, struct net_device *netdev)
{
  #line 1101 
  int err;
  #line 1103 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1104 
                                            return -5;
  #line 1106 
  err = (*(adapter->init_port))(adapter,(int)adapter->physical_port);
  #line 1107 
  if (err != 0) {
    #line 1108 
    printk((char *)"\001",(char *)(& netxen_nic_driver_name),(int)adapter->portnum);
    #line 1110 
    return err;
  }
  #line 1112 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 1113 
                                                     (*(adapter->macaddr_set))(adapter,(u8 *)(& adapter->mac_addr));
  #line 1115 
  (*(adapter->set_multi))(netdev);
  #line 1116 
  (*(adapter->set_mtu))(adapter,(int)netdev->mtu);
  #line 1118 
  adapter->ahw.linkup = (unsigned char)0U;
  #line 1120 
  if ((unsigned int)adapter->max_sds_rings > 1U) 
                                                 #line 1121 
                                                 netxen_config_rss(adapter,1);
  #line 1123 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1124 
                                                    netxen_config_intr_coalesce(adapter);
  #line 1126 
  if ((netdev->features & 32768ULL) != 0ULL) 
                                             #line 1127 
                                             netxen_config_hw_lro(adapter,8);
  #line 1129 
  netxen_napi_enable(adapter);
  #line 1131 
  if ((adapter->capabilities & 32U) != 0U) 
                                           #line 1132 
                                           netxen_linkevent_request(adapter,1); else 
                                                                    #line 1134 
                                                                    netxen_nic_set_link_parameters(adapter);
  #line 1136 
  cif_set_bit_0(1L,& adapter->state);
  #line 1137 
  return 0;
}

#line 1143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static int netxen_nic_up(struct netxen_adapter *adapter, struct net_device *netdev)
{
  #line 1145 
  int err = 0;
  #line 1147 
  rtnl_lock();
  #line 1148 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1149 
                                       err = __netxen_nic_up(adapter,netdev);
  #line 1150 
  rtnl_unlock();
  #line 1152 
  return err;
}

#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void __netxen_nic_down(struct netxen_adapter *adapter, struct net_device *netdev)
{
  #line 1159 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1160 
                                            return;
  #line 1162 
  if (! test_and_set_bit(1L,& adapter->state)) 
                                               #line 1163 
                                               return;
  #line 1164 
  ldv_inline_asm();
  #line 1166 
  netif_carrier_off(netdev);
  #line 1167 
  netif_tx_disable(netdev);
  #line 1169 
  if ((adapter->capabilities & 32U) != 0U) 
                                           #line 1170 
                                           netxen_linkevent_request(adapter,0);
  #line 1172 
  if (adapter->stop_port != (int (*)(struct netxen_adapter *))0) 
                                                                 #line 1173 
                                                                 (*(adapter->stop_port))(adapter);
  #line 1175 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1176 
                                                    netxen_p3_free_mac_list(adapter);
  #line 1178 
  (*(adapter->set_promisc))(adapter,0U);
  #line 1180 
  netxen_napi_disable(adapter);
  #line 1182 
  netxen_release_tx_buffers(adapter);
  #line 1183 
  return;
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static void netxen_nic_down(struct netxen_adapter *adapter, struct net_device *netdev)
{
  #line 1190 
  rtnl_lock();
  #line 1191 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1192 
                                       __netxen_nic_down(adapter,netdev);
  #line 1193 
  rtnl_unlock();
  #line 1194 
  return;
}

#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_attach(struct netxen_adapter *adapter)
{
  #line 1202 
  int err;
  #line 1202 
  int ring;
  #line 1203 
  struct nx_host_rds_ring *rds_ring;
  #line 1204 
  struct nx_host_tx_ring *tx_ring;
  #line 1205 
  u32 capab2;
  #line 1200 
  struct net_device *netdev = adapter->netdev;
  #line 1201 
  struct pci_dev *pdev = adapter->pdev;
  #line 1207 
  if ((unsigned int)adapter->is_up == 777U) 
                                            #line 1208 
                                            return 0;
  #line 1210 
  err = netxen_init_firmware(adapter);
  #line 1211 
  if (err != 0) 
                #line 1212 
                return err;
  #line 1214 
  adapter->flags &= 4294967167U;
  #line 1215 
  if ((adapter->capabilities & 2147483648U) != 0U) {
    #line 1216 
    capab2 = (*(adapter->crb_read))(adapter,136323372UL);
    #line 1217 
    if ((capab2 & 4U) != 0U) 
                             #line 1218 
                             adapter->flags |= 128U;
  }
  #line 1221 
  err = netxen_napi_add(adapter,netdev);
  #line 1222 
  if (err != 0) 
                #line 1223 
                return err;
  #line 1225 
  err = netxen_alloc_sw_resources(adapter);
  #line 1226 
  if (err != 0) {
    #line 1227 
    printk((char *)"\001",(char *)(& netdev->name));
    #line 1229 
    return err;
  }
  #line 1232 
  err = netxen_alloc_hw_resources(adapter);
  #line 1233 
  if (err != 0) {
    #line 1234 
    printk((char *)"\001",(char *)(& netdev->name));
    #line 1236 
    goto err_out_free_sw;
  }
  #line 1239 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 1240 
    tx_ring = adapter->tx_ring;
    #line 1241 
    tx_ring->crb_cmd_producer = netxen_get_ioaddr(adapter,crb_cmd_producer[(int)adapter->portnum]);
    #line 1243 
    tx_ring->crb_cmd_consumer = netxen_get_ioaddr(adapter,crb_cmd_consumer[(int)adapter->portnum]);
    #line 1246 
    tx_ring->producer = 0U;
    #line 1247 
    tx_ring->sw_consumer = 0U;
    #line 1249 
    netxen_nic_update_cmd_producer(adapter,tx_ring);
    #line 1250 
    netxen_nic_update_cmd_consumer(adapter,tx_ring);
  }
  #line 1253 
  ring = 0;
  #line 1253 
  while ((int)adapter->max_rds_rings > ring) {
    #line 1254 
    rds_ring = adapter->recv_ctx.rds_rings + (unsigned long)ring;
    #line 1255 
    netxen_post_rx_buffers(adapter,(unsigned int)ring,rds_ring);
    #line 1253 
    ring ++;
  }
  #line 1258 
  err = netxen_nic_request_irq(adapter);
  #line 1259 
  if (err != 0) {
    #line 1260 
    _dev_err(& pdev->dev,(char *)"%s: failed to setup interrupt\n",(char *)(& netdev->name));
    #line 1262 
    goto err_out_free_rxbuf;
  }
  #line 1265 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1266 
                                                    netxen_nic_init_coalesce_defaults(adapter);
  #line 1268 
  netxen_create_sysfs_entries(adapter);
  #line 1270 
  adapter->is_up = (unsigned short)777U;
  #line 1271 
  return 0;
  #line 1273 
  err_out_free_rxbuf: 
                      #line 1273 
  ;
  #line 1274 
  netxen_release_rx_buffers(adapter);
  #line 1275 
  netxen_free_hw_resources(adapter);
  #line 1276 
  err_out_free_sw: 
                   #line 1276 
  ;
  #line 1277 
  netxen_free_sw_resources(adapter);
  #line 1278 
  return err;
}

#line 1282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_detach(struct netxen_adapter *adapter)
{
  #line 1284 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 1285 
                                            return;
  #line 1287 
  netxen_remove_sysfs_entries(adapter);
  #line 1289 
  netxen_free_hw_resources(adapter);
  #line 1290 
  netxen_release_rx_buffers(adapter);
  #line 1291 
  netxen_nic_free_irq(adapter);
  #line 1292 
  netxen_napi_del(adapter);
  #line 1293 
  netxen_free_sw_resources(adapter);
  #line 1295 
  adapter->is_up = (unsigned short)0U;
  #line 1296 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
int netxen_nic_reset_context(struct netxen_adapter *adapter)
{
  #line 1301 
  int err = 0;
  #line 1302 
  struct net_device *netdev = adapter->netdev;
  #line 1304 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 1305 
                                                       return -16;
  #line 1307 
  if ((unsigned int)adapter->is_up == 777U) {
    #line 1309 
    netif_device_detach(netdev);
    #line 1311 
    if ((int)netif_running(netdev) != 0) 
                                         #line 1312 
                                         __netxen_nic_down(adapter,netdev);
    #line 1314 
    netxen_nic_detach(adapter);
    #line 1316 
    if ((int)netif_running(netdev) != 0) {
      #line 1317 
      err = netxen_nic_attach(adapter);
      #line 1318 
      if (err == 0) 
                    #line 1319 
                    err = __netxen_nic_up(adapter,netdev);
      #line 1321 
      if (err != 0) 
                    #line 1322 
                    goto done;
    }
    #line 1325 
    netif_device_attach(netdev);
  }
  #line 1328 
  done: 
        #line 1328 
  ;
  #line 1329 
  cif_clear_bit(2L,& adapter->state);
  #line 1330 
  return err;
}

#line 1334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_setup_netdev(struct netxen_adapter *adapter, struct net_device *netdev)
{
  #line 1337 
  int err = 0;
  #line 1338 
  struct pci_dev *pdev = adapter->pdev;
  #line 1340 
  adapter->mc_enabled = (unsigned char)0U;
  #line 1341 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1342 
                                                    adapter->max_mc_count = (unsigned char)38U; else 
                                                                    #line 1344 
                                                                    adapter->max_mc_count = (unsigned char)16U;
  #line 1346 
  netdev->netdev_ops = & netxen_netdev_ops;
  #line 1347 
  netdev->watchdog_timeo = 1250;
  #line 1349 
  netxen_nic_change_mtu(netdev,(int)netdev->mtu);
  #line 1351 
  netdev->ethtool_ops = & netxen_nic_ethtool_ops;
  #line 1353 
  netdev->hw_features = 549755879427ULL;
  #line 1356 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1357 
                                                    netdev->hw_features |= 1048592ULL;
  #line 1359 
  netdev->vlan_features |= netdev->hw_features;
  #line 1361 
  if ((unsigned int)adapter->pci_using_dac != 0U) {
    #line 1362 
    netdev->features |= 32ULL;
    #line 1363 
    netdev->vlan_features |= 32ULL;
  }
  #line 1366 
  if ((adapter->capabilities & 512U) != 0U) 
                                            #line 1367 
                                            netdev->hw_features |= 128ULL;
  #line 1369 
  if ((adapter->capabilities & 1024U) != 0U) 
                                             #line 1370 
                                             netdev->hw_features |= 32768ULL;
  #line 1372 
  netdev->features |= netdev->hw_features;
  #line 1374 
  netdev->irq = (int)adapter->msix_entries[0].vector;
  {
    #line 1376 
    struct lock_class_key __key;
    #line 1376 
    __init_work(& adapter->tx_timeout_task,0);
    #line 1376 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 1376 
    adapter->tx_timeout_task.data = __constr_expr_44;
    #line 1376 
    lockdep_init_map(& adapter->tx_timeout_task.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1376 
    INIT_LIST_HEAD_0(& adapter->tx_timeout_task.entry);
    #line 1376 
    adapter->tx_timeout_task.func = & netxen_tx_timeout_task;
  }
  #line 1378 
  if (netxen_read_mac_addr(adapter) != 0) 
                                          #line 1379 
                                          _dev_warn(& pdev->dev,(char *)"failed to read mac addr\n");
  #line 1381 
  netif_carrier_off(netdev);
  #line 1383 
  err = cif_register_netdev(netdev);
  #line 1384 
  if (err != 0) {
    #line 1385 
    _dev_err(& pdev->dev,(char *)"failed to register net device\n");
    #line 1386 
    return err;
  }
  #line 1389 
  return 0;
}

#line 1395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_read_ula_info(struct netxen_adapter *adapter)
{
  #line 1397 
  u32 temp;
  #line 1400 
  if ((unsigned int)adapter->portnum != 0U) 
                                            #line 1401 
                                            return;
  #line 1403 
  temp = (*(adapter->crb_read))(adapter,136323448UL);
  #line 1404 
  switch (temp) {
    #line 1405 
    case (u32)(-623006463): 
                            #line 1405 
    ;
    #line 1406 
    _dev_info(& (adapter->pdev)->dev,(char *)"ULA adapter");
    #line 1407 
    break;
    #line 1408 
    case (u32)(-623006464): 
                            #line 1408 
    ;
    #line 1409 
    _dev_info(& (adapter->pdev)->dev,(char *)"non ULA adapter");
    #line 1410 
    break;
    #line 1411 
    default: 
             #line 1411 
    ;
    #line 1412 
    break;
  }
  #line 1415 
  return;
}

#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_mask_aer_correctable(struct netxen_adapter *adapter)
{
  #line 1423 
  u32 aer_pos;
  #line 1421 
  struct pci_dev *pdev = adapter->pdev;
  #line 1422 
  struct pci_dev *root = (pdev->bus)->self;
  #line 1426 
  if (root == (struct pci_dev *)0) 
                                   #line 1427 
                                   return;
  #line 1429 
  if ((unsigned int)adapter->ahw.board_type != 41U && (unsigned int)adapter->ahw.board_type != 128U) 
    #line 1431 
    return;
  #line 1433 
  if (pci_pcie_type(root) != 4) 
                                #line 1434 
                                return;
  #line 1436 
  aer_pos = (unsigned int)pci_find_ext_capability(root,1);
  #line 1437 
  if (aer_pos == 0U) 
                     #line 1438 
                     return;
  #line 1440 
  pci_write_config_dword(root,(int)(aer_pos + 20U),65535U);
  #line 1441 
  return;
}

#line 1445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 1449 
  int err;
  #line 1451 
  uint8_t revision_id;
  #line 1452 
  u32 val;
  #line 1447 
  struct net_device *netdev = (struct net_device *)0;
  #line 1448 
  struct netxen_adapter *adapter = (struct netxen_adapter *)0;
  #line 1449 
  int i = 0;
  #line 1450 
  int pci_func_id = (int)pdev->devfn & 7;
  #line 1454 
  if ((unsigned int)pdev->revision + 208U <= 17U) {
    #line 1455 
    char *tmp;
    #line 1455 
    struct module *__mod;
    #line 1455 
    __mod = & __this_module;
    #line 1455 
    if (__mod != (struct module *)0) 
                                     #line 1455 
                                     tmp = (char *)(& __mod->name); else 
                                                                    #line 1455 
                                                                    tmp = (char *)"kernel";
    #line 1455 
    printk((char *)"\001",tmp,48,65);
    #line 1457 
    return -19;
  }
  #line 1460 
  err = pci_enable_device(pdev);
  #line 1460 
  if (err != 0) 
                #line 1461 
                return err;
  #line 1463 
  if ((pdev->resource[0].flags & 512UL) == 0UL) {
    #line 1464 
    err = -19;
    #line 1465 
    goto err_out_disable_pdev;
  }
  #line 1468 
  err = pci_request_regions(pdev,(char *)(& netxen_nic_driver_name));
  #line 1468 
  if (err != 0) 
                #line 1469 
                goto err_out_disable_pdev;
  #line 1471 
  if ((unsigned int)pdev->revision > 47U) 
                                          #line 1472 
                                          pci_enable_pcie_error_reporting(pdev);
  #line 1474 
  pci_set_master(pdev);
  #line 1476 
  netdev = cif_alloc_etherdev_mqs(1128,1U,1U);
  #line 1477 
  if (netdev == (struct net_device *)0) {
    #line 1478 
    err = -12;
    #line 1479 
    goto err_out_free_res;
  }
  #line 1482 
  netdev->dev.parent = & pdev->dev;
  #line 1484 
  adapter = (struct netxen_adapter *)netdev_priv(netdev);
  #line 1485 
  adapter->netdev = netdev;
  #line 1486 
  adapter->pdev = pdev;
  #line 1487 
  adapter->ahw.pci_func = (unsigned char)pci_func_id;
  #line 1489 
  revision_id = pdev->revision;
  #line 1490 
  adapter->ahw.revision_id = revision_id;
  {
    #line 1492 
    struct lock_class_key __key;
    #line 1492 
    __rwlock_init(& adapter->ahw.crb_lock,(char *)"&adapter->ahw.crb_lock",& __key);
  }
  #line 1493 
  spinlock_check(& adapter->ahw.mem_lock);
  {
    #line 1493 
    struct lock_class_key __key_0;
    #line 1493 
    __raw_spin_lock_init(& adapter->ahw.mem_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->ahw.mem_lock)->rlock",& __key_0);
  }
  #line 1495 
  spinlock_check(& adapter->tx_clean_lock);
  {
    #line 1495 
    struct lock_class_key __key_1;
    #line 1495 
    __raw_spin_lock_init(& adapter->tx_clean_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->tx_clean_lock)->rlock",& __key_1);
  }
  #line 1496 
  INIT_LIST_HEAD_0(& adapter->mac_list);
  #line 1497 
  INIT_LIST_HEAD_0(& adapter->ip_list);
  #line 1499 
  err = netxen_setup_pci_map(adapter);
  #line 1500 
  if (err != 0) 
                #line 1501 
                goto err_out_free_netdev;
  #line 1504 
  adapter->portnum = (unsigned char)pci_func_id;
  #line 1506 
  err = netxen_nic_get_board_info(adapter);
  #line 1507 
  if (err != 0) {
    #line 1508 
    _dev_err(& pdev->dev,(char *)"Error getting board config info.\n");
    #line 1509 
    goto err_out_iounmap;
  }
  #line 1513 
  netxen_mask_aer_correctable(adapter);
  #line 1517 
  switch ((int)adapter->ahw.board_type) {
    #line 1518 
    case 13: 
             #line 1518 
    ;
    #line 1519 
    case 14: 
             #line 1519 
    ;
    #line 1520 
    if (pci_func_id > 1) 
                         #line 1521 
                         adapter->portnum = (unsigned char)((unsigned int)((unsigned char)pci_func_id) + 254U);
    #line 1522 
    break;
    #line 1523 
    default: 
             #line 1523 
    ;
    #line 1524 
    break;
  }
  #line 1527 
  err = netxen_check_flash_fw_compatibility(adapter);
  #line 1528 
  if (err != 0) 
                #line 1529 
                goto err_out_iounmap;
  #line 1531 
  if ((unsigned int)adapter->portnum == 0U) {
    #line 1532 
    val = (*(adapter->crb_read))(adapter,136323384UL);
    #line 1533 
    if (val + 4294967295U <= 4294967293U) {
      #line 1534 
      (*(adapter->crb_write))(adapter,136323384UL,0U);
      #line 1535 
      adapter->need_fw_reset = (unsigned char)1U;
    }
  }
  #line 1539 
  err = netxen_start_firmware(adapter);
  #line 1540 
  if (err != 0) 
                #line 1541 
                goto err_out_decr_ref;
  #line 1546 
  adapter->physical_port = adapter->portnum;
  #line 1547 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 1548 
    i = (int)(*(adapter->crb_read))(adapter,
                               (unsigned long)((int)adapter->portnum * 4) + 136324240UL);
    #line 1549 
    if (i != 1431655765) 
                         #line 1550 
                         adapter->physical_port = (unsigned char)i;
  }
  #line 1554 
  netdev->min_mtu = 0U;
  #line 1555 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1556 
                                                    netdev->max_mtu = 9600U; else 
                                                                    #line 1558 
                                                                    netdev->max_mtu = 8000U;
  #line 1560 
  netxen_nic_clear_stats(adapter);
  #line 1562 
  err = netxen_setup_intr(adapter);
  #line 1564 
  if (err != 0) {
    #line 1565 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to setup interrupts, error = %d\n",err);
    #line 1567 
    goto err_out_disable_msi;
  }
  #line 1570 
  netxen_read_ula_info(adapter);
  #line 1572 
  err = netxen_setup_netdev(adapter,netdev);
  #line 1573 
  if (err != 0) 
                #line 1574 
                goto err_out_disable_msi;
  #line 1576 
  pci_set_drvdata(pdev,(void *)adapter);
  #line 1578 
  netxen_schedule_work(adapter,& netxen_fw_poll_work,500);
  #line 1580 
  switch ((int)adapter->ahw.port_type) {
    #line 1581 
    case 1: 
            #line 1581 
    ;
    #line 1582 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: GbE port initialized\n",(char *)(& (adapter->netdev)->name));
    #line 1584 
    break;
    #line 1585 
    case 2: 
            #line 1585 
    ;
    #line 1586 
    _dev_info(& (adapter->pdev)->dev,(char *)"%s: XGbE port initialized\n",(char *)(& (adapter->netdev)->name));
    #line 1588 
    break;
  }
  #line 1591 
  netxen_create_diag_entries(adapter);
  #line 1593 
  return 0;
  #line 1595 
  err_out_disable_msi: 
                       #line 1595 
  ;
  #line 1596 
  netxen_teardown_intr(adapter);
  #line 1598 
  netxen_free_dummy_dma(adapter);
  #line 1600 
  err_out_decr_ref: 
                    #line 1600 
  ;
  #line 1601 
  nx_decr_dev_ref_cnt(adapter);
  #line 1603 
  err_out_iounmap: 
                   #line 1603 
  ;
  #line 1604 
  netxen_cleanup_pci_map(adapter);
  #line 1606 
  err_out_free_netdev: 
                       #line 1606 
  ;
  #line 1607 
  cif_free_netdev(netdev);
  #line 1609 
  err_out_free_res: 
                    #line 1609 
  ;
  #line 1610 
  pci_release_regions(pdev);
  #line 1612 
  err_out_disable_pdev: 
                        #line 1612 
  ;
  #line 1613 
  pci_disable_device(pdev);
  #line 1614 
  return err;
}

#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_cleanup_minidump(struct netxen_adapter *adapter)
{
  #line 1620 
  kfree(adapter->mdump.md_template);
  #line 1621 
  adapter->mdump.md_template = (void *)0;
  #line 1623 
  if (adapter->mdump.md_capture_buff != (void *)0) {
    #line 1624 
    cif_vfree_0(adapter->mdump.md_capture_buff);
    #line 1625 
    adapter->mdump.md_capture_buff = (void *)0;
  }
  #line 1627 
  return;
}

#line 1629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_remove(struct pci_dev *pdev)
{
  #line 1631 
  struct netxen_adapter *adapter;
  #line 1632 
  struct net_device *netdev;
  #line 1634 
  adapter = (struct netxen_adapter *)pci_get_drvdata(pdev);
  #line 1635 
  if (adapter == (struct netxen_adapter *)0) 
                                             #line 1636 
                                             return;
  #line 1638 
  netdev = adapter->netdev;
  #line 1640 
  netxen_cancel_fw_work(adapter);
  #line 1642 
  cif_unregister_netdev(netdev);
  #line 1644 
  cancel_work_sync(& adapter->tx_timeout_task);
  #line 1646 
  netxen_free_ip_list(adapter,(_Bool)0);
  #line 1647 
  netxen_nic_detach(adapter);
  #line 1649 
  nx_decr_dev_ref_cnt(adapter);
  #line 1651 
  if ((unsigned int)adapter->portnum == 0U) 
                                            #line 1652 
                                            netxen_free_dummy_dma(adapter);
  #line 1654 
  cif_clear_bit(2L,& adapter->state);
  #line 1656 
  netxen_teardown_intr(adapter);
  #line 1657 
  netxen_set_interrupt_mode(adapter,0U);
  #line 1658 
  netxen_remove_diag_entries(adapter);
  #line 1660 
  netxen_cleanup_pci_map(adapter);
  #line 1662 
  netxen_release_firmware(adapter);
  #line 1664 
  if ((unsigned int)pdev->revision > 47U) {
    #line 1665 
    netxen_cleanup_minidump(adapter);
    #line 1666 
    pci_disable_pcie_error_reporting(pdev);
  }
  #line 1669 
  pci_release_regions(pdev);
  #line 1670 
  pci_disable_device(pdev);
  #line 1672 
  cif_free_netdev(netdev);
  #line 1673 
  return;
}

#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_detach_func(struct netxen_adapter *adapter)
{
  #line 1677 
  struct net_device *netdev = adapter->netdev;
  #line 1679 
  netif_device_detach(netdev);
  #line 1681 
  netxen_cancel_fw_work(adapter);
  #line 1683 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1684 
                                       netxen_nic_down(adapter,netdev);
  #line 1686 
  cancel_work_sync(& adapter->tx_timeout_task);
  #line 1688 
  netxen_nic_detach(adapter);
  #line 1690 
  if ((unsigned int)adapter->portnum == 0U) 
                                            #line 1691 
                                            netxen_free_dummy_dma(adapter);
  #line 1693 
  nx_decr_dev_ref_cnt(adapter);
  #line 1695 
  cif_clear_bit(2L,& adapter->state);
  #line 1696 
  return;
}

#line 1698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_attach_func(struct pci_dev *pdev)
{
  #line 1702 
  int err;
  #line 1700 
  struct netxen_adapter *adapter = pci_get_drvdata(pdev);
  #line 1701 
  struct net_device *netdev = adapter->netdev;
  #line 1704 
  err = pci_enable_device(pdev);
  #line 1705 
  if (err != 0) 
                #line 1706 
                return err;
  #line 1708 
  pci_set_power_state(pdev,0);
  #line 1709 
  pci_set_master(pdev);
  #line 1710 
  pci_restore_state(pdev);
  #line 1712 
  adapter->ahw.crb_win = 4294967295U;
  #line 1713 
  adapter->ahw.ocm_win = 4294967295U;
  #line 1715 
  err = netxen_start_firmware(adapter);
  #line 1716 
  if (err != 0) {
    #line 1717 
    _dev_err(& pdev->dev,(char *)"failed to start firmware\n");
    #line 1718 
    return err;
  }
  #line 1721 
  if ((int)netif_running(netdev) != 0) {
    #line 1722 
    err = netxen_nic_attach(adapter);
    #line 1723 
    if (err != 0) 
                  #line 1724 
                  goto err_out;
    #line 1726 
    err = netxen_nic_up(adapter,netdev);
    #line 1727 
    if (err != 0) 
                  #line 1728 
                  goto err_out_detach;
    #line 1730 
    netxen_restore_indev_addr(netdev,1UL);
  }
  #line 1733 
  netif_device_attach(netdev);
  #line 1734 
  netxen_schedule_work(adapter,& netxen_fw_poll_work,500);
  #line 1735 
  return 0;
  #line 1737 
  err_out_detach: 
                  #line 1737 
  ;
  #line 1738 
  netxen_nic_detach(adapter);
  #line 1739 
  err_out: 
           #line 1739 
  ;
  #line 1740 
  nx_decr_dev_ref_cnt(adapter);
  #line 1741 
  return err;
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static pci_ers_result_t netxen_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 1747 
  struct netxen_adapter *adapter = pci_get_drvdata(pdev);
  #line 1749 
  if (state == 3U) 
                   #line 1750 
                   return 4U;
  #line 1752 
  if (nx_dev_request_aer(adapter) != 0) 
                                        #line 1753 
                                        return 5U;
  #line 1755 
  netxen_nic_detach_func(adapter);
  #line 1757 
  pci_disable_device(pdev);
  #line 1759 
  return 3U;
}

#line 1762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static pci_ers_result_t netxen_io_slot_reset(struct pci_dev *pdev)
{
  #line 1768 
  unsigned int tmp;
  #line 1764 
  int err = 0;
  #line 1766 
  err = netxen_nic_attach_func(pdev);
  #line 1768 
  if (err != 0) 
                #line 1768 
                tmp = 4U; else 
                               #line 1768 
                               tmp = 5U;
  #line 1768 
  return tmp;
}

#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_shutdown(struct pci_dev *pdev)
{
  #line 1773 
  struct netxen_adapter *adapter = pci_get_drvdata(pdev);
  #line 1775 
  netxen_nic_detach_func(adapter);
  #line 1777 
  if (pci_save_state(pdev) != 0) 
                                 #line 1778 
                                 return;
  #line 1780 
  if (netxen_nic_wol_supported(adapter) != 0) {
    #line 1781 
    pci_enable_wake(pdev,4,(_Bool)1);
    #line 1782 
    pci_enable_wake(pdev,3,(_Bool)1);
  }
  #line 1785 
  pci_disable_device(pdev);
  #line 1786 
  return;
}

#line 1790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 1793 
  int retval;
  #line 1792 
  struct netxen_adapter *adapter = pci_get_drvdata(pdev);
  #line 1795 
  netxen_nic_detach_func(adapter);
  #line 1797 
  retval = pci_save_state(pdev);
  #line 1798 
  if (retval != 0) 
                   #line 1799 
                   return retval;
  #line 1801 
  if (netxen_nic_wol_supported(adapter) != 0) {
    #line 1802 
    pci_enable_wake(pdev,4,(_Bool)1);
    #line 1803 
    pci_enable_wake(pdev,3,(_Bool)1);
  }
  #line 1806 
  pci_disable_device(pdev);
  #line 1807 
  ;
  #line 1807 
  pci_set_power_state(pdev,pci_choose_state(pdev,state));
  #line 1809 
  return 0;
}

#line 1813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_resume(struct pci_dev *pdev)
{
  #line 1815 
  return netxen_nic_attach_func(pdev);
}

#line 1819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_open(struct net_device *netdev)
{
  #line 1821 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 1822 
  int err = 0;
  #line 1824 
  if ((unsigned int)adapter->driver_mismatch != 0U) 
                                                    #line 1825 
                                                    return -5;
  #line 1827 
  err = netxen_nic_attach(adapter);
  #line 1828 
  if (err != 0) 
                #line 1829 
                return err;
  #line 1831 
  err = __netxen_nic_up(adapter,netdev);
  #line 1832 
  if (err != 0) 
                #line 1833 
                goto err_out;
  #line 1835 
  netif_start_queue(netdev);
  #line 1837 
  return 0;
  #line 1839 
  err_out: 
           #line 1839 
  ;
  #line 1840 
  netxen_nic_detach(adapter);
  #line 1841 
  return err;
}

#line 1847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_close(struct net_device *netdev)
{
  #line 1849 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 1851 
  __netxen_nic_down(adapter,netdev);
  #line 1852 
  return 0;
}

#line 1856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_tso_check(struct net_device *netdev, struct nx_host_tx_ring *tx_ring, struct cmd_desc_type0 *first_desc, struct sk_buff *skb)
{
  #line 1864 
  u32 producer;
  #line 1865 
  int copied;
  #line 1865 
  int offset;
  #line 1865 
  int copy_len;
  #line 1866 
  struct cmd_desc_type0 *hwdesc;
  #line 1867 
  struct vlan_ethhdr *vh;
  #line 1861 
  u8 opcode = (unsigned char)1U;
  #line 1862 
  __be16 protocol = skb->protocol;
  #line 1863 
  u16 flags = (unsigned short)0U;
  #line 1863 
  u16 vid = (unsigned short)0U;
  #line 1865 
  int hdr_len = 0;
  #line 1865 
  int tso = 0;
  #line 1865 
  int vlan_oob = 0;
  #line 1869 
  if ((unsigned int)protocol == 129U) {
    #line 1871 
    vh = (struct vlan_ethhdr *)skb->data;
    #line 1872 
    protocol = vh->h_vlan_encapsulated_proto;
    #line 1873 
    flags = (unsigned short)16U;
  }
  else 
    #line 1875 
    if ((unsigned int)skb->vlan_present != 0U) {
      #line 1876 
      flags = (unsigned short)64U;
      #line 1877 
      vid = skb->vlan_tci;
      #line 1878 
      first_desc->vlan_TCI = vid;
      #line 1879 
      vlan_oob = 1;
    }
  #line 1882 
  if ((netdev->features & 1114112ULL) != 0ULL) {
    #line 1882 
    ;
    #line 1882 
    if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U) {
      #line 1885 
      hdr_len = (int)((unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb));
      #line 1887 
      first_desc->mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
      #line 1888 
      first_desc->total_hdr_length = (unsigned char)hdr_len;
      #line 1889 
      if (vlan_oob != 0) {
        #line 1890 
        first_desc->total_hdr_length = (unsigned char)((unsigned int)first_desc->total_hdr_length + 4U);
        #line 1891 
        first_desc->tcp_hdr_offset = (unsigned char)4U;
        #line 1892 
        first_desc->ip_hdr_offset = (unsigned char)4U;
        #line 1894 
        flags = (unsigned short)((unsigned int)flags | 16U);
      }
      #line 1897 
      if ((unsigned int)protocol == 56710U) 
                                            #line 1897 
                                            opcode = (unsigned char)6U; else 
                                                                    #line 1897 
                                                                    opcode = (unsigned char)5U;
      #line 1899 
      tso = 1;
    }
    else 
         #line 1882 
         goto _LAND;
  }
  else {
    #line 1882 
    _LAND: 
           #line 1901 
    ;
    #line 1901 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 1902 
      u8 l4proto;
      #line 1904 
      if ((unsigned int)protocol == 8U) {
        #line 1905 
        l4proto = ip_hdr(skb)->protocol;
        #line 1907 
        if ((unsigned int)l4proto == 6U) 
                                         #line 1908 
                                         opcode = (unsigned char)2U;
        else 
          #line 1909 
          if ((unsigned int)l4proto == 17U) 
                                            #line 1910 
                                            opcode = (unsigned char)3U;
      }
      else 
        #line 1911 
        if ((unsigned int)protocol == 56710U) {
          #line 1912 
          l4proto = ipv6_hdr(skb)->nexthdr;
          #line 1914 
          if ((unsigned int)l4proto == 6U) 
                                           #line 1915 
                                           opcode = (unsigned char)11U;
          else 
            #line 1916 
            if ((unsigned int)l4proto == 17U) 
                                              #line 1917 
                                              opcode = (unsigned char)12U;
        }
    }
  }
  #line 1921 
  first_desc->tcp_hdr_offset = (unsigned char)((int)first_desc->tcp_hdr_offset + (int)((unsigned char)skb_transport_offset(skb)));
  #line 1922 
  first_desc->ip_hdr_offset = (unsigned char)((int)first_desc->ip_hdr_offset + (int)((unsigned char)skb_network_offset(skb)));
  #line 1923 
  first_desc->flags_opcode = (unsigned short)(((int)flags & 127) | (((int)opcode << 7) & 8064));
  #line 1925 
  if (tso == 0) 
                #line 1926 
                return;
  #line 1931 
  producer = tx_ring->producer;
  #line 1932 
  copied = 0;
  #line 1933 
  offset = 2;
  #line 1935 
  if (vlan_oob != 0) {
    #line 1941 
    int __UNIQUE_ID___x544;
    #line 1941 
    int tmp_7;
    #line 1938 
    hwdesc = tx_ring->desc_head + (unsigned long)producer;
    #line 1939 
    (tx_ring->cmd_buf_arr + (unsigned long)producer)->skb = (struct sk_buff *)0;
    {
      #line 1941 
      __UNIQUE_ID___x544 = 64 - offset;
      #line 1941 
      int __UNIQUE_ID___y545 = hdr_len + 4;
      #line 1941 
      if (__UNIQUE_ID___x544 < __UNIQUE_ID___y545) 
                                                   #line 1941 
                                                   tmp_7 = __UNIQUE_ID___x544; else 
                                                                    #line 1941 
                                                                    tmp_7 = __UNIQUE_ID___y545;
      }
    #line 1941 
    copy_len = tmp_7;
    #line 1944 
    vh = (struct vlan_ethhdr *)((char *)hwdesc + 2U);
    #line 1945 
    skb_copy_from_linear_data(skb,(void *)vh,12U);
    #line 1946 
    vh->h_vlan_proto = (unsigned short)129U;
    #line 1947 
    vh->h_vlan_TCI = __builtin_bswap16((unsigned short)((int)vid));
    #line 1948 
    skb_copy_from_linear_data_offset(skb,12,(void *)((char *)vh + 16U),(unsigned int)(copy_len + -16));
    #line 1951 
    copied = copy_len + -4;
    #line 1952 
    offset = 0;
    #line 1954 
    producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
  }
  #line 1957 
  while (copied < hdr_len) {
    #line 1959 
    int tmp_9;
    #line 1959 
    int __UNIQUE_ID___x546;
    {
      #line 1959 
      __UNIQUE_ID___x546 = 64 - offset;
      #line 1959 
      int __UNIQUE_ID___y547 = hdr_len - copied;
      #line 1959 
      if (__UNIQUE_ID___x546 < __UNIQUE_ID___y547) 
                                                   #line 1959 
                                                   tmp_9 = __UNIQUE_ID___x546; else 
                                                                    #line 1959 
                                                                    tmp_9 = __UNIQUE_ID___y547;
      }
    #line 1959 
    copy_len = tmp_9;
    #line 1962 
    hwdesc = tx_ring->desc_head + (unsigned long)producer;
    #line 1963 
    (tx_ring->cmd_buf_arr + (unsigned long)producer)->skb = (struct sk_buff *)0;
    #line 1965 
    skb_copy_from_linear_data_offset(skb,copied,(void *)((char *)hwdesc + (unsigned long)offset),(unsigned int)copy_len);
    #line 1968 
    copied += copy_len;
    #line 1969 
    offset = 0;
    #line 1971 
    producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
  }
  #line 1974 
  tx_ring->producer = producer;
  #line 1975 
  ldv_inline_asm();
  #line 1976 
  return;
}

#line 1979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_map_tx_skb(struct pci_dev *pdev, struct sk_buff *skb, struct netxen_cmd_buffer *pbuf)
{
  #line 1982 
  struct netxen_skb_frag *nf;
  #line 1983 
  skb_frag_t *frag;
  #line 1984 
  int i;
  #line 1984 
  int nr_frags;
  #line 1985 
  dma_addr_t map;
  #line 1987 
  nr_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 1988 
  nf = & pbuf->frag_array[0];
  #line 1990 
  ;
  #line 1990 
  ;
  #line 1990 
  map = pci_map_single(pdev,(void *)skb->data,(unsigned long)skb_headlen(skb),1);
  #line 1992 
  if (pci_dma_mapping_error(pdev,map) != 0) 
                                            #line 1993 
                                            goto out_err;
  #line 1995 
  nf->dma = map;
  #line 1996 
  nf->length = (unsigned long long)skb_headlen(skb);
  #line 1998 
  i = 0;
  #line 1998 
  while (i < nr_frags) {
    {
      #line 1999 
      frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 2000 
      nf = & pbuf->frag_array[i + 1];
      #line 2002 
      ;
      #line 2002 
      ;
      #line 2002 
      map = skb_frag_dma_map(& pdev->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 2004 
      if (dma_mapping_error(& pdev->dev,map) != 0) 
                                                   #line 2005 
                                                   goto unwind;
      #line 2007 
      nf->dma = map;
      #line 2008 
      nf->length = (unsigned long long)skb_frag_size(frag);
    }
    #line 1998 
    i ++;
  }
  #line 2011 
  return 0;
  #line 2013 
  unwind: 
          #line 2013 
  ;
  #line 2014 
  while (1) {
    #line 2014 
    i --;
    #line 2014 
    if (! (i >= 0)) 
                    #line 2014 
                    break;
    #line 2015 
    nf = & pbuf->frag_array[i + 1];
    #line 2016 
    pci_unmap_page(pdev,nf->dma,(unsigned long)nf->length,1);
    #line 2017 
    nf->dma = 0ULL;
  }
  #line 2020 
  nf = & pbuf->frag_array[0];
  #line 2021 
  ;
  #line 2021 
  ;
  #line 2021 
  pci_unmap_single(pdev,nf->dma,(unsigned long)skb_headlen(skb),1);
  #line 2022 
  nf->dma = 0ULL;
  #line 2024 
  out_err: 
           #line 2024 
  ;
  #line 2025 
  return -12;
}

#line 2029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static void netxen_clear_cmddesc(u64 *desc)
{
  #line 2031 
  *desc = 0ULL;
  #line 2032 
  *(desc + 2U) = 0ULL;
  #line 2033 
  return;
}

#line 2036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static netdev_tx_t netxen_nic_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 2040 
  struct netxen_cmd_buffer *pbuf;
  #line 2041 
  struct netxen_skb_frag *buffrag;
  #line 2042 
  struct cmd_desc_type0 *hwdesc;
  #line 2042 
  struct cmd_desc_type0 *first_desc;
  #line 2043 
  struct pci_dev *pdev;
  #line 2044 
  int i;
  #line 2044 
  int k;
  #line 2046 
  skb_frag_t *frag;
  #line 2048 
  u32 producer;
  #line 2049 
  int frag_count;
  #line 2038 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 2039 
  struct nx_host_tx_ring *tx_ring = adapter->tx_ring;
  #line 2045 
  int delta = 0;
  #line 2050 
  u32 num_txd = tx_ring->num_desc;
  #line 2052 
  frag_count = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
  #line 2057 
  if (! skb_is_gso(skb)) 
    #line 2057 
    if (frag_count > 14) {
      #line 2059 
      i = 0;
      #line 2059 
      while (frag_count + -14 > i) {
        {
          #line 2060 
          frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
          #line 2061 
          delta = (int)(skb_frag_size(frag) + (unsigned int)delta);
        }
        #line 2059 
        i ++;
      }
      #line 2064 
      if (__pskb_pull_tail(skb,delta) == (void *)0) 
                                                    #line 2065 
                                                    goto drop_packet;
      #line 2067 
      frag_count = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
    }
  #line 2070 
  if ((long)(netxen_tx_avail(tx_ring) <= 10U) != 0L) {
    #line 2071 
    netif_stop_queue(netdev);
    #line 2072 
    ldv_inline_asm();
    #line 2073 
    if (netxen_tx_avail(tx_ring) > 10U) 
                                        #line 2074 
                                        netif_start_queue(netdev); else 
                                                                    #line 2076 
                                                                    return NETDEV_TX_BUSY;
  }
  #line 2079 
  producer = tx_ring->producer;
  #line 2080 
  pbuf = tx_ring->cmd_buf_arr + (unsigned long)producer;
  #line 2082 
  pdev = adapter->pdev;
  #line 2084 
  if (netxen_map_tx_skb(pdev,skb,pbuf) != 0) 
                                             #line 2085 
                                             goto drop_packet;
  #line 2087 
  pbuf->skb = skb;
  #line 2088 
  pbuf->frag_count = (unsigned int)frag_count;
  #line 2090 
  hwdesc = tx_ring->desc_head + (unsigned long)producer;
  #line 2090 
  first_desc = hwdesc;
  #line 2091 
  netxen_clear_cmddesc((u64 *)hwdesc);
  #line 2093 
  first_desc->nfrags__length = ((unsigned int)frag_count & 255U) | (skb->len << 8);
  #line 2094 
  first_desc->port_ctxid = (unsigned char)(((int)adapter->portnum & 15) | ((int)adapter->portnum << 4));
  #line 2096 
  i = 0;
  #line 2096 
  while (i < frag_count) {
    #line 2098 
    k = i % 4;
    #line 2100 
    if (k == 0 && i > 0) {
      #line 2102 
      producer = (producer + 1U) & (num_txd + 4294967295U);
      #line 2103 
      hwdesc = tx_ring->desc_head + (unsigned long)producer;
      #line 2104 
      netxen_clear_cmddesc((u64 *)hwdesc);
      #line 2105 
      (tx_ring->cmd_buf_arr + (unsigned long)producer)->skb = (struct sk_buff *)0;
    }
    #line 2108 
    buffrag = & pbuf->frag_array[i];
    #line 2110 
    hwdesc->buffer_length[k] = (unsigned short)buffrag->length;
    #line 2111 
    switch (k) {
      #line 2112 
      case 0: 
              #line 2112 
      ;
      #line 2113 
      hwdesc->addr_buffer1 = buffrag->dma;
      #line 2114 
      break;
      #line 2115 
      case 1: 
              #line 2115 
      ;
      #line 2116 
      hwdesc->addr_buffer2 = buffrag->dma;
      #line 2117 
      break;
      #line 2118 
      case 2: 
              #line 2118 
      ;
      #line 2119 
      hwdesc->addr_buffer3 = buffrag->dma;
      #line 2120 
      break;
      #line 2121 
      case 3: 
              #line 2121 
      ;
      #line 2122 
      hwdesc->addr_buffer4 = buffrag->dma;
      #line 2123 
      break;
    }
    #line 2096 
    i ++;
  }
  #line 2127 
  tx_ring->producer = (producer + 1U) & (num_txd + 4294967295U);
  #line 2129 
  netxen_tso_check(netdev,tx_ring,first_desc,skb);
  #line 2131 
  adapter->stats.txbytes += (unsigned long long)skb->len;
  #line 2132 
  (adapter->stats.xmitcalled) ++;
  #line 2134 
  netxen_nic_update_cmd_producer(adapter,tx_ring);
  #line 2136 
  return NETDEV_TX_OK;
  #line 2138 
  drop_packet: 
               #line 2138 
  ;
  #line 2139 
  (adapter->stats.txdropped) ++;
  #line 2140 
  dev_kfree_skb_any(skb);
  #line 2141 
  return NETDEV_TX_OK;
}

#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_check_temp(struct netxen_adapter *adapter)
{
  #line 2147 
  uint32_t temp;
  #line 2147 
  uint32_t temp_state;
  #line 2147 
  uint32_t temp_val;
  #line 2146 
  struct net_device *netdev = adapter->netdev;
  #line 2148 
  int rv = 0;
  #line 2150 
  temp = (*(adapter->crb_read))(adapter,136324020UL);
  #line 2152 
  temp_state = temp & 65535U;
  #line 2153 
  temp_val = temp >> 16;
  #line 2155 
  if (temp_state == 3U) {
    #line 2156 
    printk((char *)"\001",(char *)(& netdev->name),temp_val);
    #line 2160 
    rv = 1;
  }
  else 
    #line 2161 
    if (temp_state == 2U) {
      #line 2162 
      if (adapter->temp == 1U) 
                               #line 2163 
                               printk((char *)"\001",(char *)(& netdev->name),temp_val);
    }
    else 
      #line 2170 
      if (adapter->temp == 2U) 
                               #line 2171 
                               printk((char *)"\001",(char *)(& netdev->name),temp_val);
  #line 2177 
  adapter->temp = temp_state;
  #line 2178 
  return rv;
}

#line 2181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
void netxen_advert_link_change(struct netxen_adapter *adapter, int linkup)
{
  #line 2183 
  struct net_device *netdev = adapter->netdev;
  #line 2185 
  if ((unsigned int)adapter->ahw.linkup != 0U && linkup == 0) {
    #line 2186 
    printk((char *)"\001",(char *)(& netxen_nic_driver_name),(char *)(& netdev->name));
    #line 2188 
    adapter->ahw.linkup = (unsigned char)0U;
    #line 2189 
    if ((int)netif_running(netdev) != 0) {
      #line 2190 
      netif_carrier_off(netdev);
      #line 2191 
      netif_stop_queue(netdev);
    }
    #line 2193 
    adapter->link_changed = (unsigned char)((unsigned int)adapter->has_link_events == 0U);
  }
  else 
    #line 2194 
    if ((unsigned int)adapter->ahw.linkup == 0U && linkup != 0) {
      #line 2195 
      printk((char *)"\001",(char *)(& netxen_nic_driver_name),(char *)(& netdev->name));
      #line 2197 
      adapter->ahw.linkup = (unsigned char)1U;
      #line 2198 
      if ((int)netif_running(netdev) != 0) {
        #line 2199 
        netif_carrier_on(netdev);
        #line 2200 
        netif_wake_queue(netdev);
      }
      #line 2202 
      adapter->link_changed = (unsigned char)((unsigned int)adapter->has_link_events == 0U);
    }
  #line 2204 
  return;
}

#line 2206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_handle_phy_intr(struct netxen_adapter *adapter)
{
  #line 2208 
  u32 val;
  #line 2208 
  u32 port;
  #line 2208 
  u32 linkup;
  #line 2210 
  port = (unsigned int)adapter->physical_port;
  #line 2212 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 2213 
    val = (*(adapter->crb_read))(adapter,136323736UL);
    #line 2214 
    val = (val >> (int)adapter->ahw.pci_func * 4) & 15U;
    #line 2215 
    linkup = (unsigned int)(val == 1U);
  }
  else {
    #line 2217 
    val = (*(adapter->crb_read))(adapter,136323732UL);
    #line 2218 
    val = (val >> port * 8U) & 255U;
    #line 2219 
    linkup = (unsigned int)(val == 16U);
  }
  #line 2222 
  netxen_advert_link_change(adapter,(int)linkup);
  #line 2223 
  return;
}

#line 2225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_tx_timeout(struct net_device *netdev)
{
  #line 2227 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 2229 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 2230 
                                               return;
  #line 2232 
  _dev_err(& netdev->dev,(char *)"transmit timeout, resetting.\n");
  #line 2233 
  cif_schedule_work(& adapter->tx_timeout_task);
  #line 2234 
  return;
}

#line 2236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_tx_timeout_task(struct work_struct *work)
{
  #line 2239 
  void *__mptr;
  #line 2239 
  __mptr = (void *)work;
  #line 2238 
  struct netxen_adapter *adapter = ((struct netxen_adapter *)(__mptr + 18446744073709550696U));
  #line 2241 
  if (! netif_running(adapter->netdev)) 
                                        #line 2242 
                                        return;
  #line 2244 
  if ((int)test_and_set_bit(2L,& adapter->state) != 0) 
                                                       #line 2245 
                                                       return;
  #line 2247 
  adapter->tx_timeo_cnt = (u8)((int)adapter->tx_timeo_cnt + 1);
  #line 2247 
  if ((unsigned int)adapter->tx_timeo_cnt > 1U) 
                                                #line 2248 
                                                goto request_reset;
  #line 2250 
  rtnl_lock();
  #line 2251 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 2253 
    netxen_napi_disable(adapter);
    #line 2255 
    netxen_napi_enable(adapter);
    #line 2257 
    netif_wake_queue(adapter->netdev);
    #line 2259 
    cif_clear_bit(2L,& adapter->state);
  }
  else {
    #line 2261 
    cif_clear_bit(2L,& adapter->state);
    #line 2262 
    if (netxen_nic_reset_context(adapter) != 0) {
      #line 2263 
      rtnl_unlock();
      #line 2264 
      goto request_reset;
    }
  }
  #line 2267 
  netif_trans_update(adapter->netdev);
  #line 2268 
  rtnl_unlock();
  #line 2269 
  return;
  #line 2271 
  request_reset: 
                 #line 2271 
  ;
  #line 2272 
  adapter->need_fw_reset = (unsigned char)1U;
  #line 2273 
  cif_clear_bit(2L,& adapter->state);
  #line 2274 
  return;
}

#line 2276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_nic_get_stats(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 2279 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 2281 
  stats->rx_packets = adapter->stats.rx_pkts + adapter->stats.lro_pkts;
  #line 2282 
  stats->tx_packets = adapter->stats.xmitfinished;
  #line 2283 
  stats->rx_bytes = adapter->stats.rxbytes;
  #line 2284 
  stats->tx_bytes = adapter->stats.txbytes;
  #line 2285 
  stats->rx_dropped = adapter->stats.rxdropped;
  #line 2286 
  stats->tx_dropped = adapter->stats.txdropped;
  #line 2287 
  return;
}

#line 2289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static irqreturn_t netxen_intr(int irq, void *data)
{
  #line 2291 
  struct nx_host_sds_ring *sds_ring = (struct nx_host_sds_ring *)data;
  #line 2292 
  struct netxen_adapter *adapter = sds_ring->adapter;
  #line 2293 
  u32 status = 0U;
  #line 2295 
  status = readl(adapter->isr_int_vec);
  #line 2297 
  if ((adapter->int_vec_bit & status) == 0U) 
                                             #line 2298 
                                             return IRQ_NONE;
  #line 2300 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 2302 
    status = readl(adapter->crb_int_state_reg);
    #line 2303 
    if ((status & 768U) != 512U) 
                                 #line 2304 
                                 return IRQ_NONE;
  }
  else {
    #line 2307 
    unsigned long our_int = 0UL;
    #line 2309 
    our_int = (unsigned long)readl(adapter->crb_int_state_reg);
    #line 2312 
    if (! test_and_set_bit((long)((int)adapter->portnum + 7),& our_int)) 
      #line 2313 
      return IRQ_NONE;
    #line 2316 
    writel((unsigned int)our_int,adapter->crb_int_state_reg);
    #line 2319 
    netxen_nic_disable_int(sds_ring);
  }
  #line 2322 
  writel(4294967295U,adapter->tgt_status_reg);
  #line 2324 
  readl(adapter->isr_int_vec);
  #line 2325 
  readl(adapter->isr_int_vec);
  #line 2327 
  napi_schedule(& sds_ring->napi);
  #line 2329 
  return IRQ_HANDLED;
}

#line 2332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static irqreturn_t netxen_msi_intr(int irq, void *data)
{
  #line 2334 
  struct nx_host_sds_ring *sds_ring = (struct nx_host_sds_ring *)data;
  #line 2335 
  struct netxen_adapter *adapter = sds_ring->adapter;
  #line 2338 
  writel(4294967295U,adapter->tgt_status_reg);
  #line 2340 
  napi_schedule(& sds_ring->napi);
  #line 2341 
  return IRQ_HANDLED;
}

#line 2344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static irqreturn_t netxen_msix_intr(int irq, void *data)
{
  #line 2346 
  struct nx_host_sds_ring *sds_ring = (struct nx_host_sds_ring *)data;
  #line 2348 
  napi_schedule(& sds_ring->napi);
  #line 2349 
  return IRQ_HANDLED;
}

#line 2352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_nic_poll(struct napi_struct *napi, int budget)
{
  #line 2355 
  void *__mptr;
  #line 2359 
  int tx_complete;
  #line 2360 
  int work_done;
  #line 2355 
  __mptr = (void *)napi;
  #line 2354 
  struct nx_host_sds_ring *sds_ring = ((struct nx_host_sds_ring *)(__mptr + 18446744073709551576U));
  #line 2357 
  struct netxen_adapter *adapter = sds_ring->adapter;
  #line 2362 
  tx_complete = netxen_process_cmd_ring(adapter);
  #line 2364 
  work_done = netxen_process_rcv_ring(sds_ring,budget);
  #line 2366 
  if (tx_complete == 0) 
                        #line 2367 
                        work_done = budget;
  #line 2369 
  if (work_done < budget) {
    #line 2370 
    napi_complete_done(& sds_ring->napi,work_done);
    #line 2371 
    if ((int)test_bit(1L,& adapter->state) != 0) 
                                                 #line 2372 
                                                 netxen_nic_enable_int(sds_ring);
  }
  #line 2375 
  return work_done;
}

#line 2379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int nx_incr_dev_ref_cnt(struct netxen_adapter *adapter)
{
  #line 2381 
  int count;
  #line 2382 
  if (netxen_pcie_sem_lock(adapter,5,0U) != 0) 
                                               #line 2383 
                                               return -5;
  #line 2385 
  count = (int)(*(adapter->crb_read))(adapter,136323384UL);
  #line 2387 
  count ++;
  #line 2387 
  ;
  #line 2387 
  (*(adapter->crb_write))(adapter,136323384UL,(unsigned int)count);
  #line 2389 
  netxen_pcie_sem_unlock(adapter,5);
  #line 2390 
  return count;
}

#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int nx_decr_dev_ref_cnt(struct netxen_adapter *adapter)
{
  #line 2396 
  int count;
  #line 2396 
  int state;
  #line 2397 
  if (netxen_pcie_sem_lock(adapter,5,0U) != 0) 
                                               #line 2398 
                                               return -5;
  #line 2400 
  count = (int)(*(adapter->crb_read))(adapter,136323384UL);
  {
    #line 2401 
    int __ret_warn_on = count == 0;
    #line 2401 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2402 
      ldv_inline_asm();
      #line 2403 
      ldv_inline_asm();
    }
    #line 2401 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 2403 
  count --;
  #line 2403 
  ;
  #line 2403 
  (*(adapter->crb_write))(adapter,136323384UL,(unsigned int)count);
  #line 2404 
  state = (int)(*(adapter->crb_read))(adapter,136323392UL);
  #line 2406 
  if (count == 0 && state != 7) 
                                #line 2407 
                                (*(adapter->crb_write))(adapter,136323392UL,1U);
  #line 2409 
  netxen_pcie_sem_unlock(adapter,5);
  #line 2410 
  return count;
}

#line 2414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int nx_dev_request_aer(struct netxen_adapter *adapter)
{
  #line 2416 
  u32 state;
  #line 2417 
  int ret = -22;
  #line 2419 
  if (netxen_pcie_sem_lock(adapter,5,0U) != 0) 
                                               #line 2420 
                                               return ret;
  #line 2422 
  state = (*(adapter->crb_read))(adapter,136323392UL);
  #line 2424 
  if (state == 6U) 
                   #line 2425 
                   ret = 0;
  else 
    #line 2426 
    if (state == 3U) {
      #line 2427 
      (*(adapter->crb_write))(adapter,136323392UL,6U);
      #line 2428 
      ret = 0;
    }
  #line 2431 
  netxen_pcie_sem_unlock(adapter,5);
  #line 2432 
  return ret;
}

#line 2436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
int nx_dev_request_reset(struct netxen_adapter *adapter)
{
  #line 2438 
  u32 state;
  #line 2439 
  int ret = -22;
  #line 2441 
  if (netxen_pcie_sem_lock(adapter,5,0U) != 0) 
                                               #line 2442 
                                               return ret;
  #line 2444 
  state = (*(adapter->crb_read))(adapter,136323392UL);
  #line 2446 
  if (state == 4U || state == 7U) 
                                  #line 2447 
                                  ret = 0;
  else 
    #line 2448 
    if (state != 2U && state != 6U) {
      #line 2449 
      (*(adapter->crb_write))(adapter,136323392UL,4U);
      #line 2450 
      adapter->flags |= 64U;
      #line 2451 
      ret = 0;
    }
  #line 2454 
  netxen_pcie_sem_unlock(adapter,5);
  #line 2456 
  return ret;
}

#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_can_start_firmware(struct netxen_adapter *adapter)
{
  #line 2462 
  int count;
  #line 2463 
  int can_start = 0;
  #line 2465 
  if (netxen_pcie_sem_lock(adapter,5,0U) != 0) {
    #line 2466 
    nx_incr_dev_ref_cnt(adapter);
    #line 2467 
    return -1;
  }
  #line 2470 
  count = (int)(*(adapter->crb_read))(adapter,136323384UL);
  #line 2472 
  if ((unsigned int)count > 7U) 
                                #line 2473 
                                count = 0;
  #line 2475 
  if (count == 0) {
    #line 2476 
    can_start = 1;
    #line 2477 
    (*(adapter->crb_write))(adapter,136323392UL,2U);
  }
  #line 2480 
  count ++;
  #line 2480 
  ;
  #line 2480 
  (*(adapter->crb_write))(adapter,136323384UL,(unsigned int)count);
  #line 2482 
  netxen_pcie_sem_unlock(adapter,5);
  #line 2484 
  return can_start;
}

#line 2488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_schedule_work(struct netxen_adapter *adapter, void (*func)(struct work_struct *), int delay)
{
  {
    #line 2491 
    struct lock_class_key __key;
    #line 2491 
    __init_work(& adapter->fw_work.work,0);
    #line 2491 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 2491 
    adapter->fw_work.work.data = __constr_expr_45;
    #line 2491 
    lockdep_init_map(& adapter->fw_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 2491 
    INIT_LIST_HEAD_0(& adapter->fw_work.work.entry);
    #line 2491 
    adapter->fw_work.work.func = func;
  }
  {
    #line 2491 
    struct lock_class_key __key_0;
    #line 2491 
    init_timer_key(& adapter->fw_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->fw_work)->timer",& __key_0);
  }
  #line 2492 
  cif_schedule_delayed_work(& adapter->fw_work,(unsigned long)delay);
  #line 2493 
  return;
}

#line 2496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_cancel_fw_work(struct netxen_adapter *adapter)
{
  #line 2498 
  while (1) {
    #line 2498 
    if (! ((int)test_and_set_bit(2L,& adapter->state) != 0)) 
                                                             #line 2498 
                                                             break;
    #line 2499 
    msleep(10U);
  }
  #line 2501 
  cancel_delayed_work_sync(& adapter->fw_work);
  #line 2502 
  return;
}

#line 2505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_attach_work(struct work_struct *work)
{
  #line 2507 
  void *__mptr;
  #line 2507 
  __mptr = (void *)work;
  #line 2507 
  struct netxen_adapter *adapter = ((struct netxen_adapter *)(__mptr + 18446744073709550880U));
  #line 2509 
  struct net_device *netdev = adapter->netdev;
  #line 2510 
  int err = 0;
  #line 2512 
  if ((int)netif_running(netdev) != 0) {
    #line 2513 
    err = netxen_nic_attach(adapter);
    #line 2514 
    if (err != 0) 
                  #line 2515 
                  goto done;
    #line 2517 
    err = netxen_nic_up(adapter,netdev);
    #line 2518 
    if (err != 0) {
      #line 2519 
      netxen_nic_detach(adapter);
      #line 2520 
      goto done;
    }
    #line 2523 
    netxen_restore_indev_addr(netdev,1UL);
  }
  #line 2526 
  netif_device_attach(netdev);
  #line 2528 
  done: 
        #line 2528 
  ;
  #line 2529 
  adapter->fw_fail_cnt = (unsigned char)0U;
  #line 2530 
  cif_clear_bit(2L,& adapter->state);
  #line 2531 
  netxen_schedule_work(adapter,& netxen_fw_poll_work,500);
  #line 2532 
  return;
}

#line 2535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_fwinit_work(struct work_struct *work)
{
  #line 2537 
  void *__mptr;
  #line 2539 
  int dev_state;
  #line 2540 
  int count;
  #line 2537 
  __mptr = (void *)work;
  #line 2537 
  struct netxen_adapter *adapter = ((struct netxen_adapter *)(__mptr + 18446744073709550880U));
  #line 2541 
  dev_state = (int)(*(adapter->crb_read))(adapter,136323392UL);
  #line 2542 
  if ((adapter->flags & 64U) != 0U) {
    #line 2543 
    count = (int)(*(adapter->crb_read))(adapter,136323384UL);
    {
      #line 2544 
      int __ret_warn_on = count == 0;
      #line 2544 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 2545 
        ldv_inline_asm();
        #line 2546 
        ldv_inline_asm();
      }
      #line 2544 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 2545 
    if (count == 1) {
      #line 2546 
      if ((unsigned int)adapter->mdump.md_enabled != 0U) {
        #line 2547 
        rtnl_lock();
        #line 2548 
        netxen_dump_fw(adapter);
        #line 2549 
        rtnl_unlock();
      }
      #line 2551 
      adapter->flags &= 4294967231U;
      #line 2552 
      if (netxen_pcie_sem_lock(adapter,5,0U) != 0) {
        #line 2553 
        cif_clear_bit(2L,& adapter->state);
        #line 2554 
        (*(adapter->crb_write))(adapter,136323392UL,7U);
        #line 2556 
        return;
      }
      #line 2558 
      count = (int)(*(adapter->crb_read))(adapter,136323384UL);
      #line 2559 
      count --;
      #line 2559 
      ;
      #line 2559 
      (*(adapter->crb_write))(adapter,136323384UL,(unsigned int)count);
      #line 2560 
      (*(adapter->crb_write))(adapter,136323392UL,1U);
      #line 2561 
      dev_state = 1;
      #line 2562 
      netxen_pcie_sem_unlock(adapter,5);
    }
  }
  #line 2566 
  switch (dev_state) {
    #line 2567 
    case 1: 
            #line 2567 
    ;
    #line 2568 
    case 3: 
            #line 2568 
    ;
    #line 2569 
    if (netxen_start_firmware(adapter) == 0) {
      #line 2570 
      netxen_schedule_work(adapter,& netxen_attach_work,0);
      #line 2571 
      return;
    }
    #line 2573 
    break;
    #line 2575 
    case 4: 
            #line 2575 
    ;
    #line 2576 
    case 2: 
            #line 2576 
    ;
    #line 2577 
    netxen_schedule_work(adapter,& netxen_fwinit_work,1000);
    #line 2579 
    return;
    #line 2581 
    case 7: 
            #line 2581 
    ;
    #line 2582 
    default: 
             #line 2582 
    ;
    #line 2583 
    nx_incr_dev_ref_cnt(adapter);
    #line 2584 
    break;
  }
  #line 2587 
  if (netxen_pcie_sem_lock(adapter,5,0U) != 0) {
    #line 2588 
    cif_clear_bit(2L,& adapter->state);
    #line 2589 
    return;
  }
  #line 2591 
  (*(adapter->crb_write))(adapter,136323392UL,7U);
  #line 2592 
  netxen_pcie_sem_unlock(adapter,5);
  #line 2593 
  _dev_err(& (adapter->pdev)->dev,(char *)"%s: Device initialization Failed\n",(char *)(& (adapter->netdev)->name));
  #line 2596 
  cif_clear_bit(2L,& adapter->state);
  #line 2597 
  return;
}

#line 2600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_detach_work(struct work_struct *work)
{
  #line 2602 
  void *__mptr;
  #line 2605 
  int delay;
  #line 2606 
  u32 status;
  #line 2602 
  __mptr = (void *)work;
  #line 2602 
  struct netxen_adapter *adapter = ((struct netxen_adapter *)(__mptr + 18446744073709550880U));
  #line 2604 
  struct net_device *netdev = adapter->netdev;
  #line 2605 
  int ref_cnt = 0;
  #line 2608 
  netif_device_detach(netdev);
  #line 2610 
  netxen_nic_down(adapter,netdev);
  #line 2612 
  rtnl_lock();
  #line 2613 
  netxen_nic_detach(adapter);
  #line 2614 
  rtnl_unlock();
  #line 2616 
  status = (*(adapter->crb_read))(adapter,136323240UL);
  #line 2618 
  if ((status & 2147483648U) != 0U) 
                                    #line 2619 
                                    goto err_ret;
  #line 2621 
  if (adapter->temp == 3U) 
                           #line 2622 
                           goto err_ret;
  #line 2624 
  if ((adapter->flags & 64U) == 0U) 
                                    #line 2625 
                                    ref_cnt = nx_decr_dev_ref_cnt(adapter);
  #line 2627 
  if (ref_cnt == -5) 
                     #line 2628 
                     goto err_ret;
  #line 2630 
  if (ref_cnt == 0) 
                    #line 2630 
                    delay = 0; else 
                                    #line 2630 
                                    delay = 1000;
  #line 2632 
  adapter->fw_wait_cnt = (unsigned char)0U;
  #line 2633 
  netxen_schedule_work(adapter,& netxen_fwinit_work,delay);
  #line 2635 
  return;
  #line 2637 
  err_ret: 
           #line 2637 
  ;
  #line 2638 
  cif_clear_bit(2L,& adapter->state);
  #line 2639 
  return;
}

#line 2642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_check_health(struct netxen_adapter *adapter)
{
  #line 2644 
  u32 state;
  #line 2644 
  u32 heartbit;
  #line 2645 
  u32 peg_status;
  #line 2646 
  struct net_device *netdev = adapter->netdev;
  #line 2648 
  state = (*(adapter->crb_read))(adapter,136323392UL);
  #line 2649 
  if (state == 6U) 
                   #line 2650 
                   return 0;
  #line 2652 
  if (netxen_nic_check_temp(adapter) != 0) 
                                           #line 2653 
                                           goto detach;
  #line 2655 
  if ((unsigned int)adapter->need_fw_reset != 0U) {
    #line 2656 
    if (nx_dev_request_reset(adapter) != 0) 
                                            #line 2657 
                                            return 0;
    #line 2658 
    goto detach;
  }
  #line 2666 
  if (state == 4U || state == 7U) {
    #line 2667 
    adapter->need_fw_reset = (unsigned char)1U;
    #line 2668 
    if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                       #line 2669 
                                                       goto detach;
  }
  #line 2672 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 2673 
                                                     return 0;
  #line 2675 
  heartbit = (*(adapter->crb_read))(adapter,136323248UL);
  #line 2676 
  if (adapter->heartbit != heartbit) {
    #line 2677 
    adapter->heartbit = heartbit;
    #line 2678 
    adapter->fw_fail_cnt = (unsigned char)0U;
    #line 2679 
    if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                    #line 2680 
                                                    goto detach;
    #line 2681 
    return 0;
  }
  #line 2684 
  adapter->fw_fail_cnt = (u8)((int)adapter->fw_fail_cnt + 1);
  #line 2684 
  if ((unsigned int)adapter->fw_fail_cnt <= 2U) 
                                                #line 2685 
                                                return 0;
  #line 2687 
  if (nx_dev_request_reset(adapter) != 0) 
                                          #line 2688 
                                          return 0;
  #line 2690 
  cif_clear_bit(0L,& adapter->state);
  #line 2692 
  _dev_err(& netdev->dev,(char *)"firmware hang detected\n");
  #line 2693 
  peg_status = (*(adapter->crb_read))(adapter,136323240UL);
  #line 2694 
  ;
  #line 2694 
  ;
  #line 2694 
  _dev_err(& (adapter->pdev)->dev,(char *)"Dumping hw/fw registers\n",peg_status,(*(adapter->crb_read))(adapter,136323244UL),(*(adapter->crb_read))(adapter,118489148UL),(*(adapter->crb_read))(adapter,119537724UL),(*(adapter->crb_read))(adapter,120586300UL),(*(adapter->crb_read))(adapter,121634876UL),(*(adapter->crb_read))(adapter,116391996UL));
  #line 2706 
  if (((peg_status >> 8) & 2097151U) == 103U) 
                                              #line 2707 
                                              _dev_err(& (adapter->pdev)->dev,(char *)"Firmware aborted with error code 0x00006700. ");
  #line 2710 
  detach: 
          #line 2710 
  ;
  #line 2711 
  if (auto_fw_reset == -284119278) {
    #line 2712 
    if (! test_and_set_bit(2L,& adapter->state)) 
                                                 #line 2713 
                                                 netxen_schedule_work(adapter,& netxen_detach_work,0);
  }
  #line 2714 
  return 1;
}

#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_fw_poll_work(struct work_struct *work)
{
  #line 2720 
  void *__mptr;
  #line 2720 
  __mptr = (void *)work;
  #line 2720 
  struct netxen_adapter *adapter = ((struct netxen_adapter *)(__mptr + 18446744073709550880U));
  #line 2723 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 2724 
                                               goto reschedule;
  #line 2726 
  if ((int)test_bit(1L,& adapter->state) != 0) 
    #line 2726 
    if ((adapter->capabilities & 32U) == 0U) 
      #line 2728 
      if ((unsigned int)adapter->has_link_events == 0U) {
        #line 2730 
        netxen_nic_handle_phy_intr(adapter);
        #line 2732 
        if ((unsigned int)adapter->link_changed != 0U) 
                                                       #line 2733 
                                                       netxen_nic_set_link_parameters(adapter);
      }
  #line 2737 
  if (netxen_check_health(adapter) != 0) 
                                         #line 2738 
                                         return;
  #line 2740 
  reschedule: 
              #line 2740 
  ;
  #line 2741 
  netxen_schedule_work(adapter,& netxen_fw_poll_work,500);
  #line 2742 
  return;
}

#line 2745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_store_bridged_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
{
  #line 2748 
  void *__mptr;
  #line 2750 
  unsigned long new;
  #line 2748 
  __mptr = (void *)dev;
  #line 2748 
  struct net_device *net = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 2749 
  struct netxen_adapter *adapter = netdev_priv(net);
  #line 2751 
  int ret = -22;
  #line 2753 
  if ((adapter->capabilities & 256U) == 0U) 
                                            #line 2754 
                                            goto err_out;
  #line 2756 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 2757 
                                            goto err_out;
  #line 2759 
  if (kstrtoul(buf,2U,& new) != 0) 
                                   #line 2760 
                                   goto err_out;
  #line 2762 
  if (netxen_config_bridged_mode(adapter,new != 0UL) == 0) 
                                                           #line 2763 
                                                           ret = (int)len;
  #line 2765 
  err_out: 
           #line 2765 
  ;
  #line 2766 
  return (long)ret;
}

#line 2770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_show_bridged_mode(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 2773 
  void *__mptr;
  #line 2774 
  struct netxen_adapter *adapter;
  #line 2773 
  __mptr = (void *)dev;
  #line 2773 
  struct net_device *net = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 2775 
  int bridged_mode = 0;
  #line 2777 
  adapter = (struct netxen_adapter *)netdev_priv(net);
  #line 2779 
  if ((adapter->capabilities & 256U) != 0U) 
                                            #line 2780 
                                            bridged_mode = (adapter->flags & 16U) != 0U;
  #line 2782 
  return (long)sprintf(buf,(char *)"%d\n",bridged_mode);
}

#line 2785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct device_attribute dev_attr_bridged_mode = {.attr = {.name = (char *)"bridged_mode", .mode = (unsigned short)420U}, .show = & netxen_show_bridged_mode, .store = & netxen_store_bridged_mode};
#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_store_diag_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
{
  #line 2796 
  unsigned long new;
  #line 2795 
  struct netxen_adapter *adapter = dev_get_drvdata(dev);
  #line 2798 
  if (kstrtoul(buf,2U,& new) != 0) 
                                   #line 2799 
                                   return -22L;
  #line 2801 
  if ((new != 0UL) ^ ((adapter->flags & 32U) != 0U)) 
                                                     #line 2802 
                                                     adapter->flags ^= 32U;
  #line 2804 
  return (long)len;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_show_diag_mode(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 2811 
  struct netxen_adapter *adapter = dev_get_drvdata(dev);
  #line 2813 
  return (long)sprintf(buf,(char *)"%d\n",(adapter->flags & 32U) != 0U);
}

#line 2817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct device_attribute dev_attr_diag_mode = {.attr = {.name = (char *)"diag_mode", .mode = (unsigned short)420U}, .show = & netxen_show_diag_mode, .store = & netxen_store_diag_mode};
#line 2824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_sysfs_validate_crb(struct netxen_adapter *adapter, loff_t offset, size_t size)
{
  #line 2827 
  size_t crb_size = 4UL;
  #line 2829 
  if ((adapter->flags & 32U) == 0U) 
                                    #line 2830 
                                    return -5;
  #line 2832 
  if ((unsigned long long)offset <= 100663295ULL) {
    #line 2833 
    if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                       #line 2834 
                                                       return -22;
    #line 2836 
    if ((unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) 
      #line 2838 
      crb_size = 8UL; else 
                           #line 2840 
                           return -22;
  }
  #line 2843 
  if (size != crb_size || ((unsigned long long)(crb_size + 18446744073709551615UL) & (unsigned long long)offset) != 0ULL) 
    #line 2844 
    return -22;
  #line 2846 
  return 0;
}

#line 2850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_sysfs_read_crb(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 2856 
  u32 data;
  #line 2857 
  u64 qmdata;
  #line 2858 
  int ret;
  #line 2854 
  struct device *dev = kobj_to_dev(kobj);
  #line 2855 
  struct netxen_adapter *adapter = dev_get_drvdata(dev);
  #line 2860 
  ret = netxen_sysfs_validate_crb(adapter,offset,size);
  #line 2861 
  if (ret != 0) 
                #line 2862 
                return (long)ret;
  #line 2864 
  if ((unsigned int)adapter->ahw.revision_id > 47U && (unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) {
    #line 2867 
    netxen_pci_camqm_read_2M(adapter,(unsigned long long)offset,& qmdata);
    #line 2868 
    memcpy((void *)buf,(void *)(& qmdata),size);
  }
  else {
    #line 2870 
    data = (*(adapter->crb_read))(adapter,(unsigned long)offset);
    #line 2871 
    memcpy((void *)buf,(void *)(& data),size);
  }
  #line 2874 
  return (long)size;
}

#line 2878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_sysfs_write_crb(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 2884 
  u32 data;
  #line 2885 
  u64 qmdata;
  #line 2886 
  int ret;
  #line 2882 
  struct device *dev = kobj_to_dev(kobj);
  #line 2883 
  struct netxen_adapter *adapter = dev_get_drvdata(dev);
  #line 2888 
  ret = netxen_sysfs_validate_crb(adapter,offset,size);
  #line 2889 
  if (ret != 0) 
                #line 2890 
                return (long)ret;
  #line 2892 
  if ((unsigned int)adapter->ahw.revision_id > 47U && (unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) {
    #line 2895 
    memcpy((void *)(& qmdata),(void *)buf,size);
    #line 2896 
    netxen_pci_camqm_write_2M(adapter,(unsigned long long)offset,qmdata);
  }
  else {
    #line 2898 
    memcpy((void *)(& data),(void *)buf,size);
    #line 2899 
    (*(adapter->crb_write))(adapter,(unsigned long)offset,data);
  }
  #line 2902 
  return (long)size;
}

#line 2906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_sysfs_validate_mem(struct netxen_adapter *adapter, loff_t offset, size_t size)
{
  #line 2909 
  if ((adapter->flags & 32U) == 0U) 
                                    #line 2910 
                                    return -5;
  #line 2912 
  if (size != 8UL || (offset & 7LL) != 0LL) 
                                            #line 2913 
                                            return -5;
  #line 2915 
  return 0;
}

#line 2919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_sysfs_read_mem(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 2925 
  u64 data;
  #line 2926 
  int ret;
  #line 2923 
  struct device *dev = kobj_to_dev(kobj);
  #line 2924 
  struct netxen_adapter *adapter = dev_get_drvdata(dev);
  #line 2928 
  ret = netxen_sysfs_validate_mem(adapter,offset,size);
  #line 2929 
  if (ret != 0) 
                #line 2930 
                return (long)ret;
  #line 2932 
  if ((*(adapter->pci_mem_read))(adapter,(unsigned long long)offset,& data) != 0) 
    #line 2933 
    return -5L;
  #line 2935 
  memcpy((void *)buf,(void *)(& data),size);
  #line 2937 
  return (long)size;
}

#line 2940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_sysfs_write_mem(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 2946 
  u64 data;
  #line 2947 
  int ret;
  #line 2944 
  struct device *dev = kobj_to_dev(kobj);
  #line 2945 
  struct netxen_adapter *adapter = dev_get_drvdata(dev);
  #line 2949 
  ret = netxen_sysfs_validate_mem(adapter,offset,size);
  #line 2950 
  if (ret != 0) 
                #line 2951 
                return (long)ret;
  #line 2953 
  memcpy((void *)(& data),(void *)buf,size);
  #line 2955 
  if ((*(adapter->pci_mem_write))(adapter,(unsigned long long)offset,data) != 0) 
    #line 2956 
    return -5L;
  #line 2958 
  return (long)size;
}

#line 2962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct bin_attribute bin_attr_crb = {.attr = {.name = (char *)"crb", .mode = (unsigned short)420U}, .read = & netxen_sysfs_read_crb, .write = & netxen_sysfs_write_crb};
#line 2969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct bin_attribute bin_attr_mem = {.attr = {.name = (char *)"mem", .mode = (unsigned short)420U}, .read = & netxen_sysfs_read_mem, .write = & netxen_sysfs_write_mem};
#line 2977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static ssize_t netxen_sysfs_read_dimm(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  #line 2984 
  struct netxen_dimm_cfg dimm;
  #line 2985 
  u8 dw;
  #line 2985 
  u8 rows;
  #line 2985 
  u8 cols;
  #line 2985 
  u8 banks;
  #line 2985 
  u8 ranks;
  #line 2986 
  u32 val;
  #line 2981 
  struct device *dev = kobj_to_dev(kobj);
  #line 2982 
  struct netxen_adapter *adapter = dev_get_drvdata(dev);
  #line 2983 
  struct net_device *netdev = adapter->netdev;
  #line 2988 
  if (attr->size > size) {
    #line 2989 
    netdev_err(netdev,(char *)"Invalid size\n");
    #line 2990 
    return -22L;
  }
  #line 2993 
  memset((void *)(& dimm),0,8UL);
  #line 2994 
  val = (*(adapter->crb_read))(adapter,136323672UL);
  #line 2997 
  if ((val & 2147483648U) != 0U) {
    #line 2998 
    netdev_err(netdev,(char *)"Invalid DIMM flag\n");
    #line 2999 
    dimm.presence = (unsigned char)255U;
    #line 3000 
    goto out;
  }
  #line 3003 
  rows = (unsigned char)((unsigned int)((unsigned char)(val >> 7)) & 15U);
  #line 3004 
  cols = (unsigned char)((unsigned int)((unsigned char)(val >> 11)) & 15U);
  #line 3005 
  ranks = (unsigned char)((unsigned int)((unsigned char)(val >> 15)) & 3U);
  #line 3006 
  banks = (unsigned char)((unsigned int)((unsigned char)(val >> 21)) & 15U);
  #line 3007 
  dw = (unsigned char)((unsigned int)((unsigned char)(val >> 18)) & 3U);
  #line 3009 
  dimm.presence = (unsigned char)((unsigned int)((unsigned char)val) & 1U);
  #line 3012 
  if ((unsigned int)dimm.presence == 0U) {
    #line 3013 
    netdev_err(netdev,(char *)"DIMM not present\n");
    #line 3014 
    goto out;
  }
  #line 3017 
  dimm.dimm_type = (unsigned char)((unsigned int)((unsigned char)(val >> 25)) & 63U);
  #line 3019 
  switch ((int)dimm.dimm_type) {
    #line 3020 
    case 1: 
            #line 3020 
    ;
    #line 3021 
    case 2: 
            #line 3021 
    ;
    #line 3022 
    case 4: 
            #line 3022 
    ;
    #line 3023 
    case 8: 
            #line 3023 
    ;
    #line 3024 
    case 16: 
             #line 3024 
    ;
    #line 3025 
    case 32: 
             #line 3025 
    ;
    #line 3026 
    break;
    #line 3027 
    default: 
             #line 3027 
    ;
    #line 3028 
    netdev_err(netdev,(char *)"Invalid DIMM type %x\n",(int)dimm.dimm_type);
    #line 3029 
    goto out;
  }
  #line 3032 
  if ((val & 2U) != 0U) 
                        #line 3033 
                        dimm.mem_type = (unsigned char)8U; else 
                                                                #line 3035 
                                                                dimm.mem_type = (unsigned char)((unsigned int)((unsigned char)(val >> 3)) & 15U);
  #line 3037 
  if ((val & 4U) != 0U) {
    #line 3038 
    dimm.size = 512U;
    #line 3039 
    goto out;
  }
  #line 3042 
  if ((unsigned int)rows == 0U) {
    #line 3043 
    netdev_err(netdev,(char *)"Invalid no of rows %x\n",(int)rows);
    #line 3044 
    goto out;
  }
  #line 3047 
  if ((unsigned int)cols == 0U) {
    #line 3048 
    netdev_err(netdev,(char *)"Invalid no of columns %x\n",(int)cols);
    #line 3049 
    goto out;
  }
  #line 3052 
  if ((unsigned int)banks == 0U) {
    #line 3053 
    netdev_err(netdev,(char *)"Invalid no of banks %x\n",(int)banks);
    #line 3054 
    goto out;
  }
  #line 3057 
  ranks = (unsigned char)((unsigned int)ranks + 1U);
  #line 3059 
  switch ((int)dw) {
    #line 3060 
    case 0: 
            #line 3060 
    ;
    #line 3061 
    dw = (unsigned char)32U;
    #line 3062 
    break;
    #line 3063 
    case 1: 
            #line 3063 
    ;
    #line 3064 
    dw = (unsigned char)33U;
    #line 3065 
    break;
    #line 3066 
    case 2: 
            #line 3066 
    ;
    #line 3067 
    dw = (unsigned char)36U;
    #line 3068 
    break;
    #line 3069 
    case 3: 
            #line 3069 
    ;
    #line 3070 
    dw = (unsigned char)64U;
    #line 3071 
    break;
    #line 3072 
    case 4: 
            #line 3072 
    ;
    #line 3073 
    dw = (unsigned char)72U;
    #line 3074 
    break;
    #line 3075 
    case 5: 
            #line 3075 
    ;
    #line 3076 
    dw = (unsigned char)80U;
    #line 3077 
    break;
    #line 3078 
    case 6: 
            #line 3078 
    ;
    #line 3079 
    dw = (unsigned char)128U;
    #line 3080 
    break;
    #line 3081 
    case 7: 
            #line 3081 
    ;
    #line 3082 
    dw = (unsigned char)144U;
    #line 3083 
    break;
    #line 3084 
    default: 
             #line 3084 
    ;
    #line 3085 
    netdev_err(netdev,(char *)"Invalid data-width %x\n",(int)dw);
    #line 3086 
    goto out;
  }
  #line 3089 
  dimm.size = (unsigned int)((((((1 << (int)rows) << (int)cols) * (int)dw) * (int)banks) * (int)ranks) / 8);
  #line 3091 
  dimm.size /= 1048576U;
  #line 3092 
  out: 
       #line 3092 
  ;
  #line 3093 
  memcpy((void *)buf,(void *)(& dimm),8UL);
  #line 3094 
  return 8L;
}

#line 3098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct bin_attribute bin_attr_dimm = {.attr = {.name = (char *)"dimm", .mode = (unsigned short)420U}, .size = 8UL, .read = & netxen_sysfs_read_dimm};
#line 3106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_create_sysfs_entries(struct netxen_adapter *adapter)
{
  #line 3108 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3110 
  if ((adapter->capabilities & 256U) != 0U) {
    #line 3112 
    if (cif_device_create_file(dev,& dev_attr_bridged_mode) != 0) 
                                                                  #line 3113 
                                                                  _dev_warn(dev,(char *)"failed to create bridged_mode sysfs entry\n");
  }
  #line 3114 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_remove_sysfs_entries(struct netxen_adapter *adapter)
{
  #line 3122 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3124 
  if ((adapter->capabilities & 256U) != 0U) 
                                            #line 3125 
                                            cif_device_remove_file(dev,& dev_attr_bridged_mode);
  #line 3126 
  return;
}

#line 3129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_create_diag_entries(struct netxen_adapter *adapter)
{
  #line 3132 
  struct device *dev;
  #line 3131 
  struct pci_dev *pdev = adapter->pdev;
  #line 3134 
  dev = & pdev->dev;
  #line 3135 
  if (cif_device_create_file(dev,& dev_attr_diag_mode) != 0) 
                                                             #line 3136 
                                                             _dev_info(dev,(char *)"failed to create diag_mode sysfs entry\n");
  #line 3137 
  if (device_create_bin_file(dev,& bin_attr_crb) != 0) 
                                                       #line 3138 
                                                       _dev_info(dev,(char *)"failed to create crb sysfs entry\n");
  #line 3139 
  if (device_create_bin_file(dev,& bin_attr_mem) != 0) 
                                                       #line 3140 
                                                       _dev_info(dev,(char *)"failed to create mem sysfs entry\n");
  #line 3141 
  if (device_create_bin_file(dev,& bin_attr_dimm) != 0) 
                                                        #line 3142 
                                                        _dev_info(dev,(char *)"failed to create dimm sysfs entry\n");
  #line 3143 
  return;
}

#line 3147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_remove_diag_entries(struct netxen_adapter *adapter)
{
  #line 3149 
  struct pci_dev *pdev = adapter->pdev;
  #line 3150 
  struct device *dev = & pdev->dev;
  #line 3152 
  cif_device_remove_file(dev,& dev_attr_diag_mode);
  #line 3153 
  device_remove_bin_file(dev,& bin_attr_crb);
  #line 3154 
  device_remove_bin_file(dev,& bin_attr_mem);
  #line 3155 
  device_remove_bin_file(dev,& bin_attr_dimm);
  #line 3156 
  return;
}

#line 3163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_destip_supported(struct netxen_adapter *adapter)
{
  #line 3165 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 3166 
                                                     return 0;
  #line 3168 
  if ((unsigned int)adapter->ahw.cut_through != 0U) 
                                                    #line 3169 
                                                    return 0;
  #line 3171 
  return 1;
}

#line 3175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_free_ip_list(struct netxen_adapter *adapter, bool master)
{
  #line 3179 
  void *__mptr_0;
  #line 3179 
  void *__mptr;
  #line 3177 
  struct nx_ip_list *cur;
  #line 3177 
  struct nx_ip_list *tmp_cur;
  #line 3179 
  __mptr = (void *)adapter->ip_list.next;
  #line 3179 
  cur = ((struct nx_ip_list *)__mptr);
  #line 3179 
  __mptr_0 = (void *)cur->list.next;
  #line 3180 
  tmp_cur = ((struct nx_ip_list *)__mptr_0);
  #line 3179 
  while (& cur->list != & adapter->ip_list) {
    #line 3179 
    void *__mptr_1;
    #line 3180 
    if ((int)master != 0) {
      #line 3181 
      if ((int)cur->master != 0) {
        #line 3182 
        netxen_config_ipaddr(adapter,cur->ip_addr,3);
        #line 3184 
        list_del_0(& cur->list);
        #line 3185 
        kfree((void *)cur);
      }
    }
    else {
      #line 3188 
      netxen_config_ipaddr(adapter,cur->ip_addr,3);
      #line 3189 
      list_del_0(& cur->list);
      #line 3190 
      kfree((void *)cur);
    }
    #line 3179 
    cur = tmp_cur;
    #line 3179 
    __mptr_1 = (void *)tmp_cur->list.next;
    #line 3179 
    tmp_cur = ((struct nx_ip_list *)__mptr_1);
  }
  #line 3192 
  return;
}

#line 3196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static bool netxen_list_config_ip(struct netxen_adapter *adapter, struct in_ifaddr *ifa, unsigned long event)
{
  #line 3199 
  struct net_device *dev;
  #line 3200 
  struct nx_ip_list *cur;
  #line 3200 
  struct nx_ip_list *tmp_cur;
  #line 3201 
  struct list_head *head;
  #line 3202 
  bool ret = (_Bool)0;
  #line 3204 
  if (ifa->ifa_dev != (struct in_device *)0) 
                                             #line 3204 
                                             dev = (ifa->ifa_dev)->dev; else 
                                                                    #line 3204 
                                                                    dev = (struct net_device *)0;
  #line 3206 
  if (dev == (struct net_device *)0) 
                                     #line 3207 
                                     goto out;
  #line 3209 
  switch (event) {
    #line 3230 
    void *__mptr_1;
    #line 3230 
    void *__mptr_0;
    #line 3210 
    case (unsigned long)2: 
                           #line 3210 
    ;
    #line 3211 
    head = adapter->ip_list.next;
    #line 3211 
    while (& adapter->ip_list != head) {
      {
        #line 3212 
        void *__mptr;
        #line 3212 
        __mptr = (void *)head;
        #line 3212 
        cur = ((struct nx_ip_list *)__mptr);
        #line 3214 
        if (cur->ip_addr == ifa->ifa_address) 
                                              #line 3215 
                                              goto out;
      }
      #line 3211 
      head = head->next;
    }
    #line 3218 
    cur = (struct nx_ip_list *)kzalloc_0(24UL,2592U);
    #line 3219 
    if (cur == (struct nx_ip_list *)0) 
                                       #line 3220 
                                       goto out;
    #line 3221 
    if ((int)is_vlan_dev(dev) != 0) 
                                    #line 3222 
                                    dev = vlan_dev_real_dev(dev);
    #line 3223 
    cur->master = (_Bool)((int)netif_is_bond_master(dev) != 0);
    #line 3224 
    cur->ip_addr = ifa->ifa_address;
    #line 3225 
    list_add_tail_0(& cur->list,& adapter->ip_list);
    #line 3226 
    netxen_config_ipaddr(adapter,ifa->ifa_address,2);
    #line 3227 
    ret = (_Bool)1;
    #line 3228 
    break;
    #line 3229 
    case (unsigned long)3: 
                           #line 3229 
    ;
    #line 3230 
    __mptr_0 = (void *)adapter->ip_list.next;
    #line 3230 
    cur = ((struct nx_ip_list *)__mptr_0);
    #line 3230 
    __mptr_1 = (void *)cur->list.next;
    #line 3231 
    tmp_cur = ((struct nx_ip_list *)__mptr_1);
    #line 3230 
    while (& cur->list != & adapter->ip_list) {
      #line 3230 
      void *__mptr_2;
      #line 3232 
      if (cur->ip_addr == ifa->ifa_address) {
        #line 3233 
        list_del_0(& cur->list);
        #line 3234 
        kfree((void *)cur);
        #line 3235 
        netxen_config_ipaddr(adapter,ifa->ifa_address,3);
        #line 3237 
        ret = (_Bool)1;
        #line 3238 
        break;
      }
      #line 3230 
      cur = tmp_cur;
      #line 3230 
      __mptr_2 = (void *)tmp_cur->list.next;
      #line 3230 
      tmp_cur = ((struct nx_ip_list *)__mptr_2);
    }
  }
  #line 3242 
  out: 
       #line 3242 
  ;
  #line 3243 
  return ret;
}

#line 3247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_config_indev_addr(struct netxen_adapter *adapter, struct net_device *dev, unsigned long event)
{
  #line 3261 
  struct in_ifaddr *________p1;
  #line 3250 
  struct in_device *indev;
  #line 3251 
  struct in_ifaddr *ifa;
  #line 3253 
  if (netxen_destip_supported(adapter) == 0) 
                                             #line 3254 
                                             return;
  #line 3256 
  indev = in_dev_get(dev);
  #line 3257 
  if (indev == (struct in_device *)0) 
                                      #line 3258 
                                      return;
  #line 3260 
  rcu_read_lock();
  {
    #line 3262 
    union __anonunion___u_3150 __u;
    #line 3261 
    __read_once_size((void *)(& indev->ifa_list),(void *)(& __u.__c),8);
    #line 3261 
    ________p1 = (__u.__val);
    {
      #line 3261 
      bool __warned;
      #line 3261 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 3261 
        if (! __warned) {
          #line 3261 
          if (rcu_read_lock_held() == 0) {
            #line 3261 
            __warned = (_Bool)1;
            #line 3261 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c",3261,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 3261 
  ifa = ________p1;
  #line 3261 
  while (ifa != (struct in_ifaddr *)0) {
    #line 3261 
    struct in_ifaddr *________p1_0;
    #line 3262 
    switch (event) {
      #line 3263 
      case (unsigned long)1: 
                             #line 3263 
      ;
      #line 3264 
      netxen_list_config_ip(adapter,ifa,2UL);
      #line 3265 
      break;
      #line 3266 
      case (unsigned long)2: 
                             #line 3266 
      ;
      #line 3267 
      netxen_list_config_ip(adapter,ifa,3UL);
      #line 3268 
      break;
      #line 3269 
      default: 
               #line 3269 
      ;
      #line 3270 
      break;
    }
    {
      #line 3262 
      union __anonunion___u_3152 __u_0;
      #line 3261 
      __read_once_size((void *)(& ifa->ifa_next),(void *)(& __u_0.__c),8);
      #line 3261 
      ________p1_0 = (__u_0.__val);
      {
        #line 3261 
        bool __warned_0;
        #line 3261 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 3261 
          if (! __warned_0) {
            #line 3261 
            if (rcu_read_lock_held() == 0) {
              #line 3261 
              __warned_0 = (_Bool)1;
              #line 3261 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c",3261,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      }
    #line 3261 
    ifa = ________p1_0;
  }
  #line 3273 
  rcu_read_unlock();
  #line 3274 
  in_dev_put(indev);
  #line 3275 
  return;
}

#line 3278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_restore_indev_addr(struct net_device *netdev, unsigned long event)
{
  #line 3288 
  void *__mptr;
  #line 3288 
  void *__mptr_0;
  #line 3282 
  struct nx_ip_list *pos;
  #line 3282 
  struct nx_ip_list *tmp_pos;
  #line 3283 
  unsigned long ip_event;
  #line 3281 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 3285 
  if (event == 1UL) 
                    #line 3285 
                    ip_event = 2UL; else 
                                         #line 3285 
                                         ip_event = 3UL;
  #line 3286 
  netxen_config_indev_addr(adapter,netdev,event);
  #line 3288 
  __mptr = (void *)adapter->ip_list.next;
  #line 3288 
  pos = ((struct nx_ip_list *)__mptr);
  #line 3288 
  __mptr_0 = (void *)pos->list.next;
  #line 3289 
  tmp_pos = ((struct nx_ip_list *)__mptr_0);
  #line 3288 
  while (& pos->list != & adapter->ip_list) {
    #line 3288 
    void *__mptr_1;
    #line 3289 
    netxen_config_ipaddr(adapter,pos->ip_addr,(int)ip_event);
    #line 3288 
    pos = tmp_pos;
    #line 3288 
    __mptr_1 = (void *)tmp_pos->list.next;
    #line 3288 
    tmp_pos = ((struct nx_ip_list *)__mptr_1);
  }
  #line 3290 
  return;
}

#line 3294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
__inline static bool netxen_config_checkdev(struct net_device *dev)
{
  #line 3296 
  struct netxen_adapter *adapter;
  #line 3298 
  if (dev->netdev_ops != & netxen_netdev_ops) 
                                              #line 3299 
                                              return (_Bool)0;
  #line 3300 
  adapter = (struct netxen_adapter *)netdev_priv(dev);
  #line 3301 
  if (adapter == (struct netxen_adapter *)0) 
                                             #line 3302 
                                             return (_Bool)0;
  #line 3303 
  if (netxen_destip_supported(adapter) == 0) 
                                             #line 3304 
                                             return (_Bool)0;
  #line 3305 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 3306 
                                            return (_Bool)0;
  #line 3308 
  return (_Bool)1;
}

#line 3316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_config_master(struct net_device *dev, unsigned long event)
{
  #line 3318 
  struct net_device *master;
  #line 3318 
  struct net_device *slave;
  #line 3319 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 3321 
  rcu_read_lock();
  #line 3322 
  master = netdev_master_upper_dev_get_rcu(dev);
  #line 3329 
  if (master != (struct net_device *)0) {
    #line 3329 
    if ((int)netif_is_bond_master(master) != 0) {
      #line 3330 
      if (! netif_is_bond_slave(dev)) {
        #line 3332 
        void *__mptr;
        #line 3331 
        netxen_config_indev_addr(adapter,master,event);
        {
          #line 3332 
          bool __warned;
          #line 3332 
          if (debug_lockdep_rcu_enabled() != 0) 
            #line 3332 
            if (! __warned) {
              #line 3332 
              if (rcu_read_lock_any_held() == 0) {
                #line 3332 
                __warned = (_Bool)1;
                #line 3332 
                lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c",3332,(char *)"RCU-list traversed in non-reader section!");
              }
            }
        }
        {
          #line 3333 
          union __anonunion___u_3154 __u;
          #line 3332 
          __read_once_size((void *)(& init_net.dev_base_head.next),(void *)(& __u.__c),8);
          #line 3332 
          __mptr = (void *)(__u.__val);
          }
        #line 3335 
        slave = ((struct net_device *)(__mptr + 18446744073709551544U));
        #line 3332 
        while (& slave->dev_list != & init_net.dev_base_head) {
          #line 3332 
          void *__mptr_0;
          #line 3333 
          if ((int)is_vlan_dev(slave) != 0) {
            #line 3333 
            ;
            #line 3333 
            if (vlan_dev_real_dev(slave) == master) 
                                                    #line 3335 
                                                    netxen_config_indev_addr(adapter,slave,event);
          }
          {
            #line 3333 
            union __anonunion___u_3156 __u_0;
            #line 3332 
            __read_once_size((void *)(& slave->dev_list.next),(void *)(& __u_0.__c),8);
            #line 3332 
            __mptr_0 = (void *)(__u_0.__val);
            }
          #line 3332 
          slave = ((struct net_device *)(__mptr_0 + 18446744073709551544U));
        }
      }
    }
  }
  #line 3337 
  rcu_read_unlock();
  #line 3343 
  if (master == (struct net_device *)0 && (dev->priv_flags & 4U) != 0U) 
    #line 3344 
    netxen_free_ip_list(adapter,(_Bool)1);
  #line 3345 
  return;
}

#line 3347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  #line 3350 
  struct netxen_adapter *adapter;
  #line 3353 
  struct net_device *slave;
  #line 3351 
  struct net_device *dev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)ptr);
  #line 3352 
  struct net_device *orig_dev = dev;
  #line 3355 
  recheck: 
           #line 3355 
  ;
  #line 3356 
  if (dev == (struct net_device *)0) 
                                     #line 3357 
                                     goto done;
  #line 3359 
  if ((int)is_vlan_dev(dev) != 0) {
    #line 3360 
    dev = vlan_dev_real_dev(dev);
    #line 3361 
    goto recheck;
  }
  #line 3363 
  if (event + 18446744073709551615UL <= 1UL) {
    #line 3365 
    if ((int)netif_is_bond_master(dev) != 0) {
      #line 3367 
      void *__mptr;
      #line 3366 
      rcu_read_lock();
      {
        #line 3367 
        bool __warned;
        #line 3367 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 3367 
          if (! __warned) {
            #line 3367 
            if (rcu_read_lock_any_held() == 0) {
              #line 3367 
              __warned = (_Bool)1;
              #line 3367 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c",3367,(char *)"RCU-list traversed in non-reader section!");
            }
          }
      }
      {
        #line 3368 
        union __anonunion___u_3158 __u;
        #line 3367 
        __read_once_size((void *)(& init_net.dev_base_head.next),(void *)(& __u.__c),8);
        #line 3367 
        __mptr = (void *)(__u.__val);
        }
      #line 3370 
      slave = ((struct net_device *)(__mptr + 18446744073709551544U));
      #line 3367 
      while (& slave->dev_list != & init_net.dev_base_head) {
        #line 3367 
        void *__mptr_0;
        #line 3367 
        ;
        #line 3367 
        if (netdev_master_upper_dev_get_rcu(slave) == dev) {
          #line 3368 
          if (! netxen_config_checkdev(slave)) 
                                               #line 3369 
                                               goto __Cont;
          #line 3370 
          adapter = (struct netxen_adapter *)netdev_priv(slave);
          #line 3371 
          netxen_config_indev_addr(adapter,orig_dev,event);
        }
        #line 3367 
        __Cont: { /* sequence */
                  {
                    #line 3368 
                    union __anonunion___u_3160 __u_0;
                    #line 3367 
                    __read_once_size((void *)(& slave->dev_list.next),(void *)(& __u_0.__c),8);
                    #line 3367 
                    __mptr_0 = (void *)(__u_0.__val);
                    }
                  #line 3367 
                  slave = ((struct net_device *)(__mptr_0 + 18446744073709551544U));
                }
      }
      #line 3374 
      rcu_read_unlock();
    }
    else {
      #line 3376 
      if (! netxen_config_checkdev(dev)) 
                                         #line 3377 
                                         goto done;
      #line 3378 
      adapter = (struct netxen_adapter *)netdev_priv(dev);
      #line 3380 
      if (orig_dev == dev) 
                           #line 3381 
                           netxen_config_master(dev,event);
      #line 3382 
      netxen_config_indev_addr(adapter,orig_dev,event);
    }
  }
  #line 3385 
  done: 
        #line 3385 
  ;
  #line 3386 
  return 0;
}

#line 3390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_inetaddr_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  #line 3393 
  struct netxen_adapter *adapter;
  #line 3394 
  struct net_device *dev;
  #line 3394 
  struct net_device *slave;
  #line 3396 
  unsigned long ip_event;
  #line 3395 
  struct in_ifaddr *ifa = (struct in_ifaddr *)ptr;
  #line 3398 
  if (ifa->ifa_dev != (struct in_device *)0) 
                                             #line 3398 
                                             dev = (ifa->ifa_dev)->dev; else 
                                                                    #line 3398 
                                                                    dev = (struct net_device *)0;
  #line 3399 
  if (event == 1UL) 
                    #line 3399 
                    ip_event = 2UL; else 
                                         #line 3399 
                                         ip_event = 3UL;
  #line 3400 
  recheck: 
           #line 3400 
  ;
  #line 3401 
  if (dev == (struct net_device *)0) 
                                     #line 3402 
                                     goto done;
  #line 3404 
  if ((int)is_vlan_dev(dev) != 0) {
    #line 3405 
    dev = vlan_dev_real_dev(dev);
    #line 3406 
    goto recheck;
  }
  #line 3408 
  if (event + 18446744073709551615UL <= 1UL) {
    #line 3410 
    if ((int)netif_is_bond_master(dev) != 0) {
      #line 3412 
      void *__mptr;
      #line 3411 
      rcu_read_lock();
      {
        #line 3412 
        bool __warned;
        #line 3412 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 3412 
          if (! __warned) {
            #line 3412 
            if (rcu_read_lock_any_held() == 0) {
              #line 3412 
              __warned = (_Bool)1;
              #line 3412 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c",3412,(char *)"RCU-list traversed in non-reader section!");
            }
          }
      }
      {
        #line 3413 
        union __anonunion___u_3162 __u;
        #line 3412 
        __read_once_size((void *)(& init_net.dev_base_head.next),(void *)(& __u.__c),8);
        #line 3412 
        __mptr = (void *)(__u.__val);
        }
      #line 3415 
      slave = ((struct net_device *)(__mptr + 18446744073709551544U));
      #line 3412 
      while (& slave->dev_list != & init_net.dev_base_head) {
        #line 3412 
        void *__mptr_0;
        #line 3412 
        ;
        #line 3412 
        if (netdev_master_upper_dev_get_rcu(slave) == dev) {
          #line 3413 
          if (! netxen_config_checkdev(slave)) 
                                               #line 3414 
                                               goto __Cont;
          #line 3415 
          adapter = (struct netxen_adapter *)netdev_priv(slave);
          #line 3416 
          netxen_list_config_ip(adapter,ifa,ip_event);
        }
        #line 3412 
        __Cont: { /* sequence */
                  {
                    #line 3413 
                    union __anonunion___u_3164 __u_0;
                    #line 3412 
                    __read_once_size((void *)(& slave->dev_list.next),(void *)(& __u_0.__c),8);
                    #line 3412 
                    __mptr_0 = (void *)(__u_0.__val);
                    }
                  #line 3412 
                  slave = ((struct net_device *)(__mptr_0 + 18446744073709551544U));
                }
      }
      #line 3418 
      rcu_read_unlock();
    }
    else {
      #line 3420 
      if (! netxen_config_checkdev(dev)) 
                                         #line 3421 
                                         goto done;
      #line 3422 
      adapter = (struct netxen_adapter *)netdev_priv(dev);
      #line 3423 
      netxen_list_config_ip(adapter,ifa,ip_event);
    }
  }
  #line 3426 
  done: 
        #line 3426 
  ;
  #line 3427 
  return 0;
}

#line 3430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct notifier_block netxen_netdev_cb = {.notifier_call = & netxen_netdev_event};
#line 3434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct notifier_block netxen_inetaddr_cb = {.notifier_call = & netxen_inetaddr_event};
#line 3446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct pci_error_handlers netxen_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& netxen_io_error_detected), .slot_reset = & netxen_io_slot_reset};
#line 3451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static struct pci_driver netxen_driver = {.name = (char *)(& netxen_nic_driver_name), .id_table = (struct pci_device_id *)(& netxen_pci_tbl), .probe = & netxen_nic_probe, .remove = & netxen_nic_remove, .suspend = & netxen_nic_suspend, .resume = & netxen_nic_resume, .shutdown = & netxen_nic_shutdown, .err_handler = & netxen_err_handler};
#line 3464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static int netxen_init_module(void)
{
  #line 3466 
  printk((char *)"\001",(char *)(& netxen_nic_driver_string));
  #line 3469 
  register_netdevice_notifier(& netxen_netdev_cb);
  #line 3470 
  register_inetaddr_notifier(& netxen_inetaddr_cb);
  #line 3472 
  return cif___pci_register_driver(& netxen_driver,& __this_module,
                                (char *)"netxen_nic");
}

#line 3477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c"
static void netxen_exit_module(void)
{
  #line 3479 
  cif_pci_unregister_driver(& netxen_driver);
  #line 3482 
  unregister_inetaddr_notifier(& netxen_inetaddr_cb);
  #line 3483 
  unregister_netdevice_notifier(& netxen_netdev_cb);
  #line 3484 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
struct device_attribute *emg_alias_dev_attr_bridged_mode = & dev_attr_bridged_mode;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
struct device_attribute *emg_alias_dev_attr_diag_mode = & dev_attr_diag_mode;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
struct pci_driver *emg_alias_netxen_driver = & netxen_driver;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
struct pci_device_id (*emg_alias_netxen_pci_tbl)[9U] = & netxen_pci_tbl;
#line 100 
#line 100 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 101 
#line 101 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 102 
#line 102 
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1);
#line 103 
#line 103 
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1);
#line 104 
#line 104 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 105 
#line 105 
void emg_free_netdev(struct net_device *arg0);
#line 106 
#line 106 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 107 
#line 107 
int emg_register_netdev(struct net_device *arg0);
#line 108 
#line 108 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 109 
#line 109 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 110 
#line 110 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 111 
#line 111 
void emg_unregister_netdev(struct net_device *arg0);
#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
unsigned long long emg_wrapper_netxen_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 116 
  return netxen_fix_features(arg0,arg1);
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_wrapper_netxen_nic_close(struct net_device *arg0)
{
  #line 121 
  return netxen_nic_close(arg0);
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
void emg_wrapper_netxen_nic_get_stats(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 126 
  netxen_nic_get_stats(arg0,arg1);
  #line 127 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_wrapper_netxen_nic_open(struct net_device *arg0)
{
  #line 131 
  return netxen_nic_open(arg0);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_wrapper_netxen_nic_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 136 
  return netxen_nic_probe(arg0,arg1);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
void emg_wrapper_netxen_nic_remove(struct pci_dev *arg0)
{
  #line 141 
  netxen_nic_remove(arg0);
  #line 142 
  return;
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_wrapper_netxen_nic_resume(struct pci_dev *arg0)
{
  #line 146 
  return netxen_nic_resume(arg0);
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_wrapper_netxen_nic_set_mac(struct net_device *arg0, void *arg1)
{
  #line 151 
  return netxen_nic_set_mac(arg0,arg1);
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
void emg_wrapper_netxen_nic_shutdown(struct pci_dev *arg0)
{
  #line 156 
  netxen_nic_shutdown(arg0);
  #line 157 
  return;
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_wrapper_netxen_nic_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 161 
  return netxen_nic_suspend(arg0,arg1);
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
enum netdev_tx emg_wrapper_netxen_nic_xmit_frame(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 166 
  return netxen_nic_xmit_frame(arg0,arg1);
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_wrapper_netxen_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 171 
  return netxen_set_features(arg0,arg1);
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
void emg_wrapper_netxen_set_multicast_list(struct net_device *arg0)
{
  #line 176 
  netxen_set_multicast_list(arg0);
  #line 177 
  return;
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
long emg_wrapper_netxen_show_bridged_mode(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 181 
  return netxen_show_bridged_mode(arg0,arg1,arg2);
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
long emg_wrapper_netxen_show_diag_mode(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 186 
  return netxen_show_diag_mode(arg0,arg1,arg2);
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
long emg_wrapper_netxen_store_bridged_mode(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 191 
  return netxen_store_bridged_mode(arg0,arg1,arg2,arg3);
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
long emg_wrapper_netxen_store_diag_mode(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 196 
  return netxen_store_diag_mode(arg0,arg1,arg2,arg3);
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
void emg_wrapper_netxen_tx_timeout(struct net_device *arg0)
{
  #line 201 
  netxen_tx_timeout(arg0);
  #line 202 
  return;
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
void emg_netxen_exit_module(void)
{
  #line 206 
  netxen_exit_module();
  #line 207 
  return;
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
int emg_netxen_init_module(void)
{
  #line 210 
  return netxen_init_module();
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 231 
  ldv_set_bit(nr,addr);
  #line 232 
  return;
}

#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 238 
  ldv_clear_bit(nr,addr);
  #line 239 
  return;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 245 
  ldv_init_list_head(list);
  #line 246 
  return;
}

#line 465  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 468 
  return ldv_kzalloc(size,flags);
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 649 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 651 
  spin_lock_0(lock);
  #line 652 
  return;
}

#line 686  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 689 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 691 
  spin_unlock_0(lock);
  #line 692 
  return;
}

#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 796 
  return emg_schedule_work(work);
}

#line 914  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 918 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 926 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 934 
  return emg_register_netdev(dev);
}

#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 942 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 950 
  emg_free_netdev(dev);
  #line 951 
  return;
}

#line 954  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 957 
  ldv_vfree(addr);
  #line 958 
  return;
}

#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 965 
  emg_unregister_netdev(dev);
  #line 966 
  return;
}

#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 973 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry)
{
  #line 981 
  return emg_device_create_file(device,entry);
}

#line 985  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr)
{
  #line 989 
  emg_device_remove_file(dev,attr);
  #line 990 
  return;
}

#line 993  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 997 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1001  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1005 
  emg_pci_unregister_driver(dev);
  #line 1006 
  return;
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 203 
void ___might_sleep(char *, int, int);
#line 487 
#line 487 
int sscanf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_1(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3177 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_1(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_1(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3179 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_3181 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_splice_tail_init_0(struct list_head *list, struct list_head *head)
{
  #line 466 
  if (list_empty_0(list) == 0) {
    #line 467 
    __list_splice(list,head->prev,head);
    #line 468 
    INIT_LIST_HEAD_1(list);
  }
  #line 470 
  return;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 38 
#line 38 
int _raw_spin_trylock_bh(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_lock_lock_of_nx_host_rds_ring(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_lock_bh_tx_clean_lock_of_netxen_adapter(spinlock_t *lock);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_spin_trylock_lock_of_nx_host_rds_ring(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 855  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_unlock_lock_of_nx_host_rds_ring(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_unlock_bh_tx_clean_lock_of_netxen_adapter(spinlock_t *lock);
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock_bh(spinlock_t *lock)
{
  #line 398 
  return _raw_spin_trylock_bh(& lock->__anonCompField_spinlock_25.rlock);
}

#line 400 
#line 864  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_spin_trylock_bh_tx_clean_lock_of_netxen_adapter(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void *cif_vzalloc_0(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_vfree_1(void *addr);
#line 1778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 1778 
int _cond_resched(void);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 337  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __sum16 csum16_add(__sum16 csum, __be16 addend)
{
  #line 72 
  u16 res = csum;
  #line 74 
  res = (unsigned short)((int)res + (int)addend);
  #line 75 
  return (unsigned short)(((int)res < (int)addend) + (int)res);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __sum16 csum16_sub(__sum16 csum, __be16 addend)
{
  #line 80 
  return csum16_add((unsigned short)((int)csum),
                 (unsigned short)(~ ((int)addend)));
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static void csum_replace2(__sum16 *sum, __be16 old, __be16 new)
{
  #line 139 
  ;
  #line 139 
  *sum = (unsigned short)(~ ((int)csum16_add((unsigned short)((int)csum16_sub((unsigned short)(~ ((int)*sum)),(unsigned short)((int)old))),
                   (unsigned short)((int)new))));
  #line 140 
  return;
}

#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 1739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_rom_fast_read_words(struct netxen_adapter *adapter, int addr, u8 *bytes, size_t size);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static unsigned int crb_addr_xform[60U];
#line 32 
#line 1866 
static void netxen_post_rx_buffers_nodb(struct netxen_adapter *adapter, struct nx_host_rds_ring *rds_ring);
#line 34 
#line 1188 
static int netxen_p3_has_mn(struct netxen_adapter *adapter);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static void crb_addr_transform_setup(void)
{
  #line 38 
  crb_addr_xform[49] = 1078984704U;
  #line 39 
  crb_addr_xform[40] = 1097859072U;
  #line 40 
  crb_addr_xform[5] = 218103808U;
  #line 41 
  crb_addr_xform[11] = 238026752U;
  #line 42 
  crb_addr_xform[10] = 236978176U;
  #line 43 
  crb_addr_xform[9] = 235929600U;
  #line 44 
  crb_addr_xform[8] = 234881024U;
  #line 45 
  crb_addr_xform[16] = 1883242496U;
  #line 46 
  crb_addr_xform[15] = 1882193920U;
  #line 47 
  crb_addr_xform[14] = 1881145344U;
  #line 48 
  crb_addr_xform[13] = 1880096768U;
  #line 49 
  crb_addr_xform[48] = 1894776832U;
  #line 50 
  crb_addr_xform[47] = 148897792U;
  #line 51 
  crb_addr_xform[46] = 147849216U;
  #line 52 
  crb_addr_xform[45] = 1891631104U;
  #line 53 
  crb_addr_xform[44] = 1890582528U;
  #line 54 
  crb_addr_xform[43] = 1889533952U;
  #line 55 
  crb_addr_xform[42] = 143654912U;
  #line 56 
  crb_addr_xform[53] = 142606336U;
  #line 57 
  crb_addr_xform[51] = 1108344832U;
  #line 58 
  crb_addr_xform[29] = 1090519040U;
  #line 59 
  crb_addr_xform[7] = 241172480U;
  #line 60 
  crb_addr_xform[12] = 1879048192U;
  #line 61 
  crb_addr_xform[22] = 876609536U;
  #line 62 
  crb_addr_xform[21] = 877658112U;
  #line 63 
  crb_addr_xform[20] = 875560960U;
  #line 64 
  crb_addr_xform[19] = 874512384U;
  #line 65 
  crb_addr_xform[18] = 873463808U;
  #line 66 
  crb_addr_xform[17] = 872415232U;
  #line 67 
  crb_addr_xform[28] = 1010827264U;
  #line 68 
  crb_addr_xform[27] = 1011875840U;
  #line 69 
  crb_addr_xform[26] = 1009778688U;
  #line 70 
  crb_addr_xform[25] = 1008730112U;
  #line 71 
  crb_addr_xform[24] = 1007681536U;
  #line 72 
  crb_addr_xform[23] = 1006632960U;
  #line 73 
  crb_addr_xform[1] = 1999634432U;
  #line 74 
  crb_addr_xform[0] = 698351616U;
  #line 75 
  crb_addr_xform[6] = 454033408U;
  #line 76 
  crb_addr_xform[50] = 1107296256U;
  #line 77 
  crb_addr_xform[31] = 219152384U;
  #line 78 
  crb_addr_xform[2] = 693108736U;
  #line 79 
  crb_addr_xform[3] = 709885952U;
  #line 80 
  crb_addr_xform[37] = 209715200U;
  #line 81 
  crb_addr_xform[36] = 208666624U;
  #line 82 
  crb_addr_xform[35] = 207618048U;
  #line 83 
  crb_addr_xform[34] = 1096810496U;
  #line 84 
  crb_addr_xform[39] = 1972371456U;
  #line 85 
  crb_addr_xform[38] = 1971322880U;
  #line 86 
  crb_addr_xform[58] = 1904214016U;
  #line 87 
  crb_addr_xform[56] = 1080033280U;
  #line 88 
  crb_addr_xform[59] = 428867584U;
  #line 89 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_release_rx_buffers(struct netxen_adapter *adapter)
{
  #line 93 
  struct netxen_recv_context *recv_ctx;
  #line 94 
  struct nx_host_rds_ring *rds_ring;
  #line 95 
  struct netxen_rx_buffer *rx_buf;
  #line 96 
  int i;
  #line 96 
  int ring;
  #line 98 
  recv_ctx = & adapter->recv_ctx;
  #line 99 
  ring = 0;
  #line 99 
  while ((int)adapter->max_rds_rings > ring) {
    #line 100 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 101 
    i = 0;
    #line 101 
    while (rds_ring->num_desc > (unsigned int)i) {
      #line 102 
      rx_buf = rds_ring->rx_buf_arr + (unsigned long)i;
      #line 103 
      if ((unsigned int)rx_buf->state == 0U) 
                                             #line 104 
                                             goto __Cont;
      #line 105 
      pci_unmap_single(adapter->pdev,rx_buf->dma,(unsigned long)rds_ring->dma_size,2);
      #line 109 
      if (rx_buf->skb != (struct sk_buff *)0) 
                                              #line 110 
                                              dev_kfree_skb_any(rx_buf->skb);
      #line 101 
      __Cont: 
              #line 101 
      i ++;
    }
    #line 99 
    ring ++;
  }
  #line 113 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_release_tx_buffers(struct netxen_adapter *adapter)
{
  #line 117 
  struct netxen_cmd_buffer *cmd_buf;
  #line 118 
  struct netxen_skb_frag *buffrag;
  #line 119 
  int i;
  #line 119 
  int j;
  #line 120 
  struct nx_host_tx_ring *tx_ring = adapter->tx_ring;
  #line 122 
  cif_spin_lock_bh_tx_clean_lock_of_netxen_adapter(& adapter->tx_clean_lock);
  #line 123 
  cmd_buf = tx_ring->cmd_buf_arr;
  #line 124 
  i = 0;
  #line 124 
  while (tx_ring->num_desc > (unsigned int)i) {
    #line 125 
    buffrag = (struct netxen_skb_frag *)(& cmd_buf->frag_array);
    #line 126 
    if (buffrag->dma != 0ULL) {
      #line 127 
      pci_unmap_single(adapter->pdev,buffrag->dma,(unsigned long)buffrag->length,1);
      #line 129 
      buffrag->dma = 0ULL;
    }
    #line 131 
    j = 1;
    #line 131 
    while (cmd_buf->frag_count > (unsigned int)j) {
      #line 132 
      buffrag ++;
      #line 133 
      if (buffrag->dma != 0ULL) {
        #line 134 
        pci_unmap_page(adapter->pdev,buffrag->dma,(unsigned long)buffrag->length,1);
        #line 137 
        buffrag->dma = 0ULL;
      }
      #line 131 
      j ++;
    }
    #line 140 
    if (cmd_buf->skb != (struct sk_buff *)0) {
      #line 141 
      dev_kfree_skb_any(cmd_buf->skb);
      #line 142 
      cmd_buf->skb = (struct sk_buff *)0;
    }
    #line 144 
    cmd_buf ++;
    #line 124 
    i ++;
  }
  #line 146 
  cif_spin_unlock_bh_tx_clean_lock_of_netxen_adapter(& adapter->tx_clean_lock);
  #line 147 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_free_sw_resources(struct netxen_adapter *adapter)
{
  #line 151 
  struct netxen_recv_context *recv_ctx;
  #line 152 
  struct nx_host_rds_ring *rds_ring;
  #line 153 
  struct nx_host_tx_ring *tx_ring;
  #line 154 
  int ring;
  #line 156 
  recv_ctx = & adapter->recv_ctx;
  #line 158 
  if (recv_ctx->rds_rings == (struct nx_host_rds_ring *)0) 
                                                           #line 159 
                                                           goto skip_rds;
  #line 161 
  ring = 0;
  #line 161 
  while ((int)adapter->max_rds_rings > ring) {
    #line 162 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 163 
    cif_vfree_1((void *)rds_ring->rx_buf_arr);
    #line 164 
    rds_ring->rx_buf_arr = (struct netxen_rx_buffer *)0;
    #line 161 
    ring ++;
  }
  #line 166 
  kfree((void *)recv_ctx->rds_rings);
  #line 168 
  skip_rds: 
            #line 168 
  ;
  #line 169 
  if (adapter->tx_ring == (struct nx_host_tx_ring *)0) 
                                                       #line 170 
                                                       return;
  #line 172 
  tx_ring = adapter->tx_ring;
  #line 173 
  cif_vfree_1((void *)tx_ring->cmd_buf_arr);
  #line 174 
  kfree((void *)tx_ring);
  #line 175 
  adapter->tx_ring = (struct nx_host_tx_ring *)0;
  #line 176 
  return;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_alloc_sw_resources(struct netxen_adapter *adapter)
{
  #line 180 
  struct netxen_recv_context *recv_ctx;
  #line 181 
  struct nx_host_rds_ring *rds_ring;
  #line 182 
  struct nx_host_sds_ring *sds_ring;
  #line 183 
  struct nx_host_tx_ring *tx_ring;
  #line 184 
  struct netxen_rx_buffer *rx_buf;
  #line 185 
  int ring;
  #line 185 
  int i;
  #line 187 
  struct netxen_cmd_buffer *cmd_buf_arr;
  #line 188 
  struct net_device *netdev = adapter->netdev;
  #line 190 
  tx_ring = (struct nx_host_tx_ring *)kzalloc_1(80UL,3264U);
  #line 191 
  if (tx_ring == (struct nx_host_tx_ring *)0) 
                                              #line 192 
                                              return -12;
  #line 194 
  adapter->tx_ring = tx_ring;
  #line 196 
  tx_ring->num_desc = (unsigned int)adapter->num_txd;
  #line 197 
  tx_ring->txq = netdev_get_tx_queue(netdev,0U);
  #line 199 
  cmd_buf_arr = (struct netxen_cmd_buffer *)cif_vzalloc_0((unsigned long)tx_ring->num_desc * 304UL);
  #line 200 
  if (cmd_buf_arr == (struct netxen_cmd_buffer *)0) 
                                                    #line 201 
                                                    goto err_out;
  #line 203 
  tx_ring->cmd_buf_arr = cmd_buf_arr;
  #line 205 
  recv_ctx = & adapter->recv_ctx;
  #line 207 
  rds_ring = (struct nx_host_rds_ring *)kcalloc((unsigned long)adapter->max_rds_rings,144UL,3264U);
  #line 209 
  if (rds_ring == (struct nx_host_rds_ring *)0) 
                                                #line 210 
                                                goto err_out;
  #line 212 
  recv_ctx->rds_rings = rds_ring;
  #line 214 
  ring = 0;
  #line 214 
  while ((int)adapter->max_rds_rings > ring) {
    #line 215 
    rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
    #line 216 
    switch (ring) {
      #line 217 
      case 0: 
              #line 217 
      ;
      #line 218 
      rds_ring->num_desc = (unsigned int)adapter->num_rxd;
      #line 219 
      if ((unsigned int)adapter->ahw.cut_through != 0U) {
        #line 220 
        rds_ring->dma_size = 2048U;
        #line 222 
        rds_ring->skb_size = 2048U;
      }
      else {
        #line 225 
        if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                          #line 226 
                                                          rds_ring->dma_size = 1532U; else 
                                                                    #line 229 
                                                                    rds_ring->dma_size = 1760U;
        #line 231 
        rds_ring->skb_size = rds_ring->dma_size;
      }
      #line 234 
      break;
      #line 236 
      case 1: 
              #line 236 
      ;
      #line 237 
      rds_ring->num_desc = (unsigned int)adapter->num_jumbo_rxd;
      #line 238 
      if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                        #line 239 
                                                        rds_ring->dma_size = 9632U; else 
                                                                    #line 242 
                                                                    rds_ring->dma_size = 8032U;
      #line 245 
      if ((adapter->capabilities & 1024U) != 0U) 
                                                 #line 246 
                                                 rds_ring->dma_size += 2048U;
      #line 248 
      rds_ring->skb_size = rds_ring->dma_size;
      #line 250 
      break;
      #line 252 
      case 2: 
              #line 252 
      ;
      #line 253 
      rds_ring->num_desc = (unsigned int)adapter->num_lro_rxd;
      #line 254 
      rds_ring->dma_size = 8060U;
      #line 255 
      rds_ring->skb_size = rds_ring->dma_size;
      #line 256 
      break;
    }
    #line 259 
    rds_ring->rx_buf_arr = (struct netxen_rx_buffer *)cif_vzalloc_0((unsigned long)rds_ring->num_desc * 40UL);
    #line 260 
    if (rds_ring->rx_buf_arr == (struct netxen_rx_buffer *)0) 
                                                              #line 262 
                                                              goto err_out;
    #line 264 
    INIT_LIST_HEAD_1(& rds_ring->free_list);
    #line 269 
    rx_buf = rds_ring->rx_buf_arr;
    #line 270 
    i = 0;
    #line 270 
    while (rds_ring->num_desc > (unsigned int)i) {
      #line 271 
      list_add_tail_1(& rx_buf->list,& rds_ring->free_list);
      #line 273 
      rx_buf->ref_handle = (unsigned short)i;
      #line 274 
      rx_buf->state = (unsigned short)0U;
      #line 275 
      rx_buf ++;
      #line 270 
      i ++;
    }
    #line 277 
    spinlock_check(& rds_ring->lock);
    {
      #line 277 
      struct lock_class_key __key;
      #line 277 
      __raw_spin_lock_init(& rds_ring->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&rds_ring->lock)->rlock",& __key);
    }
    #line 214 
    ring ++;
  }
  #line 280 
  ring = 0;
  #line 280 
  while ((int)adapter->max_sds_rings > ring) {
    #line 281 
    sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
    #line 282 
    sds_ring->irq = (int)adapter->msix_entries[ring].vector;
    #line 283 
    sds_ring->adapter = adapter;
    #line 284 
    sds_ring->num_desc = (unsigned int)adapter->num_rxd;
    #line 286 
    i = 0;
    #line 286 
    while (i <= 2) {
      #line 287 
      INIT_LIST_HEAD_1(& sds_ring->free_list[i]);
      #line 286 
      i ++;
    }
    #line 280 
    ring ++;
  }
  #line 290 
  return 0;
  #line 292 
  err_out: 
           #line 292 
  ;
  #line 293 
  netxen_free_sw_resources(adapter);
  #line 294 
  return -12;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static u32 netxen_decode_crb_addr(u32 addr)
{
  #line 303 
  int i;
  #line 304 
  u32 base_addr;
  #line 304 
  u32 offset;
  #line 304 
  u32 pci_base;
  #line 306 
  crb_addr_transform_setup();
  #line 308 
  pci_base = 4294967295U;
  #line 309 
  base_addr = addr & 4293918720U;
  #line 310 
  offset = addr & 1048575U;
  #line 312 
  i = 0;
  #line 312 
  while (i <= 59) {
    #line 313 
    if (crb_addr_xform[i] == base_addr) {
      #line 314 
      pci_base = (unsigned int)(i << 20);
      #line 315 
      break;
    }
    #line 312 
    i ++;
  }
  #line 318 
  if (pci_base == 4294967295U) 
                               #line 319 
                               return pci_base; else 
                                                     #line 321 
                                                     return pci_base + offset;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_wait_rom_done(struct netxen_adapter *adapter)
{
  #line 328 
  long timeout = 0L;
  #line 329 
  long done = 0L;
  #line 331 
  ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c",331,0);
  #line 331 
  _cond_resched();
  #line 333 
  while (done == 0L) {
    #line 334 
    done = (long)(*(adapter->crb_read))(adapter,154140676UL);
    #line 335 
    done &= 2L;
    #line 336 
    timeout ++;
    #line 336 
    if (timeout > 99L) {
      #line 337 
      _dev_err(& (adapter->pdev)->dev,(char *)"Timeout reached  waiting for rom done");
      #line 339 
      return -5;
    }
    #line 341 
    __const_udelay(4295UL);
  }
  #line 343 
  return 0;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int do_rom_fast_read(struct netxen_adapter *adapter, int addr, int *valp)
{
  #line 349 
  (*(adapter->crb_write))(adapter,154206216UL,(unsigned int)addr);
  #line 350 
  (*(adapter->crb_write))(adapter,154206228UL,0U);
  #line 351 
  (*(adapter->crb_write))(adapter,154206224UL,3U);
  #line 352 
  (*(adapter->crb_write))(adapter,154206212UL,11U);
  #line 353 
  if (netxen_wait_rom_done(adapter) != 0) {
    #line 354 
    printk((char *)"Error waiting for rom done\n");
    #line 355 
    return -5;
  }
  #line 358 
  (*(adapter->crb_write))(adapter,154206224UL,0U);
  #line 359 
  __const_udelay(42950UL);
  #line 360 
  (*(adapter->crb_write))(adapter,154206228UL,0U);
  #line 362 
  *valp = (int)(*(adapter->crb_read))(adapter,154206232UL);
  #line 363 
  return 0;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int do_rom_fast_read_words(struct netxen_adapter *adapter, int addr, u8 *bytes, size_t size)
{
  #line 369 
  int addridx;
  #line 370 
  int ret = 0;
  #line 372 
  addridx = addr;
  #line 372 
  while ((unsigned long)addridx < (unsigned long)addr + size) {
    {
      #line 373 
      int v;
      #line 374 
      ret = do_rom_fast_read(adapter,addridx,& v);
      #line 375 
      if (ret != 0) 
                    #line 376 
                    break;
      #line 377 
      *((__le32 *)bytes) = (unsigned int)v;
      #line 378 
      bytes += 4U;
    }
    #line 372 
    addridx += 4;
  }
  #line 381 
  return ret;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_rom_fast_read_words(struct netxen_adapter *adapter, int addr, u8 *bytes, size_t size)
{
  #line 388 
  int ret;
  #line 390 
  ret = netxen_pcie_sem_lock(adapter,2,136323328U);
  #line 391 
  if (ret < 0) 
               #line 392 
               return ret;
  #line 394 
  ret = do_rom_fast_read_words(adapter,addr,bytes,size);
  #line 396 
  netxen_pcie_sem_unlock(adapter,2);
  #line 397 
  return ret;
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_rom_fast_read(struct netxen_adapter *adapter, int addr, int *valp)
{
  #line 402 
  int ret;
  #line 404 
  if (netxen_pcie_sem_lock(adapter,2,136323328U) != 0) 
                                                       #line 405 
                                                       return -5;
  #line 407 
  ret = do_rom_fast_read(adapter,addr,valp);
  #line 408 
  netxen_pcie_sem_unlock(adapter,2);
  #line 409 
  return ret;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_pinit_from_rom(struct netxen_adapter *adapter)
{
  #line 418 
  int addr;
  #line 418 
  int val;
  #line 419 
  int i;
  #line 419 
  int n;
  #line 420 
  struct crb_addr_pair *buf;
  #line 421 
  unsigned int offset;
  #line 422 
  u32 off;
  #line 419 
  int init_delay = 0;
  #line 425 
  netxen_pcie_sem_lock(adapter,2,136323328U);
  #line 426 
  (*(adapter->crb_write))(adapter,154140680UL,4278190079U);
  #line 427 
  netxen_pcie_sem_unlock(adapter,2);
  #line 429 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 430 
    if (netxen_rom_fast_read(adapter,0,& n) != 0) 
                                                  #line 430 
                                                  goto _LOR;
    else 
      #line 430 
      if (n != -889271554) 
                           #line 430 
                           goto _LOR;
      else {
        #line 431 
        if (netxen_rom_fast_read(adapter,4,& n) != 0) {
          #line 430 
          _LOR: {
                  #line 433 
                  printk((char *)"\001",(char *)(& netxen_nic_driver_name),n);
                  #line 435 
                  return -5;
                }
        }
      }
    #line 437 
    offset = (unsigned int)n & 65535U;
    #line 438 
    n >>= 16;
  }
  else {
    #line 440 
    if (netxen_rom_fast_read(adapter,0,& n) != 0) 
                                                  #line 440 
                                                  goto _LOR_0;
    else 
      #line 440 
      if (((unsigned int)n & 2147483648U) == 0U) {
        #line 440 
        _LOR_0: {
                  #line 442 
                  printk((char *)"\001",(char *)(& netxen_nic_driver_name),n);
                  #line 444 
                  return -5;
                }
      }
    #line 446 
    offset = 1U;
    #line 447 
    n &= 2147483647;
  }
  #line 450 
  if (n > 1023) {
    #line 451 
    printk((char *)"\001",(char *)"netxen_pinit_from_rom",n);
    #line 453 
    return -5;
  }
  #line 456 
  buf = (struct crb_addr_pair *)kcalloc((unsigned long)n,8UL,3264U);
  #line 457 
  if (buf == (struct crb_addr_pair *)0) 
                                        #line 458 
                                        return -12;
  #line 460 
  i = 0;
  #line 460 
  while (i < n) {
    {
      #line 461 
      if (netxen_rom_fast_read(adapter,
                             (int)((unsigned int)(i * 8) + offset * 4U),
                             & val) != 0) 
        #line 461 
        goto _LOR_1;
      else {
        #line 461 
        if (netxen_rom_fast_read(adapter,
                             (int)(((unsigned int)(i * 8) + offset * 4U) + 4U),
                             & addr) != 0) {
          #line 461 
          _LOR_1: {
                    #line 463 
                    kfree((void *)buf);
                    #line 464 
                    return -5;
                  }
        }
      }
      #line 467 
      (buf + (unsigned long)i)->addr = (unsigned int)addr;
      #line 468 
      (buf + (unsigned long)i)->data = (unsigned int)val;
    }
    #line 460 
    i ++;
  }
  #line 472 
  i = 0;
  #line 472 
  while (i < n) {
    #line 474 
    off = netxen_decode_crb_addr((buf + (unsigned long)i)->addr);
    #line 475 
    if (off == 4294967295U) {
      #line 476 
      printk((char *)"\001",(buf + (unsigned long)i)->addr);
      #line 478 
      goto __Cont;
    }
    #line 480 
    off += 100663296U;
    #line 482 
    if ((off & 1U) != 0U) 
                          #line 483 
                          goto __Cont;
    #line 486 
    if (off == 136323580U) 
                           #line 487 
                           goto __Cont;
    #line 489 
    if ((unsigned int)adapter->ahw.revision_id > 47U) {
      #line 490 
      if (off == 162529308U) 
                             #line 491 
                             goto __Cont;
      #line 493 
      if (off == 154140860U) 
                             #line 494 
                             goto __Cont;
      #line 495 
      if (off == 154140840U) 
                             #line 496 
                             goto __Cont;
      #line 497 
      if (off == 154140872U) 
                             #line 498 
                             goto __Cont;
      #line 499 
      if (off == 154140708U) 
                             #line 500 
                             goto __Cont;
      #line 501 
      if (off == 154140700U) 
                             #line 502 
                             goto __Cont;
      #line 503 
      if ((off & 267386880U) == 102760448U) 
                                            #line 504 
                                            goto __Cont;
      #line 505 
      if (off == 119537688U && (unsigned int)adapter->ahw.revision_id <= 79U) 
        #line 507 
        (buf + (unsigned long)i)->data = 4128U;
      #line 509 
      if (off == 101785664U) 
                             #line 510 
                             goto __Cont;
      #line 511 
      if (off == 101785672U) 
                             #line 512 
                             goto __Cont;
      #line 513 
      if ((off & 267386880U) == 161480704U) 
                                            #line 514 
                                            goto __Cont;
    }
    #line 517 
    init_delay = 1;
    #line 520 
    if (off == 154140680U) {
      #line 521 
      init_delay = 1000;
      #line 522 
      if ((unsigned int)adapter->ahw.revision_id <= 37U) {
        #line 524 
        (buf + (unsigned long)i)->data = 8388863U;
        #line 525 
        (buf + (unsigned long)i)->data = 8388863U;
      }
    }
    #line 529 
    (*(adapter->crb_write))(adapter,(unsigned long)off,(buf + (unsigned long)i)->data);
    #line 531 
    msleep((unsigned int)init_delay);
    #line 472 
    __Cont: 
            #line 472 
    i ++;
  }
  #line 533 
  kfree((void *)buf);
  #line 538 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) {
    #line 539 
    val = (int)(*(adapter->crb_read))(adapter,154140680UL);
    #line 540 
    (*(adapter->crb_write))(adapter,154140680UL,(unsigned int)val & 4294967055U);
  }
  #line 544 
  (*(adapter->crb_write))(adapter,122683628UL,30U);
  #line 546 
  (*(adapter->crb_write))(adapter,122683468UL,8U);
  #line 548 
  (*(adapter->crb_write))(adapter,123732044UL,8U);
  #line 553 
  (*(adapter->crb_write))(adapter,118489096UL,0U);
  #line 554 
  (*(adapter->crb_write))(adapter,118489100UL,0U);
  #line 556 
  (*(adapter->crb_write))(adapter,119537672UL,0U);
  #line 557 
  (*(adapter->crb_write))(adapter,119537676UL,0U);
  #line 559 
  (*(adapter->crb_write))(adapter,120586248UL,0U);
  #line 560 
  (*(adapter->crb_write))(adapter,120586252UL,0U);
  #line 562 
  (*(adapter->crb_write))(adapter,121634824UL,0U);
  #line 563 
  (*(adapter->crb_write))(adapter,121634828UL,0U);
  #line 564 
  return 0;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static struct uni_table_desc *nx_get_table_desc(u8 *unirom, int section)
{
  #line 569 
  uint32_t i;
  #line 570 
  struct uni_table_desc *directory = (struct uni_table_desc *)unirom;
  #line 571 
  __le32 entries = directory->num_entries;
  #line 573 
  i = 0U;
  #line 573 
  while (i < entries) {
    {
      #line 575 
      __le32 offs = directory->findex + directory->entry_size * i;
      #line 577 
      __le32 tab_type = *((u32 *)(unirom + (unsigned long)offs) + 8U);
      #line 579 
      if (tab_type == (unsigned int)section) 
                                             #line 580 
                                             return (struct uni_table_desc *)(unirom + (unsigned long)offs);
    }
    #line 573 
    i ++;
  }
  #line 583 
  return (struct uni_table_desc *)0;
}

#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_nic_validate_header(struct netxen_adapter *adapter)
{
  #line 594 
  u32 tab_size;
  #line 595 
  __le32 entries;
  #line 596 
  __le32 entry_size;
  #line 591 
  u8 *unirom = (adapter->fw)->data;
  #line 592 
  struct uni_table_desc *directory = (struct uni_table_desc *)unirom;
  #line 593 
  u32 fw_file_size = (unsigned int)(adapter->fw)->size;
  #line 598 
  if (fw_file_size <= 55U) 
                           #line 599 
                           return -22;
  #line 601 
  entries = directory->num_entries;
  #line 602 
  entry_size = directory->entry_size;
  #line 603 
  tab_size = directory->findex + entries * entry_size;
  #line 605 
  if (fw_file_size < tab_size) 
                               #line 606 
                               return -22;
  #line 608 
  return 0;
}

#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_nic_validate_bootld(struct netxen_adapter *adapter)
{
  #line 614 
  struct uni_table_desc *tab_desc;
  #line 615 
  struct uni_data_desc *descr;
  #line 619 
  u32 offs;
  #line 620 
  u32 tab_size;
  #line 621 
  u32 data_size;
  #line 616 
  u8 *unirom = (adapter->fw)->data;
  #line 617 
  __le32 idx = (unsigned int)*((int *)(unirom + (unsigned long)adapter->file_prd_off) + 27U);
  #line 623 
  tab_desc = nx_get_table_desc(unirom,6);
  #line 625 
  if (tab_desc == (struct uni_table_desc *)0) 
                                              #line 626 
                                              return -22;
  #line 628 
  tab_size = tab_desc->findex + tab_desc->entry_size * (idx + 1U);
  #line 631 
  if ((adapter->fw)->size < (unsigned long)tab_size) 
                                                     #line 632 
                                                     return -22;
  #line 634 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  #line 636 
  descr = (struct uni_data_desc *)(unirom + (unsigned long)offs);
  #line 638 
  data_size = descr->findex + descr->size;
  #line 640 
  if ((adapter->fw)->size < (unsigned long)data_size) 
                                                      #line 641 
                                                      return -22;
  #line 643 
  return 0;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_nic_validate_fw(struct netxen_adapter *adapter)
{
  #line 649 
  struct uni_table_desc *tab_desc;
  #line 650 
  struct uni_data_desc *descr;
  #line 654 
  u32 offs;
  #line 655 
  u32 tab_size;
  #line 656 
  u32 data_size;
  #line 651 
  u8 *unirom = (adapter->fw)->data;
  #line 652 
  __le32 idx = (unsigned int)*((int *)(unirom + (unsigned long)adapter->file_prd_off) + 29U);
  #line 658 
  tab_desc = nx_get_table_desc(unirom,7);
  #line 660 
  if (tab_desc == (struct uni_table_desc *)0) 
                                              #line 661 
                                              return -22;
  #line 663 
  tab_size = tab_desc->findex + tab_desc->entry_size * (idx + 1U);
  #line 666 
  if ((adapter->fw)->size < (unsigned long)tab_size) 
                                                     #line 667 
                                                     return -22;
  #line 669 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  #line 671 
  descr = (struct uni_data_desc *)(unirom + (unsigned long)offs);
  #line 672 
  data_size = descr->findex + descr->size;
  #line 674 
  if ((adapter->fw)->size < (unsigned long)data_size) 
                                                      #line 675 
                                                      return -22;
  #line 677 
  return 0;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_nic_validate_product_offs(struct netxen_adapter *adapter)
{
  #line 684 
  struct uni_table_desc *ptab_descr;
  #line 686 
  int tmp_0;
  #line 688 
  __le32 entries;
  #line 689 
  __le32 entry_size;
  #line 690 
  u32 tab_size;
  #line 691 
  u32 i;
  #line 685 
  u8 *unirom = (adapter->fw)->data;
  #line 686 
  if ((unsigned int)adapter->ahw.revision_id > 37U) 
                                                    #line 686 
                                                    tmp_0 = netxen_p3_has_mn(adapter); else 
                                                                    #line 686 
                                                                    tmp_0 = 1;
  #line 686 
  int mn_present = tmp_0;
  #line 693 
  ptab_descr = nx_get_table_desc(unirom,0);
  #line 694 
  if (ptab_descr == (struct uni_table_desc *)0) 
                                                #line 695 
                                                return -22;
  #line 697 
  entries = ptab_descr->num_entries;
  #line 698 
  entry_size = ptab_descr->entry_size;
  #line 699 
  tab_size = ptab_descr->findex + entries * entry_size;
  #line 701 
  if ((adapter->fw)->size < (unsigned long)tab_size) 
                                                     #line 702 
                                                     return -22;
  #line 704 
  nomn: 
        #line 704 
  ;
  #line 705 
  i = 0U;
  #line 705 
  while (i < entries) {
    {
      #line 707 
      __le32 flags;
      #line 707 
      __le32 file_chiprev;
      #line 707 
      __le32 offs;
      #line 709 
      uint32_t flagbit;
      #line 708 
      u8 chiprev = adapter->ahw.revision_id;
      #line 711 
      offs = ptab_descr->findex + ptab_descr->entry_size * i;
      #line 713 
      flags = (unsigned int)*((int *)(unirom + (unsigned long)offs) + 11U);
      #line 714 
      file_chiprev = (unsigned int)*((int *)(unirom + (unsigned long)offs) + 10U);
      #line 717 
      if (mn_present != 0) 
                           #line 717 
                           flagbit = 1U; else 
                                              #line 717 
                                              flagbit = 2U;
      #line 719 
      if ((unsigned int)chiprev == file_chiprev && (((unsigned long long)flags >> flagbit) & 1ULL) != 0ULL) {
        #line 721 
        adapter->file_prd_off = offs;
        #line 722 
        return 0;
      }
    }
    #line 705 
    i ++;
  }
  #line 726 
  if (mn_present != 0 && (unsigned int)adapter->ahw.revision_id > 47U) {
    #line 727 
    mn_present = 0;
    #line 728 
    goto nomn;
  }
  #line 731 
  return -22;
}

#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_nic_validate_unified_romimage(struct netxen_adapter *adapter)
{
  #line 737 
  if (netxen_nic_validate_header(adapter) != 0) {
    #line 738 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: header validation failed\n");
    #line 740 
    return -22;
  }
  #line 743 
  if (netxen_nic_validate_product_offs(adapter) != 0) {
    #line 744 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: product validation failed\n");
    #line 746 
    return -22;
  }
  #line 749 
  if (netxen_nic_validate_bootld(adapter) != 0) {
    #line 750 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: bootld validation failed\n");
    #line 752 
    return -22;
  }
  #line 755 
  if (netxen_nic_validate_fw(adapter) != 0) {
    #line 756 
    _dev_err(& (adapter->pdev)->dev,(char *)"unified image: firmware validation failed\n");
    #line 758 
    return -22;
  }
  #line 761 
  return 0;
}

#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static struct uni_data_desc *nx_get_data_desc(struct netxen_adapter *adapter, u32 section, u32 idx_offset)
{
  #line 770 
  struct uni_table_desc *tab_desc;
  #line 771 
  __le32 offs;
  #line 767 
  u8 *unirom = (adapter->fw)->data;
  #line 768 
  int idx = *((int *)(unirom + (unsigned long)adapter->file_prd_off) + (unsigned long)idx_offset);
  #line 773 
  tab_desc = nx_get_table_desc(unirom,(int)section);
  #line 775 
  if (tab_desc == (struct uni_table_desc *)0) 
                                              #line 776 
                                              return (struct uni_data_desc *)0;
  #line 778 
  offs = tab_desc->findex + tab_desc->entry_size * (unsigned int)idx;
  #line 781 
  return (struct uni_data_desc *)(unirom + (unsigned long)offs);
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static u8 *nx_get_bootld_offs(struct netxen_adapter *adapter)
{
  #line 787 
  u32 offs = 65536U;
  #line 789 
  if ((unsigned int)adapter->fw_type == 3U) {
    #line 790 
    offs = nx_get_data_desc(adapter,6U,27U)->findex;
  }
  #line 794 
  return (adapter->fw)->data + (unsigned long)offs;
}

#line 798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static u8 *nx_get_fw_offs(struct netxen_adapter *adapter)
{
  #line 800 
  u32 offs = 274432U;
  #line 802 
  if ((unsigned int)adapter->fw_type == 3U) {
    #line 803 
    offs = nx_get_data_desc(adapter,7U,29U)->findex;
  }
  #line 807 
  return (adapter->fw)->data + (unsigned long)offs;
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static __le32 nx_get_fw_size(struct netxen_adapter *adapter)
{
  #line 813 
  if ((unsigned int)adapter->fw_type == 3U) {
    #line 814 
    return nx_get_data_desc(adapter,7U,29U)->size;
  }
  else 
       #line 818 
       return *((u32 *)((adapter->fw)->data + 4097036U));
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static __le32 nx_get_fw_version(struct netxen_adapter *adapter)
{
  #line 825 
  struct uni_data_desc *fw_data_desc;
  #line 827 
  __le32 major;
  #line 827 
  __le32 minor;
  #line 827 
  __le32 sub;
  #line 828 
  u8 *ver_str;
  #line 829 
  int i;
  #line 826 
  struct firmware *fw = adapter->fw;
  #line 829 
  int ret = 0;
  #line 831 
  if ((unsigned int)adapter->fw_type == 3U) {
    #line 833 
    fw_data_desc = nx_get_data_desc(adapter,7U,29U);
    #line 835 
    ver_str = fw->data + (((unsigned long)fw_data_desc->findex + (unsigned long)fw_data_desc->size) + 18446744073709551599U);
    #line 838 
    i = 0;
    #line 838 
    while (i <= 11) {
      #line 839 
      if (cif_strncmp((char *)(ver_str + (unsigned long)i),(char *)"REV=",4UL) == 0) {
        #line 840 
        ret = sscanf((char *)(ver_str + ((unsigned long)i + (unsigned long)4U)),(char *)"%u.%u.%u ",& major,& minor,& sub);
        #line 842 
        break;
      }
      #line 838 
      i ++;
    }
    #line 846 
    if (ret != 3) 
                  #line 847 
                  return 0U;
    #line 849 
    return ((minor << 8) + major) + (sub << 16);
  }
  else 
       #line 852 
       return *((u32 *)(fw->data + 4097032U));
}

#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static __le32 nx_get_bios_version(struct netxen_adapter *adapter)
{
  #line 859 
  __le32 bios_ver;
  #line 858 
  struct firmware *fw = adapter->fw;
  #line 859 
  __le32 prd_off = adapter->file_prd_off;
  #line 861 
  if ((unsigned int)adapter->fw_type == 3U) {
    #line 862 
    bios_ver = *((u32 *)(fw->data + (unsigned long)prd_off) + 12U);
    #line 864 
    return ((bios_ver << 16) + ((bios_ver >> 8) & 65280U)) + (bios_ver >> 24);
  }
  else 
       #line 867 
       return *((u32 *)(fw->data + 4098108U));
}

#line 872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_need_fw_reset(struct netxen_adapter *adapter)
{
  #line 874 
  u32 count;
  #line 874 
  u32 old_count;
  #line 875 
  u32 val;
  #line 875 
  u32 version;
  #line 875 
  u32 major;
  #line 875 
  u32 minor;
  #line 875 
  u32 build;
  #line 876 
  int i;
  #line 876 
  int timeout;
  #line 877 
  u8 fw_type;
  #line 880 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 881 
                                                     return 1;
  #line 883 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
                                                  #line 884 
                                                  return 1;
  #line 887 
  if ((*(adapter->crb_read))(adapter,136323664UL) == 65535U) 
                                                             #line 888 
                                                             return 1;
  #line 890 
  old_count = (*(adapter->crb_read))(adapter,136323248UL);
  #line 892 
  i = 0;
  #line 892 
  while (i <= 9) {
    {
      #line 894 
      timeout = (int)msleep_interruptible(200U);
      #line 895 
      if (timeout != 0) {
        #line 896 
        (*(adapter->crb_write))(adapter,136323664UL,65535U);
        #line 898 
        return -4;
      }
      #line 901 
      count = (*(adapter->crb_read))(adapter,136323248UL);
      #line 902 
      if (count != old_count) 
                              #line 903 
                              break;
    }
    #line 892 
    i ++;
  }
  #line 907 
  if (count == old_count) 
                          #line 908 
                          return 1;
  #line 911 
  if (adapter->fw != (struct firmware *)0) {
    #line 913 
    val = nx_get_fw_version(adapter);
    #line 915 
    version = ((val << 24) + (((val >> 8) << 16) & 16711680U)) + (val >> 16);
    #line 917 
    major = (*(adapter->crb_read))(adapter,136323408UL);
    #line 918 
    minor = (*(adapter->crb_read))(adapter,136323412UL);
    #line 919 
    build = (*(adapter->crb_read))(adapter,136323416UL);
    #line 921 
    if (((major << 24) + (minor << 16)) + build < version) 
                                                           #line 922 
                                                           return 1;
    #line 924 
    if (((major << 24) + (minor << 16)) + build == version && (unsigned int)adapter->fw_type != 3U) {
      #line 927 
      val = (*(adapter->crb_read))(adapter,102760448UL);
      #line 928 
      if ((val & 4U) != 0U) 
                            #line 928 
                            fw_type = (unsigned char)1U; else 
                                                              #line 928 
                                                              fw_type = (unsigned char)2U;
      #line 931 
      if ((int)adapter->fw_type != (int)fw_type) 
                                                 #line 932 
                                                 return 1;
    }
  }
  #line 936 
  return 0;
}

#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_check_flash_fw_compatibility(struct netxen_adapter *adapter)
{
  #line 944 
  u32 flash_fw_ver;
  #line 944 
  u32 min_fw_ver;
  #line 946 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 947 
                                                     return 0;
  #line 949 
  if (netxen_rom_fast_read(adapter,4097032,(int *)(& flash_fw_ver)) != 0) {
    #line 951 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to read flash fw");
    #line 953 
    return -5;
  }
  #line 956 
  flash_fw_ver = ((flash_fw_ver << 24) + (((flash_fw_ver >> 8) << 16) & 16711680U)) + (flash_fw_ver >> 16);
  #line 957 
  min_fw_ver = 67109369U;
  #line 958 
  if (flash_fw_ver >= min_fw_ver) 
                                  #line 959 
                                  return 0;
  #line 961 
  _dev_info(& (adapter->pdev)->dev,(char *)"Flash fw[%d.%d.%d] is < min fw supported",flash_fw_ver >> 24,(flash_fw_ver >> 16) & 255U,flash_fw_ver & 65535U);
  #line 965 
  return -22;
}

#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static char *fw_name[5U] = {(char *)"nxromimg.bin", (char *)"nx3fwct.bin", (char *)"nx3fwmn.bin", (char *)"phanfw.bin", (char *)"flash"};
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_load_firmware(struct netxen_adapter *adapter)
{
  #line 979 
  u64 *ptr64;
  #line 980 
  u32 i;
  #line 980 
  u32 flashaddr;
  #line 980 
  u32 size;
  #line 981 
  struct firmware *fw = adapter->fw;
  #line 982 
  struct pci_dev *pdev = adapter->pdev;
  #line 984 
  _dev_info(& pdev->dev,(char *)"loading firmware from %s\n",fw_name[(int)adapter->fw_type]);
  #line 987 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 988 
                                                     (*(adapter->crb_write))(adapter,154140728UL,1U);
  #line 990 
  if (fw != (struct firmware *)0) {
    #line 991 
    __le64 data;
    #line 993 
    size = 26112U;
    #line 995 
    ptr64 = (u64 *)nx_get_bootld_offs(adapter);
    #line 996 
    flashaddr = 65536U;
    #line 998 
    i = 0U;
    #line 998 
    while (i < size) {
      {
        #line 999 
        data = *(ptr64 + (unsigned long)i);
        #line 1001 
        if ((*(adapter->pci_mem_write))(adapter,(unsigned long long)flashaddr,
                                    data) != 0) 
          #line 1002 
          return -5;
        #line 1004 
        flashaddr += 8U;
      }
      #line 998 
      i ++;
    }
    #line 1007 
    size = nx_get_fw_size(adapter) / 8U;
    #line 1009 
    ptr64 = (u64 *)nx_get_fw_offs(adapter);
    #line 1010 
    flashaddr = 274432U;
    #line 1012 
    i = 0U;
    #line 1012 
    while (i < size) {
      {
        #line 1013 
        data = *(ptr64 + (unsigned long)i);
        #line 1015 
        if ((*(adapter->pci_mem_write))(adapter,(unsigned long long)flashaddr,
                                    data) != 0) 
          #line 1017 
          return -5;
        #line 1019 
        flashaddr += 8U;
      }
      #line 1012 
      i ++;
    }
    #line 1022 
    size = nx_get_fw_size(adapter) & 7U;
    #line 1023 
    if (size != 0U) {
      #line 1024 
      data = *(ptr64 + (unsigned long)i);
      #line 1026 
      if ((*(adapter->pci_mem_write))(adapter,(unsigned long long)flashaddr,
                                    data) != 0) 
        #line 1028 
        return -5;
    }
  }
  else {
    #line 1032 
    u64 data_0;
    #line 1033 
    u32 hi;
    #line 1033 
    u32 lo;
    #line 1035 
    size = 26112U;
    #line 1036 
    flashaddr = 65536U;
    #line 1038 
    i = 0U;
    #line 1038 
    while (i < size) {
      {
        #line 1039 
        if (netxen_rom_fast_read(adapter,(int)flashaddr,(int *)(& lo)) != 0) 
          #line 1041 
          return -5;
        #line 1042 
        if (netxen_rom_fast_read(adapter,(int)(flashaddr + 4U),(int *)(& hi)) != 0) 
          #line 1044 
          return -5;
        #line 1047 
        data_0 = ((unsigned long long)hi << 32) | (unsigned long long)lo;
        #line 1049 
        if ((*(adapter->pci_mem_write))(adapter,(unsigned long long)flashaddr,
                                    data_0) != 0) 
          #line 1051 
          return -5;
        #line 1053 
        flashaddr += 8U;
      }
      #line 1038 
      i ++;
    }
  }
  #line 1056 
  msleep(1U);
  #line 1058 
  if ((unsigned int)adapter->ahw.revision_id > 79U) {
    #line 1059 
    (*(adapter->crb_write))(adapter,118489112UL,4128U);
    #line 1060 
    (*(adapter->crb_write))(adapter,154140680UL,8388638U);
  }
  else 
    #line 1061 
    if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                      #line 1062 
                                                      (*(adapter->crb_write))(adapter,154140680UL,8388637U);
    else {
      #line 1064 
      (*(adapter->crb_write))(adapter,154140840UL,16383U);
      #line 1065 
      (*(adapter->crb_write))(adapter,154140728UL,0U);
    }
  #line 1068 
  return 0;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_validate_firmware(struct netxen_adapter *adapter)
{
  #line 1074 
  __le32 val;
  #line 1075 
  __le32 flash_fw_ver;
  #line 1076 
  u32 file_fw_ver;
  #line 1076 
  u32 min_ver;
  #line 1076 
  u32 bios;
  #line 1080 
  u32 crbinit_fix_fw;
  #line 1077 
  struct pci_dev *pdev = adapter->pdev;
  #line 1078 
  struct firmware *fw = adapter->fw;
  #line 1079 
  u8 fw_type = adapter->fw_type;
  #line 1082 
  if ((unsigned int)fw_type == 3U) {
    #line 1083 
    if (netxen_nic_validate_unified_romimage(adapter) != 0) 
                                                            #line 1084 
                                                            return -22;
  }
  else {
    #line 1086 
    val = *((u32 *)(fw->data + 16680U));
    #line 1087 
    if (val != 305419896U) 
                           #line 1088 
                           return -22;
    #line 1090 
    if (fw->size <= 4194302UL) 
                               #line 1091 
                               return -22;
  }
  #line 1094 
  val = nx_get_fw_version(adapter);
  #line 1096 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 1097 
                                                    min_ver = 67109369U; else 
                                                                    #line 1099 
                                                                    min_ver = 50594008U;
  #line 1101 
  file_fw_ver = ((val << 24) + (((val >> 8) << 16) & 16711680U)) + (val >> 16);
  #line 1103 
  if (file_fw_ver >> 24 > 4U || file_fw_ver < min_ver) {
    #line 1105 
    _dev_err(& pdev->dev,(char *)"%s: firmware version %d.%d.%d unsupported\n",fw_name[(int)fw_type],file_fw_ver >> 24,(file_fw_ver >> 16) & 255U,file_fw_ver & 65535U);
    #line 1109 
    return -22;
  }
  #line 1111 
  val = nx_get_bios_version(adapter);
  #line 1112 
  if (netxen_rom_fast_read(adapter,4098108,(int *)(& bios)) != 0) 
                                                                  #line 1113 
                                                                  return -5;
  #line 1114 
  if (val != bios) {
    #line 1115 
    _dev_err(& pdev->dev,(char *)"%s: firmware bios is incompatible\n",fw_name[(int)fw_type]);
    #line 1117 
    return -22;
  }
  #line 1120 
  if (netxen_rom_fast_read(adapter,4097032,(int *)(& flash_fw_ver)) != 0) {
    #line 1122 
    _dev_err(& pdev->dev,(char *)"Unable to read flash fw version\n");
    #line 1123 
    return -5;
  }
  #line 1125 
  flash_fw_ver = ((flash_fw_ver << 24) + (((flash_fw_ver >> 8) << 16) & 16711680U)) + (flash_fw_ver >> 16);
  #line 1128 
  crbinit_fix_fw = 67109418U;
  #line 1129 
  if ((file_fw_ver >= crbinit_fix_fw && flash_fw_ver < crbinit_fix_fw) && (unsigned int)adapter->ahw.revision_id > 47U) {
    #line 1131 
    _dev_err(& pdev->dev,(char *)"Incompatibility detected between driver ");
    #line 1135 
    return -22;
  }
  #line 1139 
  if (netxen_p3_has_mn(adapter) == 0) 
                                      #line 1139 
                                      goto _LOR;
  else 
    #line 1139 
    if ((unsigned int)adapter->ahw.revision_id <= 37U) {
      #line 1139 
      _LOR: 
            #line 1141 
      ;
      #line 1141 
      if (flash_fw_ver > file_fw_ver) {
        #line 1142 
        _dev_info(& pdev->dev,(char *)"%s: firmware is older than flash\n",fw_name[(int)fw_type]);
        #line 1144 
        return -22;
      }
    }
  #line 1148 
  (*(adapter->crb_write))(adapter,136323580UL,305419896U);
  #line 1149 
  return 0;
}

#line 1153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static void nx_get_next_fwtype(struct netxen_adapter *adapter)
{
  #line 1155 
  u8 fw_type;
  #line 1157 
  switch ((int)adapter->fw_type) {
    #line 1158 
    case 255: 
              #line 1158 
    ;
    #line 1159 
    fw_type = (unsigned char)3U;
    #line 1160 
    break;
    #line 1162 
    case 3: 
            #line 1162 
    ;
    #line 1163 
    if ((unsigned int)adapter->ahw.revision_id > 79U) 
                                                      #line 1164 
                                                      fw_type = (unsigned char)4U;
    else 
      #line 1165 
      if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                         #line 1166 
                                                         fw_type = (unsigned char)0U;
      else {
        #line 1167 
        if (netxen_p3_has_mn(adapter) != 0) 
                                            #line 1168 
                                            fw_type = (unsigned char)2U; else 
                                                                    #line 1170 
                                                                    fw_type = (unsigned char)1U;
      }
    #line 1171 
    break;
    #line 1173 
    case 2: 
            #line 1173 
    ;
    #line 1174 
    fw_type = (unsigned char)1U;
    #line 1175 
    break;
    #line 1177 
    case 0: 
            #line 1177 
    ;
    #line 1178 
    case 1: 
            #line 1178 
    ;
    #line 1179 
    default: 
             #line 1179 
    ;
    #line 1180 
    fw_type = (unsigned char)4U;
    #line 1181 
    break;
  }
  #line 1184 
  adapter->fw_type = fw_type;
  #line 1185 
  return;
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_p3_has_mn(struct netxen_adapter *adapter)
{
  #line 1190 
  u32 capability;
  #line 1190 
  u32 flashed_ver;
  #line 1191 
  capability = 0U;
  #line 1194 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 1195 
                                                     return 1;
  #line 1197 
  netxen_rom_fast_read(adapter,4097032,(int *)(& flashed_ver));
  #line 1199 
  flashed_ver = ((flashed_ver << 24) + (((flashed_ver >> 8) << 16) & 16711680U)) + (flashed_ver >> 16);
  #line 1201 
  if (flashed_ver > 67109083U) {
    #line 1203 
    capability = (*(adapter->crb_read))(adapter,136323116UL);
    #line 1204 
    if ((capability & 1U) != 0U) 
                                 #line 1205 
                                 return 1;
  }
  #line 1207 
  return 0;
}

#line 1210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_request_firmware(struct netxen_adapter *adapter)
{
  #line 1212 
  struct pci_dev *pdev = adapter->pdev;
  #line 1213 
  int rc = 0;
  #line 1215 
  adapter->fw_type = (unsigned char)255U;
  #line 1217 
  next: 
        #line 1217 
  ;
  #line 1218 
  nx_get_next_fwtype(adapter);
  #line 1220 
  if ((unsigned int)adapter->fw_type == 4U) 
                                            #line 1221 
                                            adapter->fw = (struct firmware *)0;
  else {
    #line 1223 
    rc = cif_request_firmware(& adapter->fw,fw_name[(int)adapter->fw_type],& pdev->dev);
    #line 1225 
    if (rc != 0) 
                 #line 1226 
                 goto next;
    #line 1228 
    rc = netxen_validate_firmware(adapter);
    #line 1229 
    if (rc != 0) {
      #line 1230 
      cif_release_firmware(adapter->fw);
      #line 1231 
      msleep(1U);
      #line 1232 
      goto next;
    }
  }
  #line 1235 
  return;
}

#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_release_firmware(struct netxen_adapter *adapter)
{
  #line 1241 
  cif_release_firmware(adapter->fw);
  #line 1242 
  adapter->fw = (struct firmware *)0;
  #line 1243 
  return;
}

#line 1245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_init_dummy_dma(struct netxen_adapter *adapter)
{
  #line 1247 
  u64 addr;
  #line 1248 
  u32 hi;
  #line 1248 
  u32 lo;
  #line 1250 
  if ((unsigned int)adapter->ahw.revision_id > 37U) 
                                                    #line 1251 
                                                    return 0;
  #line 1253 
  adapter->dummy_dma.addr = pci_alloc_consistent(adapter->pdev,1024UL,& adapter->dummy_dma.phys_addr);
  #line 1256 
  if (adapter->dummy_dma.addr == (void *)0) {
    #line 1257 
    _dev_err(& (adapter->pdev)->dev,(char *)"ERROR: Could not allocate dummy DMA memory\n");
    #line 1259 
    return -12;
  }
  #line 1262 
  addr = adapter->dummy_dma.phys_addr;
  #line 1263 
  hi = (unsigned int)(addr >> 32);
  #line 1264 
  lo = (unsigned int)addr;
  #line 1266 
  (*(adapter->crb_write))(adapter,136323644UL,hi);
  #line 1267 
  (*(adapter->crb_write))(adapter,136323648UL,lo);
  #line 1269 
  return 0;
}

#line 1280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_free_dummy_dma(struct netxen_adapter *adapter)
{
  #line 1283 
  u32 ctrl;
  #line 1282 
  int i = 100;
  #line 1285 
  if ((unsigned int)adapter->ahw.revision_id > 37U) 
                                                    #line 1286 
                                                    return;
  #line 1288 
  if (adapter->dummy_dma.addr == (void *)0) 
                                            #line 1289 
                                            return;
  #line 1291 
  ctrl = (*(adapter->crb_read))(adapter,136323092UL);
  #line 1292 
  if ((ctrl & 1U) != 0U) {
    #line 1293 
    (*(adapter->crb_write))(adapter,136323092UL,ctrl | 2U);
    #line 1295 
    while ((ctrl & 1U) != 0U) {
      #line 1297 
      msleep(50U);
      #line 1299 
      ctrl = (*(adapter->crb_read))(adapter,136323092UL);
      #line 1301 
      i --;
      #line 1301 
      if (i == 0) 
                  #line 1302 
                  break;
    }
  }
  #line 1306 
  if (i != 0) {
    #line 1307 
    pci_free_consistent(adapter->pdev,1024UL,adapter->dummy_dma.addr,adapter->dummy_dma.phys_addr);
    #line 1311 
    adapter->dummy_dma.addr = (void *)0;
  }
  else 
       #line 1313 
       _dev_err(& (adapter->pdev)->dev,(char *)"dma_watchdog_shutdown failed\n");
  #line 1314 
  return;
}

#line 1316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_phantom_init(struct netxen_adapter *adapter, int pegtune_val)
{
  #line 1318 
  u32 val = 0U;
  #line 1319 
  int retries = 60;
  #line 1321 
  if (pegtune_val != 0) 
                        #line 1322 
                        return 0;
  #line 1324 
  while (1) {
    #line 1325 
    val = (*(adapter->crb_read))(adapter,136323664UL);
    #line 1326 
    switch (val) {
      #line 1327 
      case (u32)65281: 
                       #line 1327 
      ;
      #line 1328 
      case (u32)61455: 
                       #line 1328 
      ;
      #line 1329 
      return 0;
      #line 1330 
      case (u32)65535: 
                       #line 1330 
      ;
      #line 1331 
      goto out_err;
      #line 1332 
      default: 
               #line 1332 
      ;
      #line 1333 
      break;
    }
    #line 1336 
    msleep(500U);
    #line 1338 
    retries --;
    #line 1338 
    if (! (retries != 0)) 
                          #line 1324 
                          break;
  }
  #line 1340 
  (*(adapter->crb_write))(adapter,136323664UL,65535U);
  #line 1342 
  out_err: 
           #line 1342 
  ;
  #line 1343 
  _dev_warn(& (adapter->pdev)->dev,(char *)"firmware init failed\n");
  #line 1344 
  return -5;
}

#line 1348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_receive_peg_ready(struct netxen_adapter *adapter)
{
  #line 1350 
  u32 val = 0U;
  #line 1351 
  int retries = 2000;
  #line 1353 
  while (1) {
    #line 1354 
    val = (*(adapter->crb_read))(adapter,136323900UL);
    #line 1356 
    if (val == 65281U) 
                       #line 1357 
                       return 0;
    #line 1359 
    msleep(10U);
    #line 1361 
    retries --;
    #line 1361 
    if (! (retries != 0)) 
                          #line 1353 
                          break;
  }
  #line 1363 
  printk((char *)"\001",val);
  #line 1364 
  return -5;
}

#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_init_firmware(struct netxen_adapter *adapter)
{
  #line 1369 
  int err;
  #line 1371 
  err = netxen_receive_peg_ready(adapter);
  #line 1372 
  if (err != 0) 
                #line 1373 
                return err;
  #line 1375 
  (*(adapter->crb_write))(adapter,136324008UL,1U);
  #line 1376 
  (*(adapter->crb_write))(adapter,136323780UL,8738U);
  #line 1377 
  (*(adapter->crb_write))(adapter,136323664UL,61455U);
  #line 1379 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 1380 
                                                     (*(adapter->crb_write))(adapter,136324208UL,1U);
  #line 1382 
  return err;
}

#line 1386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static void netxen_handle_linkevent(struct netxen_adapter *adapter, nx_fw_msg_t *msg)
{
  #line 1388 
  u32 cable_OUI;
  #line 1389 
  u16 cable_len;
  #line 1390 
  u16 link_speed;
  #line 1391 
  u8 link_status;
  #line 1391 
  u8 module;
  #line 1391 
  u8 duplex;
  #line 1391 
  u8 autoneg;
  #line 1392 
  struct net_device *netdev = adapter->netdev;
  #line 1394 
  adapter->has_link_events = (unsigned char)1U;
  #line 1396 
  cable_OUI = (unsigned int)msg->__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[1];
  #line 1397 
  cable_len = (unsigned short)(msg->__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[1] >> 32);
  #line 1398 
  link_speed = (unsigned short)(msg->__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[1] >> 48);
  #line 1400 
  link_status = (unsigned char)msg->__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[2];
  #line 1401 
  duplex = (unsigned char)(msg->__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[2] >> 16);
  #line 1402 
  autoneg = (unsigned char)(msg->__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[2] >> 24);
  #line 1404 
  module = (unsigned char)(msg->__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[2] >> 8);
  #line 1405 
  if ((unsigned int)module == 6U) 
                                  #line 1406 
                                  printk((char *)"\001",(char *)(& netdev->name),cable_OUI,(int)cable_len);
  else 
    #line 1408 
    if ((unsigned int)module == 7U) 
                                    #line 1409 
                                    printk((char *)"\001",(char *)(& netdev->name),(int)cable_len);
  #line 1414 
  if ((unsigned int)duplex == 1U) 
                                  #line 1415 
                                  adapter->link_duplex = (unsigned short)1U; else 
                                                                    #line 1417 
                                                                    adapter->link_duplex = (unsigned short)0U;
  #line 1418 
  adapter->module_type = (unsigned short)module;
  #line 1419 
  adapter->link_autoneg = (unsigned short)autoneg;
  #line 1420 
  adapter->link_speed = link_speed;
  #line 1422 
  netxen_advert_link_change(adapter,(int)link_status);
  #line 1423 
  return;
}

#line 1426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static void netxen_handle_fw_message(int desc_cnt, int index, struct nx_host_sds_ring *sds_ring)
{
  #line 1429 
  nx_fw_msg_t msg;
  #line 1430 
  struct status_desc *desc;
  #line 1431 
  int opcode;
  #line 1431 
  int i = 0;
  #line 1433 
  while (desc_cnt > 0 && i <= 7) {
    #line 1435 
    int tmp;
    #line 1436 
    int tmp_0;
    #line 1434 
    desc = sds_ring->desc_head + (unsigned long)index;
    #line 1435 
    tmp = i;
    #line 1435 
    i ++;
    #line 1435 
    msg.__anonCompField___anonstruct_nx_fw_msg_t_4138_192.words[tmp] = desc->status_desc_data[0];
    #line 1436 
    tmp_0 = i;
    #line 1436 
    i ++;
    #line 1436 
    msg.__anonCompField___anonstruct_nx_fw_msg_t_4138_192.words[tmp_0] = desc->status_desc_data[1];
    #line 1438 
    index = (int)((unsigned int)(index + 1) & (sds_ring->num_desc + 4294967295U));
    #line 1439 
    desc_cnt --;
  }
  #line 1442 
  opcode = (int)(msg.__anonCompField___anonstruct_nx_fw_msg_t_4138_192.__anonCompField___anonunion_4139_191.body[0] >> 32) & 255;
  #line 1443 
  switch (opcode) {
    #line 1444 
    case 141: 
              #line 1444 
    ;
    #line 1445 
    netxen_handle_linkevent(sds_ring->adapter,& msg);
    #line 1446 
    break;
    #line 1447 
    default: 
             #line 1447 
    ;
    #line 1448 
    break;
  }
  #line 1450 
  return;
}

#line 1453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static int netxen_alloc_rx_skb(struct netxen_adapter *adapter, struct nx_host_rds_ring *rds_ring, struct netxen_rx_buffer *buffer)
{
  #line 1457 
  struct sk_buff *skb;
  #line 1458 
  dma_addr_t dma;
  #line 1459 
  struct pci_dev *pdev = adapter->pdev;
  #line 1461 
  buffer->skb = netdev_alloc_skb(adapter->netdev,rds_ring->skb_size);
  #line 1462 
  if (buffer->skb == (struct sk_buff *)0) 
                                          #line 1463 
                                          return 1;
  #line 1465 
  skb = buffer->skb;
  #line 1467 
  if ((unsigned int)adapter->ahw.cut_through == 0U) 
                                                    #line 1468 
                                                    skb_reserve(skb,2);
  #line 1470 
  dma = pci_map_single(pdev,(void *)skb->data,(unsigned long)rds_ring->dma_size,2);
  #line 1473 
  if (pci_dma_mapping_error(pdev,dma) != 0) {
    #line 1474 
    dev_kfree_skb_any(skb);
    #line 1475 
    buffer->skb = (struct sk_buff *)0;
    #line 1476 
    return 1;
  }
  #line 1479 
  buffer->skb = skb;
  #line 1480 
  buffer->dma = dma;
  #line 1481 
  buffer->state = (unsigned short)1U;
  #line 1483 
  return 0;
}

#line 1486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static struct sk_buff *netxen_process_rxbuf(struct netxen_adapter *adapter, struct nx_host_rds_ring *rds_ring, u16 index, u16 cksum)
{
  #line 1489 
  struct netxen_rx_buffer *buffer;
  #line 1490 
  struct sk_buff *skb;
  #line 1492 
  buffer = rds_ring->rx_buf_arr + (unsigned long)index;
  #line 1494 
  pci_unmap_single(adapter->pdev,buffer->dma,(unsigned long)rds_ring->dma_size,2);
  #line 1497 
  skb = buffer->skb;
  #line 1498 
  if (skb == (struct sk_buff *)0) 
                                  #line 1499 
                                  goto no_skb;
  #line 1501 
  if ((long)(((adapter->netdev)->features & 549755813888ULL) != 0ULL) != 0L && (long)((unsigned int)cksum == 2U) != 0L) {
    #line 1503 
    (adapter->stats.csummed) ++;
    #line 1504 
    skb->ip_summed = (unsigned char)1U;
  }
  else 
       #line 1506 
       skb->ip_summed = (unsigned char)0U;
  #line 1508 
  buffer->skb = (struct sk_buff *)0;
  #line 1509 
  no_skb: 
          #line 1509 
  ;
  #line 1510 
  buffer->state = (unsigned short)0U;
  #line 1511 
  return skb;
}

#line 1515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static struct netxen_rx_buffer *netxen_process_rcv(struct netxen_adapter *adapter, struct nx_host_sds_ring *sds_ring, int ring, u64 sts_data0)
{
  #line 1521 
  struct netxen_rx_buffer *buffer;
  #line 1522 
  struct sk_buff *skb;
  #line 1523 
  struct nx_host_rds_ring *rds_ring;
  #line 1524 
  int index;
  #line 1524 
  int length;
  #line 1524 
  int cksum;
  #line 1524 
  int pkt_offset;
  #line 1519 
  struct net_device *netdev = adapter->netdev;
  #line 1520 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 1526 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
                                                         #line 1527 
                                                         return (struct netxen_rx_buffer *)0;
  #line 1529 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 1531 
  index = (int)(sts_data0 >> 28) & 65535;
  #line 1532 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 1533 
                                                               return (struct netxen_rx_buffer *)0;
  #line 1535 
  buffer = rds_ring->rx_buf_arr + (unsigned long)index;
  #line 1537 
  length = (int)(sts_data0 >> 12) & 65535;
  #line 1538 
  cksum = (int)(sts_data0 >> 4) & 15;
  #line 1539 
  pkt_offset = (int)(sts_data0 >> 48) & 31;
  #line 1541 
  skb = netxen_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)((int)((unsigned short)cksum)));
  #line 1542 
  if (skb == (struct sk_buff *)0) 
                                  #line 1543 
                                  return buffer;
  #line 1545 
  if (rds_ring->skb_size < (unsigned int)length) 
                                                 #line 1546 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    #line 1548 
                                                                    skb_put(skb,(unsigned int)length);
  #line 1551 
  if (pkt_offset != 0) 
                       #line 1552 
                       skb_pull(skb,(unsigned int)pkt_offset);
  #line 1554 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 1556 
  napi_gro_receive(& sds_ring->napi,skb);
  #line 1558 
  (adapter->stats.rx_pkts) ++;
  #line 1559 
  adapter->stats.rxbytes += (unsigned long long)length;
  #line 1561 
  return buffer;
}

#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static struct netxen_rx_buffer *netxen_process_lro(struct netxen_adapter *adapter, struct nx_host_sds_ring *sds_ring, int ring, u64 sts_data0, u64 sts_data1)
{
  #line 1575 
  struct netxen_rx_buffer *buffer;
  #line 1576 
  struct sk_buff *skb;
  #line 1577 
  struct nx_host_rds_ring *rds_ring;
  #line 1578 
  struct iphdr *iph;
  #line 1579 
  struct tcphdr *th;
  #line 1580 
  bool push;
  #line 1580 
  bool timestamp;
  #line 1581 
  int l2_hdr_offset;
  #line 1581 
  int l4_hdr_offset;
  #line 1582 
  int index;
  #line 1583 
  u16 lro_length;
  #line 1583 
  u16 length;
  #line 1583 
  u16 data_offset;
  #line 1584 
  u32 seq_number;
  #line 1573 
  struct net_device *netdev = adapter->netdev;
  #line 1574 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 1585 
  u8 vhdr_len = (unsigned char)0U;
  #line 1587 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
                                                         #line 1588 
                                                         return (struct netxen_rx_buffer *)0;
  #line 1590 
  rds_ring = recv_ctx->rds_rings + (unsigned long)ring;
  #line 1592 
  index = (int)sts_data0 & 65535;
  #line 1593 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
                                                               #line 1594 
                                                               return (struct netxen_rx_buffer *)0;
  #line 1596 
  buffer = rds_ring->rx_buf_arr + (unsigned long)index;
  #line 1598 
  timestamp = (_Bool)(((sts_data0 >> 48) & 1ULL) != 0ULL);
  #line 1599 
  lro_length = (unsigned short)(sts_data0 >> 16);
  #line 1600 
  l2_hdr_offset = (int)(sts_data0 >> 32) & 255;
  #line 1601 
  l4_hdr_offset = (int)(sts_data0 >> 40) & 255;
  #line 1602 
  push = (_Bool)(((sts_data0 >> 52) & 1ULL) != 0ULL);
  #line 1603 
  seq_number = (unsigned int)sts_data1;
  #line 1605 
  skb = netxen_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)2);
  #line 1606 
  if (skb == (struct sk_buff *)0) 
                                  #line 1607 
                                  return buffer;
  #line 1609 
  if ((int)timestamp != 0) 
                           #line 1610 
                           data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 32U); else 
                                                                    #line 1612 
                                                                    data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 20U);
  #line 1614 
  skb_put(skb,(unsigned int)((int)lro_length + (int)data_offset));
  #line 1616 
  skb_pull(skb,(unsigned int)l2_hdr_offset);
  #line 1617 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 1619 
  if ((unsigned int)skb->protocol == 129U) 
                                           #line 1620 
                                           vhdr_len = (unsigned char)4U;
  #line 1621 
  iph = (struct iphdr *)(skb->data + (unsigned long)vhdr_len);
  #line 1622 
  th = (struct tcphdr *)(skb->data + ((unsigned long)vhdr_len + (unsigned long)((int)iph->ihl << 2)));
  #line 1624 
  length = (unsigned short)((((int)((unsigned short)iph->ihl) << 2U) + ((int)((unsigned short)th->doff) << 2U)) + (int)lro_length);
  #line 1625 
  ;
  #line 1625 
  ;
  #line 1625 
  csum_replace2(& iph->check,(unsigned short)((int)iph->tot_len),(unsigned short)((int)__builtin_bswap16((unsigned short)((int)length))));
  #line 1626 
  iph->tot_len = __builtin_bswap16((unsigned short)((int)length));
  #line 1627 
  th->psh = (unsigned short)push;
  #line 1628 
  th->seq = __builtin_bswap32(seq_number);
  #line 1630 
  length = (unsigned short)skb->len;
  #line 1632 
  if ((adapter->flags & 128U) != 0U) {
    #line 1633 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size = (unsigned short)(sts_data1 >> 32);
  }
  #line 1635 
  netif_receive_skb(skb);
  #line 1637 
  (adapter->stats.lro_pkts) ++;
  #line 1638 
  adapter->stats.rxbytes += (unsigned long long)length;
  #line 1640 
  return buffer;
}

#line 1647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_process_rcv_ring(struct nx_host_sds_ring *sds_ring, int max)
{
  #line 1651 
  struct list_head *cur;
  #line 1653 
  struct status_desc *desc;
  #line 1654 
  struct netxen_rx_buffer *rxbuf;
  #line 1659 
  u64 sts_data0;
  #line 1659 
  u64 sts_data1;
  #line 1660 
  int opcode;
  #line 1660 
  int desc_cnt;
  #line 1649 
  struct netxen_adapter *adapter = sds_ring->adapter;
  #line 1656 
  u32 consumer = sds_ring->consumer;
  #line 1658 
  int count = 0;
  #line 1660 
  int ring = 0;
  #line 1662 
  while (count < max) {
    #line 1663 
    desc = sds_ring->desc_head + (unsigned long)consumer;
    #line 1664 
    sts_data0 = desc->status_desc_data[0];
    #line 1666 
    if ((sts_data0 & 72057594037927936ULL) == 0ULL) 
                                                    #line 1667 
                                                    break;
    #line 1669 
    desc_cnt = (int)(sts_data0 >> 53) & 7;
    #line 1671 
    opcode = (int)(sts_data0 >> 58);
    #line 1673 
    switch (opcode) {
      #line 1674 
      case 4: 
              #line 1674 
      ;
      #line 1675 
      case 63: 
               #line 1675 
      ;
      #line 1676 
      case 3: 
              #line 1676 
      ;
      #line 1677 
      ring = (int)(sts_data0 >> 8) & 15;
      #line 1678 
      rxbuf = netxen_process_rcv(adapter,sds_ring,ring,sts_data0);
      #line 1680 
      break;
      #line 1681 
      case 18: 
               #line 1681 
      ;
      #line 1682 
      ring = (int)(sts_data0 >> 49) & 7;
      #line 1683 
      sts_data1 = desc->status_desc_data[1];
      #line 1684 
      rxbuf = netxen_process_lro(adapter,sds_ring,ring,sts_data0,sts_data1);
      #line 1686 
      break;
      #line 1687 
      case 5: 
              #line 1687 
      ;
      #line 1688 
      netxen_handle_fw_message(desc_cnt,(int)consumer,sds_ring);
      #line 1689 
      default: 
               #line 1689 
      ;
      #line 1690 
      goto skip;
    }
    {
      #line 1693 
      int __ret_warn_on = desc_cnt > 1;
      #line 1693 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 1694 
        ldv_inline_asm();
        #line 1695 
        ldv_inline_asm();
      }
      #line 1693 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 1695 
    if (rxbuf != (struct netxen_rx_buffer *)0) 
                                               #line 1696 
                                               list_add_tail_1(& rxbuf->list,& sds_ring->free_list[ring]);
    #line 1698 
    skip: 
          #line 1698 
    ;
    #line 1699 
    while (desc_cnt > 0) {
      #line 1700 
      desc = sds_ring->desc_head + (unsigned long)consumer;
      #line 1701 
      desc->status_desc_data[0] = 144115188075855872ULL;
      #line 1703 
      consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
      #line 1699 
      desc_cnt --;
    }
    #line 1705 
    count ++;
  }
  #line 1708 
  ring = 0;
  #line 1708 
  while ((int)adapter->max_rds_rings > ring) {
    {
      #line 1709 
      struct nx_host_rds_ring *rds_ring = adapter->recv_ctx.rds_rings + (unsigned long)ring;
      #line 1712 
      if (list_empty_0(& sds_ring->free_list[ring]) == 0) {
        #line 1713 
        cur = sds_ring->free_list[ring].next;
        #line 1713 
        while (& sds_ring->free_list[ring] != cur) {
          {
            #line 1714 
            void *__mptr;
            #line 1714 
            __mptr = (void *)cur;
            #line 1714 
            rxbuf = ((struct netxen_rx_buffer *)__mptr);
            #line 1716 
            netxen_alloc_rx_skb(adapter,rds_ring,rxbuf);
          }
          #line 1713 
          cur = cur->next;
        }
        #line 1718 
        cif_spin_lock_lock_of_nx_host_rds_ring(& rds_ring->lock);
        #line 1719 
        list_splice_tail_init_0(& sds_ring->free_list[ring],& rds_ring->free_list);
        #line 1721 
        cif_spin_unlock_lock_of_nx_host_rds_ring(& rds_ring->lock);
      }
      #line 1724 
      netxen_post_rx_buffers_nodb(adapter,rds_ring);
    }
    #line 1708 
    ring ++;
  }
  #line 1727 
  if (count != 0) {
    #line 1728 
    sds_ring->consumer = consumer;
    #line 1729 
    (*(adapter->io_write))(adapter,sds_ring->crb_sts_consumer,consumer);
  }
  #line 1732 
  return count;
}

#line 1736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
int netxen_process_cmd_ring(struct netxen_adapter *adapter)
{
  #line 1738 
  u32 sw_consumer;
  #line 1738 
  u32 hw_consumer;
  #line 1739 
  int i;
  #line 1740 
  struct netxen_cmd_buffer *buffer;
  #line 1743 
  struct netxen_skb_frag *frag;
  #line 1739 
  int count = 0;
  #line 1741 
  struct pci_dev *pdev = adapter->pdev;
  #line 1742 
  struct net_device *netdev = adapter->netdev;
  #line 1744 
  int done = 0;
  #line 1745 
  struct nx_host_tx_ring *tx_ring = adapter->tx_ring;
  #line 1747 
  if (cif_spin_trylock_bh_tx_clean_lock_of_netxen_adapter(& adapter->tx_clean_lock) == 0) 
    #line 1748 
    return 1;
  #line 1750 
  sw_consumer = tx_ring->sw_consumer;
  #line 1751 
  hw_consumer = *(tx_ring->hw_consumer);
  #line 1753 
  while (sw_consumer != hw_consumer) {
    #line 1754 
    buffer = tx_ring->cmd_buf_arr + (unsigned long)sw_consumer;
    #line 1755 
    if (buffer->skb != (struct sk_buff *)0) {
      #line 1756 
      frag = & buffer->frag_array[0];
      #line 1757 
      pci_unmap_single(pdev,frag->dma,(unsigned long)frag->length,1);
      #line 1759 
      frag->dma = 0ULL;
      #line 1760 
      i = 1;
      #line 1760 
      while (buffer->frag_count > (unsigned int)i) {
        #line 1761 
        frag ++;
        #line 1762 
        pci_unmap_page(pdev,frag->dma,(unsigned long)frag->length,1);
        #line 1764 
        frag->dma = 0ULL;
        #line 1760 
        i ++;
      }
      #line 1767 
      (adapter->stats.xmitfinished) ++;
      #line 1768 
      dev_kfree_skb_any(buffer->skb);
      #line 1769 
      buffer->skb = (struct sk_buff *)0;
    }
    #line 1772 
    sw_consumer = (sw_consumer + 1U) & (tx_ring->num_desc + 4294967295U);
    #line 1773 
    count ++;
    #line 1773 
    if (count > 63) 
                    #line 1774 
                    break;
  }
  #line 1777 
  tx_ring->sw_consumer = sw_consumer;
  #line 1779 
  if (count != 0) {
    #line 1779 
    if ((int)netif_running(netdev) != 0) {
      #line 1781 
      ldv_inline_asm();
      #line 1782 
      if ((int)netif_queue_stopped(netdev) != 0) {
        #line 1782 
        if ((int)netif_carrier_ok(netdev) != 0) {
          #line 1783 
          if (netxen_tx_avail(tx_ring) > 10U) 
                                              #line 1784 
                                              netif_wake_queue(netdev);
        }
      }
      #line 1785 
      adapter->tx_timeo_cnt = (unsigned char)0U;
    }
  }
  #line 1800 
  hw_consumer = *(tx_ring->hw_consumer);
  #line 1801 
  done = sw_consumer == hw_consumer;
  #line 1802 
  cif_spin_unlock_bh_tx_clean_lock_of_netxen_adapter(& adapter->tx_clean_lock);
  #line 1804 
  return done;
}

#line 1808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_post_rx_buffers(struct netxen_adapter *adapter, u32 ringid, struct nx_host_rds_ring *rds_ring)
{
  #line 1811 
  struct rcv_desc *pdesc;
  #line 1812 
  struct netxen_rx_buffer *buffer;
  #line 1813 
  int producer;
  #line 1815 
  struct list_head *head;
  #line 1813 
  int count = 0;
  #line 1814 
  netxen_ctx_msg msg = 0U;
  #line 1817 
  producer = (int)rds_ring->producer;
  #line 1819 
  head = & rds_ring->free_list;
  #line 1820 
  while (1) {
    #line 1820 
    if (! (list_empty_0(head) == 0)) 
                                     #line 1820 
                                     break;
    {
      #line 1822 
      void *__mptr;
      #line 1822 
      __mptr = (void *)head->next;
      #line 1822 
      buffer = ((struct netxen_rx_buffer *)__mptr);
      #line 1824 
      if (buffer->skb == (struct sk_buff *)0) {
        #line 1825 
        if (netxen_alloc_rx_skb(adapter,rds_ring,buffer) != 0) 
                                                               #line 1826 
                                                               break;
      }
      #line 1829 
      count ++;
      #line 1830 
      list_del_1(& buffer->list);
      #line 1833 
      pdesc = rds_ring->desc_head + (unsigned long)producer;
      #line 1834 
      pdesc->addr_buffer = buffer->dma;
      #line 1835 
      pdesc->reference_handle = buffer->ref_handle;
      #line 1836 
      pdesc->buffer_length = rds_ring->dma_size;
      #line 1838 
      producer = (int)((unsigned int)(producer + 1) & (rds_ring->num_desc + 4294967295U));
    }
  }
  #line 1841 
  if (count != 0) {
    #line 1842 
    rds_ring->producer = (unsigned int)producer;
    #line 1843 
    (*(adapter->io_write))(adapter,rds_ring->crb_rcv_producer,(unsigned int)(producer + -1) & (rds_ring->num_desc + 4294967295U));
    #line 1846 
    if ((unsigned int)adapter->ahw.revision_id <= 37U) {
      #line 1852 
      msg &= 4294967292U;
      #line 1852 
      msg |= 2U;
      #line 1853 
      msg |= 4U;
      #line 1854 
      msg &= 4294705159U;
      #line 1854 
      msg = ((((unsigned int)(producer + -1) & (rds_ring->num_desc + 4294967295U)) << 3) & 262136U) | msg;
      #line 1857 
      msg &= 4026793983U;
      #line 1857 
      msg = (unsigned int)((int)adapter->portnum << 18) | msg;
      #line 1858 
      msg &= 268435455U;
      #line 1858 
      msg = (ringid << 28) | msg;
      #line 1859 
      (*(adapter->io_write))(adapter,adapter->ahw.db_base,msg);
    }
  }
  #line 1862 
  return;
}

#line 1866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
static void netxen_post_rx_buffers_nodb(struct netxen_adapter *adapter, struct nx_host_rds_ring *rds_ring)
{
  #line 1869 
  struct rcv_desc *pdesc;
  #line 1870 
  struct netxen_rx_buffer *buffer;
  #line 1871 
  int producer;
  #line 1872 
  struct list_head *head;
  #line 1871 
  int count = 0;
  #line 1874 
  if (cif_spin_trylock_lock_of_nx_host_rds_ring(& rds_ring->lock) == 0) 
    #line 1875 
    return;
  #line 1877 
  producer = (int)rds_ring->producer;
  #line 1879 
  head = & rds_ring->free_list;
  #line 1880 
  while (1) {
    #line 1880 
    if (! (list_empty_0(head) == 0)) 
                                     #line 1880 
                                     break;
    {
      #line 1882 
      void *__mptr;
      #line 1882 
      __mptr = (void *)head->next;
      #line 1882 
      buffer = ((struct netxen_rx_buffer *)__mptr);
      #line 1884 
      if (buffer->skb == (struct sk_buff *)0) {
        #line 1885 
        if (netxen_alloc_rx_skb(adapter,rds_ring,buffer) != 0) 
                                                               #line 1886 
                                                               break;
      }
      #line 1889 
      count ++;
      #line 1890 
      list_del_1(& buffer->list);
      #line 1893 
      pdesc = rds_ring->desc_head + (unsigned long)producer;
      #line 1894 
      pdesc->reference_handle = buffer->ref_handle;
      #line 1895 
      pdesc->buffer_length = rds_ring->dma_size;
      #line 1896 
      pdesc->addr_buffer = buffer->dma;
      #line 1898 
      producer = (int)((unsigned int)(producer + 1) & (rds_ring->num_desc + 4294967295U));
    }
  }
  #line 1901 
  if (count != 0) {
    #line 1902 
    rds_ring->producer = (unsigned int)producer;
    #line 1903 
    (*(adapter->io_write))(adapter,rds_ring->crb_rcv_producer,(unsigned int)(producer + -1) & (rds_ring->num_desc + 4294967295U));
  }
  #line 1906 
  cif_spin_unlock_lock_of_nx_host_rds_ring(& rds_ring->lock);
  #line 1907 
  return;
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_init.c"
void netxen_nic_clear_stats(struct netxen_adapter *adapter)
{
  #line 1911 
  memset((void *)(& adapter->stats),0,72UL);
  #line 1912 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 145 
  return ldv_strncmp(cs,ct,count);
}

#line 337  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 340 
  return ldv_kcalloc(n,size,flags);
}

#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 361 
  return ldv_kzalloc(size,flags);
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_lock_bh_tx_clean_lock_of_netxen_adapter(spinlock_t *lock)
{
  #line 803 
  ldv_spin_model_lock((char *)"tx_clean_lock_of_netxen_adapter");
  #line 805 
  spin_lock_bh_0(lock);
  #line 806 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_unlock_bh_tx_clean_lock_of_netxen_adapter(spinlock_t *lock)
{
  #line 812 
  ldv_spin_model_unlock((char *)"tx_clean_lock_of_netxen_adapter");
  #line 814 
  spin_unlock_bh_0(lock);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_vfree_1(void *addr)
{
  #line 821 
  ldv_vfree(addr);
  #line 822 
  return;
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void *cif_vzalloc_0(unsigned long size)
{
  #line 828 
  return ldv_vzalloc(size);
}

#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 835 
  return ldv_request_firmware(fw);
}

#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 842 
  ldv_release_firmware(fw);
  #line 843 
  return;
}

#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_lock_lock_of_nx_host_rds_ring(spinlock_t *lock)
{
  #line 849 
  ldv_spin_model_lock((char *)"lock_of_nx_host_rds_ring");
  #line 851 
  spin_lock_1(lock);
  #line 852 
  return;
}

#line 855  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static void cif_spin_unlock_lock_of_nx_host_rds_ring(spinlock_t *lock)
{
  #line 858 
  ldv_spin_model_unlock((char *)"lock_of_nx_host_rds_ring");
  #line 860 
  spin_unlock_1(lock);
  #line 861 
  return;
}

#line 864  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_spin_trylock_bh_tx_clean_lock_of_netxen_adapter(spinlock_t *lock)
{
  #line 868 
  ldv_func_ret_type ldv_func_res = spin_trylock_bh(lock);
  #line 870 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 872 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 875 
                                           return 0;
  else {
    #line 877 
    ldv_spin_model_lock((char *)"tx_clean_lock_of_netxen_adapter");
    #line 879 
    return 1;
  }
  #line 882 
  return ldv_func_res;
}

#line 886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_init.i.aux"
static int cif_spin_trylock_lock_of_nx_host_rds_ring(spinlock_t *lock)
{
  #line 890 
  ldv_func_ret_type_0 ldv_func_res = spin_trylock(lock);
  #line 892 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 894 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 897 
                                           return 0;
  else {
    #line 899 
    ldv_spin_model_lock((char *)"lock_of_nx_host_rds_ring");
    #line 901 
    return 1;
  }
  #line 904 
  return ldv_func_res;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 912  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
static void cif_vfree_2(void *addr);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic.h"
static u32 FW_DUMP_LEVELS[7U] = {3U, 7U, 15U, 31U, 63U, 127U, 255U};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static struct netxen_nic_stats netxen_nic_gstrings_stats[9U] = {{.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'c', (char)'a', (char)'l', (char)'l', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 408}, {.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'f', (char)'i', (char)'n', (char)'i', (char)'s', (char)'h', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 416}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 424}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 432}, {.stat_string = {(char)'c', (char)'s', (char)'u', (char)'m', (char)'m', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 440}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 448}, {.stat_string = {(char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 456}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 464}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 472}};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static char netxen_nic_gstrings_test[2U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e'}};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_get_eeprom_len(struct net_device *dev)
{
  #line 57 
  return 4194304;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *drvinfo)
{
  #line 63 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 64 
  u32 fw_major = 0U;
  #line 65 
  u32 fw_minor = 0U;
  #line 66 
  u32 fw_build = 0U;
  #line 68 
  strlcpy((char *)(& drvinfo->driver),(char *)(& netxen_nic_driver_name),32UL);
  #line 70 
  strlcpy((char *)(& drvinfo->version),(char *)"4.0.82",32UL);
  #line 72 
  fw_major = (*(adapter->crb_read))(adapter,136323408UL);
  #line 73 
  fw_minor = (*(adapter->crb_read))(adapter,136323412UL);
  #line 74 
  fw_build = (*(adapter->crb_read))(adapter,136323416UL);
  #line 75 
  snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%d.%d.%d",fw_major,fw_minor,fw_build);
  #line 78 
  ;
  #line 78 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 79 
  return;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 88 
  u32 supported;
  #line 88 
  u32 advertising;
  #line 86 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 87 
  int check_sfp_module = 0;
  #line 91 
  if ((unsigned int)adapter->ahw.port_type == 1U) {
    #line 92 
    supported = 63U;
    #line 99 
    advertising = 60U;
    #line 104 
    cmd->base.port = (unsigned char)0U;
    #line 106 
    cmd->base.speed = (unsigned int)adapter->link_speed;
    #line 107 
    cmd->base.duplex = (unsigned char)adapter->link_duplex;
    #line 108 
    cmd->base.autoneg = (unsigned char)adapter->link_autoneg;
  }
  else 
    #line 110 
    if ((unsigned int)adapter->ahw.port_type == 2U) {
      #line 111 
      u32 val;
      #line 113 
      val = (*(adapter->crb_read))(adapter,136323108UL);
      #line 114 
      if (val == 3U) {
        #line 115 
        supported = 32U;
        #line 116 
        advertising = 32U;
      }
      else {
        #line 118 
        supported = 4096U;
        #line 119 
        advertising = 4096U;
      }
      #line 122 
      if ((int)netif_running(dev) != 0) 
        #line 122 
        if ((unsigned int)adapter->has_link_events != 0U) {
          #line 123 
          cmd->base.speed = (unsigned int)adapter->link_speed;
          #line 124 
          cmd->base.autoneg = (unsigned char)adapter->link_autoneg;
          #line 125 
          cmd->base.duplex = (unsigned char)adapter->link_duplex;
          #line 126 
          goto skip;
        }
      #line 129 
      cmd->base.port = (unsigned char)0U;
      #line 131 
      if ((unsigned int)adapter->ahw.revision_id > 47U) {
        #line 132 
        u16 pcifn = (unsigned short)adapter->ahw.pci_func;
        #line 134 
        val = (*(adapter->crb_read))(adapter,(unsigned long)((int)((unsigned int)pcifn / 4U) * 4) + 136323816UL);
        #line 135 
        cmd->base.speed = ((val >> ((int)pcifn & 3) * 8) & 255U) * 100U;
      }
      else 
           #line 138 
           cmd->base.speed = 10000U;
      #line 140 
      cmd->base.duplex = (unsigned char)1U;
      #line 141 
      cmd->base.autoneg = (unsigned char)0U;
    }
    else 
         #line 143 
         return -5;
  #line 145 
  skip: 
        #line 145 
  ;
  #line 146 
  cmd->base.phy_address = adapter->physical_port;
  #line 148 
  switch ((int)adapter->ahw.board_type) {
    #line 183 
    int tmp_2;
    #line 149 
    case 10: 
             #line 149 
    ;
    #line 150 
    case 12: 
             #line 150 
    ;
    #line 151 
    case 33: 
             #line 151 
    ;
    #line 152 
    case 36: 
             #line 152 
    ;
    #line 153 
    case 41: 
             #line 153 
    ;
    #line 154 
    supported |= 64U;
    #line 155 
    advertising |= 64U;
    #line 157 
    case 15: 
             #line 157 
    ;
    #line 158 
    case 49: 
             #line 158 
    ;
    #line 159 
    case 35: 
             #line 159 
    ;
    #line 160 
    case 39: 
             #line 160 
    ;
    #line 161 
    supported |= 128U;
    #line 162 
    advertising |= 128U;
    #line 163 
    cmd->base.port = (unsigned char)0U;
    #line 164 
    if ((unsigned int)adapter->ahw.board_type != 15U) 
                                                      #line 164 
                                                      cmd->base.autoneg = (unsigned char)adapter->link_autoneg; else 
                                                                    #line 164 
                                                                    cmd->base.autoneg = (unsigned char)0U;
    #line 167 
    break;
    #line 168 
    case 14: 
             #line 168 
    ;
    #line 169 
    case 13: 
             #line 169 
    ;
    #line 170 
    case 37: 
             #line 170 
    ;
    #line 171 
    case 40: 
             #line 171 
    ;
    #line 172 
    case 34: 
             #line 172 
    ;
    #line 173 
    supported |= 512U;
    #line 174 
    advertising |= 512U;
    #line 175 
    cmd->base.port = (unsigned char)2U;
    #line 176 
    cmd->base.autoneg = (unsigned char)0U;
    #line 177 
    break;
    #line 178 
    case 38: 
             #line 178 
    ;
    #line 179 
    case 42: 
             #line 179 
    ;
    #line 180 
    case 43: 
             #line 180 
    ;
    #line 181 
    advertising |= 128U;
    #line 182 
    supported |= 128U;
    #line 183 
    if ((int)netif_running(dev) != 0) 
      #line 183 
      if ((unsigned int)adapter->has_link_events != 0U) 
                                                        #line 183 
                                                        tmp_2 = 1; else 
                                                                    #line 183 
                                                                    tmp_2 = 0;
    else 
         #line 183 
         tmp_2 = 0;
    #line 183 
    check_sfp_module = tmp_2;
    #line 186 
    case 11: 
             #line 186 
    ;
    #line 187 
    case 50: 
             #line 187 
    ;
    #line 188 
    supported |= 1024U;
    #line 189 
    advertising |= 1024U;
    #line 190 
    cmd->base.port = (unsigned char)3U;
    #line 191 
    cmd->base.autoneg = (unsigned char)0U;
    #line 192 
    break;
    #line 193 
    case 128: 
              #line 193 
    ;
    #line 194 
    if ((unsigned int)adapter->ahw.port_type == 2U) {
      #line 200 
      int tmp_4;
      #line 195 
      cmd->base.autoneg = (unsigned char)0U;
      #line 196 
      supported |= 1152U;
      #line 197 
      advertising |= 1152U;
      #line 199 
      cmd->base.port = (unsigned char)3U;
      #line 200 
      if ((int)netif_running(dev) != 0) 
        #line 200 
        if ((unsigned int)adapter->has_link_events != 0U) 
                                                          #line 200 
                                                          tmp_4 = 1; else 
                                                                    #line 200 
                                                                    tmp_4 = 0;
      else 
           #line 200 
           tmp_4 = 0;
      #line 200 
      check_sfp_module = tmp_4;
    }
    else {
      #line 203 
      supported |= 192U;
      #line 204 
      advertising |= 192U;
      #line 206 
      cmd->base.port = (unsigned char)0U;
    }
    #line 208 
    break;
    #line 209 
    default: 
             #line 209 
    ;
    #line 210 
    printk((char *)"\001",(int)adapter->ahw.board_type);
    #line 212 
    return -5;
  }
  #line 215 
  if (check_sfp_module != 0) 
    #line 216 
    switch ((int)adapter->module_type) {
      #line 217 
      case 2: 
              #line 217 
      ;
      #line 218 
      case 3: 
              #line 218 
      ;
      #line 219 
      case 4: 
              #line 219 
      ;
      #line 220 
      case 5: 
              #line 220 
      ;
      #line 221 
      cmd->base.port = (unsigned char)3U;
      #line 222 
      break;
      #line 223 
      case 6: 
              #line 223 
      ;
      #line 224 
      case 7: 
              #line 224 
      ;
      #line 225 
      case 8: 
              #line 225 
      ;
      #line 226 
      cmd->base.port = (unsigned char)0U;
      #line 227 
      break;
      #line 228 
      default: 
               #line 228 
      ;
      #line 229 
      cmd->base.port = (unsigned char)255U;
    }
  #line 233 
  if (netif_running(dev)) {
    #line 233 
    if ((unsigned int)adapter->ahw.linkup == 0U) {
      #line 233 
      _LOR: {
              #line 234 
              cmd->base.duplex = (unsigned char)255U;
              #line 235 
              cmd->base.speed = 4294967295U;
            }
    }
  }
  else 
       #line 233 
       goto _LOR;
  #line 238 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 240 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 243 
  return 0;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 252 
  int ret;
  #line 250 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 251 
  u32 speed = cmd->base.speed;
  #line 254 
  if ((unsigned int)adapter->ahw.port_type != 1U) 
                                                  #line 255 
                                                  return -95;
  #line 257 
  if ((adapter->capabilities & 2048U) == 0U) 
                                             #line 258 
                                             return -95;
  #line 260 
  ret = nx_fw_cmd_set_gbe_port(adapter,speed,(unsigned int)cmd->base.duplex,(unsigned int)cmd->base.autoneg);
  #line 262 
  if (ret == 9) 
                #line 263 
                return -95;
  else 
    #line 264 
    if (ret != 0) 
                  #line 265 
                  return -5;
  #line 267 
  adapter->link_speed = (unsigned short)speed;
  #line 268 
  adapter->link_duplex = (unsigned short)cmd->base.duplex;
  #line 269 
  adapter->link_autoneg = (unsigned short)cmd->base.autoneg;
  #line 271 
  if (! netif_running(dev)) 
                            #line 272 
                            return 0;
  #line 274 
  (*((dev->netdev_ops)->ndo_stop))(dev);
  #line 275 
  return (*((dev->netdev_ops)->ndo_open))(dev);
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_get_regs_len(struct net_device *dev)
{
  #line 280 
  return 120;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *p)
{
  #line 288 
  struct nx_host_sds_ring *sds_ring;
  #line 290 
  int ring;
  #line 301 
  int tmp_0;
  #line 302 
  int tmp_1;
  #line 303 
  int tmp_2;
  #line 304 
  int tmp_3;
  #line 305 
  int tmp_4;
  #line 306 
  int tmp_5;
  #line 307 
  int tmp_6;
  #line 308 
  int tmp_7;
  #line 309 
  int tmp_8;
  #line 311 
  int tmp_9;
  #line 312 
  int tmp_10;
  #line 313 
  int tmp_11;
  #line 314 
  int tmp_12;
  #line 337 
  int tmp_20;
  #line 339 
  int tmp_21;
  #line 341 
  int tmp_22;
  #line 344 
  int tmp_23;
  #line 286 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 287 
  struct netxen_recv_context *recv_ctx = & adapter->recv_ctx;
  #line 289 
  u32 *regs_buff = (u32 *)p;
  #line 290 
  int i = 0;
  #line 291 
  int port = (int)adapter->physical_port;
  #line 293 
  memset(p,0,120UL);
  #line 295 
  regs->version = (unsigned int)((((int)adapter->ahw.revision_id << 16) | 16777216) | (int)(adapter->pdev)->device);
  #line 298 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 299 
                                            return;
  #line 301 
  tmp_0 = i;
  #line 301 
  i ++;
  #line 301 
  *(regs_buff + (unsigned long)tmp_0) = (*(adapter->crb_read))(adapter,136323664UL);
  #line 302 
  tmp_1 = i;
  #line 302 
  i ++;
  #line 302 
  *(regs_buff + (unsigned long)tmp_1) = (*(adapter->crb_read))(adapter,136323900UL);
  #line 303 
  tmp_2 = i;
  #line 303 
  i ++;
  #line 303 
  *(regs_buff + (unsigned long)tmp_2) = (*(adapter->crb_read))(adapter,136323368UL);
  #line 304 
  tmp_3 = i;
  #line 304 
  i ++;
  #line 304 
  *(regs_buff + (unsigned long)tmp_3) = (*(adapter->io_read))(adapter,adapter->crb_int_state_reg);
  #line 305 
  tmp_4 = i;
  #line 305 
  i ++;
  #line 305 
  *(regs_buff + (unsigned long)tmp_4) = (*(adapter->crb_read))(adapter,136323384UL);
  #line 306 
  tmp_5 = i;
  #line 306 
  i ++;
  #line 306 
  *(regs_buff + (unsigned long)tmp_5) = (*(adapter->crb_read))(adapter,136323392UL);
  #line 307 
  tmp_6 = i;
  #line 307 
  i ++;
  #line 307 
  *(regs_buff + (unsigned long)tmp_6) = (*(adapter->crb_read))(adapter,136323248UL);
  #line 308 
  tmp_7 = i;
  #line 308 
  i ++;
  #line 308 
  *(regs_buff + (unsigned long)tmp_7) = (*(adapter->crb_read))(adapter,136323240UL);
  #line 309 
  tmp_8 = i;
  #line 309 
  i ++;
  #line 309 
  *(regs_buff + (unsigned long)tmp_8) = (*(adapter->crb_read))(adapter,136323244UL);
  #line 311 
  tmp_9 = i;
  #line 311 
  i ++;
  #line 311 
  *(regs_buff + (unsigned long)tmp_9) = (*(adapter->crb_read))(adapter,118489148UL);
  #line 312 
  tmp_10 = i;
  #line 312 
  i ++;
  #line 312 
  *(regs_buff + (unsigned long)tmp_10) = (*(adapter->crb_read))(adapter,119537724UL);
  #line 313 
  tmp_11 = i;
  #line 313 
  i ++;
  #line 313 
  *(regs_buff + (unsigned long)tmp_11) = (*(adapter->crb_read))(adapter,120586300UL);
  #line 314 
  tmp_12 = i;
  #line 314 
  i ++;
  #line 314 
  *(regs_buff + (unsigned long)tmp_12) = (*(adapter->crb_read))(adapter,121634876UL);
  #line 316 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 318 
    int tmp_13;
    #line 321 
    int tmp_14;
    #line 322 
    int tmp_15;
    #line 318 
    tmp_13 = i;
    #line 318 
    i ++;
    #line 318 
    *(regs_buff + (unsigned long)tmp_13) = (*(adapter->crb_read))(adapter,116391996UL);
    #line 319 
    i += 2;
    #line 321 
    tmp_14 = i;
    #line 321 
    i ++;
    #line 321 
    *(regs_buff + (unsigned long)tmp_14) = (*(adapter->crb_read))(adapter,136323736UL);
    #line 322 
    tmp_15 = i;
    #line 322 
    i ++;
    #line 322 
    *(regs_buff + (unsigned long)tmp_15) = *((adapter->tx_ring)->hw_consumer);
  }
  else {
    #line 327 
    int tmp_16;
    #line 329 
    int tmp_17;
    #line 332 
    int tmp_18;
    #line 333 
    int tmp_19;
    #line 325 
    i ++;
    #line 327 
    tmp_16 = i;
    #line 327 
    i ++;
    #line 327 
    *(regs_buff + (unsigned long)tmp_16) = (*(adapter->crb_read))(adapter,(unsigned long)(port * 65536) + 107413504UL);
    #line 329 
    tmp_17 = i;
    #line 329 
    i ++;
    #line 329 
    *(regs_buff + (unsigned long)tmp_17) = (*(adapter->crb_read))(adapter,(unsigned long)(port * 65536) + 107413508UL);
    #line 332 
    tmp_18 = i;
    #line 332 
    i ++;
    #line 332 
    *(regs_buff + (unsigned long)tmp_18) = (*(adapter->crb_read))(adapter,136323732UL);
    #line 333 
    tmp_19 = i;
    #line 333 
    i ++;
    #line 333 
    *(regs_buff + (unsigned long)tmp_19) = (*(adapter->io_read))(adapter,(adapter->tx_ring)->crb_cmd_consumer);
  }
  #line 337 
  tmp_20 = i;
  #line 337 
  i ++;
  #line 337 
  *(regs_buff + (unsigned long)tmp_20) = (*(adapter->io_read))(adapter,(adapter->tx_ring)->crb_cmd_producer);
  #line 339 
  tmp_21 = i;
  #line 339 
  i ++;
  #line 339 
  *(regs_buff + (unsigned long)tmp_21) = (*(adapter->io_read))(adapter,(recv_ctx->rds_rings)->crb_rcv_producer);
  #line 341 
  tmp_22 = i;
  #line 341 
  i ++;
  #line 341 
  *(regs_buff + (unsigned long)tmp_22) = (*(adapter->io_read))(adapter,(recv_ctx->rds_rings + 1U)->crb_rcv_producer);
  #line 344 
  tmp_23 = i;
  #line 344 
  i ++;
  #line 344 
  *(regs_buff + (unsigned long)tmp_23) = (unsigned int)adapter->max_sds_rings;
  #line 346 
  ring = 0;
  #line 346 
  while ((int)adapter->max_sds_rings > ring) {
    {
      #line 348 
      int tmp_24;
      #line 347 
      sds_ring = recv_ctx->sds_rings + (unsigned long)ring;
      #line 348 
      tmp_24 = i;
      #line 348 
      i ++;
      #line 348 
      *(regs_buff + (unsigned long)tmp_24) = (*(adapter->io_read))(adapter,sds_ring->crb_sts_consumer);
    }
    #line 346 
    ring ++;
  }
  #line 350 
  return;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static u32 netxen_nic_test_link(struct net_device *dev)
{
  #line 356 
  u32 val;
  #line 356 
  u32 port;
  #line 355 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 358 
  port = (unsigned int)adapter->physical_port;
  #line 359 
  if ((unsigned int)adapter->ahw.revision_id > 47U) {
    #line 360 
    val = (*(adapter->crb_read))(adapter,136323736UL);
    #line 361 
    val = (val >> (int)adapter->ahw.pci_func * 4) & 15U;
    #line 362 
    return (unsigned int)(val != 1U);
  }
  else {
    #line 364 
    val = (*(adapter->crb_read))(adapter,136323732UL);
    #line 365 
    val = (val >> port * 8U) & 255U;
    #line 366 
    return (unsigned int)(val != 16U);
  }
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 375 
  int offset;
  #line 376 
  int ret;
  #line 374 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 378 
  if (eeprom->len == 0U) 
                         #line 379 
                         return -22;
  #line 381 
  eeprom->magic = (unsigned int)((int)(adapter->pdev)->vendor | ((int)(adapter->pdev)->device << 16));
  #line 383 
  offset = (int)eeprom->offset;
  #line 385 
  ret = netxen_rom_fast_read_words(adapter,offset,bytes,(unsigned long)eeprom->len);
  #line 387 
  if (ret < 0) 
               #line 388 
               return ret;
  #line 390 
  return 0;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 397 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 399 
  ring->rx_pending = (unsigned int)adapter->num_rxd;
  #line 400 
  ring->rx_jumbo_pending = (unsigned int)adapter->num_jumbo_rxd;
  #line 401 
  ring->rx_jumbo_pending += (unsigned int)adapter->num_lro_rxd;
  #line 402 
  ring->tx_pending = (unsigned int)adapter->num_txd;
  #line 404 
  if ((unsigned int)adapter->ahw.port_type == 1U) {
    #line 405 
    ring->rx_max_pending = 4096U;
    #line 406 
    ring->rx_jumbo_max_pending = 512U;
  }
  else {
    #line 408 
    ring->rx_max_pending = 8192U;
    #line 409 
    ring->rx_jumbo_max_pending = 1024U;
  }
  #line 412 
  ring->tx_max_pending = 1024U;
  #line 413 
  return;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static u32 netxen_validate_ringparam(u32 val, u32 min, u32 max, char *r_name)
{
  #line 419 
  u32 __UNIQUE_ID___x534;
  #line 419 
  u32 tmp;
  #line 420 
  u32 __UNIQUE_ID___x536;
  #line 420 
  u32 tmp_1;
  #line 418 
  u32 num_desc;
  {
    #line 419 
    __UNIQUE_ID___x534 = val;
    #line 419 
    u32 __UNIQUE_ID___y535 = min;
    #line 419 
    if (__UNIQUE_ID___x534 > __UNIQUE_ID___y535) 
                                                 #line 419 
                                                 tmp = __UNIQUE_ID___x534; else 
                                                                    #line 419 
                                                                    tmp = __UNIQUE_ID___y535;
    }
  #line 419 
  num_desc = tmp;
  {
    #line 420 
    __UNIQUE_ID___x536 = num_desc;
    #line 420 
    u32 __UNIQUE_ID___y537 = max;
    #line 420 
    if (__UNIQUE_ID___x536 < __UNIQUE_ID___y537) 
                                                 #line 420 
                                                 tmp_1 = __UNIQUE_ID___x536; else 
                                                                    #line 420 
                                                                    tmp_1 = __UNIQUE_ID___y537;
    }
  #line 420 
  num_desc = tmp_1;
  #line 421 
  if (0 != 0) {
    #line 421 
    unsigned int tmp_7;
    #line 421 
    unsigned int tmp_39;
    #line 421 
    unsigned int tmp_40;
    #line 421 
    unsigned int tmp_8;
    #line 421 
    unsigned int tmp_9;
    #line 421 
    unsigned int tmp_41;
    #line 421 
    unsigned int tmp_42;
    #line 421 
    unsigned int tmp_10;
    #line 421 
    unsigned int tmp_11;
    #line 421 
    unsigned int tmp_43;
    #line 421 
    unsigned int tmp_44;
    #line 421 
    unsigned int tmp_12;
    #line 421 
    unsigned int tmp_13;
    #line 421 
    unsigned int tmp_45;
    #line 421 
    unsigned int tmp_46;
    #line 421 
    unsigned int tmp_14;
    #line 421 
    unsigned int tmp_15;
    #line 421 
    unsigned int tmp_47;
    #line 421 
    unsigned int tmp_48;
    #line 421 
    unsigned int tmp_16;
    #line 421 
    unsigned int tmp_17;
    #line 421 
    unsigned int tmp_49;
    #line 421 
    unsigned int tmp_50;
    #line 421 
    unsigned int tmp_18;
    #line 421 
    unsigned int tmp_19;
    #line 421 
    unsigned int tmp_51;
    #line 421 
    unsigned int tmp_52;
    #line 421 
    unsigned int tmp_20;
    #line 421 
    unsigned int tmp_21;
    #line 421 
    unsigned int tmp_53;
    #line 421 
    unsigned int tmp_54;
    #line 421 
    unsigned int tmp_22;
    #line 421 
    unsigned int tmp_23;
    #line 421 
    unsigned int tmp_55;
    #line 421 
    unsigned int tmp_56;
    #line 421 
    unsigned int tmp_24;
    #line 421 
    unsigned int tmp_25;
    #line 421 
    unsigned int tmp_57;
    #line 421 
    unsigned int tmp_58;
    #line 421 
    unsigned int tmp_26;
    #line 421 
    unsigned int tmp_27;
    #line 421 
    unsigned int tmp_59;
    #line 421 
    unsigned int tmp_60;
    #line 421 
    unsigned int tmp_28;
    #line 421 
    unsigned int tmp_29;
    #line 421 
    unsigned int tmp_61;
    #line 421 
    unsigned int tmp_62;
    #line 421 
    unsigned int tmp_30;
    #line 421 
    unsigned int tmp_31;
    #line 421 
    unsigned int tmp_63;
    #line 421 
    unsigned int tmp_64;
    #line 421 
    unsigned int tmp_32;
    #line 421 
    unsigned int tmp_33;
    #line 421 
    unsigned int tmp_65;
    #line 421 
    unsigned int tmp_34;
    #line 421 
    unsigned int tmp_67;
    #line 421 
    unsigned int tmp_3;
    #line 421 
    unsigned int tmp_35;
    #line 421 
    unsigned int tmp_36;
    #line 421 
    unsigned int tmp_4;
    #line 421 
    unsigned int tmp_5;
    #line 421 
    unsigned int tmp_37;
    #line 421 
    unsigned int tmp_38;
    #line 421 
    unsigned int tmp_6;
    #line 421 
    unsigned int tmp_68;
    #line 421 
    if (num_desc != 1U) {
      #line 421 
      if (0 != 0) {
        #line 421 
        if (num_desc + 4294967295U > 1U) {
          #line 421 
          if (((unsigned long long)(num_desc + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
            #line 421 
            if (((unsigned long long)(num_desc + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              #line 421 
              if (((unsigned long long)(num_desc + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                #line 421 
                if (((unsigned long long)(num_desc + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  #line 421 
                  if (((unsigned long long)(num_desc + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    #line 421 
                    if (((unsigned long long)(num_desc + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      #line 421 
                      if (((unsigned long long)(num_desc + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        #line 421 
                        if (((unsigned long long)(num_desc + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          #line 421 
                          if (((unsigned long long)(num_desc + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            #line 421 
                            if (((unsigned long long)(num_desc + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              #line 421 
                              if (((unsigned long long)(num_desc + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                #line 421 
                                if (((unsigned long long)(num_desc + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  #line 421 
                                  if (((unsigned long long)(num_desc + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    #line 421 
                                    if (((unsigned long long)(num_desc + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      #line 421 
                                      if (((unsigned long long)(num_desc + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        #line 421 
                                        if (((unsigned long long)(num_desc + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          #line 421 
                                          if (((unsigned long long)(num_desc + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            #line 421 
                                            if (((unsigned long long)(num_desc + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              #line 421 
                                              if (((unsigned long long)(num_desc + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                #line 421 
                                                if (((unsigned long long)(num_desc + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  #line 421 
                                                  if (((unsigned long long)(num_desc + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    #line 421 
                                                    if (((unsigned long long)(num_desc + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      #line 421 
                                                      if (((unsigned long long)(num_desc + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        #line 421 
                                                        if (((unsigned long long)(num_desc + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          #line 421 
                                                          if (((unsigned long long)(num_desc + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            #line 421 
                                                            if (((unsigned long long)(num_desc + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              #line 421 
                                                              if (((unsigned long long)(num_desc + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                #line 421 
                                                                if (((unsigned long long)(num_desc + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  #line 421 
                                                                  if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 421 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 421 
                                                                    tmp_3 = 8U; else 
                                                                    #line 421 
                                                                    tmp_3 = 4U;
                                                                    #line 421 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_4 = 16U;
                                                                    #line 421 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_5 = 32U;
                                                                    #line 421 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_6 = 64U;
                                                                    #line 421 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_7 = 128U;
                                                                    #line 421 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_8 = 256U;
                                                                    #line 421 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_9 = 512U;
                                                                    #line 421 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_10 = 1024U;
                                                                    #line 421 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_11 = 2048U;
                                                                    #line 421 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_12 = 4096U;
                                                                    #line 421 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_13 = 8192U;
                                                                    #line 421 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_14 = 16384U;
                                                                    #line 421 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_15 = 32768U;
                                                                    #line 421 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_16 = 65536U;
                                                                    #line 421 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_17 = 131072U;
                                                                    #line 421 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_18 = 262144U;
                                                                    #line 421 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_19 = 524288U;
                                                                    #line 421 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_20 = 1048576U;
                                                                    #line 421 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_21 = 2097152U;
                                                                    #line 421 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_22 = 4194304U;
                                                                    #line 421 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_23 = 8388608U;
                                                                    #line 421 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_24 = 16777216U;
                                                                    #line 421 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_25 = 33554432U;
                                                                    #line 421 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_26 = 67108864U;
                                                                    #line 421 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_27 = 134217728U;
                                                                    #line 421 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_28 = 268435456U;
                                                                    #line 421 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_29 = 536870912U;
                                                                    #line 421 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_30 = 1073741824U;
                                                                    #line 421 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_31 = 2147483648U;
                                                                    #line 421 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_32 = 0U;
                                                                    #line 421 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_33 = 0U;
                                                                    #line 421 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_34 = 0U;
                                                                    #line 421 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 421 
                                                                    tmp_35 = 0U;
                                                                    #line 421 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    #line 421 
                                                                    tmp_36 = 0U;
                                                                  #line 421 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  #line 421 
                                                                  tmp_37 = 0U;
                                                                #line 421 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
                                                                   #line 421 
                                                                   tmp_38 = 0U;
                                                              #line 421 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
                                                                 #line 421 
                                                                 tmp_39 = 0U;
                                                            #line 421 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
                                                               #line 421 
                                                               tmp_40 = 0U;
                                                          #line 421 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
                                                             #line 421 
                                                             tmp_41 = 0U;
                                                        #line 421 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
                                                           #line 421 
                                                           tmp_42 = 0U;
                                                      #line 421 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
                                                         #line 421 
                                                         tmp_43 = 0U;
                                                    #line 421 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
                                                       #line 421 
                                                       tmp_44 = 0U;
                                                  #line 421 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
                                                     #line 421 
                                                     tmp_45 = 0U;
                                                #line 421 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
                                                   #line 421 
                                                   tmp_46 = 0U;
                                              #line 421 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
                                                 #line 421 
                                                 tmp_47 = 0U;
                                            #line 421 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
                                               #line 421 
                                               tmp_48 = 0U;
                                          #line 421 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
                                             #line 421 
                                             tmp_49 = 0U;
                                        #line 421 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
                                           #line 421 
                                           tmp_50 = 0U;
                                      #line 421 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
                                         #line 421 
                                         tmp_51 = 0U;
                                    #line 421 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
                                       #line 421 
                                       tmp_52 = 0U;
                                  #line 421 
                                  tmp_53 = tmp_52;
                                }
                                else 
                                     #line 421 
                                     tmp_53 = 0U;
                                #line 421 
                                tmp_54 = tmp_53;
                              }
                              else 
                                   #line 421 
                                   tmp_54 = 0U;
                              #line 421 
                              tmp_55 = tmp_54;
                            }
                            else 
                                 #line 421 
                                 tmp_55 = 0U;
                            #line 421 
                            tmp_56 = tmp_55;
                          }
                          else 
                               #line 421 
                               tmp_56 = 0U;
                          #line 421 
                          tmp_57 = tmp_56;
                        }
                        else 
                             #line 421 
                             tmp_57 = 0U;
                        #line 421 
                        tmp_58 = tmp_57;
                      }
                      else 
                           #line 421 
                           tmp_58 = 0U;
                      #line 421 
                      tmp_59 = tmp_58;
                    }
                    else 
                         #line 421 
                         tmp_59 = 0U;
                    #line 421 
                    tmp_60 = tmp_59;
                  }
                  else 
                       #line 421 
                       tmp_60 = 0U;
                  #line 421 
                  tmp_61 = tmp_60;
                }
                else 
                     #line 421 
                     tmp_61 = 0U;
                #line 421 
                tmp_62 = tmp_61;
              }
              else 
                   #line 421 
                   tmp_62 = 0U;
              #line 421 
              tmp_63 = tmp_62;
            }
            else 
                 #line 421 
                 tmp_63 = 0U;
            #line 421 
            tmp_64 = tmp_63;
          }
          else 
               #line 421 
               tmp_64 = 0U;
          #line 421 
          tmp_65 = tmp_64;
        }
        else 
             #line 421 
             tmp_65 = 2U;
        #line 421 
        tmp_67 = tmp_65;
      }
      else {
        #line 421 
        tmp_67 = (unsigned int)(1UL << (__ilog2_u32(num_desc + 4294967295U) + 1));
      }
      #line 421 
      tmp_68 = tmp_67;
    }
    else 
         #line 421 
         tmp_68 = 1U;
    #line 421 
    num_desc = tmp_68;
  }
  else {
    #line 421 
    num_desc = (unsigned int)__roundup_pow_of_two((unsigned long)num_desc);
  }
  #line 423 
  if (val != num_desc) 
                       #line 424 
                       printk((char *)"\001",(char *)(& netxen_nic_driver_name),r_name,num_desc,val);
  #line 428 
  return num_desc;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 438 
  u16 num_rxd;
  #line 438 
  u16 num_jumbo_rxd;
  #line 438 
  u16 num_txd;
  #line 435 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 436 
  u16 max_rcv_desc = (unsigned short)8192U;
  #line 437 
  u16 max_jumbo_desc = (unsigned short)1024U;
  #line 440 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 441 
                                                     return -95;
  #line 443 
  if (ring->rx_mini_pending != 0U) 
                                   #line 444 
                                   return -95;
  #line 446 
  if ((unsigned int)adapter->ahw.port_type == 1U) {
    #line 447 
    max_rcv_desc = (unsigned short)4096U;
    #line 448 
    max_jumbo_desc = (unsigned short)1024U;
  }
  #line 451 
  num_rxd = (unsigned short)netxen_validate_ringparam(ring->rx_pending,64U,
                                  (unsigned int)max_rcv_desc,(char *)"rx");
  #line 454 
  num_jumbo_rxd = (unsigned short)netxen_validate_ringparam(ring->rx_jumbo_pending,32U,
                                  (unsigned int)max_jumbo_desc,
                                  (char *)"rx jumbo");
  #line 457 
  num_txd = (unsigned short)netxen_validate_ringparam(ring->tx_pending,64U,1024U,(char *)"tx");
  #line 460 
  if (((int)adapter->num_rxd == (int)num_rxd && (int)adapter->num_txd == (int)num_txd) && (int)adapter->num_jumbo_rxd == (int)num_jumbo_rxd) 
    #line 462 
    return 0;
  #line 464 
  adapter->num_rxd = num_rxd;
  #line 465 
  adapter->num_jumbo_rxd = num_jumbo_rxd;
  #line 466 
  adapter->num_txd = num_txd;
  #line 468 
  return netxen_nic_reset_context(adapter);
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 476 
  __u32 val;
  #line 475 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 477 
  int port = (int)adapter->physical_port;
  #line 479 
  pause->autoneg = 0U;
  #line 481 
  if ((unsigned int)adapter->ahw.port_type == 1U) {
    #line 482 
    if ((unsigned int)port > 3U) 
                                 #line 483 
                                 return;
    #line 485 
    val = (*(adapter->crb_read))(adapter,(unsigned long)(port * 65536) + 107151360UL);
    #line 486 
    pause->rx_pause = (val >> 5) & 1U;
    #line 487 
    val = (*(adapter->crb_read))(adapter,106955532UL);
    #line 488 
    switch (port) {
      #line 489 
      case 0: 
              #line 489 
      ;
      #line 490 
      pause->tx_pause = (unsigned int)((val & 1U) == 0U);
      #line 491 
      break;
      #line 492 
      case 1: 
              #line 492 
      ;
      #line 493 
      pause->tx_pause = (unsigned int)((val & 4U) == 0U);
      #line 494 
      break;
      #line 495 
      case 2: 
              #line 495 
      ;
      #line 496 
      pause->tx_pause = (unsigned int)((val & 16U) == 0U);
      #line 497 
      break;
      #line 498 
      case 3: 
              #line 498 
      ;
      #line 499 
      default: 
               #line 499 
      ;
      #line 500 
      pause->tx_pause = (unsigned int)((val & 64U) == 0U);
      #line 501 
      break;
    }
  }
  else 
    #line 503 
    if ((unsigned int)adapter->ahw.port_type == 2U) {
      #line 504 
      if ((unsigned int)port > 1U) 
                                   #line 505 
                                   return;
      #line 506 
      pause->rx_pause = 1U;
      #line 507 
      val = (*(adapter->crb_read))(adapter,106954904UL);
      #line 508 
      if (port == 0) 
                     #line 509 
                     pause->tx_pause = (unsigned int)((val & 1U) == 0U); else 
                                                                    #line 511 
                                                                    pause->tx_pause = (unsigned int)((val & 8U) == 0U);
    }
    else 
         #line 513 
         printk((char *)"\001",(char *)(& netxen_nic_driver_name),(int)adapter->ahw.port_type);
  #line 515 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 523 
  __u32 val;
  #line 522 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 524 
  int port = (int)adapter->physical_port;
  #line 527 
  if (pause->autoneg != 0U) 
                            #line 528 
                            return -22;
  #line 531 
  if ((unsigned int)adapter->ahw.port_type == 1U) {
    #line 532 
    if ((unsigned int)port > 3U) 
                                 #line 533 
                                 return -5;
    #line 535 
    val = (*(adapter->crb_read))(adapter,(unsigned long)(port * 65536) + 107151360UL);
    #line 537 
    if (pause->rx_pause != 0U) 
                               #line 538 
                               val |= 32U; else 
                                                #line 540 
                                                val &= 4294967263U;
    #line 542 
    (*(adapter->crb_write))(adapter,(unsigned long)(port * 65536) + 107151360UL,val);
    #line 545 
    val = (*(adapter->crb_read))(adapter,106955532UL);
    #line 546 
    switch (port) {
      #line 547 
      case 0: 
              #line 547 
      ;
      #line 548 
      if (pause->tx_pause != 0U) 
                                 #line 549 
                                 val &= 4294967294U; else 
                                                          #line 551 
                                                          val |= 1U;
      #line 552 
      break;
      #line 553 
      case 1: 
              #line 553 
      ;
      #line 554 
      if (pause->tx_pause != 0U) 
                                 #line 555 
                                 val &= 4294967291U; else 
                                                          #line 557 
                                                          val |= 4U;
      #line 558 
      break;
      #line 559 
      case 2: 
              #line 559 
      ;
      #line 560 
      if (pause->tx_pause != 0U) 
                                 #line 561 
                                 val &= 4294967279U; else 
                                                          #line 563 
                                                          val |= 16U;
      #line 564 
      break;
      #line 565 
      case 3: 
              #line 565 
      ;
      #line 566 
      default: 
               #line 566 
      ;
      #line 567 
      if (pause->tx_pause != 0U) 
                                 #line 568 
                                 val &= 4294967231U; else 
                                                          #line 570 
                                                          val |= 64U;
      #line 571 
      break;
    }
    #line 573 
    (*(adapter->crb_write))(adapter,106955532UL,val);
  }
  else 
    #line 574 
    if ((unsigned int)adapter->ahw.port_type == 2U) {
      #line 575 
      if ((unsigned int)port > 1U) 
                                   #line 576 
                                   return -5;
      #line 577 
      val = (*(adapter->crb_read))(adapter,106954904UL);
      #line 578 
      if (port == 0) 
        #line 579 
        if (pause->tx_pause != 0U) 
                                   #line 580 
                                   val &= 4294967294U; else 
                                                            #line 582 
                                                            val |= 1U;
      else 
        #line 584 
        if (pause->tx_pause != 0U) 
                                   #line 585 
                                   val &= 4294967287U; else 
                                                            #line 587 
                                                            val |= 8U;
      #line 589 
      (*(adapter->crb_write))(adapter,106954904UL,val);
    }
    else 
         #line 591 
         printk((char *)"\001",(char *)(& netxen_nic_driver_name),(int)adapter->ahw.port_type);
  #line 595 
  return 0;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_reg_test(struct net_device *dev)
{
  #line 601 
  u32 data_read;
  #line 601 
  u32 data_written;
  #line 600 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 603 
  data_read = (*(adapter->crb_read))(adapter,101711872UL);
  #line 604 
  if ((data_read & 65535U) != (unsigned int)(adapter->pdev)->vendor) 
    #line 605 
    return 1;
  #line 607 
  if ((unsigned int)adapter->ahw.revision_id > 47U) 
                                                    #line 608 
                                                    return 0;
  #line 610 
  data_written = 2779096485U;
  #line 612 
  (*(adapter->crb_write))(adapter,136324224UL,data_written);
  #line 613 
  data_read = (*(adapter->crb_read))(adapter,136324224UL);
  #line 614 
  if (data_written != data_read) 
                                 #line 615 
                                 return 1;
  #line 617 
  return 0;
}

#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_get_sset_count(struct net_device *dev, int sset)
{
  #line 622 
  switch (sset) {
    #line 623 
    case 0: 
            #line 623 
    ;
    #line 624 
    return 2;
    #line 625 
    case 1: 
            #line 625 
    ;
    #line 626 
    return 9;
    #line 627 
    default: 
             #line 627 
    ;
    #line 628 
    return -95;
  }
}

#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_diag_test(struct net_device *dev, struct ethtool_test *eth_test, u64 *data)
{
  #line 636 
  memset((void *)data,0,16UL);
  #line 637 
  *data = ((unsigned long long)netxen_nic_reg_test(dev));
  #line 637 
  if (((unsigned long long)netxen_nic_reg_test(dev)) != 0ULL) 
                                                              #line 638 
                                                              eth_test->flags |= 2U;
  #line 640 
  *(data + 1U) = ((unsigned long long)netxen_nic_test_link(dev));
  #line 640 
  if (((unsigned long long)netxen_nic_test_link(dev)) != 0ULL) 
                                                               #line 641 
                                                               eth_test->flags |= 2U;
  #line 642 
  return;
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 647 
  int index;
  #line 649 
  switch (stringset) {
    #line 650 
    case (u32)0: 
                 #line 650 
    ;
    #line 651 
    memcpy((void *)data,(void *)(& netxen_nic_gstrings_test),64UL);
    #line 653 
    break;
    #line 654 
    case (u32)1: 
                 #line 654 
    ;
    #line 655 
    index = 0;
    #line 655 
    while ((unsigned int)index <= 8U) {
      #line 656 
      memcpy((void *)(data + (unsigned long)(index * 32)),(void *)(& netxen_nic_gstrings_stats[index].stat_string),32UL);
      #line 655 
      index ++;
    }
    #line 660 
    break;
  }
  #line 662 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 669 
  int index;
  #line 668 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 671 
  index = 0;
  #line 671 
  while ((unsigned int)index <= 8U) {
    {
      #line 672 
      char *p = (char *)adapter + (unsigned long)netxen_nic_gstrings_stats[index].stat_offset;
      #line 675 
      if (netxen_nic_gstrings_stats[index].sizeof_stat == 8) 
                                                             #line 675 
                                                             *(data + (unsigned long)index) = *((u64 *)p); else 
                                                                    #line 675 
                                                                    *(data + (unsigned long)index) = (unsigned long long)*((u32 *)p);
    }
    #line 671 
    index ++;
  }
  #line 679 
  return;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static void netxen_nic_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 684 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 685 
  u32 wol_cfg = 0U;
  #line 687 
  wol->supported = 0U;
  #line 688 
  wol->wolopts = 0U;
  #line 690 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 691 
                                                     return;
  #line 693 
  wol_cfg = (*(adapter->crb_read))(adapter,136323460UL);
  #line 694 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) 
    #line 695 
    wol->supported |= 32U;
  #line 697 
  wol_cfg = (*(adapter->crb_read))(adapter,136323464UL);
  #line 698 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) 
    #line 699 
    wol->wolopts |= 32U;
  #line 700 
  return;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_nic_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 705 
  struct netxen_adapter *adapter = netdev_priv(dev);
  #line 706 
  u32 wol_cfg = 0U;
  #line 708 
  if ((unsigned int)adapter->ahw.revision_id <= 37U) 
                                                     #line 709 
                                                     return -95;
  #line 711 
  if ((wol->wolopts & 4294967263U) != 0U) 
                                          #line 712 
                                          return -95;
  #line 714 
  wol_cfg = (*(adapter->crb_read))(adapter,136323460UL);
  #line 715 
  if (((unsigned int)(1 << (int)adapter->portnum) & wol_cfg) == 0U) 
                                                                    #line 716 
                                                                    return -95;
  #line 718 
  wol_cfg = (*(adapter->crb_read))(adapter,136323464UL);
  #line 719 
  if ((wol->wolopts & 32U) != 0U) 
                                  #line 720 
                                  wol_cfg = (unsigned int)(1UL << (int)adapter->portnum) | wol_cfg; else 
                                                                    #line 722 
                                                                    wol_cfg = ~ ((unsigned int)(1UL << (int)adapter->portnum)) & wol_cfg;
  #line 723 
  (*(adapter->crb_write))(adapter,136323464UL,wol_cfg);
  #line 725 
  return 0;
}

#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_set_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *ethcoal)
{
  #line 736 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 738 
  if ((unsigned int)adapter->ahw.revision_id <= 47U) 
                                                     #line 739 
                                                     return -22;
  #line 741 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 742 
                                            return -22;
  #line 748 
  if ((((((((((((((((((((ethcoal->rx_coalesce_usecs > 65535U || ethcoal->rx_max_coalesced_frames > 65535U) || ethcoal->tx_coalesce_usecs > 65535U) || ethcoal->tx_max_coalesced_frames > 65535U) || ethcoal->rx_coalesce_usecs_irq != 0U) || ethcoal->rx_max_coalesced_frames_irq != 0U) || ethcoal->tx_coalesce_usecs_irq != 0U) || ethcoal->tx_max_coalesced_frames_irq != 0U) || ethcoal->stats_block_coalesce_usecs != 0U) || ethcoal->use_adaptive_rx_coalesce != 0U) || ethcoal->use_adaptive_tx_coalesce != 0U) || ethcoal->pkt_rate_low != 0U) || ethcoal->rx_coalesce_usecs_low != 0U) || ethcoal->rx_max_coalesced_frames_low != 0U) || ethcoal->tx_coalesce_usecs_low != 0U) || ethcoal->tx_max_coalesced_frames_low != 0U) || ethcoal->pkt_rate_high != 0U) || ethcoal->rx_coalesce_usecs_high != 0U) || ethcoal->rx_max_coalesced_frames_high != 0U) || ethcoal->tx_coalesce_usecs_high != 0U) || ethcoal->tx_max_coalesced_frames_high != 0U) 
    #line 769 
    return -22;
  #line 771 
  if (ethcoal->rx_coalesce_usecs == 0U || ethcoal->rx_max_coalesced_frames == 0U) {
    #line 773 
    adapter->coal.flags = (unsigned short)4U;
    #line 774 
    adapter->coal.normal.data.rx_time_us = (unsigned short)3U;
    #line 776 
    adapter->coal.normal.data.rx_packets = (unsigned short)256U;
  }
  else {
    #line 779 
    adapter->coal.flags = (unsigned short)0U;
    #line 780 
    adapter->coal.normal.data.rx_time_us = (unsigned short)ethcoal->rx_coalesce_usecs;
    #line 782 
    adapter->coal.normal.data.rx_packets = (unsigned short)ethcoal->rx_max_coalesced_frames;
  }
  #line 785 
  adapter->coal.normal.data.tx_time_us = (unsigned short)ethcoal->tx_coalesce_usecs;
  #line 786 
  adapter->coal.normal.data.tx_packets = (unsigned short)ethcoal->tx_max_coalesced_frames;
  #line 789 
  netxen_config_intr_coalesce(adapter);
  #line 791 
  return 0;
}

#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_get_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *ethcoal)
{
  #line 797 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 799 
  if ((unsigned int)adapter->ahw.revision_id <= 47U) 
                                                     #line 800 
                                                     return -22;
  #line 802 
  if ((unsigned int)adapter->is_up != 777U) 
                                            #line 803 
                                            return -22;
  #line 805 
  ethcoal->rx_coalesce_usecs = (unsigned int)adapter->coal.normal.data.rx_time_us;
  #line 806 
  ethcoal->tx_coalesce_usecs = (unsigned int)adapter->coal.normal.data.tx_time_us;
  #line 807 
  ethcoal->rx_max_coalesced_frames = (unsigned int)adapter->coal.normal.data.rx_packets;
  #line 809 
  ethcoal->tx_max_coalesced_frames = (unsigned int)adapter->coal.normal.data.tx_packets;
  #line 812 
  return 0;
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_get_dump_flag(struct net_device *netdev, struct ethtool_dump *dump)
{
  #line 818 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 819 
  struct netxen_minidump *mdump = & adapter->mdump;
  #line 820 
  if (adapter->fw_mdump_rdy != 0) 
                                  #line 821 
                                  dump->len = mdump->md_dump_size; else 
                                                                    #line 823 
                                                                    dump->len = 0U;
  #line 825 
  if ((unsigned int)mdump->md_enabled == 0U) 
                                             #line 826 
                                             dump->flag = 0U; else 
                                                                   #line 828 
                                                                   dump->flag = (unsigned int)mdump->md_capture_mask;
  #line 830 
  dump->version = adapter->fw_version;
  #line 831 
  return 0;
}

#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_set_dump(struct net_device *netdev, struct ethtool_dump *val)
{
  #line 837 
  int i;
  #line 838 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 839 
  struct netxen_minidump *mdump = & adapter->mdump;
  #line 841 
  switch (val->flag) {
    #line 842 
    case (__u32)(-559022355): 
                              #line 842 
    ;
    #line 843 
    if ((unsigned int)mdump->md_enabled == 0U) {
      #line 844 
      netdev_info(netdev,(char *)"FW dump not enabled\n");
      #line 845 
      return 0;
    }
    #line 847 
    if (adapter->fw_mdump_rdy != 0) {
      #line 848 
      netdev_info(netdev,(char *)"Previous dump not cleared, not forcing dump\n");
      #line 849 
      return 0;
    }
    #line 851 
    netdev_info(netdev,(char *)"Forcing a fw dump\n");
    #line 852 
    nx_dev_request_reset(adapter);
    #line 853 
    break;
    #line 854 
    case (__u32)195952365: 
                           #line 854 
    ;
    #line 855 
    if ((unsigned int)mdump->md_enabled != 0U) {
      #line 856 
      netdev_info(netdev,(char *)"Disabling FW Dump\n");
      #line 857 
      mdump->md_enabled = (unsigned char)0U;
    }
    #line 859 
    break;
    #line 860 
    case (__u32)182320877: 
                           #line 860 
    ;
    #line 861 
    if ((unsigned int)mdump->md_enabled == 0U) {
      #line 862 
      netdev_info(netdev,(char *)"Enabling FW dump\n");
      #line 863 
      mdump->md_enabled = (unsigned char)1U;
    }
    #line 865 
    break;
    #line 866 
    case (__u32)(-559030611): 
                              #line 866 
    ;
    #line 867 
    netdev_info(netdev,(char *)"Forcing FW reset\n");
    #line 868 
    nx_dev_request_reset(adapter);
    #line 869 
    adapter->flags &= 4294967231U;
    #line 870 
    break;
    #line 871 
    default: 
             #line 871 
    ;
    #line 872 
    i = 0;
    #line 872 
    while ((unsigned int)i <= 6U) {
      #line 873 
      if (val->flag == FW_DUMP_LEVELS[i]) {
        #line 874 
        mdump->md_capture_mask = (unsigned char)val->flag;
        #line 875 
        netdev_info(netdev,(char *)"Driver mask changed to: 0x%x\n",(int)mdump->md_capture_mask);
        #line 878 
        return 0;
      }
      #line 872 
      i ++;
    }
    #line 881 
    netdev_info(netdev,(char *)"Invalid dump level: 0x%x\n",val->flag);
    #line 883 
    return -22;
  }
  #line 886 
  return 0;
}

#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
static int netxen_get_dump_data(struct net_device *netdev, struct ethtool_dump *dump, void *buffer)
{
  #line 893 
  int i;
  #line 893 
  int copy_sz;
  #line 894 
  u32 *hdr_ptr;
  #line 894 
  u32 *data;
  #line 895 
  struct netxen_adapter *adapter = netdev_priv(netdev);
  #line 896 
  struct netxen_minidump *mdump = & adapter->mdump;
  #line 899 
  if (adapter->fw_mdump_rdy == 0) {
    #line 900 
    netdev_info(netdev,(char *)"Dump not available\n");
    #line 901 
    return -22;
  }
  #line 904 
  copy_sz = (int)mdump->md_template_size;
  #line 905 
  hdr_ptr = (u32 *)mdump->md_template;
  #line 906 
  data = (u32 *)buffer;
  #line 907 
  i = 0;
  #line 907 
  while ((unsigned long)i < (unsigned long)copy_sz / 4UL) {
    #line 908 
    u32 *tmp_0;
    #line 908 
    u32 *tmp_1;
    #line 908 
    tmp_0 = data;
    #line 908 
    data ++;
    #line 908 
    tmp_1 = hdr_ptr;
    #line 908 
    hdr_ptr ++;
    #line 908 
    *tmp_0 = *tmp_1;
    #line 907 
    i ++;
  }
  #line 911 
  memcpy(buffer + (unsigned long)copy_sz,mdump->md_capture_buff + (unsigned long)mdump->md_template_size,(unsigned long)mdump->md_capture_size);
  #line 914 
  dump->len = mdump->md_capture_size + (unsigned int)copy_sz;
  #line 915 
  dump->flag = (unsigned int)mdump->md_capture_mask;
  #line 918 
  cif_vfree_2(mdump->md_capture_buff);
  #line 919 
  mdump->md_capture_buff = (void *)0;
  #line 920 
  adapter->fw_mdump_rdy = 0;
  #line 921 
  netdev_info(netdev,(char *)"extracted the fw dump Successfully\n");
  #line 922 
  return 0;
}

#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/netxen/netxen_nic_ethtool.c"
struct ethtool_ops netxen_nic_ethtool_ops = {.get_drvinfo = & netxen_nic_get_drvinfo, .get_regs_len = & netxen_nic_get_regs_len, .get_regs = & netxen_nic_get_regs, .get_wol = & netxen_nic_get_wol, .set_wol = & netxen_nic_set_wol, .get_link = & ethtool_op_get_link, .get_eeprom_len = & netxen_nic_get_eeprom_len, .get_eeprom = & netxen_nic_get_eeprom, .get_coalesce = & netxen_get_intr_coalesce, .set_coalesce = & netxen_set_intr_coalesce, .get_ringparam = & netxen_nic_get_ringparam, .set_ringparam = & netxen_nic_set_ringparam, .get_pauseparam = & netxen_nic_get_pauseparam, .set_pauseparam = & netxen_nic_set_pauseparam, .self_test = & netxen_nic_diag_test, .get_strings = & netxen_nic_get_strings, .get_ethtool_stats = & netxen_nic_get_ethtool_stats, .get_sset_count = & netxen_get_sset_count, .get_dump_flag = & netxen_get_dump_flag, .get_dump_data = & netxen_get_dump_data, .set_dump = & netxen_set_dump, .get_link_ksettings = & netxen_nic_get_link_ksettings, .set_link_ksettings = & netxen_nic_set_link_ksettings};
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_get_dump_data(struct net_device *arg0, struct ethtool_dump *arg1, void *arg2)
{
  #line 109 
  return netxen_get_dump_data(arg0,arg1,arg2);
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_get_dump_flag(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 114 
  return netxen_get_dump_flag(arg0,arg1);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_get_intr_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 119 
  return netxen_get_intr_coalesce(arg0,arg1);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 124 
  return netxen_get_sset_count(arg0,arg1);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_diag_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 129 
  netxen_nic_diag_test(arg0,arg1,arg2);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 134 
  netxen_nic_get_drvinfo(arg0,arg1);
  #line 135 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 139 
  return netxen_nic_get_eeprom(arg0,arg1,arg2);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_get_eeprom_len(struct net_device *arg0)
{
  #line 144 
  return netxen_nic_get_eeprom_len(arg0);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 149 
  netxen_nic_get_ethtool_stats(arg0,arg1,arg2);
  #line 150 
  return;
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 154 
  return netxen_nic_get_link_ksettings(arg0,arg1);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 159 
  netxen_nic_get_pauseparam(arg0,arg1);
  #line 160 
  return;
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 164 
  netxen_nic_get_regs(arg0,arg1,arg2);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_get_regs_len(struct net_device *arg0)
{
  #line 169 
  return netxen_nic_get_regs_len(arg0);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 174 
  netxen_nic_get_ringparam(arg0,arg1);
  #line 175 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 179 
  netxen_nic_get_strings(arg0,arg1,arg2);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
void emg_wrapper_netxen_nic_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 184 
  netxen_nic_get_wol(arg0,arg1);
  #line 185 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 189 
  return netxen_nic_set_link_ksettings(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 194 
  return netxen_nic_set_pauseparam(arg0,arg1);
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 199 
  return netxen_nic_set_ringparam(arg0,arg1);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_nic_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 204 
  return netxen_nic_set_wol(arg0,arg1);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_set_dump(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 209 
  return netxen_set_dump(arg0,arg1);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
int emg_wrapper_netxen_set_intr_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 214 
  return netxen_set_intr_coalesce(arg0,arg1);
}

#line 912  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/0/concurrency safety/weaver/netxen_nic_ethtool.i.aux"
static void cif_vfree_2(void *addr)
{
  #line 915 
  ldv_vfree(addr);
  #line 916 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
#line 236 
void *emg_devattr_devattr_instance_dev_attr_bridged_mode(void *arg0);
#line 101 
#line 316 
void *emg_devattr_devattr_instance_dev_attr_diag_mode(void *arg0);
#line 104 
#line 227 
void emg_dispatch_deregister_13(struct net_device *arg0);
#line 105 
#line 168 
void emg_dispatch_deregister_5(struct device *arg0, struct device_attribute *arg1);
#line 106 
#line 193 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 107 
#line 184 
void emg_dispatch_irq_deregister_6(int arg0);
#line 108 
#line 213 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 109 
#line 135 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 110 
#line 146 
void emg_dispatch_register_4(struct device *arg0, struct device_attribute *arg1);
#line 111 
#line 202 
void emg_dispatch_register_9(struct net_device *arg0);
#line 112 
#line 1414 
void *emg_entry_point_insmod(void *arg0);
#line 115 
#line 396 
void *emg_interrupt_interrupt_scenario_2(void *arg0);
#line 116 
#line 462 
void *emg_net_random_allocationless_scenario_netxen_get_intr_coalesce(void *arg0);
#line 117 
#line 923 
void *emg_pci_pci_scenario_netxen_driver(void *arg0);
#line 124 
#line 1443 
int main(void);
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 136 
  int ret;
  #line 137 
  struct emg_struct_pci_scenario_netxen_driver_18 *cf_arg_18;
  #line 138 
  cf_arg_18 = (struct emg_struct_pci_scenario_netxen_driver_18 *)ldv_xmalloc(16UL);
  #line 139 
  cf_arg_18->arg0 = arg0;
  #line 140 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_pci_pci_scenario_netxen_driver,(void *)cf_arg_18);
  #line 141 
  __VERIFIER_assume(ret == 0);
  #line 142 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct device *arg0, struct device_attribute *arg1)
{
  #line 147 
  int ret;
  #line 148 
  struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *cf_arg_14;
  #line 149 
  struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *cf_arg_15;
  #line 150 
  if (ldv_undef_int() != 0) {
    #line 151 
    cf_arg_14 = (struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *)ldv_xmalloc(24UL);
    #line 152 
    cf_arg_14->arg0 = arg0;
    #line 153 
    cf_arg_14->arg1 = arg1;
    #line 154 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_bridged_mode,(void *)cf_arg_14);
    #line 155 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 158 
    cf_arg_15 = (struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *)ldv_xmalloc(24UL);
    #line 159 
    cf_arg_15->arg0 = arg0;
    #line 160 
    cf_arg_15->arg1 = arg1;
    #line 161 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_diag_mode,(void *)cf_arg_15);
    #line 162 
    __VERIFIER_assume(ret == 0);
  }
  #line 164 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_5(struct device *arg0, struct device_attribute *arg1)
{
  #line 169 
  int ret;
  #line 170 
  struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *cf_arg_14;
  #line 171 
  struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *cf_arg_15;
  #line 172 
  if (ldv_undef_int() != 0) {
    #line 173 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 174 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 177 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 178 
    __VERIFIER_assume(ret == 0);
  }
  #line 180 
  return;
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_6(int arg0)
{
  #line 185 
  int ret;
  #line 186 
  struct emg_struct_free_irq_6 *cf_arg_16;
  #line 187 
  ret = pthread_join(emg_thread_16,(void **)0);
  #line 188 
  __VERIFIER_assume(ret == 0);
  #line 189 
  return;
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 194 
  int ret;
  #line 195 
  struct emg_struct_pci_scenario_netxen_driver_18 *cf_arg_18;
  #line 196 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 197 
  __VERIFIER_assume(ret == 0);
  #line 198 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 203 
  int ret;
  #line 204 
  struct emg_struct_random_allocationless_scenario_netxen_get_intr_coalesce_17 *cf_arg_17;
  #line 205 
  cf_arg_17 = (struct emg_struct_random_allocationless_scenario_netxen_get_intr_coalesce_17 *)ldv_xmalloc(16UL);
  #line 206 
  cf_arg_17->arg0 = arg0;
  #line 207 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_netxen_get_intr_coalesce,(void *)cf_arg_17);
  #line 208 
  __VERIFIER_assume(ret == 0);
  #line 209 
  return;
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 214 
  int ret;
  #line 215 
  struct emg_struct_interrupt_scenario_2_16 *cf_arg_16;
  #line 216 
  cf_arg_16 = (struct emg_struct_interrupt_scenario_2_16 *)ldv_xmalloc(40UL);
  #line 217 
  cf_arg_16->arg0 = arg0;
  #line 218 
  cf_arg_16->arg1 = arg1;
  #line 219 
  cf_arg_16->arg2 = arg2;
  #line 220 
  cf_arg_16->arg3 = arg3;
  #line 221 
  ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_2,(void *)cf_arg_16);
  #line 222 
  __VERIFIER_assume(ret == 0);
  #line 223 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct net_device *arg0)
{
  #line 228 
  int ret;
  #line 229 
  struct emg_struct_random_allocationless_scenario_netxen_get_intr_coalesce_17 *cf_arg_17;
  #line 230 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 231 
  __VERIFIER_assume(ret == 0);
  #line 232 
  return;
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_bridged_mode(void *arg0)
{
  #line 239 
  struct device_attribute *emg_14_devattr;
  #line 240 
  struct device *emg_14_device;
  #line 241 
  char *emg_14_emg_param_2_0;
  #line 242 
  char *emg_14_emg_param_2_1;
  #line 243 
  unsigned long emg_14_emg_param_3_2;
  #line 244 
  int emg_repeat_cnt_main_14 = 1;
  #line 246 
  struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *data = (struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *)arg0;
  #line 249 
  emg_14_devattr = emg_alias_dev_attr_bridged_mode;
  #line 251 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_bridged_mode);
  #line 253 
  if (data != (struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *)0) {
    #line 254 
    emg_14_device = data->arg0;
    #line 255 
    emg_14_devattr = data->arg1;
    #line 256 
    ldv_free((void *)data);
  }
  #line 261 
  goto emg_main_14;
  #line 265 
  return (void *)0;
  #line 268 
  emg_main_14: 
               #line 268 
  ;
  #line 269 
  if (ldv_undef_int() != 0) {
    #line 270 
    if (ldv_undef_int() != 0) {
      #line 272 
      emg_14_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 272 
      emg_14_emg_param_2_0 = emg_14_emg_param_2_0;
      #line 276 
      emg_wrapper_netxen_show_bridged_mode(emg_14_device,emg_14_devattr,emg_14_emg_param_2_0);
      #line 280 
      ldv_free((void *)emg_14_emg_param_2_0);
    }
    else {
      #line 284 
      emg_14_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 284 
      emg_14_emg_param_2_1 = emg_14_emg_param_2_1;
      #line 288 
      emg_wrapper_netxen_store_bridged_mode(emg_14_device,emg_14_devattr,emg_14_emg_param_2_1,emg_14_emg_param_3_2);
      #line 292 
      ldv_free((void *)emg_14_emg_param_2_1);
    }
    #line 296 
    if (emg_repeat_cnt_main_14 > 0) {
      #line 297 
      emg_repeat_cnt_main_14 --;
      #line 299 
      goto emg_main_14;
    }
    else 
         #line 301 
         __VERIFIER_assume(0);
  }
  #line 311 
  return (void *)0;
}

#line 316  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_diag_mode(void *arg0)
{
  #line 319 
  struct device_attribute *emg_15_devattr;
  #line 320 
  struct device *emg_15_device;
  #line 321 
  char *emg_15_emg_param_2_0;
  #line 322 
  char *emg_15_emg_param_2_1;
  #line 323 
  unsigned long emg_15_emg_param_3_2;
  #line 324 
  int emg_repeat_cnt_main_15 = 1;
  #line 326 
  struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *data = (struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *)arg0;
  #line 329 
  emg_15_devattr = emg_alias_dev_attr_diag_mode;
  #line 331 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_diag_mode);
  #line 333 
  if (data != (struct emg_struct_devattr_instance_dev_attr_bridged_mode_14 *)0) {
    #line 334 
    emg_15_device = data->arg0;
    #line 335 
    emg_15_devattr = data->arg1;
    #line 336 
    ldv_free((void *)data);
  }
  #line 341 
  goto emg_main_15;
  #line 345 
  return (void *)0;
  #line 348 
  emg_main_15: 
               #line 348 
  ;
  #line 349 
  if (ldv_undef_int() != 0) {
    #line 350 
    if (ldv_undef_int() != 0) {
      #line 352 
      emg_15_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 352 
      emg_15_emg_param_2_0 = emg_15_emg_param_2_0;
      #line 356 
      emg_wrapper_netxen_show_diag_mode(emg_15_device,emg_15_devattr,emg_15_emg_param_2_0);
      #line 360 
      ldv_free((void *)emg_15_emg_param_2_0);
    }
    else {
      #line 364 
      emg_15_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 364 
      emg_15_emg_param_2_1 = emg_15_emg_param_2_1;
      #line 368 
      emg_wrapper_netxen_store_diag_mode(emg_15_device,emg_15_devattr,emg_15_emg_param_2_1,emg_15_emg_param_3_2);
      #line 372 
      ldv_free((void *)emg_15_emg_param_2_1);
    }
    #line 376 
    if (emg_repeat_cnt_main_15 > 0) {
      #line 377 
      emg_repeat_cnt_main_15 --;
      #line 379 
      goto emg_main_15;
    }
    else 
         #line 381 
         __VERIFIER_assume(0);
  }
  #line 391 
  return (void *)0;
}

#line 396  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_2(void *arg0)
{
  #line 399 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 400 
  void *emg_16_data;
  #line 401 
  int emg_16_line;
  #line 402 
  enum irqreturn emg_16_ret_val;
  #line 403 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 405 
  struct emg_struct_interrupt_scenario_2_16 *data = (struct emg_struct_interrupt_scenario_2_16 *)arg0;
  #line 410 
  if (data != (struct emg_struct_interrupt_scenario_2_16 *)0) {
    #line 411 
    emg_16_line = data->arg0;
    #line 412 
    emg_16_callback = data->arg1;
    #line 413 
    emg_16_thread = data->arg2;
    #line 414 
    emg_16_data = data->arg3;
    #line 415 
    ldv_free((void *)data);
  }
  #line 421 
  ldv_switch_to_interrupt_context();
  #line 425 
  if (emg_16_callback != (enum irqreturn (*)(int , void *))0) 
                                                              #line 426 
                                                              emg_16_ret_val = (*emg_16_callback)(emg_16_line,emg_16_data);
  else {
    #line 428 
    emg_16_ret_val = (enum irqreturn)ldv_undef_int();
  }
  #line 434 
  ldv_switch_to_process_context();
  #line 437 
  if (ldv_undef_int() != 0) {
    #line 439 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 443 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 444 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 449 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 457 
  return (void *)0;
}

#line 462  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_netxen_get_intr_coalesce(void *arg0)
{
  #line 465 
  struct net_device *emg_17_container;
  #line 466 
  struct sk_buff *emg_17_emg_param_0_23;
  #line 467 
  struct ethtool_coalesce *emg_17_emg_param_1_0;
  #line 468 
  struct ethtool_drvinfo *emg_17_emg_param_1_1;
  #line 469 
  struct ethtool_pauseparam *emg_17_emg_param_1_10;
  #line 470 
  struct ethtool_regs *emg_17_emg_param_1_11;
  #line 471 
  struct ethtool_ringparam *emg_17_emg_param_1_13;
  #line 472 
  int emg_17_emg_param_1_14;
  #line 473 
  unsigned int emg_17_emg_param_1_15;
  #line 474 
  struct ethtool_wolinfo *emg_17_emg_param_1_17;
  #line 475 
  int emg_17_emg_param_1_18;
  #line 476 
  unsigned long long emg_17_emg_param_1_19;
  #line 477 
  struct ethtool_dump *emg_17_emg_param_1_2;
  #line 478 
  struct rtnl_link_stats64 *emg_17_emg_param_1_20;
  #line 479 
  unsigned long long emg_17_emg_param_1_21;
  #line 480 
  void *emg_17_emg_param_1_22;
  #line 481 
  struct ethtool_test *emg_17_emg_param_1_24;
  #line 482 
  struct ethtool_coalesce *emg_17_emg_param_1_26;
  #line 483 
  struct ethtool_dump *emg_17_emg_param_1_27;
  #line 484 
  struct ethtool_link_ksettings *emg_17_emg_param_1_28;
  #line 485 
  struct ethtool_pauseparam *emg_17_emg_param_1_29;
  #line 486 
  struct ethtool_ringparam *emg_17_emg_param_1_30;
  #line 487 
  struct ethtool_wolinfo *emg_17_emg_param_1_31;
  #line 488 
  struct ethtool_dump *emg_17_emg_param_1_4;
  #line 489 
  struct ethtool_eeprom *emg_17_emg_param_1_5;
  #line 490 
  struct ethtool_stats *emg_17_emg_param_1_7;
  #line 491 
  struct ethtool_link_ksettings *emg_17_emg_param_1_9;
  #line 492 
  void *emg_17_emg_param_2_12;
  #line 493 
  unsigned char *emg_17_emg_param_2_16;
  #line 494 
  unsigned long long *emg_17_emg_param_2_25;
  #line 495 
  void *emg_17_emg_param_2_3;
  #line 496 
  unsigned char *emg_17_emg_param_2_6;
  #line 497 
  unsigned long long *emg_17_emg_param_2_8;
  #line 498 
  int emg_repeat_cnt_call_17 = 1;
  #line 500 
  struct emg_struct_random_allocationless_scenario_netxen_get_intr_coalesce_17 *data = (struct emg_struct_random_allocationless_scenario_netxen_get_intr_coalesce_17 *)arg0;
  #line 505 
  if (data != (struct emg_struct_random_allocationless_scenario_netxen_get_intr_coalesce_17 *)0) {
    #line 506 
    emg_17_container = data->arg0;
    #line 507 
    ldv_free((void *)data);
  }
  #line 512 
  goto emg_call_17;
  #line 516 
  return (void *)0;
  #line 519 
  emg_call_17: 
               #line 519 
  ;
  #line 520 
  switch (ldv_undef_int()) {
    #line 521 
    case 0: 
            #line 521 
    ;
    #line 523 
    emg_17_emg_param_1_31 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 523 
    emg_17_emg_param_1_31 = emg_17_emg_param_1_31;
    #line 527 
    emg_wrapper_netxen_nic_set_wol(emg_17_container,emg_17_emg_param_1_31);
    #line 531 
    ldv_free((void *)emg_17_emg_param_1_31);
    #line 533 
    break;
    #line 535 
    case 1: 
            #line 535 
    ;
    #line 537 
    emg_17_emg_param_1_30 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 537 
    emg_17_emg_param_1_30 = emg_17_emg_param_1_30;
    #line 541 
    emg_wrapper_netxen_nic_set_ringparam(emg_17_container,emg_17_emg_param_1_30);
    #line 545 
    ldv_free((void *)emg_17_emg_param_1_30);
    #line 547 
    break;
    #line 549 
    case 2: 
            #line 549 
    ;
    #line 551 
    emg_17_emg_param_1_29 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 551 
    emg_17_emg_param_1_29 = emg_17_emg_param_1_29;
    #line 555 
    emg_wrapper_netxen_nic_set_pauseparam(emg_17_container,emg_17_emg_param_1_29);
    #line 559 
    ldv_free((void *)emg_17_emg_param_1_29);
    #line 561 
    break;
    #line 563 
    case 3: 
            #line 563 
    ;
    #line 565 
    emg_17_emg_param_1_28 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 565 
    emg_17_emg_param_1_28 = emg_17_emg_param_1_28;
    #line 569 
    emg_wrapper_netxen_nic_set_link_ksettings(emg_17_container,emg_17_emg_param_1_28);
    #line 573 
    ldv_free((void *)emg_17_emg_param_1_28);
    #line 575 
    break;
    #line 577 
    case 4: 
            #line 577 
    ;
    #line 579 
    emg_17_emg_param_1_27 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 579 
    emg_17_emg_param_1_27 = emg_17_emg_param_1_27;
    #line 583 
    emg_wrapper_netxen_set_dump(emg_17_container,emg_17_emg_param_1_27);
    #line 587 
    ldv_free((void *)emg_17_emg_param_1_27);
    #line 589 
    break;
    #line 591 
    case 5: 
            #line 591 
    ;
    #line 593 
    emg_17_emg_param_1_26 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 593 
    emg_17_emg_param_1_26 = emg_17_emg_param_1_26;
    #line 597 
    emg_wrapper_netxen_set_intr_coalesce(emg_17_container,emg_17_emg_param_1_26);
    #line 601 
    ldv_free((void *)emg_17_emg_param_1_26);
    #line 603 
    break;
    #line 605 
    case 6: 
            #line 605 
    ;
    #line 607 
    emg_17_emg_param_1_24 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 607 
    emg_17_emg_param_1_24 = emg_17_emg_param_1_24;
    #line 608 
    emg_17_emg_param_2_25 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 608 
    emg_17_emg_param_2_25 = emg_17_emg_param_2_25;
    #line 612 
    emg_wrapper_netxen_nic_diag_test(emg_17_container,emg_17_emg_param_1_24,emg_17_emg_param_2_25);
    #line 616 
    ldv_free((void *)emg_17_emg_param_1_24);
    #line 617 
    ldv_free((void *)emg_17_emg_param_2_25);
    #line 619 
    break;
    #line 621 
    case 7: 
            #line 621 
    ;
    #line 623 
    (*emg_alias_eth_validate_addr)(emg_17_container);
    #line 625 
    break;
    #line 627 
    case 8: 
            #line 627 
    ;
    #line 629 
    emg_wrapper_netxen_tx_timeout(emg_17_container);
    #line 631 
    break;
    #line 633 
    case 9: 
            #line 633 
    ;
    #line 635 
    emg_17_emg_param_0_23 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 635 
    emg_17_emg_param_0_23 = emg_17_emg_param_0_23;
    #line 639 
    emg_wrapper_netxen_nic_xmit_frame(emg_17_emg_param_0_23,emg_17_container);
    #line 643 
    ldv_free((void *)emg_17_emg_param_0_23);
    #line 645 
    break;
    #line 647 
    case 10: 
             #line 647 
    ;
    #line 649 
    emg_wrapper_netxen_set_multicast_list(emg_17_container);
    #line 651 
    break;
    #line 653 
    case 11: 
             #line 653 
    ;
    #line 655 
    emg_17_emg_param_1_22 = ldv_xmalloc_unknown_size(0UL);
    #line 655 
    emg_17_emg_param_1_22 = emg_17_emg_param_1_22;
    #line 659 
    emg_wrapper_netxen_nic_set_mac(emg_17_container,emg_17_emg_param_1_22);
    #line 663 
    ldv_free(emg_17_emg_param_1_22);
    #line 665 
    break;
    #line 667 
    case 12: 
             #line 667 
    ;
    #line 669 
    emg_wrapper_netxen_set_features(emg_17_container,emg_17_emg_param_1_21);
    #line 671 
    break;
    #line 673 
    case 13: 
             #line 673 
    ;
    #line 675 
    emg_17_emg_param_1_20 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 675 
    emg_17_emg_param_1_20 = emg_17_emg_param_1_20;
    #line 679 
    emg_wrapper_netxen_nic_get_stats(emg_17_container,emg_17_emg_param_1_20);
    #line 683 
    ldv_free((void *)emg_17_emg_param_1_20);
    #line 685 
    break;
    #line 687 
    case 14: 
             #line 687 
    ;
    #line 689 
    emg_wrapper_netxen_fix_features(emg_17_container,emg_17_emg_param_1_19);
    #line 691 
    break;
    #line 693 
    case 15: 
             #line 693 
    ;
    #line 695 
    netxen_nic_change_mtu(emg_17_container,emg_17_emg_param_1_18);
    #line 697 
    break;
    #line 699 
    case 16: 
             #line 699 
    ;
    #line 701 
    emg_17_emg_param_1_17 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 701 
    emg_17_emg_param_1_17 = emg_17_emg_param_1_17;
    #line 705 
    emg_wrapper_netxen_nic_get_wol(emg_17_container,emg_17_emg_param_1_17);
    #line 709 
    ldv_free((void *)emg_17_emg_param_1_17);
    #line 711 
    break;
    #line 713 
    case 17: 
             #line 713 
    ;
    #line 715 
    emg_17_emg_param_2_16 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 715 
    emg_17_emg_param_2_16 = emg_17_emg_param_2_16;
    #line 719 
    emg_wrapper_netxen_nic_get_strings(emg_17_container,emg_17_emg_param_1_15,emg_17_emg_param_2_16);
    #line 723 
    ldv_free((void *)emg_17_emg_param_2_16);
    #line 725 
    break;
    #line 727 
    case 18: 
             #line 727 
    ;
    #line 729 
    emg_wrapper_netxen_get_sset_count(emg_17_container,emg_17_emg_param_1_14);
    #line 731 
    break;
    #line 733 
    case 19: 
             #line 733 
    ;
    #line 735 
    emg_17_emg_param_1_13 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 735 
    emg_17_emg_param_1_13 = emg_17_emg_param_1_13;
    #line 739 
    emg_wrapper_netxen_nic_get_ringparam(emg_17_container,emg_17_emg_param_1_13);
    #line 743 
    ldv_free((void *)emg_17_emg_param_1_13);
    #line 745 
    break;
    #line 747 
    case 20: 
             #line 747 
    ;
    #line 749 
    emg_wrapper_netxen_nic_get_regs_len(emg_17_container);
    #line 751 
    break;
    #line 753 
    case 21: 
             #line 753 
    ;
    #line 755 
    emg_17_emg_param_1_11 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 755 
    emg_17_emg_param_1_11 = emg_17_emg_param_1_11;
    #line 756 
    emg_17_emg_param_2_12 = ldv_xmalloc_unknown_size(0UL);
    #line 756 
    emg_17_emg_param_2_12 = emg_17_emg_param_2_12;
    #line 760 
    emg_wrapper_netxen_nic_get_regs(emg_17_container,emg_17_emg_param_1_11,emg_17_emg_param_2_12);
    #line 764 
    ldv_free((void *)emg_17_emg_param_1_11);
    #line 765 
    ldv_free(emg_17_emg_param_2_12);
    #line 767 
    break;
    #line 769 
    case 22: 
             #line 769 
    ;
    #line 771 
    emg_17_emg_param_1_10 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 771 
    emg_17_emg_param_1_10 = emg_17_emg_param_1_10;
    #line 775 
    emg_wrapper_netxen_nic_get_pauseparam(emg_17_container,emg_17_emg_param_1_10);
    #line 779 
    ldv_free((void *)emg_17_emg_param_1_10);
    #line 781 
    break;
    #line 783 
    case 23: 
             #line 783 
    ;
    #line 785 
    emg_17_emg_param_1_9 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 785 
    emg_17_emg_param_1_9 = emg_17_emg_param_1_9;
    #line 789 
    emg_wrapper_netxen_nic_get_link_ksettings(emg_17_container,emg_17_emg_param_1_9);
    #line 793 
    ldv_free((void *)emg_17_emg_param_1_9);
    #line 795 
    break;
    #line 797 
    case 24: 
             #line 797 
    ;
    #line 799 
    ethtool_op_get_link(emg_17_container);
    #line 801 
    break;
    #line 803 
    case 25: 
             #line 803 
    ;
    #line 805 
    emg_17_emg_param_1_7 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 805 
    emg_17_emg_param_1_7 = emg_17_emg_param_1_7;
    #line 806 
    emg_17_emg_param_2_8 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 806 
    emg_17_emg_param_2_8 = emg_17_emg_param_2_8;
    #line 810 
    emg_wrapper_netxen_nic_get_ethtool_stats(emg_17_container,emg_17_emg_param_1_7,emg_17_emg_param_2_8);
    #line 814 
    ldv_free((void *)emg_17_emg_param_1_7);
    #line 815 
    ldv_free((void *)emg_17_emg_param_2_8);
    #line 817 
    break;
    #line 819 
    case 26: 
             #line 819 
    ;
    #line 821 
    emg_wrapper_netxen_nic_get_eeprom_len(emg_17_container);
    #line 823 
    break;
    #line 825 
    case 27: 
             #line 825 
    ;
    #line 827 
    emg_17_emg_param_1_5 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 827 
    emg_17_emg_param_1_5 = emg_17_emg_param_1_5;
    #line 828 
    emg_17_emg_param_2_6 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 828 
    emg_17_emg_param_2_6 = emg_17_emg_param_2_6;
    #line 832 
    emg_wrapper_netxen_nic_get_eeprom(emg_17_container,emg_17_emg_param_1_5,emg_17_emg_param_2_6);
    #line 836 
    ldv_free((void *)emg_17_emg_param_1_5);
    #line 837 
    ldv_free((void *)emg_17_emg_param_2_6);
    #line 839 
    break;
    #line 841 
    case 28: 
             #line 841 
    ;
    #line 843 
    emg_17_emg_param_1_4 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 843 
    emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
    #line 847 
    emg_wrapper_netxen_get_dump_flag(emg_17_container,emg_17_emg_param_1_4);
    #line 851 
    ldv_free((void *)emg_17_emg_param_1_4);
    #line 853 
    break;
    #line 855 
    case 29: 
             #line 855 
    ;
    #line 857 
    emg_17_emg_param_1_2 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 857 
    emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
    #line 858 
    emg_17_emg_param_2_3 = ldv_xmalloc_unknown_size(0UL);
    #line 858 
    emg_17_emg_param_2_3 = emg_17_emg_param_2_3;
    #line 862 
    emg_wrapper_netxen_get_dump_data(emg_17_container,emg_17_emg_param_1_2,emg_17_emg_param_2_3);
    #line 866 
    ldv_free((void *)emg_17_emg_param_1_2);
    #line 867 
    ldv_free(emg_17_emg_param_2_3);
    #line 869 
    break;
    #line 871 
    case 30: 
             #line 871 
    ;
    #line 873 
    emg_17_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 873 
    emg_17_emg_param_1_1 = emg_17_emg_param_1_1;
    #line 877 
    emg_wrapper_netxen_nic_get_drvinfo(emg_17_container,emg_17_emg_param_1_1);
    #line 881 
    ldv_free((void *)emg_17_emg_param_1_1);
    #line 883 
    break;
    #line 885 
    case 31: 
             #line 885 
    ;
    #line 887 
    emg_17_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 887 
    emg_17_emg_param_1_0 = emg_17_emg_param_1_0;
    #line 891 
    emg_wrapper_netxen_get_intr_coalesce(emg_17_container,emg_17_emg_param_1_0);
    #line 895 
    ldv_free((void *)emg_17_emg_param_1_0);
    #line 898 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 899 
      emg_repeat_cnt_call_17 --;
      #line 901 
      goto emg_call_17;
    }
    else 
         #line 903 
         __VERIFIER_assume(0);
    #line 907 
    break;
    #line 909 
    case 32: 
             #line 909 
    ;
    #line 913 
    break;
    #line 915 
    default: 
             #line 915 
    ;
    #line 915 
    __VERIFIER_assume(0);
  }
  #line 918 
  return (void *)0;
}

#line 923  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_netxen_driver(void *arg0)
{
  #line 926 
  int emg_18_choice;
  #line 927 
  struct pci_driver *emg_18_container;
  #line 928 
  struct pci_device_id *emg_18_device_id;
  #line 929 
  struct pci_dev *emg_18_resource_0;
  #line 930 
  struct pm_message emg_18_resource_1;
  #line 931 
  int emg_18_ret;
  #line 932 
  int emg_repeat_cnt_call_18_1 = 1;
  #line 933 
  int emg_repeat_cnt_call_18_0 = 1;
  #line 934 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 935 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 937 
  struct emg_struct_pci_scenario_netxen_driver_18 *data = (struct emg_struct_pci_scenario_netxen_driver_18 *)arg0;
  #line 941 
  emg_18_choice = 0;
  #line 942 
  emg_18_ret = ldv_undef_int();
  #line 943 
  emg_18_choice = 0;
  #line 944 
  emg_18_container = emg_alias_netxen_driver;
  #line 945 
  emg_18_ret = ldv_undef_int();
  #line 947 
  __VERIFIER_assume(data->arg0 == emg_alias_netxen_driver);
  #line 949 
  if (data != (struct emg_struct_pci_scenario_netxen_driver_18 *)0) {
    #line 950 
    emg_18_container = data->arg0;
    #line 951 
    ldv_free((void *)data);
  }
  #line 956 
  emg_18_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 957 
  emg_18_choice = __ldv_undef_int_range(0,8);
  #line 958 
  emg_18_device_id = emg_18_container->id_table + (unsigned long)emg_18_choice;
  #line 962 
  goto emg_main_18;
  #line 966 
  return (void *)0;
  #line 969 
  emg_call_18: 
               #line 969 
  ;
  #line 970 
  switch (ldv_undef_int()) {
    #line 971 
    case 0: 
            #line 971 
    ;
    #line 976 
    if (emg_repeat_cnt_call_18_1 > 0) {
      #line 977 
      emg_repeat_cnt_call_18_1 --;
      #line 979 
      goto emg_call_18;
    }
    else 
         #line 981 
         __VERIFIER_assume(0);
    #line 985 
    break;
    #line 987 
    case 1: 
            #line 987 
    ;
    #line 989 
    emg_18_ret = emg_wrapper_netxen_nic_suspend(emg_18_resource_0,emg_18_resource_1);
    #line 994 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 998 
    emg_wrapper_netxen_nic_resume(emg_18_resource_0);
    #line 1001 
    if (emg_repeat_cnt_call_18_0 > 0) {
      #line 1002 
      emg_repeat_cnt_call_18_0 --;
      #line 1004 
      goto emg_call_18;
    }
    else 
         #line 1006 
         __VERIFIER_assume(0);
    #line 1010 
    break;
    #line 1012 
    case 2: 
            #line 1012 
    ;
    #line 1014 
    emg_wrapper_netxen_nic_shutdown(emg_18_resource_0);
    #line 1018 
    emg_wrapper_netxen_nic_remove(emg_18_resource_0);
    #line 1021 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 1022 
      emg_repeat_cnt_main_18_1 --;
      #line 1024 
      goto emg_main_18;
    }
    else 
         #line 1026 
         __VERIFIER_assume(0);
    #line 1030 
    break;
    #line 1032 
    default: 
             #line 1032 
    ;
    #line 1032 
    __VERIFIER_assume(0);
  }
  #line 1035 
  return (void *)0;
  #line 1038 
  emg_main_18: 
               #line 1038 
  ;
  #line 1039 
  if (ldv_undef_int() != 0) {
    #line 1042 
    ldv_pre_probe();
    #line 1046 
    emg_18_ret = emg_wrapper_netxen_nic_probe(emg_18_resource_0,emg_18_device_id);
    #line 1051 
    emg_18_ret = ldv_post_probe(emg_18_ret);
    #line 1054 
    if (ldv_undef_int() != 0) {
      #line 1056 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 1060 
      goto emg_call_18;
    }
    else 
         #line 1065 
         __VERIFIER_assume(emg_18_ret != 0);
    #line 1069 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 1070 
      emg_repeat_cnt_main_18_0 --;
      #line 1072 
      goto emg_main_18;
    }
    else 
         #line 1074 
         __VERIFIER_assume(0);
  }
  else 
       #line 1080 
       ldv_free((void *)emg_18_resource_0);
  #line 1088 
  return (void *)0;
}

#line 1093  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1096 
  struct pci_driver *emg_2_pci_driver;
  #line 1098 
  emg_2_pci_driver = emg_alias_netxen_driver;
  #line 1099 
  if (ldv_undef_int() != 0) {
    #line 1101 
    emg_2_pci_driver = arg0;
    #line 1105 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1109 
    return 0;
  }
  else {
    #line 1113 
    return ldv_undef_int_negative();
  }
}

#line 1121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1124 
  struct net_device *emg_3_netdev;
  #line 1126 
  if (ldv_undef_int() != 0) {
    #line 1128 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1132 
    return emg_3_netdev;
  }
  else 
       #line 1136 
       return (struct net_device *)0;
}

#line 1144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 1147 
  struct device_attribute *emg_4_devattr;
  #line 1148 
  struct device *emg_4_device;
  #line 1150 
  if (ldv_undef_int() != 0) {
    #line 1152 
    emg_4_device = arg0;
    #line 1153 
    emg_4_devattr = arg1;
    #line 1157 
    emg_dispatch_register_4(emg_4_device,emg_4_devattr);
    #line 1161 
    return 0;
  }
  else {
    #line 1165 
    return ldv_undef_int_negative();
  }
}

#line 1173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 1176 
  struct device_attribute *emg_5_devattr;
  #line 1177 
  struct device *emg_5_device;
  #line 1180 
  emg_5_device = arg0;
  #line 1181 
  emg_5_devattr = arg1;
  #line 1185 
  emg_dispatch_deregister_5(emg_5_device,emg_5_devattr);
  #line 1188 
  return;
}

#line 1193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1196 
  int emg_6_line;
  #line 1199 
  emg_6_line = (int)arg0;
  #line 1203 
  emg_dispatch_irq_deregister_6(emg_6_line);
  #line 1204 
  ;
  #line 1204 
  return (void *)0;
}

#line 1210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1213 
  struct net_device *emg_7_netdev;
  #line 1216 
  emg_7_netdev = arg0;
  #line 1217 
  ldv_free((void *)emg_7_netdev);
  #line 1220 
  return;
}

#line 1225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1228 
  struct pci_driver *emg_8_pci_driver;
  #line 1230 
  emg_8_pci_driver = emg_alias_netxen_driver;
  #line 1232 
  emg_8_pci_driver = arg0;
  #line 1236 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 1239 
  return;
}

#line 1244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1247 
  struct net_device *emg_9_netdev;
  #line 1248 
  int emg_9_ret;
  #line 1251 
  emg_9_ret = ldv_undef_int();
  #line 1252 
  emg_9_ret = ldv_undef_int();
  #line 1253 
  if (ldv_undef_int() != 0) {
    #line 1255 
    emg_9_netdev = arg0;
    #line 1259 
    emg_9_ret = emg_wrapper_netxen_nic_open(emg_9_netdev);
    #line 1262 
    if (ldv_undef_int() != 0) {
      #line 1264 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1268 
      emg_dispatch_register_9(emg_9_netdev);
      #line 1272 
      return 0;
    }
    else {
      #line 1276 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1277 
      ldv_failed_register_netdev();
      #line 1278 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1283 
    ldv_failed_register_netdev();
    #line 1284 
    return ldv_undef_int_negative();
  }
}

#line 1292  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1295 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1296 
  void *emg_10_data;
  #line 1297 
  int emg_10_line;
  #line 1298 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1300 
  if (ldv_undef_int() != 0) {
    #line 1302 
    emg_10_line = (int)arg0;
    #line 1303 
    emg_10_callback = arg1;
    #line 1304 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1305 
    emg_10_data = arg4;
    #line 1309 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1313 
    return 0;
  }
  else {
    #line 1317 
    return ldv_undef_int_negative();
  }
}

#line 1325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 1328 
  struct delayed_work *emg_11_delayed_work;
  #line 1329 
  struct work_struct *emg_11_emg_param_0_0;
  #line 1331 
  if (ldv_undef_int() != 0) {
    #line 1333 
    emg_11_delayed_work = arg0;
    #line 1337 
    emg_11_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1337 
    emg_11_emg_param_0_0 = emg_11_emg_param_0_0;
    #line 1341 
    if (emg_11_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1342 
      (*(emg_11_delayed_work->work.func))(emg_11_emg_param_0_0);
    #line 1347 
    ldv_free((void *)emg_11_emg_param_0_0);
    #line 1351 
    return (_Bool)1;
  }
  else 
       #line 1355 
       return (_Bool)0;
}

#line 1363  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1366 
  struct work_struct *emg_12_work_struct;
  #line 1368 
  if (ldv_undef_int() != 0) {
    #line 1370 
    emg_12_work_struct = arg0;
    #line 1374 
    if (emg_12_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1375 
      (*(emg_12_work_struct->func))(emg_12_work_struct);
    #line 1380 
    return (_Bool)1;
  }
  else 
       #line 1384 
       return (_Bool)0;
}

#line 1392  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1395 
  struct net_device *emg_13_netdev;
  #line 1398 
  emg_13_netdev = arg0;
  #line 1402 
  emg_wrapper_netxen_nic_close(emg_13_netdev);
  #line 1406 
  emg_dispatch_deregister_13(emg_13_netdev);
  #line 1409 
  return;
}

#line 1414  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1417 
  int emg_1_ret;
  #line 1420 
  emg_1_ret = emg_netxen_init_module();
  #line 1421 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1424 
  if (ldv_undef_int() != 0) {
    #line 1426 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1430 
    emg_netxen_exit_module();
  }
  else 
       #line 1434 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1438 
  return (void *)0;
}

#line 1443  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/netxen/netxen_nic.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1445 
  ldv_initialize();
  #line 1447 
  emg_entry_point_insmod((void *)0);
  #line 1449 
  return 0;
}

