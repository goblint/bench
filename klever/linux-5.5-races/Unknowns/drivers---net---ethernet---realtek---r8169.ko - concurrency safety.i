/* Generated by Frama-C */
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_firmware.i.aux"
struct task_struct;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_291 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_291 sigset_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_292 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_293 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_294 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_298 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_299 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_297 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_298 _addr_bnd ;
   struct __anonstruct__addr_pkey_299 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_296 {
   void *_addr ;
   union __anonunion_297 __anonCompField___anonstruct__sigfault_296_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_300 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_301 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_292 _kill ;
   struct __anonstruct__timer_293 _timer ;
   struct __anonstruct__rt_294 _rt ;
   struct __anonstruct__sigchld_295 _sigchld ;
   struct __anonstruct__sigfault_296 _sigfault ;
   struct __anonstruct__sigpoll_300 _sigpoll ;
   struct __anonstruct__sigsys_301 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_306 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_306 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_311 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_311 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 155 
struct nameidata;
#line 157 
struct perf_event_context;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_313 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_313 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.h"
struct rtl_fw_phy_action {
   __le32 *code ;
   size_t size ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.h"
struct rtl_fw {
   void (*phy_write)(struct rtl8169_private *, int , int ) ;
   int (*phy_read)(struct rtl8169_private *, int ) ;
   void (*mac_mcu_write)(struct rtl8169_private *, int , int ) ;
   int (*mac_mcu_read)(struct rtl8169_private *, int ) ;
   struct firmware *fw ;
   char *fw_name ;
   struct device *dev ;
   char version[32U] ;
   struct rtl_fw_phy_action phy_action ;
};
#line 40 
enum rtl_fw_opcode {
    PHY_READ = 0,
    PHY_DATA_OR = 1,
    PHY_DATA_AND = 2,
    PHY_BJMPN = 3,
    PHY_MDIO_CHG = 4,
    PHY_CLEAR_READCOUNT = 7,
    PHY_WRITE = 8,
    PHY_READCOUNT_EQ_SKIP = 9,
    PHY_COMP_EQ_SKIPN = 10,
    PHY_COMP_NEQ_SKIPN = 11,
    PHY_WRITE_PREVIOUS = 12,
    PHY_SKIPN = 13,
    PHY_DELAY_MS = 14
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
struct fw_info {
   u32 magic ;
   char version[32U] ;
   __le32 fw_start ;
   __le32 fw_len ;
   u8 chksum ;
} __attribute__((__packed__));
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_327 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_327 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_328 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_328 key ;
} __attribute__((__aligned__(8)));
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_372 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_372 pte_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_375 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_375 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_376 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_376 pmd_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_381 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_380 {
   atomic_t cnts ;
   struct __anonstruct_381 __anonCompField___anonunion_380_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_380 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_386 {
   int __val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_418 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_418 rwlock_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_431 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_431 seqlock_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct inode;
#line 121 
struct notifier_block;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_556 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_555 {
   struct __anonstruct_556 __anonCompField___anonunion_555_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_555 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 326 
struct fs_context;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_578 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_578 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_586 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_586 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct user_struct;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity {
   unsigned int pre_vectors ;
   unsigned int post_vectors ;
   unsigned int nr_sets ;
   unsigned int set_size[4U] ;
   void (*calc_sets)(struct irq_affinity *, unsigned int ) ;
   void *priv ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_725 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_725 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_739 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_738 {
   struct __anonstruct_739 __anonCompField___anonunion_738_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_738 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_741 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_740 {
   struct __anonstruct_741 __anonCompField___anonunion_740_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_740 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_742 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_743 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_742 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_743 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_750 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_751 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_750 __anonCompField_io_cq_65 ;
   union __anonunion_751 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_752 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_752 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_753 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_753 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_755 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_754 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_755 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_754 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_758 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_759 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_760 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_761 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_758 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_759 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_760 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_761 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_762 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_762 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_764 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_763 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_764 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_763 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_776 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_778 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_782 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_784 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_783 {
   unsigned long nr_segs ;
   struct __anonstruct_784 __anonCompField___anonunion_783_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_782 __anonCompField_iov_iter_72 ;
   union __anonunion_783 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_787 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_787 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_788 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_788 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_789 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_789 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_790 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_790 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_791 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_791 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_792 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_792 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_793 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_793 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_794 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_794 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_795 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_796 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_795 ifr_ifrn ;
   union __anonunion_ifr_ifru_796 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11221 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11221 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_831 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_831 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_832 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_832 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_843 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_844 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_845 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_846 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_843 ports ;
   struct __anonstruct_icmpt_844 icmpt ;
   struct __anonstruct_dnports_845 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_846 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_847 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_847 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_854 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_853 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_854 __anonCompField___anonstruct_853_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_852 {
   struct __anonstruct_853 __anonCompField___anonunion_852_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_855 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_856 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_858 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_857 {
   struct __anonstruct_858 __anonCompField___anonunion_857_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_860 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_859 {
   __wsum csum ;
   struct __anonstruct_860 __anonCompField___anonunion_859_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_861 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_862 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_863 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_852 __anonCompField_sk_buff_92 ;
   union __anonunion_855 __anonCompField_sk_buff_93 ;
   union __anonunion_856 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_857 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_859 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_861 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_862 __anonCompField_sk_buff_100 ;
   union __anonunion_863 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_889 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_889 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_892 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_892 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_893 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_893 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_894 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_894 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_895 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_895 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_896 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_896 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_898 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_898 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_911 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_910 {
   struct __anonstruct_911 __anonCompField___anonunion_910_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_910 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_912 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_913 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_915 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_914 {
   struct keyring_index_key index_key ;
   struct __anonstruct_915 __anonCompField___anonunion_914_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_917 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_916 {
   union key_payload payload ;
   struct __anonstruct_917 __anonCompField___anonunion_916_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_912 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_913 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_914 __anonCompField_key_109 ;
   union __anonunion_916 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_920 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_920 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_921 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_921 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_923 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_922 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_923 __anonCompField___anonunion_922_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_922 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_925 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_927 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_926 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_927 __anonCompField___anonstruct_926_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_928 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_929 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_930 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_931 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_933 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_932 {
   union __anonunion_933 __anonCompField___anonstruct_932_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_934 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_935 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_936 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_937 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_938 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_925 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_926 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_928 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_929 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_930 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_931 test ;
   struct __anonstruct_932 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_934 info ;
   struct __anonstruct_query_935 query ;
   struct __anonstruct_raw_tracepoint_936 raw_tracepoint ;
   struct __anonstruct_937 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_938 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_965 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_965 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_967 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_966 {
   struct __anonstruct_tail_call_967 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_966 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_968 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_968 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_970 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_970 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_972 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_971 {
   struct __anonstruct_972 __anonCompField___anonunion_971_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_971 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_995 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_995 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1000 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1001 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1002 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_1003 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_999 {
   struct __anonstruct_1000 __anonCompField___anonunion_999_157 ;
   struct __anonstruct_1001 __anonCompField___anonunion_999_158 ;
   struct __anonstruct_1002 __anonCompField___anonunion_999_159 ;
   struct __anonstruct_xsk_1003 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_999 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15272 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15273 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_1004 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_1005 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_1004 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15272 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15273 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_1005 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
struct clk;
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct gpio_desc;
#line 327 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_15908 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_15908 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_15923 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_15923 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_1022 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_1022 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_1023 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_1023 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1026 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1027 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_1029 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_1030 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1028 {
   struct __anonstruct_elv_1029 elv ;
   struct __anonstruct_flush_1030 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1031 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_1026 __anonCompField_request_164 ;
   union __anonunion_1027 __anonCompField_request_165 ;
   union __anonunion_1028 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_1031 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_1048 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_1047 {
   void *validation_data ;
   struct __anonstruct_1048 __anonCompField___anonunion_1047_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_1047 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1122 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1123 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_1121 {
   struct __anonstruct_1122 __anonCompField___anonunion_1121_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_1123 __anonCompField___anonunion_1121_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_1121 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_1125 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_1125 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_1138 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_1138 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_1160 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_1160 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1162 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1161 {
   __addrpair skc_addrpair ;
   struct __anonstruct_1162 __anonCompField___anonunion_1161_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1163 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1165 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1164 {
   __portpair skc_portpair ;
   struct __anonstruct_1165 __anonCompField___anonunion_1164_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1166 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1167 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1168 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1169 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1170 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_1161 __anonCompField_sock_common_178 ;
   union __anonunion_1163 __anonCompField_sock_common_179 ;
   union __anonunion_1164 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_1166 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_1167 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_1168 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_1169 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_1170 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_1171 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1172 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1173 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_1171 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_1172 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_1173 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_1208 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_1208 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1307 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1307 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.h"
enum mac_version {
    RTL_GIGA_MAC_VER_02 = 0,
    RTL_GIGA_MAC_VER_03 = 1,
    RTL_GIGA_MAC_VER_04 = 2,
    RTL_GIGA_MAC_VER_05 = 3,
    RTL_GIGA_MAC_VER_06 = 4,
    RTL_GIGA_MAC_VER_07 = 5,
    RTL_GIGA_MAC_VER_08 = 6,
    RTL_GIGA_MAC_VER_09 = 7,
    RTL_GIGA_MAC_VER_10 = 8,
    RTL_GIGA_MAC_VER_11 = 9,
    RTL_GIGA_MAC_VER_12 = 10,
    RTL_GIGA_MAC_VER_13 = 11,
    RTL_GIGA_MAC_VER_14 = 12,
    RTL_GIGA_MAC_VER_15 = 13,
    RTL_GIGA_MAC_VER_16 = 14,
    RTL_GIGA_MAC_VER_17 = 15,
    RTL_GIGA_MAC_VER_18 = 16,
    RTL_GIGA_MAC_VER_19 = 17,
    RTL_GIGA_MAC_VER_20 = 18,
    RTL_GIGA_MAC_VER_21 = 19,
    RTL_GIGA_MAC_VER_22 = 20,
    RTL_GIGA_MAC_VER_23 = 21,
    RTL_GIGA_MAC_VER_24 = 22,
    RTL_GIGA_MAC_VER_25 = 23,
    RTL_GIGA_MAC_VER_26 = 24,
    RTL_GIGA_MAC_VER_27 = 25,
    RTL_GIGA_MAC_VER_28 = 26,
    RTL_GIGA_MAC_VER_29 = 27,
    RTL_GIGA_MAC_VER_30 = 28,
    RTL_GIGA_MAC_VER_31 = 29,
    RTL_GIGA_MAC_VER_32 = 30,
    RTL_GIGA_MAC_VER_33 = 31,
    RTL_GIGA_MAC_VER_34 = 32,
    RTL_GIGA_MAC_VER_35 = 33,
    RTL_GIGA_MAC_VER_36 = 34,
    RTL_GIGA_MAC_VER_37 = 35,
    RTL_GIGA_MAC_VER_38 = 36,
    RTL_GIGA_MAC_VER_39 = 37,
    RTL_GIGA_MAC_VER_40 = 38,
    RTL_GIGA_MAC_VER_41 = 39,
    RTL_GIGA_MAC_VER_42 = 40,
    RTL_GIGA_MAC_VER_43 = 41,
    RTL_GIGA_MAC_VER_44 = 42,
    RTL_GIGA_MAC_VER_45 = 43,
    RTL_GIGA_MAC_VER_46 = 44,
    RTL_GIGA_MAC_VER_47 = 45,
    RTL_GIGA_MAC_VER_48 = 46,
    RTL_GIGA_MAC_VER_49 = 47,
    RTL_GIGA_MAC_VER_50 = 48,
    RTL_GIGA_MAC_VER_51 = 49,
    RTL_GIGA_MAC_VER_52 = 50,
    RTL_GIGA_MAC_VER_60 = 51,
    RTL_GIGA_MAC_VER_61 = 52,
    RTL_GIGA_MAC_NONE = 53
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_rtl_chip_infos_1314 {
   char *name ;
   char *fw_name ;
};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_debug_1315 {
   u32 msg_enable ;
};
#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct TxDesc {
   __le32 opts1 ;
   __le32 opts2 ;
   __le64 addr ;
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct RxDesc {
   __le32 opts1 ;
   __le32 opts2 ;
   __le64 addr ;
};
#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct ring_info {
   struct sk_buff *skb ;
   u32 len ;
};
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl8169_counters {
   __le64 tx_packets ;
   __le64 rx_packets ;
   __le64 tx_errors ;
   __le32 rx_errors ;
   __le16 rx_missed ;
   __le16 align_errors ;
   __le32 tx_one_collision ;
   __le32 tx_multi_collision ;
   __le64 rx_unicast ;
   __le64 rx_broadcast ;
   __le32 rx_multicast ;
   __le16 tx_aborted ;
   __le16 tx_underun ;
};
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl8169_tc_offsets {
   bool inited ;
   __le64 tx_errors ;
   __le32 tx_multi_collision ;
   __le16 tx_aborted ;
};
#line 637 
enum rtl_flag {
    RTL_FLAG_TASK_ENABLED = 0,
    RTL_FLAG_TASK_RESET_PENDING = 1,
    RTL_FLAG_MAX = 2
};
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl8169_stats {
   u64 packets ;
   u64 bytes ;
   struct u64_stats_sync syncp ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_wk_1316 {
   unsigned long flags[1U] ;
   struct mutex mutex ;
   struct work_struct work ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl8169_private {
   void *mmio_addr ;
   struct pci_dev *pci_dev ;
   struct net_device *dev ;
   struct phy_device *phydev ;
   struct napi_struct napi ;
   u32 msg_enable ;
   enum mac_version mac_version ;
   u32 cur_rx ;
   u32 cur_tx ;
   u32 dirty_tx ;
   struct rtl8169_stats rx_stats ;
   struct rtl8169_stats tx_stats ;
   struct TxDesc *TxDescArray ;
   struct RxDesc *RxDescArray ;
   dma_addr_t TxPhyAddr ;
   dma_addr_t RxPhyAddr ;
   struct page *Rx_databuff[256U] ;
   struct ring_info tx_skb[64U] ;
   u16 cp_cmd ;
   u32 irq_mask ;
   struct clk *clk ;
   struct __anonstruct_wk_1316 wk ;
   unsigned int irq_enabled : 1 ;
   unsigned int supports_gmii : 1 ;
   unsigned int aspm_manageable : 1 ;
   dma_addr_t counters_phys_addr ;
   struct rtl8169_counters *counters ;
   struct rtl8169_tc_offsets tc_offset ;
   u32 saved_wolopts ;
   int eee_adv ;
   char *fw_name ;
   struct rtl_fw *rtl_fw ;
   u32 ocp_base ;
};
#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
typedef void (*rtl_generic_fct)(struct rtl8169_private *);
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl_cond {
   bool (*check)(struct rtl8169_private *) ;
   char *msg ;
};
#line 1487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_cfg_1319 {
   u32 opt ;
   u16 reg ;
   u8 mask ;
};
#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl_coalesce_scale {
   u32 nsecs[2U] ;
};
#line 1875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl_coalesce_info {
   u32 speed ;
   struct rtl_coalesce_scale scalev[4U] ;
};
#line 1928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_coal_settings_1322 {
   u32 *max_frames ;
   u32 *usecs ;
};
#line 1928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_p_1323 {
   u32 *max_frames ;
   u32 *usecs ;
};
#line 1958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_1328 {
   u32 *max_frames ;
   u32 *usecs ;
};
#line 1999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_coal_settings_1330 {
   u32 frames ;
   u32 usecs ;
};
#line 1999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_p_1331 {
   u32 frames ;
   u32 usecs ;
};
#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct rtl_mac_info {
   u16 mask ;
   u16 val ;
   u16 mac_version ;
};
#line 2271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct phy_reg {
   u16 reg ;
   u16 val ;
};
#line 4139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct ephy_info {
   unsigned int offset ;
   u16 mask ;
   u16 bits ;
};
#line 6035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct __anonstruct_rtl_work_1374 {
   int bitnr ;
   void (*action)(struct rtl8169_private *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3153 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_3153 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3154 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_3154 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3170 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_3170 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_3174 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_3174 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_3175 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_3176 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_3175 __anonCompField_media_link_90 ;
   union __anonunion_3176 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_3178 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_3177 {
   struct __anonstruct_dev_3178 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_3177 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_3192 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_3193 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_3191 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_3192 i2c ;
   struct __anonstruct_custom_3193 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_3191 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_4094 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_4094 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_rtl_get_coalesce_8 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_rtl8169_pci_driver_9 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 32 
ssize_t strscpy(char *, char *, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_firmware.i.aux"
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_firmware.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 432  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_firmware.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.h"
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
int rtl_fw_request_firmware(struct rtl_fw *rtl_fw);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.h"
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
void rtl_fw_release_firmware(struct rtl_fw *rtl_fw);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.h"
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
void rtl_fw_write_firmware(struct rtl8169_private *tp, struct rtl_fw *rtl_fw);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
static bool rtl_fw_format_ok(struct rtl_fw *rtl_fw)
{
  #line 44 
  struct firmware *fw = rtl_fw->fw;
  #line 45 
  struct fw_info *fw_info = (struct fw_info *)fw->data;
  #line 46 
  struct rtl_fw_phy_action *pa = & rtl_fw->phy_action;
  #line 48 
  if (fw->size <= 3UL) 
                       #line 49 
                       return (_Bool)0;
  #line 51 
  if (fw_info->magic == 0U) {
    #line 52 
    size_t i;
    #line 52 
    size_t size;
    #line 52 
    size_t start;
    #line 53 
    u8 checksum = (unsigned char)0U;
    #line 55 
    if (fw->size <= 44UL) 
                          #line 56 
                          return (_Bool)0;
    #line 58 
    i = 0UL;
    #line 58 
    while (fw->size > i) {
      #line 59 
      checksum = (unsigned char)((int)*(fw->data + i) + (int)checksum);
      #line 58 
      i ++;
    }
    #line 60 
    if ((unsigned int)checksum != 0U) 
                                      #line 61 
                                      return (_Bool)0;
    #line 63 
    start = (unsigned long)fw_info->fw_start;
    #line 64 
    if (fw->size < start) 
                          #line 65 
                          return (_Bool)0;
    #line 67 
    size = (unsigned long)fw_info->fw_len;
    #line 68 
    if ((fw->size - start) / 4UL < size) 
                                         #line 69 
                                         return (_Bool)0;
    #line 71 
    strscpy((char *)(& rtl_fw->version),(char *)(& fw_info->version),32UL);
    #line 73 
    pa->code = (__le32 *)(fw->data + start);
    #line 74 
    pa->size = size;
  }
  else {
    #line 76 
    if ((fw->size & 3UL) != 0UL) 
                                 #line 77 
                                 return (_Bool)0;
    #line 79 
    strscpy((char *)(& rtl_fw->version),rtl_fw->fw_name,32UL);
    #line 81 
    pa->code = (__le32 *)fw->data;
    #line 82 
    pa->size = fw->size / 4UL;
  }
  #line 85 
  return (_Bool)1;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
static bool rtl_fw_data_ok(struct rtl_fw *rtl_fw)
{
  #line 91 
  size_t index;
  #line 90 
  struct rtl_fw_phy_action *pa = & rtl_fw->phy_action;
  #line 93 
  index = 0UL;
  #line 93 
  while (pa->size > index) {
    {
      #line 94 
      u32 action = *(pa->code + index);
      #line 95 
      u32 val = action & 65535U;
      #line 96 
      u32 regno = (action >> 16) & 4095U;
      #line 98 
      switch (action >> 28) {
        #line 99 
        case (u32)0: 
                     #line 99 
        ;
        #line 100 
        case (u32)1: 
                     #line 100 
        ;
        #line 101 
        case (u32)2: 
                     #line 101 
        ;
        #line 102 
        case (u32)7: 
                     #line 102 
        ;
        #line 103 
        case (u32)8: 
                     #line 103 
        ;
        #line 104 
        case (u32)12: 
                      #line 104 
        ;
        #line 105 
        case (u32)14: 
                      #line 105 
        ;
        #line 106 
        break;
        #line 108 
        case (u32)4: 
                     #line 108 
        ;
        #line 109 
        if (val > 1U) 
                      #line 110 
                      goto out;
        #line 111 
        break;
        #line 113 
        case (u32)3: 
                     #line 113 
        ;
        #line 114 
        if ((unsigned long)regno > index) 
                                          #line 115 
                                          goto out;
        #line 116 
        break;
        #line 117 
        case (u32)9: 
                     #line 117 
        ;
        #line 118 
        if (index + 2UL >= pa->size) 
                                     #line 119 
                                     goto out;
        #line 120 
        break;
        #line 121 
        case (u32)10: 
                      #line 121 
        ;
        #line 122 
        case (u32)11: 
                      #line 122 
        ;
        #line 123 
        case (u32)13: 
                      #line 123 
        ;
        #line 124 
        if (((unsigned long)regno + index) + 1UL >= pa->size) 
                                                              #line 125 
                                                              goto out;
        #line 126 
        break;
        #line 128 
        default: 
                 #line 128 
        ;
        #line 129 
        _dev_err(rtl_fw->dev,(char *)"Invalid action 0x%08x\n",action);
        #line 130 
        return (_Bool)0;
      }
    }
    #line 93 
    index ++;
  }
  #line 134 
  return (_Bool)1;
  #line 135 
  out: 
       #line 135 
  ;
  #line 136 
  _dev_err(rtl_fw->dev,(char *)"Out of range of firmware\n");
  #line 137 
  return (_Bool)0;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
void rtl_fw_write_firmware(struct rtl8169_private *tp, struct rtl_fw *rtl_fw)
{
  #line 146 
  size_t index;
  #line 142 
  struct rtl_fw_phy_action *pa = & rtl_fw->phy_action;
  #line 143 
  void (*fw_write)(struct rtl8169_private *, int , int ) = rtl_fw->phy_write;
  #line 144 
  int (*fw_read)(struct rtl8169_private *, int ) = rtl_fw->phy_read;
  #line 145 
  int predata = 0;
  #line 145 
  int count = 0;
  #line 148 
  index = 0UL;
  #line 148 
  while (pa->size > index) {
    {
      #line 149 
      u32 action = *(pa->code + index);
      #line 150 
      u32 data = action & 65535U;
      #line 151 
      u32 regno = (action >> 16) & 4095U;
      #line 152 
      enum rtl_fw_opcode opcode = action >> 28;
      #line 154 
      if (action == 0U) 
                        #line 155 
                        break;
      #line 157 
      switch ((unsigned int)opcode) {
        #line 158 
        case (unsigned int)0: 
                              #line 158 
        ;
        #line 159 
        predata = (*fw_read)(tp,(int)regno);
        #line 160 
        count ++;
        #line 161 
        break;
        #line 162 
        case (unsigned int)1: 
                              #line 162 
        ;
        #line 163 
        predata = (int)((unsigned int)predata | data);
        #line 164 
        break;
        #line 165 
        case (unsigned int)2: 
                              #line 165 
        ;
        #line 166 
        predata = (int)((unsigned int)predata & data);
        #line 167 
        break;
        #line 168 
        case (unsigned int)3: 
                              #line 168 
        ;
        #line 169 
        index -= (unsigned long)(regno + 1U);
        #line 170 
        break;
        #line 171 
        case (unsigned int)4: 
                              #line 171 
        ;
        #line 172 
        if (data != 0U) {
          #line 173 
          fw_write = rtl_fw->mac_mcu_write;
          #line 174 
          fw_read = rtl_fw->mac_mcu_read;
        }
        else {
          #line 176 
          fw_write = rtl_fw->phy_write;
          #line 177 
          fw_read = rtl_fw->phy_read;
        }
        #line 180 
        break;
        #line 181 
        case (unsigned int)7: 
                              #line 181 
        ;
        #line 182 
        count = 0;
        #line 183 
        break;
        #line 184 
        case (unsigned int)8: 
                              #line 184 
        ;
        #line 185 
        (*fw_write)(tp,(int)regno,(int)data);
        #line 186 
        break;
        #line 187 
        case (unsigned int)9: 
                              #line 187 
        ;
        #line 188 
        if ((unsigned int)count == data) 
                                         #line 189 
                                         index ++;
        #line 190 
        break;
        #line 191 
        case (unsigned int)10: 
                               #line 191 
        ;
        #line 192 
        if ((unsigned int)predata == data) 
                                           #line 193 
                                           index = (unsigned long)regno + index;
        #line 194 
        break;
        #line 195 
        case (unsigned int)11: 
                               #line 195 
        ;
        #line 196 
        if ((unsigned int)predata != data) 
                                           #line 197 
                                           index = (unsigned long)regno + index;
        #line 198 
        break;
        #line 199 
        case (unsigned int)12: 
                               #line 199 
        ;
        #line 200 
        (*fw_write)(tp,(int)regno,predata);
        #line 201 
        break;
        #line 202 
        case (unsigned int)13: 
                               #line 202 
        ;
        #line 203 
        index = (unsigned long)regno + index;
        #line 204 
        break;
        #line 205 
        case (unsigned int)14: 
                               #line 205 
        ;
        #line 206 
        msleep(data);
        #line 207 
        break;
      }
    }
    #line 148 
    index ++;
  }
  #line 210 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
void rtl_fw_release_firmware(struct rtl_fw *rtl_fw)
{
  #line 214 
  cif_release_firmware(rtl_fw->fw);
  #line 215 
  return;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_firmware.c"
int rtl_fw_request_firmware(struct rtl_fw *rtl_fw)
{
  #line 219 
  int rc;
  #line 221 
  rc = cif_request_firmware(& rtl_fw->fw,rtl_fw->fw_name,rtl_fw->dev);
  #line 222 
  if (rc < 0) 
              #line 223 
              goto out;
  #line 225 
  if (rtl_fw_format_ok(rtl_fw)) {
    #line 225 
    if (! rtl_fw_data_ok(rtl_fw)) {
      #line 225 
      _LOR: {
              #line 226 
              cif_release_firmware(rtl_fw->fw);
              #line 227 
              rc = -22;
              #line 228 
              goto out;
            }
    }
  }
  else 
       #line 225 
       goto _LOR;
  #line 231 
  return 0;
  #line 232 
  out: 
       #line 232 
  ;
  #line 233 
  _dev_err(rtl_fw->dev,(char *)"Unable to load firmware %s (%d)\n",rtl_fw->fw_name,rc);
  #line 235 
  return rc;
}

#line 432  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_firmware.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 435 
  ldv_release_firmware(fw);
  #line 436 
  return;
}

#line 439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_firmware.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 442 
  return ldv_request_firmware(fw);
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int ffs(int x)
{
  #line 285 
  int r;
  #line 286 
  ldv_inline_asm();
  #line 310 
  return r + 1;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 570 
#line 570 
extern enum system_states system_state;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size)
{
  #line 31 
  if (0 != 0) {
    #line 38 
    int tmp_26;
    #line 38 
    int tmp_58;
    #line 38 
    int tmp_59;
    #line 38 
    int tmp_27;
    #line 38 
    int tmp_28;
    #line 38 
    int tmp_60;
    #line 38 
    int tmp_61;
    #line 38 
    int tmp_29;
    #line 38 
    int tmp_30;
    #line 38 
    int tmp_31;
    #line 38 
    int tmp;
    #line 38 
    int tmp_0;
    #line 38 
    int tmp_32;
    #line 38 
    int tmp_33;
    #line 38 
    int tmp_1;
    #line 38 
    int tmp_2;
    #line 38 
    int tmp_34;
    #line 38 
    int tmp_35;
    #line 38 
    int tmp_3;
    #line 38 
    int tmp_4;
    #line 38 
    int tmp_36;
    #line 38 
    int tmp_37;
    #line 38 
    int tmp_5;
    #line 38 
    int tmp_6;
    #line 38 
    int tmp_38;
    #line 38 
    int tmp_39;
    #line 38 
    int tmp_7;
    #line 38 
    int tmp_8;
    #line 38 
    int tmp_40;
    #line 38 
    int tmp_41;
    #line 38 
    int tmp_9;
    #line 38 
    int tmp_10;
    #line 38 
    int tmp_42;
    #line 38 
    int tmp_43;
    #line 38 
    int tmp_11;
    #line 38 
    int tmp_12;
    #line 38 
    int tmp_44;
    #line 38 
    int tmp_45;
    #line 38 
    int tmp_13;
    #line 38 
    int tmp_14;
    #line 38 
    int tmp_46;
    #line 38 
    int tmp_47;
    #line 38 
    int tmp_15;
    #line 38 
    int tmp_16;
    #line 38 
    int tmp_48;
    #line 38 
    int tmp_49;
    #line 38 
    int tmp_17;
    #line 38 
    int tmp_18;
    #line 38 
    int tmp_50;
    #line 38 
    int tmp_51;
    #line 38 
    int tmp_19;
    #line 38 
    int tmp_20;
    #line 38 
    int tmp_52;
    #line 38 
    int tmp_53;
    #line 38 
    int tmp_21;
    #line 38 
    int tmp_22;
    #line 38 
    int tmp_54;
    #line 38 
    int tmp_55;
    #line 38 
    int tmp_23;
    #line 38 
    int tmp_24;
    #line 38 
    int tmp_56;
    #line 38 
    int tmp_57;
    #line 38 
    int tmp_25;
    #line 38 
    int tmp_63;
    #line 32 
    if (size == 0UL) 
                     #line 33 
                     return 52;
    #line 35 
    if (size <= 4095UL) 
                        #line 36 
                        return 0;
    #line 38 
    if (0 != 0) {
      #line 38 
      if (size + 18446744073709551615UL > 1UL) {
        #line 38 
        if (((unsigned long long)(size + 18446744073709551615UL) & 9223372036854775808ULL) == 0ULL) {
          #line 38 
          if (((unsigned long long)(size + 18446744073709551615UL) & 4611686018427387904ULL) == 0ULL) {
            #line 38 
            if (((unsigned long long)(size + 18446744073709551615UL) & 2305843009213693952ULL) == 0ULL) {
              #line 38 
              if (((unsigned long long)(size + 18446744073709551615UL) & 1152921504606846976ULL) == 0ULL) {
                #line 38 
                if (((unsigned long long)(size + 18446744073709551615UL) & 576460752303423488ULL) == 0ULL) {
                  #line 38 
                  if (((unsigned long long)(size + 18446744073709551615UL) & 288230376151711744ULL) == 0ULL) {
                    #line 38 
                    if (((unsigned long long)(size + 18446744073709551615UL) & 144115188075855872ULL) == 0ULL) {
                      #line 38 
                      if (((unsigned long long)(size + 18446744073709551615UL) & 72057594037927936ULL) == 0ULL) {
                        #line 38 
                        if (((unsigned long long)(size + 18446744073709551615UL) & 36028797018963968ULL) == 0ULL) {
                          #line 38 
                          if (((unsigned long long)(size + 18446744073709551615UL) & 18014398509481984ULL) == 0ULL) {
                            #line 38 
                            if (((unsigned long long)(size + 18446744073709551615UL) & 9007199254740992ULL) == 0ULL) {
                              #line 38 
                              if (((unsigned long long)(size + 18446744073709551615UL) & 4503599627370496ULL) == 0ULL) {
                                #line 38 
                                if (((unsigned long long)(size + 18446744073709551615UL) & 2251799813685248ULL) == 0ULL) {
                                  #line 38 
                                  if (((unsigned long long)(size + 18446744073709551615UL) & 1125899906842624ULL) == 0ULL) {
                                    #line 38 
                                    if (((unsigned long long)(size + 18446744073709551615UL) & 562949953421312ULL) == 0ULL) {
                                      #line 38 
                                      if (((unsigned long long)(size + 18446744073709551615UL) & 281474976710656ULL) == 0ULL) {
                                        #line 38 
                                        if (((unsigned long long)(size + 18446744073709551615UL) & 140737488355328ULL) == 0ULL) {
                                          #line 38 
                                          if (((unsigned long long)(size + 18446744073709551615UL) & 70368744177664ULL) == 0ULL) {
                                            #line 38 
                                            if (((unsigned long long)(size + 18446744073709551615UL) & 35184372088832ULL) == 0ULL) {
                                              #line 38 
                                              if (((unsigned long long)(size + 18446744073709551615UL) & 17592186044416ULL) == 0ULL) {
                                                #line 38 
                                                if (((unsigned long long)(size + 18446744073709551615UL) & 8796093022208ULL) == 0ULL) {
                                                  #line 38 
                                                  if (((unsigned long long)(size + 18446744073709551615UL) & 4398046511104ULL) == 0ULL) {
                                                    #line 38 
                                                    if (((unsigned long long)(size + 18446744073709551615UL) & 2199023255552ULL) == 0ULL) {
                                                      #line 38 
                                                      if (((unsigned long long)(size + 18446744073709551615UL) & 1099511627776ULL) == 0ULL) {
                                                        #line 38 
                                                        if (((unsigned long long)(size + 18446744073709551615UL) & 549755813888ULL) == 0ULL) {
                                                          #line 38 
                                                          if (((unsigned long long)(size + 18446744073709551615UL) & 274877906944ULL) == 0ULL) {
                                                            #line 38 
                                                            if (((unsigned long long)(size + 18446744073709551615UL) & 137438953472ULL) == 0ULL) {
                                                              #line 38 
                                                              if (((unsigned long long)(size + 18446744073709551615UL) & 68719476736ULL) == 0ULL) {
                                                                #line 38 
                                                                if (((unsigned long long)(size + 18446744073709551615UL) & 34359738368ULL) == 0ULL) {
                                                                  #line 38 
                                                                  if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 17179869184ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8589934592ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4294967296ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2147483648ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1073741824ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 536870912ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 268435456ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 134217728ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 67108864ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 33554432ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16777216ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8388608ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4194304ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2097152ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1048576ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 524288ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 262144ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 131072ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 65536ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32768ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16384ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8192ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4096ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2048ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1024ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 512ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 256ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 128ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 64ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4ULL) != 0ULL) 
                                                                    #line 38 
                                                                    tmp = -9; else 
                                                                    #line 38 
                                                                    tmp = -10;
                                                                    #line 38 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_0 = -8;
                                                                    #line 38 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_1 = -7;
                                                                    #line 38 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_2 = -6;
                                                                    #line 38 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_3 = -5;
                                                                    #line 38 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_4 = -4;
                                                                    #line 38 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_5 = -3;
                                                                    #line 38 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_6 = -2;
                                                                    #line 38 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_7 = -1;
                                                                    #line 38 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_8 = 0;
                                                                    #line 38 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_9 = 1;
                                                                    #line 38 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_10 = 2;
                                                                    #line 38 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_11 = 3;
                                                                    #line 38 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_12 = 4;
                                                                    #line 38 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_13 = 5;
                                                                    #line 38 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_14 = 6;
                                                                    #line 38 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_15 = 7;
                                                                    #line 38 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_16 = 8;
                                                                    #line 38 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_17 = 9;
                                                                    #line 38 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_18 = 10;
                                                                    #line 38 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_19 = 11;
                                                                    #line 38 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_20 = 12;
                                                                    #line 38 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_21 = 13;
                                                                    #line 38 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_22 = 14;
                                                                    #line 38 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_23 = 15;
                                                                    #line 38 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_24 = 16;
                                                                    #line 38 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_25 = 17;
                                                                    #line 38 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_26 = 18;
                                                                    #line 38 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_27 = 19;
                                                                    #line 38 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_28 = 20;
                                                                    #line 38 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_29 = 21;
                                                                    #line 38 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_30 = 22;
                                                                    #line 38 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 38 
                                                                    tmp_31 = 23;
                                                                  #line 38 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 38 
                                                                  tmp_32 = 24;
                                                                #line 38 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 38 
                                                                   tmp_33 = 25;
                                                              #line 38 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 38 
                                                                 tmp_34 = 26;
                                                            #line 38 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 38 
                                                               tmp_35 = 27;
                                                          #line 38 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 38 
                                                             tmp_36 = 28;
                                                        #line 38 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 38 
                                                           tmp_37 = 29;
                                                      #line 38 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 38 
                                                         tmp_38 = 30;
                                                    #line 38 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 38 
                                                       tmp_39 = 31;
                                                  #line 38 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 38 
                                                     tmp_40 = 32;
                                                #line 38 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 38 
                                                   tmp_41 = 33;
                                              #line 38 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 38 
                                                 tmp_42 = 34;
                                            #line 38 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 38 
                                               tmp_43 = 35;
                                          #line 38 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 38 
                                             tmp_44 = 36;
                                        #line 38 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 38 
                                           tmp_45 = 37;
                                      #line 38 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 38 
                                         tmp_46 = 38;
                                    #line 38 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 38 
                                       tmp_47 = 39;
                                  #line 38 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 38 
                                     tmp_48 = 40;
                                #line 38 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 38 
                                   tmp_49 = 41;
                              #line 38 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 38 
                                 tmp_50 = 42;
                            #line 38 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 38 
                               tmp_51 = 43;
                          #line 38 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 38 
                             tmp_52 = 44;
                        #line 38 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 38 
                           tmp_53 = 45;
                      #line 38 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 38 
                         tmp_54 = 46;
                    #line 38 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 38 
                       tmp_55 = 47;
                  #line 38 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 38 
                     tmp_56 = 48;
                #line 38 
                tmp_57 = tmp_56;
              }
              else 
                   #line 38 
                   tmp_57 = 49;
              #line 38 
              tmp_58 = tmp_57;
            }
            else 
                 #line 38 
                 tmp_58 = 50;
            #line 38 
            tmp_59 = tmp_58;
          }
          else 
               #line 38 
               tmp_59 = 51;
          #line 38 
          tmp_60 = tmp_59;
        }
        else 
             #line 38 
             tmp_60 = 52;
        #line 38 
        tmp_61 = tmp_60;
      }
      else 
           #line 38 
           tmp_61 = -11;
      #line 38 
      tmp_63 = tmp_61;
    }
    else {
      #line 38 
      tmp_63 = __ilog2_u64((unsigned long long)(size + 18446744073709551615UL)) + -11;
    }
    #line 38 
    return tmp_63;
  }
  #line 41 
  size --;
  #line 42 
  size >>= 12;
  #line 46 
  return fls64((unsigned long long)size);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 384  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_386 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 200 
  bool success;
  {
    #line 200 
    int *_old = old;
    #line 200 
    int __old = *_old;
    #line 200 
    int __new = new;
    #line 200 
    switch (4UL) {
      #line 200 
      case (unsigned long)1: 
                             #line 200 
      ;
      {
        #line 200 
        u8 *__ptr = (u8 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)2: 
                             #line 200 
      ;
      {
        #line 200 
        u16 *__ptr_0 = (u16 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)4: 
                             #line 200 
      ;
      {
        #line 200 
        u32 *__ptr_1 = (u32 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)8: 
                             #line 200 
      ;
      {
        #line 200 
        u64 *__ptr_2 = (u64 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      default: 
               #line 200 
      ;
      #line 200 
      __cmpxchg_wrong_size();
    }
    #line 200 
    if ((long)(! success) != 0L) 
                                 #line 200 
                                 *_old = __old;
    }
  #line 200 
  return (_Bool)((long)((long)((int)success != 0)) != 0L);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 370  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void atomic_inc(atomic_t *v);
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 693 
  kasan_check_read((void *)v,4U);
  #line 694 
  kasan_check_read((void *)old,4U);
  #line 695 
  return arch_atomic_try_cmpxchg(v,old,new);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
  #line 1086 
  int c = atomic_read(v);
  #line 1088 
  while (! ((long)(c == u) != 0L)) {
    #line 1091 
    if (atomic_try_cmpxchg(v,& c,c + a)) 
                                         #line 1088 
                                         break;
  }
  #line 1093 
  return c;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static bool atomic_add_unless(atomic_t *v, int a, int u)
{
  #line 1111 
  ;
  #line 1111 
  return (_Bool)(atomic_fetch_add_unless(v,a,u) != u);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 391  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void *ERR_PTR(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 398  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 405  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static bool IS_ERR(void *ptr);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_CAST(void *ptr)
{
  #line 54 
  return ptr;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
#line 1021 
static void cif_mutex_lock_mutex_of_NOT_ARG_SIGN(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 25 
#line 25 
void *ldv_err_ptr(long error);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 27 
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 40 
void synchronize_rcu(void);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 1028  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_mutex_unlock_mutex_of_NOT_ARG_SIGN(struct mutex *lock);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 899  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void *addr)
{
  #line 57 
  unsigned char ret;
  #line 58 
  ldv_inline_asm();
  #line 57 
  return ret;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void *addr)
{
  #line 58 
  unsigned short ret;
  #line 59 
  ldv_inline_asm();
  #line 58 
  return ret;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val, void *addr)
{
  #line 67 
  ldv_inline_asm();
  #line 68 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val, void *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 216 
#line 216 
void memcpy_fromio(void *, void *, size_t);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret___2;
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 973 
int devm_add_action(struct device *, void (*)(void *), void *);
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int devm_add_action_or_reset(struct device *dev, void (*action)(void *), void *data)
{
  #line 980 
  int ret;
  #line 982 
  ret = devm_add_action(dev,action,data);
  #line 983 
  if (ret != 0) 
                #line 984 
                (*action)(data);
  #line 986 
  return ret;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_may_wakeup(struct device *dev)
{
  #line 84 
  return (_Bool)(((unsigned int)dev->power.can_wakeup != 0U && dev->power.wakeup != (struct wakeup_source *)0) != 0);
}

#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 664  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u16 pci_dev_id(struct pci_dev *dev)
{
  #line 611 
  return (unsigned short)(((int)((unsigned short)(dev->bus)->number) << 8U) | (int)((unsigned short)dev->devfn));
}

#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1086 
#line 1086 
int pci_write_config_byte(struct pci_dev *, int, u8);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1094 
#line 1094 
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);
#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pcie_capability_set_word(struct pci_dev *dev, int pos, u16 set)
{
  #line 1102 
  return pcie_capability_clear_and_set_word(dev,pos,(unsigned short)0,
                                         (unsigned short)((int)set));
}

#line 1111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pcie_capability_clear_word(struct pci_dev *dev, int pos, u16 clear)
{
  #line 1114 
  return pcie_capability_clear_and_set_word(dev,pos,
                                         (unsigned short)((int)clear),
                                         (unsigned short)0);
}

#line 1135 
#line 1135 
int pcim_enable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1161 
#line 1161 
void pci_clear_master(struct pci_dev *);
#line 1167 
#line 1167 
int pcim_set_mwi(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1206 
#line 1206 
int pci_request_irq(struct pci_dev *, unsigned int, irqreturn_t (*)(int , void *), irqreturn_t (*)(int , void *), void *, char * , ...);
#line 1209 
#line 1209 
void pci_free_irq(struct pci_dev *, unsigned int, void *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1241 
#line 1241 
bool pci_dev_run_wake(struct pci_dev *);
#line 1346 
#line 1059  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1067  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1447 
int pci_alloc_irq_vectors_affinity(struct pci_dev *, unsigned int, unsigned int, unsigned int, struct irq_affinity *);
#line 1452 
#line 1452 
int pci_irq_vector(struct pci_dev *, unsigned int);
#line 1547 
#line 1547 
int pci_disable_link_state(struct pci_dev *, int);
#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs, unsigned int max_vecs, unsigned int flags)
{
  #line 1771 
  return pci_alloc_irq_vectors_affinity(dev,min_vecs,max_vecs,flags,
                                     (struct irq_affinity *)0);
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 1972 
#line 1972 
void **pcim_iomap_table(struct pci_dev *);
#line 1973 
#line 1973 
int pcim_iomap_regions(struct pci_dev *, int, char *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 446 
#line 446 
void *dmam_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dmam_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 774 
  return dmam_alloc_attrs(dev,size,dma_handle,gfp,
                       (unsigned long)(gfp >> 5) & 256UL);
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_776 __u;
  #line 93 
  union __anonunion___u_778 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2827 
#line 2827 
void napi_consume_skb(struct sk_buff *, int);
#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 2996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_frag_address(skb_frag_t *frag)
{
  #line 2998 
  return lowmem_page_address(skb_frag_page(frag)) + (unsigned long)skb_frag_off(frag);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes, bool xmit_more)
{
  #line 3269 
  if ((int)xmit_more != 0) {
    #line 3271 
    dql_queued(& dev_queue->dql,bytes);
    #line 3273 
    return netif_tx_queue_stopped(dev_queue);
  }
  #line 3275 
  netdev_tx_sent_queue(dev_queue,bytes);
  #line 3276 
  return (_Bool)1;
}

#line 3293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netdev_sent_queue(struct net_device *dev, unsigned int bytes, bool xmit_more)
{
  #line 3297 
  ;
  #line 3297 
  ;
  #line 3297 
  return __netdev_tx_sent_queue(netdev_get_tx_queue(dev,0U),bytes,
                               (_Bool)((bool)((int)xmit_more) != 0));
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  #line 3338 
  ;
  #line 3338 
  ;
  #line 3338 
  netdev_tx_completed_queue(netdev_get_tx_queue(dev,0U),pkts,bytes);
  #line 3339 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  #line 3358 
  netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue,0U));
  #line 3359 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 4131 
#line 1051  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1043  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4523 
#line 4523 
void netdev_update_features(struct net_device *);
#line 4741 
#line 4741 
void netdev_printk(char *, struct net_device *, char * , ...);
#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4754 
#line 4754 
void netdev_notice(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 28 
int eth_platform_get_mac_address(struct device *, u8 *);
#line 32 
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 45 
#line 45 
int eth_mac_addr(struct net_device *, void *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 54 
#line 54 
struct net_device *devm_alloc_etherdev_mqs(struct device *, int, unsigned int, unsigned int);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 232 
int clk_prepare(struct clk *);
#line 260 
#line 260 
void clk_unprepare(struct clk *);
#line 419 
#line 419 
struct clk *devm_clk_get(struct device *, char *);
#line 491 
#line 491 
int clk_enable(struct clk *);
#line 519 
#line 519 
void clk_disable(struct clk *);
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static int clk_prepare_enable(struct clk *clk)
{
  #line 905 
  int ret;
  #line 907 
  ret = clk_prepare(clk);
  #line 908 
  if (ret != 0) 
                #line 909 
                return ret;
  #line 910 
  ret = clk_enable(clk);
  #line 911 
  if (ret != 0) 
                #line 912 
                clk_unprepare(clk);
  #line 914 
  return ret;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static void clk_disable_unprepare(struct clk *clk)
{
  #line 920 
  clk_disable(clk);
  #line 921 
  clk_unprepare(clk);
  #line 922 
  return;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 318 
int __mdiobus_write(struct mii_bus *, int, u32, u16);
#line 322 
#line 322 
int mdiobus_write(struct mii_bus *, int, u32, u16);
#line 328 
#line 328 
struct phy_device *mdiobus_get_phy(struct mii_bus *, int);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 266 
int __mdiobus_register(struct mii_bus *, struct module *);
#line 268 
#line 268 
void mdiobus_unregister(struct mii_bus *);
#line 270 
#line 270 
struct mii_bus *devm_mdiobus_alloc_size(struct device *, int);
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static struct mii_bus *devm_mdiobus_alloc(struct device *dev)
{
  #line 273 
  return devm_mdiobus_alloc_size(dev,0);
}

#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_write(struct phy_device *phydev, u32 regnum, u16 val)
{
  #line 729 
  return mdiobus_write(phydev->mdio.bus,phydev->mdio.addr,regnum,
                    (unsigned short)((int)val));
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int __phy_write(struct phy_device *phydev, u32 regnum, u16 val)
{
  #line 742 
  return __mdiobus_write(phydev->mdio.bus,phydev->mdio.addr,regnum,
                      (unsigned short)((int)val));
}

#line 755 
#line 755 
int phy_read_mmd(struct phy_device *, int, u32);
#line 778 
#line 778 
int phy_write_mmd(struct phy_device *, int, u32, u16);
#line 796 
#line 796 
int __phy_modify(struct phy_device *, u32, u16, u16);
#line 797 
#line 797 
int phy_modify(struct phy_device *, u32, u16, u16);
#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static int phy_set_bits(struct phy_device *phydev, u32 regnum, u16 val)
{
  #line 843 
  return phy_modify(phydev,regnum,(unsigned short)0,(unsigned short)((int)val));
}

#line 994 
#line 994 
int phy_select_page(struct phy_device *, int);
#line 995 
#line 995 
int phy_restore_page(struct phy_device *, int, int);
#line 996 
#line 996 
int phy_read_paged(struct phy_device *, int, u32);
#line 997 
#line 997 
int phy_write_paged(struct phy_device *, int, u32, u16);
#line 1000 
#line 1000 
int phy_modify_paged(struct phy_device *, int, u32, u16, u16);
#line 1026 
#line 1026 
int phy_suspend(struct phy_device *);
#line 1027 
#line 1027 
int phy_resume(struct phy_device *);
#line 1039 
#line 1039 
int phy_connect_direct(struct net_device *, struct phy_device *, void (*)(struct net_device *), phy_interface_t);
#line 1045 
#line 1045 
void phy_disconnect(struct phy_device *);
#line 1047 
#line 1047 
void phy_start(struct phy_device *);
#line 1048 
#line 1048 
void phy_stop(struct phy_device *);
#line 1051 
#line 1051 
int phy_speed_down(struct phy_device *, bool);
#line 1052 
#line 1052 
int phy_speed_up(struct phy_device *);
#line 1091 
#line 1091 
void phy_attached_info(struct phy_device *);
#line 1106 
#line 1106 
int genphy_soft_reset(struct phy_device *);
#line 1170 
#line 1170 
void phy_mac_interrupt(struct phy_device *);
#line 1177 
#line 1177 
int phy_mii_ioctl(struct phy_device *, struct ifreq *, int);
#line 1180 
#line 1180 
void phy_print_status(struct phy_device *);
#line 1181 
#line 1181 
int phy_set_max_speed(struct phy_device *, u32);
#line 1185 
#line 1185 
void phy_support_asym_pause(struct phy_device *);
#line 1205 
#line 1205 
int phy_ethtool_set_eee(struct phy_device *, struct ethtool_eee *);
#line 1206 
#line 1206 
int phy_ethtool_get_eee(struct phy_device *, struct ethtool_eee *);
#line 1210 
#line 1210 
int phy_ethtool_get_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
#line 1212 
#line 1212 
int phy_ethtool_set_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
#line 1214 
#line 1214 
int phy_ethtool_nway_reset(struct net_device *);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 36 
int rtnl_is_locked(void);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool skb_vlan_tagged_multi(struct sk_buff *skb)
{
  #line 687 
  __be16 protocol = skb->protocol;
  #line 689 
  if ((unsigned int)skb->vlan_present == 0U) {
    #line 690 
    struct vlan_ethhdr *veh;
    #line 692 
    int tmp_0;
    #line 695 
    int tmp_2;
    #line 692 
    if (eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 692 
                                                        tmp_0 = 0; else 
                                                                    #line 692 
                                                                    tmp_0 = 1;
    #line 692 
    if ((long)tmp_0 != 0L) 
                           #line 693 
                           return (_Bool)0;
    #line 695 
    if (pskb_may_pull(skb,18U)) 
                                #line 695 
                                tmp_2 = 0; else 
                                                #line 695 
                                                tmp_2 = 1;
    #line 695 
    if ((long)tmp_2 != 0L) 
                           #line 696 
                           return (_Bool)0;
    #line 698 
    veh = (struct vlan_ethhdr *)skb->data;
    #line 699 
    protocol = veh->h_vlan_encapsulated_proto;
  }
  #line 702 
  if (! eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 703 
                                                        return (_Bool)0;
  #line 705 
  return (_Bool)1;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static netdev_features_t vlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  #line 718 
  if ((int)skb_vlan_tagged_multi(skb) != 0) 
                                            #line 724 
                                            features &= 17592186044649ULL;
  #line 729 
  return features;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
#line 15 
extern u8 byte_rev_table[256U];
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u8 __bitrev8(u8 byte)
{
  #line 18 
  return byte_rev_table[(int)byte];
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u16 __bitrev16(u16 x)
{
  #line 23 
  return (unsigned short)(((int)__bitrev8((unsigned char)((int)((unsigned char)x))) << 8) | (int)__bitrev8((unsigned char)((int)((unsigned char)((int)x >> 8)))));
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u32 __bitrev32(u32 x)
{
  #line 28 
  return (unsigned int)(((int)__bitrev16((unsigned short)((int)((unsigned short)x))) << 16) | (int)__bitrev16((unsigned short)((int)((unsigned short)(x >> 16)))));
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 38 
int __pm_runtime_idle(struct device *, int);
#line 40 
#line 40 
int __pm_runtime_resume(struct device *, int);
#line 42 
#line 42 
int pm_schedule_suspend(struct device *, unsigned int);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_get_noresume(struct device *dev)
{
  #line 70 
  atomic_inc(& dev->power.usage_count);
  #line 71 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle(struct device *dev)
{
  #line 75 
  atomic_add_unless(& dev->power.usage_count,-1,0);
  #line 76 
  return;
}

#line 89 
#line 1035  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static bool cif_pm_runtime_active(struct device *dev);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_idle(struct device *dev)
{
  #line 186 
  return __pm_runtime_idle(dev,0);
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_request_resume(struct device *dev)
{
  #line 211 
  return __pm_runtime_resume(dev,1);
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  #line 226 
  return __pm_runtime_resume(dev,4);
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_sync(struct device *dev)
{
  #line 242 
  return __pm_runtime_idle(dev,4);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_checksum.h"
__inline static __sum16 tcp_v6_check(int len, struct in6_addr *saddr, struct in6_addr *daddr, __wsum base)
{
  #line 59 
  return csum_ipv6_magic(saddr,daddr,(unsigned int)len,(unsigned char)6,base);
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct __anonstruct_rtl_chip_infos_1314 rtl_chip_infos[53U] = {{.name = (char *)"RTL8169s"}, {.name = (char *)"RTL8110s"}, {.name = (char *)"RTL8169sb/8110sb"}, {.name = (char *)"RTL8169sc/8110sc"}, {.name = (char *)"RTL8169sc/8110sc"}, {.name = (char *)"RTL8102e"}, {.name = (char *)"RTL8102e"}, {.name = (char *)"RTL8102e/RTL8103e"}, {.name = (char *)"RTL8101e"}, {.name = (char *)"RTL8168b/8111b"}, {.name = (char *)"RTL8168b/8111b"}, {.name = (char *)"RTL8101e"}, {.name = (char *)"RTL8100e"}, {.name = (char *)"RTL8100e"}, {.name = (char *)"RTL8101e"}, {.name = (char *)"RTL8168b/8111b"}, {.name = (char *)"RTL8168cp/8111cp"}, {.name = (char *)"RTL8168c/8111c"}, {.name = (char *)"RTL8168c/8111c"}, {.name = (char *)"RTL8168c/8111c"}, {.name = (char *)"RTL8168c/8111c"}, {.name = (char *)"RTL8168cp/8111cp"}, {.name = (char *)"RTL8168cp/8111cp"}, {.name = (char *)"RTL8168d/8111d", .fw_name = (char *)"rtl_nic/rtl8168d-1.fw"}, {.name = (char *)"RTL8168d/8111d", .fw_name = (char *)"rtl_nic/rtl8168d-2.fw"}, {.name = (char *)"RTL8168dp/8111dp"}, {.name = (char *)"RTL8168dp/8111dp"}, {.name = (char *)"RTL8105e", .fw_name = (char *)"rtl_nic/rtl8105e-1.fw"}, {.name = (char *)"RTL8105e", .fw_name = (char *)"rtl_nic/rtl8105e-1.fw"}, {.name = (char *)"RTL8168dp/8111dp"}, {.name = (char *)"RTL8168e/8111e", .fw_name = (char *)"rtl_nic/rtl8168e-1.fw"}, {.name = (char *)"RTL8168e/8111e", .fw_name = (char *)"rtl_nic/rtl8168e-2.fw"}, {.name = (char *)"RTL8168evl/8111evl", .fw_name = (char *)"rtl_nic/rtl8168e-3.fw"}, {.name = (char *)"RTL8168f/8111f", .fw_name = (char *)"rtl_nic/rtl8168f-1.fw"}, {.name = (char *)"RTL8168f/8111f", .fw_name = (char *)"rtl_nic/rtl8168f-2.fw"}, {.name = (char *)"RTL8402", .fw_name = (char *)"rtl_nic/rtl8402-1.fw"}, {.name = (char *)"RTL8411", .fw_name = (char *)"rtl_nic/rtl8411-1.fw"}, {.name = (char *)"RTL8106e", .fw_name = (char *)"rtl_nic/rtl8106e-1.fw"}, {.name = (char *)"RTL8168g/8111g", .fw_name = (char *)"rtl_nic/rtl8168g-2.fw"}, {.name = (char *)"RTL8168g/8111g"}, {.name = (char *)"RTL8168gu/8111gu", .fw_name = (char *)"rtl_nic/rtl8168g-3.fw"}, {.name = (char *)"RTL8106eus", .fw_name = (char *)"rtl_nic/rtl8106e-2.fw"}, {.name = (char *)"RTL8411b", .fw_name = (char *)"rtl_nic/rtl8411-2.fw"}, {.name = (char *)"RTL8168h/8111h", .fw_name = (char *)"rtl_nic/rtl8168h-1.fw"}, {.name = (char *)"RTL8168h/8111h", .fw_name = (char *)"rtl_nic/rtl8168h-2.fw"}, {.name = (char *)"RTL8107e", .fw_name = (char *)"rtl_nic/rtl8107e-1.fw"}, {.name = (char *)"RTL8107e", .fw_name = (char *)"rtl_nic/rtl8107e-2.fw"}, {.name = (char *)"RTL8168ep/8111ep"}, {.name = (char *)"RTL8168ep/8111ep"}, {.name = (char *)"RTL8168ep/8111ep"}, {.name = (char *)"RTL8168fp/RTL8117", .fw_name = (char *)"rtl_nic/rtl8168fp-3.fw"}, {.name = (char *)"RTL8125"}, {.name = (char *)"RTL8125", .fw_name = (char *)"rtl_nic/rtl8125a-3.fw"}};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct pci_device_id rtl8169_pci_tbl[19U] = {{.vendor = 4332U, .device = 9474U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4332U, .device = 9728U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4332U, .device = 33065U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4332U, .device = 33078U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 4332U, .device = 33121U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4332U, .device = 33127U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4332U, .device = 33128U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4351U, .device = 33128U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4332U, .device = 33129U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4486U, .device = 17152U, .subvendor = 4486U, .subdevice = 19216U}, {.vendor = 4486U, .device = 17152U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4486U, .device = 17154U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4697U, .device = 49415U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5868U, .device = 278U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5943U, .device = 4146U, .subvendor = 4294967295U, .subdevice = 36U}, {.vendor = 1U, .device = 33128U, .subvendor = 4294967295U, .subdevice = 9232U}, {.vendor = 4332U, .device = 33061U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4332U, .device = 12288U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
struct pci_device_id __mod_pci__rtl8169_pci_tbl_device_table[19U];
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct __anonstruct_debug_1315 debug = {.msg_enable = 4294967295U};
#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
__inline static struct device *tp_to_dev(struct rtl8169_private *tp)
{
  #line 726 
  return & (tp->pci_dev)->dev;
}

#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_lock_work(struct rtl8169_private *tp)
{
  #line 731 
  cif_mutex_lock_mutex_of_NOT_ARG_SIGN(& tp->wk.mutex);
  #line 732 
  return;
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_unlock_work(struct rtl8169_private *tp)
{
  #line 736 
  cif_mutex_unlock_mutex_of_NOT_ARG_SIGN(& tp->wk.mutex);
  #line 737 
  return;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_lock_config_regs(struct rtl8169_private *tp)
{
  #line 741 
  writeb((unsigned char)0,tp->mmio_addr + 80U);
  #line 742 
  return;
}

#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_unlock_config_regs(struct rtl8169_private *tp)
{
  #line 746 
  writeb((unsigned char)192,tp->mmio_addr + 80U);
  #line 747 
  return;
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_is_8125(struct rtl8169_private *tp)
{
  #line 751 
  return (_Bool)(tp->mac_version > (unsigned int)RTL_GIGA_MAC_VER_52);
}

#line 754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_is_8168evl_up(struct rtl8169_private *tp)
{
  #line 757 
  return (_Bool)(((tp->mac_version > (unsigned int)RTL_GIGA_MAC_VER_33 && tp->mac_version != (unsigned int)RTL_GIGA_MAC_VER_39) && tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_52) != 0);
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_supports_eee(struct rtl8169_private *tp)
{
  #line 764 
  return (_Bool)(((tp->mac_version > (unsigned int)RTL_GIGA_MAC_VER_33 && tp->mac_version != (unsigned int)RTL_GIGA_MAC_VER_37) && tp->mac_version != (unsigned int)RTL_GIGA_MAC_VER_39) != 0);
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_read_mac_from_reg(struct rtl8169_private *tp, u8 *mac, int reg)
{
  #line 770 
  int i;
  #line 772 
  i = 0;
  #line 772 
  while (i <= 5) {
    #line 773 
    *(mac + (unsigned long)i) = readb(tp->mmio_addr + (unsigned long)(reg + i));
    #line 772 
    i ++;
  }
  #line 774 
  return;
}

#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_udelay(unsigned int d)
{
  #line 783 
  if (0 != 0) 
    #line 783 
    if (d > 19999U) 
                    #line 783 
                    __bad_udelay(); else 
                                         #line 783 
                                         __const_udelay((unsigned long)d * 4295UL);
  else 
       #line 783 
       __udelay((unsigned long)d);
  #line 785 
  return;
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_loop_wait(struct rtl8169_private *tp, struct rtl_cond *c, void (*delay)(unsigned int ), unsigned int d, int n, bool high)
{
  #line 790 
  int i;
  #line 792 
  i = 0;
  #line 792 
  while (i < n) {
    {
      #line 793 
      ;
      #line 793 
      if ((int)(*(c->check))(tp) == (int)high) 
                                               #line 794 
                                               return (_Bool)1;
      #line 795 
      (*delay)(d);
    }
    #line 792 
    i ++;
  }
  #line 797 
  if ((tp->msg_enable & 1U) != 0U) 
                                   #line 797 
                                   netdev_err(tp->dev,(char *)"%s == %d (loop: %d, delay: %d).\n",c->msg,! high,n,d);
  #line 799 
  return (_Bool)0;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_udelay_loop_wait_high(struct rtl8169_private *tp, struct rtl_cond *c, unsigned int d, int n)
{
  #line 806 
  return rtl_loop_wait(tp,c,& rtl_udelay,d,n,(_Bool)1);
}

#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_udelay_loop_wait_low(struct rtl8169_private *tp, struct rtl_cond *c, unsigned int d, int n)
{
  #line 813 
  return rtl_loop_wait(tp,c,& rtl_udelay,d,n,(_Bool)0);
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_msleep_loop_wait_high(struct rtl8169_private *tp, struct rtl_cond *c, unsigned int d, int n)
{
  #line 820 
  return rtl_loop_wait(tp,c,& msleep,d,n,(_Bool)1);
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_msleep_loop_wait_low(struct rtl8169_private *tp, struct rtl_cond *c, unsigned int d, int n)
{
  #line 827 
  return rtl_loop_wait(tp,c,& msleep,d,n,(_Bool)0);
}

#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_ocp_reg_failure(struct rtl8169_private *tp, u32 reg)
{
  #line 842 
  if ((reg & 4294901761U) != 0U) {
    #line 843 
    if ((tp->msg_enable & 1U) != 0U) 
                                     #line 843 
                                     netdev_err(tp->dev,(char *)"Invalid ocp reg %x!\n",reg);
    #line 844 
    return (_Bool)1;
  }
  #line 846 
  return (_Bool)0;
}

#line 849 
#line 849 
static bool rtl_ocp_gphy_cond_check(struct rtl8169_private *tp);
#line 849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_ocp_gphy_cond = {.check = & rtl_ocp_gphy_cond_check, .msg = (char *)"rtl_ocp_gphy_cond"};
#line 849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_ocp_gphy_cond_check(struct rtl8169_private *tp)
{
  #line 851 
  return (_Bool)((readl(tp->mmio_addr + 184U) & 2147483648U) != 0U);
}

#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168_phy_ocp_write(struct rtl8169_private *tp, u32 reg, u32 data)
{
  #line 856 
  if ((int)rtl_ocp_reg_failure(tp,reg) != 0) 
                                             #line 857 
                                             return;
  #line 859 
  writel(((reg << 15) | data) | 2147483648U,tp->mmio_addr + 184U);
  #line 861 
  rtl_udelay_loop_wait_low(tp,& rtl_ocp_gphy_cond,25U,10);
  #line 862 
  return;
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8168_phy_ocp_read(struct rtl8169_private *tp, u32 reg)
{
  #line 872 
  int tmp_2;
  #line 866 
  if ((int)rtl_ocp_reg_failure(tp,reg) != 0) 
                                             #line 867 
                                             return 0;
  #line 869 
  writel(reg << 15,tp->mmio_addr + 184U);
  #line 872 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_ocp_gphy_cond,25U,10) != 0) {
    #line 872 
    tmp_2 = (int)readl(tp->mmio_addr + 184U) & 65535;
  }
  else 
       #line 872 
       tmp_2 = -110;
  #line 872 
  return tmp_2;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168_mac_ocp_write(struct rtl8169_private *tp, u32 reg, u32 data)
{
  #line 877 
  if ((int)rtl_ocp_reg_failure(tp,reg) != 0) 
                                             #line 878 
                                             return;
  #line 880 
  writel(((reg << 15) | data) | 2147483648U,tp->mmio_addr + 176U);
  #line 881 
  return;
}

#line 883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u16 r8168_mac_ocp_read(struct rtl8169_private *tp, u32 reg)
{
  #line 885 
  if ((int)rtl_ocp_reg_failure(tp,reg) != 0) 
                                             #line 886 
                                             return (unsigned short)0U;
  #line 888 
  writel(reg << 15,tp->mmio_addr + 176U);
  #line 890 
  return (unsigned short)readl(tp->mmio_addr + 176U);
}

#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168_mac_ocp_modify(struct rtl8169_private *tp, u32 reg, u16 mask, u16 set)
{
  #line 896 
  u16 data = r8168_mac_ocp_read(tp,reg);
  #line 898 
  r8168_mac_ocp_write(tp,reg,(unsigned int)(((int)data & ~ ((int)mask)) | (int)set));
  #line 899 
  return;
}

#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168g_mdio_write(struct rtl8169_private *tp, int reg, int value)
{
  #line 905 
  if (reg == 31) {
    #line 906 
    if (value != 0) 
                    #line 906 
                    tp->ocp_base = (unsigned int)(value << 4); else 
                                                                    #line 906 
                                                                    tp->ocp_base = 41984U;
    #line 907 
    return;
  }
  #line 910 
  if (tp->ocp_base != 41984U) 
                              #line 911 
                              reg += -16;
  #line 913 
  r8168_phy_ocp_write(tp,tp->ocp_base + (unsigned int)(reg * 2),(unsigned int)value);
  #line 914 
  return;
}

#line 916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8168g_mdio_read(struct rtl8169_private *tp, int reg)
{
  #line 918 
  if (reg == 31) {
    #line 919 
    int tmp;
    #line 919 
    if (tp->ocp_base != 41984U) 
                                #line 919 
                                tmp = (int)(tp->ocp_base >> 4); else 
                                                                  #line 919 
                                                                  tmp = 0;
    #line 919 
    return tmp;
  }
  #line 921 
  if (tp->ocp_base != 41984U) 
                              #line 922 
                              reg += -16;
  #line 924 
  return r8168_phy_ocp_read(tp,tp->ocp_base + (unsigned int)(reg * 2));
}

#line 927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void mac_mcu_write(struct rtl8169_private *tp, int reg, int value)
{
  #line 929 
  if (reg == 31) {
    #line 930 
    tp->ocp_base = (unsigned int)(value << 4);
    #line 931 
    return;
  }
  #line 934 
  r8168_mac_ocp_write(tp,tp->ocp_base + (unsigned int)reg,(unsigned int)value);
  #line 935 
  return;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int mac_mcu_read(struct rtl8169_private *tp, int reg)
{
  #line 939 
  return (int)r8168_mac_ocp_read(tp,tp->ocp_base + (unsigned int)reg);
}

#line 942 
#line 942 
static bool rtl_phyar_cond_check(struct rtl8169_private *tp);
#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_phyar_cond = {.check = & rtl_phyar_cond_check, .msg = (char *)"rtl_phyar_cond"};
#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_phyar_cond_check(struct rtl8169_private *tp)
{
  #line 944 
  return (_Bool)((readl(tp->mmio_addr + 96U) & 2147483648U) != 0U);
}

#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8169_mdio_write(struct rtl8169_private *tp, int reg, int value)
{
  #line 949 
  writel((((unsigned int)(reg << 16) & 2031616U) | ((unsigned int)value & 65535U)) | 2147483648U,tp->mmio_addr + 96U);
  #line 951 
  rtl_udelay_loop_wait_low(tp,& rtl_phyar_cond,25U,20);
  #line 956 
  __const_udelay(85900UL);
  #line 958 
  return;
}

#line 959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8169_mdio_read(struct rtl8169_private *tp, int reg)
{
  #line 961 
  int value;
  #line 963 
  writel((unsigned int)(reg << 16) & 2031616U,tp->mmio_addr + 96U);
  #line 965 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_phyar_cond,25U,20) != 0) {
    #line 965 
    value = (int)readl(tp->mmio_addr + 96U) & 65535;
  }
  else 
       #line 965 
       value = -110;
  #line 972 
  __const_udelay(85900UL);
  #line 974 
  return value;
}

#line 977 
#line 977 
static bool rtl_ocpar_cond_check(struct rtl8169_private *tp);
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_ocpar_cond = {.check = & rtl_ocpar_cond_check, .msg = (char *)"rtl_ocpar_cond"};
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_ocpar_cond_check(struct rtl8169_private *tp)
{
  #line 979 
  return (_Bool)((readl(tp->mmio_addr + 180U) & 2147483648U) != 0U);
}

#line 982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_1_mdio_access(struct rtl8169_private *tp, int reg, u32 data)
{
  #line 984 
  writel(((unsigned int)(reg << 16) & 8323072U) | data,tp->mmio_addr + 176U);
  #line 985 
  writel(2147545184U,tp->mmio_addr + 180U);
  #line 986 
  writel(0U,tp->mmio_addr + 124U);
  #line 988 
  rtl_udelay_loop_wait_low(tp,& rtl_ocpar_cond,1000U,100);
  #line 989 
  return;
}

#line 991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_1_mdio_write(struct rtl8169_private *tp, int reg, int value)
{
  #line 993 
  r8168dp_1_mdio_access(tp,reg,((unsigned int)value & 65535U) | 2147483648U);
  #line 995 
  return;
}

#line 997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8168dp_1_mdio_read(struct rtl8169_private *tp, int reg)
{
  #line 1006 
  int tmp_1;
  #line 999 
  r8168dp_1_mdio_access(tp,reg,0U);
  #line 1001 
  __const_udelay(4295000UL);
  #line 1002 
  writel(61536U,tp->mmio_addr + 180U);
  #line 1003 
  writel(0U,tp->mmio_addr + 124U);
  #line 1006 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_ocpar_cond,1000U,100) != 0) {
    #line 1006 
    tmp_1 = (int)readl(tp->mmio_addr + 176U) & 65535;
  }
  else 
       #line 1006 
       tmp_1 = -110;
  #line 1006 
  return tmp_1;
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_2_mdio_start(struct rtl8169_private *tp)
{
  #line 1013 
  ;
  #line 1013 
  writel(readl(tp->mmio_addr + 208U) & 4294836223U,tp->mmio_addr + 208U);
  #line 1014 
  return;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_2_mdio_stop(struct rtl8169_private *tp)
{
  #line 1018 
  ;
  #line 1018 
  writel(readl(tp->mmio_addr + 208U) | 131072U,tp->mmio_addr + 208U);
  #line 1019 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_2_mdio_write(struct rtl8169_private *tp, int reg, int value)
{
  #line 1023 
  r8168dp_2_mdio_start(tp);
  #line 1025 
  r8169_mdio_write(tp,reg,value);
  #line 1027 
  r8168dp_2_mdio_stop(tp);
  #line 1028 
  return;
}

#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8168dp_2_mdio_read(struct rtl8169_private *tp, int reg)
{
  #line 1032 
  int value;
  #line 1035 
  if (reg == 3) 
                #line 1036 
                return 51474;
  #line 1038 
  r8168dp_2_mdio_start(tp);
  #line 1040 
  value = r8169_mdio_read(tp,reg);
  #line 1042 
  r8168dp_2_mdio_stop(tp);
  #line 1044 
  return value;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_writephy(struct rtl8169_private *tp, int location, int val)
{
  #line 1049 
  switch ((unsigned int)tp->mac_version) {
    #line 1050 
    case (unsigned int)25: 
                           #line 1050 
    ;
    #line 1051 
    r8168dp_1_mdio_write(tp,location,val);
    #line 1052 
    break;
    #line 1053 
    case (unsigned int)26: 
                           #line 1053 
    ;
    #line 1054 
    case (unsigned int)29: 
                           #line 1054 
    ;
    #line 1055 
    r8168dp_2_mdio_write(tp,location,val);
    #line 1056 
    break;
    #line 1057 
    case 38U: 
              #line 1057 
    case 39U: 
              #line 1057 
    case 40U: 
              #line 1057 
    case 41U: 
              #line 1057 
    case 42U: 
              #line 1057 
    case 43U: 
              #line 1057 
    case 44U: 
              #line 1057 
    case 45U: 
              #line 1057 
    case 46U: 
              #line 1057 
    case 47U: 
              #line 1057 
    case 48U: 
              #line 1057 
    case 49U: 
              #line 1057 
    case 50U: 
              #line 1057 
    case 51U: 
              #line 1057 
    case 52U: 
              #line 1057 
    ;
    #line 1058 
    r8168g_mdio_write(tp,location,val);
    #line 1059 
    break;
    #line 1060 
    default: 
             #line 1060 
    ;
    #line 1061 
    r8169_mdio_write(tp,location,val);
    #line 1062 
    break;
  }
  #line 1064 
  return;
}

#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_readphy(struct rtl8169_private *tp, int location)
{
  #line 1068 
  switch ((unsigned int)tp->mac_version) {
    #line 1069 
    case (unsigned int)25: 
                           #line 1069 
    ;
    #line 1070 
    return r8168dp_1_mdio_read(tp,location);
    #line 1071 
    case (unsigned int)26: 
                           #line 1071 
    ;
    #line 1072 
    case (unsigned int)29: 
                           #line 1072 
    ;
    #line 1073 
    return r8168dp_2_mdio_read(tp,location);
    #line 1074 
    case 38U: 
              #line 1074 
    case 39U: 
              #line 1074 
    case 40U: 
              #line 1074 
    case 41U: 
              #line 1074 
    case 42U: 
              #line 1074 
    case 43U: 
              #line 1074 
    case 44U: 
              #line 1074 
    case 45U: 
              #line 1074 
    case 46U: 
              #line 1074 
    case 47U: 
              #line 1074 
    case 48U: 
              #line 1074 
    case 49U: 
              #line 1074 
    case 50U: 
              #line 1074 
    case 51U: 
              #line 1074 
    case 52U: 
              #line 1074 
    ;
    #line 1075 
    return r8168g_mdio_read(tp,location);
    #line 1076 
    default: 
             #line 1076 
    ;
    #line 1077 
    return r8169_mdio_read(tp,location);
  }
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_patchphy(struct rtl8169_private *tp, int reg_addr, int value)
{
  #line 1083 
  ;
  #line 1083 
  ;
  #line 1083 
  ;
  #line 1083 
  rtl_writephy(tp,reg_addr,rtl_readphy(tp,reg_addr) | value);
  #line 1084 
  return;
}

#line 1086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_w0w1_phy(struct rtl8169_private *tp, int reg_addr, int p, int m)
{
  #line 1088 
  int val;
  #line 1090 
  val = rtl_readphy(tp,reg_addr);
  #line 1091 
  rtl_writephy(tp,reg_addr,(~ m & val) | p);
  #line 1092 
  return;
}

#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168d_modify_extpage(struct phy_device *phydev, int extpage, int reg, u16 mask, u16 val)
{
  #line 1097 
  int oldpage = phy_select_page(phydev,7);
  #line 1099 
  __phy_write(phydev,30U,(unsigned short)((int)((unsigned short)extpage)));
  #line 1100 
  __phy_modify(phydev,(unsigned int)reg,(unsigned short)((int)mask),(unsigned short)((int)val));
  #line 1102 
  phy_restore_page(phydev,oldpage,0);
  #line 1103 
  return;
}

#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168d_phy_param(struct phy_device *phydev, u16 parm, u16 mask, u16 val)
{
  #line 1108 
  int oldpage = phy_select_page(phydev,5);
  #line 1110 
  __phy_write(phydev,5U,(unsigned short)((int)parm));
  #line 1111 
  __phy_modify(phydev,6U,(unsigned short)((int)mask),(unsigned short)((int)val));
  #line 1113 
  phy_restore_page(phydev,oldpage,0);
  #line 1114 
  return;
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168g_phy_param(struct phy_device *phydev, u16 parm, u16 mask, u16 val)
{
  #line 1119 
  int oldpage = phy_select_page(phydev,2627);
  #line 1121 
  __phy_write(phydev,19U,(unsigned short)((int)parm));
  #line 1122 
  __phy_modify(phydev,20U,(unsigned short)((int)mask),(unsigned short)((int)val));
  #line 1124 
  phy_restore_page(phydev,oldpage,0);
  #line 1125 
  return;
}

#line 1127 
#line 1127 
static bool rtl_ephyar_cond_check(struct rtl8169_private *tp);
#line 1127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_ephyar_cond = {.check = & rtl_ephyar_cond_check, .msg = (char *)"rtl_ephyar_cond"};
#line 1127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_ephyar_cond_check(struct rtl8169_private *tp)
{
  #line 1129 
  return (_Bool)((readl(tp->mmio_addr + 128U) & 2147483648U) != 0U);
}

#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_ephy_write(struct rtl8169_private *tp, int reg_addr, int value)
{
  #line 1134 
  writel((((unsigned int)value & 65535U) | ((unsigned int)(reg_addr << 16) & 2031616U)) | 2147483648U,tp->mmio_addr + 128U);
  #line 1137 
  rtl_udelay_loop_wait_low(tp,& rtl_ephyar_cond,10U,100);
  #line 1139 
  __const_udelay(42950UL);
  #line 1141 
  return;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u16 rtl_ephy_read(struct rtl8169_private *tp, int reg_addr)
{
  #line 1147 
  unsigned int tmp_1;
  #line 1144 
  writel((unsigned int)(reg_addr << 16) & 2031616U,tp->mmio_addr + 128U);
  #line 1147 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_ephyar_cond,10U,100) != 0) {
    #line 1147 
    tmp_1 = (unsigned int)((unsigned short)readl(tp->mmio_addr + 128U));
  }
  else 
       #line 1147 
       tmp_1 = 65535U;
  #line 1147 
  return (unsigned short)tmp_1;
}

#line 1150 
#line 1150 
static bool rtl_eriar_cond_check(struct rtl8169_private *tp);
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_eriar_cond = {.check = & rtl_eriar_cond_check, .msg = (char *)"rtl_eriar_cond"};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_eriar_cond_check(struct rtl8169_private *tp)
{
  #line 1152 
  return (_Bool)((readl(tp->mmio_addr + 116U) & 2147483648U) != 0U);
}

#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void _rtl_eri_write(struct rtl8169_private *tp, int addr, u32 mask, u32 val, int type)
{
  #line 1158 
  if ((long)((addr & 3) != 0) != 0L || (long)(mask == 0U) != 0L) {
    #line 1159 
    ldv_inline_asm();
    #line 1160 
    ldv_inline_asm();
    #line 1161 
    ldv_inline_asm();
    #line 1158 
    ;
  }
  #line 1159 
  writel(val,tp->mmio_addr + 112U);
  #line 1160 
  writel((((unsigned int)type | mask) | (unsigned int)addr) | 2147483648U,tp->mmio_addr + 116U);
  #line 1162 
  rtl_udelay_loop_wait_low(tp,& rtl_eriar_cond,100U,100);
  #line 1163 
  return;
}

#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_eri_write(struct rtl8169_private *tp, int addr, u32 mask, u32 val)
{
  #line 1168 
  _rtl_eri_write(tp,addr,mask,val,0);
  #line 1169 
  return;
}

#line 1171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u32 _rtl_eri_read(struct rtl8169_private *tp, int addr, int type)
{
  #line 1176 
  unsigned int tmp_1;
  #line 1173 
  writel((unsigned int)((type | 61440) | addr),tp->mmio_addr + 116U);
  #line 1176 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_eriar_cond,100U,100) != 0) 
    #line 1176 
    tmp_1 = readl(tp->mmio_addr + 112U); else 
                                              #line 1176 
                                              tmp_1 = 4294967295U;
  #line 1176 
  return tmp_1;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u32 rtl_eri_read(struct rtl8169_private *tp, int addr)
{
  #line 1181 
  return _rtl_eri_read(tp,addr,0);
}

#line 1184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_w0w1_eri(struct rtl8169_private *tp, int addr, u32 mask, u32 p, u32 m)
{
  #line 1187 
  u32 val;
  #line 1189 
  val = rtl_eri_read(tp,addr);
  #line 1190 
  rtl_eri_write(tp,addr,mask,(~ m & val) | p);
  #line 1191 
  return;
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_eri_set_bits(struct rtl8169_private *tp, int addr, u32 mask, u32 p)
{
  #line 1196 
  rtl_w0w1_eri(tp,addr,mask,p,0U);
  #line 1197 
  return;
}

#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_eri_clear_bits(struct rtl8169_private *tp, int addr, u32 mask, u32 m)
{
  #line 1202 
  rtl_w0w1_eri(tp,addr,mask,0U,m);
  #line 1203 
  return;
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u32 r8168dp_ocp_read(struct rtl8169_private *tp, u8 mask, u16 reg)
{
  #line 1209 
  unsigned int tmp_1;
  #line 1207 
  writel((((unsigned int)mask << 12) & 65535U) | ((unsigned int)reg & 4095U),tp->mmio_addr + 180U);
  #line 1209 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_ocpar_cond,100U,20) != 0) 
    #line 1209 
    tmp_1 = readl(tp->mmio_addr + 176U); else 
                                              #line 1209 
                                              tmp_1 = 4294967295U;
  #line 1209 
  return tmp_1;
}

#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u32 r8168ep_ocp_read(struct rtl8169_private *tp, u8 mask, u16 reg)
{
  #line 1214 
  return _rtl_eri_read(tp,(int)reg,131072);
}

#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_ocp_write(struct rtl8169_private *tp, u8 mask, u16 reg, u32 data)
{
  #line 1220 
  writel(data,tp->mmio_addr + 176U);
  #line 1221 
  writel(((((unsigned int)mask << 12) & 65535U) | ((unsigned int)reg & 4095U)) | 2147483648U,tp->mmio_addr + 180U);
  #line 1222 
  rtl_udelay_loop_wait_low(tp,& rtl_ocpar_cond,100U,20);
  #line 1223 
  return;
}

#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168ep_ocp_write(struct rtl8169_private *tp, u8 mask, u16 reg, u32 data)
{
  #line 1228 
  _rtl_eri_write(tp,(int)reg,((unsigned int)mask << 12) & 65535U,data,131072);
  #line 1229 
  return;
}

#line 1232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_oob_notify(struct rtl8169_private *tp, u8 cmd)
{
  #line 1234 
  rtl_eri_write(tp,232,4096U,(unsigned int)cmd);
  #line 1236 
  r8168dp_ocp_write(tp,(unsigned char)1,(unsigned short)48,1U);
  #line 1237 
  return;
}

#line 1243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u16 rtl8168_get_ocp_reg(struct rtl8169_private *tp)
{
  #line 1245 
  unsigned int tmp;
  #line 1245 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_31) 
                                                            #line 1245 
                                                            tmp = 184U; else 
                                                                    #line 1245 
                                                                    tmp = 16U;
  #line 1245 
  return (unsigned short)tmp;
}

#line 1248 
#line 1248 
static bool rtl_dp_ocp_read_cond_check(struct rtl8169_private *tp);
#line 1248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_dp_ocp_read_cond = {.check = & rtl_dp_ocp_read_cond_check, .msg = (char *)"rtl_dp_ocp_read_cond"};
#line 1248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_dp_ocp_read_cond_check(struct rtl8169_private *tp)
{
  #line 1250 
  u16 reg;
  #line 1252 
  reg = rtl8168_get_ocp_reg(tp);
  #line 1254 
  return (_Bool)((r8168dp_ocp_read(tp,(unsigned char)15,(unsigned short)((int)reg)) & 2048U) != 0U);
}

#line 1257 
#line 1257 
static bool rtl_ep_ocp_read_cond_check(struct rtl8169_private *tp);
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_ep_ocp_read_cond = {.check = & rtl_ep_ocp_read_cond_check, .msg = (char *)"rtl_ep_ocp_read_cond"};
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_ep_ocp_read_cond_check(struct rtl8169_private *tp)
{
  #line 1259 
  return (_Bool)((r8168ep_ocp_read(tp,(unsigned char)15,(unsigned short)292) & 1U) != 0U);
}

#line 1262 
#line 1262 
static bool rtl_ocp_tx_cond_check(struct rtl8169_private *tp);
#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_ocp_tx_cond = {.check = & rtl_ocp_tx_cond_check, .msg = (char *)"rtl_ocp_tx_cond"};
#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_ocp_tx_cond_check(struct rtl8169_private *tp)
{
  #line 1264 
  return (_Bool)(((int)readb(tp->mmio_addr + 251U) & 32) != 0);
}

#line 1267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168ep_stop_cmac(struct rtl8169_private *tp)
{
  #line 1269 
  ;
  #line 1269 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 249U) & 254),tp->mmio_addr + 249U);
  #line 1270 
  rtl_msleep_loop_wait_high(tp,& rtl_ocp_tx_cond,50U,2000);
  #line 1271 
  ;
  #line 1271 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 251U) | 32U)),tp->mmio_addr + 251U);
  #line 1272 
  ;
  #line 1272 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 248U) & 254),tp->mmio_addr + 248U);
  #line 1273 
  return;
}

#line 1275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168dp_driver_start(struct rtl8169_private *tp)
{
  #line 1277 
  r8168dp_oob_notify(tp,(unsigned char)5);
  #line 1278 
  rtl_msleep_loop_wait_high(tp,& rtl_dp_ocp_read_cond,10U,10);
  #line 1279 
  return;
}

#line 1281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168ep_driver_start(struct rtl8169_private *tp)
{
  #line 1283 
  r8168ep_ocp_write(tp,(unsigned char)1,(unsigned short)384,5U);
  #line 1284 
  ;
  #line 1284 
  r8168ep_ocp_write(tp,(unsigned char)1,(unsigned short)48,r8168ep_ocp_read(tp,(unsigned char)1,(unsigned short)48) | 1U);
  #line 1286 
  rtl_msleep_loop_wait_high(tp,& rtl_ep_ocp_read_cond,10U,10);
  #line 1287 
  return;
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168_driver_start(struct rtl8169_private *tp)
{
  #line 1291 
  switch ((unsigned int)tp->mac_version) {
    #line 1292 
    case (unsigned int)25: 
                           #line 1292 
    ;
    #line 1293 
    case (unsigned int)26: 
                           #line 1293 
    ;
    #line 1294 
    case (unsigned int)29: 
                           #line 1294 
    ;
    #line 1295 
    rtl8168dp_driver_start(tp);
    #line 1296 
    break;
    #line 1297 
    case 47U: 
              #line 1297 
    case 48U: 
              #line 1297 
    case 49U: 
              #line 1297 
    case 50U: 
              #line 1297 
    ;
    #line 1298 
    rtl8168ep_driver_start(tp);
    #line 1299 
    break;
    #line 1300 
    default: 
             #line 1300 
    ;
    #line 1302 
    ldv_inline_asm();
    #line 1303 
    ldv_inline_asm();
    #line 1304 
    ldv_inline_asm();
    #line 1301 
    ;
    #line 1302 
    break;
  }
  #line 1304 
  return;
}

#line 1306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168dp_driver_stop(struct rtl8169_private *tp)
{
  #line 1308 
  r8168dp_oob_notify(tp,(unsigned char)6);
  #line 1309 
  rtl_msleep_loop_wait_low(tp,& rtl_dp_ocp_read_cond,10U,10);
  #line 1310 
  return;
}

#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168ep_driver_stop(struct rtl8169_private *tp)
{
  #line 1314 
  rtl8168ep_stop_cmac(tp);
  #line 1315 
  r8168ep_ocp_write(tp,(unsigned char)1,(unsigned short)384,6U);
  #line 1316 
  ;
  #line 1316 
  r8168ep_ocp_write(tp,(unsigned char)1,(unsigned short)48,r8168ep_ocp_read(tp,(unsigned char)1,(unsigned short)48) | 1U);
  #line 1318 
  rtl_msleep_loop_wait_low(tp,& rtl_ep_ocp_read_cond,10U,10);
  #line 1319 
  return;
}

#line 1321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168_driver_stop(struct rtl8169_private *tp)
{
  #line 1323 
  switch ((unsigned int)tp->mac_version) {
    #line 1324 
    case (unsigned int)25: 
                           #line 1324 
    ;
    #line 1325 
    case (unsigned int)26: 
                           #line 1325 
    ;
    #line 1326 
    case (unsigned int)29: 
                           #line 1326 
    ;
    #line 1327 
    rtl8168dp_driver_stop(tp);
    #line 1328 
    break;
    #line 1329 
    case 47U: 
              #line 1329 
    case 48U: 
              #line 1329 
    case 49U: 
              #line 1329 
    case 50U: 
              #line 1329 
    ;
    #line 1330 
    rtl8168ep_driver_stop(tp);
    #line 1331 
    break;
    #line 1332 
    default: 
             #line 1332 
    ;
    #line 1334 
    ldv_inline_asm();
    #line 1335 
    ldv_inline_asm();
    #line 1336 
    ldv_inline_asm();
    #line 1333 
    ;
    #line 1334 
    break;
  }
  #line 1336 
  return;
}

#line 1338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool r8168dp_check_dash(struct rtl8169_private *tp)
{
  #line 1340 
  u16 reg = rtl8168_get_ocp_reg(tp);
  #line 1342 
  return (_Bool)((r8168dp_ocp_read(tp,(unsigned char)15,(unsigned short)((int)reg)) & 32768U) != 0U);
}

#line 1345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool r8168ep_check_dash(struct rtl8169_private *tp)
{
  #line 1347 
  return (_Bool)((r8168ep_ocp_read(tp,(unsigned char)15,(unsigned short)296) & 1U) != 0U);
}

#line 1350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool r8168_check_dash(struct rtl8169_private *tp)
{
  #line 1352 
  switch ((unsigned int)tp->mac_version) {
    #line 1353 
    case (unsigned int)25: 
                           #line 1353 
    ;
    #line 1354 
    case (unsigned int)26: 
                           #line 1354 
    ;
    #line 1355 
    case (unsigned int)29: 
                           #line 1355 
    ;
    #line 1356 
    return r8168dp_check_dash(tp);
    #line 1357 
    case 47U: 
              #line 1357 
    case 48U: 
              #line 1357 
    case 49U: 
              #line 1357 
    case 50U: 
              #line 1357 
    ;
    #line 1358 
    return r8168ep_check_dash(tp);
    #line 1359 
    default: 
             #line 1359 
    ;
    #line 1360 
    return (_Bool)0;
  }
}

#line 1364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_reset_packet_filter(struct rtl8169_private *tp)
{
  #line 1366 
  rtl_eri_clear_bits(tp,220,4096U,1U);
  #line 1367 
  rtl_eri_set_bits(tp,220,4096U,1U);
  #line 1368 
  return;
}

#line 1370 
#line 1370 
static bool rtl_efusear_cond_check(struct rtl8169_private *tp);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_efusear_cond = {.check = & rtl_efusear_cond_check, .msg = (char *)"rtl_efusear_cond"};
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_efusear_cond_check(struct rtl8169_private *tp)
{
  #line 1372 
  return (_Bool)((readl(tp->mmio_addr + 220U) & 2147483648U) != 0U);
}

#line 1375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u8 rtl8168d_efuse_read(struct rtl8169_private *tp, int reg_addr)
{
  #line 1380 
  unsigned int tmp_1;
  #line 1377 
  writel((unsigned int)(reg_addr << 8) & 261888U,tp->mmio_addr + 220U);
  #line 1380 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_efusear_cond,100U,300) != 0) {
    #line 1380 
    tmp_1 = (unsigned int)((unsigned char)readl(tp->mmio_addr + 220U));
  }
  else 
       #line 1380 
       tmp_1 = 255U;
  #line 1380 
  return (unsigned char)tmp_1;
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u32 rtl_get_events(struct rtl8169_private *tp)
{
  #line 1385 
  if ((int)rtl_is_8125(tp) != 0) {
    #line 1386 
    return readl(tp->mmio_addr + 60U);
  }
  else {
    #line 1388 
    return (unsigned int)readw(tp->mmio_addr + 62U);
  }
}

#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_ack_events(struct rtl8169_private *tp, u32 bits)
{
  #line 1393 
  if ((int)rtl_is_8125(tp) != 0) 
                                 #line 1394 
                                 writel(bits,tp->mmio_addr + 60U); else 
                                                                    #line 1396 
                                                                    writew((unsigned short)((int)((unsigned short)bits)),tp->mmio_addr + 62U);
  #line 1397 
  return;
}

#line 1399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_irq_disable(struct rtl8169_private *tp)
{
  #line 1401 
  if ((int)rtl_is_8125(tp) != 0) 
                                 #line 1402 
                                 writel(0U,tp->mmio_addr + 56U); else 
                                                                   #line 1404 
                                                                   writew((unsigned short)0,tp->mmio_addr + 60U);
  #line 1405 
  tp->irq_enabled = (unsigned int)0U;
  #line 1406 
  return;
}

#line 1412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_irq_enable(struct rtl8169_private *tp)
{
  #line 1414 
  tp->irq_enabled = (unsigned int)1U;
  #line 1415 
  if ((int)rtl_is_8125(tp) != 0) 
                                 #line 1416 
                                 writel(tp->irq_mask,tp->mmio_addr + 56U); else 
                                                                    #line 1418 
                                                                    writew((unsigned short)((int)((unsigned short)tp->irq_mask)),tp->mmio_addr + 60U);
  #line 1419 
  return;
}

#line 1421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_irq_mask_and_ack(struct rtl8169_private *tp)
{
  #line 1423 
  rtl_irq_disable(tp);
  #line 1424 
  rtl_ack_events(tp,4294967295U);
  #line 1426 
  readb(tp->mmio_addr + 55U);
  #line 1427 
  return;
}

#line 1429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_link_chg_patch(struct rtl8169_private *tp)
{
  #line 1431 
  struct net_device *dev = tp->dev;
  #line 1432 
  struct phy_device *phydev = tp->phydev;
  #line 1434 
  if (! netif_running(dev)) 
                            #line 1435 
                            return;
  #line 1437 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_34 || tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_38) {
    #line 1439 
    if (phydev->speed == 1000) {
      #line 1440 
      rtl_eri_write(tp,444,61440U,17U);
      #line 1441 
      rtl_eri_write(tp,476,61440U,5U);
    }
    else 
      #line 1442 
      if (phydev->speed == 100) {
        #line 1443 
        rtl_eri_write(tp,444,61440U,31U);
        #line 1444 
        rtl_eri_write(tp,476,61440U,5U);
      }
      else {
        #line 1446 
        rtl_eri_write(tp,444,61440U,31U);
        #line 1447 
        rtl_eri_write(tp,476,61440U,63U);
      }
    #line 1449 
    rtl_reset_packet_filter(tp);
  }
  else 
    #line 1450 
    if ((unsigned int)tp->mac_version + 4294967263U <= 1U) 
      #line 1452 
      if (phydev->speed == 1000) {
        #line 1453 
        rtl_eri_write(tp,444,61440U,17U);
        #line 1454 
        rtl_eri_write(tp,476,61440U,5U);
      }
      else {
        #line 1456 
        rtl_eri_write(tp,444,61440U,31U);
        #line 1457 
        rtl_eri_write(tp,476,61440U,63U);
      }
    else 
      #line 1459 
      if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_37) 
        #line 1460 
        if (phydev->speed == 10) {
          #line 1461 
          rtl_eri_write(tp,464,12288U,19714U);
          #line 1462 
          rtl_eri_write(tp,476,12288U,1546U);
        }
        else 
             #line 1464 
             rtl_eri_write(tp,464,12288U,0U);
  #line 1465 
  return;
}

#line 1471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 1473 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1475 
  rtl_lock_work(tp);
  #line 1476 
  wol->supported = 47U;
  #line 1477 
  wol->wolopts = tp->saved_wolopts;
  #line 1478 
  rtl_unlock_work(tp);
  #line 1479 
  return;
}

#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void __rtl8169_set_wol(struct rtl8169_private *tp, u32 wolopts)
{
  #line 1495 
  unsigned int i;
  #line 1496 
  u8 options;
  #line 1487 
  struct __anonstruct_cfg_1319 cfg[6U] = {{.opt = 1U, .reg = (unsigned short)84U, .mask = (unsigned char)16U}, {.opt = 2U, .reg = (unsigned short)86U, .mask = (unsigned char)16U}, {.opt = 8U, .reg = (unsigned short)86U, .mask = (unsigned char)64U}, {.opt = 4U, .reg = (unsigned short)86U, .mask = (unsigned char)32U}, {.opt = 47U, .reg = (unsigned short)86U, .mask = (unsigned char)2U}, {.opt = 32U, .reg = (unsigned short)84U, .mask = (unsigned char)32U}};
  #line 1495 
  unsigned int tmp = 6U;
  #line 1498 
  rtl_unlock_config_regs(tp);
  #line 1500 
  if ((int)rtl_is_8168evl_up(tp) != 0) {
    #line 1501 
    tmp --;
    #line 1502 
    if ((wolopts & 32U) != 0U) 
                               #line 1503 
                               rtl_eri_set_bits(tp,220,16384U,65536U); else 
                                                                    #line 1506 
                                                                    rtl_eri_clear_bits(tp,220,16384U,65536U);
  }
  else {
    #line 1508 
    if ((int)rtl_is_8125(tp) != 0) {
      #line 1509 
      tmp --;
      #line 1510 
      if ((wolopts & 32U) != 0U) 
                                 #line 1511 
                                 r8168_mac_ocp_modify(tp,49334U,(unsigned short)0,(unsigned short)1); else 
                                                                    #line 1513 
                                                                    r8168_mac_ocp_modify(tp,49334U,(unsigned short)1,(unsigned short)0);
    }
  }
  #line 1516 
  i = 0U;
  #line 1516 
  while (i < tmp) {
    {
      #line 1517 
      options = (unsigned char)((int)readb(tp->mmio_addr + (unsigned long)cfg[i].reg) & ~ ((int)cfg[i].mask));
      #line 1518 
      if ((cfg[i].opt & wolopts) != 0U) 
                                        #line 1519 
                                        options = (unsigned char)((int)cfg[i].mask | (int)options);
      #line 1520 
      writeb((unsigned char)((int)options),tp->mmio_addr + (unsigned long)cfg[i].reg);
    }
    #line 1516 
    i ++;
  }
  #line 1523 
  switch ((unsigned int)tp->mac_version) {
    #line 1524 
    case 0U: 
             #line 1524 
    case 1U: 
             #line 1524 
    case 2U: 
             #line 1524 
    case 3U: 
             #line 1524 
    case 4U: 
             #line 1524 
    ;
    #line 1525 
    options = (unsigned char)((unsigned int)readb(tp->mmio_addr + 82U) & 254U);
    #line 1526 
    if (wolopts != 0U) 
                       #line 1527 
                       options = (unsigned char)((unsigned int)options | 1U);
    #line 1528 
    writeb((unsigned char)((int)options),tp->mmio_addr + 82U);
    #line 1529 
    break;
    #line 1530 
    case (unsigned int)32: 
                           #line 1530 
    ;
    #line 1531 
    case (unsigned int)35: 
                           #line 1531 
    ;
    #line 1532 
    case 37U: 
              #line 1532 
    case 38U: 
              #line 1532 
    case 39U: 
              #line 1532 
    case 40U: 
              #line 1532 
    case 41U: 
              #line 1532 
    case 42U: 
              #line 1532 
    case 43U: 
              #line 1532 
    case 44U: 
              #line 1532 
    case 45U: 
              #line 1532 
    case 46U: 
              #line 1532 
    case 47U: 
              #line 1532 
    case 48U: 
              #line 1532 
    case 49U: 
              #line 1532 
    case 50U: 
              #line 1532 
    ;
    #line 1533 
    options = (unsigned char)((unsigned int)readb(tp->mmio_addr + 83U) & 223U);
    #line 1534 
    if (wolopts != 0U) 
                       #line 1535 
                       options = (unsigned char)((unsigned int)options | 32U);
    #line 1536 
    writeb((unsigned char)((int)options),tp->mmio_addr + 83U);
    #line 1537 
    break;
    #line 1538 
    default: 
             #line 1538 
    ;
    #line 1539 
    break;
  }
  #line 1542 
  rtl_lock_config_regs(tp);
  #line 1544 
  ;
  #line 1544 
  device_set_wakeup_enable(tp_to_dev(tp),(_Bool)(wolopts != 0U));
  #line 1545 
  (tp->dev)->wol_enabled = (unsigned int)(wolopts != 0U);
  #line 1546 
  return;
}

#line 1548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 1550 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1551 
  struct device *d = tp_to_dev(tp);
  #line 1553 
  if ((wol->wolopts & 4294967248U) != 0U) 
                                          #line 1554 
                                          return -22;
  #line 1556 
  pm_runtime_get_noresume(d);
  #line 1558 
  rtl_lock_work(tp);
  #line 1560 
  tp->saved_wolopts = wol->wolopts;
  #line 1562 
  if ((int)cif_pm_runtime_active(d) != 0) 
                                          #line 1563 
                                          __rtl8169_set_wol(tp,tp->saved_wolopts);
  #line 1565 
  rtl_unlock_work(tp);
  #line 1567 
  pm_runtime_put_noidle(d);
  #line 1569 
  return 0;
}

#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 1575 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1576 
  struct rtl_fw *rtl_fw = tp->rtl_fw;
  #line 1578 
  strlcpy((char *)(& info->driver),(char *)"r8169",32UL);
  #line 1579 
  ;
  #line 1579 
  strlcpy((char *)(& info->bus_info),pci_name(tp->pci_dev),32UL);
  #line 1581 
  if (rtl_fw != (struct rtl_fw *)0) 
                                    #line 1582 
                                    strlcpy((char *)(& info->fw_version),(char *)(& rtl_fw->version),32UL);
  #line 1583 
  return;
}

#line 1586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_get_regs_len(struct net_device *dev)
{
  #line 1588 
  return 256;
}

#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static netdev_features_t rtl8169_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 1594 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1596 
  if (dev->mtu > 2047U) 
                        #line 1597 
                        features &= 18446744073707651071ULL;
  #line 1599 
  if (dev->mtu > 1500U && tp->mac_version > (unsigned int)RTL_GIGA_MAC_VER_06) 
    #line 1601 
    features &= 18446744073707651045ULL;
  #line 1603 
  return features;
}

#line 1606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 1610 
  u32 rx_config;
  #line 1609 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1612 
  rtl_lock_work(tp);
  #line 1614 
  rx_config = readl(tp->mmio_addr + 68U);
  #line 1615 
  if ((features & 8796093022208ULL) != 0ULL) 
                                             #line 1616 
                                             rx_config |= 48U; else 
                                                                    #line 1618 
                                                                    rx_config &= 4294967247U;
  #line 1620 
  if ((int)rtl_is_8125(tp) != 0) 
    #line 1621 
    if ((features & 256ULL) != 0ULL) 
                                     #line 1622 
                                     rx_config |= 12582912U; else 
                                                                  #line 1624 
                                                                  rx_config &= 4282384383U;
  #line 1627 
  writel(rx_config,tp->mmio_addr + 68U);
  #line 1629 
  if ((features & 549755813888ULL) != 0ULL) 
                                            #line 1630 
                                            tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd | 32U); else 
                                                                    #line 1632 
                                                                    tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd & 65503U);
  #line 1634 
  if (! rtl_is_8125(tp)) 
    #line 1635 
    if ((features & 256ULL) != 0ULL) 
                                     #line 1636 
                                     tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd | 64U); else 
                                                                    #line 1638 
                                                                    tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd & 65471U);
  #line 1641 
  writew((unsigned short)((int)tp->cp_cmd),tp->mmio_addr + 224U);
  #line 1642 
  readw(tp->mmio_addr + 224U);
  #line 1644 
  rtl_unlock_work(tp);
  #line 1646 
  return 0;
}

#line 1649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
__inline static u32 rtl8169_tx_vlan_tag(struct sk_buff *skb)
{
  #line 1652 
  unsigned int tmp_0;
  #line 1652 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1652 
    tmp_0 = (unsigned int)((int)__builtin_bswap16((unsigned short)((int)skb->vlan_tci)) | 131072);
  }
  else 
       #line 1652 
       tmp_0 = 0U;
  #line 1652 
  return tmp_0;
}

#line 1655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_rx_vlan_tag(struct RxDesc *desc, struct sk_buff *skb)
{
  #line 1657 
  u32 opts2 = desc->opts2;
  #line 1659 
  if ((opts2 & 65536U) != 0U) {
    #line 1660 
    ;
    #line 1660 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)((unsigned short)opts2)))));
  }
  #line 1661 
  return;
}

#line 1663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *p)
{
  #line 1669 
  int i;
  #line 1666 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1667 
  u32 *data = (u32 *)tp->mmio_addr;
  #line 1668 
  u32 *dw = (u32 *)p;
  #line 1671 
  rtl_lock_work(tp);
  #line 1672 
  i = 0;
  #line 1672 
  while (i <= 255) {
    #line 1673 
    u32 *tmp_0;
    #line 1673 
    u32 *tmp_1;
    #line 1673 
    tmp_0 = data;
    #line 1673 
    data ++;
    #line 1673 
    ;
    #line 1673 
    tmp_1 = dw;
    #line 1673 
    dw ++;
    #line 1673 
    ;
    #line 1673 
    memcpy_fromio((void *)tmp_1,(void *)tmp_0,4UL);
    #line 1672 
    i += 4;
  }
  #line 1674 
  rtl_unlock_work(tp);
  #line 1675 
  return;
}

#line 1677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u32 rtl8169_get_msglevel(struct net_device *dev)
{
  #line 1679 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1681 
  return tp->msg_enable;
}

#line 1684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_set_msglevel(struct net_device *dev, u32 value)
{
  #line 1686 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1688 
  tp->msg_enable = value;
  #line 1689 
  return;
}

#line 1691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static char rtl8169_gstrings[13U][32U] = {{(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d'}, {(char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, {(char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d'}, {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}};
#line 1707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_get_sset_count(struct net_device *dev, int sset)
{
  #line 1709 
  switch (sset) {
    #line 1710 
    case 1: 
            #line 1710 
    ;
    #line 1711 
    return 13;
    #line 1712 
    default: 
             #line 1712 
    ;
    #line 1713 
    return -95;
  }
}

#line 1717 
#line 1717 
static bool rtl_counters_cond_check(struct rtl8169_private *tp);
#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_counters_cond = {.check = & rtl_counters_cond_check, .msg = (char *)"rtl_counters_cond"};
#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_counters_cond_check(struct rtl8169_private *tp)
{
  #line 1719 
  return (_Bool)((readl(tp->mmio_addr + 16U) & 9U) != 0U);
}

#line 1722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl8169_do_counters(struct rtl8169_private *tp, u32 counter_cmd)
{
  #line 1725 
  u32 cmd;
  #line 1724 
  dma_addr_t paddr = tp->counters_phys_addr;
  #line 1727 
  writel((unsigned int)(paddr >> 32),tp->mmio_addr + 20U);
  #line 1728 
  readl(tp->mmio_addr + 20U);
  #line 1729 
  cmd = (unsigned int)paddr;
  #line 1730 
  writel(cmd,tp->mmio_addr + 16U);
  #line 1731 
  writel(cmd | counter_cmd,tp->mmio_addr + 16U);
  #line 1733 
  return rtl_udelay_loop_wait_low(tp,& rtl_counters_cond,10U,1000);
}

#line 1736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl8169_reset_counters(struct rtl8169_private *tp)
{
  #line 1742 
  if (tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_18) 
                                                            #line 1743 
                                                            return (_Bool)1;
  #line 1745 
  return rtl8169_do_counters(tp,1U);
}

#line 1748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl8169_update_counters(struct rtl8169_private *tp)
{
  #line 1750 
  u8 val = readb(tp->mmio_addr + 55U);
  #line 1756 
  if (((int)val & 8) == 0 || (unsigned int)val == 255U) 
                                                        #line 1757 
                                                        return (_Bool)1;
  #line 1759 
  return rtl8169_do_counters(tp,8U);
}

#line 1762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl8169_init_counter_offsets(struct rtl8169_private *tp)
{
  #line 1764 
  struct rtl8169_counters *counters = tp->counters;
  #line 1765 
  bool ret = (_Bool)0;
  #line 1782 
  if ((int)tp->tc_offset.inited != 0) 
                                      #line 1783 
                                      return (_Bool)1;
  #line 1786 
  if ((int)rtl8169_reset_counters(tp) != 0) 
                                            #line 1787 
                                            ret = (_Bool)1;
  #line 1789 
  if ((int)rtl8169_update_counters(tp) != 0) 
                                             #line 1790 
                                             ret = (_Bool)1;
  #line 1792 
  tp->tc_offset.tx_errors = counters->tx_errors;
  #line 1793 
  tp->tc_offset.tx_multi_collision = counters->tx_multi_collision;
  #line 1794 
  tp->tc_offset.tx_aborted = counters->tx_aborted;
  #line 1795 
  tp->tc_offset.inited = (_Bool)1;
  #line 1797 
  return ret;
}

#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 1803 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1804 
  struct device *d = tp_to_dev(tp);
  #line 1805 
  struct rtl8169_counters *counters = tp->counters;
  {
    #line 1807 
    bool __warned;
    #line 1807 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 1807 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1807 
      __warned = (_Bool)1;
      {
        #line 1807 
        int __ret_warn_on = 1;
        #line 1807 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1807 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c",1807);
          #line 1808 
          ldv_inline_asm();
          #line 1809 
          ldv_inline_asm();
        }
        #line 1807 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1807 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1809 
  pm_runtime_get_noresume(d);
  #line 1811 
  if ((int)cif_pm_runtime_active(d) != 0) 
                                          #line 1812 
                                          rtl8169_update_counters(tp);
  #line 1814 
  pm_runtime_put_noidle(d);
  #line 1816 
  *data = counters->tx_packets;
  #line 1817 
  *(data + 1U) = counters->rx_packets;
  #line 1818 
  *(data + 2U) = counters->tx_errors;
  #line 1819 
  *(data + 3U) = (unsigned long long)counters->rx_errors;
  #line 1820 
  *(data + 4U) = (unsigned long long)counters->rx_missed;
  #line 1821 
  *(data + 5U) = (unsigned long long)counters->align_errors;
  #line 1822 
  *(data + 6U) = (unsigned long long)counters->tx_one_collision;
  #line 1823 
  *(data + 7U) = (unsigned long long)counters->tx_multi_collision;
  #line 1824 
  *(data + 8U) = counters->rx_unicast;
  #line 1825 
  *(data + 9U) = counters->rx_broadcast;
  #line 1826 
  *(data + 10U) = (unsigned long long)counters->rx_multicast;
  #line 1827 
  *(data + 11U) = (unsigned long long)counters->tx_aborted;
  #line 1828 
  *(data + 12U) = (unsigned long long)counters->tx_underun;
  #line 1829 
  return;
}

#line 1831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 1833 
  switch (stringset) {
    #line 1834 
    case (u32)1: 
                 #line 1834 
    ;
    #line 1835 
    memcpy((void *)data,(void *)(& rtl8169_gstrings),416UL);
    #line 1836 
    break;
  }
  #line 1838 
  return;
}

#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_coalesce_info rtl_coalesce_info_8169[4U] = {{.speed = 10U, .scalev = {{.nsecs = {40960U, 40960U}}, {.nsecs = {327680U, 327680U}}, {.nsecs = {655360U, 655360U}}, {.nsecs = {1310720U, 1310720U}}}}, {.speed = 100U, .scalev = {{.nsecs = {2560U, 2560U}}, {.nsecs = {20480U, 20480U}}, {.nsecs = {40960U, 40960U}}, {.nsecs = {81920U, 81920U}}}}, {.speed = 1000U, .scalev = {{.nsecs = {320U, 320U}}, {.nsecs = {2560U, 2560U}}, {.nsecs = {5120U, 5120U}}, {.nsecs = {10240U, 10240U}}}}};
#line 1895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_coalesce_info rtl_coalesce_info_8168_8136[4U] = {{.speed = 10U, .scalev = {{.nsecs = {40960U, 40960U}}, {.nsecs = {327680U, 327680U}}, {.nsecs = {655360U, 655360U}}, {.nsecs = {1310720U, 1310720U}}}}, {.speed = 100U, .scalev = {{.nsecs = {2560U, 2560U}}, {.nsecs = {20480U, 20480U}}, {.nsecs = {40960U, 40960U}}, {.nsecs = {81920U, 81920U}}}}, {.speed = 1000U, .scalev = {{.nsecs = {5000U, 5000U}}, {.nsecs = {40000U, 40000U}}, {.nsecs = {80000U, 80000U}}, {.nsecs = {160000U, 160000U}}}}};
#line 1905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_coalesce_info *rtl_coalesce_info(struct net_device *dev)
{
  #line 1908 
  struct rtl_coalesce_info *ci;
  #line 1907 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1910 
  if (tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_06) 
                                                            #line 1911 
                                                            ci = (struct rtl_coalesce_info *)(& rtl_coalesce_info_8169); else 
                                                                    #line 1913 
                                                                    ci = (struct rtl_coalesce_info *)(& rtl_coalesce_info_8168_8136);
  #line 1915 
  while (ci->speed != 0U) {
    #line 1916 
    if ((tp->phydev)->speed == (int)ci->speed) 
                                               #line 1917 
                                               return ci;
    #line 1915 
    ci ++;
  }
  #line 1920 
  return (struct rtl_coalesce_info *)ERR_PTR(-48L);
}

#line 1923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_get_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 1926 
  struct rtl_coalesce_info *ci;
  #line 1927 
  struct rtl_coalesce_scale *scale;
  #line 1935 
  int i;
  #line 1936 
  u16 w;
  #line 1925 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 1931 
  struct __anonstruct_coal_settings_1322 coal_settings[2U] = {{.max_frames = & ec->rx_max_coalesced_frames, .usecs = & ec->rx_coalesce_usecs}, {.max_frames = & ec->tx_max_coalesced_frames, .usecs = & ec->tx_coalesce_usecs}};
  #line 1931 
  struct __anonstruct_p_1323 *p = (struct __anonstruct_p_1323 *)(& coal_settings);
  #line 1938 
  if ((int)rtl_is_8125(tp) != 0) 
                                 #line 1939 
                                 return -95;
  #line 1941 
  memset((void *)ec,0,92UL);
  #line 1944 
  ci = rtl_coalesce_info(dev);
  #line 1945 
  if ((int)IS_ERR((void *)ci) != 0) {
    #line 1946 
    return (int)PTR_ERR((void *)ci);
  }
  #line 1948 
  scale = & ci->scalev[(unsigned long)tp->cp_cmd & 3UL];
  #line 1951 
  w = readw(tp->mmio_addr + 226U);
  #line 1951 
  while ((unsigned int)w != 0U) {
    #line 1952 
    *(p->max_frames) = (unsigned int)((int)w << 2) & 60U;
    #line 1953 
    w = (unsigned short)((int)w >> 4);
    #line 1954 
    *(p->usecs) = (unsigned int)w & 15U;
    #line 1951 
    w = (unsigned short)((int)w >> 4);
    #line 1951 
    p ++;
  }
  #line 1957 
  i = 0;
  #line 1957 
  while (i <= 1) {
    #line 1958 
    p = (struct __anonstruct_p_1323 *)((struct __anonstruct_1328 *)(& coal_settings) + (unsigned long)i);
    #line 1959 
    *(p->usecs) = (*(p->usecs) * scale->nsecs[i]) / 1000U;
    #line 1965 
    if (*(p->usecs) == 0U && *(p->max_frames) == 0U) 
                                                     #line 1966 
                                                     *(p->max_frames) = 1U;
    #line 1957 
    i ++;
  }
  #line 1969 
  return 0;
}

#line 1973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_coalesce_scale *rtl_coalesce_choose_scale(struct net_device *dev, u32 nsec, u16 *cp01)
{
  #line 1976 
  struct rtl_coalesce_info *ci;
  #line 1977 
  u16 i;
  #line 1979 
  ci = rtl_coalesce_info(dev);
  #line 1980 
  if ((int)IS_ERR((void *)ci) != 0) {
    #line 1981 
    return (struct rtl_coalesce_scale *)ERR_CAST((void *)ci);
  }
  #line 1983 
  i = (unsigned short)0U;
  #line 1983 
  while ((unsigned int)i <= 3U) {
    {
      #line 1984 
      u32 __UNIQUE_ID___x569;
      #line 1984 
      u32 tmp_1;
      {
        #line 1984 
        __UNIQUE_ID___x569 = ci->scalev[(int)i].nsecs[0];
        #line 1984 
        u32 __UNIQUE_ID___y570 = ci->scalev[(int)i].nsecs[1];
        #line 1984 
        if (__UNIQUE_ID___x569 > __UNIQUE_ID___y570) 
                                                     #line 1984 
                                                     tmp_1 = __UNIQUE_ID___x569; else 
                                                                    #line 1984 
                                                                    tmp_1 = __UNIQUE_ID___y570;
        }
      #line 1984 
      u32 rxtx_maxscale = tmp_1;
      #line 1986 
      if (rxtx_maxscale * 15U >= nsec) {
        #line 1987 
        *cp01 = i;
        #line 1988 
        return & ci->scalev[(int)i];
      }
    }
    #line 1983 
    i = (u16)((int)i + 1);
  }
  #line 1992 
  return (struct rtl_coalesce_scale *)ERR_PTR(-22L);
}

#line 1995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_set_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 2013 
  u32 __UNIQUE_ID___x571;
  #line 2013 
  u32 tmp_1;
  #line 1998 
  struct rtl_coalesce_scale *scale;
  #line 2006 
  u16 cp01;
  #line 2007 
  int i;
  #line 1997 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 2002 
  struct __anonstruct_coal_settings_1330 coal_settings[2U] = {{.frames = ec->rx_max_coalesced_frames, .usecs = ec->rx_coalesce_usecs}, {.frames = ec->tx_max_coalesced_frames, .usecs = ec->tx_coalesce_usecs}};
  #line 2002 
  struct __anonstruct_p_1331 *p = (struct __anonstruct_p_1331 *)(& coal_settings);
  #line 2006 
  u16 w = (unsigned short)0U;
  #line 2009 
  if ((int)rtl_is_8125(tp) != 0) 
                                 #line 2010 
                                 return -95;
  {
    #line 2013 
    __UNIQUE_ID___x571 = p->usecs;
    #line 2013 
    u32 __UNIQUE_ID___y572 = (p + 1U)->usecs;
    #line 2013 
    if (__UNIQUE_ID___x571 > __UNIQUE_ID___y572) 
                                                 #line 2013 
                                                 tmp_1 = __UNIQUE_ID___x571; else 
                                                                    #line 2013 
                                                                    tmp_1 = __UNIQUE_ID___y572;
    }
  #line 2012 
  ;
  #line 2012 
  scale = rtl_coalesce_choose_scale(dev,tmp_1 * 1000U,& cp01);
  #line 2014 
  if ((int)IS_ERR((void *)scale) != 0) {
    #line 2015 
    return (int)PTR_ERR((void *)scale);
  }
  #line 2017 
  i = 0;
  #line 2017 
  while (i <= 1) {
    {
      #line 2018 
      u32 units;
      #line 2032 
      if (p->frames == 1U) 
                           #line 2033 
                           p->frames = 0U;
      #line 2036 
      units = (p->usecs * 1000U) / scale->nsecs[i];
      #line 2037 
      if (p->frames > 60U || (p->frames & 3U) != 0U) 
                                                     #line 2038 
                                                     return -22;
      #line 2040 
      w = (unsigned short)((int)w << 4U);
      #line 2041 
      w = (unsigned short)((int)((unsigned short)units) | (int)w);
      #line 2042 
      w = (unsigned short)((int)w << 4U);
      #line 2043 
      w = (unsigned short)((int)((unsigned short)(p->frames >> 2)) | (int)w);
    }
    #line 2017 
    i ++;
    #line 2017 
    p ++;
  }
  #line 2046 
  rtl_lock_work(tp);
  #line 2048 
  ;
  #line 2048 
  writew((unsigned short)((int)__builtin_bswap16((unsigned short)((int)w))),tp->mmio_addr + 226U);
  #line 2050 
  tp->cp_cmd = (unsigned short)(((unsigned int)tp->cp_cmd & 65532U) | (unsigned int)cp01);
  #line 2051 
  writew((unsigned short)((int)tp->cp_cmd),tp->mmio_addr + 224U);
  #line 2052 
  readw(tp->mmio_addr + 224U);
  #line 2054 
  rtl_unlock_work(tp);
  #line 2056 
  return 0;
}

#line 2059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_get_eee(struct net_device *dev, struct ethtool_eee *data)
{
  #line 2063 
  int ret;
  #line 2061 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 2062 
  struct device *d = tp_to_dev(tp);
  #line 2065 
  if (! rtl_supports_eee(tp)) 
                              #line 2066 
                              return -95;
  #line 2068 
  pm_runtime_get_noresume(d);
  #line 2070 
  if (cif_pm_runtime_active(d)) 
                                #line 2073 
                                ret = phy_ethtool_get_eee(tp->phydev,data); else 
                                                                    #line 2071 
                                                                    ret = -95;
  #line 2076 
  pm_runtime_put_noidle(d);
  #line 2078 
  return ret;
}

#line 2081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_set_eee(struct net_device *dev, struct ethtool_eee *data)
{
  #line 2085 
  int ret;
  #line 2083 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 2084 
  struct device *d = tp_to_dev(tp);
  #line 2087 
  if (! rtl_supports_eee(tp)) 
                              #line 2088 
                              return -95;
  #line 2090 
  pm_runtime_get_noresume(d);
  #line 2092 
  if (! cif_pm_runtime_active(d)) {
    #line 2093 
    ret = -95;
    #line 2094 
    goto out;
  }
  #line 2097 
  if ((unsigned int)(dev->phydev)->autoneg == 0U || (dev->phydev)->duplex != 1) {
    #line 2099 
    ret = -93;
    #line 2100 
    goto out;
  }
  #line 2103 
  ret = phy_ethtool_set_eee(tp->phydev,data);
  #line 2105 
  if (ret == 0) 
                #line 2106 
                tp->eee_adv = phy_read_mmd(dev->phydev,7,60U);
  #line 2108 
  out: 
       #line 2108 
  ;
  #line 2109 
  pm_runtime_put_noidle(d);
  #line 2110 
  return ret;
}

#line 2113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct ethtool_ops rtl8169_ethtool_ops = {.get_drvinfo = & rtl8169_get_drvinfo, .get_regs_len = & rtl8169_get_regs_len, .get_regs = & rtl8169_get_regs, .get_wol = & rtl8169_get_wol, .set_wol = & rtl8169_set_wol, .get_msglevel = & rtl8169_get_msglevel, .set_msglevel = & rtl8169_set_msglevel, .nway_reset = & phy_ethtool_nway_reset, .get_link = & ethtool_op_get_link, .get_coalesce = & rtl_get_coalesce, .set_coalesce = & rtl_set_coalesce, .get_strings = & rtl8169_get_strings, .get_ethtool_stats = & rtl8169_get_ethtool_stats, .get_sset_count = & rtl8169_get_sset_count, .get_ts_info = & ethtool_op_get_ts_info, .get_eee = & rtl8169_get_eee, .set_eee = & rtl8169_set_eee, .get_link_ksettings = & phy_ethtool_get_link_ksettings, .set_link_ksettings = & phy_ethtool_set_link_ksettings};
#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_enable_eee(struct rtl8169_private *tp)
{
  #line 2138 
  int adv;
  #line 2137 
  struct phy_device *phydev = tp->phydev;
  #line 2141 
  if (tp->eee_adv >= 0) 
                        #line 2142 
                        adv = tp->eee_adv; else 
                                                #line 2144 
                                                adv = phy_read_mmd(phydev,3,20U);
  #line 2146 
  if (adv >= 0) 
                #line 2147 
                phy_write_mmd(phydev,7,60U,(unsigned short)((int)((unsigned short)adv)));
  #line 2148 
  return;
}

#line 2150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_get_mac_version(struct rtl8169_private *tp)
{
  #line 2167 
  struct rtl_mac_info mac_info[55U] = {{.mask = (unsigned short)1999U, .val = (unsigned short)1544U, .mac_version = (unsigned short)51U}, {.mask = (unsigned short)1992U, .val = (unsigned short)1544U, .mac_version = (unsigned short)52U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1354U, .mac_version = (unsigned short)50U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1282U, .mac_version = (unsigned short)49U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1281U, .mac_version = (unsigned short)48U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1280U, .mac_version = (unsigned short)47U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1345U, .mac_version = (unsigned short)44U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1344U, .mac_version = (unsigned short)43U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1480U, .mac_version = (unsigned short)42U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1289U, .mac_version = (unsigned short)40U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1217U, .mac_version = (unsigned short)39U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1216U, .mac_version = (unsigned short)38U}, {.mask = (unsigned short)1992U, .val = (unsigned short)1160U, .mac_version = (unsigned short)36U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1153U, .mac_version = (unsigned short)34U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1152U, .mac_version = (unsigned short)33U}, {.mask = (unsigned short)1992U, .val = (unsigned short)712U, .mac_version = (unsigned short)32U}, {.mask = (unsigned short)1999U, .val = (unsigned short)705U, .mac_version = (unsigned short)30U}, {.mask = (unsigned short)1992U, .val = (unsigned short)704U, .mac_version = (unsigned short)31U}, {.mask = (unsigned short)1999U, .val = (unsigned short)641U, .mac_version = (unsigned short)23U}, {.mask = (unsigned short)1992U, .val = (unsigned short)640U, .mac_version = (unsigned short)24U}, {.mask = (unsigned short)1999U, .val = (unsigned short)648U, .mac_version = (unsigned short)25U}, {.mask = (unsigned short)1999U, .val = (unsigned short)650U, .mac_version = (unsigned short)26U}, {.mask = (unsigned short)1999U, .val = (unsigned short)651U, .mac_version = (unsigned short)29U}, {.mask = (unsigned short)1999U, .val = (unsigned short)969U, .mac_version = (unsigned short)21U}, {.mask = (unsigned short)1999U, .val = (unsigned short)968U, .mac_version = (unsigned short)16U}, {.mask = (unsigned short)1992U, .val = (unsigned short)968U, .mac_version = (unsigned short)22U}, {.mask = (unsigned short)1999U, .val = (unsigned short)960U, .mac_version = (unsigned short)17U}, {.mask = (unsigned short)1999U, .val = (unsigned short)962U, .mac_version = (unsigned short)18U}, {.mask = (unsigned short)1999U, .val = (unsigned short)963U, .mac_version = (unsigned short)19U}, {.mask = (unsigned short)1992U, .val = (unsigned short)960U, .mac_version = (unsigned short)20U}, {.mask = (unsigned short)1999U, .val = (unsigned short)896U, .mac_version = (unsigned short)10U}, {.mask = (unsigned short)1992U, .val = (unsigned short)896U, .mac_version = (unsigned short)15U}, {.mask = (unsigned short)1992U, .val = (unsigned short)768U, .mac_version = (unsigned short)9U}, {.mask = (unsigned short)1992U, .val = (unsigned short)1096U, .mac_version = (unsigned short)37U}, {.mask = (unsigned short)1992U, .val = (unsigned short)1088U, .mac_version = (unsigned short)35U}, {.mask = (unsigned short)1999U, .val = (unsigned short)1033U, .mac_version = (unsigned short)27U}, {.mask = (unsigned short)1992U, .val = (unsigned short)1032U, .mac_version = (unsigned short)28U}, {.mask = (unsigned short)1999U, .val = (unsigned short)841U, .mac_version = (unsigned short)6U}, {.mask = (unsigned short)1999U, .val = (unsigned short)585U, .mac_version = (unsigned short)6U}, {.mask = (unsigned short)1999U, .val = (unsigned short)840U, .mac_version = (unsigned short)5U}, {.mask = (unsigned short)1999U, .val = (unsigned short)584U, .mac_version = (unsigned short)5U}, {.mask = (unsigned short)1999U, .val = (unsigned short)832U, .mac_version = (unsigned short)11U}, {.mask = (unsigned short)1999U, .val = (unsigned short)835U, .mac_version = (unsigned short)8U}, {.mask = (unsigned short)1999U, .val = (unsigned short)834U, .mac_version = (unsigned short)14U}, {.mask = (unsigned short)1992U, .val = (unsigned short)840U, .mac_version = (unsigned short)7U}, {.mask = (unsigned short)1992U, .val = (unsigned short)584U, .mac_version = (unsigned short)7U}, {.mask = (unsigned short)1992U, .val = (unsigned short)832U, .mac_version = (unsigned short)14U}, {.mask = (unsigned short)4040U, .val = (unsigned short)904U, .mac_version = (unsigned short)13U}, {.mask = (unsigned short)4040U, .val = (unsigned short)776U, .mac_version = (unsigned short)12U}, {.mask = (unsigned short)4040U, .val = (unsigned short)2432U, .mac_version = (unsigned short)4U}, {.mask = (unsigned short)4040U, .val = (unsigned short)384U, .mac_version = (unsigned short)3U}, {.mask = (unsigned short)4040U, .val = (unsigned short)256U, .mac_version = (unsigned short)2U}, {.mask = (unsigned short)4040U, .val = (unsigned short)64U, .mac_version = (unsigned short)1U}, {.mask = (unsigned short)4040U, .val = (unsigned short)8U, .mac_version = (unsigned short)0U}, {.mask = (unsigned short)0U, .val = (unsigned short)0U, .mac_version = (unsigned short)53U}};
  #line 2252 
  struct rtl_mac_info *p = (struct rtl_mac_info *)(& mac_info);
  #line 2253 
  u16 reg = (unsigned short)(readl(tp->mmio_addr + 64U) >> 20);
  #line 2255 
  while (((int)p->mask & (int)reg) != (int)p->val) 
                                                   #line 2256 
                                                   p ++;
  #line 2257 
  tp->mac_version = (enum mac_version)p->mac_version;
  #line 2259 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_NONE) {
    #line 2260 
    ;
    #line 2260 
    _dev_err(tp_to_dev(tp),(char *)"unknown chip XID %03x\n",(int)reg & 4047);
  }
  else 
    #line 2261 
    if ((unsigned int)tp->supports_gmii == 0U) 
      #line 2262 
      if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_42) 
                                                                #line 2263 
                                                                tp->mac_version = RTL_GIGA_MAC_VER_43;
      else 
        #line 2264 
        if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_45) 
                                                                  #line 2265 
                                                                  tp->mac_version = RTL_GIGA_MAC_VER_47;
        else 
          #line 2266 
          if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_46) 
                                                                    #line 2267 
                                                                    tp->mac_version = RTL_GIGA_MAC_VER_48;
  #line 2268 
  return;
}

#line 2276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void __rtl_writephy_batch(struct rtl8169_private *tp, struct phy_reg *regs, int len)
{
  #line 2279 
  while (1) {
    #line 2279 
    int tmp;
    #line 2279 
    tmp = len;
    #line 2279 
    len --;
    #line 2279 
    ;
    #line 2279 
    if (! (tmp > 0)) 
                     #line 2279 
                     break;
    #line 2280 
    rtl_writephy(tp,(int)regs->reg,(int)regs->val);
    #line 2281 
    regs ++;
  }
  #line 2283 
  return;
}

#line 2287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_release_firmware(struct rtl8169_private *tp)
{
  #line 2289 
  if (tp->rtl_fw != (struct rtl_fw *)0) {
    #line 2290 
    rtl_fw_release_firmware(tp->rtl_fw);
    #line 2291 
    kfree((void *)tp->rtl_fw);
    #line 2292 
    tp->rtl_fw = (struct rtl_fw *)0;
  }
  #line 2294 
  return;
}

#line 2296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_apply_firmware(struct rtl8169_private *tp)
{
  #line 2299 
  if (tp->rtl_fw != (struct rtl_fw *)0) 
                                        #line 2300 
                                        rtl_fw_write_firmware(tp,tp->rtl_fw);
  #line 2301 
  return;
}

#line 2303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168_config_eee_mac(struct rtl8169_private *tp)
{
  #line 2306 
  if (tp->mac_version != (unsigned int)RTL_GIGA_MAC_VER_38) {
    #line 2307 
    ;
    #line 2307 
    writeb((unsigned char)((int)readb(tp->mmio_addr + 27U) & 248),tp->mmio_addr + 27U);
  }
  #line 2309 
  rtl_eri_set_bits(tp,432,61440U,3U);
  #line 2310 
  return;
}

#line 2312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8125_config_eee_mac(struct rtl8169_private *tp)
{
  #line 2314 
  r8168_mac_ocp_modify(tp,57408U,(unsigned short)0,(unsigned short)3);
  #line 2315 
  r8168_mac_ocp_modify(tp,60258U,(unsigned short)0,(unsigned short)6);
  #line 2316 
  return;
}

#line 2318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168f_config_eee_phy(struct rtl8169_private *tp)
{
  #line 2320 
  struct phy_device *phydev = tp->phydev;
  #line 2322 
  r8168d_modify_extpage(phydev,32,21,(unsigned short)0,(unsigned short)256);
  #line 2323 
  r8168d_phy_param(phydev,(unsigned short)35717,(unsigned short)0,(unsigned short)8192);
  #line 2324 
  return;
}

#line 2326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168g_config_eee_phy(struct rtl8169_private *tp)
{
  #line 2328 
  phy_modify_paged(tp->phydev,2627,17U,(unsigned short)0,(unsigned short)16);
  #line 2329 
  return;
}

#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168h_config_eee_phy(struct rtl8169_private *tp)
{
  #line 2333 
  struct phy_device *phydev = tp->phydev;
  #line 2335 
  rtl8168g_config_eee_phy(tp);
  #line 2337 
  phy_modify_paged(phydev,2634,17U,(unsigned short)0,(unsigned short)512);
  #line 2338 
  phy_modify_paged(phydev,2626,20U,(unsigned short)0,(unsigned short)128);
  #line 2339 
  return;
}

#line 2341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8125_config_eee_phy(struct rtl8169_private *tp)
{
  #line 2343 
  struct phy_device *phydev = tp->phydev;
  #line 2345 
  rtl8168h_config_eee_phy(tp);
  #line 2347 
  phy_modify_paged(phydev,2669,18U,(unsigned short)1,(unsigned short)0);
  #line 2348 
  phy_modify_paged(phydev,2669,20U,(unsigned short)16,(unsigned short)0);
  #line 2349 
  return;
}

#line 2351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169s_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2353 
  struct phy_reg phy_reg_init[51U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)6U, .val = (unsigned short)110U}, {.reg = (unsigned short)8U, .val = (unsigned short)1800U}, {.reg = (unsigned short)21U, .val = (unsigned short)16384U}, {.reg = (unsigned short)24U, .val = (unsigned short)26055U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)3U, .val = (unsigned short)161U}, {.reg = (unsigned short)2U, .val = (unsigned short)8U}, {.reg = (unsigned short)1U, .val = (unsigned short)288U}, {.reg = (unsigned short)0U, .val = (unsigned short)4096U}, {.reg = (unsigned short)4U, .val = (unsigned short)2048U}, {.reg = (unsigned short)4U, .val = (unsigned short)0U}, {.reg = (unsigned short)3U, .val = (unsigned short)65345U}, {.reg = (unsigned short)2U, .val = (unsigned short)57184U}, {.reg = (unsigned short)1U, .val = (unsigned short)320U}, {.reg = (unsigned short)0U, .val = (unsigned short)119U}, {.reg = (unsigned short)4U, .val = (unsigned short)30720U}, {.reg = (unsigned short)4U, .val = (unsigned short)28672U}, {.reg = (unsigned short)3U, .val = (unsigned short)32815U}, {.reg = (unsigned short)2U, .val = (unsigned short)20226U}, {.reg = (unsigned short)1U, .val = (unsigned short)1033U}, {.reg = (unsigned short)0U, .val = (unsigned short)61689U}, {.reg = (unsigned short)4U, .val = (unsigned short)38912U}, {.reg = (unsigned short)4U, .val = (unsigned short)36864U}, {.reg = (unsigned short)3U, .val = (unsigned short)57089U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)65429U}, {.reg = (unsigned short)0U, .val = (unsigned short)47616U}, {.reg = (unsigned short)4U, .val = (unsigned short)43008U}, {.reg = (unsigned short)4U, .val = (unsigned short)40960U}, {.reg = (unsigned short)3U, .val = (unsigned short)65345U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)320U}, {.reg = (unsigned short)0U, .val = (unsigned short)187U}, {.reg = (unsigned short)4U, .val = (unsigned short)47104U}, {.reg = (unsigned short)4U, .val = (unsigned short)45056U}, {.reg = (unsigned short)3U, .val = (unsigned short)57153U}, {.reg = (unsigned short)2U, .val = (unsigned short)56416U}, {.reg = (unsigned short)1U, .val = (unsigned short)25408U}, {.reg = (unsigned short)0U, .val = (unsigned short)125U}, {.reg = (unsigned short)4U, .val = (unsigned short)55296U}, {.reg = (unsigned short)4U, .val = (unsigned short)53248U}, {.reg = (unsigned short)3U, .val = (unsigned short)57089U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)4106U}, {.reg = (unsigned short)0U, .val = (unsigned short)41215U}, {.reg = (unsigned short)4U, .val = (unsigned short)63488U}, {.reg = (unsigned short)4U, .val = (unsigned short)61440U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)11U, .val = (unsigned short)0U}, {.reg = (unsigned short)0U, .val = (unsigned short)37376U}};
  #line 2415 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),51);
  #line 2416 
  return;
}

#line 2418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169sb_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2420 
  phy_write_paged(tp->phydev,2,1U,(unsigned short)37072);
  #line 2421 
  return;
}

#line 2423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169scd_hw_phy_config_quirk(struct rtl8169_private *tp)
{
  #line 2425 
  struct pci_dev *pdev = tp->pci_dev;
  #line 2427 
  if ((unsigned int)pdev->subsystem_vendor != 5208U || (unsigned int)pdev->subsystem_device != 57344U) 
    #line 2429 
    return;
  #line 2431 
  phy_write_paged(tp->phydev,1,16U,(unsigned short)61467);
  #line 2432 
  return;
}

#line 2434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169scd_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2436 
  struct phy_reg phy_reg_init[35U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)4U, .val = (unsigned short)0U}, {.reg = (unsigned short)3U, .val = (unsigned short)161U}, {.reg = (unsigned short)2U, .val = (unsigned short)8U}, {.reg = (unsigned short)1U, .val = (unsigned short)288U}, {.reg = (unsigned short)0U, .val = (unsigned short)4096U}, {.reg = (unsigned short)4U, .val = (unsigned short)2048U}, {.reg = (unsigned short)4U, .val = (unsigned short)36864U}, {.reg = (unsigned short)3U, .val = (unsigned short)32815U}, {.reg = (unsigned short)2U, .val = (unsigned short)20226U}, {.reg = (unsigned short)1U, .val = (unsigned short)1033U}, {.reg = (unsigned short)0U, .val = (unsigned short)61593U}, {.reg = (unsigned short)4U, .val = (unsigned short)38912U}, {.reg = (unsigned short)4U, .val = (unsigned short)40960U}, {.reg = (unsigned short)3U, .val = (unsigned short)57089U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)65429U}, {.reg = (unsigned short)0U, .val = (unsigned short)47616U}, {.reg = (unsigned short)4U, .val = (unsigned short)43008U}, {.reg = (unsigned short)4U, .val = (unsigned short)61440U}, {.reg = (unsigned short)3U, .val = (unsigned short)57089U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)4122U}, {.reg = (unsigned short)0U, .val = (unsigned short)41215U}, {.reg = (unsigned short)4U, .val = (unsigned short)63488U}, {.reg = (unsigned short)4U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)16U, .val = (unsigned short)62491U}, {.reg = (unsigned short)20U, .val = (unsigned short)64340U}, {.reg = (unsigned short)24U, .val = (unsigned short)62919U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)23U, .val = (unsigned short)3264U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 2476 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),35);
  #line 2478 
  rtl8169scd_hw_phy_config_quirk(tp);
  #line 2479 
  return;
}

#line 2481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169sce_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2483 
  struct phy_reg phy_reg_init[42U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)4U, .val = (unsigned short)0U}, {.reg = (unsigned short)3U, .val = (unsigned short)161U}, {.reg = (unsigned short)2U, .val = (unsigned short)8U}, {.reg = (unsigned short)1U, .val = (unsigned short)288U}, {.reg = (unsigned short)0U, .val = (unsigned short)4096U}, {.reg = (unsigned short)4U, .val = (unsigned short)2048U}, {.reg = (unsigned short)4U, .val = (unsigned short)36864U}, {.reg = (unsigned short)3U, .val = (unsigned short)32815U}, {.reg = (unsigned short)2U, .val = (unsigned short)20226U}, {.reg = (unsigned short)1U, .val = (unsigned short)1033U}, {.reg = (unsigned short)0U, .val = (unsigned short)61593U}, {.reg = (unsigned short)4U, .val = (unsigned short)38912U}, {.reg = (unsigned short)4U, .val = (unsigned short)40960U}, {.reg = (unsigned short)3U, .val = (unsigned short)57089U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)65429U}, {.reg = (unsigned short)0U, .val = (unsigned short)47616U}, {.reg = (unsigned short)4U, .val = (unsigned short)43008U}, {.reg = (unsigned short)4U, .val = (unsigned short)61440U}, {.reg = (unsigned short)3U, .val = (unsigned short)57089U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)4122U}, {.reg = (unsigned short)0U, .val = (unsigned short)41215U}, {.reg = (unsigned short)4U, .val = (unsigned short)63488U}, {.reg = (unsigned short)4U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)11U, .val = (unsigned short)33920U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)24U, .val = (unsigned short)26567U}, {.reg = (unsigned short)4U, .val = (unsigned short)8192U}, {.reg = (unsigned short)3U, .val = (unsigned short)47U}, {.reg = (unsigned short)2U, .val = (unsigned short)17248U}, {.reg = (unsigned short)1U, .val = (unsigned short)265U}, {.reg = (unsigned short)0U, .val = (unsigned short)12322U}, {.reg = (unsigned short)4U, .val = (unsigned short)10240U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)23U, .val = (unsigned short)3264U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 2531 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),42);
  #line 2532 
  return;
}

#line 2534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168bb_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2536 
  rtl_writephy(tp,31,1);
  #line 2537 
  rtl_patchphy(tp,22,1);
  #line 2538 
  rtl_writephy(tp,16,62491);
  #line 2539 
  rtl_writephy(tp,31,0);
  #line 2540 
  return;
}

#line 2542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168bef_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2544 
  phy_write_paged(tp->phydev,1,16U,(unsigned short)62491);
  #line 2545 
  return;
}

#line 2547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168cp_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2549 
  phy_write(tp->phydev,29U,(unsigned short)3840);
  #line 2550 
  phy_write_paged(tp->phydev,2,12U,(unsigned short)7880);
  #line 2551 
  return;
}

#line 2553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168cp_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2555 
  phy_set_bits(tp->phydev,20U,(unsigned short)32);
  #line 2556 
  phy_set_bits(tp->phydev,13U,(unsigned short)32);
  #line 2557 
  phy_write_paged(tp->phydev,1,29U,(unsigned short)15768);
  #line 2558 
  return;
}

#line 2560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168c_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2562 
  struct phy_reg phy_reg_init[17U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)18U, .val = (unsigned short)8960U}, {.reg = (unsigned short)31U, .val = (unsigned short)2U}, {.reg = (unsigned short)0U, .val = (unsigned short)35028U}, {.reg = (unsigned short)1U, .val = (unsigned short)33457U}, {.reg = (unsigned short)3U, .val = (unsigned short)28674U}, {.reg = (unsigned short)8U, .val = (unsigned short)40496U}, {.reg = (unsigned short)9U, .val = (unsigned short)496U}, {.reg = (unsigned short)10U, .val = (unsigned short)21760U}, {.reg = (unsigned short)12U, .val = (unsigned short)200U}, {.reg = (unsigned short)31U, .val = (unsigned short)3U}, {.reg = (unsigned short)18U, .val = (unsigned short)49302U}, {.reg = (unsigned short)22U, .val = (unsigned short)10U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)9U, .val = (unsigned short)8192U}, {.reg = (unsigned short)9U, .val = (unsigned short)0U}};
  #line 2582 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),17);
  #line 2584 
  rtl_patchphy(tp,20,32);
  #line 2585 
  rtl_patchphy(tp,13,32);
  #line 2586 
  rtl_writephy(tp,31,0);
  #line 2587 
  return;
}

#line 2589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168c_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2591 
  struct phy_reg phy_reg_init[15U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)18U, .val = (unsigned short)8960U}, {.reg = (unsigned short)3U, .val = (unsigned short)32815U}, {.reg = (unsigned short)2U, .val = (unsigned short)20226U}, {.reg = (unsigned short)1U, .val = (unsigned short)1033U}, {.reg = (unsigned short)0U, .val = (unsigned short)61593U}, {.reg = (unsigned short)4U, .val = (unsigned short)38912U}, {.reg = (unsigned short)4U, .val = (unsigned short)36864U}, {.reg = (unsigned short)29U, .val = (unsigned short)15768U}, {.reg = (unsigned short)31U, .val = (unsigned short)2U}, {.reg = (unsigned short)12U, .val = (unsigned short)32440U}, {.reg = (unsigned short)6U, .val = (unsigned short)1889U}, {.reg = (unsigned short)31U, .val = (unsigned short)3U}, {.reg = (unsigned short)22U, .val = (unsigned short)3850U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 2609 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),15);
  #line 2611 
  rtl_patchphy(tp,22,1);
  #line 2612 
  rtl_patchphy(tp,20,32);
  #line 2613 
  rtl_patchphy(tp,13,32);
  #line 2614 
  rtl_writephy(tp,31,0);
  #line 2615 
  return;
}

#line 2617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168c_3_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2619 
  struct phy_reg phy_reg_init[9U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)18U, .val = (unsigned short)8960U}, {.reg = (unsigned short)29U, .val = (unsigned short)15768U}, {.reg = (unsigned short)31U, .val = (unsigned short)2U}, {.reg = (unsigned short)12U, .val = (unsigned short)32440U}, {.reg = (unsigned short)6U, .val = (unsigned short)21601U}, {.reg = (unsigned short)31U, .val = (unsigned short)3U}, {.reg = (unsigned short)22U, .val = (unsigned short)3850U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 2631 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),9);
  #line 2633 
  rtl_patchphy(tp,22,1);
  #line 2634 
  rtl_patchphy(tp,20,32);
  #line 2635 
  rtl_patchphy(tp,13,32);
  #line 2636 
  rtl_writephy(tp,31,0);
  #line 2637 
  return;
}

#line 2639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct phy_reg rtl8168d_1_phy_reg_init_0[26U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)6U, .val = (unsigned short)16484U}, {.reg = (unsigned short)7U, .val = (unsigned short)10339U}, {.reg = (unsigned short)8U, .val = (unsigned short)1436U}, {.reg = (unsigned short)9U, .val = (unsigned short)9908U}, {.reg = (unsigned short)10U, .val = (unsigned short)27161U}, {.reg = (unsigned short)11U, .val = (unsigned short)56520U}, {.reg = (unsigned short)16U, .val = (unsigned short)61549U}, {.reg = (unsigned short)20U, .val = (unsigned short)32616U}, {.reg = (unsigned short)24U, .val = (unsigned short)32729U}, {.reg = (unsigned short)28U, .val = (unsigned short)61695U}, {.reg = (unsigned short)29U, .val = (unsigned short)15772U}, {.reg = (unsigned short)31U, .val = (unsigned short)3U}, {.reg = (unsigned short)18U, .val = (unsigned short)62623U}, {.reg = (unsigned short)19U, .val = (unsigned short)1803U}, {.reg = (unsigned short)26U, .val = (unsigned short)1453U}, {.reg = (unsigned short)20U, .val = (unsigned short)38080U}, {.reg = (unsigned short)31U, .val = (unsigned short)2U}, {.reg = (unsigned short)6U, .val = (unsigned short)21857U}, {.reg = (unsigned short)31U, .val = (unsigned short)5U}, {.reg = (unsigned short)5U, .val = (unsigned short)33586U}, {.reg = (unsigned short)6U, .val = (unsigned short)21857U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)23U, .val = (unsigned short)3264U}, {.reg = (unsigned short)31U}, {.reg = (unsigned short)13U, .val = (unsigned short)63616U}};
#line 2680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct phy_reg rtl8168d_1_phy_reg_init_1[6U] = {{.reg = (unsigned short)31U, .val = (unsigned short)2U}, {.reg = (unsigned short)5U, .val = (unsigned short)26266U}, {.reg = (unsigned short)31U, .val = (unsigned short)5U}, {.reg = (unsigned short)5U, .val = (unsigned short)33584U}, {.reg = (unsigned short)6U, .val = (unsigned short)26266U}, {.reg = (unsigned short)31U, .val = (unsigned short)2U}};
#line 2689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168d_apply_firmware_cond(struct rtl8169_private *tp, u16 val)
{
  #line 2691 
  u16 reg_val;
  #line 2693 
  rtl_writephy(tp,31,5);
  #line 2694 
  rtl_writephy(tp,5,27);
  #line 2695 
  reg_val = (unsigned short)rtl_readphy(tp,6);
  #line 2696 
  rtl_writephy(tp,31,0);
  #line 2698 
  if ((int)reg_val != (int)val) {
    #line 2699 
    if ((tp->msg_enable & 8192U) != 0U) 
                                        #line 2699 
                                        netdev_warn(tp->dev,(char *)"chipset not ready for firmware\n");
  }
  else 
       #line 2701 
       rtl_apply_firmware(tp);
  #line 2702 
  return;
}

#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168d_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2706 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& rtl8168d_1_phy_reg_init_0),26);
  #line 2712 
  rtl_writephy(tp,31,2);
  #line 2713 
  rtl_w0w1_phy(tp,11,16,239);
  #line 2714 
  rtl_w0w1_phy(tp,12,41472,23808);
  #line 2716 
  if ((unsigned int)rtl8168d_efuse_read(tp,1) == 177U) {
    #line 2717 
    int val;
    #line 2719 
    __rtl_writephy_batch(tp,(struct phy_reg *)(& rtl8168d_1_phy_reg_init_1),6);
    #line 2721 
    val = rtl_readphy(tp,13);
    #line 2723 
    if ((val & 255) != 108) {
      #line 2728 
      int i;
      #line 2724 
      u32 set[8U] = {101U, 102U, 103U, 104U, 105U, 106U, 107U, 108U};
      #line 2730 
      rtl_writephy(tp,31,2);
      #line 2732 
      val &= 65280;
      #line 2733 
      i = 0;
      #line 2733 
      while ((unsigned int)i <= 7U) {
        #line 2734 
        rtl_writephy(tp,13,(int)(set[i] | (unsigned int)val));
        #line 2733 
        i ++;
      }
    }
  }
  else {
    #line 2737 
    phy_write_paged(tp->phydev,2,5U,(unsigned short)26210);
    #line 2738 
    r8168d_phy_param(tp->phydev,(unsigned short)33584,(unsigned short)65535,(unsigned short)26210);
  }
  #line 2742 
  rtl_writephy(tp,31,2);
  #line 2743 
  rtl_patchphy(tp,13,768);
  #line 2744 
  rtl_patchphy(tp,15,16);
  #line 2747 
  rtl_writephy(tp,31,2);
  #line 2748 
  rtl_w0w1_phy(tp,2,256,1536);
  #line 2749 
  rtl_w0w1_phy(tp,3,0,57344);
  #line 2750 
  rtl_writephy(tp,31,0);
  #line 2752 
  rtl8168d_apply_firmware_cond(tp,(unsigned short)48896);
  #line 2753 
  return;
}

#line 2755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168d_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2757 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& rtl8168d_1_phy_reg_init_0),26);
  #line 2759 
  if ((unsigned int)rtl8168d_efuse_read(tp,1) == 177U) {
    #line 2760 
    int val;
    #line 2762 
    __rtl_writephy_batch(tp,(struct phy_reg *)(& rtl8168d_1_phy_reg_init_1),6);
    #line 2764 
    val = rtl_readphy(tp,13);
    #line 2765 
    if ((val & 255) != 108) {
      #line 2770 
      int i;
      #line 2766 
      u32 set[8U] = {101U, 102U, 103U, 104U, 105U, 106U, 107U, 108U};
      #line 2772 
      rtl_writephy(tp,31,2);
      #line 2774 
      val &= 65280;
      #line 2775 
      i = 0;
      #line 2775 
      while ((unsigned int)i <= 7U) {
        #line 2776 
        rtl_writephy(tp,13,(int)(set[i] | (unsigned int)val));
        #line 2775 
        i ++;
      }
    }
  }
  else {
    #line 2779 
    phy_write_paged(tp->phydev,2,5U,(unsigned short)9794);
    #line 2780 
    r8168d_phy_param(tp->phydev,(unsigned short)33584,(unsigned short)65535,(unsigned short)9794);
  }
  #line 2784 
  rtl_writephy(tp,31,2);
  #line 2785 
  rtl_w0w1_phy(tp,2,256,1536);
  #line 2786 
  rtl_w0w1_phy(tp,3,0,57344);
  #line 2789 
  rtl_writephy(tp,31,2);
  #line 2790 
  rtl_patchphy(tp,15,23);
  #line 2791 
  rtl_writephy(tp,31,0);
  #line 2793 
  rtl8168d_apply_firmware_cond(tp,(unsigned short)45824);
  #line 2794 
  return;
}

#line 2796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168d_3_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2798 
  struct phy_reg phy_reg_init[44U] = {{.reg = (unsigned short)31U, .val = (unsigned short)2U}, {.reg = (unsigned short)16U, .val = (unsigned short)8U}, {.reg = (unsigned short)13U, .val = (unsigned short)108U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)13U, .val = (unsigned short)63616U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)23U, .val = (unsigned short)3264U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)11U, .val = (unsigned short)42200U}, {.reg = (unsigned short)9U, .val = (unsigned short)10268U}, {.reg = (unsigned short)7U, .val = (unsigned short)10371U}, {.reg = (unsigned short)10U, .val = (unsigned short)27445U}, {.reg = (unsigned short)29U, .val = (unsigned short)15780U}, {.reg = (unsigned short)28U, .val = (unsigned short)61437U}, {.reg = (unsigned short)20U, .val = (unsigned short)32594U}, {.reg = (unsigned short)24U, .val = (unsigned short)32710U}, {.reg = (unsigned short)8U, .val = (unsigned short)1537U}, {.reg = (unsigned short)6U, .val = (unsigned short)16483U}, {.reg = (unsigned short)16U, .val = (unsigned short)61556U}, {.reg = (unsigned short)31U, .val = (unsigned short)3U}, {.reg = (unsigned short)19U, .val = (unsigned short)1929U}, {.reg = (unsigned short)18U, .val = (unsigned short)62653U}, {.reg = (unsigned short)26U, .val = (unsigned short)1277U}, {.reg = (unsigned short)20U, .val = (unsigned short)33968U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}, {.reg = (unsigned short)0U, .val = (unsigned short)37376U}, {.reg = (unsigned short)31U, .val = (unsigned short)5U}, {.reg = (unsigned short)1U, .val = (unsigned short)832U}, {.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)4U, .val = (unsigned short)16384U}, {.reg = (unsigned short)3U, .val = (unsigned short)7457U}, {.reg = (unsigned short)2U, .val = (unsigned short)3122U}, {.reg = (unsigned short)1U, .val = (unsigned short)512U}, {.reg = (unsigned short)0U, .val = (unsigned short)21844U}, {.reg = (unsigned short)4U, .val = (unsigned short)18432U}, {.reg = (unsigned short)4U, .val = (unsigned short)16384U}, {.reg = (unsigned short)4U, .val = (unsigned short)61440U}, {.reg = (unsigned short)3U, .val = (unsigned short)57089U}, {.reg = (unsigned short)2U, .val = (unsigned short)57120U}, {.reg = (unsigned short)1U, .val = (unsigned short)4122U}, {.reg = (unsigned short)0U, .val = (unsigned short)41215U}, {.reg = (unsigned short)4U, .val = (unsigned short)63488U}, {.reg = (unsigned short)4U, .val = (unsigned short)61440U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 2849 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),44);
  #line 2851 
  r8168d_modify_extpage(tp->phydev,35,22,(unsigned short)65535,(unsigned short)0);
  #line 2852 
  return;
}

#line 2854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168d_4_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2856 
  phy_write_paged(tp->phydev,1,23U,(unsigned short)3264);
  #line 2857 
  r8168d_modify_extpage(tp->phydev,45,24,(unsigned short)65535,(unsigned short)64);
  #line 2858 
  phy_set_bits(tp->phydev,13U,(unsigned short)32);
  #line 2859 
  return;
}

#line 2861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168e_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2863 
  struct phy_reg phy_reg_init[7U] = {{.reg = (unsigned short)31U, .val = (unsigned short)1U}, {.reg = (unsigned short)11U, .val = (unsigned short)27680U}, {.reg = (unsigned short)7U, .val = (unsigned short)10354U}, {.reg = (unsigned short)28U, .val = (unsigned short)61439U}, {.reg = (unsigned short)31U, .val = (unsigned short)3U}, {.reg = (unsigned short)20U, .val = (unsigned short)25632U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 2873 
  struct phy_device *phydev = tp->phydev;
  #line 2875 
  rtl_apply_firmware(tp);
  #line 2878 
  r8168d_phy_param(phydev,(unsigned short)35712,(unsigned short)65535,(unsigned short)51350);
  #line 2880 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),7);
  #line 2883 
  r8168d_modify_extpage(phydev,47,21,(unsigned short)65535,(unsigned short)6425);
  #line 2885 
  r8168d_modify_extpage(phydev,172,24,(unsigned short)65535,(unsigned short)6);
  #line 2888 
  r8168d_modify_extpage(phydev,35,23,(unsigned short)0,(unsigned short)6);
  #line 2891 
  phy_modify_paged(phydev,2,8U,(unsigned short)32512,(unsigned short)32768);
  #line 2894 
  r8168d_modify_extpage(phydev,45,24,(unsigned short)0,(unsigned short)80);
  #line 2895 
  phy_set_bits(phydev,20U,(unsigned short)32768);
  #line 2897 
  r8168d_phy_param(phydev,(unsigned short)35718,(unsigned short)0,(unsigned short)1);
  #line 2898 
  r8168d_phy_param(phydev,(unsigned short)35717,(unsigned short)8192,(unsigned short)0);
  #line 2900 
  r8168d_modify_extpage(phydev,32,21,(unsigned short)4352,(unsigned short)0);
  #line 2901 
  phy_write_paged(phydev,6,0U,(unsigned short)23040);
  #line 2903 
  phy_write_mmd(phydev,7,60U,(unsigned short)0);
  #line 2904 
  return;
}

#line 2906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_rar_exgmac_set(struct rtl8169_private *tp, u8 *addr)
{
  #line 2908 
  u16 w[3U] = {(unsigned short)((int)*addr | ((int)*(addr + 1U) << 8)), (unsigned short)((int)*(addr + 2U) | ((int)*(addr + 3U) << 8)), (unsigned short)((int)*(addr + 4U) | ((int)*(addr + 5U) << 8))};
  #line 2914 
  rtl_eri_write(tp,224,61440U,(unsigned int)((int)w[0] | ((int)w[1] << 16)));
  #line 2915 
  rtl_eri_write(tp,228,61440U,(unsigned int)w[2]);
  #line 2916 
  rtl_eri_write(tp,240,61440U,(unsigned int)((int)w[0] << 16));
  #line 2917 
  rtl_eri_write(tp,244,61440U,(unsigned int)((int)w[1] | ((int)w[2] << 16)));
  #line 2918 
  return;
}

#line 2920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168e_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2922 
  struct phy_device *phydev = tp->phydev;
  #line 2924 
  rtl_apply_firmware(tp);
  #line 2927 
  r8168d_modify_extpage(phydev,172,24,(unsigned short)65535,(unsigned short)6);
  #line 2930 
  phy_write_paged(phydev,3,9U,(unsigned short)41487);
  #line 2933 
  r8168d_phy_param(phydev,(unsigned short)35675,(unsigned short)65535,(unsigned short)37410);
  #line 2934 
  r8168d_phy_param(phydev,(unsigned short)35693,(unsigned short)65535,(unsigned short)32768);
  #line 2935 
  r8168d_phy_param(phydev,(unsigned short)35702,(unsigned short)65535,(unsigned short)32768);
  #line 2938 
  rtl_writephy(tp,31,5);
  #line 2939 
  rtl_writephy(tp,5,35712);
  #line 2940 
  rtl_w0w1_phy(tp,23,6,0);
  #line 2941 
  rtl_writephy(tp,31,0);
  #line 2944 
  r8168d_modify_extpage(phydev,45,24,(unsigned short)0,(unsigned short)16);
  #line 2945 
  phy_set_bits(phydev,20U,(unsigned short)32768);
  #line 2948 
  r8168d_phy_param(phydev,(unsigned short)35718,(unsigned short)0,(unsigned short)1);
  #line 2951 
  r8168d_phy_param(phydev,(unsigned short)35717,(unsigned short)0,(unsigned short)16384);
  #line 2953 
  rtl8168f_config_eee_phy(tp);
  #line 2954 
  rtl_enable_eee(tp);
  #line 2957 
  rtl_writephy(tp,31,3);
  #line 2958 
  rtl_w0w1_phy(tp,25,1,0);
  #line 2959 
  rtl_w0w1_phy(tp,16,1024,0);
  #line 2960 
  rtl_writephy(tp,31,0);
  #line 2961 
  rtl_writephy(tp,31,5);
  #line 2962 
  rtl_w0w1_phy(tp,1,256,0);
  #line 2963 
  rtl_writephy(tp,31,0);
  #line 2966 
  rtl_rar_exgmac_set(tp,(tp->dev)->dev_addr);
  #line 2967 
  return;
}

#line 2969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168f_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2971 
  struct phy_device *phydev = tp->phydev;
  #line 2974 
  r8168d_phy_param(phydev,(unsigned short)35712,(unsigned short)0,(unsigned short)6);
  #line 2977 
  r8168d_modify_extpage(phydev,45,24,(unsigned short)0,(unsigned short)16);
  #line 2978 
  phy_set_bits(phydev,20U,(unsigned short)32768);
  #line 2981 
  r8168d_phy_param(phydev,(unsigned short)35718,(unsigned short)0,(unsigned short)1);
  #line 2983 
  rtl8168f_config_eee_phy(tp);
  #line 2984 
  rtl_enable_eee(tp);
  #line 2985 
  return;
}

#line 2987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168f_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 2989 
  struct phy_device *phydev = tp->phydev;
  #line 2991 
  rtl_apply_firmware(tp);
  #line 2994 
  phy_write_paged(phydev,3,9U,(unsigned short)41487);
  #line 2997 
  r8168d_phy_param(phydev,(unsigned short)35669,(unsigned short)65535,(unsigned short)0);
  #line 2998 
  r8168d_phy_param(phydev,(unsigned short)35678,(unsigned short)65535,(unsigned short)0);
  #line 2999 
  r8168d_phy_param(phydev,(unsigned short)35687,(unsigned short)65535,(unsigned short)0);
  #line 3000 
  r8168d_phy_param(phydev,(unsigned short)35696,(unsigned short)65535,(unsigned short)0);
  #line 3001 
  r8168d_modify_extpage(phydev,120,23,(unsigned short)65535,(unsigned short)0);
  #line 3002 
  r8168d_modify_extpage(phydev,120,25,(unsigned short)65535,(unsigned short)251);
  #line 3005 
  r8168d_phy_param(phydev,(unsigned short)35705,(unsigned short)65535,(unsigned short)43520);
  #line 3008 
  phy_write_paged(phydev,3,1U,(unsigned short)12938);
  #line 3010 
  rtl8168f_hw_phy_config(tp);
  #line 3013 
  r8168d_phy_param(phydev,(unsigned short)35717,(unsigned short)0,(unsigned short)16384);
  #line 3014 
  return;
}

#line 3016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168f_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3018 
  rtl_apply_firmware(tp);
  #line 3020 
  rtl8168f_hw_phy_config(tp);
  #line 3021 
  return;
}

#line 3023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8411_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3025 
  struct phy_device *phydev = tp->phydev;
  #line 3027 
  rtl_apply_firmware(tp);
  #line 3029 
  rtl8168f_hw_phy_config(tp);
  #line 3032 
  r8168d_phy_param(phydev,(unsigned short)35717,(unsigned short)0,(unsigned short)16384);
  #line 3035 
  phy_write_paged(phydev,3,9U,(unsigned short)41487);
  #line 3038 
  r8168d_phy_param(phydev,(unsigned short)35669,(unsigned short)65535,(unsigned short)0);
  #line 3039 
  r8168d_phy_param(phydev,(unsigned short)35678,(unsigned short)65535,(unsigned short)0);
  #line 3040 
  r8168d_phy_param(phydev,(unsigned short)35687,(unsigned short)65535,(unsigned short)0);
  #line 3041 
  r8168d_phy_param(phydev,(unsigned short)35696,(unsigned short)65535,(unsigned short)0);
  #line 3042 
  r8168d_modify_extpage(phydev,120,23,(unsigned short)65535,(unsigned short)0);
  #line 3043 
  r8168d_modify_extpage(phydev,120,25,(unsigned short)65535,(unsigned short)170);
  #line 3046 
  r8168d_phy_param(phydev,(unsigned short)35705,(unsigned short)65535,(unsigned short)43520);
  #line 3049 
  phy_write_paged(phydev,3,1U,(unsigned short)12938);
  #line 3052 
  r8168d_phy_param(phydev,(unsigned short)35668,(unsigned short)2048,(unsigned short)0);
  #line 3053 
  r8168d_phy_param(phydev,(unsigned short)35677,(unsigned short)2048,(unsigned short)0);
  #line 3054 
  r8168d_phy_param(phydev,(unsigned short)35452,(unsigned short)256,(unsigned short)0);
  #line 3055 
  r8168d_phy_param(phydev,(unsigned short)35455,(unsigned short)0,(unsigned short)256);
  #line 3056 
  r8168d_phy_param(phydev,(unsigned short)35458,(unsigned short)256,(unsigned short)0);
  #line 3057 
  r8168d_phy_param(phydev,(unsigned short)35461,(unsigned short)256,(unsigned short)0);
  #line 3058 
  r8168d_phy_param(phydev,(unsigned short)35464,(unsigned short)256,(unsigned short)0);
  #line 3061 
  r8168d_phy_param(phydev,(unsigned short)35717,(unsigned short)0,(unsigned short)32768);
  #line 3064 
  rtl_writephy(tp,31,3);
  #line 3065 
  rtl_w0w1_phy(tp,25,0,1);
  #line 3066 
  rtl_w0w1_phy(tp,16,0,1024);
  #line 3067 
  rtl_writephy(tp,31,0);
  #line 3068 
  return;
}

#line 3070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168g_disable_aldps(struct rtl8169_private *tp)
{
  #line 3072 
  phy_modify_paged(tp->phydev,2627,16U,(unsigned short)4,(unsigned short)0);
  #line 3073 
  return;
}

#line 3075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168g_phy_adjust_10m_aldps(struct rtl8169_private *tp)
{
  #line 3077 
  struct phy_device *phydev = tp->phydev;
  #line 3079 
  phy_modify_paged(phydev,3020,20U,(unsigned short)256,(unsigned short)0);
  #line 3080 
  phy_modify_paged(phydev,2628,17U,(unsigned short)0,(unsigned short)192);
  #line 3081 
  r8168g_phy_param(phydev,(unsigned short)32900,(unsigned short)24576,(unsigned short)0);
  #line 3082 
  phy_modify_paged(phydev,2627,16U,(unsigned short)0,(unsigned short)4099);
  #line 3083 
  return;
}

#line 3085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168g_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3087 
  int ret;
  #line 3089 
  rtl_apply_firmware(tp);
  #line 3091 
  ret = phy_read_paged(tp->phydev,2630,16U);
  #line 3092 
  if (((unsigned long)ret & 256UL) != 0UL) 
                                           #line 3093 
                                           phy_modify_paged(tp->phydev,3020,18U,(unsigned short)32768,(unsigned short)0); else 
                                                                    #line 3095 
                                                                    phy_modify_paged(tp->phydev,3020,18U,(unsigned short)0,(unsigned short)32768);
  #line 3097 
  ret = phy_read_paged(tp->phydev,2630,19U);
  #line 3098 
  if (((unsigned long)ret & 256UL) != 0UL) 
                                           #line 3099 
                                           phy_modify_paged(tp->phydev,3137,21U,(unsigned short)0,(unsigned short)2); else 
                                                                    #line 3101 
                                                                    phy_modify_paged(tp->phydev,3137,21U,(unsigned short)2,(unsigned short)0);
  #line 3104 
  phy_modify_paged(tp->phydev,2628,17U,(unsigned short)0,(unsigned short)12);
  #line 3106 
  rtl8168g_phy_adjust_10m_aldps(tp);
  #line 3109 
  phy_modify_paged(tp->phydev,2635,17U,(unsigned short)0,(unsigned short)4);
  #line 3112 
  r8168g_phy_param(tp->phydev,(unsigned short)32786,(unsigned short)0,(unsigned short)32768);
  #line 3114 
  phy_modify_paged(tp->phydev,3138,17U,(unsigned short)8192,(unsigned short)16384);
  #line 3117 
  rtl_writephy(tp,31,3021);
  #line 3118 
  rtl_writephy(tp,20,20581);
  #line 3119 
  rtl_writephy(tp,20,53349);
  #line 3120 
  rtl_writephy(tp,31,3016);
  #line 3121 
  rtl_writephy(tp,17,22101);
  #line 3122 
  rtl_writephy(tp,31,3021);
  #line 3123 
  rtl_writephy(tp,20,4197);
  #line 3124 
  rtl_writephy(tp,20,36965);
  #line 3125 
  rtl_writephy(tp,20,4197);
  #line 3126 
  rtl_writephy(tp,31,0);
  #line 3128 
  rtl8168g_disable_aldps(tp);
  #line 3129 
  rtl8168g_config_eee_phy(tp);
  #line 3130 
  rtl_enable_eee(tp);
  #line 3131 
  return;
}

#line 3133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168g_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3135 
  rtl_apply_firmware(tp);
  #line 3136 
  rtl8168g_config_eee_phy(tp);
  #line 3137 
  rtl_enable_eee(tp);
  #line 3138 
  return;
}

#line 3140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168h_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3143 
  u16 dout_tapbin;
  #line 3144 
  u32 data;
  #line 3142 
  struct phy_device *phydev = tp->phydev;
  #line 3146 
  rtl_apply_firmware(tp);
  #line 3149 
  r8168g_phy_param(phydev,(unsigned short)32923,(unsigned short)63488,(unsigned short)32768);
  #line 3150 
  r8168g_phy_param(phydev,(unsigned short)32930,(unsigned short)65280,(unsigned short)32768);
  #line 3151 
  r8168g_phy_param(phydev,(unsigned short)32932,(unsigned short)65280,(unsigned short)34048);
  #line 3152 
  r8168g_phy_param(phydev,(unsigned short)32924,(unsigned short)65280,(unsigned short)48384);
  #line 3155 
  r8168g_phy_param(phydev,(unsigned short)32941,(unsigned short)63488,(unsigned short)28672);
  #line 3156 
  r8168g_phy_param(phydev,(unsigned short)32948,(unsigned short)65280,(unsigned short)20480);
  #line 3157 
  r8168g_phy_param(phydev,(unsigned short)32940,(unsigned short)65280,(unsigned short)16384);
  #line 3160 
  r8168g_phy_param(phydev,(unsigned short)32910,(unsigned short)65280,(unsigned short)4608);
  #line 3161 
  r8168g_phy_param(phydev,(unsigned short)32912,(unsigned short)65280,(unsigned short)58624);
  #line 3162 
  r8168g_phy_param(phydev,(unsigned short)32914,(unsigned short)65280,(unsigned short)40704);
  #line 3165 
  dout_tapbin = (unsigned short)0U;
  #line 3166 
  data = (unsigned int)phy_read_paged(phydev,2630,19U);
  #line 3167 
  data &= 3U;
  #line 3168 
  data <<= 2;
  #line 3169 
  dout_tapbin = (unsigned short)((int)((unsigned short)data) | (int)dout_tapbin);
  #line 3170 
  data = (unsigned int)phy_read_paged(phydev,2630,18U);
  #line 3171 
  data &= 49152U;
  #line 3172 
  data >>= 14;
  #line 3173 
  dout_tapbin = (unsigned short)((int)((unsigned short)data) | (int)dout_tapbin);
  #line 3174 
  dout_tapbin = (unsigned short)((unsigned int)dout_tapbin ^ 65527U);
  #line 3175 
  dout_tapbin = (unsigned short)((int)dout_tapbin << 12U);
  #line 3176 
  dout_tapbin = (unsigned short)((unsigned int)dout_tapbin & 61440U);
  #line 3178 
  r8168g_phy_param(phydev,(unsigned short)33402,(unsigned short)61440,(unsigned short)((int)dout_tapbin));
  #line 3179 
  r8168g_phy_param(phydev,(unsigned short)33403,(unsigned short)61440,(unsigned short)((int)dout_tapbin));
  #line 3180 
  r8168g_phy_param(phydev,(unsigned short)33404,(unsigned short)61440,(unsigned short)((int)dout_tapbin));
  #line 3181 
  r8168g_phy_param(phydev,(unsigned short)33405,(unsigned short)61440,(unsigned short)((int)dout_tapbin));
  #line 3182 
  r8168g_phy_param(phydev,(unsigned short)2065,(unsigned short)0,(unsigned short)2048);
  #line 3183 
  phy_modify_paged(phydev,2626,22U,(unsigned short)0,(unsigned short)2);
  #line 3186 
  phy_modify_paged(tp->phydev,2628,17U,(unsigned short)0,(unsigned short)2048);
  #line 3189 
  phy_modify_paged(tp->phydev,3018,23U,(unsigned short)12288,(unsigned short)16384);
  #line 3191 
  r8168g_phy_param(phydev,(unsigned short)32831,(unsigned short)12288,(unsigned short)0);
  #line 3192 
  r8168g_phy_param(phydev,(unsigned short)32839,(unsigned short)12288,(unsigned short)0);
  #line 3193 
  r8168g_phy_param(phydev,(unsigned short)32847,(unsigned short)12288,(unsigned short)0);
  #line 3194 
  r8168g_phy_param(phydev,(unsigned short)32855,(unsigned short)12288,(unsigned short)0);
  #line 3195 
  r8168g_phy_param(phydev,(unsigned short)32863,(unsigned short)12288,(unsigned short)0);
  #line 3196 
  r8168g_phy_param(phydev,(unsigned short)32871,(unsigned short)12288,(unsigned short)0);
  #line 3197 
  r8168g_phy_param(phydev,(unsigned short)32879,(unsigned short)12288,(unsigned short)0);
  #line 3200 
  phy_modify_paged(tp->phydev,2628,17U,(unsigned short)128,(unsigned short)0);
  #line 3202 
  rtl8168g_disable_aldps(tp);
  #line 3203 
  rtl8168h_config_eee_phy(tp);
  #line 3204 
  rtl_enable_eee(tp);
  #line 3205 
  return;
}

#line 3207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168h_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3209 
  u16 ioffset_p3;
  #line 3209 
  u16 ioffset_p2;
  #line 3209 
  u16 ioffset_p1;
  #line 3209 
  u16 ioffset_p0;
  #line 3211 
  u16 rlen;
  #line 3212 
  u32 data;
  #line 3210 
  struct phy_device *phydev = tp->phydev;
  #line 3214 
  rtl_apply_firmware(tp);
  #line 3217 
  r8168g_phy_param(phydev,(unsigned short)32906,(unsigned short)63,(unsigned short)10);
  #line 3220 
  r8168g_phy_param(phydev,(unsigned short)2065,(unsigned short)0,(unsigned short)2048);
  #line 3221 
  phy_modify_paged(phydev,2626,22U,(unsigned short)0,(unsigned short)2);
  #line 3224 
  phy_modify_paged(tp->phydev,2628,17U,(unsigned short)0,(unsigned short)2048);
  #line 3226 
  r8168_mac_ocp_write(tp,56578U,32893U);
  #line 3227 
  data = (unsigned int)r8168_mac_ocp_read(tp,56578U);
  #line 3228 
  ioffset_p3 = (unsigned short)((unsigned int)((unsigned short)(data >> 7)) & 1U);
  #line 3229 
  ioffset_p3 = (unsigned short)((int)ioffset_p3 << 3U);
  #line 3231 
  data = (unsigned int)r8168_mac_ocp_read(tp,56576U);
  #line 3232 
  ioffset_p3 = (unsigned short)(((unsigned int)((unsigned short)(data >> 13)) & 7U) | (unsigned int)ioffset_p3);
  #line 3233 
  ioffset_p2 = (unsigned short)((unsigned int)((unsigned short)(data >> 9)) & 15U);
  #line 3234 
  ioffset_p1 = (unsigned short)((unsigned int)((unsigned short)(data >> 5)) & 15U);
  #line 3235 
  ioffset_p0 = (unsigned short)((unsigned int)((unsigned short)(data >> 4)) & 1U);
  #line 3236 
  ioffset_p0 = (unsigned short)((int)ioffset_p0 << 3U);
  #line 3237 
  ioffset_p0 = (unsigned short)(((unsigned int)((unsigned short)data) & 7U) | (unsigned int)ioffset_p0);
  #line 3238 
  data = (unsigned int)(((((int)ioffset_p3 << 12) | ((int)ioffset_p2 << 8)) | ((int)ioffset_p1 << 4)) | (int)ioffset_p0);
  #line 3240 
  if (((unsigned int)ioffset_p3 != 15U || (unsigned int)ioffset_p2 != 15U) || ((unsigned int)ioffset_p1 != 15U || (unsigned int)ioffset_p0 != 15U)) 
    #line 3242 
    phy_write_paged(phydev,3023,22U,(unsigned short)((int)((unsigned short)data)));
  #line 3245 
  data = (unsigned int)phy_read_paged(phydev,3021,22U);
  #line 3246 
  data &= 15U;
  #line 3247 
  rlen = (unsigned short)0U;
  #line 3248 
  if (data > 3U) 
                 #line 3249 
                 rlen = (unsigned short)((unsigned int)((unsigned short)data) + 65533U);
  #line 3250 
  data = (unsigned int)((((int)rlen | ((int)rlen << 4)) | ((int)rlen << 8)) | ((int)rlen << 12));
  #line 3251 
  phy_write_paged(phydev,3021,23U,(unsigned short)((int)((unsigned short)data)));
  #line 3254 
  phy_modify_paged(phydev,2628,17U,(unsigned short)128,(unsigned short)0);
  #line 3256 
  rtl8168g_disable_aldps(tp);
  #line 3257 
  rtl8168g_config_eee_phy(tp);
  #line 3258 
  rtl_enable_eee(tp);
  #line 3259 
  return;
}

#line 3261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168ep_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3263 
  struct phy_device *phydev = tp->phydev;
  #line 3266 
  phy_modify_paged(phydev,2628,17U,(unsigned short)0,(unsigned short)12);
  #line 3268 
  rtl8168g_phy_adjust_10m_aldps(tp);
  #line 3271 
  phy_modify_paged(phydev,2635,17U,(unsigned short)0,(unsigned short)4);
  #line 3274 
  r8168g_phy_param(phydev,(unsigned short)32786,(unsigned short)0,(unsigned short)32768);
  #line 3277 
  phy_modify_paged(phydev,3138,17U,(unsigned short)8192,(unsigned short)16384);
  #line 3279 
  rtl8168g_disable_aldps(tp);
  #line 3280 
  rtl8168g_config_eee_phy(tp);
  #line 3281 
  rtl_enable_eee(tp);
  #line 3282 
  return;
}

#line 3284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168ep_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3286 
  struct phy_device *phydev = tp->phydev;
  #line 3288 
  rtl8168g_phy_adjust_10m_aldps(tp);
  #line 3291 
  r8168g_phy_param(phydev,(unsigned short)32786,(unsigned short)0,(unsigned short)32768);
  #line 3294 
  phy_modify_paged(tp->phydev,3138,17U,(unsigned short)8192,(unsigned short)16384);
  #line 3297 
  r8168g_phy_param(phydev,(unsigned short)33011,(unsigned short)65280,(unsigned short)35584);
  #line 3298 
  r8168g_phy_param(phydev,(unsigned short)33008,(unsigned short)65280,(unsigned short)14848);
  #line 3299 
  r8168g_phy_param(phydev,(unsigned short)33007,(unsigned short)65280,(unsigned short)1280);
  #line 3300 
  r8168g_phy_param(phydev,(unsigned short)33014,(unsigned short)65280,(unsigned short)28160);
  #line 3301 
  r8168g_phy_param(phydev,(unsigned short)33004,(unsigned short)65280,(unsigned short)26624);
  #line 3302 
  r8168g_phy_param(phydev,(unsigned short)33005,(unsigned short)65280,(unsigned short)31744);
  #line 3303 
  r8168g_phy_param(phydev,(unsigned short)33010,(unsigned short)65280,(unsigned short)62464);
  #line 3304 
  r8168g_phy_param(phydev,(unsigned short)33012,(unsigned short)65280,(unsigned short)34048);
  #line 3305 
  r8168g_phy_param(phydev,(unsigned short)33040,(unsigned short)65280,(unsigned short)43008);
  #line 3306 
  r8168g_phy_param(phydev,(unsigned short)33039,(unsigned short)65280,(unsigned short)7424);
  #line 3307 
  r8168g_phy_param(phydev,(unsigned short)33041,(unsigned short)65280,(unsigned short)62720);
  #line 3308 
  r8168g_phy_param(phydev,(unsigned short)33043,(unsigned short)65280,(unsigned short)24832);
  #line 3309 
  r8168g_phy_param(phydev,(unsigned short)33045,(unsigned short)65280,(unsigned short)37376);
  #line 3310 
  r8168g_phy_param(phydev,(unsigned short)33038,(unsigned short)65280,(unsigned short)1024);
  #line 3311 
  r8168g_phy_param(phydev,(unsigned short)33036,(unsigned short)65280,(unsigned short)31744);
  #line 3312 
  r8168g_phy_param(phydev,(unsigned short)33035,(unsigned short)65280,(unsigned short)23040);
  #line 3313 
  r8168g_phy_param(phydev,(unsigned short)32977,(unsigned short)65280,(unsigned short)65280);
  #line 3314 
  r8168g_phy_param(phydev,(unsigned short)32973,(unsigned short)65280,(unsigned short)40448);
  #line 3315 
  r8168g_phy_param(phydev,(unsigned short)32979,(unsigned short)65280,(unsigned short)3584);
  #line 3316 
  r8168g_phy_param(phydev,(unsigned short)32981,(unsigned short)65280,(unsigned short)51712);
  #line 3317 
  r8168g_phy_param(phydev,(unsigned short)32983,(unsigned short)65280,(unsigned short)33792);
  #line 3320 
  rtl_writephy(tp,31,3021);
  #line 3321 
  rtl_writephy(tp,20,20581);
  #line 3322 
  rtl_writephy(tp,20,53349);
  #line 3323 
  rtl_writephy(tp,31,3016);
  #line 3324 
  rtl_writephy(tp,18,237);
  #line 3325 
  rtl_writephy(tp,31,3021);
  #line 3326 
  rtl_writephy(tp,20,4197);
  #line 3327 
  rtl_writephy(tp,20,36965);
  #line 3328 
  rtl_writephy(tp,20,4197);
  #line 3329 
  rtl_writephy(tp,31,0);
  #line 3331 
  rtl8168g_disable_aldps(tp);
  #line 3332 
  rtl8168g_config_eee_phy(tp);
  #line 3333 
  rtl_enable_eee(tp);
  #line 3334 
  return;
}

#line 3336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8117_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3338 
  struct phy_device *phydev = tp->phydev;
  #line 3341 
  r8168g_phy_param(phydev,(unsigned short)32910,(unsigned short)65280,(unsigned short)18432);
  #line 3342 
  r8168g_phy_param(phydev,(unsigned short)32912,(unsigned short)65280,(unsigned short)52224);
  #line 3343 
  r8168g_phy_param(phydev,(unsigned short)32914,(unsigned short)65280,(unsigned short)45056);
  #line 3345 
  r8168g_phy_param(phydev,(unsigned short)32904,(unsigned short)65280,(unsigned short)24576);
  #line 3346 
  r8168g_phy_param(phydev,(unsigned short)32907,(unsigned short)16128,(unsigned short)2816);
  #line 3347 
  r8168g_phy_param(phydev,(unsigned short)32909,(unsigned short)7936,(unsigned short)1536);
  #line 3348 
  r8168g_phy_param(phydev,(unsigned short)32908,(unsigned short)65280,(unsigned short)45056);
  #line 3349 
  r8168g_phy_param(phydev,(unsigned short)32928,(unsigned short)65280,(unsigned short)10240);
  #line 3350 
  r8168g_phy_param(phydev,(unsigned short)32930,(unsigned short)65280,(unsigned short)20480);
  #line 3351 
  r8168g_phy_param(phydev,(unsigned short)32923,(unsigned short)63488,(unsigned short)45056);
  #line 3352 
  r8168g_phy_param(phydev,(unsigned short)32922,(unsigned short)65280,(unsigned short)19200);
  #line 3353 
  r8168g_phy_param(phydev,(unsigned short)32925,(unsigned short)16128,(unsigned short)2048);
  #line 3354 
  r8168g_phy_param(phydev,(unsigned short)32929,(unsigned short)65280,(unsigned short)28672);
  #line 3355 
  r8168g_phy_param(phydev,(unsigned short)32927,(unsigned short)7936,(unsigned short)768);
  #line 3356 
  r8168g_phy_param(phydev,(unsigned short)32926,(unsigned short)65280,(unsigned short)34816);
  #line 3357 
  r8168g_phy_param(phydev,(unsigned short)32946,(unsigned short)65280,(unsigned short)8704);
  #line 3358 
  r8168g_phy_param(phydev,(unsigned short)32941,(unsigned short)63488,(unsigned short)38912);
  #line 3359 
  r8168g_phy_param(phydev,(unsigned short)32943,(unsigned short)16128,(unsigned short)2048);
  #line 3360 
  r8168g_phy_param(phydev,(unsigned short)32947,(unsigned short)65280,(unsigned short)28416);
  #line 3361 
  r8168g_phy_param(phydev,(unsigned short)32945,(unsigned short)7936,(unsigned short)768);
  #line 3362 
  r8168g_phy_param(phydev,(unsigned short)32944,(unsigned short)65280,(unsigned short)37632);
  #line 3364 
  r8168g_phy_param(phydev,(unsigned short)32785,(unsigned short)0,(unsigned short)2048);
  #line 3367 
  phy_modify_paged(tp->phydev,2628,17U,(unsigned short)0,(unsigned short)2048);
  #line 3369 
  r8168g_phy_param(phydev,(unsigned short)32790,(unsigned short)0,(unsigned short)1024);
  #line 3371 
  rtl8168g_disable_aldps(tp);
  #line 3372 
  rtl8168h_config_eee_phy(tp);
  #line 3373 
  rtl_enable_eee(tp);
  #line 3374 
  return;
}

#line 3376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8102e_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3378 
  struct phy_reg phy_reg_init[4U] = {{.reg = (unsigned short)31U, .val = (unsigned short)3U}, {.reg = (unsigned short)8U, .val = (unsigned short)17437U}, {.reg = (unsigned short)1U, .val = (unsigned short)37120U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 3385 
  rtl_writephy(tp,31,0);
  #line 3386 
  rtl_patchphy(tp,17,4096);
  #line 3387 
  rtl_patchphy(tp,25,8192);
  #line 3388 
  rtl_patchphy(tp,16,32768);
  #line 3390 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),4);
  #line 3391 
  return;
}

#line 3393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8105e_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3396 
  phy_write(tp->phydev,24U,(unsigned short)784);
  #line 3397 
  msleep(100U);
  #line 3399 
  rtl_apply_firmware(tp);
  #line 3401 
  phy_write_paged(tp->phydev,5,26U,(unsigned short)0);
  #line 3402 
  phy_write_paged(tp->phydev,4,28U,(unsigned short)0);
  #line 3403 
  phy_write_paged(tp->phydev,1,21U,(unsigned short)30465);
  #line 3404 
  return;
}

#line 3406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8402_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3409 
  phy_write(tp->phydev,24U,(unsigned short)784);
  #line 3410 
  msleep(20U);
  #line 3412 
  rtl_apply_firmware(tp);
  #line 3415 
  rtl_eri_write(tp,432,12288U,0U);
  #line 3416 
  rtl_writephy(tp,31,4);
  #line 3417 
  rtl_writephy(tp,16,16415);
  #line 3418 
  rtl_writephy(tp,25,28720);
  #line 3419 
  rtl_writephy(tp,31,0);
  #line 3420 
  return;
}

#line 3422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8106e_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3424 
  struct phy_reg phy_reg_init[4U] = {{.reg = (unsigned short)31U, .val = (unsigned short)4U}, {.reg = (unsigned short)16U, .val = (unsigned short)49279U}, {.reg = (unsigned short)25U, .val = (unsigned short)28720U}, {.reg = (unsigned short)31U, .val = (unsigned short)0U}};
  #line 3432 
  phy_write(tp->phydev,24U,(unsigned short)784);
  #line 3433 
  msleep(100U);
  #line 3435 
  rtl_apply_firmware(tp);
  #line 3437 
  rtl_eri_write(tp,432,12288U,0U);
  #line 3438 
  __rtl_writephy_batch(tp,(struct phy_reg *)(& phy_reg_init),4);
  #line 3440 
  rtl_eri_write(tp,464,12288U,0U);
  #line 3441 
  return;
}

#line 3443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8125_1_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3445 
  struct phy_device *phydev = tp->phydev;
  #line 3447 
  phy_modify_paged(phydev,2772,16U,(unsigned short)1023,(unsigned short)132);
  #line 3448 
  phy_modify_paged(phydev,2772,23U,(unsigned short)0,(unsigned short)16);
  #line 3449 
  phy_modify_paged(phydev,2769,19U,(unsigned short)1023,(unsigned short)6);
  #line 3450 
  phy_modify_paged(phydev,2771,17U,(unsigned short)63,(unsigned short)6);
  #line 3451 
  phy_modify_paged(phydev,2752,20U,(unsigned short)0,(unsigned short)4352);
  #line 3452 
  phy_modify_paged(phydev,2760,21U,(unsigned short)61440,(unsigned short)28672);
  #line 3453 
  phy_modify_paged(phydev,2769,20U,(unsigned short)0,(unsigned short)1024);
  #line 3454 
  phy_modify_paged(phydev,2769,21U,(unsigned short)0,(unsigned short)1023);
  #line 3455 
  phy_modify_paged(phydev,2769,22U,(unsigned short)0,(unsigned short)1023);
  #line 3457 
  r8168g_phy_param(phydev,(unsigned short)33002,(unsigned short)65280,(unsigned short)50176);
  #line 3458 
  r8168g_phy_param(phydev,(unsigned short)33003,(unsigned short)1792,(unsigned short)768);
  #line 3459 
  r8168g_phy_param(phydev,(unsigned short)33016,(unsigned short)65280,(unsigned short)7168);
  #line 3460 
  r8168g_phy_param(phydev,(unsigned short)33009,(unsigned short)65280,(unsigned short)12288);
  #line 3461 
  r8168g_phy_param(phydev,(unsigned short)33022,(unsigned short)65280,(unsigned short)42240);
  #line 3462 
  r8168g_phy_param(phydev,(unsigned short)33026,(unsigned short)65280,(unsigned short)20480);
  #line 3463 
  r8168g_phy_param(phydev,(unsigned short)33029,(unsigned short)65280,(unsigned short)13056);
  #line 3464 
  r8168g_phy_param(phydev,(unsigned short)33024,(unsigned short)65280,(unsigned short)28672);
  #line 3465 
  r8168g_phy_param(phydev,(unsigned short)33028,(unsigned short)65280,(unsigned short)61440);
  #line 3466 
  r8168g_phy_param(phydev,(unsigned short)33030,(unsigned short)65280,(unsigned short)25856);
  #line 3467 
  r8168g_phy_param(phydev,(unsigned short)32988,(unsigned short)65280,(unsigned short)60672);
  #line 3468 
  r8168g_phy_param(phydev,(unsigned short)32991,(unsigned short)0,(unsigned short)256);
  #line 3469 
  r8168g_phy_param(phydev,(unsigned short)32993,(unsigned short)256,(unsigned short)0);
  #line 3471 
  phy_modify_paged(phydev,3056,19U,(unsigned short)63,(unsigned short)56);
  #line 3472 
  r8168g_phy_param(phydev,(unsigned short)33183,(unsigned short)65535,(unsigned short)53430);
  #line 3474 
  phy_write_paged(phydev,3011,18U,(unsigned short)21845);
  #line 3475 
  phy_modify_paged(phydev,3056,21U,(unsigned short)3584,(unsigned short)2560);
  #line 3476 
  phy_modify_paged(phydev,2652,16U,(unsigned short)1024,(unsigned short)0);
  #line 3477 
  phy_modify_paged(phydev,2628,17U,(unsigned short)0,(unsigned short)2048);
  #line 3479 
  rtl8125_config_eee_phy(tp);
  #line 3480 
  rtl_enable_eee(tp);
  #line 3481 
  return;
}

#line 3483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8125_2_hw_phy_config(struct rtl8169_private *tp)
{
  #line 3486 
  int i;
  #line 3485 
  struct phy_device *phydev = tp->phydev;
  #line 3488 
  phy_modify_paged(phydev,2772,23U,(unsigned short)0,(unsigned short)16);
  #line 3489 
  phy_modify_paged(phydev,2769,19U,(unsigned short)1023,(unsigned short)1023);
  #line 3490 
  phy_modify_paged(phydev,2771,17U,(unsigned short)63,(unsigned short)6);
  #line 3491 
  phy_modify_paged(phydev,2752,20U,(unsigned short)4352,(unsigned short)0);
  #line 3492 
  phy_modify_paged(phydev,2764,16U,(unsigned short)3,(unsigned short)2);
  #line 3493 
  phy_modify_paged(phydev,2772,16U,(unsigned short)231,(unsigned short)68);
  #line 3494 
  phy_modify_paged(phydev,2753,18U,(unsigned short)128,(unsigned short)0);
  #line 3495 
  phy_modify_paged(phydev,2760,16U,(unsigned short)768,(unsigned short)0);
  #line 3496 
  phy_modify_paged(phydev,2757,23U,(unsigned short)7,(unsigned short)2);
  #line 3497 
  phy_write_paged(phydev,2772,22U,(unsigned short)168);
  #line 3498 
  phy_write_paged(phydev,2757,22U,(unsigned short)511);
  #line 3499 
  phy_modify_paged(phydev,2760,21U,(unsigned short)240,(unsigned short)48);
  #line 3501 
  phy_write(phydev,31U,(unsigned short)2951);
  #line 3502 
  phy_write(phydev,22U,(unsigned short)32930);
  #line 3503 
  phy_write(phydev,23U,(unsigned short)339);
  #line 3504 
  phy_write(phydev,22U,(unsigned short)32924);
  #line 3505 
  phy_write(phydev,23U,(unsigned short)339);
  #line 3506 
  phy_write(phydev,31U,(unsigned short)0);
  #line 3508 
  phy_write(phydev,31U,(unsigned short)2627);
  #line 3509 
  phy_write(phydev,19U,(unsigned short)33203);
  #line 3510 
  phy_write(phydev,20U,(unsigned short)67);
  #line 3511 
  phy_write(phydev,20U,(unsigned short)167);
  #line 3512 
  phy_write(phydev,20U,(unsigned short)214);
  #line 3513 
  phy_write(phydev,20U,(unsigned short)236);
  #line 3514 
  phy_write(phydev,20U,(unsigned short)246);
  #line 3515 
  phy_write(phydev,20U,(unsigned short)251);
  #line 3516 
  phy_write(phydev,20U,(unsigned short)253);
  #line 3517 
  phy_write(phydev,20U,(unsigned short)255);
  #line 3518 
  phy_write(phydev,20U,(unsigned short)187);
  #line 3519 
  phy_write(phydev,20U,(unsigned short)88);
  #line 3520 
  phy_write(phydev,20U,(unsigned short)41);
  #line 3521 
  phy_write(phydev,20U,(unsigned short)19);
  #line 3522 
  phy_write(phydev,20U,(unsigned short)9);
  #line 3523 
  phy_write(phydev,20U,(unsigned short)4);
  #line 3524 
  phy_write(phydev,20U,(unsigned short)2);
  #line 3525 
  i = 0;
  #line 3525 
  while (i <= 24) {
    #line 3526 
    phy_write(phydev,20U,(unsigned short)0);
    #line 3525 
    i ++;
  }
  #line 3527 
  phy_write(phydev,31U,(unsigned short)0);
  #line 3529 
  r8168g_phy_param(phydev,(unsigned short)33367,(unsigned short)65535,(unsigned short)527);
  #line 3530 
  r8168g_phy_param(phydev,(unsigned short)33002,(unsigned short)65535,(unsigned short)30787);
  #line 3532 
  rtl_apply_firmware(tp);
  #line 3534 
  phy_modify_paged(phydev,3334,20U,(unsigned short)0,(unsigned short)8192);
  #line 3536 
  r8168g_phy_param(phydev,(unsigned short)33186,(unsigned short)0,(unsigned short)256);
  #line 3538 
  phy_modify_paged(phydev,2900,22U,(unsigned short)65280,(unsigned short)56064);
  #line 3539 
  phy_modify_paged(phydev,2629,18U,(unsigned short)1,(unsigned short)0);
  #line 3540 
  phy_modify_paged(phydev,2653,18U,(unsigned short)0,(unsigned short)32);
  #line 3541 
  phy_modify_paged(phydev,2772,23U,(unsigned short)16,(unsigned short)0);
  #line 3542 
  phy_modify_paged(phydev,2694,21U,(unsigned short)1,(unsigned short)0);
  #line 3543 
  phy_modify_paged(phydev,2628,17U,(unsigned short)0,(unsigned short)2048);
  #line 3545 
  rtl8125_config_eee_phy(tp);
  #line 3546 
  rtl_enable_eee(tp);
  #line 3547 
  return;
}

#line 3549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_phy_config(struct net_device *dev)
{
  #line 3551 
  rtl_generic_fct phy_configs[53U] = {& rtl8169s_hw_phy_config, & rtl8169s_hw_phy_config, & rtl8169sb_hw_phy_config, & rtl8169scd_hw_phy_config, & rtl8169sce_hw_phy_config, & rtl8102e_hw_phy_config, & rtl8102e_hw_phy_config, & rtl8102e_hw_phy_config, (void (*)(struct rtl8169_private *))0, & rtl8168bb_hw_phy_config, & rtl8168bef_hw_phy_config, (void (*)(struct rtl8169_private *))0, (void (*)(struct rtl8169_private *))0, (void (*)(struct rtl8169_private *))0, (void (*)(struct rtl8169_private *))0, & rtl8168bef_hw_phy_config, & rtl8168cp_1_hw_phy_config, & rtl8168c_1_hw_phy_config, & rtl8168c_2_hw_phy_config, & rtl8168c_3_hw_phy_config, & rtl8168c_3_hw_phy_config, & rtl8168cp_2_hw_phy_config, & rtl8168cp_2_hw_phy_config, & rtl8168d_1_hw_phy_config, & rtl8168d_2_hw_phy_config, & rtl8168d_3_hw_phy_config, & rtl8168d_4_hw_phy_config, & rtl8105e_hw_phy_config, & rtl8105e_hw_phy_config, (void (*)(struct rtl8169_private *))0, & rtl8168e_1_hw_phy_config, & rtl8168e_1_hw_phy_config, & rtl8168e_2_hw_phy_config, & rtl8168f_1_hw_phy_config, & rtl8168f_2_hw_phy_config, & rtl8402_hw_phy_config, & rtl8411_hw_phy_config, & rtl8106e_hw_phy_config, & rtl8168g_1_hw_phy_config, (void (*)(struct rtl8169_private *))0, & rtl8168g_2_hw_phy_config, & rtl8168g_2_hw_phy_config, & rtl8168g_2_hw_phy_config, & rtl8168h_1_hw_phy_config, & rtl8168h_2_hw_phy_config, & rtl8168h_1_hw_phy_config, & rtl8168h_2_hw_phy_config, & rtl8168ep_1_hw_phy_config, & rtl8168ep_2_hw_phy_config, & rtl8168ep_2_hw_phy_config, & rtl8117_hw_phy_config, & rtl8125_1_hw_phy_config, & rtl8125_2_hw_phy_config};
  #line 3608 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 3610 
  if (phy_configs[(unsigned int)tp->mac_version] != (void (*)(struct rtl8169_private *))0) 
    #line 3611 
    (*(phy_configs[(unsigned int)tp->mac_version]))(tp);
  #line 3612 
  return;
}

#line 3614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_schedule_task(struct rtl8169_private *tp, enum rtl_flag flag)
{
  #line 3616 
  if (! test_and_set_bit((long)flag,(unsigned long *)(& tp->wk.flags))) 
    #line 3617 
    cif_schedule_work(& tp->wk.work);
  #line 3618 
  return;
}

#line 3620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_init_phy(struct net_device *dev, struct rtl8169_private *tp)
{
  #line 3622 
  rtl_hw_phy_config(dev);
  #line 3624 
  if (tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_06) {
    #line 3625 
    pci_write_config_byte(tp->pci_dev,13,(unsigned char)64);
    #line 3626 
    pci_write_config_byte(tp->pci_dev,12,(unsigned char)8);
    #line 3627 
    if ((tp->msg_enable & 1U) != 0U) {
      #line 3627 
      bool branch;
      #line 3627 
      struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"r8169", .function = (char *)"rtl8169_init_phy", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c", .format = (char *)"Set MAC Reg C+CR Offset 0x82h = 0x01h\n", .lineno = (unsigned int)3627U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3627 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
      #line 3627 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3627 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug573,dev,(char *)"Set MAC Reg C+CR Offset 0x82h = 0x01h\n");
    }
    #line 3629 
    writeb((unsigned char)1,tp->mmio_addr + 130U);
  }
  #line 3633 
  phy_speed_up(tp->phydev);
  #line 3635 
  genphy_soft_reset(tp->phydev);
  #line 3636 
  return;
}

#line 3638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_rar_set(struct rtl8169_private *tp, u8 *addr)
{
  #line 3640 
  rtl_lock_work(tp);
  #line 3642 
  rtl_unlock_config_regs(tp);
  #line 3644 
  writel((unsigned int)((int)*(addr + 4U) | ((int)*(addr + 5U) << 8)),tp->mmio_addr + 4U);
  #line 3645 
  readl(tp->mmio_addr + 4U);
  #line 3647 
  writel((unsigned int)((((int)*addr | ((int)*(addr + 1U) << 8)) | ((int)*(addr + 2U) << 16)) | ((int)*(addr + 3U) << 24)),tp->mmio_addr);
  #line 3648 
  readl(tp->mmio_addr);
  #line 3650 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_34) 
                                                            #line 3651 
                                                            rtl_rar_exgmac_set(tp,addr);
  #line 3653 
  rtl_lock_config_regs(tp);
  #line 3655 
  rtl_unlock_work(tp);
  #line 3656 
  return;
}

#line 3658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_set_mac_address(struct net_device *dev, void *p)
{
  #line 3662 
  int ret;
  #line 3660 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 3661 
  struct device *d = tp_to_dev(tp);
  #line 3664 
  ret = eth_mac_addr(dev,p);
  #line 3665 
  if (ret != 0) 
                #line 3666 
                return ret;
  #line 3668 
  pm_runtime_get_noresume(d);
  #line 3670 
  if ((int)cif_pm_runtime_active(d) != 0) 
                                          #line 3671 
                                          rtl_rar_set(tp,dev->dev_addr);
  #line 3673 
  pm_runtime_put_noidle(d);
  #line 3675 
  return 0;
}

#line 3678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 3680 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 3682 
  if (! netif_running(dev)) 
                            #line 3683 
                            return -19;
  #line 3685 
  return phy_mii_ioctl(tp->phydev,ifr,cmd);
}

#line 3688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_wol_suspend_quirk(struct rtl8169_private *tp)
{
  #line 3690 
  switch ((unsigned int)tp->mac_version) {
    #line 3691 
    case (unsigned int)23: 
                           #line 3691 
    ;
    #line 3692 
    case (unsigned int)24: 
                           #line 3692 
    ;
    #line 3693 
    case (unsigned int)27: 
                           #line 3693 
    ;
    #line 3694 
    case (unsigned int)28: 
                           #line 3694 
    ;
    #line 3695 
    case (unsigned int)30: 
                           #line 3695 
    ;
    #line 3696 
    case (unsigned int)31: 
                           #line 3696 
    ;
    #line 3697 
    case (unsigned int)32: 
                           #line 3697 
    ;
    #line 3698 
    case 35U: 
              #line 3698 
    case 36U: 
              #line 3698 
    case 37U: 
              #line 3698 
    case 38U: 
              #line 3698 
    case 39U: 
              #line 3698 
    case 40U: 
              #line 3698 
    case 41U: 
              #line 3698 
    case 42U: 
              #line 3698 
    case 43U: 
              #line 3698 
    case 44U: 
              #line 3698 
    case 45U: 
              #line 3698 
    case 46U: 
              #line 3698 
    case 47U: 
              #line 3698 
    case 48U: 
              #line 3698 
    case 49U: 
              #line 3698 
    case 50U: 
              #line 3698 
    case 51U: 
              #line 3698 
    case 52U: 
              #line 3698 
    ;
    #line 3699 
    ;
    #line 3699 
    writel(readl(tp->mmio_addr + 68U) | 14U,tp->mmio_addr + 68U);
    #line 3701 
    break;
    #line 3702 
    default: 
             #line 3702 
    ;
    #line 3703 
    break;
  }
  #line 3705 
  return;
}

#line 3707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_pll_power_down(struct rtl8169_private *tp)
{
  #line 3709 
  if ((int)r8168_check_dash(tp) != 0) 
                                      #line 3710 
                                      return;
  #line 3712 
  if ((unsigned int)tp->mac_version + 4294967266U <= 1U) 
                                                         #line 3714 
                                                         rtl_ephy_write(tp,25,65380);
  #line 3716 
  if ((int)device_may_wakeup(tp_to_dev(tp)) != 0) {
    #line 3717 
    phy_speed_down(tp->phydev,(_Bool)0);
    #line 3718 
    rtl_wol_suspend_quirk(tp);
    #line 3719 
    return;
  }
  #line 3722 
  switch ((unsigned int)tp->mac_version) {
    #line 3723 
    case 23U: 
              #line 3723 
    case 24U: 
              #line 3723 
    case 25U: 
              #line 3723 
    case 26U: 
              #line 3723 
    case 27U: 
              #line 3723 
    case 28U: 
              #line 3723 
    case 29U: 
              #line 3723 
    case 30U: 
              #line 3723 
    case 31U: 
              #line 3723 
    ;
    #line 3724 
    case (unsigned int)35: 
                           #line 3724 
    ;
    #line 3725 
    case (unsigned int)37: 
                           #line 3725 
    ;
    #line 3726 
    case (unsigned int)41: 
                           #line 3726 
    ;
    #line 3727 
    case (unsigned int)42: 
                           #line 3727 
    ;
    #line 3728 
    case (unsigned int)43: 
                           #line 3728 
    ;
    #line 3729 
    case (unsigned int)44: 
                           #line 3729 
    ;
    #line 3730 
    case (unsigned int)45: 
                           #line 3730 
    ;
    #line 3731 
    case (unsigned int)46: 
                           #line 3731 
    ;
    #line 3732 
    case (unsigned int)48: 
                           #line 3732 
    ;
    #line 3733 
    case (unsigned int)49: 
                           #line 3733 
    ;
    #line 3734 
    case (unsigned int)50: 
                           #line 3734 
    ;
    #line 3735 
    case (unsigned int)51: 
                           #line 3735 
    ;
    #line 3736 
    case (unsigned int)52: 
                           #line 3736 
    ;
    #line 3737 
    ;
    #line 3737 
    writeb((unsigned char)((int)readb(tp->mmio_addr + 111U) & 127),tp->mmio_addr + 111U);
    #line 3738 
    break;
    #line 3739 
    case (unsigned int)38: 
                           #line 3739 
    ;
    #line 3740 
    case (unsigned int)39: 
                           #line 3740 
    ;
    #line 3741 
    case (unsigned int)47: 
                           #line 3741 
    ;
    #line 3742 
    rtl_eri_clear_bits(tp,424,61440U,4227858432U);
    #line 3743 
    ;
    #line 3743 
    writeb((unsigned char)((int)readb(tp->mmio_addr + 111U) & 127),tp->mmio_addr + 111U);
    #line 3744 
    break;
    #line 3745 
    default: 
             #line 3745 
    ;
    #line 3746 
    break;
  }
  #line 3748 
  return;
}

#line 3750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_pll_power_up(struct rtl8169_private *tp)
{
  #line 3752 
  switch ((unsigned int)tp->mac_version) {
    #line 3753 
    case 23U: 
              #line 3753 
    case 24U: 
              #line 3753 
    case 25U: 
              #line 3753 
    case 26U: 
              #line 3753 
    case 27U: 
              #line 3753 
    case 28U: 
              #line 3753 
    case 29U: 
              #line 3753 
    case 30U: 
              #line 3753 
    case 31U: 
              #line 3753 
    ;
    #line 3754 
    case (unsigned int)35: 
                           #line 3754 
    ;
    #line 3755 
    case (unsigned int)37: 
                           #line 3755 
    ;
    #line 3756 
    case (unsigned int)41: 
                           #line 3756 
    ;
    #line 3757 
    ;
    #line 3757 
    writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 111U) | 128U)),tp->mmio_addr + 111U);
    #line 3758 
    break;
    #line 3759 
    case (unsigned int)42: 
                           #line 3759 
    ;
    #line 3760 
    case (unsigned int)43: 
                           #line 3760 
    ;
    #line 3761 
    case (unsigned int)44: 
                           #line 3761 
    ;
    #line 3762 
    case (unsigned int)45: 
                           #line 3762 
    ;
    #line 3763 
    case (unsigned int)46: 
                           #line 3763 
    ;
    #line 3764 
    case (unsigned int)48: 
                           #line 3764 
    ;
    #line 3765 
    case (unsigned int)49: 
                           #line 3765 
    ;
    #line 3766 
    case (unsigned int)50: 
                           #line 3766 
    ;
    #line 3767 
    case (unsigned int)51: 
                           #line 3767 
    ;
    #line 3768 
    case (unsigned int)52: 
                           #line 3768 
    ;
    #line 3769 
    ;
    #line 3769 
    writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 111U) | 192U)),tp->mmio_addr + 111U);
    #line 3770 
    break;
    #line 3771 
    case (unsigned int)38: 
                           #line 3771 
    ;
    #line 3772 
    case (unsigned int)39: 
                           #line 3772 
    ;
    #line 3773 
    case (unsigned int)47: 
                           #line 3773 
    ;
    #line 3774 
    ;
    #line 3774 
    writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 111U) | 192U)),tp->mmio_addr + 111U);
    #line 3775 
    rtl_eri_set_bits(tp,424,61440U,4227858432U);
    #line 3776 
    break;
    #line 3777 
    default: 
             #line 3777 
    ;
    #line 3778 
    break;
  }
  #line 3781 
  phy_resume(tp->phydev);
  #line 3783 
  msleep(20U);
  #line 3784 
  return;
}

#line 3786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_init_rxcfg(struct rtl8169_private *tp)
{
  #line 3788 
  switch ((unsigned int)tp->mac_version) {
    #line 3789 
    case 0U: 
             #line 3789 
    case 1U: 
             #line 3789 
    case 2U: 
             #line 3789 
    case 3U: 
             #line 3789 
    case 4U: 
             #line 3789 
    ;
    #line 3790 
    case 8U: 
             #line 3790 
    case 9U: 
             #line 3790 
    case 10U: 
              #line 3790 
    case 11U: 
              #line 3790 
    case 12U: 
              #line 3790 
    case 13U: 
              #line 3790 
    case 14U: 
              #line 3790 
    case 15U: 
              #line 3790 
    ;
    #line 3791 
    writel(59136U,tp->mmio_addr + 68U);
    #line 3792 
    break;
    #line 3793 
    case 16U: 
              #line 3793 
    case 17U: 
              #line 3793 
    case 18U: 
              #line 3793 
    case 19U: 
              #line 3793 
    case 20U: 
              #line 3793 
    case 21U: 
              #line 3793 
    case 22U: 
              #line 3793 
    ;
    #line 3794 
    case 32U: 
              #line 3794 
    case 33U: 
              #line 3794 
    case 34U: 
              #line 3794 
    ;
    #line 3795 
    case (unsigned int)36: 
                           #line 3795 
    ;
    #line 3796 
    writel(50944U,tp->mmio_addr + 68U);
    #line 3797 
    break;
    #line 3798 
    case 38U: 
              #line 3798 
    case 39U: 
              #line 3798 
    case 40U: 
              #line 3798 
    case 41U: 
              #line 3798 
    case 42U: 
              #line 3798 
    case 43U: 
              #line 3798 
    case 44U: 
              #line 3798 
    case 45U: 
              #line 3798 
    case 46U: 
              #line 3798 
    case 47U: 
              #line 3798 
    case 48U: 
              #line 3798 
    case 49U: 
              #line 3798 
    case 50U: 
              #line 3798 
    ;
    #line 3799 
    writel(52992U,tp->mmio_addr + 68U);
    #line 3800 
    break;
    #line 3801 
    case 51U: 
              #line 3801 
    case 52U: 
              #line 3801 
    ;
    #line 3802 
    writel(1086326528U,tp->mmio_addr + 68U);
    #line 3804 
    break;
    #line 3805 
    default: 
             #line 3805 
    ;
    #line 3806 
    writel(34560U,tp->mmio_addr + 68U);
    #line 3807 
    break;
  }
  #line 3809 
  return;
}

#line 3811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_init_ring_indexes(struct rtl8169_private *tp)
{
  #line 3813 
  tp->cur_rx = 0U;
  #line 3813 
  tp->cur_tx = 0U;
  #line 3813 
  tp->dirty_tx = 0U;
  #line 3814 
  return;
}

#line 3816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168c_hw_jumbo_enable(struct rtl8169_private *tp)
{
  #line 3818 
  ;
  #line 3818 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 84U) | 4U)),tp->mmio_addr + 84U);
  #line 3819 
  ;
  #line 3819 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 85U) | 2U)),tp->mmio_addr + 85U);
  #line 3820 
  return;
}

#line 3822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168c_hw_jumbo_disable(struct rtl8169_private *tp)
{
  #line 3824 
  ;
  #line 3824 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 251),tp->mmio_addr + 84U);
  #line 3825 
  ;
  #line 3825 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 85U) & 253),tp->mmio_addr + 85U);
  #line 3826 
  return;
}

#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_hw_jumbo_enable(struct rtl8169_private *tp)
{
  #line 3830 
  ;
  #line 3830 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 84U) | 4U)),tp->mmio_addr + 84U);
  #line 3831 
  return;
}

#line 3833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168dp_hw_jumbo_disable(struct rtl8169_private *tp)
{
  #line 3835 
  ;
  #line 3835 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 251),tp->mmio_addr + 84U);
  #line 3836 
  return;
}

#line 3838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168e_hw_jumbo_enable(struct rtl8169_private *tp)
{
  #line 3840 
  writeb((unsigned char)63,tp->mmio_addr + 236U);
  #line 3841 
  ;
  #line 3841 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 84U) | 4U)),tp->mmio_addr + 84U);
  #line 3842 
  ;
  #line 3842 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 85U) | 1U)),tp->mmio_addr + 85U);
  #line 3843 
  return;
}

#line 3845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168e_hw_jumbo_disable(struct rtl8169_private *tp)
{
  #line 3847 
  writeb((unsigned char)12,tp->mmio_addr + 236U);
  #line 3848 
  ;
  #line 3848 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 251),tp->mmio_addr + 84U);
  #line 3849 
  ;
  #line 3849 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 85U) & 254),tp->mmio_addr + 85U);
  #line 3850 
  return;
}

#line 3852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168b_1_hw_jumbo_enable(struct rtl8169_private *tp)
{
  #line 3854 
  ;
  #line 3854 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 85U) | 1U)),tp->mmio_addr + 85U);
  #line 3855 
  return;
}

#line 3857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8168b_1_hw_jumbo_disable(struct rtl8169_private *tp)
{
  #line 3859 
  ;
  #line 3859 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 85U) & 254),tp->mmio_addr + 85U);
  #line 3860 
  return;
}

#line 3862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_jumbo_enable(struct rtl8169_private *tp)
{
  #line 3864 
  rtl_unlock_config_regs(tp);
  #line 3865 
  switch ((unsigned int)tp->mac_version) {
    #line 3866 
    case (unsigned int)10: 
                           #line 3866 
    ;
    #line 3867 
    case (unsigned int)15: 
                           #line 3867 
    ;
    #line 3868 
    r8168b_1_hw_jumbo_enable(tp);
    #line 3869 
    break;
    #line 3870 
    case 16U: 
              #line 3870 
    case 17U: 
              #line 3870 
    case 18U: 
              #line 3870 
    case 19U: 
              #line 3870 
    case 20U: 
              #line 3870 
    case 21U: 
              #line 3870 
    case 22U: 
              #line 3870 
    case 23U: 
              #line 3870 
    case 24U: 
              #line 3870 
    ;
    #line 3871 
    r8168c_hw_jumbo_enable(tp);
    #line 3872 
    break;
    #line 3873 
    case 25U: 
              #line 3873 
    case 26U: 
              #line 3873 
    ;
    #line 3874 
    r8168dp_hw_jumbo_enable(tp);
    #line 3875 
    break;
    #line 3876 
    case 29U: 
              #line 3876 
    case 30U: 
              #line 3876 
    case 31U: 
              #line 3876 
    ;
    #line 3877 
    r8168e_hw_jumbo_enable(tp);
    #line 3878 
    break;
    #line 3879 
    default: 
             #line 3879 
    ;
    #line 3880 
    break;
  }
  #line 3882 
  rtl_lock_config_regs(tp);
  #line 3883 
  return;
}

#line 3885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_jumbo_disable(struct rtl8169_private *tp)
{
  #line 3887 
  rtl_unlock_config_regs(tp);
  #line 3888 
  switch ((unsigned int)tp->mac_version) {
    #line 3889 
    case (unsigned int)10: 
                           #line 3889 
    ;
    #line 3890 
    case (unsigned int)15: 
                           #line 3890 
    ;
    #line 3891 
    r8168b_1_hw_jumbo_disable(tp);
    #line 3892 
    break;
    #line 3893 
    case 16U: 
              #line 3893 
    case 17U: 
              #line 3893 
    case 18U: 
              #line 3893 
    case 19U: 
              #line 3893 
    case 20U: 
              #line 3893 
    case 21U: 
              #line 3893 
    case 22U: 
              #line 3893 
    case 23U: 
              #line 3893 
    case 24U: 
              #line 3893 
    ;
    #line 3894 
    r8168c_hw_jumbo_disable(tp);
    #line 3895 
    break;
    #line 3896 
    case 25U: 
              #line 3896 
    case 26U: 
              #line 3896 
    ;
    #line 3897 
    r8168dp_hw_jumbo_disable(tp);
    #line 3898 
    break;
    #line 3899 
    case 29U: 
              #line 3899 
    case 30U: 
              #line 3899 
    case 31U: 
              #line 3899 
    ;
    #line 3900 
    r8168e_hw_jumbo_disable(tp);
    #line 3901 
    break;
    #line 3902 
    default: 
             #line 3902 
    ;
    #line 3903 
    break;
  }
  #line 3905 
  rtl_lock_config_regs(tp);
  #line 3906 
  return;
}

#line 3908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_jumbo_config(struct rtl8169_private *tp, int mtu)
{
  #line 3910 
  if (mtu > 1500) 
                  #line 3911 
                  rtl_hw_jumbo_enable(tp); else 
                                                #line 3913 
                                                rtl_hw_jumbo_disable(tp);
  #line 3914 
  return;
}

#line 3916 
#line 3916 
static bool rtl_chipcmd_cond_check(struct rtl8169_private *tp);
#line 3916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_chipcmd_cond = {.check = & rtl_chipcmd_cond_check, .msg = (char *)"rtl_chipcmd_cond"};
#line 3916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_chipcmd_cond_check(struct rtl8169_private *tp)
{
  #line 3918 
  return (_Bool)(((int)readb(tp->mmio_addr + 55U) & 16) != 0);
}

#line 3921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_reset(struct rtl8169_private *tp)
{
  #line 3923 
  writeb((unsigned char)16,tp->mmio_addr + 55U);
  #line 3925 
  rtl_udelay_loop_wait_low(tp,& rtl_chipcmd_cond,100U,100);
  #line 3926 
  return;
}

#line 3928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_request_firmware(struct rtl8169_private *tp)
{
  #line 3930 
  struct rtl_fw *rtl_fw;
  #line 3933 
  if (tp->rtl_fw != (struct rtl_fw *)0 || tp->fw_name == (char *)0) 
                                                                    #line 3934 
                                                                    return;
  #line 3936 
  rtl_fw = (struct rtl_fw *)kzalloc(104UL,3264U);
  #line 3937 
  if (rtl_fw == (struct rtl_fw *)0) {
    #line 3938 
    if ((tp->msg_enable & 32U) != 0U) 
                                      #line 3938 
                                      netdev_warn(tp->dev,(char *)"Unable to load firmware, out of memory\n");
    #line 3939 
    return;
  }
  #line 3942 
  rtl_fw->phy_write = & rtl_writephy;
  #line 3943 
  rtl_fw->phy_read = & rtl_readphy;
  #line 3944 
  rtl_fw->mac_mcu_write = & mac_mcu_write;
  #line 3945 
  rtl_fw->mac_mcu_read = & mac_mcu_read;
  #line 3946 
  rtl_fw->fw_name = tp->fw_name;
  #line 3947 
  rtl_fw->dev = tp_to_dev(tp);
  #line 3949 
  if (rtl_fw_request_firmware(rtl_fw) != 0) 
                                            #line 3950 
                                            kfree((void *)rtl_fw); else 
                                                                    #line 3952 
                                                                    tp->rtl_fw = rtl_fw;
  #line 3953 
  return;
}

#line 3955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_rx_close(struct rtl8169_private *tp)
{
  #line 3957 
  ;
  #line 3957 
  writel(readl(tp->mmio_addr + 68U) & 4294967232U,tp->mmio_addr + 68U);
  #line 3958 
  return;
}

#line 3960 
#line 3960 
static bool rtl_npq_cond_check(struct rtl8169_private *tp);
#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_npq_cond = {.check = & rtl_npq_cond_check, .msg = (char *)"rtl_npq_cond"};
#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_npq_cond_check(struct rtl8169_private *tp)
{
  #line 3962 
  return (_Bool)(((int)readb(tp->mmio_addr + 56U) & 64) != 0);
}

#line 3965 
#line 3965 
static bool rtl_txcfg_empty_cond_check(struct rtl8169_private *tp);
#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_txcfg_empty_cond = {.check = & rtl_txcfg_empty_cond_check, .msg = (char *)"rtl_txcfg_empty_cond"};
#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_txcfg_empty_cond_check(struct rtl8169_private *tp)
{
  #line 3967 
  return (_Bool)((readl(tp->mmio_addr + 64U) & 2048U) != 0U);
}

#line 3970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_hw_reset(struct rtl8169_private *tp)
{
  #line 3973 
  rtl8169_irq_mask_and_ack(tp);
  #line 3975 
  rtl_rx_close(tp);
  #line 3977 
  switch ((unsigned int)tp->mac_version) {
    #line 3978 
    case (unsigned int)25: 
                           #line 3978 
    ;
    #line 3979 
    case (unsigned int)26: 
                           #line 3979 
    ;
    #line 3980 
    case (unsigned int)29: 
                           #line 3980 
    ;
    #line 3981 
    rtl_udelay_loop_wait_low(tp,& rtl_npq_cond,20U,1764);
    #line 3982 
    break;
    #line 3983 
    case 32U: 
              #line 3983 
    case 33U: 
              #line 3983 
    case 34U: 
              #line 3983 
    case 35U: 
              #line 3983 
    case 36U: 
              #line 3983 
    ;
    #line 3984 
    case 38U: 
              #line 3984 
    case 39U: 
              #line 3984 
    case 40U: 
              #line 3984 
    case 41U: 
              #line 3984 
    case 42U: 
              #line 3984 
    case 43U: 
              #line 3984 
    case 44U: 
              #line 3984 
    case 45U: 
              #line 3984 
    case 46U: 
              #line 3984 
    case 47U: 
              #line 3984 
    case 48U: 
              #line 3984 
    case 49U: 
              #line 3984 
    case 50U: 
              #line 3984 
    ;
    #line 3985 
    ;
    #line 3985 
    writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 55U) | 128U)),tp->mmio_addr + 55U);
    #line 3986 
    rtl_udelay_loop_wait_high(tp,& rtl_txcfg_empty_cond,100U,666);
    #line 3987 
    break;
    #line 3988 
    default: 
             #line 3988 
    ;
    #line 3989 
    ;
    #line 3989 
    writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 55U) | 128U)),tp->mmio_addr + 55U);
    #line 3990 
    __const_udelay(429500UL);
    #line 3991 
    break;
  }
  #line 3994 
  rtl_hw_reset(tp);
  #line 3995 
  return;
}

#line 3997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_set_tx_config_registers(struct rtl8169_private *tp)
{
  #line 3999 
  u32 val = 50333440U;
  #line 4002 
  if ((int)rtl_is_8168evl_up(tp) != 0) 
                                       #line 4003 
                                       val |= 128U;
  #line 4005 
  writel(val,tp->mmio_addr + 64U);
  #line 4006 
  return;
}

#line 4008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_set_rx_max_size(struct rtl8169_private *tp)
{
  #line 4011 
  writew((unsigned short)16384,tp->mmio_addr + 218U);
  #line 4012 
  return;
}

#line 4014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_set_rx_tx_desc_registers(struct rtl8169_private *tp)
{
  #line 4021 
  writel((unsigned int)(tp->TxPhyAddr >> 32),tp->mmio_addr + 36U);
  #line 4022 
  writel((unsigned int)tp->TxPhyAddr,tp->mmio_addr + 32U);
  #line 4023 
  writel((unsigned int)(tp->RxPhyAddr >> 32),tp->mmio_addr + 232U);
  #line 4024 
  writel((unsigned int)tp->RxPhyAddr,tp->mmio_addr + 228U);
  #line 4025 
  return;
}

#line 4027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_set_magic_reg(struct rtl8169_private *tp, unsigned int mac_version)
{
  #line 4029 
  u32 val;
  #line 4031 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_05) 
                                                            #line 4032 
                                                            val = 1048320U;
  else 
    #line 4033 
    if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_06) 
                                                              #line 4034 
                                                              val = 16776960U; else 
                                                                    #line 4036 
                                                                    return;
  #line 4038 
  if (((int)readb(tp->mmio_addr + 83U) & 1) != 0) 
                                                  #line 4039 
                                                  val |= 255U;
  #line 4041 
  writel(val,tp->mmio_addr + 124U);
  #line 4042 
  return;
}

#line 4044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_set_rx_mode(struct net_device *dev)
{
  #line 4050 
  u32 tmp;
  #line 4046 
  u32 rx_mode = 14U;
  #line 4048 
  u32 mc_filter[2U] = {4294967295U, 4294967295U};
  #line 4049 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 4052 
  if ((dev->flags & 256U) != 0U) {
    #line 4054 
    if ((tp->msg_enable & 4U) != 0U) 
                                     #line 4054 
                                     netdev_notice(dev,(char *)"Promiscuous mode enabled\n");
    #line 4055 
    rx_mode |= 1U;
  }
  else 
    #line 4056 
    if (! ((dev->mc.count > 32 || (dev->flags & 512U) != 0U) || tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_35)) 
      #line 4060 
      if (dev->mc.count == 0) 
                              #line 4061 
                              rx_mode &= 4294967291U;
      else {
        #line 4066 
        void *__mptr;
        #line 4063 
        struct netdev_hw_addr *ha;
        #line 4065 
        mc_filter[0] = 0U;
        #line 4065 
        mc_filter[1] = mc_filter[0];
        #line 4066 
        __mptr = (void *)dev->mc.list.next;
        #line 4066 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 4066 
        while (& ha->list != & dev->mc.list) {
          #line 4066 
          void *__mptr_0;
          {
            #line 4067 
            u32 ___x;
            #line 4067 
            u32 tmp_6;
            {
              #line 4067 
              u32 __x = crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
              #line 4067 
              if (0 != 0) {
                #line 4067 
                ___x = __x;
                #line 4067 
                ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
                #line 4067 
                ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
                #line 4067 
                ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
                #line 4067 
                ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
                #line 4067 
                ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
                #line 4067 
                tmp_6 = ___x;
              }
              else 
                   #line 4067 
                   tmp_6 = __bitrev32(__x);
              }
            #line 4067 
            u32 bit_nr = tmp_6 >> 26;
            #line 4068 
            mc_filter[bit_nr >> 5] |= (unsigned int)(1UL << (bit_nr & 31U));
          }
          #line 4066 
          __mptr_0 = (void *)ha->list.next;
          #line 4066 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
        #line 4071 
        if (tp->mac_version > (unsigned int)RTL_GIGA_MAC_VER_06) {
          #line 4072 
          tmp = mc_filter[0];
          #line 4073 
          mc_filter[0] = __builtin_bswap32(mc_filter[1]);
          #line 4074 
          mc_filter[1] = __builtin_bswap32(tmp);
        }
      }
  #line 4078 
  if ((dev->features & 8796093022208ULL) != 0ULL) 
                                                  #line 4079 
                                                  rx_mode |= 48U;
  #line 4081 
  writel(mc_filter[1],tp->mmio_addr + 12U);
  #line 4082 
  writel(mc_filter[0],tp->mmio_addr + 8U);
  #line 4084 
  tmp = readl(tp->mmio_addr + 68U);
  #line 4085 
  writel((tmp & 4294967232U) | rx_mode,tp->mmio_addr + 68U);
  #line 4086 
  return;
}

#line 4088 
#line 4088 
static bool rtl_csiar_cond_check(struct rtl8169_private *tp);
#line 4088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_csiar_cond = {.check = & rtl_csiar_cond_check, .msg = (char *)"rtl_csiar_cond"};
#line 4088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_csiar_cond_check(struct rtl8169_private *tp)
{
  #line 4090 
  return (_Bool)((readl(tp->mmio_addr + 104U) & 2147483648U) != 0U);
}

#line 4093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_csi_write(struct rtl8169_private *tp, int addr, int value)
{
  #line 4095 
  u32 func = (tp->pci_dev)->devfn & 7U;
  #line 4097 
  writel((unsigned int)value,tp->mmio_addr + 100U);
  #line 4098 
  writel((((unsigned int)addr & 65535U) | (func << 16)) | 2147545088U,tp->mmio_addr + 104U);
  #line 4101 
  rtl_udelay_loop_wait_low(tp,& rtl_csiar_cond,10U,100);
  #line 4102 
  return;
}

#line 4104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static u32 rtl_csi_read(struct rtl8169_private *tp, int addr)
{
  #line 4112 
  unsigned int tmp_1;
  #line 4106 
  u32 func = (tp->pci_dev)->devfn & 7U;
  #line 4108 
  writel((((unsigned int)addr & 4095U) | (func << 16)) | 61440U,tp->mmio_addr + 104U);
  #line 4112 
  if ((int)rtl_udelay_loop_wait_high(tp,& rtl_csiar_cond,10U,100) != 0) 
    #line 4112 
    tmp_1 = readl(tp->mmio_addr + 100U); else 
                                              #line 4112 
                                              tmp_1 = 4294967295U;
  #line 4112 
  return tmp_1;
}

#line 4115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_csi_access_enable(struct rtl8169_private *tp, u8 val)
{
  #line 4118 
  u32 csi;
  #line 4117 
  struct pci_dev *pdev = tp->pci_dev;
  #line 4124 
  if (pdev->cfg_size > 1807) {
    #line 4124 
    if (pci_write_config_byte(pdev,1807,(unsigned char)((int)val)) == 0) 
      #line 4126 
      return;
  }
  {
    #line 4128 
    bool __print_once;
    #line 4128 
    if (! __print_once) {
      #line 4128 
      __print_once = (_Bool)1;
      #line 4128 
      netdev_printk((char *)"\001",tp->dev,(char *)"No native access to PCI extended config space, falling back to CSI\n");
    }
  }
  #line 4130 
  csi = rtl_csi_read(tp,1804) & 16777215U;
  #line 4131 
  rtl_csi_write(tp,1804,(int)((unsigned int)((int)val << 24) | csi));
  #line 4132 
  return;
}

#line 4134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_set_def_aspm_entry_latency(struct rtl8169_private *tp)
{
  #line 4136 
  rtl_csi_access_enable(tp,(unsigned char)39);
  #line 4137 
  return;
}

#line 4145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void __rtl_ephy_init(struct rtl8169_private *tp, struct ephy_info *e, int len)
{
  #line 4148 
  u16 w;
  #line 4150 
  while (1) {
    #line 4150 
    int tmp_0;
    #line 4150 
    tmp_0 = len;
    #line 4150 
    len --;
    #line 4150 
    ;
    #line 4150 
    if (! (tmp_0 > 0)) 
                       #line 4150 
                       break;
    {
      #line 4151 
      w = (unsigned short)(((int)rtl_ephy_read(tp,(int)e->offset) & ~ ((int)e->mask)) | (int)e->bits);
      #line 4152 
      rtl_ephy_write(tp,(int)e->offset,(int)w);
      #line 4153 
      e ++;
    }
  }
  #line 4155 
  return;
}

#line 4159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_disable_clock_request(struct rtl8169_private *tp)
{
  #line 4161 
  pcie_capability_clear_word(tp->pci_dev,16,(unsigned short)256);
  #line 4162 
  return;
}

#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_enable_clock_request(struct rtl8169_private *tp)
{
  #line 4167 
  pcie_capability_set_word(tp->pci_dev,16,(unsigned short)256);
  #line 4168 
  return;
}

#line 4171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_pcie_state_l2l3_disable(struct rtl8169_private *tp)
{
  #line 4174 
  ;
  #line 4174 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 253),tp->mmio_addr + 84U);
  #line 4175 
  return;
}

#line 4177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_aspm_clkreq_enable(struct rtl8169_private *tp, bool enable)
{
  #line 4180 
  if ((int)enable != 0 && (unsigned int)tp->aspm_manageable != 0U) {
    #line 4181 
    ;
    #line 4181 
    writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 86U) | 1U)),tp->mmio_addr + 86U);
    #line 4182 
    ;
    #line 4182 
    writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 83U) | 128U)),tp->mmio_addr + 83U);
  }
  else {
    #line 4184 
    ;
    #line 4184 
    writeb((unsigned char)((int)readb(tp->mmio_addr + 83U) & 127),tp->mmio_addr + 83U);
    #line 4185 
    ;
    #line 4185 
    writeb((unsigned char)((int)readb(tp->mmio_addr + 86U) & 254),tp->mmio_addr + 86U);
  }
  #line 4188 
  __const_udelay(42950UL);
  #line 4190 
  return;
}

#line 4191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_set_fifo_size(struct rtl8169_private *tp, u16 rx_stat, u16 tx_stat, u16 rx_dyn, u16 tx_dyn)
{
  #line 4197 
  rtl_eri_write(tp,200,61440U,(unsigned int)(((int)rx_stat << 16) | (int)rx_dyn));
  #line 4198 
  rtl_eri_write(tp,232,61440U,(unsigned int)(((int)tx_stat << 16) | (int)tx_dyn));
  #line 4199 
  return;
}

#line 4201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8168g_set_pause_thresholds(struct rtl8169_private *tp, u8 low, u8 high)
{
  #line 4205 
  rtl_eri_write(tp,204,4096U,(unsigned int)low);
  #line 4206 
  rtl_eri_write(tp,208,4096U,(unsigned int)high);
  #line 4207 
  return;
}

#line 4209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168b(struct rtl8169_private *tp)
{
  #line 4211 
  ;
  #line 4211 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 254),tp->mmio_addr + 84U);
  #line 4212 
  return;
}

#line 4214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void __rtl_hw_start_8168cp(struct rtl8169_private *tp)
{
  #line 4216 
  ;
  #line 4216 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 82U) | 16U)),tp->mmio_addr + 82U);
  #line 4218 
  ;
  #line 4218 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 254),tp->mmio_addr + 84U);
  #line 4220 
  rtl_disable_clock_request(tp);
  #line 4221 
  return;
}

#line 4223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168cp_1(struct rtl8169_private *tp)
{
  #line 4225 
  struct ephy_info e_info_8168cp[5U] = {{.offset = 1U, .mask = (unsigned short)0U, .bits = (unsigned short)1U}, {.offset = 2U, .mask = (unsigned short)2048U, .bits = (unsigned short)4096U}, {.offset = 3U, .mask = (unsigned short)0U, .bits = (unsigned short)66U}, {.offset = 6U, .mask = (unsigned short)128U, .bits = (unsigned short)0U}, {.offset = 7U, .mask = (unsigned short)0U, .bits = (unsigned short)8192U}};
  #line 4233 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4235 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168cp),5);
  #line 4237 
  __rtl_hw_start_8168cp(tp);
  #line 4238 
  return;
}

#line 4240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168cp_2(struct rtl8169_private *tp)
{
  #line 4242 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4244 
  ;
  #line 4244 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 254),tp->mmio_addr + 84U);
  #line 4245 
  return;
}

#line 4247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168cp_3(struct rtl8169_private *tp)
{
  #line 4249 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4251 
  ;
  #line 4251 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 254),tp->mmio_addr + 84U);
  #line 4254 
  writeb((unsigned char)32,tp->mmio_addr + 209U);
  #line 4255 
  return;
}

#line 4257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168c_1(struct rtl8169_private *tp)
{
  #line 4259 
  struct ephy_info e_info_8168c_1[3U] = {{.offset = 2U, .mask = (unsigned short)2048U, .bits = (unsigned short)4096U}, {.offset = 3U, .mask = (unsigned short)0U, .bits = (unsigned short)2U}, {.offset = 6U, .mask = (unsigned short)128U, .bits = (unsigned short)0U}};
  #line 4265 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4267 
  writeb((unsigned char)30,tp->mmio_addr + 209U);
  #line 4269 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168c_1),3);
  #line 4271 
  __rtl_hw_start_8168cp(tp);
  #line 4272 
  return;
}

#line 4274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168c_2(struct rtl8169_private *tp)
{
  #line 4276 
  struct ephy_info e_info_8168c_2[2U] = {{.offset = 1U, .mask = (unsigned short)0U, .bits = (unsigned short)1U}, {.offset = 3U, .mask = (unsigned short)1024U, .bits = (unsigned short)32U}};
  #line 4281 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4283 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168c_2),2);
  #line 4285 
  __rtl_hw_start_8168cp(tp);
  #line 4286 
  return;
}

#line 4288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168c_3(struct rtl8169_private *tp)
{
  #line 4290 
  rtl_hw_start_8168c_2(tp);
  #line 4291 
  return;
}

#line 4293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168c_4(struct rtl8169_private *tp)
{
  #line 4295 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4297 
  __rtl_hw_start_8168cp(tp);
  #line 4298 
  return;
}

#line 4300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168d(struct rtl8169_private *tp)
{
  #line 4302 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4304 
  rtl_disable_clock_request(tp);
  #line 4305 
  return;
}

#line 4307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168d_4(struct rtl8169_private *tp)
{
  #line 4309 
  struct ephy_info e_info_8168d_4[4U] = {{.offset = 11U, .mask = (unsigned short)0U, .bits = (unsigned short)72U}, {.offset = 25U, .mask = (unsigned short)32U, .bits = (unsigned short)80U}, {.offset = 12U, .mask = (unsigned short)256U, .bits = (unsigned short)32U}, {.offset = 16U, .mask = (unsigned short)4U, .bits = (unsigned short)0U}};
  #line 4316 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4318 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168d_4),4);
  #line 4320 
  rtl_enable_clock_request(tp);
  #line 4321 
  return;
}

#line 4323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168e_1(struct rtl8169_private *tp)
{
  #line 4325 
  struct ephy_info e_info_8168e_1[13U] = {{.offset = 0U, .mask = (unsigned short)512U, .bits = (unsigned short)256U}, {.offset = 0U, .mask = (unsigned short)0U, .bits = (unsigned short)4U}, {.offset = 6U, .mask = (unsigned short)2U, .bits = (unsigned short)1U}, {.offset = 6U, .mask = (unsigned short)0U, .bits = (unsigned short)48U}, {.offset = 7U, .mask = (unsigned short)0U, .bits = (unsigned short)8192U}, {.offset = 0U, .mask = (unsigned short)0U, .bits = (unsigned short)32U}, {.offset = 3U, .mask = (unsigned short)22528U, .bits = (unsigned short)8192U}, {.offset = 3U, .mask = (unsigned short)0U, .bits = (unsigned short)1U}, {.offset = 1U, .mask = (unsigned short)2048U, .bits = (unsigned short)4096U}, {.offset = 7U, .mask = (unsigned short)0U, .bits = (unsigned short)16384U}, {.offset = 30U, .mask = (unsigned short)0U, .bits = (unsigned short)8192U}, {.offset = 25U, .mask = (unsigned short)65535U, .bits = (unsigned short)65132U}, {.offset = 10U, .mask = (unsigned short)0U, .bits = (unsigned short)64U}};
  #line 4341 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4343 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168e_1),13);
  #line 4345 
  rtl_disable_clock_request(tp);
  #line 4348 
  ;
  #line 4348 
  writel(readl(tp->mmio_addr + 240U) | 536870912U,tp->mmio_addr + 240U);
  #line 4349 
  ;
  #line 4349 
  writel(readl(tp->mmio_addr + 240U) & 3758096383U,tp->mmio_addr + 240U);
  #line 4351 
  ;
  #line 4351 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 86U) & 247),tp->mmio_addr + 86U);
  #line 4352 
  return;
}

#line 4354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168e_2(struct rtl8169_private *tp)
{
  #line 4356 
  struct ephy_info e_info_8168e_2[4U] = {{.offset = 9U, .mask = (unsigned short)0U, .bits = (unsigned short)128U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)548U}, {.offset = 0U, .mask = (unsigned short)0U, .bits = (unsigned short)4U}, {.offset = 12U, .mask = (unsigned short)15856U, .bits = (unsigned short)512U}};
  #line 4363 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4365 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168e_2),4);
  #line 4367 
  rtl_eri_write(tp,192,12288U,0U);
  #line 4368 
  rtl_eri_write(tp,184,12288U,0U);
  #line 4369 
  rtl_set_fifo_size(tp,(unsigned short)16,(unsigned short)16,(unsigned short)2,(unsigned short)6);
  #line 4370 
  rtl_eri_write(tp,204,61440U,80U);
  #line 4371 
  rtl_eri_write(tp,208,61440U,134152288U);
  #line 4372 
  rtl_eri_set_bits(tp,432,4096U,16U);
  #line 4373 
  rtl_w0w1_eri(tp,212,12288U,3072U,65280U);
  #line 4375 
  rtl_disable_clock_request(tp);
  #line 4377 
  ;
  #line 4377 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 211U) & 127),tp->mmio_addr + 211U);
  #line 4379 
  rtl8168_config_eee_mac(tp);
  #line 4381 
  ;
  #line 4381 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 208U) | 64U)),tp->mmio_addr + 208U);
  #line 4382 
  ;
  #line 4382 
  writel(readl(tp->mmio_addr + 240U) | 4194304U,tp->mmio_addr + 240U);
  #line 4383 
  ;
  #line 4383 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 86U) & 247),tp->mmio_addr + 86U);
  #line 4385 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4386 
  return;
}

#line 4388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168f(struct rtl8169_private *tp)
{
  #line 4390 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4392 
  rtl_eri_write(tp,192,12288U,0U);
  #line 4393 
  rtl_eri_write(tp,184,12288U,0U);
  #line 4394 
  rtl_set_fifo_size(tp,(unsigned short)16,(unsigned short)16,(unsigned short)2,(unsigned short)6);
  #line 4395 
  rtl_reset_packet_filter(tp);
  #line 4396 
  rtl_eri_set_bits(tp,432,4096U,16U);
  #line 4397 
  rtl_eri_set_bits(tp,464,4096U,16U);
  #line 4398 
  rtl_eri_write(tp,204,61440U,80U);
  #line 4399 
  rtl_eri_write(tp,208,61440U,96U);
  #line 4401 
  rtl_disable_clock_request(tp);
  #line 4403 
  ;
  #line 4403 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 211U) & 127),tp->mmio_addr + 211U);
  #line 4404 
  ;
  #line 4404 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 208U) | 64U)),tp->mmio_addr + 208U);
  #line 4405 
  ;
  #line 4405 
  writel(readl(tp->mmio_addr + 240U) | 4194304U,tp->mmio_addr + 240U);
  #line 4406 
  ;
  #line 4406 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 86U) & 247),tp->mmio_addr + 86U);
  #line 4408 
  rtl8168_config_eee_mac(tp);
  #line 4409 
  return;
}

#line 4411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168f_1(struct rtl8169_private *tp)
{
  #line 4413 
  struct ephy_info e_info_8168f_1[6U] = {{.offset = 6U, .mask = (unsigned short)192U, .bits = (unsigned short)32U}, {.offset = 8U, .mask = (unsigned short)1U, .bits = (unsigned short)2U}, {.offset = 9U, .mask = (unsigned short)0U, .bits = (unsigned short)128U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)548U}, {.offset = 0U, .mask = (unsigned short)0U, .bits = (unsigned short)4U}, {.offset = 12U, .mask = (unsigned short)15856U, .bits = (unsigned short)512U}};
  #line 4422 
  rtl_hw_start_8168f(tp);
  #line 4424 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168f_1),6);
  #line 4426 
  rtl_w0w1_eri(tp,212,12288U,3072U,65280U);
  #line 4427 
  return;
}

#line 4429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8411(struct rtl8169_private *tp)
{
  #line 4431 
  struct ephy_info e_info_8168f_1[5U] = {{.offset = 6U, .mask = (unsigned short)192U, .bits = (unsigned short)32U}, {.offset = 15U, .mask = (unsigned short)65535U, .bits = (unsigned short)20992U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)548U}, {.offset = 0U, .mask = (unsigned short)0U, .bits = (unsigned short)4U}, {.offset = 12U, .mask = (unsigned short)15856U, .bits = (unsigned short)512U}};
  #line 4439 
  rtl_hw_start_8168f(tp);
  #line 4440 
  rtl_pcie_state_l2l3_disable(tp);
  #line 4442 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168f_1),5);
  #line 4444 
  rtl_eri_set_bits(tp,212,12288U,3072U);
  #line 4445 
  return;
}

#line 4447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168g(struct rtl8169_private *tp)
{
  #line 4449 
  rtl_set_fifo_size(tp,(unsigned short)8,(unsigned short)16,(unsigned short)2,(unsigned short)6);
  #line 4450 
  rtl8168g_set_pause_thresholds(tp,(unsigned char)56,(unsigned char)72);
  #line 4452 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4454 
  rtl_reset_packet_filter(tp);
  #line 4455 
  rtl_eri_write(tp,760,12288U,7567U);
  #line 4457 
  ;
  #line 4457 
  writel(readl(tp->mmio_addr + 240U) & 4294443007U,tp->mmio_addr + 240U);
  #line 4459 
  rtl_eri_write(tp,192,12288U,0U);
  #line 4460 
  rtl_eri_write(tp,184,12288U,0U);
  #line 4462 
  rtl8168_config_eee_mac(tp);
  #line 4464 
  rtl_w0w1_eri(tp,764,4096U,1U,6U);
  #line 4465 
  rtl_eri_clear_bits(tp,432,12288U,4096U);
  #line 4467 
  rtl_pcie_state_l2l3_disable(tp);
  #line 4468 
  return;
}

#line 4470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168g_1(struct rtl8169_private *tp)
{
  #line 4472 
  struct ephy_info e_info_8168g_1[4U] = {{.offset = 0U, .mask = (unsigned short)8U, .bits = (unsigned short)0U}, {.offset = 12U, .mask = (unsigned short)16368U, .bits = (unsigned short)2080U}, {.offset = 30U, .mask = (unsigned short)0U, .bits = (unsigned short)1U}, {.offset = 25U, .mask = (unsigned short)32768U, .bits = (unsigned short)0U}};
  #line 4479 
  rtl_hw_start_8168g(tp);
  #line 4482 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4483 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168g_1),4);
  #line 4484 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4485 
  return;
}

#line 4487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168g_2(struct rtl8169_private *tp)
{
  #line 4489 
  struct ephy_info e_info_8168g_2[9U] = {{.offset = 0U, .mask = (unsigned short)8U, .bits = (unsigned short)0U}, {.offset = 12U, .mask = (unsigned short)16368U, .bits = (unsigned short)2080U}, {.offset = 25U, .mask = (unsigned short)65535U, .bits = (unsigned short)31744U}, {.offset = 30U, .mask = (unsigned short)65535U, .bits = (unsigned short)8427U}, {.offset = 13U, .mask = (unsigned short)65535U, .bits = (unsigned short)5734U}, {.offset = 0U, .mask = (unsigned short)65535U, .bits = (unsigned short)4259U}, {.offset = 6U, .mask = (unsigned short)65535U, .bits = (unsigned short)61520U}, {.offset = 4U, .mask = (unsigned short)0U, .bits = (unsigned short)16U}, {.offset = 29U, .mask = (unsigned short)16384U, .bits = (unsigned short)0U}};
  #line 4501 
  rtl_hw_start_8168g(tp);
  #line 4504 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4505 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168g_2),9);
  #line 4506 
  return;
}

#line 4508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8411_2(struct rtl8169_private *tp)
{
  #line 4510 
  struct ephy_info e_info_8411_2[10U] = {{.offset = 0U, .mask = (unsigned short)8U, .bits = (unsigned short)0U}, {.offset = 12U, .mask = (unsigned short)14288U, .bits = (unsigned short)2080U}, {.offset = 30U, .mask = (unsigned short)0U, .bits = (unsigned short)1U}, {.offset = 25U, .mask = (unsigned short)32801U, .bits = (unsigned short)0U}, {.offset = 30U, .mask = (unsigned short)0U, .bits = (unsigned short)8192U}, {.offset = 13U, .mask = (unsigned short)256U, .bits = (unsigned short)512U}, {.offset = 0U, .mask = (unsigned short)0U, .bits = (unsigned short)128U}, {.offset = 6U, .mask = (unsigned short)0U, .bits = (unsigned short)16U}, {.offset = 4U, .mask = (unsigned short)0U, .bits = (unsigned short)16U}, {.offset = 29U, .mask = (unsigned short)0U, .bits = (unsigned short)16384U}};
  #line 4523 
  rtl_hw_start_8168g(tp);
  #line 4526 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4527 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8411_2),10);
  #line 4532 
  r8168_mac_ocp_write(tp,64552U,0U);
  #line 4533 
  r8168_mac_ocp_write(tp,64554U,0U);
  #line 4534 
  r8168_mac_ocp_write(tp,64556U,0U);
  #line 4535 
  r8168_mac_ocp_write(tp,64558U,0U);
  #line 4536 
  r8168_mac_ocp_write(tp,64560U,0U);
  #line 4537 
  r8168_mac_ocp_write(tp,64562U,0U);
  #line 4538 
  r8168_mac_ocp_write(tp,64564U,0U);
  #line 4539 
  r8168_mac_ocp_write(tp,64566U,0U);
  #line 4540 
  __const_udelay(12885000UL);
  #line 4541 
  r8168_mac_ocp_write(tp,64550U,0U);
  #line 4543 
  r8168_mac_ocp_write(tp,63488U,57352U);
  #line 4544 
  r8168_mac_ocp_write(tp,63490U,57354U);
  #line 4545 
  r8168_mac_ocp_write(tp,63492U,57356U);
  #line 4546 
  r8168_mac_ocp_write(tp,63494U,57358U);
  #line 4547 
  r8168_mac_ocp_write(tp,63496U,57383U);
  #line 4548 
  r8168_mac_ocp_write(tp,63498U,57423U);
  #line 4549 
  r8168_mac_ocp_write(tp,63500U,57438U);
  #line 4550 
  r8168_mac_ocp_write(tp,63502U,57445U);
  #line 4551 
  r8168_mac_ocp_write(tp,63504U,50690U);
  #line 4552 
  r8168_mac_ocp_write(tp,63506U,48640U);
  #line 4553 
  r8168_mac_ocp_write(tp,63508U,0U);
  #line 4554 
  r8168_mac_ocp_write(tp,63510U,50434U);
  #line 4555 
  r8168_mac_ocp_write(tp,63512U,48384U);
  #line 4556 
  r8168_mac_ocp_write(tp,63514U,1868U);
  #line 4557 
  r8168_mac_ocp_write(tp,63516U,49922U);
  #line 4558 
  r8168_mac_ocp_write(tp,63518U,47872U);
  #line 4559 
  r8168_mac_ocp_write(tp,63520U,2058U);
  #line 4560 
  r8168_mac_ocp_write(tp,63522U,25632U);
  #line 4561 
  r8168_mac_ocp_write(tp,63524U,18626U);
  #line 4562 
  r8168_mac_ocp_write(tp,63526U,35872U);
  #line 4563 
  r8168_mac_ocp_write(tp,63528U,50454U);
  #line 4564 
  r8168_mac_ocp_write(tp,63530U,25764U);
  #line 4565 
  r8168_mac_ocp_write(tp,63532U,18880U);
  #line 4566 
  r8168_mac_ocp_write(tp,63534U,61449U);
  #line 4567 
  r8168_mac_ocp_write(tp,63536U,29858U);
  #line 4568 
  r8168_mac_ocp_write(tp,63538U,36005U);
  #line 4569 
  r8168_mac_ocp_write(tp,63540U,29856U);
  #line 4570 
  r8168_mac_ocp_write(tp,63542U,50446U);
  #line 4571 
  r8168_mac_ocp_write(tp,63544U,40098U);
  #line 4572 
  r8168_mac_ocp_write(tp,63546U,7185U);
  #line 4573 
  r8168_mac_ocp_write(tp,63548U,40096U);
  #line 4574 
  r8168_mac_ocp_write(tp,63550U,57350U);
  #line 4575 
  r8168_mac_ocp_write(tp,63552U,29944U);
  #line 4576 
  r8168_mac_ocp_write(tp,63554U,18628U);
  #line 4577 
  r8168_mac_ocp_write(tp,63556U,36088U);
  #line 4578 
  r8168_mac_ocp_write(tp,63558U,50180U);
  #line 4579 
  r8168_mac_ocp_write(tp,63560U,48128U);
  #line 4580 
  r8168_mac_ocp_write(tp,63562U,50179U);
  #line 4581 
  r8168_mac_ocp_write(tp,63564U,48128U);
  #line 4582 
  r8168_mac_ocp_write(tp,63566U,3058U);
  #line 4583 
  r8168_mac_ocp_write(tp,63568U,3082U);
  #line 4584 
  r8168_mac_ocp_write(tp,63570U,58420U);
  #line 4585 
  r8168_mac_ocp_write(tp,63572U,54208U);
  #line 4586 
  r8168_mac_ocp_write(tp,63574U,18905U);
  #line 4587 
  r8168_mac_ocp_write(tp,63576U,61471U);
  #line 4588 
  r8168_mac_ocp_write(tp,63578U,50470U);
  #line 4589 
  r8168_mac_ocp_write(tp,63580U,25765U);
  #line 4590 
  r8168_mac_ocp_write(tp,63582U,5120U);
  #line 4591 
  r8168_mac_ocp_write(tp,63584U,61447U);
  #line 4592 
  r8168_mac_ocp_write(tp,63586U,3073U);
  #line 4593 
  r8168_mac_ocp_write(tp,63588U,36005U);
  #line 4594 
  r8168_mac_ocp_write(tp,63590U,7189U);
  #line 4595 
  r8168_mac_ocp_write(tp,63592U,50459U);
  #line 4596 
  r8168_mac_ocp_write(tp,63594U,40096U);
  #line 4597 
  r8168_mac_ocp_write(tp,63596U,57363U);
  #line 4598 
  r8168_mac_ocp_write(tp,63598U,50457U);
  #line 4599 
  r8168_mac_ocp_write(tp,63600U,29856U);
  #line 4600 
  r8168_mac_ocp_write(tp,63602U,18628U);
  #line 4601 
  r8168_mac_ocp_write(tp,63604U,36000U);
  #line 4602 
  r8168_mac_ocp_write(tp,63606U,50454U);
  #line 4603 
  r8168_mac_ocp_write(tp,63608U,29860U);
  #line 4604 
  r8168_mac_ocp_write(tp,63610U,18632U);
  #line 4605 
  r8168_mac_ocp_write(tp,63612U,18634U);
  #line 4606 
  r8168_mac_ocp_write(tp,63614U,40100U);
  #line 4607 
  r8168_mac_ocp_write(tp,63616U,50450U);
  #line 4608 
  r8168_mac_ocp_write(tp,63618U,6912U);
  #line 4609 
  r8168_mac_ocp_write(tp,63620U,39840U);
  #line 4610 
  r8168_mac_ocp_write(tp,63622U,6940U);
  #line 4611 
  r8168_mac_ocp_write(tp,63624U,18495U);
  #line 4612 
  r8168_mac_ocp_write(tp,63626U,39842U);
  #line 4613 
  r8168_mac_ocp_write(tp,63628U,6916U);
  #line 4614 
  r8168_mac_ocp_write(tp,63630U,50440U);
  #line 4615 
  r8168_mac_ocp_write(tp,63632U,39840U);
  #line 4616 
  r8168_mac_ocp_write(tp,63634U,50437U);
  #line 4617 
  r8168_mac_ocp_write(tp,63636U,48384U);
  #line 4618 
  r8168_mac_ocp_write(tp,63638U,50434U);
  #line 4619 
  r8168_mac_ocp_write(tp,63640U,48384U);
  #line 4620 
  r8168_mac_ocp_write(tp,63642U,768U);
  #line 4621 
  r8168_mac_ocp_write(tp,63644U,1310U);
  #line 4622 
  r8168_mac_ocp_write(tp,63646U,58420U);
  #line 4623 
  r8168_mac_ocp_write(tp,63648U,57368U);
  #line 4624 
  r8168_mac_ocp_write(tp,63650U,57490U);
  #line 4625 
  r8168_mac_ocp_write(tp,63652U,56864U);
  #line 4626 
  r8168_mac_ocp_write(tp,63654U,54208U);
  #line 4627 
  r8168_mac_ocp_write(tp,63656U,50447U);
  #line 4628 
  r8168_mac_ocp_write(tp,63658U,30372U);
  #line 4629 
  r8168_mac_ocp_write(tp,63660U,18915U);
  #line 4630 
  r8168_mac_ocp_write(tp,63662U,61447U);
  #line 4631 
  r8168_mac_ocp_write(tp,63664U,18880U);
  #line 4632 
  r8168_mac_ocp_write(tp,63666U,61699U);
  #line 4633 
  r8168_mac_ocp_write(tp,63668U,50695U);
  #line 4634 
  r8168_mac_ocp_write(tp,63670U,48640U);
  #line 4635 
  r8168_mac_ocp_write(tp,63672U,50694U);
  #line 4636 
  r8168_mac_ocp_write(tp,63674U,48640U);
  #line 4637 
  r8168_mac_ocp_write(tp,63676U,50690U);
  #line 4638 
  r8168_mac_ocp_write(tp,63678U,48640U);
  #line 4639 
  r8168_mac_ocp_write(tp,63680U,3148U);
  #line 4640 
  r8168_mac_ocp_write(tp,63682U,3112U);
  #line 4641 
  r8168_mac_ocp_write(tp,63684U,3116U);
  #line 4642 
  r8168_mac_ocp_write(tp,63686U,56320U);
  #line 4643 
  r8168_mac_ocp_write(tp,63688U,50951U);
  #line 4644 
  r8168_mac_ocp_write(tp,63690U,7424U);
  #line 4645 
  r8168_mac_ocp_write(tp,63692U,36322U);
  #line 4646 
  r8168_mac_ocp_write(tp,63694U,18625U);
  #line 4647 
  r8168_mac_ocp_write(tp,63696U,50434U);
  #line 4648 
  r8168_mac_ocp_write(tp,63698U,48384U);
  #line 4649 
  r8168_mac_ocp_write(tp,63700U,170U);
  #line 4650 
  r8168_mac_ocp_write(tp,63702U,57536U);
  #line 4651 
  r8168_mac_ocp_write(tp,63704U,50434U);
  #line 4652 
  r8168_mac_ocp_write(tp,63706U,48384U);
  #line 4653 
  r8168_mac_ocp_write(tp,63708U,306U);
  #line 4655 
  r8168_mac_ocp_write(tp,64550U,32768U);
  #line 4657 
  r8168_mac_ocp_write(tp,64554U,1859U);
  #line 4658 
  r8168_mac_ocp_write(tp,64556U,2049U);
  #line 4659 
  r8168_mac_ocp_write(tp,64558U,3049U);
  #line 4660 
  r8168_mac_ocp_write(tp,64560U,765U);
  #line 4661 
  r8168_mac_ocp_write(tp,64562U,3109U);
  #line 4662 
  r8168_mac_ocp_write(tp,64564U,169U);
  #line 4663 
  r8168_mac_ocp_write(tp,64566U,301U);
  #line 4665 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4666 
  return;
}

#line 4668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168h_1(struct rtl8169_private *tp)
{
  #line 4678 
  int rg_saw_cnt;
  #line 4670 
  struct ephy_info e_info_8168h_1[6U] = {{.offset = 30U, .mask = (unsigned short)2048U, .bits = (unsigned short)1U}, {.offset = 29U, .mask = (unsigned short)0U, .bits = (unsigned short)2048U}, {.offset = 5U, .mask = (unsigned short)65535U, .bits = (unsigned short)8329U}, {.offset = 6U, .mask = (unsigned short)65535U, .bits = (unsigned short)22657U}, {.offset = 4U, .mask = (unsigned short)65535U, .bits = (unsigned short)34122U}, {.offset = 1U, .mask = (unsigned short)65535U, .bits = (unsigned short)1675U}};
  #line 4681 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4682 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168h_1),6);
  #line 4684 
  rtl_set_fifo_size(tp,(unsigned short)8,(unsigned short)16,(unsigned short)2,(unsigned short)6);
  #line 4685 
  rtl8168g_set_pause_thresholds(tp,(unsigned char)56,(unsigned char)72);
  #line 4687 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4689 
  rtl_reset_packet_filter(tp);
  #line 4691 
  rtl_eri_set_bits(tp,220,61440U,16U);
  #line 4693 
  rtl_eri_set_bits(tp,212,61440U,7936U);
  #line 4695 
  rtl_eri_write(tp,1520,12288U,20359U);
  #line 4697 
  ;
  #line 4697 
  writel(readl(tp->mmio_addr + 240U) & 4294443007U,tp->mmio_addr + 240U);
  #line 4699 
  rtl_eri_write(tp,192,12288U,0U);
  #line 4700 
  rtl_eri_write(tp,184,12288U,0U);
  #line 4702 
  rtl8168_config_eee_mac(tp);
  #line 4704 
  ;
  #line 4704 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 191),tp->mmio_addr + 208U);
  #line 4705 
  ;
  #line 4705 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 242U) & 191),tp->mmio_addr + 242U);
  #line 4707 
  ;
  #line 4707 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 127),tp->mmio_addr + 208U);
  #line 4709 
  rtl_eri_clear_bits(tp,432,12288U,4096U);
  #line 4711 
  rtl_pcie_state_l2l3_disable(tp);
  #line 4713 
  rtl_writephy(tp,31,3138);
  #line 4714 
  rg_saw_cnt = rtl_readphy(tp,19) & 16383;
  #line 4715 
  rtl_writephy(tp,31,0);
  #line 4716 
  if (rg_saw_cnt > 0) {
    #line 4717 
    u16 sw_cnt_1ms_ini;
    #line 4719 
    sw_cnt_1ms_ini = (unsigned short)(16000000 / rg_saw_cnt);
    #line 4720 
    sw_cnt_1ms_ini = (unsigned short)((unsigned int)sw_cnt_1ms_ini & 4095U);
    #line 4721 
    r8168_mac_ocp_modify(tp,54290U,(unsigned short)4095,(unsigned short)((int)sw_cnt_1ms_ini));
  }
  #line 4724 
  r8168_mac_ocp_modify(tp,57430U,(unsigned short)240,(unsigned short)112);
  #line 4725 
  r8168_mac_ocp_modify(tp,57426U,(unsigned short)24576,(unsigned short)32776);
  #line 4726 
  r8168_mac_ocp_modify(tp,57558U,(unsigned short)511,(unsigned short)383);
  #line 4727 
  r8168_mac_ocp_modify(tp,54304U,(unsigned short)4095,(unsigned short)1151);
  #line 4729 
  r8168_mac_ocp_write(tp,58942U,1U);
  #line 4730 
  r8168_mac_ocp_write(tp,58942U,0U);
  #line 4731 
  r8168_mac_ocp_write(tp,49300U,0U);
  #line 4732 
  r8168_mac_ocp_write(tp,49310U,0U);
  #line 4734 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4735 
  return;
}

#line 4737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168ep(struct rtl8169_private *tp)
{
  #line 4739 
  rtl8168ep_stop_cmac(tp);
  #line 4741 
  rtl_set_fifo_size(tp,(unsigned short)8,(unsigned short)16,(unsigned short)2,(unsigned short)6);
  #line 4742 
  rtl8168g_set_pause_thresholds(tp,(unsigned char)47,(unsigned char)95);
  #line 4744 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4746 
  rtl_reset_packet_filter(tp);
  #line 4748 
  rtl_eri_set_bits(tp,212,61440U,8064U);
  #line 4750 
  rtl_eri_write(tp,1520,12288U,20359U);
  #line 4752 
  ;
  #line 4752 
  writel(readl(tp->mmio_addr + 240U) & 4294443007U,tp->mmio_addr + 240U);
  #line 4754 
  rtl_eri_write(tp,192,12288U,0U);
  #line 4755 
  rtl_eri_write(tp,184,12288U,0U);
  #line 4757 
  rtl8168_config_eee_mac(tp);
  #line 4759 
  rtl_w0w1_eri(tp,764,4096U,1U,6U);
  #line 4761 
  ;
  #line 4761 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 127),tp->mmio_addr + 208U);
  #line 4763 
  rtl_pcie_state_l2l3_disable(tp);
  #line 4764 
  return;
}

#line 4766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168ep_1(struct rtl8169_private *tp)
{
  #line 4768 
  struct ephy_info e_info_8168ep_1[5U] = {{.offset = 0U, .mask = (unsigned short)65535U, .bits = (unsigned short)4267U}, {.offset = 6U, .mask = (unsigned short)65535U, .bits = (unsigned short)61488U}, {.offset = 8U, .mask = (unsigned short)65535U, .bits = (unsigned short)8198U}, {.offset = 13U, .mask = (unsigned short)65535U, .bits = (unsigned short)5734U}, {.offset = 12U, .mask = (unsigned short)16368U, .bits = (unsigned short)0U}};
  #line 4777 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4778 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168ep_1),5);
  #line 4780 
  rtl_hw_start_8168ep(tp);
  #line 4782 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4783 
  return;
}

#line 4785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168ep_2(struct rtl8169_private *tp)
{
  #line 4787 
  struct ephy_info e_info_8168ep_2[3U] = {{.offset = 0U, .mask = (unsigned short)65535U, .bits = (unsigned short)4259U}, {.offset = 25U, .mask = (unsigned short)65535U, .bits = (unsigned short)64512U}, {.offset = 30U, .mask = (unsigned short)65535U, .bits = (unsigned short)8426U}};
  #line 4794 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4795 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168ep_2),3);
  #line 4797 
  rtl_hw_start_8168ep(tp);
  #line 4799 
  ;
  #line 4799 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 191),tp->mmio_addr + 208U);
  #line 4800 
  ;
  #line 4800 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 242U) & 191),tp->mmio_addr + 242U);
  #line 4802 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4803 
  return;
}

#line 4805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168ep_3(struct rtl8169_private *tp)
{
  #line 4807 
  struct ephy_info e_info_8168ep_3[4U] = {{.offset = 0U, .mask = (unsigned short)0U, .bits = (unsigned short)128U}, {.offset = 13U, .mask = (unsigned short)256U, .bits = (unsigned short)512U}, {.offset = 25U, .mask = (unsigned short)32801U, .bits = (unsigned short)0U}, {.offset = 30U, .mask = (unsigned short)0U, .bits = (unsigned short)8192U}};
  #line 4815 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4816 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8168ep_3),4);
  #line 4818 
  rtl_hw_start_8168ep(tp);
  #line 4820 
  ;
  #line 4820 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 191),tp->mmio_addr + 208U);
  #line 4821 
  ;
  #line 4821 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 242U) & 191),tp->mmio_addr + 242U);
  #line 4823 
  r8168_mac_ocp_modify(tp,54242U,(unsigned short)4095,(unsigned short)625);
  #line 4824 
  r8168_mac_ocp_modify(tp,54244U,(unsigned short)255,(unsigned short)0);
  #line 4825 
  r8168_mac_ocp_modify(tp,59488U,(unsigned short)0,(unsigned short)128);
  #line 4827 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4828 
  return;
}

#line 4830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8117(struct rtl8169_private *tp)
{
  #line 4836 
  int rg_saw_cnt;
  #line 4832 
  struct ephy_info e_info_8117[2U] = {{.offset = 25U, .mask = (unsigned short)64U, .bits = (unsigned short)4352U}, {.offset = 89U, .mask = (unsigned short)64U, .bits = (unsigned short)4352U}};
  #line 4838 
  rtl8168ep_stop_cmac(tp);
  #line 4841 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 4842 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8117),2);
  #line 4844 
  rtl_set_fifo_size(tp,(unsigned short)8,(unsigned short)16,(unsigned short)2,(unsigned short)6);
  #line 4845 
  rtl8168g_set_pause_thresholds(tp,(unsigned char)47,(unsigned char)95);
  #line 4847 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4849 
  rtl_reset_packet_filter(tp);
  #line 4851 
  rtl_eri_set_bits(tp,212,61440U,8080U);
  #line 4853 
  rtl_eri_write(tp,1520,12288U,20359U);
  #line 4855 
  ;
  #line 4855 
  writel(readl(tp->mmio_addr + 240U) & 4294443007U,tp->mmio_addr + 240U);
  #line 4857 
  rtl_eri_write(tp,192,12288U,0U);
  #line 4858 
  rtl_eri_write(tp,184,12288U,0U);
  #line 4860 
  rtl8168_config_eee_mac(tp);
  #line 4862 
  ;
  #line 4862 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 191),tp->mmio_addr + 208U);
  #line 4863 
  ;
  #line 4863 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 242U) & 191),tp->mmio_addr + 242U);
  #line 4865 
  ;
  #line 4865 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 127),tp->mmio_addr + 208U);
  #line 4867 
  rtl_eri_clear_bits(tp,432,12288U,4096U);
  #line 4869 
  rtl_pcie_state_l2l3_disable(tp);
  #line 4871 
  rg_saw_cnt = phy_read_paged(tp->phydev,3138,19U) & 16383;
  #line 4872 
  if (rg_saw_cnt > 0) {
    #line 4873 
    u16 sw_cnt_1ms_ini;
    #line 4875 
    sw_cnt_1ms_ini = (unsigned short)((unsigned int)((unsigned short)(16000000 / rg_saw_cnt)) & 4095U);
    #line 4876 
    r8168_mac_ocp_modify(tp,54290U,(unsigned short)4095,(unsigned short)((int)sw_cnt_1ms_ini));
  }
  #line 4879 
  r8168_mac_ocp_modify(tp,57430U,(unsigned short)240,(unsigned short)112);
  #line 4880 
  r8168_mac_ocp_write(tp,60032U,3U);
  #line 4881 
  r8168_mac_ocp_modify(tp,57426U,(unsigned short)0,(unsigned short)9);
  #line 4882 
  r8168_mac_ocp_modify(tp,54304U,(unsigned short)4095,(unsigned short)1151);
  #line 4884 
  r8168_mac_ocp_write(tp,58942U,1U);
  #line 4885 
  r8168_mac_ocp_write(tp,58942U,0U);
  #line 4886 
  r8168_mac_ocp_write(tp,49300U,0U);
  #line 4887 
  r8168_mac_ocp_write(tp,49310U,0U);
  #line 4890 
  rtl_apply_firmware(tp);
  #line 4892 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 4893 
  return;
}

#line 4895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8102e_1(struct rtl8169_private *tp)
{
  #line 4907 
  u8 cfg1;
  #line 4897 
  struct ephy_info e_info_8102e_1[8U] = {{.offset = 1U, .mask = (unsigned short)0U, .bits = (unsigned short)28261U}, {.offset = 2U, .mask = (unsigned short)0U, .bits = (unsigned short)2335U}, {.offset = 3U, .mask = (unsigned short)0U, .bits = (unsigned short)49913U}, {.offset = 6U, .mask = (unsigned short)0U, .bits = (unsigned short)44981U}, {.offset = 7U, .mask = (unsigned short)0U, .bits = (unsigned short)3584U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)60544U}, {.offset = 1U, .mask = (unsigned short)0U, .bits = (unsigned short)11877U}, {.offset = 1U, .mask = (unsigned short)0U, .bits = (unsigned short)28261U}};
  #line 4909 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4911 
  writeb((unsigned char)16,tp->mmio_addr + 209U);
  #line 4913 
  writeb((unsigned char)223,tp->mmio_addr + 82U);
  #line 4915 
  ;
  #line 4915 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 254),tp->mmio_addr + 84U);
  #line 4917 
  cfg1 = readb(tp->mmio_addr + 82U);
  #line 4918 
  if (((int)cfg1 & 64) != 0 && ((int)cfg1 & 128) != 0) 
                                                       #line 4919 
                                                       writeb((unsigned char)((int)cfg1 & 191),tp->mmio_addr + 82U);
  #line 4921 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8102e_1),8);
  #line 4922 
  return;
}

#line 4924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8102e_2(struct rtl8169_private *tp)
{
  #line 4926 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4928 
  writeb((unsigned char)15,tp->mmio_addr + 82U);
  #line 4929 
  ;
  #line 4929 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 84U) & 254),tp->mmio_addr + 84U);
  #line 4930 
  return;
}

#line 4932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8102e_3(struct rtl8169_private *tp)
{
  #line 4934 
  rtl_hw_start_8102e_2(tp);
  #line 4936 
  rtl_ephy_write(tp,3,49913);
  #line 4937 
  return;
}

#line 4939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8105e_1(struct rtl8169_private *tp)
{
  #line 4941 
  struct ephy_info e_info_8105e_1[8U] = {{.offset = 7U, .mask = (unsigned short)0U, .bits = (unsigned short)16384U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)512U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)32U}, {.offset = 30U, .mask = (unsigned short)0U, .bits = (unsigned short)8192U}, {.offset = 3U, .mask = (unsigned short)0U, .bits = (unsigned short)1U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)256U}, {.offset = 25U, .mask = (unsigned short)0U, .bits = (unsigned short)4U}, {.offset = 10U, .mask = (unsigned short)0U, .bits = (unsigned short)32U}};
  #line 4953 
  ;
  #line 4953 
  writel(readl(tp->mmio_addr + 240U) | 10240U,tp->mmio_addr + 240U);
  #line 4956 
  ;
  #line 4956 
  writel(readl(tp->mmio_addr + 240U) & 4294901759U,tp->mmio_addr + 240U);
  #line 4958 
  ;
  #line 4958 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 211U) | 12U)),tp->mmio_addr + 211U);
  #line 4959 
  ;
  #line 4959 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 208U) | 64U)),tp->mmio_addr + 208U);
  #line 4961 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8105e_1),8);
  #line 4963 
  rtl_pcie_state_l2l3_disable(tp);
  #line 4964 
  return;
}

#line 4966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8105e_2(struct rtl8169_private *tp)
{
  #line 4968 
  rtl_hw_start_8105e_1(tp);
  #line 4969 
  ;
  #line 4969 
  rtl_ephy_write(tp,30,(int)((unsigned int)rtl_ephy_read(tp,30) | 32768U));
  #line 4970 
  return;
}

#line 4972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8402(struct rtl8169_private *tp)
{
  #line 4974 
  struct ephy_info e_info_8402[2U] = {{.offset = 25U, .mask = (unsigned short)65535U, .bits = (unsigned short)65380U}, {.offset = 30U, .mask = (unsigned short)0U, .bits = (unsigned short)16384U}};
  #line 4979 
  rtl_set_def_aspm_entry_latency(tp);
  #line 4982 
  ;
  #line 4982 
  writel(readl(tp->mmio_addr + 240U) | 10240U,tp->mmio_addr + 240U);
  #line 4984 
  ;
  #line 4984 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 211U) & 127),tp->mmio_addr + 211U);
  #line 4986 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8402),2);
  #line 4988 
  rtl_set_fifo_size(tp,(unsigned short)0,(unsigned short)0,(unsigned short)2,(unsigned short)6);
  #line 4989 
  rtl_reset_packet_filter(tp);
  #line 4990 
  rtl_eri_write(tp,192,12288U,0U);
  #line 4991 
  rtl_eri_write(tp,184,12288U,0U);
  #line 4992 
  rtl_w0w1_eri(tp,212,12288U,3584U,65280U);
  #line 4994 
  rtl_pcie_state_l2l3_disable(tp);
  #line 4995 
  return;
}

#line 4997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8106(struct rtl8169_private *tp)
{
  #line 4999 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 5002 
  ;
  #line 5002 
  writel(readl(tp->mmio_addr + 240U) | 10240U,tp->mmio_addr + 240U);
  #line 5004 
  ;
  #line 5004 
  writel((readl(tp->mmio_addr + 240U) & 4286513151U) | 8388608U,tp->mmio_addr + 240U);
  #line 5005 
  ;
  #line 5005 
  writeb((unsigned char)((int)((unsigned int)readb(tp->mmio_addr + 211U) | 12U)),tp->mmio_addr + 211U);
  #line 5006 
  ;
  #line 5006 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 208U) & 191),tp->mmio_addr + 208U);
  #line 5008 
  rtl_pcie_state_l2l3_disable(tp);
  #line 5009 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)1);
  #line 5010 
  return;
}

#line 5012 
#line 5012 
static bool rtl_mac_ocp_e00e_cond_check(struct rtl8169_private *tp);
#line 5012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_mac_ocp_e00e_cond = {.check = & rtl_mac_ocp_e00e_cond_check, .msg = (char *)"rtl_mac_ocp_e00e_cond"};
#line 5012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_mac_ocp_e00e_cond_check(struct rtl8169_private *tp)
{
  #line 5014 
  return (_Bool)(((unsigned long)r8168_mac_ocp_read(tp,57358U) & 8192UL) != 0UL);
}

#line 5017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8125_common(struct rtl8169_private *tp)
{
  #line 5019 
  rtl_pcie_state_l2l3_disable(tp);
  #line 5021 
  writew((unsigned short)8731,tp->mmio_addr + 898U);
  #line 5022 
  writeb((unsigned char)0,tp->mmio_addr + 17664U);
  #line 5023 
  writew((unsigned short)0,tp->mmio_addr + 18432U);
  #line 5026 
  r8168_mac_ocp_modify(tp,54282U,(unsigned short)16,(unsigned short)0);
  #line 5028 
  ;
  #line 5028 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 82U) & 239),tp->mmio_addr + 82U);
  #line 5030 
  r8168_mac_ocp_write(tp,49472U,65535U);
  #line 5031 
  r8168_mac_ocp_write(tp,49474U,65535U);
  #line 5033 
  r8168_mac_ocp_modify(tp,54242U,(unsigned short)4095,(unsigned short)937);
  #line 5034 
  r8168_mac_ocp_modify(tp,54244U,(unsigned short)255,(unsigned short)0);
  #line 5035 
  r8168_mac_ocp_modify(tp,59488U,(unsigned short)0,(unsigned short)128);
  #line 5038 
  r8168_mac_ocp_modify(tp,60248U,(unsigned short)1,(unsigned short)0);
  #line 5040 
  r8168_mac_ocp_modify(tp,58900U,(unsigned short)1792,(unsigned short)1024);
  #line 5041 
  r8168_mac_ocp_modify(tp,58942U,(unsigned short)3120,(unsigned short)32);
  #line 5042 
  r8168_mac_ocp_modify(tp,49332U,(unsigned short)0,(unsigned short)12);
  #line 5043 
  r8168_mac_ocp_modify(tp,60266U,(unsigned short)255,(unsigned short)51);
  #line 5044 
  r8168_mac_ocp_modify(tp,60240U,(unsigned short)992,(unsigned short)64);
  #line 5045 
  r8168_mac_ocp_modify(tp,57430U,(unsigned short)240,(unsigned short)48);
  #line 5046 
  r8168_mac_ocp_modify(tp,57408U,(unsigned short)4096,(unsigned short)0);
  #line 5047 
  r8168_mac_ocp_modify(tp,57536U,(unsigned short)20239,(unsigned short)17411);
  #line 5048 
  r8168_mac_ocp_modify(tp,57426U,(unsigned short)128,(unsigned short)103);
  #line 5049 
  r8168_mac_ocp_modify(tp,49324U,(unsigned short)128,(unsigned short)7936);
  #line 5050 
  r8168_mac_ocp_modify(tp,54320U,(unsigned short)4095,(unsigned short)1151);
  #line 5051 
  r8168_mac_ocp_modify(tp,59468U,(unsigned short)0,(unsigned short)192);
  #line 5052 
  r8168_mac_ocp_modify(tp,59932U,(unsigned short)4,(unsigned short)0);
  #line 5053 
  r8168_mac_ocp_modify(tp,60244U,(unsigned short)0,(unsigned short)1);
  #line 5054 
  __const_udelay(4295UL);
  #line 5055 
  r8168_mac_ocp_modify(tp,60244U,(unsigned short)1,(unsigned short)0);
  #line 5056 
  ;
  #line 5056 
  writew((unsigned short)((int)readw(tp->mmio_addr + 6272U) & 65487),tp->mmio_addr + 6272U);
  #line 5058 
  r8168_mac_ocp_write(tp,57496U,49922U);
  #line 5060 
  rtl_udelay_loop_wait_low(tp,& rtl_mac_ocp_e00e_cond,1000U,10);
  #line 5062 
  rtl8125_config_eee_mac(tp);
  #line 5064 
  ;
  #line 5064 
  writel(readl(tp->mmio_addr + 240U) & 4294443007U,tp->mmio_addr + 240U);
  #line 5065 
  __const_udelay(42950UL);
  #line 5067 
  return;
}

#line 5068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8125_1(struct rtl8169_private *tp)
{
  #line 5070 
  struct ephy_info e_info_8125_1[24U] = {{.offset = 1U, .mask = (unsigned short)65535U, .bits = (unsigned short)43026U}, {.offset = 9U, .mask = (unsigned short)65535U, .bits = (unsigned short)21004U}, {.offset = 4U, .mask = (unsigned short)65535U, .bits = (unsigned short)53248U}, {.offset = 13U, .mask = (unsigned short)65535U, .bits = (unsigned short)63234U}, {.offset = 10U, .mask = (unsigned short)65535U, .bits = (unsigned short)34387U}, {.offset = 6U, .mask = (unsigned short)65535U, .bits = (unsigned short)30U}, {.offset = 8U, .mask = (unsigned short)65535U, .bits = (unsigned short)13717U}, {.offset = 32U, .mask = (unsigned short)65535U, .bits = (unsigned short)37973U}, {.offset = 33U, .mask = (unsigned short)65535U, .bits = (unsigned short)39423U}, {.offset = 2U, .mask = (unsigned short)65535U, .bits = (unsigned short)24646U}, {.offset = 41U, .mask = (unsigned short)65535U, .bits = (unsigned short)65024U}, {.offset = 35U, .mask = (unsigned short)65535U, .bits = (unsigned short)43874U}, {.offset = 65U, .mask = (unsigned short)65535U, .bits = (unsigned short)43020U}, {.offset = 73U, .mask = (unsigned short)65535U, .bits = (unsigned short)21004U}, {.offset = 68U, .mask = (unsigned short)65535U, .bits = (unsigned short)53248U}, {.offset = 77U, .mask = (unsigned short)65535U, .bits = (unsigned short)63234U}, {.offset = 74U, .mask = (unsigned short)65535U, .bits = (unsigned short)34387U}, {.offset = 70U, .mask = (unsigned short)65535U, .bits = (unsigned short)30U}, {.offset = 72U, .mask = (unsigned short)65535U, .bits = (unsigned short)13717U}, {.offset = 96U, .mask = (unsigned short)65535U, .bits = (unsigned short)37973U}, {.offset = 97U, .mask = (unsigned short)65535U, .bits = (unsigned short)39423U}, {.offset = 66U, .mask = (unsigned short)65535U, .bits = (unsigned short)24646U}, {.offset = 105U, .mask = (unsigned short)65535U, .bits = (unsigned short)65024U}, {.offset = 99U, .mask = (unsigned short)65535U, .bits = (unsigned short)43874U}};
  #line 5098 
  rtl_set_def_aspm_entry_latency(tp);
  #line 5101 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 5102 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8125_1),24);
  #line 5104 
  rtl_hw_start_8125_common(tp);
  #line 5105 
  return;
}

#line 5107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8125_2(struct rtl8169_private *tp)
{
  #line 5109 
  struct ephy_info e_info_8125_2[12U] = {{.offset = 4U, .mask = (unsigned short)65535U, .bits = (unsigned short)53248U}, {.offset = 10U, .mask = (unsigned short)65535U, .bits = (unsigned short)34387U}, {.offset = 35U, .mask = (unsigned short)65535U, .bits = (unsigned short)43878U}, {.offset = 32U, .mask = (unsigned short)65535U, .bits = (unsigned short)37973U}, {.offset = 33U, .mask = (unsigned short)65535U, .bits = (unsigned short)39423U}, {.offset = 41U, .mask = (unsigned short)65535U, .bits = (unsigned short)65028U}, {.offset = 68U, .mask = (unsigned short)65535U, .bits = (unsigned short)53248U}, {.offset = 74U, .mask = (unsigned short)65535U, .bits = (unsigned short)34387U}, {.offset = 99U, .mask = (unsigned short)65535U, .bits = (unsigned short)43878U}, {.offset = 96U, .mask = (unsigned short)65535U, .bits = (unsigned short)37973U}, {.offset = 97U, .mask = (unsigned short)65535U, .bits = (unsigned short)39423U}, {.offset = 105U, .mask = (unsigned short)65535U, .bits = (unsigned short)65028U}};
  #line 5125 
  rtl_set_def_aspm_entry_latency(tp);
  #line 5128 
  rtl_hw_aspm_clkreq_enable(tp,(_Bool)0);
  #line 5129 
  __rtl_ephy_init(tp,(struct ephy_info *)(& e_info_8125_2),12);
  #line 5131 
  rtl_hw_start_8125_common(tp);
  #line 5132 
  return;
}

#line 5134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_config(struct rtl8169_private *tp)
{
  #line 5136 
  rtl_generic_fct hw_configs[53U] = {[5] = & rtl_hw_start_8102e_1, & rtl_hw_start_8102e_3, & rtl_hw_start_8102e_2, (void (*)(struct rtl8169_private *))0, & rtl_hw_start_8168b, & rtl_hw_start_8168b, (void (*)(struct rtl8169_private *))0, (void (*)(struct rtl8169_private *))0, (void (*)(struct rtl8169_private *))0, (void (*)(struct rtl8169_private *))0, & rtl_hw_start_8168b, & rtl_hw_start_8168cp_1, & rtl_hw_start_8168c_1, & rtl_hw_start_8168c_2, & rtl_hw_start_8168c_3, & rtl_hw_start_8168c_4, & rtl_hw_start_8168cp_2, & rtl_hw_start_8168cp_3, & rtl_hw_start_8168d, & rtl_hw_start_8168d, & rtl_hw_start_8168d, & rtl_hw_start_8168d_4, & rtl_hw_start_8105e_1, & rtl_hw_start_8105e_2, & rtl_hw_start_8168d, & rtl_hw_start_8168e_1, & rtl_hw_start_8168e_1, & rtl_hw_start_8168e_2, & rtl_hw_start_8168f_1, & rtl_hw_start_8168f_1, & rtl_hw_start_8402, & rtl_hw_start_8411, & rtl_hw_start_8106, & rtl_hw_start_8168g_1, & rtl_hw_start_8168g_1, & rtl_hw_start_8168g_2, & rtl_hw_start_8168g_2, & rtl_hw_start_8411_2, & rtl_hw_start_8168h_1, & rtl_hw_start_8168h_1, & rtl_hw_start_8168h_1, & rtl_hw_start_8168h_1, & rtl_hw_start_8168ep_1, & rtl_hw_start_8168ep_2, & rtl_hw_start_8168ep_3, & rtl_hw_start_8117, & rtl_hw_start_8125_1, & rtl_hw_start_8125_2};
  #line 5187 
  if (hw_configs[(unsigned int)tp->mac_version] != (void (*)(struct rtl8169_private *))0) 
    #line 5188 
    (*(hw_configs[(unsigned int)tp->mac_version]))(tp);
  #line 5189 
  return;
}

#line 5191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8125(struct rtl8169_private *tp)
{
  #line 5193 
  int i;
  #line 5196 
  i = 2560;
  #line 5196 
  while (i <= 2815) {
    #line 5197 
    writel(0U,tp->mmio_addr + (unsigned long)i);
    #line 5196 
    i += 4;
  }
  #line 5199 
  rtl_hw_config(tp);
  #line 5200 
  return;
}

#line 5202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8168(struct rtl8169_private *tp)
{
  #line 5204 
  if ((int)rtl_is_8168evl_up(tp) != 0) 
                                       #line 5205 
                                       writeb((unsigned char)39,tp->mmio_addr + 236U); else 
                                                                    #line 5207 
                                                                    writeb((unsigned char)63,tp->mmio_addr + 236U);
  #line 5209 
  rtl_hw_config(tp);
  #line 5212 
  writew((unsigned short)0,tp->mmio_addr + 226U);
  #line 5213 
  return;
}

#line 5215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start_8169(struct rtl8169_private *tp)
{
  #line 5217 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_05) 
                                                            #line 5218 
                                                            pci_write_config_byte(tp->pci_dev,12,(unsigned char)8);
  #line 5220 
  writeb((unsigned char)63,tp->mmio_addr + 236U);
  #line 5222 
  tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd | 8U);
  #line 5224 
  if (tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_03) {
    #line 5226 
    if ((tp->msg_enable & 1U) != 0U) {
      #line 5226 
      bool branch;
      #line 5226 
      struct _ddebug __UNIQUE_ID_ddebug574 = {.modname = (char *)"r8169", .function = (char *)"rtl_hw_start_8169", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c", .format = (char *)"Set MAC Reg C+CR Offset 0xe0. Bit 3 and Bit 14 MUST be 1\n", .lineno = (unsigned int)5226U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 5226 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug574.key.dd_key_false.key,(_Bool)0);
      #line 5226 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 5226 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug574,tp->dev,(char *)"Set MAC Reg C+CR Offset 0xe0. Bit 3 and Bit 14 MUST be 1\n");
    }
    #line 5228 
    tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd | 16384U);
  }
  #line 5231 
  writew((unsigned short)((int)tp->cp_cmd),tp->mmio_addr + 224U);
  #line 5233 
  rtl8169_set_magic_reg(tp,(unsigned int)tp->mac_version);
  #line 5235 
  writel(0U,tp->mmio_addr + 76U);
  #line 5238 
  writew((unsigned short)0,tp->mmio_addr + 226U);
  #line 5239 
  return;
}

#line 5241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_start(struct rtl8169_private *tp)
{
  #line 5243 
  rtl_unlock_config_regs(tp);
  #line 5245 
  tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd & 8291U);
  #line 5246 
  writew((unsigned short)((int)tp->cp_cmd),tp->mmio_addr + 224U);
  #line 5248 
  if (tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_06) 
                                                            #line 5249 
                                                            rtl_hw_start_8169(tp);
  else {
    #line 5250 
    if ((int)rtl_is_8125(tp) != 0) 
                                   #line 5251 
                                   rtl_hw_start_8125(tp); else 
                                                               #line 5253 
                                                               rtl_hw_start_8168(tp);
  }
  #line 5255 
  rtl_set_rx_max_size(tp);
  #line 5256 
  rtl_set_rx_tx_desc_registers(tp);
  #line 5257 
  rtl_lock_config_regs(tp);
  #line 5259 
  rtl_jumbo_config(tp,(int)(tp->dev)->mtu);
  #line 5262 
  readw(tp->mmio_addr + 224U);
  #line 5263 
  writeb((unsigned char)12,tp->mmio_addr + 55U);
  #line 5264 
  rtl_init_rxcfg(tp);
  #line 5265 
  rtl_set_tx_config_registers(tp);
  #line 5266 
  rtl_set_rx_mode(tp->dev);
  #line 5267 
  rtl_irq_enable(tp);
  #line 5268 
  return;
}

#line 5270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 5272 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 5274 
  rtl_jumbo_config(tp,new_mtu);
  #line 5276 
  dev->mtu = (unsigned int)new_mtu;
  #line 5277 
  netdev_update_features(dev);
  #line 5279 
  return 0;
}

#line 5282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
__inline static void rtl8169_make_unusable_by_asic(struct RxDesc *desc)
{
  #line 5284 
  desc->addr = 841534158063459245ULL;
  #line 5285 
  desc->opts1 &= 1073758207U;
  #line 5286 
  return;
}

#line 5288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
__inline static void rtl8169_mark_to_asic(struct RxDesc *desc)
{
  #line 5290 
  u32 eor = desc->opts1 & 1073741824U;
  #line 5291 
  ldv_inline_asm();
  #line 5295 
  desc->opts1 = eor | 2147500031U;
  #line 5296 
  return;
}

#line 5298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct page *rtl8169_alloc_rx_data(struct rtl8169_private *tp, struct RxDesc *desc)
{
  #line 5303 
  dma_addr_t mapping;
  #line 5304 
  struct page *data;
  #line 5301 
  struct device *d = tp_to_dev(tp);
  #line 5302 
  int node = dev_to_node(d);
  #line 5306 
  ;
  #line 5306 
  data = alloc_pages_node(node,3264U,(unsigned int)get_order(16383UL));
  #line 5307 
  if (data == (struct page *)0) 
                                #line 5308 
                                return (struct page *)0;
  #line 5310 
  mapping = dma_map_page_attrs(d,data,0UL,16383UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 5311 
  if ((long)(dma_mapping_error(d,mapping) != 0) != 0L) {
    #line 5312 
    if (net_ratelimit() != 0) 
      #line 5313 
      if ((tp->msg_enable & 1U) != 0U) 
                                       #line 5313 
                                       netdev_err(tp->dev,(char *)"Failed to map RX DMA!\n");
    #line 5314 
    ;
    #line 5314 
    __free_pages(data,(unsigned int)get_order(16383UL));
    #line 5315 
    return (struct page *)0;
  }
  #line 5318 
  desc->addr = mapping;
  #line 5319 
  rtl8169_mark_to_asic(desc);
  #line 5321 
  return data;
}

#line 5324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_rx_clear(struct rtl8169_private *tp)
{
  #line 5326 
  unsigned int i;
  #line 5328 
  i = 0U;
  #line 5328 
  while (i <= 255U && tp->Rx_databuff[i] != (struct page *)0) {
    {
      #line 5329 
      ;
      #line 5329 
      dma_unmap_page_attrs(tp_to_dev(tp),(tp->RxDescArray + (unsigned long)i)->addr,16383UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 5332 
      ;
      #line 5332 
      __free_pages(tp->Rx_databuff[i],(unsigned int)get_order(16383UL));
      #line 5333 
      tp->Rx_databuff[i] = (struct page *)0;
      #line 5334 
      rtl8169_make_unusable_by_asic(tp->RxDescArray + (unsigned long)i);
    }
    #line 5328 
    i ++;
  }
  #line 5336 
  return;
}

#line 5338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
__inline static void rtl8169_mark_as_last_descriptor(struct RxDesc *desc)
{
  #line 5340 
  desc->opts1 |= 1073741824U;
  #line 5341 
  return;
}

#line 5343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_rx_fill(struct rtl8169_private *tp)
{
  #line 5345 
  unsigned int i;
  #line 5347 
  i = 0U;
  #line 5347 
  while (i <= 255U) {
    {
      #line 5348 
      struct page *data;
      #line 5350 
      data = rtl8169_alloc_rx_data(tp,tp->RxDescArray + (unsigned long)i);
      #line 5351 
      if (data == (struct page *)0) {
        #line 5352 
        rtl8169_rx_clear(tp);
        #line 5353 
        return -12;
      }
      #line 5355 
      tp->Rx_databuff[i] = data;
    }
    #line 5347 
    i ++;
  }
  #line 5358 
  rtl8169_mark_as_last_descriptor(tp->RxDescArray + 255U);
  #line 5360 
  return 0;
}

#line 5363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_init_ring(struct rtl8169_private *tp)
{
  #line 5365 
  rtl8169_init_ring_indexes(tp);
  #line 5367 
  memset((void *)(& tp->tx_skb),0,1024UL);
  #line 5368 
  memset((void *)(& tp->Rx_databuff),0,2048UL);
  #line 5370 
  return rtl8169_rx_fill(tp);
}

#line 5373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_unmap_tx_skb(struct device *d, struct ring_info *tx_skb, struct TxDesc *desc)
{
  #line 5376 
  unsigned int len = tx_skb->len;
  #line 5378 
  dma_unmap_single_attrs(d,desc->addr,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 5380 
  desc->opts1 = 0U;
  #line 5381 
  desc->opts2 = 0U;
  #line 5382 
  desc->addr = 0ULL;
  #line 5383 
  tx_skb->len = 0U;
  #line 5384 
  return;
}

#line 5386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_tx_clear_range(struct rtl8169_private *tp, u32 start, unsigned int n)
{
  #line 5389 
  unsigned int i;
  #line 5391 
  i = 0U;
  #line 5391 
  while (i < n) {
    {
      #line 5392 
      unsigned int entry = (start + i) & 63U;
      #line 5393 
      struct ring_info *tx_skb = (struct ring_info *)(& tp->tx_skb) + (unsigned long)entry;
      #line 5394 
      unsigned int len = tx_skb->len;
      #line 5396 
      if (len != 0U) {
        #line 5397 
        struct sk_buff *skb = tx_skb->skb;
        #line 5399 
        ;
        #line 5399 
        ;
        #line 5399 
        rtl8169_unmap_tx_skb(tp_to_dev(tp),tx_skb,tp->TxDescArray + (unsigned long)entry);
        #line 5401 
        if (skb != (struct sk_buff *)0) {
          #line 5402 
          dev_consume_skb_any(skb);
          #line 5403 
          tx_skb->skb = (struct sk_buff *)0;
        }
      }
    }
    #line 5391 
    i ++;
  }
  #line 5407 
  return;
}

#line 5409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_tx_clear(struct rtl8169_private *tp)
{
  #line 5411 
  rtl8169_tx_clear_range(tp,tp->dirty_tx,64U);
  #line 5412 
  tp->dirty_tx = 0U;
  #line 5412 
  tp->cur_tx = 0U;
  #line 5413 
  netdev_reset_queue(tp->dev);
  #line 5414 
  return;
}

#line 5416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_reset_work(struct rtl8169_private *tp)
{
  #line 5419 
  int i;
  #line 5418 
  struct net_device *dev = tp->dev;
  #line 5421 
  napi_disable(& tp->napi);
  #line 5422 
  netif_stop_queue(dev);
  #line 5423 
  synchronize_rcu();
  #line 5425 
  rtl8169_hw_reset(tp);
  #line 5427 
  i = 0;
  #line 5427 
  while ((unsigned int)i <= 255U) {
    #line 5428 
    rtl8169_mark_to_asic(tp->RxDescArray + (unsigned long)i);
    #line 5427 
    i ++;
  }
  #line 5430 
  rtl8169_tx_clear(tp);
  #line 5431 
  rtl8169_init_ring_indexes(tp);
  #line 5433 
  napi_enable(& tp->napi);
  #line 5434 
  rtl_hw_start(tp);
  #line 5435 
  netif_wake_queue(dev);
  #line 5436 
  return;
}

#line 5438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_tx_timeout(struct net_device *dev)
{
  #line 5440 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 5442 
  rtl_schedule_task(tp,(enum rtl_flag)RTL_FLAG_TASK_RESET_PENDING);
  #line 5443 
  return;
}

#line 5445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static __le32 rtl8169_get_txd_opts1(u32 opts0, u32 len, unsigned int entry)
{
  #line 5447 
  u32 status = opts0 | len;
  #line 5449 
  if (entry == 63U) 
                    #line 5450 
                    status |= 1073741824U;
  #line 5452 
  return status;
}

#line 5455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_xmit_frags(struct rtl8169_private *tp, struct sk_buff *skb, u32 *opts)
{
  #line 5459 
  unsigned int cur_frag;
  #line 5459 
  unsigned int entry;
  #line 5458 
  struct skb_shared_info *info = skb_end_pointer(skb);
  #line 5460 
  struct TxDesc *txd = txd;
  #line 5461 
  struct device *d = tp_to_dev(tp);
  #line 5463 
  entry = tp->cur_tx;
  #line 5464 
  cur_frag = 0U;
  #line 5464 
  while ((unsigned int)info->nr_frags > cur_frag) {
    {
      #line 5466 
      dma_addr_t mapping;
      #line 5467 
      u32 len;
      #line 5468 
      void *addr;
      #line 5465 
      skb_frag_t *frag = (skb_frag_t *)(& info->frags) + (unsigned long)cur_frag;
      #line 5470 
      entry = (entry + 1U) & 63U;
      #line 5472 
      txd = tp->TxDescArray + (unsigned long)entry;
      #line 5473 
      len = skb_frag_size(frag);
      #line 5474 
      addr = skb_frag_address(frag);
      #line 5475 
      mapping = dma_map_single_attrs(d,addr,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 5476 
      if ((long)(dma_mapping_error(d,mapping) != 0) != 0L) {
        #line 5477 
        if (net_ratelimit() != 0) 
          #line 5478 
          if ((tp->msg_enable & 1U) != 0U) 
                                           #line 5478 
                                           netdev_err(tp->dev,(char *)"Failed to map TX fragments DMA!\n");
        #line 5480 
        goto err_out;
      }
      #line 5483 
      txd->opts1 = rtl8169_get_txd_opts1(*opts,len,entry);
      #line 5484 
      txd->opts2 = *(opts + 1U);
      #line 5485 
      txd->addr = mapping;
      #line 5487 
      tp->tx_skb[entry].len = len;
    }
    #line 5464 
    cur_frag ++;
  }
  #line 5490 
  if (cur_frag != 0U) {
    #line 5491 
    tp->tx_skb[entry].skb = skb;
    #line 5492 
    txd->opts1 |= 268435456U;
  }
  #line 5495 
  return (int)cur_frag;
  #line 5497 
  err_out: 
           #line 5497 
  ;
  #line 5498 
  rtl8169_tx_clear_range(tp,tp->cur_tx + 1U,cur_frag);
  #line 5499 
  return -5;
}

#line 5502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_test_hw_pad_bug(struct rtl8169_private *tp, struct sk_buff *skb)
{
  #line 5504 
  return (_Bool)((skb->len <= 59U && tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_34) != 0);
}

#line 5511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int msdn_giant_send_check(struct sk_buff *skb)
{
  #line 5513 
  struct ipv6hdr *ipv6h;
  #line 5514 
  struct tcphdr *th;
  #line 5515 
  int ret;
  #line 5517 
  ret = skb_cow_head(skb,0U);
  #line 5518 
  if (ret != 0) 
                #line 5519 
                return ret;
  #line 5521 
  ipv6h = ipv6_hdr(skb);
  #line 5522 
  th = tcp_hdr(skb);
  #line 5524 
  th->check = (unsigned short)0U;
  #line 5525 
  th->check = (unsigned short)(~ ((int)tcp_v6_check(0,& ipv6h->saddr,& ipv6h->daddr,0U)));
  #line 5527 
  return ret;
}

#line 5530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_tso_csum_v1(struct sk_buff *skb, u32 *opts)
{
  #line 5532 
  u32 mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 5534 
  if (mss != 0U) {
    #line 5536 
    u32 __UNIQUE_ID___x575;
    #line 5536 
    u32 tmp_0;
    #line 5535 
    *opts |= 134217728U;
    {
      #line 5536 
      __UNIQUE_ID___x575 = mss;
      #line 5536 
      unsigned int __UNIQUE_ID___y576 = 2047U;
      #line 5536 
      if (__UNIQUE_ID___x575 < __UNIQUE_ID___y576) 
                                                   #line 5536 
                                                   tmp_0 = __UNIQUE_ID___x575; else 
                                                                    #line 5536 
                                                                    tmp_0 = __UNIQUE_ID___y576;
      }
    #line 5536 
    *opts |= tmp_0 << 16;
  }
  else 
    #line 5537 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 5538 
      struct iphdr *ip = ip_hdr(skb);
      #line 5540 
      if ((unsigned int)ip->protocol == 6U) 
                                            #line 5541 
                                            *opts |= 327680U;
      else 
        #line 5542 
        if ((unsigned int)ip->protocol == 17U) 
                                               #line 5543 
                                               *opts |= 393216U;
        else {
          #line 5545 
          int __ret_warn_on = 1;
          #line 5545 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 5546 
            ldv_inline_asm();
            #line 5547 
            ldv_inline_asm();
          }
          #line 5545 
          long tmp_3 = (long)(__ret_warn_on != 0);
        }
    }
  #line 5548 
  return;
}

#line 5549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl8169_tso_csum_v2(struct rtl8169_private *tp, struct sk_buff *skb, u32 *opts)
{
  #line 5552 
  u32 transport_offset = (unsigned int)skb_transport_offset(skb);
  #line 5553 
  u32 mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 5555 
  if (mss != 0U) {
    #line 5574 
    u32 tmp_3_0;
    #line 5574 
    u32 __UNIQUE_ID___x579;
    #line 5556 
    switch ((int)vlan_get_protocol(skb)) {
      #line 5557 
      case 8: 
              #line 5557 
      ;
      #line 5558 
      *opts |= 67108864U;
      #line 5559 
      break;
      #line 5561 
      case 56710: 
                  #line 5561 
      ;
      #line 5562 
      if (msdn_giant_send_check(skb) != 0) 
                                           #line 5563 
                                           return (_Bool)0;
      #line 5565 
      *opts |= 33554432U;
      #line 5566 
      break;
      #line 5568 
      default: 
               #line 5568 
      ;
      {
        #line 5569 
        int __ret_warn_on = 1;
        #line 5569 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 5570 
          ldv_inline_asm();
          #line 5571 
          ldv_inline_asm();
        }
        #line 5569 
        long tmp_3 = (long)(__ret_warn_on != 0);
      }
      #line 5570 
      break;
    }
    #line 5573 
    *opts |= transport_offset << 18;
    {
      #line 5574 
      __UNIQUE_ID___x579 = mss;
      #line 5574 
      unsigned int __UNIQUE_ID___y580 = 2047U;
      #line 5574 
      if (__UNIQUE_ID___x579 < __UNIQUE_ID___y580) 
                                                   #line 5574 
                                                   tmp_3_0 = __UNIQUE_ID___x579; else 
                                                                    #line 5574 
                                                                    tmp_3_0 = __UNIQUE_ID___y580;
      }
    #line 5574 
    *(opts + 1U) |= tmp_3_0 << 18;
  }
  else 
    #line 5575 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 5576 
      u8 ip_protocol;
      #line 5578 
      switch ((int)vlan_get_protocol(skb)) {
        #line 5579 
        case 8: 
                #line 5579 
        ;
        #line 5580 
        *(opts + 1U) |= 536870912U;
        #line 5581 
        ip_protocol = ip_hdr(skb)->protocol;
        #line 5582 
        break;
        #line 5584 
        case 56710: 
                    #line 5584 
        ;
        #line 5585 
        *(opts + 1U) |= 268435456U;
        #line 5586 
        ip_protocol = ipv6_hdr(skb)->nexthdr;
        #line 5587 
        break;
        #line 5589 
        default: 
                 #line 5589 
        ;
        #line 5590 
        ip_protocol = (unsigned char)255U;
        #line 5591 
        break;
      }
      #line 5594 
      if ((unsigned int)ip_protocol == 6U) 
                                           #line 5595 
                                           *(opts + 1U) |= 1073741824U;
      else 
        #line 5596 
        if ((unsigned int)ip_protocol == 17U) 
                                              #line 5597 
                                              *(opts + 1U) |= 2147483648U;
        else {
          #line 5599 
          int __ret_warn_on_0 = 1;
          #line 5599 
          if ((long)(__ret_warn_on_0 != 0) != 0L) {
            #line 5600 
            ldv_inline_asm();
            #line 5601 
            ldv_inline_asm();
          }
          #line 5599 
          long tmp_8 = (long)(__ret_warn_on_0 != 0);
        }
      #line 5601 
      *(opts + 1U) |= transport_offset << 18;
    }
    else {
      #line 5603 
      if ((long)((int)rtl_test_hw_pad_bug(tp,skb) != 0) != 0L) {
        #line 5604 
        return (_Bool)(eth_skb_pad(skb) == 0);
      }
    }
  #line 5607 
  return (_Bool)1;
}

#line 5610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_tx_slots_avail(struct rtl8169_private *tp, unsigned int nr_frags)
{
  #line 5613 
  unsigned int slots_avail = (tp->dirty_tx - tp->cur_tx) + 64U;
  #line 5616 
  return (_Bool)(slots_avail > nr_frags);
}

#line 5620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_chip_supports_csum_v2(struct rtl8169_private *tp)
{
  #line 5622 
  switch ((unsigned int)tp->mac_version) {
    #line 5623 
    case 0U: 
             #line 5623 
    case 1U: 
             #line 5623 
    case 2U: 
             #line 5623 
    case 3U: 
             #line 5623 
    case 4U: 
             #line 5623 
    ;
    #line 5624 
    case 8U: 
             #line 5624 
    case 9U: 
             #line 5624 
    case 10U: 
              #line 5624 
    case 11U: 
              #line 5624 
    case 12U: 
              #line 5624 
    case 13U: 
              #line 5624 
    case 14U: 
              #line 5624 
    case 15U: 
              #line 5624 
    ;
    #line 5625 
    return (_Bool)0;
    #line 5626 
    default: 
             #line 5626 
    ;
    #line 5627 
    return (_Bool)1;
  }
}

#line 5631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_doorbell(struct rtl8169_private *tp)
{
  #line 5633 
  if ((int)rtl_is_8125(tp) != 0) 
                                 #line 5634 
                                 writew((unsigned short)1,tp->mmio_addr + 144U); else 
                                                                    #line 5636 
                                                                    writeb((unsigned char)64,tp->mmio_addr + 56U);
  #line 5637 
  return;
}

#line 5639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static netdev_tx_t rtl8169_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 5646 
  dma_addr_t mapping;
  #line 5647 
  u32 opts[2U];
  #line 5647 
  u32 len;
  #line 5648 
  bool stop_queue;
  #line 5649 
  bool door_bell;
  #line 5650 
  int frags;
  #line 5652 
  int tmp_3;
  #line 5707 
  int tmp_10;
  #line 5642 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 5643 
  unsigned int entry = tp->cur_tx & 63U;
  #line 5644 
  struct TxDesc *txd = tp->TxDescArray + (unsigned long)entry;
  #line 5645 
  struct device *d = tp_to_dev(tp);
  #line 5652 
  ;
  #line 5652 
  if (rtl_tx_slots_avail(tp,
                           (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags)) 
    #line 5652 
    tmp_3 = 0; else 
                    #line 5652 
                    tmp_3 = 1;
  #line 5652 
  if ((long)tmp_3 != 0L) {
    #line 5653 
    if ((tp->msg_enable & 1U) != 0U) 
                                     #line 5653 
                                     netdev_err(dev,(char *)"BUG! Tx Ring full when queue awake!\n");
    #line 5654 
    goto err_stop_0;
  }
  #line 5657 
  if ((long)((txd->opts1 & 2147483648U) != 0U) != 0L) 
                                                      #line 5658 
                                                      goto err_stop_0;
  #line 5660 
  opts[1] = rtl8169_tx_vlan_tag(skb);
  #line 5661 
  opts[0] = 2147483648U;
  #line 5663 
  if ((int)rtl_chip_supports_csum_v2(tp) != 0) {
    #line 5664 
    if (! rtl8169_tso_csum_v2(tp,skb,(u32 *)(& opts))) 
                                                       #line 5665 
                                                       goto err_dma_0;
  }
  else 
       #line 5667 
       rtl8169_tso_csum_v1(skb,(u32 *)(& opts));
  #line 5670 
  len = skb_headlen(skb);
  #line 5671 
  mapping = dma_map_single_attrs(d,(void *)skb->data,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 5672 
  if ((long)(dma_mapping_error(d,mapping) != 0) != 0L) {
    #line 5673 
    if (net_ratelimit() != 0) 
      #line 5674 
      if ((tp->msg_enable & 1U) != 0U) 
                                       #line 5674 
                                       netdev_err(dev,(char *)"Failed to map TX DMA!\n");
    #line 5675 
    goto err_dma_0;
  }
  #line 5678 
  tp->tx_skb[entry].len = len;
  #line 5679 
  txd->addr = mapping;
  #line 5681 
  frags = rtl8169_xmit_frags(tp,skb,(u32 *)(& opts));
  #line 5682 
  if (frags < 0) 
                 #line 5683 
                 goto err_dma_1;
  else 
    #line 5684 
    if (frags != 0) 
                    #line 5685 
                    opts[0] |= 536870912U;
    else {
      #line 5687 
      opts[0] |= 805306368U;
      #line 5688 
      tp->tx_skb[entry].skb = skb;
    }
  #line 5691 
  txd->opts2 = opts[1];
  #line 5693 
  skb_tx_timestamp(skb);
  #line 5694 
  ldv_inline_asm();
  #line 5698 
  ;
  #line 5698 
  ;
  #line 5698 
  door_bell = __netdev_sent_queue(dev,skb->len,(_Bool)((bool)((int)netdev_xmit_more()) != 0));
  #line 5700 
  txd->opts1 = rtl8169_get_txd_opts1(opts[0],len,entry);
  #line 5701 
  ldv_inline_asm();
  #line 5705 
  tp->cur_tx = (tp->cur_tx + (unsigned int)frags) + 1U;
  #line 5707 
  if ((int)rtl_tx_slots_avail(tp,17U) != 0) 
                                            #line 5707 
                                            tmp_10 = 0; else 
                                                             #line 5707 
                                                             tmp_10 = 1;
  #line 5707 
  stop_queue = (_Bool)(tmp_10 != 0);
  #line 5708 
  if ((long)((int)stop_queue != 0) != 0L) {
    #line 5710 
    ldv_inline_asm();
    #line 5713 
    netif_stop_queue(dev);
    #line 5714 
    door_bell = (_Bool)1;
  }
  #line 5717 
  if ((int)door_bell != 0) 
                           #line 5718 
                           rtl8169_doorbell(tp);
  #line 5720 
  if ((long)((int)stop_queue != 0) != 0L) {
    #line 5722 
    ldv_inline_asm();
    #line 5729 
    if ((int)rtl_tx_slots_avail(tp,17U) != 0) 
                                              #line 5730 
                                              netif_start_queue(dev);
  }
  #line 5733 
  return NETDEV_TX_OK;
  #line 5735 
  err_dma_1: 
             #line 5735 
  ;
  #line 5736 
  rtl8169_unmap_tx_skb(d,(struct ring_info *)(& tp->tx_skb) + (unsigned long)entry,txd);
  #line 5737 
  err_dma_0: 
             #line 5737 
  ;
  #line 5738 
  dev_kfree_skb_any(skb);
  #line 5739 
  (dev->stats.tx_dropped) ++;
  #line 5740 
  return NETDEV_TX_OK;
  #line 5742 
  err_stop_0: 
              #line 5742 
  ;
  #line 5743 
  netif_stop_queue(dev);
  #line 5744 
  (dev->stats.tx_dropped) ++;
  #line 5745 
  return NETDEV_TX_BUSY;
}

#line 5748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static netdev_features_t rtl8169_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 5752 
  int transport_offset = skb_transport_offset(skb);
  #line 5753 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 5755 
  if ((int)skb_is_gso(skb) != 0) {
    #line 5756 
    if (transport_offset > 127) {
      #line 5756 
      if ((int)rtl_chip_supports_csum_v2(tp) != 0) 
                                                   #line 5758 
                                                   features &= 18446744073707651071ULL;
    }
  }
  else 
    #line 5759 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 5760 
      if (skb->len <= 59U) 
        #line 5761 
        switch ((unsigned int)tp->mac_version) {
          #line 5762 
          case (unsigned int)9: 
                                #line 5762 
          ;
          #line 5763 
          case (unsigned int)10: 
                                 #line 5763 
          ;
          #line 5764 
          case (unsigned int)15: 
                                 #line 5764 
          ;
          #line 5765 
          case (unsigned int)32: 
                                 #line 5765 
          ;
          #line 5766 
          features &= 18446744073709551589ULL;
          #line 5767 
          break;
          #line 5768 
          default: 
                   #line 5768 
          ;
          #line 5769 
          break;
        }
      #line 5773 
      if (transport_offset > 1023) {
        #line 5773 
        if ((int)rtl_chip_supports_csum_v2(tp) != 0) 
                                                     #line 5775 
                                                     features &= 18446744073709551589ULL;
      }
    }
  #line 5778 
  return vlan_features_check(skb,features);
}

#line 5781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_pcierr_interrupt(struct net_device *dev)
{
  #line 5785 
  u16 pci_status;
  #line 5785 
  u16 pci_cmd;
  #line 5783 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 5784 
  struct pci_dev *pdev = tp->pci_dev;
  #line 5787 
  pci_read_config_word(pdev,4,& pci_cmd);
  #line 5788 
  pci_read_config_word(pdev,6,& pci_status);
  #line 5790 
  if ((tp->msg_enable & 512U) != 0U) 
                                     #line 5790 
                                     netdev_err(dev,(char *)"PCI error (cmd = 0x%04x, status = 0x%04x)\n",(int)pci_cmd,(int)pci_status);
  #line 5801 
  if ((unsigned int)pdev->broken_parity_status != 0U) 
                                                      #line 5802 
                                                      pci_cmd = (unsigned short)((unsigned int)pci_cmd & 65471U); else 
                                                                    #line 5804 
                                                                    pci_cmd = (unsigned short)((unsigned int)pci_cmd | 320U);
  #line 5806 
  pci_write_config_word(pdev,4,(unsigned short)((int)pci_cmd));
  #line 5808 
  pci_write_config_word(pdev,6,(unsigned short)((int)pci_status & 63488));
  #line 5813 
  rtl_schedule_task(tp,(enum rtl_flag)RTL_FLAG_TASK_RESET_PENDING);
  #line 5814 
  return;
}

#line 5816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_tx(struct net_device *dev, struct rtl8169_private *tp, int budget)
{
  #line 5819 
  unsigned int dirty_tx;
  #line 5819 
  unsigned int tx_left;
  #line 5819 
  unsigned int bytes_compl = 0U;
  #line 5819 
  unsigned int pkts_compl = 0U;
  #line 5821 
  dirty_tx = tp->dirty_tx;
  #line 5822 
  ldv_inline_asm();
  #line 5823 
  tx_left = tp->cur_tx - dirty_tx;
  #line 5825 
  while (tx_left != 0U) {
    #line 5828 
    u32 status;
    #line 5826 
    unsigned int entry = dirty_tx & 63U;
    #line 5827 
    struct ring_info *tx_skb = (struct ring_info *)(& tp->tx_skb) + (unsigned long)entry;
    #line 5830 
    status = (tp->TxDescArray + (unsigned long)entry)->opts1;
    #line 5831 
    if ((status & 2147483648U) != 0U) 
                                      #line 5832 
                                      break;
    #line 5833 
    ldv_inline_asm();
    #line 5840 
    ;
    #line 5840 
    ;
    #line 5840 
    rtl8169_unmap_tx_skb(tp_to_dev(tp),tx_skb,tp->TxDescArray + (unsigned long)entry);
    #line 5842 
    if (tx_skb->skb != (struct sk_buff *)0) {
      #line 5843 
      pkts_compl ++;
      #line 5844 
      bytes_compl = (tx_skb->skb)->len + bytes_compl;
      #line 5845 
      napi_consume_skb(tx_skb->skb,budget);
      #line 5846 
      tx_skb->skb = (struct sk_buff *)0;
    }
    #line 5848 
    dirty_tx ++;
    #line 5849 
    tx_left --;
  }
  #line 5852 
  if (tp->dirty_tx != dirty_tx) {
    #line 5853 
    netdev_completed_queue(dev,pkts_compl,bytes_compl);
    #line 5855 
    u64_stats_init(& tp->tx_stats.syncp);
    #line 5856 
    tp->tx_stats.packets += (unsigned long long)pkts_compl;
    #line 5857 
    tp->tx_stats.bytes += (unsigned long long)bytes_compl;
    #line 5858 
    u64_stats_init(& tp->tx_stats.syncp);
    #line 5860 
    tp->dirty_tx = dirty_tx;
    #line 5861 
    ldv_inline_asm();
    #line 5869 
    if ((int)netif_queue_stopped(dev) != 0) {
      #line 5869 
      if ((int)rtl_tx_slots_avail(tp,17U) != 0) 
                                                #line 5871 
                                                netif_wake_queue(dev);
    }
    #line 5879 
    if (tp->cur_tx != dirty_tx) 
                                #line 5880 
                                rtl8169_doorbell(tp);
  }
  #line 5882 
  return;
}

#line 5884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
__inline static int rtl8169_fragmented_frame(u32 status)
{
  #line 5886 
  return (status & 805306368U) != 805306368U;
}

#line 5889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
__inline static void rtl8169_rx_csum(struct sk_buff *skb, u32 opts1)
{
  #line 5891 
  u32 status = opts1 & 393216U;
  #line 5893 
  if (status == 131072U && (opts1 & 16384U) == 0U || status == 262144U && (opts1 & 32768U) == 0U) 
    #line 5895 
    skb->ip_summed = (unsigned char)1U; else 
                                             #line 5897 
                                             skb_checksum_none_assert(skb);
  #line 5898 
  return;
}

#line 5900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_rx(struct net_device *dev, struct rtl8169_private *tp, u32 budget)
{
  #line 5907 
  u32 tmp;
  #line 5907 
  u32 __UNIQUE_ID___x582;
  #line 5902 
  unsigned int cur_rx;
  #line 5902 
  unsigned int rx_left;
  #line 5903 
  unsigned int count;
  #line 5905 
  cur_rx = tp->cur_rx;
  {
    #line 5907 
    __UNIQUE_ID___x582 = budget;
    #line 5907 
    unsigned int __UNIQUE_ID___y583 = 256U;
    #line 5907 
    if (__UNIQUE_ID___x582 < __UNIQUE_ID___y583) 
                                                 #line 5907 
                                                 tmp = __UNIQUE_ID___x582; else 
                                                                    #line 5907 
                                                                    tmp = __UNIQUE_ID___y583;
    }
  #line 5907 
  rx_left = tmp;
  #line 5907 
  while (rx_left != 0U) {
    {
      #line 5911 
      u32 status;
      #line 5908 
      unsigned int entry = cur_rx & 255U;
      #line 5909 
      void *rx_buf = lowmem_page_address(tp->Rx_databuff[entry]);
      #line 5910 
      struct RxDesc *desc = tp->RxDescArray + (unsigned long)entry;
      #line 5913 
      status = desc->opts1;
      #line 5914 
      if ((status & 2147483648U) != 0U) 
                                        #line 5915 
                                        break;
      #line 5916 
      ldv_inline_asm();
      #line 5923 
      if ((long)((status & 2097152U) != 0U) != 0L) {
        #line 5924 
        if ((tp->msg_enable & 64U) != 0U) 
                                          #line 5924 
                                          netdev_info(dev,(char *)"Rx ERROR. status = %08x\n",status);
        #line 5926 
        (dev->stats.rx_errors) ++;
        #line 5927 
        if ((status & 5242880U) != 0U) 
                                       #line 5928 
                                       (dev->stats.rx_length_errors) ++;
        #line 5929 
        if ((status & 524288U) != 0U) 
                                      #line 5930 
                                      (dev->stats.rx_crc_errors) ++;
        #line 5931 
        if (((status & 1572864U) != 0U && (status & 4194304U) == 0U) && (dev->features & 8796093022208ULL) != 0ULL) 
          #line 5933 
          goto process_pkt;
      }
      else {
        #line 5936 
        unsigned int pkt_size;
        #line 5937 
        struct sk_buff *skb;
        #line 5939 
        process_pkt: 
                     #line 5939 
        ;
        #line 5940 
        pkt_size = status & 16383U;
        #line 5941 
        if ((long)((dev->features & 4398046511104ULL) == 0ULL) != 0L) 
          #line 5942 
          pkt_size += 4294967292U;
        #line 5948 
        if ((long)(rtl8169_fragmented_frame(status) != 0) != 0L) {
          #line 5949 
          (dev->stats.rx_dropped) ++;
          #line 5950 
          (dev->stats.rx_length_errors) ++;
          #line 5951 
          goto release_descriptor;
        }
        #line 5954 
        skb = napi_alloc_skb(& tp->napi,pkt_size);
        #line 5955 
        if ((long)(skb == (struct sk_buff *)0) != 0L) {
          #line 5956 
          (dev->stats.rx_dropped) ++;
          #line 5957 
          goto release_descriptor;
        }
        #line 5960 
        ;
        #line 5960 
        ;
        #line 5960 
        dma_sync_single_for_cpu(tp_to_dev(tp),desc->addr,(unsigned long)pkt_size,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 5963 
        __builtin_prefetch((void const *)rx_buf);
        #line 5964 
        skb_copy_to_linear_data(skb,rx_buf,pkt_size);
        #line 5965 
        skb->tail += pkt_size;
        #line 5966 
        skb->len = pkt_size;
        #line 5968 
        ;
        #line 5968 
        ;
        #line 5968 
        dma_sync_single_for_device(tp_to_dev(tp),desc->addr,(unsigned long)pkt_size,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 5972 
        rtl8169_rx_csum(skb,status);
        #line 5973 
        skb->protocol = eth_type_trans(skb,dev);
        #line 5975 
        rtl8169_rx_vlan_tag(desc,skb);
        #line 5977 
        if ((unsigned int)skb->pkt_type == 2U) 
                                               #line 5978 
                                               (dev->stats.multicast) ++;
        #line 5980 
        napi_gro_receive(& tp->napi,skb);
        #line 5982 
        u64_stats_init(& tp->rx_stats.syncp);
        #line 5983 
        (tp->rx_stats.packets) ++;
        #line 5984 
        tp->rx_stats.bytes += (unsigned long long)pkt_size;
        #line 5985 
        u64_stats_init(& tp->rx_stats.syncp);
      }
      #line 5987 
      release_descriptor: 
                          #line 5987 
      ;
      #line 5988 
      desc->opts2 = 0U;
      #line 5989 
      rtl8169_mark_to_asic(desc);
    }
    #line 5907 
    rx_left --;
    #line 5907 
    cur_rx ++;
  }
  #line 5992 
  count = cur_rx - tp->cur_rx;
  #line 5993 
  tp->cur_rx = cur_rx;
  #line 5995 
  return (int)count;
}

#line 5998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static irqreturn_t rtl8169_interrupt(int irq, void *dev_instance)
{
  #line 6000 
  struct rtl8169_private *tp = (struct rtl8169_private *)dev_instance;
  #line 6001 
  u32 status = rtl_get_events(tp);
  #line 6003 
  if (((unsigned int)tp->irq_enabled == 0U || (status & 65535U) == 65535U) || (tp->irq_mask & status) == 0U) 
    #line 6005 
    return IRQ_NONE;
  #line 6007 
  if ((long)((status & 32768U) != 0U) != 0L) {
    #line 6008 
    rtl8169_pcierr_interrupt(tp->dev);
    #line 6009 
    goto out;
  }
  #line 6012 
  if ((status & 32U) != 0U) 
                            #line 6013 
                            phy_mac_interrupt(tp->phydev);
  #line 6015 
  if ((long)((status & 64U) != 0U) != 0L && (long)(tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_11) != 0L) {
    #line 6017 
    netif_stop_queue(tp->dev);
    #line 6019 
    cif_set_bit(1L,(unsigned long *)(& tp->wk.flags));
  }
  #line 6022 
  rtl_irq_disable(tp);
  #line 6023 
  napi_schedule_irqoff(& tp->napi);
  #line 6024 
  out: 
       #line 6024 
  ;
  #line 6025 
  rtl_ack_events(tp,status);
  #line 6027 
  return IRQ_HANDLED;
}

#line 6030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_task(struct work_struct *work)
{
  #line 6039 
  void *__mptr;
  #line 6041 
  int i;
  #line 6035 
  struct __anonstruct_rtl_work_1374 rtl_work[1U] = {{.bitnr = 1, .action = & rtl_reset_work}};
  #line 6039 
  __mptr = (void *)work;
  #line 6038 
  struct rtl8169_private *tp = ((struct rtl8169_private *)(__mptr + 18446744073709547848U));
  #line 6040 
  struct net_device *dev = tp->dev;
  #line 6043 
  rtl_lock_work(tp);
  #line 6045 
  if (netif_running(dev)) {
    #line 6046 
    if (! test_bit(0L,(unsigned long *)(& tp->wk.flags))) 
                                                          #line 6045 
                                                          _LOR: 
                                                                #line 6047 
                                                                goto out_unlock;
  }
  else 
       #line 6045 
       goto _LOR;
  #line 6049 
  i = 0;
  #line 6049 
  while (i == 0) {
    {
      #line 6050 
      bool pending;
      #line 6052 
      pending = test_and_set_bit((long)rtl_work[i].bitnr,(unsigned long *)(& tp->wk.flags));
      #line 6053 
      if ((int)pending != 0) 
                             #line 6054 
                             (*(rtl_work[i].action))(tp);
    }
    #line 6049 
    i ++;
  }
  #line 6057 
  out_unlock: 
              #line 6057 
  ;
  #line 6058 
  rtl_unlock_work(tp);
  #line 6059 
  return;
}

#line 6061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_poll(struct napi_struct *napi, int budget)
{
  #line 6063 
  void *__mptr;
  #line 6065 
  int work_done;
  #line 6063 
  __mptr = (void *)napi;
  #line 6063 
  struct rtl8169_private *tp = ((struct rtl8169_private *)(__mptr + 18446744073709551584U));
  #line 6064 
  struct net_device *dev = tp->dev;
  #line 6067 
  work_done = rtl_rx(dev,tp,(unsigned int)budget);
  #line 6069 
  rtl_tx(dev,tp,budget);
  #line 6071 
  if (work_done < budget) {
    #line 6072 
    napi_complete_done(napi,work_done);
    #line 6073 
    rtl_irq_enable(tp);
  }
  #line 6076 
  return work_done;
}

#line 6079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_rx_missed(struct net_device *dev)
{
  #line 6081 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6083 
  if (tp->mac_version > (unsigned int)RTL_GIGA_MAC_VER_06) 
                                                           #line 6084 
                                                           return;
  #line 6086 
  dev->stats.rx_missed_errors += (unsigned long)(readl(tp->mmio_addr + 76U) & 16777215U);
  #line 6087 
  writel(0U,tp->mmio_addr + 76U);
  #line 6088 
  return;
}

#line 6090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void r8169_phylink_handler(struct net_device *ndev)
{
  #line 6092 
  struct rtl8169_private *tp = netdev_priv(ndev);
  #line 6094 
  if ((int)netif_carrier_ok(ndev) != 0) {
    #line 6095 
    rtl_link_chg_patch(tp);
    #line 6096 
    pm_request_resume(& (tp->pci_dev)->dev);
  }
  else 
       #line 6098 
       pm_runtime_idle(& (tp->pci_dev)->dev);
  #line 6101 
  if (net_ratelimit() != 0) 
                            #line 6102 
                            phy_print_status(tp->phydev);
  #line 6103 
  return;
}

#line 6105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8169_phy_connect(struct rtl8169_private *tp)
{
  #line 6108 
  phy_interface_t phy_mode;
  #line 6109 
  int ret;
  #line 6107 
  struct phy_device *phydev = tp->phydev;
  #line 6111 
  if ((unsigned int)tp->supports_gmii != 0U) 
                                             #line 6111 
                                             phy_mode = PHY_INTERFACE_MODE_GMII; else 
                                                                    #line 6111 
                                                                    phy_mode = PHY_INTERFACE_MODE_MII;
  #line 6114 
  ret = phy_connect_direct(tp->dev,phydev,& r8169_phylink_handler,phy_mode);
  #line 6116 
  if (ret != 0) 
                #line 6117 
                return ret;
  #line 6119 
  if ((unsigned int)tp->supports_gmii == 0U) 
                                             #line 6120 
                                             phy_set_max_speed(phydev,100U);
  #line 6122 
  phy_support_asym_pause(phydev);
  #line 6124 
  phy_attached_info(phydev);
  #line 6126 
  return 0;
}

#line 6129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_down(struct net_device *dev)
{
  #line 6131 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6133 
  phy_stop(tp->phydev);
  #line 6135 
  napi_disable(& tp->napi);
  #line 6136 
  netif_stop_queue(dev);
  #line 6138 
  rtl8169_hw_reset(tp);
  #line 6144 
  rtl8169_rx_missed(dev);
  #line 6147 
  synchronize_rcu();
  #line 6149 
  rtl8169_tx_clear(tp);
  #line 6151 
  rtl8169_rx_clear(tp);
  #line 6153 
  rtl_pll_power_down(tp);
  #line 6154 
  return;
}

#line 6156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_close(struct net_device *dev)
{
  #line 6158 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6159 
  struct pci_dev *pdev = tp->pci_dev;
  #line 6161 
  pm_runtime_get_sync(& pdev->dev);
  #line 6164 
  rtl8169_update_counters(tp);
  #line 6166 
  rtl_lock_work(tp);
  #line 6168 
  cif_bitmap_zero((unsigned long *)(& tp->wk.flags),2U);
  #line 6170 
  rtl8169_down(dev);
  #line 6171 
  rtl_unlock_work(tp);
  #line 6173 
  cancel_work_sync(& tp->wk.work);
  #line 6175 
  phy_disconnect(tp->phydev);
  #line 6177 
  pci_free_irq(pdev,0U,(void *)tp);
  #line 6179 
  dma_free_coherent(& pdev->dev,4096UL,(void *)tp->RxDescArray,tp->RxPhyAddr);
  #line 6181 
  dma_free_coherent(& pdev->dev,1024UL,(void *)tp->TxDescArray,tp->TxPhyAddr);
  #line 6183 
  tp->TxDescArray = (struct TxDesc *)0;
  #line 6184 
  tp->RxDescArray = (struct RxDesc *)0;
  #line 6186 
  pm_runtime_put_sync(& pdev->dev);
  #line 6188 
  return 0;
}

#line 6192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_netpoll(struct net_device *dev)
{
  #line 6194 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6196 
  ;
  #line 6196 
  rtl8169_interrupt(pci_irq_vector(tp->pci_dev,0U),(void *)tp);
  #line 6197 
  return;
}

#line 6200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_open(struct net_device *dev)
{
  #line 6202 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6203 
  struct pci_dev *pdev = tp->pci_dev;
  #line 6204 
  int retval = -12;
  #line 6206 
  pm_runtime_get_sync(& pdev->dev);
  #line 6212 
  tp->TxDescArray = (struct TxDesc *)dma_alloc_coherent(& pdev->dev,1024UL,& tp->TxPhyAddr,3264U);
  #line 6214 
  if (tp->TxDescArray == (struct TxDesc *)0) 
                                             #line 6215 
                                             goto err_pm_runtime_put;
  #line 6217 
  tp->RxDescArray = (struct RxDesc *)dma_alloc_coherent(& pdev->dev,4096UL,& tp->RxPhyAddr,3264U);
  #line 6219 
  if (tp->RxDescArray == (struct RxDesc *)0) 
                                             #line 6220 
                                             goto err_free_tx_0;
  #line 6222 
  retval = rtl8169_init_ring(tp);
  #line 6223 
  if (retval < 0) 
                  #line 6224 
                  goto err_free_rx_1;
  #line 6226 
  rtl_request_firmware(tp);
  #line 6228 
  retval = pci_request_irq(pdev,0U,& rtl8169_interrupt,(irqreturn_t (*)(int , void *))0,(void *)tp,(char *)(& dev->name));
  #line 6230 
  if (retval < 0) 
                  #line 6231 
                  goto err_release_fw_2;
  #line 6233 
  retval = r8169_phy_connect(tp);
  #line 6234 
  if (retval != 0) 
                   #line 6235 
                   goto err_free_irq;
  #line 6237 
  rtl_lock_work(tp);
  #line 6239 
  cif_set_bit(0L,(unsigned long *)(& tp->wk.flags));
  #line 6241 
  napi_enable(& tp->napi);
  #line 6243 
  rtl8169_init_phy(dev,tp);
  #line 6245 
  rtl_pll_power_up(tp);
  #line 6247 
  rtl_hw_start(tp);
  #line 6249 
  if (! rtl8169_init_counter_offsets(tp)) 
    #line 6250 
    if ((tp->msg_enable & 8192U) != 0U) 
                                        #line 6250 
                                        netdev_warn(dev,(char *)"counter reset/update failed\n");
  #line 6252 
  phy_start(tp->phydev);
  #line 6253 
  netif_start_queue(dev);
  #line 6255 
  rtl_unlock_work(tp);
  #line 6257 
  pm_runtime_put_sync(& pdev->dev);
  #line 6258 
  out: 
       #line 6258 
  ;
  #line 6259 
  return retval;
  #line 6261 
  err_free_irq: 
                #line 6261 
  ;
  #line 6262 
  pci_free_irq(pdev,0U,(void *)tp);
  #line 6263 
  err_release_fw_2: 
                    #line 6263 
  ;
  #line 6264 
  rtl_release_firmware(tp);
  #line 6265 
  rtl8169_rx_clear(tp);
  #line 6266 
  err_free_rx_1: 
                 #line 6266 
  ;
  #line 6267 
  dma_free_coherent(& pdev->dev,4096UL,(void *)tp->RxDescArray,tp->RxPhyAddr);
  #line 6269 
  tp->RxDescArray = (struct RxDesc *)0;
  #line 6270 
  err_free_tx_0: 
                 #line 6270 
  ;
  #line 6271 
  dma_free_coherent(& pdev->dev,1024UL,(void *)tp->TxDescArray,tp->TxPhyAddr);
  #line 6273 
  tp->TxDescArray = (struct TxDesc *)0;
  #line 6274 
  err_pm_runtime_put: 
                      #line 6274 
  ;
  #line 6275 
  pm_runtime_put_noidle(& pdev->dev);
  #line 6276 
  goto out;
}

#line 6280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  #line 6285 
  unsigned int start;
  #line 6282 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6283 
  struct pci_dev *pdev = tp->pci_dev;
  #line 6284 
  struct rtl8169_counters *counters = tp->counters;
  #line 6287 
  pm_runtime_get_noresume(& pdev->dev);
  #line 6289 
  if ((int)netif_running(dev) != 0) {
    #line 6289 
    if ((int)cif_pm_runtime_active(& pdev->dev) != 0) 
                                                      #line 6290 
                                                      rtl8169_rx_missed(dev);
  }
  #line 6292 
  while (1) {
    #line 6293 
    start = u64_stats_fetch_begin_irq(& tp->rx_stats.syncp);
    #line 6294 
    stats->rx_packets = tp->rx_stats.packets;
    #line 6295 
    stats->rx_bytes = tp->rx_stats.bytes;
    #line 6296 
    if (! ((int)u64_stats_fetch_retry_irq(& tp->rx_stats.syncp,start) != 0)) 
      #line 6292 
      break;
  }
  #line 6298 
  while (1) {
    #line 6299 
    start = u64_stats_fetch_begin_irq(& tp->tx_stats.syncp);
    #line 6300 
    stats->tx_packets = tp->tx_stats.packets;
    #line 6301 
    stats->tx_bytes = tp->tx_stats.bytes;
    #line 6302 
    if (! ((int)u64_stats_fetch_retry_irq(& tp->tx_stats.syncp,start) != 0)) 
      #line 6298 
      break;
  }
  #line 6304 
  stats->rx_dropped = (unsigned long long)dev->stats.rx_dropped;
  #line 6305 
  stats->tx_dropped = (unsigned long long)dev->stats.tx_dropped;
  #line 6306 
  stats->rx_length_errors = (unsigned long long)dev->stats.rx_length_errors;
  #line 6307 
  stats->rx_errors = (unsigned long long)dev->stats.rx_errors;
  #line 6308 
  stats->rx_crc_errors = (unsigned long long)dev->stats.rx_crc_errors;
  #line 6309 
  stats->rx_fifo_errors = (unsigned long long)dev->stats.rx_fifo_errors;
  #line 6310 
  stats->rx_missed_errors = (unsigned long long)dev->stats.rx_missed_errors;
  #line 6311 
  stats->multicast = (unsigned long long)dev->stats.multicast;
  #line 6317 
  if ((int)cif_pm_runtime_active(& pdev->dev) != 0) 
                                                    #line 6318 
                                                    rtl8169_update_counters(tp);
  #line 6324 
  stats->tx_errors = counters->tx_errors - tp->tc_offset.tx_errors;
  #line 6326 
  stats->collisions = (unsigned long long)(counters->tx_multi_collision - tp->tc_offset.tx_multi_collision);
  #line 6328 
  stats->tx_aborted_errors = (unsigned long long)((int)counters->tx_aborted - (int)tp->tc_offset.tx_aborted);
  #line 6331 
  pm_runtime_put_noidle(& pdev->dev);
  #line 6332 
  return;
}

#line 6334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_net_suspend(struct net_device *dev)
{
  #line 6336 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6338 
  if (! netif_running(dev)) 
                            #line 6339 
                            return;
  #line 6341 
  phy_stop(tp->phydev);
  #line 6342 
  netif_device_detach(dev);
  #line 6344 
  rtl_lock_work(tp);
  #line 6345 
  napi_disable(& tp->napi);
  #line 6347 
  cif_bitmap_zero((unsigned long *)(& tp->wk.flags),2U);
  #line 6349 
  rtl_unlock_work(tp);
  #line 6351 
  rtl_pll_power_down(tp);
  #line 6352 
  return;
}

#line 6356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_suspend(struct device *device)
{
  #line 6358 
  struct net_device *dev = dev_get_drvdata(device);
  #line 6359 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6361 
  rtl8169_net_suspend(dev);
  #line 6362 
  clk_disable_unprepare(tp->clk);
  #line 6364 
  return 0;
}

#line 6367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void __rtl8169_resume(struct net_device *dev)
{
  #line 6369 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6371 
  netif_device_attach(dev);
  #line 6373 
  rtl_pll_power_up(tp);
  #line 6374 
  rtl8169_init_phy(dev,tp);
  #line 6376 
  phy_start(tp->phydev);
  #line 6378 
  rtl_lock_work(tp);
  #line 6379 
  napi_enable(& tp->napi);
  #line 6380 
  cif_set_bit(0L,(unsigned long *)(& tp->wk.flags));
  #line 6381 
  rtl_reset_work(tp);
  #line 6382 
  rtl_unlock_work(tp);
  #line 6383 
  return;
}

#line 6385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_resume(struct device *device)
{
  #line 6387 
  struct net_device *dev = dev_get_drvdata(device);
  #line 6388 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6390 
  rtl_rar_set(tp,dev->dev_addr);
  #line 6392 
  clk_prepare_enable(tp->clk);
  #line 6394 
  if ((int)netif_running(dev) != 0) 
                                    #line 6395 
                                    __rtl8169_resume(dev);
  #line 6397 
  return 0;
}

#line 6400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_runtime_suspend(struct device *device)
{
  #line 6402 
  struct net_device *dev = dev_get_drvdata(device);
  #line 6403 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6405 
  if (tp->TxDescArray == (struct TxDesc *)0) 
                                             #line 6406 
                                             return 0;
  #line 6408 
  rtl_lock_work(tp);
  #line 6409 
  __rtl8169_set_wol(tp,47U);
  #line 6410 
  rtl_unlock_work(tp);
  #line 6412 
  rtl8169_net_suspend(dev);
  #line 6415 
  rtl8169_rx_missed(dev);
  #line 6416 
  rtl8169_update_counters(tp);
  #line 6418 
  return 0;
}

#line 6421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_runtime_resume(struct device *device)
{
  #line 6423 
  struct net_device *dev = dev_get_drvdata(device);
  #line 6424 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6426 
  rtl_rar_set(tp,dev->dev_addr);
  #line 6428 
  if (tp->TxDescArray == (struct TxDesc *)0) 
                                             #line 6429 
                                             return 0;
  #line 6431 
  rtl_lock_work(tp);
  #line 6432 
  __rtl8169_set_wol(tp,tp->saved_wolopts);
  #line 6433 
  rtl_unlock_work(tp);
  #line 6435 
  __rtl8169_resume(dev);
  #line 6437 
  return 0;
}

#line 6440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_runtime_idle(struct device *device)
{
  #line 6442 
  struct net_device *dev = dev_get_drvdata(device);
  #line 6444 
  if (netif_running(dev)) {
    #line 6444 
    if (! netif_carrier_ok(dev)) 
                                 #line 6445 
                                 pm_schedule_suspend(device,10000U);
  }
  else 
       #line 6445 
       pm_schedule_suspend(device,10000U);
  #line 6447 
  return -16;
}

#line 6450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct dev_pm_ops rtl8169_pm_ops = {.suspend = & rtl8169_suspend, .resume = & rtl8169_resume, .freeze = & rtl8169_suspend, .thaw = & rtl8169_resume, .poweroff = & rtl8169_suspend, .restore = & rtl8169_resume, .runtime_suspend = & rtl8169_runtime_suspend, .runtime_resume = & rtl8169_runtime_resume, .runtime_idle = & rtl8169_runtime_idle};
#line 6470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_wol_shutdown_quirk(struct rtl8169_private *tp)
{
  #line 6473 
  switch ((unsigned int)tp->mac_version) {
    #line 6474 
    case (unsigned int)9: 
                          #line 6474 
    ;
    #line 6475 
    case (unsigned int)10: 
                           #line 6475 
    ;
    #line 6476 
    case (unsigned int)15: 
                           #line 6476 
    ;
    #line 6477 
    pci_clear_master(tp->pci_dev);
    #line 6479 
    writeb((unsigned char)8,tp->mmio_addr + 55U);
    #line 6481 
    readb(tp->mmio_addr + 55U);
    #line 6482 
    break;
    #line 6483 
    default: 
             #line 6483 
    ;
    #line 6484 
    break;
  }
  #line 6486 
  return;
}

#line 6488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_shutdown(struct pci_dev *pdev)
{
  #line 6490 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 6491 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6493 
  rtl8169_net_suspend(dev);
  #line 6496 
  rtl_rar_set(tp,(u8 *)(& dev->perm_addr));
  #line 6498 
  rtl8169_hw_reset(tp);
  #line 6500 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) {
    #line 6501 
    if (tp->saved_wolopts != 0U) {
      #line 6502 
      rtl_wol_suspend_quirk(tp);
      #line 6503 
      rtl_wol_shutdown_quirk(tp);
    }
    #line 6506 
    pci_wake_from_d3(pdev,(_Bool)1);
    #line 6507 
    pci_set_power_state(pdev,3);
  }
  #line 6509 
  return;
}

#line 6511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_remove_one(struct pci_dev *pdev)
{
  #line 6513 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 6514 
  struct rtl8169_private *tp = netdev_priv(dev);
  #line 6516 
  if ((int)r8168_check_dash(tp) != 0) 
                                      #line 6517 
                                      rtl8168_driver_stop(tp);
  #line 6519 
  netif_napi_del(& tp->napi);
  #line 6521 
  cif_unregister_netdev(dev);
  #line 6522 
  mdiobus_unregister((tp->phydev)->mdio.bus);
  #line 6524 
  rtl_release_firmware(tp);
  #line 6526 
  if ((int)pci_dev_run_wake(pdev) != 0) 
                                        #line 6527 
                                        pm_runtime_get_noresume(& pdev->dev);
  #line 6530 
  rtl_rar_set(tp,(u8 *)(& dev->perm_addr));
  #line 6531 
  return;
}

#line 6533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct net_device_ops rtl_netdev_ops = {.ndo_open = & rtl_open, .ndo_stop = & rtl8169_close, .ndo_start_xmit = & rtl8169_start_xmit, .ndo_features_check = & rtl8169_features_check, .ndo_set_rx_mode = & rtl_set_rx_mode, .ndo_set_mac_address = & rtl_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & rtl8169_ioctl, .ndo_change_mtu = & rtl8169_change_mtu, .ndo_tx_timeout = & rtl8169_tx_timeout, .ndo_get_stats64 = & rtl8169_get_stats64, .ndo_poll_controller = & rtl8169_netpoll, .ndo_fix_features = & rtl8169_fix_features, .ndo_set_features = & rtl8169_set_features};
#line 6553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_set_irq_mask(struct rtl8169_private *tp)
{
  #line 6555 
  tp->irq_mask = 47U;
  #line 6557 
  if (tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_06) 
                                                            #line 6558 
                                                            tp->irq_mask |= 32848U;
  else 
    #line 6559 
    if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_11) 
                                                              #line 6561 
                                                              tp->irq_mask |= 64U; else 
                                                                    #line 6563 
                                                                    tp->irq_mask |= 16U;
  #line 6564 
  return;
}

#line 6566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_alloc_irq(struct rtl8169_private *tp)
{
  #line 6568 
  unsigned int flags;
  #line 6570 
  switch ((unsigned int)tp->mac_version) {
    #line 6571 
    case 0U: 
             #line 6571 
    case 1U: 
             #line 6571 
    case 2U: 
             #line 6571 
    case 3U: 
             #line 6571 
    case 4U: 
             #line 6571 
    ;
    #line 6572 
    rtl_unlock_config_regs(tp);
    #line 6573 
    ;
    #line 6573 
    writeb((unsigned char)((int)readb(tp->mmio_addr + 83U) & 223),tp->mmio_addr + 83U);
    #line 6574 
    rtl_lock_config_regs(tp);
    #line 6576 
    case 5U: 
             #line 6576 
    case 6U: 
             #line 6576 
    case 7U: 
             #line 6576 
    case 8U: 
             #line 6576 
    case 9U: 
             #line 6576 
    case 10U: 
              #line 6576 
    case 11U: 
              #line 6576 
    case 12U: 
              #line 6576 
    case 13U: 
              #line 6576 
    case 14U: 
              #line 6576 
    case 15U: 
              #line 6576 
    case 16U: 
              #line 6576 
    case 17U: 
              #line 6576 
    case 18U: 
              #line 6576 
    case 19U: 
              #line 6576 
    case 20U: 
              #line 6576 
    case 21U: 
              #line 6576 
    case 22U: 
              #line 6576 
    ;
    #line 6577 
    flags = 1U;
    #line 6578 
    break;
    #line 6579 
    default: 
             #line 6579 
    ;
    #line 6580 
    flags = 7U;
    #line 6581 
    break;
  }
  #line 6584 
  return pci_alloc_irq_vectors(tp->pci_dev,1U,1U,flags);
}

#line 6587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_read_mac_address(struct rtl8169_private *tp, u8 *mac_addr)
{
  #line 6591 
  if ((int)rtl_is_8168evl_up(tp) != 0) {
    #line 6591 
    if (tp->mac_version != (unsigned int)RTL_GIGA_MAC_VER_34) {
      #line 6592 
      u32 value = rtl_eri_read(tp,224);
      #line 6594 
      *mac_addr = (unsigned char)value;
      #line 6595 
      *(mac_addr + 1U) = (unsigned char)(value >> 8);
      #line 6596 
      *(mac_addr + 2U) = (unsigned char)(value >> 16);
      #line 6597 
      *(mac_addr + 3U) = (unsigned char)(value >> 24);
      #line 6599 
      value = rtl_eri_read(tp,228);
      #line 6600 
      *(mac_addr + 4U) = (unsigned char)value;
      #line 6601 
      *(mac_addr + 5U) = (unsigned char)(value >> 8);
    }
    else 
         #line 6591 
         goto _LAND;
  }
  else {
    #line 6591 
    _LAND: 
    #line 6602 
    if ((int)rtl_is_8125(tp) != 0) 
                                   #line 6603 
                                   rtl_read_mac_from_reg(tp,mac_addr,6624);
  }
  #line 6604 
  return;
}

#line 6607 
#line 6607 
static bool rtl_link_list_ready_cond_check(struct rtl8169_private *tp);
#line 6607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_link_list_ready_cond = {.check = & rtl_link_list_ready_cond_check, .msg = (char *)"rtl_link_list_ready_cond"};
#line 6607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_link_list_ready_cond_check(struct rtl8169_private *tp)
{
  #line 6609 
  return (_Bool)(((int)readb(tp->mmio_addr + 211U) & 2) != 0);
}

#line 6612 
#line 6612 
static bool rtl_rxtx_empty_cond_check(struct rtl8169_private *tp);
#line 6612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct rtl_cond rtl_rxtx_empty_cond = {.check = & rtl_rxtx_empty_cond_check, .msg = (char *)"rtl_rxtx_empty_cond"};
#line 6612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static bool rtl_rxtx_empty_cond_check(struct rtl8169_private *tp)
{
  #line 6614 
  return (_Bool)(((int)readb(tp->mmio_addr + 211U) & 48) == 48);
}

#line 6617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8169_mdio_read_reg(struct mii_bus *mii_bus, int phyaddr, int phyreg)
{
  #line 6619 
  struct rtl8169_private *tp = (struct rtl8169_private *)mii_bus->priv;
  #line 6621 
  if (phyaddr > 0) 
                   #line 6622 
                   return -19;
  #line 6624 
  return rtl_readphy(tp,phyreg);
}

#line 6627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8169_mdio_write_reg(struct mii_bus *mii_bus, int phyaddr, int phyreg, u16 val)
{
  #line 6630 
  struct rtl8169_private *tp = (struct rtl8169_private *)mii_bus->priv;
  #line 6632 
  if (phyaddr > 0) 
                   #line 6633 
                   return -19;
  #line 6635 
  rtl_writephy(tp,phyreg,(int)val);
  #line 6637 
  return 0;
}

#line 6640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int r8169_mdio_register(struct rtl8169_private *tp)
{
  #line 6643 
  struct mii_bus *new_bus;
  #line 6644 
  int ret;
  #line 6642 
  struct pci_dev *pdev = tp->pci_dev;
  #line 6646 
  new_bus = devm_mdiobus_alloc(& pdev->dev);
  #line 6647 
  if (new_bus == (struct mii_bus *)0) 
                                      #line 6648 
                                      return -12;
  #line 6650 
  new_bus->name = (char *)"r8169";
  #line 6651 
  new_bus->priv = (void *)tp;
  #line 6652 
  new_bus->parent = & pdev->dev;
  #line 6653 
  new_bus->irq[0] = -2;
  #line 6654 
  ;
  #line 6654 
  snprintf((char *)(& new_bus->id),61UL,(char *)"r8169-%x",(int)pci_dev_id(pdev));
  #line 6656 
  new_bus->read = & r8169_mdio_read_reg;
  #line 6657 
  new_bus->write = & r8169_mdio_write_reg;
  #line 6659 
  ret = __mdiobus_register(new_bus,& __this_module);
  #line 6660 
  if (ret != 0) 
                #line 6661 
                return ret;
  #line 6663 
  tp->phydev = mdiobus_get_phy(new_bus,0);
  #line 6664 
  if (tp->phydev == (struct phy_device *)0) {
    #line 6665 
    mdiobus_unregister(new_bus);
    #line 6666 
    return -19;
  }
  #line 6670 
  phy_suspend(tp->phydev);
  #line 6672 
  return 0;
}

#line 6675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_init_8168g(struct rtl8169_private *tp)
{
  #line 6677 
  tp->ocp_base = 41984U;
  #line 6679 
  ;
  #line 6679 
  writel(readl(tp->mmio_addr + 240U) | 524288U,tp->mmio_addr + 240U);
  #line 6681 
  if (! rtl_udelay_loop_wait_high(tp,& rtl_txcfg_empty_cond,100U,42)) 
    #line 6682 
    return;
  #line 6684 
  if (! rtl_udelay_loop_wait_high(tp,& rtl_rxtx_empty_cond,100U,42)) 
    #line 6685 
    return;
  #line 6687 
  ;
  #line 6687 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 55U) & 243),tp->mmio_addr + 55U);
  #line 6688 
  msleep(1U);
  #line 6689 
  ;
  #line 6689 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 211U) & 127),tp->mmio_addr + 211U);
  #line 6691 
  r8168_mac_ocp_modify(tp,59614U,(unsigned short)16384,(unsigned short)0);
  #line 6693 
  if (! rtl_udelay_loop_wait_high(tp,& rtl_link_list_ready_cond,100U,42)) 
    #line 6694 
    return;
  #line 6696 
  r8168_mac_ocp_modify(tp,59614U,(unsigned short)0,(unsigned short)32768);
  #line 6698 
  rtl_udelay_loop_wait_high(tp,& rtl_link_list_ready_cond,100U,42);
  #line 6699 
  return;
}

#line 6701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_init_8125(struct rtl8169_private *tp)
{
  #line 6703 
  tp->ocp_base = 41984U;
  #line 6705 
  ;
  #line 6705 
  writel(readl(tp->mmio_addr + 240U) | 524288U,tp->mmio_addr + 240U);
  #line 6707 
  if (! rtl_udelay_loop_wait_high(tp,& rtl_rxtx_empty_cond,100U,42)) 
    #line 6708 
    return;
  #line 6710 
  ;
  #line 6710 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 55U) & 243),tp->mmio_addr + 55U);
  #line 6711 
  msleep(1U);
  #line 6712 
  ;
  #line 6712 
  writeb((unsigned char)((int)readb(tp->mmio_addr + 211U) & 127),tp->mmio_addr + 211U);
  #line 6714 
  r8168_mac_ocp_modify(tp,59614U,(unsigned short)16384,(unsigned short)0);
  #line 6716 
  if (! rtl_udelay_loop_wait_high(tp,& rtl_link_list_ready_cond,100U,42)) 
    #line 6717 
    return;
  #line 6719 
  r8168_mac_ocp_write(tp,49322U,2000U);
  #line 6720 
  r8168_mac_ocp_write(tp,49318U,336U);
  #line 6721 
  r8168_mac_ocp_write(tp,49182U,21845U);
  #line 6723 
  rtl_udelay_loop_wait_high(tp,& rtl_link_list_ready_cond,100U,42);
  #line 6724 
  return;
}

#line 6726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_hw_initialize(struct rtl8169_private *tp)
{
  #line 6728 
  switch ((unsigned int)tp->mac_version) {
    #line 6729 
    case 47U: 
              #line 6729 
    case 48U: 
              #line 6729 
    case 49U: 
              #line 6729 
    case 50U: 
              #line 6729 
    ;
    #line 6730 
    rtl8168ep_stop_cmac(tp);
    #line 6732 
    case 38U: 
              #line 6732 
    case 39U: 
              #line 6732 
    case 40U: 
              #line 6732 
    case 41U: 
              #line 6732 
    case 42U: 
              #line 6732 
    case 43U: 
              #line 6732 
    case 44U: 
              #line 6732 
    case 45U: 
              #line 6732 
    case 46U: 
              #line 6732 
    ;
    #line 6733 
    rtl_hw_init_8168g(tp);
    #line 6734 
    break;
    #line 6735 
    case 51U: 
              #line 6735 
    case 52U: 
              #line 6735 
    ;
    #line 6736 
    rtl_hw_init_8125(tp);
    #line 6737 
    break;
    #line 6738 
    default: 
             #line 6738 
    ;
    #line 6739 
    break;
  }
  #line 6741 
  return;
}

#line 6743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_jumbo_max(struct rtl8169_private *tp)
{
  #line 6746 
  if ((unsigned int)tp->supports_gmii == 0U) 
                                             #line 6747 
                                             return 1500;
  #line 6749 
  switch ((unsigned int)tp->mac_version) {
    #line 6751 
    case 0U: 
             #line 6751 
    case 1U: 
             #line 6751 
    case 2U: 
             #line 6751 
    case 3U: 
             #line 6751 
    case 4U: 
             #line 6751 
    ;
    #line 6752 
    return 7152;
    #line 6754 
    case (unsigned int)9: 
                          #line 6754 
    ;
    #line 6755 
    case (unsigned int)10: 
                           #line 6755 
    ;
    #line 6756 
    case (unsigned int)15: 
                           #line 6756 
    ;
    #line 6757 
    return 4080;
    #line 6759 
    case 16U: 
              #line 6759 
    case 17U: 
              #line 6759 
    case 18U: 
              #line 6759 
    case 19U: 
              #line 6759 
    case 20U: 
              #line 6759 
    case 21U: 
              #line 6759 
    case 22U: 
              #line 6759 
    ;
    #line 6760 
    return 6128;
    #line 6761 
    default: 
             #line 6761 
    ;
    #line 6762 
    return 9200;
  }
}

#line 6766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_disable_clk(void *data)
{
  #line 6768 
  clk_disable_unprepare((struct clk *)data);
  #line 6769 
  return;
}

#line 6771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_get_ether_clk(struct rtl8169_private *tp)
{
  #line 6774 
  struct clk *clk;
  #line 6775 
  int rc;
  #line 6773 
  struct device *d = tp_to_dev(tp);
  #line 6777 
  clk = devm_clk_get(d,(char *)"ether_clk");
  #line 6778 
  if ((int)IS_ERR((void *)clk) != 0) {
    #line 6779 
    rc = (int)PTR_ERR((void *)clk);
    #line 6780 
    if (rc == -2) 
                  #line 6782 
                  rc = 0;
    else 
      #line 6783 
      if (rc != -517) 
                      #line 6784 
                      _dev_err(d,(char *)"failed to get clk: %d\n",rc);
  }
  else {
    #line 6786 
    tp->clk = clk;
    #line 6787 
    rc = clk_prepare_enable(clk);
    #line 6788 
    if (rc != 0) 
                 #line 6789 
                 _dev_err(d,(char *)"failed to enable clk: %d\n",rc); else 
                                                                    #line 6791 
                                                                    rc = devm_add_action_or_reset(d,& rtl_disable_clk,(void *)clk);
  }
  #line 6794 
  return rc;
}

#line 6797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl_init_mac_address(struct rtl8169_private *tp)
{
  #line 6801 
  int rc;
  #line 6799 
  struct net_device *dev = tp->dev;
  #line 6800 
  u8 *mac_addr = dev->dev_addr;
  #line 6803 
  ;
  #line 6803 
  rc = eth_platform_get_mac_address(tp_to_dev(tp),mac_addr);
  #line 6804 
  if (rc == 0) 
               #line 6805 
               goto done;
  #line 6807 
  rtl_read_mac_address(tp,mac_addr);
  #line 6808 
  if ((int)is_valid_ether_addr(mac_addr) != 0) 
                                               #line 6809 
                                               goto done;
  #line 6811 
  rtl_read_mac_from_reg(tp,mac_addr,0);
  #line 6812 
  if ((int)is_valid_ether_addr(mac_addr) != 0) 
                                               #line 6813 
                                               goto done;
  #line 6815 
  eth_hw_addr_random(dev);
  #line 6816 
  _dev_warn(tp_to_dev(tp),(char *)"can\'t read MAC address, setting random one\n");
  #line 6817 
  done: 
        #line 6817 
  ;
  #line 6818 
  rtl_rar_set(tp,mac_addr);
  #line 6819 
  return;
}

#line 6821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl_init_one(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 6823 
  struct rtl8169_private *tp;
  #line 6824 
  struct net_device *dev;
  #line 6825 
  int chipset;
  #line 6825 
  int region;
  #line 6826 
  int jumbo_max;
  #line 6826 
  int rc;
  #line 6828 
  dev = devm_alloc_etherdev_mqs(& pdev->dev,3928,1U,1U);
  #line 6829 
  if (dev == (struct net_device *)0) 
                                     #line 6830 
                                     return -12;
  #line 6832 
  dev->dev.parent = & pdev->dev;
  #line 6833 
  dev->netdev_ops = & rtl_netdev_ops;
  #line 6834 
  tp = (struct rtl8169_private *)netdev_priv(dev);
  #line 6835 
  tp->dev = dev;
  #line 6836 
  tp->pci_dev = pdev;
  #line 6837 
  tp->msg_enable = netif_msg_init((int)debug.msg_enable,51);
  #line 6838 
  tp->supports_gmii = (unsigned int)(ent->driver_data != 1UL);
  #line 6839 
  tp->eee_adv = -1;
  #line 6842 
  rc = rtl_get_ether_clk(tp);
  #line 6843 
  if (rc != 0) 
               #line 6844 
               return rc;
  #line 6849 
  rc = pci_disable_link_state(pdev,3);
  #line 6851 
  tp->aspm_manageable = (unsigned int)(rc == 0);
  #line 6854 
  rc = pcim_enable_device(pdev);
  #line 6855 
  if (rc < 0) {
    #line 6856 
    _dev_err(& pdev->dev,(char *)"enable failure\n");
    #line 6857 
    return rc;
  }
  #line 6860 
  if (pcim_set_mwi(pdev) < 0) 
                              #line 6861 
                              _dev_info(& pdev->dev,(char *)"Mem-Wr-Inval unavailable\n");
  #line 6864 
  region = ffs(pci_select_bars(pdev,512UL)) + -1;
  #line 6865 
  if (region < 0) {
    #line 6866 
    _dev_err(& pdev->dev,(char *)"no MMIO resource found\n");
    #line 6867 
    return -19;
  }
  #line 6871 
  if (pdev->resource[region].start == 0ULL && pdev->resource[region].end == pdev->resource[region].start || (pdev->resource[region].end - pdev->resource[region].start) + 1ULL <= 255ULL) {
    #line 6872 
    _dev_err(& pdev->dev,(char *)"Invalid PCI region size(s), aborting\n");
    #line 6873 
    return -19;
  }
  #line 6876 
  rc = pcim_iomap_regions(pdev,(int)(1UL << region),(char *)"r8169");
  #line 6877 
  if (rc < 0) {
    #line 6878 
    _dev_err(& pdev->dev,(char *)"cannot remap MMIO, aborting\n");
    #line 6879 
    return rc;
  }
  #line 6882 
  tp->mmio_addr = *(pcim_iomap_table(pdev) + (unsigned long)region);
  #line 6885 
  rtl8169_get_mac_version(tp);
  #line 6886 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_NONE) 
                                                          #line 6887 
                                                          return -19;
  #line 6889 
  tp->cp_cmd = readw(tp->mmio_addr + 224U);
  #line 6891 
  if (tp->mac_version > (unsigned int)RTL_GIGA_MAC_VER_17) {
    #line 6891 
    if (dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL) == 0) 
      #line 6893 
      dev->features |= 32ULL;
  }
  #line 6895 
  rtl_init_rxcfg(tp);
  #line 6897 
  rtl8169_irq_mask_and_ack(tp);
  #line 6899 
  rtl_hw_initialize(tp);
  #line 6901 
  rtl_hw_reset(tp);
  #line 6903 
  pci_set_master(pdev);
  #line 6905 
  chipset = (int)tp->mac_version;
  #line 6907 
  rc = rtl_alloc_irq(tp);
  #line 6908 
  if (rc < 0) {
    #line 6909 
    _dev_err(& pdev->dev,(char *)"Can\'t allocate interrupt\n");
    #line 6910 
    return rc;
  }
  {
    #line 6913 
    struct lock_class_key __key;
    #line 6913 
    __mutex_init(& tp->wk.mutex,(char *)"&tp->wk.mutex",& __key);
  }
  {
    #line 6914 
    struct lock_class_key __key_0;
    #line 6914 
    __init_work(& tp->wk.work,0);
    #line 6914 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 6914 
    tp->wk.work.data = __constr_expr_44;
    #line 6914 
    lockdep_init_map(& tp->wk.work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 6914 
    INIT_LIST_HEAD(& tp->wk.work.entry);
    #line 6914 
    tp->wk.work.func = & rtl_task;
  }
  #line 6915 
  u64_stats_init(& tp->rx_stats.syncp);
  #line 6916 
  u64_stats_init(& tp->tx_stats.syncp);
  #line 6918 
  rtl_init_mac_address(tp);
  #line 6920 
  dev->ethtool_ops = & rtl8169_ethtool_ops;
  #line 6922 
  netif_napi_add(dev,& tp->napi,& rtl8169_poll,64);
  #line 6924 
  dev->features |= 549755879811ULL;
  #line 6927 
  dev->hw_features = 549755879811ULL;
  #line 6930 
  dev->vlan_features = 65571ULL;
  #line 6932 
  dev->priv_flags |= 32768U;
  #line 6934 
  tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd | 32U);
  #line 6936 
  if (! rtl_is_8125(tp)) 
                         #line 6937 
                         tp->cp_cmd = (unsigned short)((unsigned int)tp->cp_cmd | 64U);
  #line 6942 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_05) 
                                                            #line 6944 
                                                            dev->hw_features &= 18446744073709551359ULL;
  #line 6946 
  if ((int)rtl_chip_supports_csum_v2(tp) != 0) {
    #line 6947 
    dev->hw_features |= 1048592ULL;
    #line 6948 
    dev->features |= 1048592ULL;
    #line 6949 
    dev->gso_max_size = 64000U;
    #line 6950 
    dev->gso_max_segs = (unsigned short)64U;
  }
  else {
    #line 6952 
    dev->gso_max_size = 32000U;
    #line 6953 
    dev->gso_max_segs = (unsigned short)24U;
  }
  #line 6959 
  if (tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_34 || tp->mac_version == (unsigned int)RTL_GIGA_MAC_VER_22) {
    #line 6961 
    dev->vlan_features &= 18446744073707651070ULL;
    #line 6962 
    dev->hw_features &= 18446744073707651070ULL;
    #line 6963 
    dev->features &= 18446744073707651070ULL;
  }
  #line 6966 
  dev->hw_features |= 8796093022208ULL;
  #line 6967 
  dev->hw_features |= 4398046511104ULL;
  #line 6970 
  dev->min_mtu = 60U;
  #line 6971 
  jumbo_max = rtl_jumbo_max(tp);
  #line 6972 
  dev->max_mtu = (unsigned int)jumbo_max;
  #line 6974 
  rtl_set_irq_mask(tp);
  #line 6976 
  tp->fw_name = rtl_chip_infos[chipset].fw_name;
  #line 6978 
  tp->counters = (struct rtl8169_counters *)dmam_alloc_coherent(& pdev->dev,64UL,& tp->counters_phys_addr,3264U);
  #line 6981 
  if (tp->counters == (struct rtl8169_counters *)0) 
                                                    #line 6982 
                                                    return -12;
  #line 6984 
  pci_set_drvdata(pdev,(void *)dev);
  #line 6986 
  rc = r8169_mdio_register(tp);
  #line 6987 
  if (rc != 0) 
               #line 6988 
               return rc;
  #line 6991 
  rtl_pll_power_down(tp);
  #line 6993 
  rc = cif_register_netdev(dev);
  #line 6994 
  if (rc != 0) 
               #line 6995 
               goto err_mdio_unregister;
  #line 6997 
  if ((tp->msg_enable & 2U) != 0U) {
    #line 6997 
    ;
    #line 6997 
    ;
    #line 6997 
    ;
    #line 6997 
    netdev_info(dev,(char *)"%s, %pM, XID %03x, IRQ %d\n",rtl_chip_infos[chipset].name,dev->dev_addr,(readl(tp->mmio_addr + 64U) >> 20) & 4047U,pci_irq_vector(pdev,0U));
  }
  #line 7002 
  if (jumbo_max > 1500) 
    #line 7003 
    if ((tp->msg_enable & 2U) != 0U) {
      #line 7003 
      char *tmp_10;
      #line 7003 
      if (tp->mac_version <= (unsigned int)RTL_GIGA_MAC_VER_06) 
                                                                #line 7003 
                                                                tmp_10 = (char *)"ok"; else 
                                                                    #line 7003 
                                                                    tmp_10 = (char *)"ko";
      #line 7003 
      ;
      #line 7003 
      ;
      #line 7003 
      netdev_info(dev,(char *)"jumbo features [frames: %d bytes, tx checksumming: %s]\n",jumbo_max,tmp_10);
    }
  #line 7008 
  if ((int)r8168_check_dash(tp) != 0) 
                                      #line 7009 
                                      rtl8168_driver_start(tp);
  #line 7011 
  if ((int)pci_dev_run_wake(pdev) != 0) 
                                        #line 7012 
                                        pm_runtime_put_sync(& pdev->dev);
  #line 7014 
  return 0;
  #line 7016 
  err_mdio_unregister: 
                       #line 7016 
  ;
  #line 7017 
  mdiobus_unregister((tp->phydev)->mdio.bus);
  #line 7018 
  return rc;
}

#line 7021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static struct pci_driver rtl8169_pci_driver = {.name = (char *)"r8169", .id_table = (struct pci_device_id *)(& rtl8169_pci_tbl), .probe = & rtl_init_one, .remove = & rtl_remove_one, .shutdown = & rtl_shutdown, .driver = {.pm = & rtl8169_pm_ops}};
#line 7030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static int rtl8169_pci_driver_init(void)
{
  #line 7030 
  return cif___pci_register_driver(& rtl8169_pci_driver,& __this_module,
                                (char *)"r8169");
}

#line 7030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/realtek/r8169_main.c"
static void rtl8169_pci_driver_exit(void)
{
  #line 7030 
  cif_pci_unregister_driver(& rtl8169_pci_driver);
  #line 7031 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int (*emg_alias_phy_ethtool_nway_reset)(struct net_device *) = & phy_ethtool_nway_reset;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
struct pci_driver *emg_alias_rtl8169_pci_driver = & rtl8169_pci_driver;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
struct pci_device_id (*emg_alias_rtl8169_pci_tbl)[19U] = & rtl8169_pci_tbl;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
struct dev_pm_ops *emg_alias_rtl8169_pm_ops = & rtl8169_pm_ops;
#line 100 
#line 100 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 101 
#line 101 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 102 
#line 102 
_Bool emg_pm_runtime_active(struct device *arg0);
#line 103 
#line 103 
int emg_register_netdev(struct net_device *arg0);
#line 104 
#line 104 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 105 
#line 105 
void emg_unregister_netdev(struct net_device *arg0);
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_change_mtu(struct net_device *arg0, int arg1)
{
  #line 110 
  return rtl8169_change_mtu(arg0,arg1);
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_close(struct net_device *arg0)
{
  #line 115 
  return rtl8169_close(arg0);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
unsigned long long emg_wrapper_rtl8169_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 120 
  return rtl8169_features_check(arg0,arg1,arg2);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
unsigned long long emg_wrapper_rtl8169_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 125 
  return rtl8169_fix_features(arg0,arg1);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 130 
  rtl8169_get_drvinfo(arg0,arg1);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_get_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 135 
  return rtl8169_get_eee(arg0,arg1);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 140 
  rtl8169_get_ethtool_stats(arg0,arg1,arg2);
  #line 141 
  return;
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
unsigned int emg_wrapper_rtl8169_get_msglevel(struct net_device *arg0)
{
  #line 145 
  return rtl8169_get_msglevel(arg0);
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 150 
  rtl8169_get_regs(arg0,arg1,arg2);
  #line 151 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_get_regs_len(struct net_device *arg0)
{
  #line 155 
  return rtl8169_get_regs_len(arg0);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 160 
  return rtl8169_get_sset_count(arg0,arg1);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 165 
  rtl8169_get_stats64(arg0,arg1);
  #line 166 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 170 
  rtl8169_get_strings(arg0,arg1,arg2);
  #line 171 
  return;
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 175 
  rtl8169_get_wol(arg0,arg1);
  #line 176 
  return;
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 180 
  return rtl8169_ioctl(arg0,arg1,arg2);
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_netpoll(struct net_device *arg0)
{
  #line 185 
  rtl8169_netpoll(arg0);
  #line 186 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_resume(struct device *arg0)
{
  #line 190 
  return rtl8169_resume(arg0);
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_runtime_idle(struct device *arg0)
{
  #line 195 
  return rtl8169_runtime_idle(arg0);
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_runtime_resume(struct device *arg0)
{
  #line 200 
  return rtl8169_runtime_resume(arg0);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_runtime_suspend(struct device *arg0)
{
  #line 205 
  return rtl8169_runtime_suspend(arg0);
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_set_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 210 
  return rtl8169_set_eee(arg0,arg1);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 215 
  return rtl8169_set_features(arg0,arg1);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 220 
  rtl8169_set_msglevel(arg0,arg1);
  #line 221 
  return;
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 225 
  return rtl8169_set_wol(arg0,arg1);
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
enum netdev_tx emg_wrapper_rtl8169_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 230 
  return rtl8169_start_xmit(arg0,arg1);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl8169_suspend(struct device *arg0)
{
  #line 235 
  return rtl8169_suspend(arg0);
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl8169_tx_timeout(struct net_device *arg0)
{
  #line 240 
  rtl8169_tx_timeout(arg0);
  #line 241 
  return;
}

#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 245 
  return rtl_get_coalesce(arg0,arg1);
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl_init_one(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 250 
  return rtl_init_one(arg0,arg1);
}

#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl_open(struct net_device *arg0)
{
  #line 255 
  return rtl_open(arg0);
}

#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl_remove_one(struct pci_dev *arg0)
{
  #line 260 
  rtl_remove_one(arg0);
  #line 261 
  return;
}

#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 265 
  return rtl_set_coalesce(arg0,arg1);
}

#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_wrapper_rtl_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 270 
  return rtl_set_mac_address(arg0,arg1);
}

#line 274  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl_set_rx_mode(struct net_device *arg0)
{
  #line 275 
  rtl_set_rx_mode(arg0);
  #line 276 
  return;
}

#line 279  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_wrapper_rtl_shutdown(struct pci_dev *arg0)
{
  #line 280 
  rtl_shutdown(arg0);
  #line 281 
  return;
}

#line 284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
void emg_rtl8169_pci_driver_exit(void)
{
  #line 285 
  rtl8169_pci_driver_exit();
  #line 286 
  return;
}

#line 288  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
int emg_rtl8169_pci_driver_init(void)
{
  #line 289 
  return rtl8169_pci_driver_init();
}

#line 307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 310 
  ldv_set_bit(nr,addr);
  #line 311 
  return;
}

#line 314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 317 
  ldv_clear_bit(nr,addr);
  #line 318 
  return;
}

#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 324 
  ldv_init_list_head(list);
  #line 325 
  return;
}

#line 370  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 373 
  ldv_atomic_inc(v);
  #line 374 
  return;
}

#line 384  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 387 
  ldv_bitmap_zero(dst,nbits);
  #line 388 
  return;
}

#line 391  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void *ERR_PTR(long error)
{
  #line 394 
  return ldv_err_ptr(error);
}

#line 398  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 401 
  return ldv_ptr_err(ptr);
}

#line 405  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 408 
  return ldv_is_err(ptr);
}

#line 664  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 667 
  return ldv_kzalloc(size,flags);
}

#line 899  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 903 
  return emg_schedule_work(work);
}

#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_mutex_lock_mutex_of_NOT_ARG_SIGN(struct mutex *lock)
{
  #line 1024 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_NOT_ARG_SIGN");
  #line 1025 
  return;
}

#line 1028  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_mutex_unlock_mutex_of_NOT_ARG_SIGN(struct mutex *lock)
{
  #line 1031 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_NOT_ARG_SIGN");
  #line 1032 
  return;
}

#line 1035  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static bool cif_pm_runtime_active(struct device *dev)
{
  #line 1039 
  return emg_pm_runtime_active(dev);
}

#line 1043  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1047 
  emg_unregister_netdev(dev);
  #line 1048 
  return;
}

#line 1051  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1055 
  return emg_register_netdev(dev);
}

#line 1059  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1063 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1067  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/0/concurrency safety/weaver/r8169_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1071 
  emg_pci_unregister_driver(dev);
  #line 1072 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 36  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 77 
#line 110 
void emg_dispatch_deregister_3(struct pci_driver *arg0);
#line 78 
#line 130 
void emg_dispatch_deregister_7(struct net_device *arg0);
#line 79 
#line 99 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 80 
#line 119 
void emg_dispatch_register_5(struct net_device *arg0);
#line 81 
#line 1869 
void *emg_entry_point_insmod(void *arg0);
#line 82 
#line 139 
void *emg_net_random_allocationless_scenario_rtl_get_coalesce(void *arg0);
#line 83 
#line 552 
void *emg_pci_pci_scenario_rtl8169_pci_driver(void *arg0);
#line 85 
#line 728 
void *emg_pm_pm_ops_scenario_rtl8169_pm_ops(void *arg0);
#line 90 
#line 1898 
int main(void);
#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_10;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_8;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_9;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 100 
  int ret;
  #line 101 
  struct emg_struct_pci_scenario_rtl8169_pci_driver_9 *cf_arg_9;
  #line 102 
  cf_arg_9 = (struct emg_struct_pci_scenario_rtl8169_pci_driver_9 *)ldv_xmalloc(16UL);
  #line 103 
  cf_arg_9->arg0 = arg0;
  #line 104 
  ret = pthread_create(& emg_thread_9,(pthread_attr_t *)0,& emg_pci_pci_scenario_rtl8169_pci_driver,(void *)cf_arg_9);
  #line 105 
  __VERIFIER_assume(ret == 0);
  #line 106 
  return;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_3(struct pci_driver *arg0)
{
  #line 111 
  int ret;
  #line 112 
  struct emg_struct_pci_scenario_rtl8169_pci_driver_9 *cf_arg_9;
  #line 113 
  ret = pthread_join(emg_thread_9,(void **)0);
  #line 114 
  __VERIFIER_assume(ret == 0);
  #line 115 
  return;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct net_device *arg0)
{
  #line 120 
  int ret;
  #line 121 
  struct emg_struct_random_allocationless_scenario_rtl_get_coalesce_8 *cf_arg_8;
  #line 122 
  cf_arg_8 = (struct emg_struct_random_allocationless_scenario_rtl_get_coalesce_8 *)ldv_xmalloc(16UL);
  #line 123 
  cf_arg_8->arg0 = arg0;
  #line 124 
  ret = pthread_create(& emg_thread_8,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_rtl_get_coalesce,(void *)cf_arg_8);
  #line 125 
  __VERIFIER_assume(ret == 0);
  #line 126 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_7(struct net_device *arg0)
{
  #line 131 
  int ret;
  #line 132 
  struct emg_struct_random_allocationless_scenario_rtl_get_coalesce_8 *cf_arg_8;
  #line 133 
  ret = pthread_join(emg_thread_8,(void **)0);
  #line 134 
  __VERIFIER_assume(ret == 0);
  #line 135 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_rtl_get_coalesce(void *arg0)
{
  #line 142 
  struct net_device *emg_8_container;
  #line 143 
  struct sk_buff *emg_8_emg_param_0_16;
  #line 144 
  struct sk_buff *emg_8_emg_param_0_22;
  #line 145 
  struct ethtool_coalesce *emg_8_emg_param_1_0;
  #line 146 
  struct ethtool_drvinfo *emg_8_emg_param_1_1;
  #line 147 
  struct ethtool_ts_info *emg_8_emg_param_1_11;
  #line 148 
  struct ethtool_wolinfo *emg_8_emg_param_1_12;
  #line 149 
  int emg_8_emg_param_1_13;
  #line 150 
  struct ifreq *emg_8_emg_param_1_14;
  #line 151 
  unsigned long long emg_8_emg_param_1_18;
  #line 152 
  struct rtnl_link_stats64 *emg_8_emg_param_1_19;
  #line 153 
  struct ethtool_eee *emg_8_emg_param_1_2;
  #line 154 
  unsigned long long emg_8_emg_param_1_20;
  #line 155 
  void *emg_8_emg_param_1_21;
  #line 156 
  struct ethtool_coalesce *emg_8_emg_param_1_23;
  #line 157 
  struct ethtool_eee *emg_8_emg_param_1_24;
  #line 158 
  struct ethtool_link_ksettings *emg_8_emg_param_1_25;
  #line 159 
  unsigned int emg_8_emg_param_1_26;
  #line 160 
  struct ethtool_wolinfo *emg_8_emg_param_1_27;
  #line 161 
  struct ethtool_stats *emg_8_emg_param_1_3;
  #line 162 
  struct ethtool_link_ksettings *emg_8_emg_param_1_5;
  #line 163 
  struct ethtool_regs *emg_8_emg_param_1_6;
  #line 164 
  int emg_8_emg_param_1_8;
  #line 165 
  unsigned int emg_8_emg_param_1_9;
  #line 166 
  unsigned char *emg_8_emg_param_2_10;
  #line 167 
  int emg_8_emg_param_2_15;
  #line 168 
  unsigned long long emg_8_emg_param_2_17;
  #line 169 
  unsigned long long *emg_8_emg_param_2_4;
  #line 170 
  void *emg_8_emg_param_2_7;
  #line 171 
  int emg_repeat_cnt_call_8 = 1;
  #line 173 
  struct emg_struct_random_allocationless_scenario_rtl_get_coalesce_8 *data = (struct emg_struct_random_allocationless_scenario_rtl_get_coalesce_8 *)arg0;
  #line 178 
  if (data != (struct emg_struct_random_allocationless_scenario_rtl_get_coalesce_8 *)0) {
    #line 179 
    emg_8_container = data->arg0;
    #line 180 
    ldv_free((void *)data);
  }
  #line 185 
  goto emg_call_8;
  #line 189 
  return (void *)0;
  #line 192 
  emg_call_8: 
              #line 192 
  ;
  #line 193 
  switch (ldv_undef_int()) {
    #line 194 
    case 0: 
            #line 194 
    ;
    #line 196 
    emg_8_emg_param_1_27 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 196 
    emg_8_emg_param_1_27 = emg_8_emg_param_1_27;
    #line 200 
    emg_wrapper_rtl8169_set_wol(emg_8_container,emg_8_emg_param_1_27);
    #line 204 
    ldv_free((void *)emg_8_emg_param_1_27);
    #line 206 
    break;
    #line 208 
    case 1: 
            #line 208 
    ;
    #line 210 
    emg_wrapper_rtl8169_set_msglevel(emg_8_container,emg_8_emg_param_1_26);
    #line 212 
    break;
    #line 214 
    case 2: 
            #line 214 
    ;
    #line 216 
    emg_8_emg_param_1_25 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 216 
    emg_8_emg_param_1_25 = emg_8_emg_param_1_25;
    #line 220 
    phy_ethtool_set_link_ksettings(emg_8_container,emg_8_emg_param_1_25);
    #line 224 
    ldv_free((void *)emg_8_emg_param_1_25);
    #line 226 
    break;
    #line 228 
    case 3: 
            #line 228 
    ;
    #line 230 
    emg_8_emg_param_1_24 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 230 
    emg_8_emg_param_1_24 = emg_8_emg_param_1_24;
    #line 234 
    emg_wrapper_rtl8169_set_eee(emg_8_container,emg_8_emg_param_1_24);
    #line 238 
    ldv_free((void *)emg_8_emg_param_1_24);
    #line 240 
    break;
    #line 242 
    case 4: 
            #line 242 
    ;
    #line 244 
    emg_8_emg_param_1_23 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 244 
    emg_8_emg_param_1_23 = emg_8_emg_param_1_23;
    #line 248 
    emg_wrapper_rtl_set_coalesce(emg_8_container,emg_8_emg_param_1_23);
    #line 252 
    ldv_free((void *)emg_8_emg_param_1_23);
    #line 254 
    break;
    #line 256 
    case 5: 
            #line 256 
    ;
    #line 258 
    (*emg_alias_phy_ethtool_nway_reset)(emg_8_container);
    #line 260 
    break;
    #line 262 
    case 6: 
            #line 262 
    ;
    #line 264 
    (*emg_alias_eth_validate_addr)(emg_8_container);
    #line 266 
    break;
    #line 268 
    case 7: 
            #line 268 
    ;
    #line 270 
    emg_wrapper_rtl8169_tx_timeout(emg_8_container);
    #line 272 
    break;
    #line 274 
    case 8: 
            #line 274 
    ;
    #line 276 
    emg_8_emg_param_0_22 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 276 
    emg_8_emg_param_0_22 = emg_8_emg_param_0_22;
    #line 280 
    emg_wrapper_rtl8169_start_xmit(emg_8_emg_param_0_22,emg_8_container);
    #line 284 
    ldv_free((void *)emg_8_emg_param_0_22);
    #line 286 
    break;
    #line 288 
    case 9: 
            #line 288 
    ;
    #line 290 
    emg_wrapper_rtl_set_rx_mode(emg_8_container);
    #line 292 
    break;
    #line 294 
    case 10: 
             #line 294 
    ;
    #line 296 
    emg_8_emg_param_1_21 = ldv_xmalloc_unknown_size(0UL);
    #line 296 
    emg_8_emg_param_1_21 = emg_8_emg_param_1_21;
    #line 300 
    emg_wrapper_rtl_set_mac_address(emg_8_container,emg_8_emg_param_1_21);
    #line 304 
    ldv_free(emg_8_emg_param_1_21);
    #line 306 
    break;
    #line 308 
    case 11: 
             #line 308 
    ;
    #line 310 
    emg_wrapper_rtl8169_set_features(emg_8_container,emg_8_emg_param_1_20);
    #line 312 
    break;
    #line 314 
    case 12: 
             #line 314 
    ;
    #line 316 
    emg_wrapper_rtl8169_netpoll(emg_8_container);
    #line 318 
    break;
    #line 320 
    case 13: 
             #line 320 
    ;
    #line 322 
    emg_8_emg_param_1_19 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 322 
    emg_8_emg_param_1_19 = emg_8_emg_param_1_19;
    #line 326 
    emg_wrapper_rtl8169_get_stats64(emg_8_container,emg_8_emg_param_1_19);
    #line 330 
    ldv_free((void *)emg_8_emg_param_1_19);
    #line 332 
    break;
    #line 334 
    case 14: 
             #line 334 
    ;
    #line 336 
    emg_wrapper_rtl8169_fix_features(emg_8_container,emg_8_emg_param_1_18);
    #line 338 
    break;
    #line 340 
    case 15: 
             #line 340 
    ;
    #line 342 
    emg_8_emg_param_0_16 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 342 
    emg_8_emg_param_0_16 = emg_8_emg_param_0_16;
    #line 346 
    emg_wrapper_rtl8169_features_check(emg_8_emg_param_0_16,emg_8_container,emg_8_emg_param_2_17);
    #line 350 
    ldv_free((void *)emg_8_emg_param_0_16);
    #line 352 
    break;
    #line 354 
    case 16: 
             #line 354 
    ;
    #line 356 
    emg_8_emg_param_1_14 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 356 
    emg_8_emg_param_1_14 = emg_8_emg_param_1_14;
    #line 360 
    emg_wrapper_rtl8169_ioctl(emg_8_container,emg_8_emg_param_1_14,emg_8_emg_param_2_15);
    #line 364 
    ldv_free((void *)emg_8_emg_param_1_14);
    #line 366 
    break;
    #line 368 
    case 17: 
             #line 368 
    ;
    #line 370 
    emg_wrapper_rtl8169_change_mtu(emg_8_container,emg_8_emg_param_1_13);
    #line 372 
    break;
    #line 374 
    case 18: 
             #line 374 
    ;
    #line 376 
    emg_8_emg_param_1_12 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 376 
    emg_8_emg_param_1_12 = emg_8_emg_param_1_12;
    #line 380 
    emg_wrapper_rtl8169_get_wol(emg_8_container,emg_8_emg_param_1_12);
    #line 384 
    ldv_free((void *)emg_8_emg_param_1_12);
    #line 386 
    break;
    #line 388 
    case 19: 
             #line 388 
    ;
    #line 390 
    emg_8_emg_param_1_11 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 390 
    emg_8_emg_param_1_11 = emg_8_emg_param_1_11;
    #line 394 
    ethtool_op_get_ts_info(emg_8_container,emg_8_emg_param_1_11);
    #line 398 
    ldv_free((void *)emg_8_emg_param_1_11);
    #line 400 
    break;
    #line 402 
    case 20: 
             #line 402 
    ;
    #line 404 
    emg_8_emg_param_2_10 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 404 
    emg_8_emg_param_2_10 = emg_8_emg_param_2_10;
    #line 408 
    emg_wrapper_rtl8169_get_strings(emg_8_container,emg_8_emg_param_1_9,emg_8_emg_param_2_10);
    #line 412 
    ldv_free((void *)emg_8_emg_param_2_10);
    #line 414 
    break;
    #line 416 
    case 21: 
             #line 416 
    ;
    #line 418 
    emg_wrapper_rtl8169_get_sset_count(emg_8_container,emg_8_emg_param_1_8);
    #line 420 
    break;
    #line 422 
    case 22: 
             #line 422 
    ;
    #line 424 
    emg_wrapper_rtl8169_get_regs_len(emg_8_container);
    #line 426 
    break;
    #line 428 
    case 23: 
             #line 428 
    ;
    #line 430 
    emg_8_emg_param_1_6 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 430 
    emg_8_emg_param_1_6 = emg_8_emg_param_1_6;
    #line 431 
    emg_8_emg_param_2_7 = ldv_xmalloc_unknown_size(0UL);
    #line 431 
    emg_8_emg_param_2_7 = emg_8_emg_param_2_7;
    #line 435 
    emg_wrapper_rtl8169_get_regs(emg_8_container,emg_8_emg_param_1_6,emg_8_emg_param_2_7);
    #line 439 
    ldv_free((void *)emg_8_emg_param_1_6);
    #line 440 
    ldv_free(emg_8_emg_param_2_7);
    #line 442 
    break;
    #line 444 
    case 24: 
             #line 444 
    ;
    #line 446 
    emg_wrapper_rtl8169_get_msglevel(emg_8_container);
    #line 448 
    break;
    #line 450 
    case 25: 
             #line 450 
    ;
    #line 452 
    emg_8_emg_param_1_5 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 452 
    emg_8_emg_param_1_5 = emg_8_emg_param_1_5;
    #line 456 
    phy_ethtool_get_link_ksettings(emg_8_container,emg_8_emg_param_1_5);
    #line 460 
    ldv_free((void *)emg_8_emg_param_1_5);
    #line 462 
    break;
    #line 464 
    case 26: 
             #line 464 
    ;
    #line 466 
    ethtool_op_get_link(emg_8_container);
    #line 468 
    break;
    #line 470 
    case 27: 
             #line 470 
    ;
    #line 472 
    emg_8_emg_param_1_3 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 472 
    emg_8_emg_param_1_3 = emg_8_emg_param_1_3;
    #line 473 
    emg_8_emg_param_2_4 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 473 
    emg_8_emg_param_2_4 = emg_8_emg_param_2_4;
    #line 477 
    emg_wrapper_rtl8169_get_ethtool_stats(emg_8_container,emg_8_emg_param_1_3,emg_8_emg_param_2_4);
    #line 481 
    ldv_free((void *)emg_8_emg_param_1_3);
    #line 482 
    ldv_free((void *)emg_8_emg_param_2_4);
    #line 484 
    break;
    #line 486 
    case 28: 
             #line 486 
    ;
    #line 488 
    emg_8_emg_param_1_2 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 488 
    emg_8_emg_param_1_2 = emg_8_emg_param_1_2;
    #line 492 
    emg_wrapper_rtl8169_get_eee(emg_8_container,emg_8_emg_param_1_2);
    #line 496 
    ldv_free((void *)emg_8_emg_param_1_2);
    #line 498 
    break;
    #line 500 
    case 29: 
             #line 500 
    ;
    #line 502 
    emg_8_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 502 
    emg_8_emg_param_1_1 = emg_8_emg_param_1_1;
    #line 506 
    emg_wrapper_rtl8169_get_drvinfo(emg_8_container,emg_8_emg_param_1_1);
    #line 510 
    ldv_free((void *)emg_8_emg_param_1_1);
    #line 512 
    break;
    #line 514 
    case 30: 
             #line 514 
    ;
    #line 516 
    emg_8_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 516 
    emg_8_emg_param_1_0 = emg_8_emg_param_1_0;
    #line 520 
    emg_wrapper_rtl_get_coalesce(emg_8_container,emg_8_emg_param_1_0);
    #line 524 
    ldv_free((void *)emg_8_emg_param_1_0);
    #line 527 
    if (emg_repeat_cnt_call_8 > 0) {
      #line 528 
      emg_repeat_cnt_call_8 --;
      #line 530 
      goto emg_call_8;
    }
    else 
         #line 532 
         __VERIFIER_assume(0);
    #line 536 
    break;
    #line 538 
    case 31: 
             #line 538 
    ;
    #line 542 
    break;
    #line 544 
    default: 
             #line 544 
    ;
    #line 544 
    __VERIFIER_assume(0);
  }
  #line 547 
  return (void *)0;
}

#line 552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_rtl8169_pci_driver(void *arg0)
{
  #line 555 
  int emg_9_choice;
  #line 556 
  struct pci_driver *emg_9_container;
  #line 557 
  struct pci_device_id *emg_9_device_id;
  #line 558 
  struct pci_dev *emg_9_resource_0;
  #line 559 
  struct pm_message emg_9_resource_1;
  #line 560 
  int emg_9_ret;
  #line 561 
  int emg_repeat_cnt_call_9_1 = 1;
  #line 562 
  int emg_repeat_cnt_call_9_0 = 1;
  #line 563 
  int emg_repeat_cnt_main_9_1 = 1;
  #line 564 
  int emg_repeat_cnt_main_9_0 = 1;
  #line 566 
  struct emg_struct_pci_scenario_rtl8169_pci_driver_9 *data = (struct emg_struct_pci_scenario_rtl8169_pci_driver_9 *)arg0;
  #line 570 
  emg_9_choice = 0;
  #line 571 
  emg_9_ret = ldv_undef_int();
  #line 572 
  emg_9_choice = 0;
  #line 573 
  emg_9_container = emg_alias_rtl8169_pci_driver;
  #line 574 
  emg_9_ret = ldv_undef_int();
  #line 576 
  __VERIFIER_assume(data->arg0 == emg_alias_rtl8169_pci_driver);
  #line 578 
  if (data != (struct emg_struct_pci_scenario_rtl8169_pci_driver_9 *)0) {
    #line 579 
    emg_9_container = data->arg0;
    #line 580 
    ldv_free((void *)data);
  }
  #line 585 
  emg_9_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 586 
  emg_9_choice = __ldv_undef_int_range(0,18);
  #line 587 
  emg_9_device_id = emg_9_container->id_table + (unsigned long)emg_9_choice;
  #line 591 
  goto emg_main_9;
  #line 595 
  return (void *)0;
  #line 598 
  emg_call_9: 
              #line 598 
  ;
  #line 599 
  switch (ldv_undef_int()) {
    #line 600 
    case 0: 
            #line 600 
    ;
    #line 605 
    if (emg_repeat_cnt_call_9_0 > 0) {
      #line 606 
      emg_repeat_cnt_call_9_0 --;
      #line 608 
      goto emg_call_9;
    }
    else 
         #line 610 
         __VERIFIER_assume(0);
    #line 614 
    break;
    #line 616 
    case 1: 
            #line 616 
    ;
    #line 618 
    if (emg_9_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 619 
      emg_9_ret = (*(emg_9_container->suspend))(emg_9_resource_0,emg_9_resource_1); else 
                                                                    #line 621 
                                                                    emg_9_ret = ldv_undef_int();
    #line 627 
    emg_9_ret = ldv_filter_err_code(emg_9_ret);
    #line 631 
    if (emg_9_container->resume != (int (*)(struct pci_dev *))0) 
                                                                 #line 632 
                                                                 (*(emg_9_container->resume))(emg_9_resource_0);
    #line 636 
    if (emg_repeat_cnt_call_9_1 > 0) {
      #line 637 
      emg_repeat_cnt_call_9_1 --;
      #line 639 
      goto emg_call_9;
    }
    else 
         #line 641 
         __VERIFIER_assume(0);
    #line 645 
    break;
    #line 647 
    case 2: 
            #line 647 
    ;
    #line 649 
    emg_wrapper_rtl_shutdown(emg_9_resource_0);
    #line 653 
    emg_wrapper_rtl_remove_one(emg_9_resource_0);
    #line 656 
    if (emg_repeat_cnt_main_9_1 > 0) {
      #line 657 
      emg_repeat_cnt_main_9_1 --;
      #line 659 
      goto emg_main_9;
    }
    else 
         #line 661 
         __VERIFIER_assume(0);
    #line 665 
    break;
    #line 667 
    default: 
             #line 667 
    ;
    #line 667 
    __VERIFIER_assume(0);
  }
  #line 670 
  return (void *)0;
  #line 673 
  emg_main_9: 
              #line 673 
  ;
  #line 674 
  if (ldv_undef_int() != 0) {
    #line 677 
    ldv_pre_probe();
    #line 681 
    emg_9_ret = emg_wrapper_rtl_init_one(emg_9_resource_0,emg_9_device_id);
    #line 686 
    emg_9_ret = ldv_post_probe(emg_9_ret);
    #line 689 
    if (ldv_undef_int() != 0) {
      #line 691 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 695 
      goto emg_call_9;
    }
    else 
         #line 700 
         __VERIFIER_assume(emg_9_ret != 0);
    #line 704 
    if (emg_repeat_cnt_main_9_0 > 0) {
      #line 705 
      emg_repeat_cnt_main_9_0 --;
      #line 707 
      goto emg_main_9;
    }
    else 
         #line 709 
         __VERIFIER_assume(0);
  }
  else 
       #line 715 
       ldv_free((void *)emg_9_resource_0);
  #line 723 
  return (void *)0;
}

#line 728  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_rtl8169_pm_ops(void *arg0)
{
  #line 731 
  struct device *emg_10_device;
  #line 732 
  struct dev_pm_ops *emg_10_pm_ops;
  #line 733 
  int emg_10_ret;
  #line 734 
  int emg_repeat_cnt_rest_10 = 1;
  #line 735 
  int emg_repeat_cnt_tnoirq_10 = 1;
  #line 736 
  int emg_repeat_cnt_poff_10 = 1;
  #line 737 
  int emg_repeat_cnt_reslate_10 = 1;
  #line 738 
  int emg_repeat_cnt_res_10 = 1;
  #line 739 
  int emg_repeat_cnt_thlate_10 = 1;
  #line 740 
  int emg_repeat_cnt_sus_10 = 1;
  #line 741 
  int emg_repeat_cnt_restnoirq_10 = 1;
  #line 742 
  int emg_repeat_cnt_th_10 = 1;
  #line 743 
  int emg_repeat_cnt_reste_10 = 1;
  #line 744 
  int emg_repeat_cnt_run_resume_10 = 1;
  #line 745 
  int emg_repeat_cnt_fnoirq_10 = 1;
  #line 746 
  int emg_repeat_cnt_no_irq_10 = 1;
  #line 747 
  int emg_repeat_cnt_pno_irq_10 = 1;
  #line 748 
  int emg_repeat_cnt_slate_10 = 1;
  #line 749 
  int emg_repeat_cnt_fr_10 = 1;
  #line 750 
  int emg_repeat_cnt_plate_10 = 1;
  #line 751 
  int emg_repeat_cnt_flate_10 = 1;
  #line 752 
  int emg_repeat_cnt_resnoirq_10 = 1;
  #line 755 
  emg_10_ret = ldv_undef_int();
  #line 756 
  emg_10_pm_ops = emg_alias_rtl8169_pm_ops;
  #line 757 
  emg_10_ret = ldv_undef_int();
  #line 763 
  goto emg_do_10;
  #line 767 
  return (void *)0;
  #line 770 
  emg_compl_10: 
                #line 770 
  ;
  #line 772 
  if (emg_10_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 773 
                                                               (*(emg_10_pm_ops->complete))(emg_10_device);
  #line 781 
  return (void *)0;
  #line 784 
  emg_do_10: 
             #line 784 
  ;
  #line 785 
  switch (ldv_undef_int()) {
    #line 786 
    case 0: 
            #line 786 
    ;
    #line 788 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 792 
    goto emg_runt_10;
    #line 797 
    case 1: 
            #line 797 
    ;
    #line 799 
    goto emg_normal_10;
    #line 804 
    case 2: 
            #line 804 
    ;
    #line 808 
    break;
    #line 810 
    default: 
             #line 810 
    ;
    #line 810 
    __VERIFIER_assume(0);
  }
  #line 813 
  return (void *)0;
  #line 816 
  emg_flate_10: 
                #line 816 
  ;
  #line 818 
  if (emg_10_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 819 
                                                                 emg_10_ret = (*(emg_10_pm_ops->freeze_late))(emg_10_device); else 
                                                                    #line 821 
                                                                    emg_10_ret = ldv_undef_int();
  #line 827 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 830 
  if (ldv_undef_int() != 0) {
    #line 832 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 836 
    goto emg_thlate_10;
  }
  else 
       #line 841 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 845 
  if (emg_repeat_cnt_flate_10 > 0) {
    #line 846 
    emg_repeat_cnt_flate_10 --;
    #line 848 
    goto emg_flate_10;
  }
  else 
       #line 850 
       __VERIFIER_assume(0);
  #line 855 
  return (void *)0;
  #line 858 
  emg_fnoirq_10: 
                 #line 858 
  ;
  #line 860 
  if (emg_10_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 861 
                                                                  emg_10_ret = (*(emg_10_pm_ops->freeze_noirq))(emg_10_device); else 
                                                                    #line 863 
                                                                    emg_10_ret = ldv_undef_int();
  #line 869 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 872 
  if (ldv_undef_int() != 0) {
    #line 874 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 878 
    goto emg_tnoirq_10;
  }
  else 
       #line 883 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 887 
  if (emg_repeat_cnt_fnoirq_10 > 0) {
    #line 888 
    emg_repeat_cnt_fnoirq_10 --;
    #line 890 
    goto emg_fnoirq_10;
  }
  else 
       #line 892 
       __VERIFIER_assume(0);
  #line 897 
  return (void *)0;
  #line 900 
  emg_fr_10: 
             #line 900 
  ;
  #line 902 
  emg_10_ret = emg_wrapper_rtl8169_suspend(emg_10_device);
  #line 907 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 910 
  if (ldv_undef_int() != 0) {
    #line 912 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 915 
    if (ldv_undef_int() != 0) 
                              #line 917 
                              goto emg_fnoirq_10; else 
                                                       #line 922 
                                                       goto emg_flate_10;
  }
  else {
    #line 928 
    __VERIFIER_assume(emg_10_ret != 0);
    #line 931 
    if (emg_repeat_cnt_fr_10 > 0) {
      #line 932 
      emg_repeat_cnt_fr_10 --;
      #line 934 
      goto emg_fr_10;
    }
    else 
         #line 936 
         __VERIFIER_assume(0);
  }
  #line 942 
  return (void *)0;
  #line 945 
  emg_no_irq_10: 
                 #line 945 
  ;
  #line 947 
  if (emg_10_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 948 
                                                                   emg_10_ret = (*(emg_10_pm_ops->suspend_noirq))(emg_10_device); else 
                                                                    #line 950 
                                                                    emg_10_ret = ldv_undef_int();
  #line 956 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 959 
  if (ldv_undef_int() != 0) {
    #line 961 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 965 
    goto emg_resnoirq_10;
  }
  else 
       #line 970 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 974 
  if (emg_repeat_cnt_no_irq_10 > 0) {
    #line 975 
    emg_repeat_cnt_no_irq_10 --;
    #line 977 
    goto emg_no_irq_10;
  }
  else 
       #line 979 
       __VERIFIER_assume(0);
  #line 984 
  return (void *)0;
  #line 987 
  emg_normal_10: 
                 #line 987 
  ;
  #line 989 
  if (emg_10_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 990 
                                                             emg_10_ret = (*(emg_10_pm_ops->prepare))(emg_10_device); else 
                                                                    #line 992 
                                                                    emg_10_ret = ldv_undef_int();
  #line 998 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1001 
  if (ldv_undef_int() != 0) {
    #line 1003 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1006 
    switch (ldv_undef_int()) {
      #line 1007 
      case 0: 
              #line 1007 
      ;
      #line 1009 
      goto emg_sus_10;
      #line 1014 
      case 1: 
              #line 1014 
      ;
      #line 1016 
      goto emg_fr_10;
      #line 1021 
      case 2: 
              #line 1021 
      ;
      #line 1023 
      goto emg_poff_10;
      #line 1028 
      default: 
               #line 1028 
      ;
      #line 1028 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1032 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1040 
  return (void *)0;
  #line 1043 
  emg_plate_10: 
                #line 1043 
  ;
  #line 1045 
  if (emg_10_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1046 
                                                                   emg_10_ret = (*(emg_10_pm_ops->poweroff_late))(emg_10_device); else 
                                                                    #line 1048 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1054 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1057 
  if (ldv_undef_int() != 0) {
    #line 1059 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1063 
    goto emg_reste_10;
  }
  else 
       #line 1068 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1072 
  if (emg_repeat_cnt_plate_10 > 0) {
    #line 1073 
    emg_repeat_cnt_plate_10 --;
    #line 1075 
    goto emg_plate_10;
  }
  else 
       #line 1077 
       __VERIFIER_assume(0);
  #line 1082 
  return (void *)0;
  #line 1085 
  emg_pno_irq_10: 
                  #line 1085 
  ;
  #line 1087 
  if (emg_10_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1088 
                                                                    emg_10_ret = (*(emg_10_pm_ops->poweroff_noirq))(emg_10_device); else 
                                                                    #line 1090 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1096 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1099 
  if (ldv_undef_int() != 0) {
    #line 1101 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1105 
    goto emg_restnoirq_10;
  }
  else 
       #line 1110 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1114 
  if (emg_repeat_cnt_pno_irq_10 > 0) {
    #line 1115 
    emg_repeat_cnt_pno_irq_10 --;
    #line 1117 
    goto emg_pno_irq_10;
  }
  else 
       #line 1119 
       __VERIFIER_assume(0);
  #line 1124 
  return (void *)0;
  #line 1127 
  emg_poff_10: 
               #line 1127 
  ;
  #line 1129 
  emg_10_ret = emg_wrapper_rtl8169_suspend(emg_10_device);
  #line 1134 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1137 
  if (ldv_undef_int() != 0) {
    #line 1139 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1142 
    if (ldv_undef_int() != 0) 
                              #line 1144 
                              goto emg_pno_irq_10; else 
                                                        #line 1149 
                                                        goto emg_plate_10;
  }
  else {
    #line 1155 
    __VERIFIER_assume(emg_10_ret != 0);
    #line 1158 
    if (emg_repeat_cnt_poff_10 > 0) {
      #line 1159 
      emg_repeat_cnt_poff_10 --;
      #line 1161 
      goto emg_poff_10;
    }
    else 
         #line 1163 
         __VERIFIER_assume(0);
  }
  #line 1169 
  return (void *)0;
  #line 1172 
  emg_res_10: 
              #line 1172 
  ;
  #line 1174 
  emg_10_ret = emg_wrapper_rtl8169_resume(emg_10_device);
  #line 1179 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1182 
  if (ldv_undef_int() != 0) {
    #line 1184 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1188 
    goto emg_compl_10;
  }
  else {
    #line 1193 
    __VERIFIER_assume(emg_10_ret != 0);
    #line 1196 
    if (emg_repeat_cnt_res_10 > 0) {
      #line 1197 
      emg_repeat_cnt_res_10 --;
      #line 1199 
      goto emg_res_10;
    }
    else 
         #line 1201 
         __VERIFIER_assume(0);
  }
  #line 1207 
  return (void *)0;
  #line 1210 
  emg_reslate_10: 
                  #line 1210 
  ;
  #line 1212 
  if (emg_10_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1213 
                                                                  emg_10_ret = (*(emg_10_pm_ops->resume_early))(emg_10_device); else 
                                                                    #line 1215 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1221 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1224 
  if (ldv_undef_int() != 0) {
    #line 1226 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1230 
    goto emg_res_10;
  }
  else 
       #line 1235 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1239 
  if (emg_repeat_cnt_reslate_10 > 0) {
    #line 1240 
    emg_repeat_cnt_reslate_10 --;
    #line 1242 
    goto emg_reslate_10;
  }
  else 
       #line 1244 
       __VERIFIER_assume(0);
  #line 1249 
  return (void *)0;
  #line 1252 
  emg_resnoirq_10: 
                   #line 1252 
  ;
  #line 1254 
  if (emg_10_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1255 
                                                                  emg_10_ret = (*(emg_10_pm_ops->resume_noirq))(emg_10_device); else 
                                                                    #line 1257 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1263 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1266 
  if (ldv_undef_int() != 0) {
    #line 1268 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1272 
    goto emg_res_10;
  }
  else 
       #line 1277 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1281 
  if (emg_repeat_cnt_resnoirq_10 > 0) {
    #line 1282 
    emg_repeat_cnt_resnoirq_10 --;
    #line 1284 
    goto emg_resnoirq_10;
  }
  else 
       #line 1286 
       __VERIFIER_assume(0);
  #line 1291 
  return (void *)0;
  #line 1294 
  emg_rest_10: 
               #line 1294 
  ;
  #line 1296 
  emg_10_ret = emg_wrapper_rtl8169_resume(emg_10_device);
  #line 1301 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1304 
  if (ldv_undef_int() != 0) {
    #line 1306 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1310 
    goto emg_compl_10;
  }
  else {
    #line 1315 
    __VERIFIER_assume(emg_10_ret != 0);
    #line 1318 
    if (emg_repeat_cnt_rest_10 > 0) {
      #line 1319 
      emg_repeat_cnt_rest_10 --;
      #line 1321 
      goto emg_rest_10;
    }
    else 
         #line 1323 
         __VERIFIER_assume(0);
  }
  #line 1329 
  return (void *)0;
  #line 1332 
  emg_reste_10: 
                #line 1332 
  ;
  #line 1334 
  if (emg_10_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1335 
                                                                   emg_10_ret = (*(emg_10_pm_ops->restore_early))(emg_10_device); else 
                                                                    #line 1337 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1343 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1346 
  if (ldv_undef_int() != 0) {
    #line 1348 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1352 
    goto emg_rest_10;
  }
  else 
       #line 1357 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1361 
  if (emg_repeat_cnt_reste_10 > 0) {
    #line 1362 
    emg_repeat_cnt_reste_10 --;
    #line 1364 
    goto emg_reste_10;
  }
  else 
       #line 1366 
       __VERIFIER_assume(0);
  #line 1371 
  return (void *)0;
  #line 1374 
  emg_restnoirq_10: 
                    #line 1374 
  ;
  #line 1376 
  if (emg_10_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1377 
                                                                   emg_10_ret = (*(emg_10_pm_ops->restore_noirq))(emg_10_device); else 
                                                                    #line 1379 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1385 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1388 
  if (ldv_undef_int() != 0) {
    #line 1390 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1394 
    goto emg_rest_10;
  }
  else 
       #line 1399 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1403 
  if (emg_repeat_cnt_restnoirq_10 > 0) {
    #line 1404 
    emg_repeat_cnt_restnoirq_10 --;
    #line 1406 
    goto emg_restnoirq_10;
  }
  else 
       #line 1408 
       __VERIFIER_assume(0);
  #line 1413 
  return (void *)0;
  #line 1416 
  emg_run_resume_10: 
                     #line 1416 
  ;
  #line 1418 
  emg_10_ret = emg_wrapper_rtl8169_runtime_resume(emg_10_device);
  #line 1423 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1424 
  if (emg_10_ret != 0) 
                       #line 1425 
                       emg_runtime_lowpower = 0;
  #line 1428 
  if (ldv_undef_int() != 0) 
                            #line 1430 
                            __VERIFIER_assume(emg_10_ret == 0);
  else {
    #line 1434 
    __VERIFIER_assume(emg_10_ret != 0);
    #line 1437 
    if (emg_repeat_cnt_run_resume_10 > 0) {
      #line 1438 
      emg_repeat_cnt_run_resume_10 --;
      #line 1440 
      goto emg_run_resume_10;
    }
    else 
         #line 1442 
         __VERIFIER_assume(0);
  }
  #line 1452 
  return (void *)0;
  #line 1455 
  emg_runt_10: 
               #line 1455 
  ;
  #line 1456 
  if (ldv_undef_int() != 0) {
    #line 1458 
    emg_10_ret = emg_wrapper_rtl8169_runtime_idle(emg_10_device);
    #line 1463 
    emg_10_ret = ldv_post_probe(emg_10_ret);
  }
  else {
    #line 1467 
    emg_10_ret = emg_wrapper_rtl8169_runtime_suspend(emg_10_device);
    #line 1472 
    emg_10_ret = ldv_post_probe(emg_10_ret);
    #line 1473 
    if (emg_10_ret != 0) 
                         #line 1474 
                         emg_runtime_lowpower = 1;
    #line 1477 
    if (ldv_undef_int() != 0) {
      #line 1479 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 1483 
      goto emg_run_resume_10;
    }
    else 
         #line 1488 
         __VERIFIER_assume(emg_10_ret != 0);
  }
  #line 1497 
  return (void *)0;
  #line 1500 
  emg_slate_10: 
                #line 1500 
  ;
  #line 1502 
  if (emg_10_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 1503 
                                                                  emg_10_ret = (*(emg_10_pm_ops->suspend_late))(emg_10_device); else 
                                                                    #line 1505 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1511 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1514 
  if (ldv_undef_int() != 0) {
    #line 1516 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1520 
    goto emg_reslate_10;
  }
  else 
       #line 1525 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1529 
  if (emg_repeat_cnt_slate_10 > 0) {
    #line 1530 
    emg_repeat_cnt_slate_10 --;
    #line 1532 
    goto emg_slate_10;
  }
  else 
       #line 1534 
       __VERIFIER_assume(0);
  #line 1539 
  return (void *)0;
  #line 1542 
  emg_sus_10: 
              #line 1542 
  ;
  #line 1544 
  emg_10_ret = emg_wrapper_rtl8169_suspend(emg_10_device);
  #line 1549 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1552 
  if (ldv_undef_int() != 0) {
    #line 1554 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1557 
    if (ldv_undef_int() != 0) 
                              #line 1559 
                              goto emg_no_irq_10; else 
                                                       #line 1564 
                                                       goto emg_slate_10;
  }
  else {
    #line 1570 
    __VERIFIER_assume(emg_10_ret != 0);
    #line 1573 
    if (emg_repeat_cnt_sus_10 > 0) {
      #line 1574 
      emg_repeat_cnt_sus_10 --;
      #line 1576 
      goto emg_sus_10;
    }
    else 
         #line 1578 
         __VERIFIER_assume(0);
  }
  #line 1584 
  return (void *)0;
  #line 1587 
  emg_th_10: 
             #line 1587 
  ;
  #line 1589 
  emg_10_ret = emg_wrapper_rtl8169_resume(emg_10_device);
  #line 1594 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1597 
  if (ldv_undef_int() != 0) {
    #line 1599 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1603 
    goto emg_compl_10;
  }
  else {
    #line 1608 
    __VERIFIER_assume(emg_10_ret != 0);
    #line 1611 
    if (emg_repeat_cnt_th_10 > 0) {
      #line 1612 
      emg_repeat_cnt_th_10 --;
      #line 1614 
      goto emg_th_10;
    }
    else 
         #line 1616 
         __VERIFIER_assume(0);
  }
  #line 1622 
  return (void *)0;
  #line 1625 
  emg_thlate_10: 
                 #line 1625 
  ;
  #line 1627 
  if (emg_10_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 1628 
                                                                emg_10_ret = (*(emg_10_pm_ops->thaw_early))(emg_10_device); else 
                                                                    #line 1630 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1636 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1639 
  if (ldv_undef_int() != 0) {
    #line 1641 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1645 
    goto emg_th_10;
  }
  else 
       #line 1650 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1654 
  if (emg_repeat_cnt_thlate_10 > 0) {
    #line 1655 
    emg_repeat_cnt_thlate_10 --;
    #line 1657 
    goto emg_thlate_10;
  }
  else 
       #line 1659 
       __VERIFIER_assume(0);
  #line 1664 
  return (void *)0;
  #line 1667 
  emg_tnoirq_10: 
                 #line 1667 
  ;
  #line 1669 
  if (emg_10_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 1670 
                                                                emg_10_ret = (*(emg_10_pm_ops->thaw_noirq))(emg_10_device); else 
                                                                    #line 1672 
                                                                    emg_10_ret = ldv_undef_int();
  #line 1678 
  emg_10_ret = ldv_post_probe(emg_10_ret);
  #line 1681 
  if (ldv_undef_int() != 0) {
    #line 1683 
    __VERIFIER_assume(emg_10_ret == 0);
    #line 1687 
    goto emg_th_10;
  }
  else 
       #line 1692 
       __VERIFIER_assume(emg_10_ret != 0);
  #line 1696 
  if (emg_repeat_cnt_tnoirq_10 > 0) {
    #line 1697 
    emg_repeat_cnt_tnoirq_10 --;
    #line 1699 
    goto emg_tnoirq_10;
  }
  else 
       #line 1701 
       __VERIFIER_assume(0);
  #line 1706 
  return (void *)0;
}

#line 1711  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1714 
  struct pci_driver *emg_2_pci_driver;
  #line 1716 
  emg_2_pci_driver = emg_alias_rtl8169_pci_driver;
  #line 1717 
  if (ldv_undef_int() != 0) {
    #line 1719 
    emg_2_pci_driver = arg0;
    #line 1723 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1727 
    return 0;
  }
  else {
    #line 1731 
    return ldv_undef_int_negative();
  }
}

#line 1739  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1742 
  struct pci_driver *emg_3_pci_driver;
  #line 1744 
  emg_3_pci_driver = emg_alias_rtl8169_pci_driver;
  #line 1746 
  emg_3_pci_driver = arg0;
  #line 1750 
  emg_dispatch_deregister_3(emg_3_pci_driver);
  #line 1753 
  return;
}

#line 1758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_pm_runtime_active(struct device *arg0)
{
  #line 1763 
  return (_Bool)(emg_runtime_lowpower != 1);
}

#line 1770  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1773 
  struct net_device *emg_5_netdev;
  #line 1774 
  int emg_5_ret;
  #line 1777 
  emg_5_ret = ldv_undef_int();
  #line 1778 
  emg_5_ret = ldv_undef_int();
  #line 1779 
  if (ldv_undef_int() != 0) {
    #line 1781 
    emg_5_netdev = arg0;
    #line 1785 
    emg_5_ret = emg_wrapper_rtl_open(emg_5_netdev);
    #line 1788 
    if (ldv_undef_int() != 0) {
      #line 1790 
      __VERIFIER_assume(emg_5_ret == 0);
      #line 1794 
      emg_dispatch_register_5(emg_5_netdev);
      #line 1798 
      return 0;
    }
    else {
      #line 1802 
      __VERIFIER_assume(emg_5_ret != 0);
      #line 1803 
      ldv_failed_register_netdev();
      #line 1804 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1809 
    ldv_failed_register_netdev();
    #line 1810 
    return ldv_undef_int_negative();
  }
}

#line 1818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1821 
  struct work_struct *emg_6_work_struct;
  #line 1823 
  if (ldv_undef_int() != 0) {
    #line 1825 
    emg_6_work_struct = arg0;
    #line 1829 
    if (emg_6_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1830 
      (*(emg_6_work_struct->func))(emg_6_work_struct);
    #line 1835 
    return (_Bool)1;
  }
  else 
       #line 1839 
       return (_Bool)0;
}

#line 1847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1850 
  struct net_device *emg_7_netdev;
  #line 1853 
  emg_7_netdev = arg0;
  #line 1857 
  emg_wrapper_rtl8169_close(emg_7_netdev);
  #line 1861 
  emg_dispatch_deregister_7(emg_7_netdev);
  #line 1864 
  return;
}

#line 1869  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1872 
  int emg_1_ret;
  #line 1875 
  emg_1_ret = emg_rtl8169_pci_driver_init();
  #line 1876 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1879 
  if (ldv_undef_int() != 0) {
    #line 1881 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1885 
    emg_rtl8169_pci_driver_exit();
  }
  else 
       #line 1889 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1893 
  return (void *)0;
}

#line 1898  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/realtek/r8169.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1900 
  ldv_initialize();
  #line 1902 
  emg_entry_point_insmod((void *)0);
  #line 1904 
  return 0;
}

